{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "awayjs-renderergl.js",
    "../index.ts",
    "lib/DefaultRenderer.ts",
    "lib/DepthRenderer.ts",
    "lib/DistanceRenderer.ts",
    "lib/Filter3DRenderer.ts",
    "lib/RendererBase.ts",
    "lib/lib/animators/AnimationSetBase.ts",
    "lib/lib/animators/AnimatorBase.ts",
    "lib/lib/animators/ParticleAnimationSet.ts",
    "lib/lib/animators/ParticleAnimator.ts",
    "lib/lib/animators/SkeletonAnimationSet.ts",
    "lib/lib/animators/SkeletonAnimator.ts",
    "lib/lib/animators/VertexAnimationSet.ts",
    "lib/lib/animators/VertexAnimator.ts",
    "lib/animators/lib/animators/data/AnimationElements.ts",
    "lib/animators/lib/animators/data/AnimationRegisterData.ts",
    "lib/animators/lib/animators/data/ColorSegmentPoint.ts",
    "lib/animators/lib/animators/data/JointPose.ts",
    "lib/animators/lib/animators/data/ParticleAnimationData.ts",
    "lib/animators/lib/animators/data/ParticlePropertiesMode.ts",
    "lib/animators/lib/animators/data/ParticleProperties.ts",
    "lib/animators/lib/animators/data/SkeletonJoint.ts",
    "lib/animators/lib/animators/data/SkeletonPose.ts",
    "lib/animators/lib/animators/data/Skeleton.ts",
    "lib/animators/lib/animators/data/VertexAnimationMode.ts",
    "lib/animators/lib/animators/nodes/AnimationClipNodeBase.ts",
    "lib/animators/lib/animators/nodes/ParticleAccelerationNode.ts",
    "lib/animators/lib/animators/nodes/ParticleBezierCurveNode.ts",
    "lib/animators/lib/animators/nodes/ParticleBillboardNode.ts",
    "lib/animators/lib/animators/nodes/ParticleColorNode.ts",
    "lib/animators/lib/animators/nodes/ParticleFollowNode.ts",
    "lib/animators/lib/animators/nodes/ParticleInitialColorNode.ts",
    "lib/animators/lib/animators/nodes/ParticleNodeBase.ts",
    "lib/animators/lib/animators/nodes/ParticleOrbitNode.ts",
    "lib/animators/lib/animators/nodes/ParticleOscillatorNode.ts",
    "lib/animators/lib/animators/nodes/ParticlePositionNode.ts",
    "lib/animators/lib/animators/nodes/ParticleRotateToHeadingNode.ts",
    "lib/animators/lib/animators/nodes/ParticleRotateToPositionNode.ts",
    "lib/animators/lib/animators/nodes/ParticleRotationalVelocityNode.ts",
    "lib/animators/lib/animators/nodes/ParticleScaleNode.ts",
    "lib/animators/lib/animators/nodes/ParticleSegmentedColorNode.ts",
    "lib/animators/lib/animators/nodes/ParticleSpriteSheetNode.ts",
    "lib/animators/lib/animators/nodes/ParticleTimeNode.ts",
    "lib/animators/lib/animators/nodes/ParticleUVNode.ts",
    "lib/animators/lib/animators/nodes/ParticleVelocityNode.ts",
    "lib/animators/lib/animators/nodes/SkeletonBinaryLERPNode.ts",
    "lib/animators/lib/animators/nodes/SkeletonClipNode.ts",
    "lib/animators/lib/animators/nodes/SkeletonDifferenceNode.ts",
    "lib/animators/lib/animators/nodes/SkeletonDirectionalNode.ts",
    "lib/animators/lib/animators/nodes/SkeletonNaryLERPNode.ts",
    "lib/animators/lib/animators/nodes/VertexClipNode.ts",
    "lib/animators/lib/animators/states/AnimationClipState.ts",
    "lib/animators/lib/animators/states/AnimationStateBase.ts",
    "lib/animators/lib/animators/states/ParticleAccelerationState.ts",
    "lib/animators/lib/animators/states/ParticleBezierCurveState.ts",
    "lib/animators/lib/animators/states/ParticleBillboardState.ts",
    "lib/animators/lib/animators/states/ParticleColorState.ts",
    "lib/animators/lib/animators/states/ParticleFollowState.ts",
    "lib/animators/lib/animators/states/ParticleInitialColorState.ts",
    "lib/animators/lib/animators/states/ParticleOrbitState.ts",
    "lib/animators/lib/animators/states/ParticleOscillatorState.ts",
    "lib/animators/lib/animators/states/ParticlePositionState.ts",
    "lib/animators/lib/animators/states/ParticleRotateToHeadingState.ts",
    "lib/animators/lib/animators/states/ParticleRotateToPositionState.ts",
    "lib/animators/lib/animators/states/ParticleRotationalVelocityState.ts",
    "lib/animators/lib/animators/states/ParticleScaleState.ts",
    "lib/animators/lib/animators/states/ParticleSegmentedColorState.ts",
    "lib/animators/lib/animators/states/ParticleSpriteSheetState.ts",
    "lib/animators/lib/animators/states/ParticleStateBase.ts",
    "lib/animators/lib/animators/states/ParticleTimeState.ts",
    "lib/animators/lib/animators/states/ParticleUVState.ts",
    "lib/animators/lib/animators/states/ParticleVelocityState.ts",
    "lib/animators/lib/animators/states/SkeletonBinaryLERPState.ts",
    "lib/animators/lib/animators/states/SkeletonClipState.ts",
    "lib/animators/lib/animators/states/SkeletonDifferenceState.ts",
    "lib/animators/lib/animators/states/SkeletonDirectionalState.ts",
    "lib/animators/lib/animators/states/SkeletonNaryLERPState.ts",
    "lib/animators/lib/animators/states/VertexClipState.ts",
    "lib/animators/lib/animators/transitions/CrossfadeTransitionNode.ts",
    "lib/animators/lib/animators/transitions/CrossfadeTransitionState.ts",
    "lib/animators/lib/animators/transitions/CrossfadeTransition.ts",
    "lib/animators.ts",
    "lib/lib/elements/GL_ElementsBase.ts",
    "lib/lib/elements/GL_LineElements.ts",
    "lib/lib/elements/GL_SkyboxElements.ts",
    "lib/lib/elements/GL_TriangleElements.ts",
    "lib/elements.ts",
    "lib/lib/errors/AnimationSetError.ts",
    "lib/errors.ts",
    "lib/lib/events/AnimationStateEvent.ts",
    "lib/lib/events/AnimatorEvent.ts",
    "lib/lib/events/PassEvent.ts",
    "lib/lib/events/RTTEvent.ts",
    "lib/lib/events/ShadingMethodEvent.ts",
    "lib/events.ts",
    "lib/lib/filters/BlurFilter3D.ts",
    "lib/lib/filters/CompositeFilter3D.ts",
    "lib/lib/filters/FXAAFilter3D.ts",
    "lib/lib/filters/Filter3DBase.ts",
    "lib/filters/lib/filters/tasks/Filter3DCompositeTask.ts",
    "lib/filters/lib/filters/tasks/Filter3DFXAATask.ts",
    "lib/filters/lib/filters/tasks/Filter3DHBlurTask.ts",
    "lib/filters/lib/filters/tasks/Filter3DTaskBase.ts",
    "lib/filters/lib/filters/tasks/Filter3DVBlurTask.ts",
    "lib/filters.ts",
    "lib/lib/managers/RTTBufferManager.ts",
    "lib/managers.ts",
    "lib/lib/renderables/GL_BillboardRenderable.ts",
    "lib/lib/renderables/GL_GraphicRenderable.ts",
    "lib/lib/renderables/GL_LineSegmentRenderable.ts",
    "lib/lib/renderables/GL_RenderableBase.ts",
    "lib/lib/renderables/GL_SkyboxRenderable.ts",
    "lib/renderables.ts",
    "lib/lib/shaders/LightingShader.ts",
    "lib/lib/shaders/RegisterPool.ts",
    "lib/lib/shaders/ShaderBase.ts",
    "lib/lib/shaders/ShaderRegisterCache.ts",
    "lib/lib/shaders/ShaderRegisterData.ts",
    "lib/lib/shaders/ShaderRegisterElement.ts",
    "lib/shaders/lib/shaders/compilers/CompilerBase.ts",
    "lib/shaders/lib/shaders/compilers/LightingCompiler.ts",
    "lib/shaders.ts",
    "lib/lib/sort/RenderableMergeSort.ts",
    "lib/lib/sort/RenderableNullSort.ts",
    "lib/sort.ts",
    "lib/lib/surfaces/GL_BasicMaterialSurface.ts",
    "lib/lib/surfaces/GL_DepthSurface.ts",
    "lib/lib/surfaces/GL_DistanceSurface.ts",
    "lib/lib/surfaces/GL_SkyboxSurface.ts",
    "lib/lib/surfaces/GL_SurfaceBase.ts",
    "lib/lib/surfaces/GL_SurfacePassBase.ts",
    "lib/lib/surfaces/SurfacePool.ts",
    "lib/surfaces/lib/surfaces/passes/BasicMaterialPass.ts",
    "lib/surfaces/lib/surfaces/passes/PassBase.ts",
    "lib/surfaces.ts",
    "lib/lib/textures/GL_Single2DTexture.ts",
    "lib/lib/textures/GL_SingleCubeTexture.ts",
    "lib/lib/textures/GL_TextureBase.ts",
    "lib/textures.ts",
    "lib/tools/lib/tools/commands/Merge.ts",
    "lib/tools/lib/tools/data/ParticleGraphicsTransform.ts",
    "lib/tools.ts",
    "lib/lib/utils/ParticleGraphicsHelper.ts",
    "lib/lib/utils/PerspectiveMatrix3D.ts",
    "lib/utils.ts"
  ],
  "names": [
    "require",
    "e",
    "t",
    "n",
    "r",
    "s",
    "o",
    "u",
    "a",
    "i",
    "f",
    "Error",
    "code",
    "l",
    "exports",
    "call",
    "length",
    1,
    "module",
    "animators",
    "elements",
    "errors",
    "events",
    "filters",
    "managers",
    "renderables",
    "shaders",
    "sort",
    "surfaces",
    "textures",
    "tools",
    "utils",
    "DefaultRenderer_1",
    "DefaultRenderer",
    "DepthRenderer_1",
    "DepthRenderer",
    "DistanceRenderer_1",
    "DistanceRenderer",
    "Filter3DRenderer_1",
    "Filter3DRenderer",
    "RendererBase_1",
    "RendererBase",
    "BasicMaterial_1",
    "Skybox_1",
    "Billboard_1",
    "LineSegment_1",
    "LineElements_1",
    "TriangleElements_1",
    "Graphic_1",
    "Single2DTexture_1",
    "SingleCubeTexture_1",
    "Stage_1",
    "SurfacePool",
    "registerAbstraction",
    "GL_BasicMaterialSurface",
    "BasicMaterial",
    "GL_SkyboxSurface",
    "Skybox",
    "Stage",
    "GL_LineElements",
    "LineElements",
    "GL_TriangleElements",
    "TriangleElements",
    "ShaderBase",
    "GL_Single2DTexture",
    "Single2DTexture",
    "GL_SingleCubeTexture",
    "SingleCubeTexture",
    "GL_BillboardRenderable",
    "Billboard",
    "GL_LineSegmentRenderable",
    "LineSegment",
    "GL_GraphicRenderable",
    "Graphic",
    "GL_SkyboxRenderable",
    "./lib/DefaultRenderer",
    "./lib/DepthRenderer",
    "./lib/DistanceRenderer",
    "./lib/Filter3DRenderer",
    "./lib/RendererBase",
    "./lib/animators",
    "./lib/elements",
    "./lib/errors",
    "./lib/events",
    "./lib/filters",
    "./lib/managers",
    "./lib/renderables",
    "./lib/shaders",
    "./lib/sort",
    "./lib/surfaces",
    "./lib/textures",
    "./lib/tools",
    "./lib/utils",
    "awayjs-display/lib/display/Billboard",
    "undefined",
    "awayjs-display/lib/display/LineSegment",
    "awayjs-display/lib/display/Skybox",
    "awayjs-display/lib/graphics/Graphic",
    "awayjs-display/lib/graphics/LineElements",
    "awayjs-display/lib/graphics/TriangleElements",
    "awayjs-display/lib/materials/BasicMaterial",
    "awayjs-display/lib/textures/Single2DTexture",
    "awayjs-display/lib/textures/SingleCubeTexture",
    "awayjs-stagegl/lib/base/Stage",
    "awayjs-renderergl/lib/DefaultRenderer",
    "__extends",
    "this",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "__",
    "constructor",
    "prototype",
    "Object",
    "create",
    "BitmapImage2D_1",
    "ContextGLClearMask_1",
    "RTTBufferManager_1",
    "_super",
    "stage",
    "forceSoftware",
    "profile",
    "mode",
    "_antiAlias",
    "_directionalLights",
    "Array",
    "_pointLights",
    "_lightProbes",
    "shareContext",
    "_pRttBufferManager",
    "RTTBufferManager",
    "getInstance",
    "_pStage",
    "_pDepthRenderer",
    "_pDistanceRenderer",
    "_width",
    "width",
    "window",
    "innerWidth",
    "viewWidth",
    "_height",
    "height",
    "innerHeight",
    "viewHeight",
    "defineProperty",
    "get",
    "set",
    "value",
    "_pBackBufferInvalid",
    "enumerable",
    "configurable",
    "_depthPrepass",
    "_pFilter3DRenderer",
    "dispose",
    "_pRequireDepthRender",
    "requireDepthRender",
    "_pDepthRender",
    "enterNode",
    "node",
    "enter",
    "debugVisible",
    "applyEntity",
    "bounds",
    "boundsPrimitive",
    "render",
    "camera",
    "scene",
    "recoverFromDisposal",
    "pUpdateBackBuffer",
    "_pContext",
    "clear",
    "ContextGLClearMask",
    "DEPTH",
    "textureRatioX",
    "textureRatioY",
    "pRenderSceneDepthToTexture",
    "pRenderDepthPrepass",
    "_iRender",
    "getMainInputTexture",
    "renderToTextureRect",
    "_pScissorRect",
    "present",
    "bufferClear",
    "pExecuteRender",
    "target",
    "scissorRect",
    "surfaceSelector",
    "updateLights",
    "len",
    "light",
    "shadowMapper",
    "shadowsEnabled",
    "autoUpdateShadows",
    "_iShadowsInvalid",
    "iRenderDepthMap",
    "applyDirectionalLight",
    "entity",
    "push",
    "applyLightProbe",
    "applyPointLight",
    "disableColor",
    "_pDepthTextureInvalid",
    "initDepthTexture",
    "context",
    "configureBackBuffer",
    "BitmapImage2D",
    "textureWidth",
    "textureHeight",
    "./DepthRenderer",
    "./DistanceRenderer",
    "./Filter3DRenderer",
    "./RendererBase",
    "./managers/RTTBufferManager",
    "awayjs-core/lib/image/BitmapImage2D",
    "awayjs-stagegl/lib/base/ContextGLClearMask",
    "awayjs-renderergl/lib/DepthRenderer",
    "GL_DepthSurface_1",
    "GL_DepthSurface",
    "_iBackgroundR",
    "_iBackgroundG",
    "_iBackgroundB",
    "_iCollectionMark",
    "isCastingShadow",
    "./surfaces/GL_DepthSurface",
    "awayjs-renderergl/lib/DistanceRenderer",
    "GL_DistanceSurface_1",
    "GL_DistanceSurface",
    "./surfaces/GL_DistanceSurface",
    "awayjs-renderergl/lib/Filter3DRenderer",
    "ContextGLDrawMode_1",
    "ContextGLBlendFactor_1",
    "ContextGLVertexBufferFormat_1",
    "RTTEvent_1",
    "_this",
    "_filterSizesInvalid",
    "_onRTTResizeDelegate",
    "event",
    "onRTTResize",
    "_stage",
    "_rttManager",
    "addEventListener",
    "RTTEvent",
    "RESIZE",
    "_requireDepthRender",
    "_filterTasksInvalid",
    "updateFilterTasks",
    "_mainInputTexture",
    "_filters",
    "updateFilterSizes",
    "_tasks",
    "filter",
    "setRenderTargets",
    "concat",
    "tasks",
    "depthTexture",
    "task",
    "indexBuffer",
    "vertexBuffer",
    "renderToTextureVertexBuffer",
    "update",
    "setProgram",
    "getProgram",
    "setVertexBufferAt",
    "_positionIndex",
    "ContextGLVertexBufferFormat",
    "FLOAT_2",
    "_uvIndex",
    "setRenderTarget",
    "getAbstraction",
    "activate",
    "_inputTextureIndex",
    "renderToScreenVertexBuffer",
    "setBlendFactors",
    "ContextGLBlendFactor",
    "ONE",
    "ZERO",
    "drawIndices",
    "ContextGLDrawMode",
    "TRIANGLES",
    "deactivate",
    "setTextureAt",
    "rttManager",
    "removeEventListener",
    "./events/RTTEvent",
    "awayjs-stagegl/lib/base/ContextGLBlendFactor",
    "awayjs-stagegl/lib/base/ContextGLDrawMode",
    "awayjs-stagegl/lib/base/ContextGLVertexBufferFormat",
    "awayjs-renderergl/lib/RendererBase",
    "Matrix3D_1",
    "Matrix3DUtils_1",
    "Point_1",
    "Rectangle_1",
    "Vector3D_1",
    "EventDispatcher_1",
    "RendererEvent_1",
    "AGALMiniAssembler_1",
    "ContextGLCompareMode_1",
    "StageEvent_1",
    "StageManager_1",
    "SurfacePool_1",
    "RenderableMergeSort_1",
    "surfaceClassGL",
    "_objectPools",
    "_abstractionPool",
    "_activeMasksConfig",
    "_registeredMasks",
    "_numUsedStreams",
    "_numUsedTextures",
    "_cameraForward",
    "Vector3D",
    "_viewPort",
    "Rectangle",
    "_backgroundR",
    "_backgroundG",
    "_backgroundB",
    "_backgroundAlpha",
    "_pRttViewProjectionMatrix",
    "Matrix3D",
    "_localPos",
    "Point",
    "_globalPos",
    "_pNumElements",
    "_disableColor",
    "_renderBlended",
    "_numCullPlanes",
    "_onViewportUpdatedDelegate",
    "onViewportUpdated",
    "_onContextUpdateDelegate",
    "onContextUpdate",
    "renderableSorter",
    "RenderableMergeSort",
    "StageManager",
    "getFreeStage",
    "StageEvent",
    "CONTEXT_CREATED",
    "CONTEXT_RECREATED",
    "VIEWPORT_UPDATED",
    "_surfaceClassGL",
    "_customCullPlanes",
    "x",
    "updateGlobalPos",
    "y",
    "notifyScissorUpdate",
    "renderable",
    "id",
    "_abstractionClassPool",
    "assetType",
    "clearAbstraction",
    "getSurfacePool",
    "elementsType",
    "elementsClass",
    "renderableClass",
    "assetClass",
    "activatePass",
    "pass",
    "shader",
    "numUsedStreams",
    "numUsedTextures",
    "programData",
    "program",
    "createProgram",
    "vertexByteCode",
    "AGALMiniAssembler",
    "assemble",
    "vertexString",
    "data",
    "fragmentByteCode",
    "fragmentString",
    "upload",
    "_iActivate",
    "deactivatePass",
    "_iDeactivate",
    "_viewportDirty",
    "_scissorDirty",
    "_pBlendedRenderableHead",
    "_pOpaqueRenderableHead",
    "_cullPlanes",
    "frustumPlanes",
    "_cameraPosition",
    "scenePosition",
    "_cameraTransform",
    "sceneTransform",
    "Matrix3DUtils",
    "getForward",
    "traversePartitions",
    "sortOpaqueRenderables",
    "sortBlendedRenderables",
    "copyFrom",
    "viewProjection",
    "appendScale",
    "_iRenderCascades",
    "numCascades",
    "scissorRects",
    "cameras",
    "setDepthTest",
    "ContextGLCompareMode",
    "LESS",
    "head",
    "first",
    "LESS_EQUAL",
    "pDraw",
    "_snapshotRequired",
    "_snapshotBitmapImage2D",
    "drawToBitmapImage2D",
    "queueSnapshot",
    "bmd",
    "setColorMask",
    "drawRenderables",
    "renderableGL",
    "renderableGL2",
    "surfaceGL",
    "passes",
    "setStencilActions",
    "gl",
    "disable",
    "STENCIL_TEST",
    "_maskConfig",
    "_surface",
    "alphaThreshold",
    "next",
    "_activeMasksDirty",
    "_checkMasksConfig",
    "masksConfig",
    "stencilFunc",
    "ALWAYS",
    "stencilOp",
    "KEEP",
    "_renderMasks",
    "sourceEntity",
    "_iAssignedMasks",
    "maskId",
    "_registerMask",
    "_scissorUpdated",
    "RendererEvent",
    "SCISSOR_UPDATED",
    "dispatchEvent",
    "notifyViewportUpdate",
    "_viewPortUpdated",
    "viewPort",
    "isRenderable",
    "isInFrustum",
    "_sourceEntity",
    "_zIndex",
    "zOffset",
    "subtract",
    "dotProduct",
    "_renderSceneTransform",
    "getRenderSceneTransform",
    "_acceptTraverser",
    "applyRenderable",
    "surfaceID",
    "renderOrderId",
    "cascaded",
    "zIndex",
    "_iAssignedMaskId",
    "_iMasksConfig",
    "renderSceneTransform",
    "requiresBlending",
    "elementsGL",
    "numElements",
    "applySkybox",
    "obj",
    "masks",
    "enable",
    "REPLACE",
    "numLayers",
    "numRenderables",
    "children",
    "numChildren",
    "mask",
    "EQUAL",
    "INCR",
    "j",
    "k",
    "_drawMask",
    "childConfig",
    "activeNumChildren",
    "activeChildConfig",
    "EventDispatcher",
    "./sort/RenderableMergeSort",
    "./surfaces/SurfacePool",
    "awayjs-core/lib/events/EventDispatcher",
    "awayjs-core/lib/geom/Matrix3D",
    "awayjs-core/lib/geom/Matrix3DUtils",
    "awayjs-core/lib/geom/Point",
    "awayjs-core/lib/geom/Rectangle",
    "awayjs-core/lib/geom/Vector3D",
    "awayjs-display/lib/events/RendererEvent",
    "awayjs-stagegl/lib/aglsl/assembler/AGALMiniAssembler",
    "awayjs-stagegl/lib/base/ContextGLCompareMode",
    "awayjs-stagegl/lib/events/StageEvent",
    "awayjs-stagegl/lib/managers/StageManager",
    "awayjs-renderergl/lib/animators/AnimationSetBase",
    "AssetBase_1",
    "AbstractMethodError_1",
    "AnimationSetError_1",
    "AnimationSetBase",
    "_animations",
    "_animationNames",
    "_animationDictionary",
    "_pFindTempReg",
    "exclude",
    "excludeAnother",
    "reg",
    "indexOf",
    "_usesCPU",
    "resetGPUCompatibility",
    "cancelGPUCompatibility",
    "getAGALVertexCode",
    "registerCache",
    "sharedRegisters",
    "AbstractMethodError",
    "getAGALFragmentCode",
    "shadedTarget",
    "getAGALUVCode",
    "doneAGALCode",
    "hasAnimation",
    "name",
    "getAnimation",
    "addAnimation",
    "AnimationSetError",
    "AssetBase",
    "../errors/AnimationSetError",
    "awayjs-core/lib/errors/AbstractMethodError",
    "awayjs-core/lib/library/AssetBase",
    "awayjs-renderergl/lib/animators/AnimatorBase",
    "RequestAnimationFrame_1",
    "getTimer_1",
    "AnimatorEvent_1",
    "AnimatorBase",
    "animationSet",
    "_autoUpdate",
    "_time",
    "_playbackSpeed",
    "_pOwners",
    "_pAbsoluteTime",
    "_animationStates",
    "updatePosition",
    "_pAnimationSet",
    "_broadcaster",
    "RequestAnimationFrame",
    "onEnterFrame",
    "getAnimationState",
    "className",
    "stateClass",
    "uID",
    "getAnimationStateByName",
    "_pActiveState",
    "_pActiveAnimationName",
    "start",
    "stop",
    "phase",
    "setRenderState",
    "_isPlaying",
    "getTimer",
    "hasEventListener",
    "AnimatorEvent",
    "START",
    "_startEvent",
    "STOP",
    "_stopEvent",
    "time",
    "dt",
    "playbackSpeed",
    "_pUpdateDeltaTime",
    "reset",
    "offset",
    "addOwner",
    "sprite",
    "removeOwner",
    "splice",
    "applyPositionDelta",
    "delta",
    "positionDelta",
    "dist",
    "transform",
    "translateLocal",
    "dispatchCycleEvent",
    "CYCLE_COMPLETE",
    "_cycleEvent",
    "clone",
    "invalidateElements",
    "graphics",
    "testGPUCompatibility",
    "getRenderableElements",
    "sourceElements",
    "../events/AnimatorEvent",
    "awayjs-core/lib/utils/RequestAnimationFrame",
    "awayjs-core/lib/utils/getTimer",
    "awayjs-renderergl/lib/animators/ParticleAnimationSet",
    "AnimationSetBase_1",
    "AnimationRegisterData_1",
    "AnimationElements_1",
    "ParticleAnimationData_1",
    "ParticleProperties_1",
    "ParticlePropertiesMode_1",
    "ParticleTimeNode_1",
    "ParticleAnimationSet",
    "usesDuration",
    "usesLooping",
    "usesDelay",
    "_animationElements",
    "_particleNodes",
    "_localDynamicNodes",
    "_localStaticNodes",
    "_totalLenOfOneVertex",
    "shareAnimationGraphics",
    "_timeNode",
    "ParticleTimeNode",
    "_iProcessAnimationSetting",
    "ParticlePropertiesMode",
    "LOCAL_STATIC",
    "_iDataOffset",
    "dataLength",
    "LOCAL_DYNAMIC",
    "priority",
    "_iAnimationRegisterData",
    "animationRegisterData",
    "AnimationRegisterData",
    "needVelocity",
    "animatableAttributes",
    "animationTargetRegisters",
    "positionTarget",
    "vertexZeroConst",
    "velocityTarget",
    "POST_PRIORITY",
    "scaleAndRotateTarget",
    "COLOR_PRIORITY",
    "hasColorMulNode",
    "colorMulTarget",
    "getFreeVertexVectorTemp",
    "addVertexTempUsages",
    "colorMulVary",
    "getFreeVarying",
    "vertexOneConst",
    "hasColorAddNode",
    "colorAddTarget",
    "colorAddVary",
    "usesFragmentAnimation",
    "hasUVNode",
    "setUVSourceAndTarget",
    "uvTarget",
    "uvAttribute",
    "toString",
    "uvVar",
    "uvSource",
    "setVertexConst",
    "index",
    "key",
    "getAnimationElements",
    "graphic",
    "animationElements",
    "_iGenerateAnimationElements",
    "parent",
    "initParticleFunc",
    "newAnimationElements",
    "localNode",
    "count",
    "getGraphicAt",
    "AnimationElements",
    "createVertexData",
    "numVertices",
    "particles",
    "particlesLength",
    "numParticles",
    "particleProperties",
    "ParticleProperties",
    "particle",
    "oneDataLen",
    "oneDataOffset",
    "counterForVertex",
    "counterForOneData",
    "oneData",
    "vertexData",
    "vertexLength",
    "startingOffset",
    "vertexOffset",
    "total",
    "startTime",
    "duration",
    "delay",
    "initParticleScope",
    "_iGeneratePropertyOfOneParticle",
    "particleIndex",
    "numProcessedVertices",
    "animationParticles",
    "ParticleAnimationData",
    "../animators/AnimationSetBase",
    "../animators/data/AnimationElements",
    "../animators/data/AnimationRegisterData",
    "../animators/data/ParticleAnimationData",
    "../animators/data/ParticleProperties",
    "../animators/data/ParticlePropertiesMode",
    "../animators/nodes/ParticleTimeNode",
    "awayjs-renderergl/lib/animators/ParticleAnimator",
    "AnimatorBase_1",
    "ParticleAnimator",
    "particleAnimationSet",
    "_animationParticleStates",
    "_animatorParticleStates",
    "_timeParticleStates",
    "_animatorSubGeometries",
    "_particleAnimationSet",
    "state",
    "particleNodes",
    "needUpdateTime",
    "animatorElements",
    "getAnimatorElements",
    "resetTime",
    "../animators/AnimatorBase",
    "awayjs-renderergl/lib/animators/SkeletonAnimationSet",
    "SkeletonAnimationSet",
    "jointsPerVertex",
    "_jointsPerVertex",
    "_matricesIndex",
    "numUsedVertexConstants",
    "indexOffset0",
    "indexOffset1",
    "indexOffset2",
    "indexStream",
    "getFreeVertexAttribute",
    "jointIndexIndex",
    "weightStream",
    "jointWeightIndex",
    "indices",
    "weights",
    "temp1",
    "dot",
    "source",
    "getFreeVertexConstant",
    "awayjs-renderergl/lib/animators/SkeletonAnimator",
    "ElementsEvent_1",
    "JointPose_1",
    "SkeletonPose_1",
    "AnimationStateEvent_1",
    "SkeletonAnimator",
    "skeleton",
    "forceCPU",
    "_globalPose",
    "SkeletonPose",
    "_morphedElements",
    "_morphedElementsDirty",
    "_skeletonAnimationSet",
    "_skeleton",
    "_forceCPU",
    "_numJoints",
    "numJoints",
    "_globalMatrices",
    "Float32Array",
    "_onTransitionCompleteDelegate",
    "onTransitionComplete",
    "_onIndicesUpdateDelegate",
    "onIndicesUpdate",
    "_onVerticesUpdateDelegate",
    "onVerticesUpdate",
    "_globalPropertiesDirty",
    "updateGlobalProperties",
    "_useCondensedIndices",
    "play",
    "transition",
    "NaN",
    "_pActiveNode",
    "getAnimationNode",
    "AnimationStateEvent",
    "TRANSITION_COMPLETE",
    "_activeSkeletonState",
    "isNaN",
    "useCondensedIndices",
    "updateCondensedMatrices",
    "condensedIndexLookUp",
    "setVertexConstFromArray",
    "matricesIndex",
    "_condensedMatrices",
    "usesCPU",
    "morphElements",
    "srcIndex",
    "localToGlobalPose",
    "getSkeletonPose",
    "mtxOffset",
    "globalPoses",
    "jointPoses",
    "raw",
    "ox",
    "oy",
    "oz",
    "ow",
    "xy2",
    "xz2",
    "xw2",
    "yz2",
    "yw2",
    "zw2",
    "n11",
    "n12",
    "n13",
    "n21",
    "n22",
    "n23",
    "n31",
    "n32",
    "n33",
    "m11",
    "m12",
    "m13",
    "m14",
    "m21",
    "m22",
    "m23",
    "m24",
    "m31",
    "m32",
    "m33",
    "m34",
    "joints",
    "pose",
    "quat",
    "vec",
    "orientation",
    "translation",
    "z",
    "w",
    "inverseBindPose",
    "targetElements",
    "normals",
    "tangents",
    "autoDeriveNormals",
    "autoDeriveTangents",
    "ElementsEvent",
    "INVALIDATE_INDICES",
    "INVALIDATE_VERTICES",
    "sourcePositions",
    "positions",
    "sourceNormals",
    "sourceTangents",
    "posDim",
    "dimensions",
    "posStride",
    "stride",
    "normalStride",
    "tangentStride",
    "jointIndices",
    "jointWeights",
    "jointStride",
    "targetPositions",
    "targetNormals",
    "targetTangents",
    "attributesBuffer",
    "invalidate",
    "i0",
    "i1",
    "i2",
    "i3",
    "vx",
    "vy",
    "vz",
    "nx",
    "ny",
    "nz",
    "tx",
    "ty",
    "tz",
    "weight",
    "vertX",
    "vertY",
    "vertZ",
    "normX",
    "normY",
    "normZ",
    "tangX",
    "tangY",
    "tangZ",
    "sourcePose",
    "targetPose",
    "globalJointPose",
    "numJointPoses",
    "parentIndex",
    "joint",
    "parentPose",
    "or",
    "tr",
    "q",
    "x1",
    "y1",
    "z1",
    "w1",
    "x2",
    "y2",
    "z2",
    "w2",
    "x3",
    "y3",
    "z3",
    "JointPose",
    "type",
    "animationNode",
    "animationState",
    "setIndices",
    "attributesView",
    "uvs",
    "getCustomAtributes",
    "morphGraphics",
    "morphUVs",
    "invalidateVertices",
    "uvStride",
    "../animators/data/JointPose",
    "../animators/data/SkeletonPose",
    "../events/AnimationStateEvent",
    "awayjs-display/lib/events/ElementsEvent",
    "awayjs-renderergl/lib/animators/VertexAnimationSet",
    "VertexAnimationMode_1",
    "VertexAnimationSet",
    "numPoses",
    "blendMode",
    "_numPoses",
    "_blendMode",
    "VertexAnimationMode",
    "ABSOLUTE",
    "getAbsoluteAGALCode",
    "getAdditiveAGALCode",
    "temp2",
    "regs",
    "constantReg",
    "weightsIndex",
    "poseIndices",
    "poseInput",
    "tangentDependencies",
    "outputsNormals",
    "normalDependencies",
    "../animators/data/VertexAnimationMode",
    "awayjs-renderergl/lib/animators/VertexAnimator",
    "VertexAnimator",
    "vertexAnimationSet",
    "_poses",
    "_weights",
    "_vertexAnimationSet",
    "_activeVertexState",
    "geometryFlag",
    "currentGraphics",
    "nextGraphics",
    "blendWeight",
    "setNullPose",
    "_iIndex",
    "_indexMappings",
    "getIndexMappings",
    "isAsset",
    "activateVertexBufferVO",
    "awayjs-renderergl/lib/animators/data/AnimationElements",
    "_pVertexBuffer",
    "_pBufferContext",
    "_pBufferDirty",
    "previousTime",
    "Number",
    "NEGATIVE_INFINITY",
    "_iUniqueId",
    "SUBGEOM_ID_COUNT",
    "totalLenOfOneVertex",
    "_numVertices",
    "_pVertexData",
    "activateVertexBuffer",
    "bufferOffset",
    "format",
    "contextIndex",
    "stageIndex",
    "buffer",
    "createVertexBuffer",
    "uploadFromArray",
    "pop",
    "invalidateBuffer",
    "awayjs-renderergl/lib/animators/data/AnimationRegisterData",
    "ShaderRegisterElement_1",
    "indexDictionary",
    "rotationRegisters",
    "positionAttribute",
    "ShaderRegisterElement",
    "regName",
    "vertexTwoConst",
    "vertexTime",
    "vertexLife",
    "tempTime",
    "setRegisterIndex",
    "parameterIndex",
    "registerIndex",
    "getRegisterIndex",
    "../../shaders/ShaderRegisterElement",
    "awayjs-renderergl/lib/animators/data/ColorSegmentPoint",
    "ColorSegmentPoint",
    "life",
    "color",
    "_life",
    "_color",
    "awayjs-renderergl/lib/animators/data/JointPose",
    "Quaternion_1",
    "Quaternion",
    "toMatrix3D",
    "appendTranslation",
    "awayjs-core/lib/geom/Quaternion",
    "awayjs-renderergl/lib/animators/data/ParticleAnimationData",
    "totalTime",
    "startVertexIndex",
    "awayjs-renderergl/lib/animators/data/ParticlePropertiesMode",
    "GLOBAL",
    "awayjs-renderergl/lib/animators/data/ParticleProperties",
    "awayjs-renderergl/lib/animators/data/SkeletonJoint",
    "SkeletonJoint",
    "awayjs-renderergl/lib/animators/data/SkeletonPose",
    "jointPoseFromName",
    "jointName",
    "jointPoseIndex",
    "jointPoseIndexFromName",
    "jointPose",
    "cloneJointPose",
    "thisJointPose",
    "../../animators/data/JointPose",
    "awayjs-renderergl/lib/animators/data/Skeleton",
    "Skeleton",
    "jointFromName",
    "jointIndex",
    "jointIndexFromName",
    "awayjs-renderergl/lib/animators/data/VertexAnimationMode",
    "ADDITIVE",
    "awayjs-renderergl/lib/animators/nodes/AnimationClipNodeBase",
    "AnimationNodeBase_1",
    "AnimationClipNodeBase",
    "_pLooping",
    "_pTotalDuration",
    "_pStitchDirty",
    "_pStitchFinalFrame",
    "_pNumFrames",
    "_pDurations",
    "_pTotalDelta",
    "fixedFrameRate",
    "_pUpdateStitch",
    "_pLastFrame",
    "AnimationNodeBase",
    "awayjs-display/lib/animators/nodes/AnimationNodeBase",
    "awayjs-renderergl/lib/animators/nodes/ParticleAccelerationNode",
    "ParticleNodeBase_1",
    "ParticleAccelerationState_1",
    "ParticleAccelerationNode",
    "acceleration",
    "_pStateClass",
    "ParticleAccelerationState",
    "_acceleration",
    "accelerationValue",
    "_pMode",
    "ACCELERATION_INDEX",
    "temp",
    "removeVertexTempUsage",
    "animator",
    "param",
    "tempAcceleration",
    "ACCELERATION_VECTOR3D",
    "_pOneData",
    "ParticleNodeBase",
    "../../animators/data/ParticlePropertiesMode",
    "../../animators/nodes/ParticleNodeBase",
    "../../animators/states/ParticleAccelerationState",
    "awayjs-renderergl/lib/animators/nodes/ParticleBezierCurveNode",
    "ParticleBezierCurveState_1",
    "ParticleBezierCurveNode",
    "controlPoint",
    "endPoint",
    "ParticleBezierCurveState",
    "_iControlPoint",
    "_iEndPoint",
    "controlValue",
    "BEZIER_CONTROL_INDEX",
    "endValue",
    "BEZIER_END_INDEX",
    "rev_time",
    "time_2",
    "time_temp",
    "distance",
    "bezierControl",
    "BEZIER_CONTROL_VECTOR3D",
    "bezierEnd",
    "BEZIER_END_VECTOR3D",
    "../../animators/states/ParticleBezierCurveState",
    "awayjs-renderergl/lib/animators/nodes/ParticleBillboardNode",
    "ParticleBillboardState_1",
    "ParticleBillboardNode",
    "billboardAxis",
    "ParticleBillboardState",
    "_iBillboardAxis",
    "rotationMatrixRegister",
    "MATRIX_INDEX",
    "shaderRegisterElement",
    "hasBillboard",
    "../../animators/states/ParticleBillboardState",
    "awayjs-renderergl/lib/animators/nodes/ParticleColorNode",
    "ColorTransform_1",
    "ParticleAnimationSet_1",
    "ParticleColorState_1",
    "ParticleColorNode",
    "usesMultiplier",
    "usesOffset",
    "usesCycle",
    "usesPhase",
    "startColor",
    "endColor",
    "cycleDuration",
    "cyclePhase",
    "ParticleColorState",
    "_iUsesMultiplier",
    "_iUsesOffset",
    "_iUsesCycle",
    "_iUsesPhase",
    "_iStartColor",
    "ColorTransform",
    "_iEndColor",
    "_iCycleDuration",
    "_iCyclePhase",
    "cycleConst",
    "CYCLE_INDEX",
    "sin",
    "getFreeVertexSingleTemp",
    "startMultiplierValue",
    "deltaMultiplierValue",
    "START_MULTIPLIER_INDEX",
    "DELTA_MULTIPLIER_INDEX",
    "startOffsetValue",
    "deltaOffsetValue",
    "START_OFFSET_INDEX",
    "DELTA_OFFSET_INDEX",
    "COLOR_START_COLORTRANSFORM",
    "COLOR_END_COLORTRANSFORM",
    "redMultiplier",
    "greenMultiplier",
    "blueMultiplier",
    "alphaMultiplier",
    "redOffset",
    "greenOffset",
    "blueOffset",
    "alphaOffset",
    "../../animators/ParticleAnimationSet",
    "../../animators/states/ParticleColorState",
    "awayjs-core/lib/geom/ColorTransform",
    "awayjs-renderergl/lib/animators/nodes/ParticleFollowNode",
    "ParticleFollowState_1",
    "ParticleFollowNode",
    "usesPosition",
    "usesRotation",
    "smooth",
    "ParticleFollowState",
    "_iUsesPosition",
    "_iUsesRotation",
    "_iSmooth",
    "rotationAttribute",
    "FOLLOW_ROTATION_INDEX",
    "temp3",
    "temp4",
    "FOLLOW_POSITION_INDEX",
    "../../animators/states/ParticleFollowState",
    "awayjs-renderergl/lib/animators/nodes/ParticleInitialColorNode",
    "ParticleInitialColorState_1",
    "ParticleInitialColorNode",
    "initialColor",
    "ParticleInitialColorState",
    "_iInitialColor",
    "multiplierValue",
    "MULTIPLIER_INDEX",
    "offsetValue",
    "OFFSET_INDEX",
    "COLOR_INITIAL_COLORTRANSFORM",
    "../../animators/states/ParticleInitialColorState",
    "awayjs-renderergl/lib/animators/nodes/ParticleNodeBase",
    "_pDataLength",
    "MODES",
    "_priority",
    0,
    2,
    "awayjs-renderergl/lib/animators/nodes/ParticleOrbitNode",
    "ParticleOrbitState_1",
    "ParticleOrbitNode",
    "usesEulers",
    "radius",
    "eulers",
    "ParticleOrbitState",
    "_iUsesEulers",
    "_iRadius",
    "_iEulers",
    "orbitRegister",
    "ORBIT_INDEX",
    "eulersMatrixRegister",
    "EULERS_INDEX",
    "cos",
    "degree",
    "orbit",
    "ORBIT_VECTOR3D",
    "Math",
    "PI",
    "../../animators/states/ParticleOrbitState",
    "awayjs-renderergl/lib/animators/nodes/ParticleOscillatorNode",
    "ParticleOscillatorState_1",
    "ParticleOscillatorNode",
    "oscillator",
    "ParticleOscillatorState",
    "_iOscillator",
    "oscillatorRegister",
    "OSCILLATOR_INDEX",
    "dgree",
    "drift",
    "OSCILLATOR_VECTOR3D",
    "../../animators/states/ParticleOscillatorState",
    "awayjs-renderergl/lib/animators/nodes/ParticlePositionNode",
    "ParticlePositionState_1",
    "ParticlePositionNode",
    "position",
    "ParticlePositionState",
    "_iPosition",
    "POSITION_INDEX",
    "POSITION_VECTOR3D",
    "../../animators/states/ParticlePositionState",
    "awayjs-renderergl/lib/animators/nodes/ParticleRotateToHeadingNode",
    "ParticleRotateToHeadingState_1",
    "ParticleRotateToHeadingNode",
    "ParticleRotateToHeadingState",
    "nrmVel",
    "xAxis",
    "R",
    "R_rev",
    "cos2",
    "tempSingle",
    "../../animators/states/ParticleRotateToHeadingState",
    "awayjs-renderergl/lib/animators/nodes/ParticleRotateToPositionNode",
    "ParticleRotateToPositionState_1",
    "ParticleRotateToPositionNode",
    "ParticleRotateToPositionState",
    "nrmDirection",
    "o_temp",
    "../../animators/states/ParticleRotateToPositionState",
    "awayjs-renderergl/lib/animators/nodes/ParticleRotationalVelocityNode",
    "ParticleRotationalVelocityState_1",
    "ParticleRotationalVelocityNode",
    "rotationalVelocity",
    "ParticleRotationalVelocityState",
    "_iRotationalVelocity",
    "rotationRegister",
    "ROTATIONALVELOCITY_INDEX",
    "Rtemp",
    "rotate",
    "ROTATIONALVELOCITY_VECTOR3D",
    "normalize",
    "../../animators/states/ParticleRotationalVelocityState",
    "awayjs-renderergl/lib/animators/nodes/ParticleScaleNode",
    "ParticleScaleState_1",
    "ParticleScaleNode",
    "minScale",
    "maxScale",
    "ParticleScaleState",
    "_iMinScale",
    "_iMaxScale",
    "scaleRegister",
    "SCALE_INDEX",
    "scale",
    "SCALE_VECTOR3D",
    "abs",
    "../../animators/states/ParticleScaleState",
    "awayjs-renderergl/lib/animators/nodes/ParticleSegmentedColorNode",
    "ParticleSegmentedColorState_1",
    "ParticleSegmentedColorNode",
    "numSegmentPoint",
    "segmentPoints",
    "ParticleSegmentedColorState",
    "_iNumSegmentPoint",
    "_iSegmentPoints",
    "accMultiplierColor",
    "tempColor",
    "accTime",
    "lifeTimeRegister",
    "TIME_DATA_INDEX",
    "startMulValue",
    "deltaMulValues",
    "deltaOffsetValues",
    "../../animators/states/ParticleSegmentedColorState",
    "awayjs-renderergl/lib/animators/nodes/ParticleSpriteSheetNode",
    "ParticleSpriteSheetState_1",
    "ParticleSpriteSheetNode",
    "numColumns",
    "numRows",
    "totalFrames",
    "MAX_VALUE",
    "ParticleSpriteSheetState",
    "_iNumColumns",
    "_iNumRows",
    "_iTotalFrames",
    "min",
    "uvParamConst1",
    "uvParamConst2",
    "UV_INDEX_0",
    "UV_INDEX_1",
    "uTotal",
    "uStep",
    "vStep",
    "uSpeed",
    "cycle",
    "phaseTime",
    "vOffset",
    "v",
    "uvCycle",
    "UV_VECTOR3D",
    "../../animators/states/ParticleSpriteSheetState",
    "awayjs-renderergl/lib/animators/nodes/ParticleTimeNode",
    "ParticleTimeState_1",
    "ParticleTimeState",
    "_iUsesDuration",
    "_iUsesLooping",
    "_iUsesDelay",
    "timeStreamRegister",
    "TIME_STREAM_INDEX",
    "timeConst",
    "TIME_CONSTANT_INDEX",
    "div",
    "sge",
    "../../animators/states/ParticleTimeState",
    "awayjs-renderergl/lib/animators/nodes/ParticleUVNode",
    "ParticleUVState_1",
    "ParticleUVNode",
    "axis",
    "ParticleUVState",
    "_cycle",
    "_scale",
    "_axis",
    "updateUVData",
    "uvConst",
    "UV_INDEX",
    "axisIndex",
    "_iUvData",
    "U_AXIS",
    "V_AXIS",
    "../../animators/states/ParticleUVState",
    "awayjs-renderergl/lib/animators/nodes/ParticleVelocityNode",
    "ParticleVelocityState_1",
    "ParticleVelocityNode",
    "velocity",
    "ParticleVelocityState",
    "_iVelocity",
    "velocityValue",
    "VELOCITY_INDEX",
    "_tempVelocity",
    "VELOCITY_VECTOR3D",
    "../../animators/states/ParticleVelocityState",
    "awayjs-renderergl/lib/animators/nodes/SkeletonBinaryLERPNode",
    "SkeletonBinaryLERPState_1",
    "SkeletonBinaryLERPNode",
    "SkeletonBinaryLERPState",
    "../../animators/states/SkeletonBinaryLERPState",
    "awayjs-renderergl/lib/animators/nodes/SkeletonClipNode",
    "AnimationClipNodeBase_1",
    "SkeletonClipState_1",
    "SkeletonClipNode",
    "_frames",
    "highQuality",
    "SkeletonClipState",
    "addFrame",
    "skeletonPose",
    "p1",
    "p2",
    "../../animators/nodes/AnimationClipNodeBase",
    "../../animators/states/SkeletonClipState",
    "awayjs-renderergl/lib/animators/nodes/SkeletonDifferenceNode",
    "SkeletonDifferenceState_1",
    "SkeletonDifferenceNode",
    "SkeletonDifferenceState",
    "default",
    "../../animators/states/SkeletonDifferenceState",
    "awayjs-renderergl/lib/animators/nodes/SkeletonDirectionalNode",
    "SkeletonDirectionalState_1",
    "SkeletonDirectionalNode",
    "SkeletonDirectionalState",
    "../../animators/states/SkeletonDirectionalState",
    "awayjs-renderergl/lib/animators/nodes/SkeletonNaryLERPNode",
    "SkeletonNaryLERPState_1",
    "SkeletonNaryLERPNode",
    "_iInputs",
    "SkeletonNaryLERPState",
    "_numInputs",
    "getInputIndex",
    "input",
    "getInputAt",
    "addInput",
    "../../animators/states/SkeletonNaryLERPState",
    "awayjs-renderergl/lib/animators/nodes/VertexClipNode",
    "VertexClipState_1",
    "VertexClipNode",
    "_translations",
    "VertexClipState",
    "geometry",
    "../../animators/states/VertexClipState",
    "awayjs-renderergl/lib/animators/states/AnimationClipState",
    "AnimationStateBase_1",
    "AnimationClipState",
    "animationClipNode",
    "_pFramesDirty",
    "_animationClipNode",
    "_pUpdateFrames",
    "_pBlendWeight",
    "_pCurrentFrame",
    "_pNextFrame",
    "looping",
    "_pStartTime",
    "totalDuration",
    "_pTime",
    "_pUpdateTime",
    "_pTimeDir",
    "lastFrame",
    "notifyPlaybackComplete",
    "floor",
    "dur",
    "frameTime",
    "durations",
    "_animationStatePlaybackComplete",
    "PLAYBACK_COMPLETE",
    "_pAnimator",
    "AnimationStateBase",
    "../../animators/states/AnimationStateBase",
    "../../events/AnimationStateEvent",
    "awayjs-renderergl/lib/animators/states/AnimationStateBase",
    "_pRootDelta",
    "_pPositionDeltaDirty",
    "_pAnimationNode",
    "_pUpdatePositionDelta",
    "awayjs-renderergl/lib/animators/states/IAnimationState",
    "awayjs-renderergl/lib/animators/states/ISkeletonAnimationState",
    "awayjs-renderergl/lib/animators/states/IVertexAnimationState",
    "awayjs-renderergl/lib/animators/states/ParticleAccelerationState",
    "ParticleStateBase_1",
    "particleAccelerationNode",
    "_particleAccelerationNode",
    "updateAccelerationData",
    "FLOAT_3",
    "_halfAcceleration",
    "ParticleStateBase",
    "../../animators/states/ParticleStateBase",
    "awayjs-renderergl/lib/animators/states/ParticleBezierCurveState",
    "particleBezierCurveNode",
    "_particleBezierCurveNode",
    "_controlPoint",
    "_endPoint",
    "controlIndex",
    "endIndex",
    "awayjs-renderergl/lib/animators/states/ParticleBillboardState",
    "MathConsts_1",
    "Orientation3D_1",
    "particleNode",
    "_matrix",
    "_billboardAxis",
    "comps",
    "pos",
    "look",
    "right",
    "crossProduct",
    "decompose",
    "Orientation3D",
    "AXIS_ANGLE",
    "copyColumnFrom",
    "appendRotation",
    "MathConsts",
    "RADIANS_TO_DEGREES",
    "append",
    "inverseSceneTransform",
    "identity",
    "setVertexConstFromMatrix",
    "awayjs-core/lib/geom/MathConsts",
    "awayjs-core/lib/geom/Orientation3D",
    "awayjs-renderergl/lib/animators/states/ParticleColorState",
    "particleColorNode",
    "_particleColorNode",
    "_usesMultiplier",
    "_usesOffset",
    "_usesCycle",
    "_usesPhase",
    "_startColor",
    "_endColor",
    "_cycleDuration",
    "_cyclePhase",
    "updateColorData",
    "dataOffset",
    "_cycleData",
    "FLOAT_4",
    "_startMultiplierData",
    "_deltaMultiplierData",
    "_startOffsetData",
    "_deltaOffsetData",
    "awayjs-renderergl/lib/animators/states/ParticleFollowState",
    "particleFollowNode",
    "_targetPos",
    "_targetEuler",
    "_temp",
    "_particleFollowNode",
    "_smooth",
    "_followTarget",
    "scaleX",
    "scaleY",
    "scaleZ",
    "rotationX",
    "rotationY",
    "rotationZ",
    "scaleBy",
    "DEGREES_TO_RADIANS",
    "_prePos",
    "_preEuler",
    "currentTime",
    "deltaTime",
    "needProcess",
    "processPositionAndRotation",
    "processPosition",
    "precessRotation",
    "changed",
    "interpolatedPos",
    "posVelocity",
    "inc",
    "add",
    "interpolatedRotation",
    "rotationVelocity",
    "awayjs-renderergl/lib/animators/states/ParticleInitialColorState",
    "particleInitialColorNode",
    "_particleInitialColorNode",
    "_initialColor",
    "_multiplierData",
    "_offsetData",
    "awayjs-renderergl/lib/animators/states/ParticleOrbitState",
    "particleOrbitNode",
    "_particleOrbitNode",
    "_usesEulers",
    "_eulers",
    "_radius",
    "updateOrbitData",
    "_orbitData",
    "_eulersMatrix",
    "X_AXIS",
    "Y_AXIS",
    "Z_AXIS",
    "awayjs-renderergl/lib/animators/states/ParticleOscillatorState",
    "particleOscillatorNode",
    "_particleOscillatorNode",
    "_oscillator",
    "updateOscillatorData",
    "_oscillatorData",
    "awayjs-renderergl/lib/animators/states/ParticlePositionState",
    "particlePositionNode",
    "_particlePositionNode",
    "_position",
    "getPositions",
    "_pDynamicProperties",
    "setPositions",
    "_pDynamicPropertiesDirty",
    "_pUpdateDynamicProperties",
    "awayjs-renderergl/lib/animators/states/ParticleRotateToHeadingState",
    "_pParticleAnimator",
    "awayjs-renderergl/lib/animators/states/ParticleRotateToPositionState",
    "particleRotateToPositionNode",
    "_particleRotateToPositionNode",
    "_offset",
    "transformVector",
    "awayjs-renderergl/lib/animators/states/ParticleRotationalVelocityState",
    "particleRotationNode",
    "_particleRotationalVelocityNode",
    "_rotationalVelocity",
    "updateRotationalVelocityData",
    "getRotationalVelocities",
    "setRotationalVelocities",
    "_rotationalVelocityData",
    "rotation",
    "awayjs-renderergl/lib/animators/states/ParticleScaleState",
    "particleScaleNode",
    "_particleScaleNode",
    "_minScale",
    "_maxScale",
    "updateScaleData",
    "_scaleData",
    "awayjs-renderergl/lib/animators/states/ParticleSegmentedColorState",
    "particleSegmentedColorNode",
    "_segmentPoints",
    "_numSegmentPoint",
    "_timeLifeData",
    "awayjs-renderergl/lib/animators/states/ParticleSpriteSheetState",
    "particleSpriteSheetNode",
    "_particleSpriteSheetNode",
    "_totalFrames",
    "_numColumns",
    "_numRows",
    "updateSpriteSheetData",
    "usesUVTransform",
    "_spriteSheetData",
    "awayjs-renderergl/lib/animators/states/ParticleStateBase",
    "_particleNode",
    "_pNeedUpdateTime",
    "animationParticle",
    "awayjs-renderergl/lib/animators/states/ParticleTimeState",
    "particleTimeNode",
    "_particleTimeNode",
    "particleTime",
    "awayjs-renderergl/lib/animators/states/ParticleUVState",
    "particleUVNode",
    "_particleUVNode",
    "awayjs-renderergl/lib/animators/states/ParticleVelocityState",
    "particleVelocityNode",
    "_particleVelocityNode",
    "_velocity",
    "getVelocities",
    "setVelocities",
    "awayjs-renderergl/lib/animators/states/SkeletonBinaryLERPState",
    "skeletonAnimationNode",
    "_blendWeight",
    "_skeletonPose",
    "_skeletonPoseDirty",
    "_skeletonAnimationNode",
    "_inputA",
    "inputA",
    "_inputB",
    "inputB",
    "updateSkeletonPose",
    "deltA",
    "deltB",
    "endPose",
    "endPoses",
    "poses1",
    "poses2",
    "pose1",
    "pose2",
    "lerp",
    "../../animators/data/SkeletonPose",
    "awayjs-renderergl/lib/animators/states/SkeletonClipState",
    "AnimationClipState_1",
    "skeletonClipNode",
    "_rootPos",
    "_skeletonClipNode",
    "frames",
    "_currentPose",
    "_nextPose",
    "currentPose",
    "nextPose",
    "slerp",
    "p3",
    "totalDelta",
    "_pOldFrame",
    "dx",
    "dy",
    "dz",
    "stitchFinalFrame",
    "../../animators/states/AnimationClipState",
    "awayjs-renderergl/lib/animators/states/SkeletonDifferenceState",
    "_baseInput",
    "baseInput",
    "_differenceInput",
    "differenceInput",
    "basePoses",
    "diffPoses",
    "base",
    "diff",
    "basePos",
    "diffPos",
    "_tempQuat",
    "multiply",
    "awayjs-renderergl/lib/animators/states/SkeletonDirectionalState",
    "_direction",
    "_blendDirty",
    "_forward",
    "forward",
    "_backward",
    "backward",
    "_left",
    "left",
    "_right",
    "updateBlend",
    "_pUdateTime",
    "awayjs-renderergl/lib/animators/states/SkeletonNaryLERPState",
    "_blendWeights",
    "_inputs",
    "numInputs",
    "getBlendWeightAt",
    "setBlendWeightAt",
    "poses",
    "endTr",
    "endQuat",
    "firstPose",
    "w0",
    "x0",
    "y0",
    "z0",
    "awayjs-renderergl/lib/animators/states/VertexClipState",
    "vertexClipNode",
    "_vertexClipNode",
    "_currentGraphics",
    "_nextGraphics",
    "awayjs-renderergl/lib/animators/transitions/CrossfadeTransitionNode",
    "SkeletonBinaryLERPNode_1",
    "CrossfadeTransitionState_1",
    "CrossfadeTransitionNode",
    "CrossfadeTransitionState",
    "../../animators/nodes/SkeletonBinaryLERPNode",
    "../../animators/transitions/CrossfadeTransitionState",
    "awayjs-renderergl/lib/animators/transitions/CrossfadeTransitionState",
    "_crossfadeTransitionNode",
    "startBlend",
    "blendSpeed",
    "_animationStateTransitionComplete",
    "../../animators/../events/AnimationStateEvent",
    "awayjs-renderergl/lib/animators/transitions/CrossfadeTransition",
    "CrossfadeTransitionNode_1",
    "CrossfadeTransition",
    "startNode",
    "endNode",
    "crossFadeTransitionNode",
    "../../animators/transitions/CrossfadeTransitionNode",
    "awayjs-renderergl/lib/animators/transitions/IAnimationTransition",
    "awayjs-renderergl/lib/animators",
    "ColorSegmentPoint_1",
    "Skeleton_1",
    "SkeletonJoint_1",
    "ParticleAccelerationNode_1",
    "ParticleBezierCurveNode_1",
    "ParticleBillboardNode_1",
    "ParticleColorNode_1",
    "ParticleFollowNode_1",
    "ParticleInitialColorNode_1",
    "ParticleOrbitNode_1",
    "ParticleOscillatorNode_1",
    "ParticlePositionNode_1",
    "ParticleRotateToHeadingNode_1",
    "ParticleRotateToPositionNode_1",
    "ParticleRotationalVelocityNode_1",
    "ParticleScaleNode_1",
    "ParticleSegmentedColorNode_1",
    "ParticleSpriteSheetNode_1",
    "ParticleUVNode_1",
    "ParticleVelocityNode_1",
    "SkeletonClipNode_1",
    "SkeletonDifferenceNode_1",
    "SkeletonDirectionalNode_1",
    "SkeletonNaryLERPNode_1",
    "VertexClipNode_1",
    "CrossfadeTransition_1",
    "ParticleAnimator_1",
    "SkeletonAnimationSet_1",
    "SkeletonAnimator_1",
    "VertexAnimationSet_1",
    "VertexAnimator_1",
    "./animators/AnimationSetBase",
    "./animators/AnimatorBase",
    "./animators/ParticleAnimationSet",
    "./animators/ParticleAnimator",
    "./animators/SkeletonAnimationSet",
    "./animators/SkeletonAnimator",
    "./animators/VertexAnimationSet",
    "./animators/VertexAnimator",
    "./animators/data/AnimationElements",
    "./animators/data/AnimationRegisterData",
    "./animators/data/ColorSegmentPoint",
    "./animators/data/JointPose",
    "./animators/data/ParticleAnimationData",
    "./animators/data/ParticleProperties",
    "./animators/data/ParticlePropertiesMode",
    "./animators/data/Skeleton",
    "./animators/data/SkeletonJoint",
    "./animators/data/SkeletonPose",
    "./animators/data/VertexAnimationMode",
    "./animators/nodes/AnimationClipNodeBase",
    "./animators/nodes/ParticleAccelerationNode",
    "./animators/nodes/ParticleBezierCurveNode",
    "./animators/nodes/ParticleBillboardNode",
    "./animators/nodes/ParticleColorNode",
    "./animators/nodes/ParticleFollowNode",
    "./animators/nodes/ParticleInitialColorNode",
    "./animators/nodes/ParticleNodeBase",
    "./animators/nodes/ParticleOrbitNode",
    "./animators/nodes/ParticleOscillatorNode",
    "./animators/nodes/ParticlePositionNode",
    "./animators/nodes/ParticleRotateToHeadingNode",
    "./animators/nodes/ParticleRotateToPositionNode",
    "./animators/nodes/ParticleRotationalVelocityNode",
    "./animators/nodes/ParticleScaleNode",
    "./animators/nodes/ParticleSegmentedColorNode",
    "./animators/nodes/ParticleSpriteSheetNode",
    "./animators/nodes/ParticleTimeNode",
    "./animators/nodes/ParticleUVNode",
    "./animators/nodes/ParticleVelocityNode",
    "./animators/nodes/SkeletonBinaryLERPNode",
    "./animators/nodes/SkeletonClipNode",
    "./animators/nodes/SkeletonDifferenceNode",
    "./animators/nodes/SkeletonDirectionalNode",
    "./animators/nodes/SkeletonNaryLERPNode",
    "./animators/nodes/VertexClipNode",
    "./animators/states/AnimationClipState",
    "./animators/states/AnimationStateBase",
    "./animators/states/ParticleAccelerationState",
    "./animators/states/ParticleBezierCurveState",
    "./animators/states/ParticleBillboardState",
    "./animators/states/ParticleColorState",
    "./animators/states/ParticleFollowState",
    "./animators/states/ParticleInitialColorState",
    "./animators/states/ParticleOrbitState",
    "./animators/states/ParticleOscillatorState",
    "./animators/states/ParticlePositionState",
    "./animators/states/ParticleRotateToHeadingState",
    "./animators/states/ParticleRotateToPositionState",
    "./animators/states/ParticleRotationalVelocityState",
    "./animators/states/ParticleScaleState",
    "./animators/states/ParticleSegmentedColorState",
    "./animators/states/ParticleSpriteSheetState",
    "./animators/states/ParticleStateBase",
    "./animators/states/ParticleTimeState",
    "./animators/states/ParticleUVState",
    "./animators/states/ParticleVelocityState",
    "./animators/states/SkeletonBinaryLERPState",
    "./animators/states/SkeletonClipState",
    "./animators/states/SkeletonDifferenceState",
    "./animators/states/SkeletonDirectionalState",
    "./animators/states/SkeletonNaryLERPState",
    "./animators/states/VertexClipState",
    "./animators/transitions/CrossfadeTransition",
    "./animators/transitions/CrossfadeTransitionNode",
    "./animators/transitions/CrossfadeTransitionState",
    "awayjs-renderergl/lib/elements/GL_ElementsBase",
    "AbstractionBase_1",
    "AssetEvent_1",
    "ElementsUtils_1",
    "GL_ElementsBase",
    "usages",
    "_vertices",
    "_verticesUpdated",
    "_numIndices",
    "_elements",
    "_onInvalidateIndicesDelegate",
    "_onInvalidateIndices",
    "_onClearIndicesDelegate",
    "_onClearIndices",
    "_onInvalidateVerticesDelegate",
    "_onInvalidateVertices",
    "_onClearVerticesDelegate",
    "_onClearVertices",
    "CLEAR_INDICES",
    "CLEAR_VERTICES",
    "_indicesUpdated",
    "_updateIndices",
    "getIndexBufferGL",
    "_indices",
    "getVertexBufferGL",
    "bufferId",
    "_updateVertices",
    "size",
    "unsigned",
    "onClear",
    "_overflow",
    "_setRenderState",
    "draw",
    "indexOffset",
    "ElementsUtils",
    "getSubIndices",
    "_attributesBuffer",
    "_pGetOverflowElements",
    "AssetEvent",
    "CLEAR",
    "getSubVertices",
    "AbstractionBase",
    "awayjs-core/lib/events/AssetEvent",
    "awayjs-core/lib/library/AbstractionBase",
    "awayjs-display/lib/utils/ElementsUtils",
    "awayjs-renderergl/lib/elements/GL_LineElements",
    "ContextGLProgramType_1",
    "GL_ElementsBase_1",
    "lineElements",
    "_calcMatrix",
    "_thickness",
    "_lineElements",
    "_iIncludeDependencies",
    "colorDependencies",
    "_iGetVertexCode",
    "position0",
    "globalPosDependencies",
    "globalPositionVertex",
    "animatedPosition",
    "position1",
    "thickness",
    "viewMatrixReg",
    "viewMatrixIndex",
    "constOne",
    "constNegOne",
    "misc",
    "sceneMatrixReg",
    "sceneMatrixIndex",
    "q0",
    "q1",
    "behind",
    "qclipped",
    "_iGetFragmentCode",
    "colorBufferIndex",
    "colors",
    "vertexConstantData",
    "projection",
    "near",
    "matrix",
    "copyRawDataTo",
    "setProgramConstantsFromArray",
    "ContextGLProgramType",
    "VERTEX",
    "numIndices",
    "drawVertices",
    "../elements/GL_ElementsBase",
    "awayjs-stagegl/lib/base/ContextGLProgramType",
    "awayjs-renderergl/lib/elements/GL_SkyboxElements",
    "GL_TriangleElements_1",
    "GL_SkyboxElements",
    "apply",
    "arguments",
    "_skyboxProjection",
    "scenePositionIndex",
    "skyboxScale",
    "projectionDependencies",
    "projectionFragment",
    "far",
    "sqrt",
    "copyRowTo",
    "camPos",
    "cx",
    "cy",
    "cz",
    "cw",
    "signX",
    "signY",
    "inverse",
    "invert",
    "copyRowFrom",
    "FRAGMENT",
    "fragmentConstantData",
    "../elements/GL_TriangleElements",
    "awayjs-renderergl/lib/elements/GL_TriangleElements",
    "triangleElements",
    "_triangleElements",
    "normalIndex",
    "tangentIndex",
    "curvesIndex",
    "uvIndex",
    "secondaryUVIndex",
    "matrix3D",
    "CALCULATION_MATRIX",
    "awayjs-renderergl/lib/elements/IElementsClassGL",
    "awayjs-renderergl/lib/elements",
    "GL_LineElements_1",
    "GL_SkyboxElements_1",
    "./elements/GL_ElementsBase",
    "./elements/GL_LineElements",
    "./elements/GL_SkyboxElements",
    "./elements/GL_TriangleElements",
    "awayjs-renderergl/lib/errors/AnimationSetError",
    "ErrorBase_1",
    "message",
    "ErrorBase",
    "awayjs-core/lib/errors/ErrorBase",
    "awayjs-renderergl/lib/errors",
    "./errors/AnimationSetError",
    "awayjs-renderergl/lib/events/AnimationStateEvent",
    "EventBase_1",
    "_animator",
    "_animationState",
    "_animationNode",
    "EventBase",
    "awayjs-core/lib/events/EventBase",
    "awayjs-renderergl/lib/events/AnimatorEvent",
    "awayjs-renderergl/lib/events/PassEvent",
    "PassEvent",
    "_pass",
    "INVALIDATE",
    "awayjs-renderergl/lib/events/RTTEvent",
    "awayjs-renderergl/lib/events/ShadingMethodEvent",
    "ShadingMethodEvent",
    "SHADER_INVALIDATED",
    "awayjs-renderergl/lib/events",
    "PassEvent_1",
    "ShadingMethodEvent_1",
    "./events/AnimationStateEvent",
    "./events/AnimatorEvent",
    "./events/PassEvent",
    "./events/ShadingMethodEvent",
    "awayjs-renderergl/lib/filters/BlurFilter3D",
    "Filter3DHBlurTask_1",
    "Filter3DVBlurTask_1",
    "Filter3DBase_1",
    "BlurFilter3D",
    "blurX",
    "blurY",
    "stepSize",
    "_hBlurTask",
    "Filter3DHBlurTask",
    "_vBlurTask",
    "Filter3DVBlurTask",
    "addTask",
    "amount",
    "mainTarget",
    "Filter3DBase",
    "../filters/Filter3DBase",
    "../filters/tasks/Filter3DHBlurTask",
    "../filters/tasks/Filter3DVBlurTask",
    "awayjs-renderergl/lib/filters/CompositeFilter3D",
    "Filter3DCompositeTask_1",
    "CompositeFilter3D",
    "exposure",
    "_compositeTask",
    "Filter3DCompositeTask",
    "overlayTexture",
    "../filters/tasks/Filter3DCompositeTask",
    "awayjs-renderergl/lib/filters/FXAAFilter3D",
    "Filter3DFXAATask_1",
    "FXAAFilter3D",
    "_fxaaTask",
    "Filter3DFXAATask",
    "../filters/tasks/Filter3DFXAATask",
    "awayjs-renderergl/lib/filters/Filter3DBase",
    "_textureWidth",
    "_textureHeight",
    "awayjs-renderergl/lib/filters/tasks/Filter3DCompositeTask",
    "Filter3DTaskBase_1",
    "_data",
    "_overlayTexture",
    "_overlayWidth",
    "_overlayHeight",
    "getFragmentCode",
    "_registerCache",
    "getFreeFragmentVectorTemp",
    "addFragmentTempUsages",
    "inputTexture",
    "getFreeTextureReg",
    "_overlayTextureIndex",
    "getFreeFragmentConstant",
    "_exposureIndex",
    "scaling",
    "_scalingIndex",
    "_uvVarying",
    "camera3D",
    "_scaledTextureWidth",
    "_scaledTextureHeight",
    "Filter3DTaskBase",
    "../../filters/tasks/Filter3DTaskBase",
    "awayjs-renderergl/lib/filters/tasks/Filter3DFXAATask",
    "_stepSize",
    "_amount",
    "invalidateProgram",
    "updateBlurData",
    "calculateStepSize",
    "lum",
    "_0",
    "_025",
    "_05",
    "_075",
    "_1",
    "pix",
    "mOne",
    "mul",
    "fxaaReduceMin",
    "fxaaReduceMul",
    "fxaaSpanMax",
    "delta1",
    "delta2",
    "delta3",
    "delta4",
    "uv_in",
    "uv",
    "uvx",
    "uvy",
    "TL",
    "TR",
    "BL",
    "BR",
    "M",
    "tempf1",
    "tempf2",
    "tempf3",
    "tex",
    "dir",
    "dirx",
    "diry",
    "dirxy",
    "dirReduce",
    "inverseDirAdjustment",
    "result1",
    "result2",
    "lumaMin",
    "lumaMax",
    "sample",
    "tempxy",
    "join",
    "updateTextures",
    "_realStepSize",
    "MAX_AUTO_SAMPLES",
    "awayjs-renderergl/lib/filters/tasks/Filter3DHBlurTask",
    "numSamples",
    "invW",
    "awayjs-renderergl/lib/filters/tasks/Filter3DTaskBase",
    "Image2D_1",
    "ShaderRegisterCache_1",
    "_textureDimensionsInvalid",
    "_program3DInvalid",
    "_textureScale",
    "ShaderRegisterCache",
    "_target",
    "_program3D",
    "updateProgram",
    "getVertexCode",
    "Image2D",
    "../../shaders/ShaderRegisterCache",
    "awayjs-core/lib/image/Image2D",
    "awayjs-renderergl/lib/filters/tasks/Filter3DVBlurTask",
    "invH",
    "awayjs-renderergl/lib/filters",
    "BlurFilter3D_1",
    "CompositeFilter3D_1",
    "FXAAFilter3D_1",
    "./filters/BlurFilter3D",
    "./filters/CompositeFilter3D",
    "./filters/FXAAFilter3D",
    "./filters/Filter3DBase",
    "./filters/tasks/Filter3DCompositeTask",
    "./filters/tasks/Filter3DFXAATask",
    "./filters/tasks/Filter3DHBlurTask",
    "./filters/tasks/Filter3DTaskBase",
    "./filters/tasks/Filter3DVBlurTask",
    "awayjs-renderergl/lib/managers/RTTBufferManager",
    "ImageUtils_1",
    "_viewWidth",
    "_viewHeight",
    "_buffersInvalid",
    "_renderToTextureRect",
    "_instances",
    "rttBufferManager",
    "getRTTBufferManagerFromStage",
    "vo",
    "RTTBufferManagerVO",
    "stage3d",
    "rttbfm",
    "c",
    "deleteRTTBufferManager",
    "updateRTTBuffers",
    "_textureRatioX",
    "_textureRatioY",
    "ImageUtils",
    "getBestPowerOf2",
    "_renderToTextureVertexBuffer",
    "_renderToScreenVertexBuffer",
    "_indexBuffer",
    "textureVerts",
    "screenVerts",
    "createIndexBuffer",
    "u1",
    "u2",
    "v1",
    "v2",
    "../events/RTTEvent",
    "awayjs-core/lib/utils/ImageUtils",
    "awayjs-renderergl/lib/managers",
    "awayjs-renderergl/lib/renderables/GL_BillboardRenderable",
    "AttributesBuffer_1",
    "DefaultMaterialManager_1",
    "GL_RenderableBase_1",
    "billboard",
    "renderer",
    "_billboard",
    "_pGetElements",
    "texture",
    "material",
    "getTextureAt",
    "style",
    "getSamplerAt",
    "DefaultMaterialManager",
    "getDefaultSampler",
    "_id",
    "_samplerElements",
    "billboardWidth",
    "billboardHeight",
    "billboardRect",
    "AttributesBuffer",
    "setNormals",
    "setTangents",
    "setUVs",
    "_pGetSurface",
    "_renderer",
    "getDefaultMaterial",
    "GL_RenderableBase",
    "../renderables/GL_RenderableBase",
    "awayjs-core/lib/attributes/AttributesBuffer",
    "awayjs-display/lib/managers/DefaultMaterialManager",
    "awayjs-renderergl/lib/renderables/GL_GraphicRenderable",
    "_count",
    "awayjs-renderergl/lib/renderables/GL_LineSegmentRenderable",
    "lineSegment",
    "_lineSegment",
    "_lineGraphics",
    "startPostion",
    "end",
    "endPosition",
    "setThickness",
    "_pGetOverflowRenderable",
    "awayjs-renderergl/lib/renderables/GL_RenderableBase",
    "RenderableEvent_1",
    "_elementsDirty",
    "_surfaceDirty",
    "images",
    "samplers",
    "_onInvalidateSurfaceDelegate",
    "_onInvalidateSurface",
    "_onInvalidateElementsDelegate",
    "onInvalidateElements",
    "RenderableEvent",
    "INVALIDATE_SURFACE",
    "INVALIDATE_ELEMENTS",
    "_updateElements",
    "_elementsGL",
    "_updateSurface",
    "_surfaceGL",
    "surface",
    "activeElements",
    "numImages",
    "uvMatrix",
    "numTextures",
    "getNumTextures",
    "image",
    "sampler",
    "getNumImages",
    "getImageIndex",
    "getImageAt",
    "awayjs-display/lib/events/RenderableEvent",
    "awayjs-renderergl/lib/renderables/GL_SkyboxRenderable",
    "skybox",
    "_skybox",
    "../elements/GL_SkyboxElements",
    "awayjs-renderergl/lib/renderables",
    "GL_BillboardRenderable_1",
    "GL_GraphicRenderable_1",
    "GL_LineSegmentRenderable_1",
    "GL_SkyboxRenderable_1",
    "./renderables/GL_BillboardRenderable",
    "./renderables/GL_GraphicRenderable",
    "./renderables/GL_LineSegmentRenderable",
    "./renderables/GL_RenderableBase",
    "./renderables/GL_SkyboxRenderable",
    "awayjs-renderergl/lib/shaders/LightingShader",
    "LightSources_1",
    "ContextGLProfile_1",
    "ShaderBase_1",
    "LightingCompiler_1",
    "LightingShader",
    "lightingPass",
    "_includeCasters",
    "_lightingPass",
    "numPointLights",
    "numDirectionalLights",
    "numLightProbes",
    "numAllLights",
    "diffuseLightSources",
    "_iUsesDiffuse",
    "specularLightSources",
    "_iUsesSpecular",
    "combinedLightSources",
    "usesLightFallOff",
    "enableLightFallOff",
    "ContextGLProfile",
    "BASELINE_CONSTRAINED",
    "usesCommonData",
    "numLights",
    "usesLights",
    "LightSources",
    "LIGHTS",
    "usesProbes",
    "PROBES",
    "usesLightsForSpecular",
    "usesProbesForSpecular",
    "usesLightsForDiffuse",
    "usesProbesForDiffuse",
    "usesShadows",
    "_iUsesShadows",
    "createCompiler",
    "LightingCompiler",
    "lightPicker",
    "collectLights",
    "updateProbes",
    "dirLight",
    "pointLight",
    "dirPos",
    "numLightTypes",
    "ambientR",
    "ambientG",
    "ambientB",
    "lightVertexConstantIndex",
    "lightFragmentConstantIndex",
    "cast",
    "dirLights",
    "directionalLights",
    "directionalLightsOffset",
    "castingDirectionalLights",
    "sceneDirection",
    "_iAmbientR",
    "_iAmbientG",
    "_iAmbientB",
    "usesTangentSpace",
    "_pInverseSceneMatrix",
    "_iDiffuseR",
    "_iDiffuseG",
    "_iDiffuseB",
    "_iSpecularR",
    "_iSpecularG",
    "_iSpecularB",
    "pointLights",
    "pointLightsOffset",
    "castingPointLights",
    "usesGlobalPosFragment",
    "_pRadius",
    "_pFallOffFactor",
    "probe",
    "lightProbes",
    "lightProbeWeights",
    "lightProbesOffset",
    "addDiff",
    "addSpec",
    "diffuseMap",
    "lightProbeDiffuseIndices",
    "diffuseSampler",
    "mipmap",
    "specularMap",
    "lightProbeSpecularIndices",
    "probeWeightsIndex",
    "../shaders/ShaderBase",
    "../shaders/compilers/LightingCompiler",
    "awayjs-display/lib/materials/LightSources",
    "awayjs-stagegl/lib/base/ContextGLProfile",
    "awayjs-renderergl/lib/shaders/RegisterPool",
    "RegisterPool",
    "regCount",
    "persistent",
    "_regName",
    "_regCount",
    "_persistent",
    "initRegisters",
    "requestFreeVectorReg",
    "isRegisterUsed",
    "_usedVectorCount",
    "_vectorRegisters",
    "requestFreeRegComponent",
    "_usedSingleCount",
    "_registerComponents",
    "addUsage",
    "register",
    "usageCount",
    "_component",
    "removeUsage",
    "hasRegisteredRegs",
    "hash",
    "_initPool",
    "_regPool",
    "_regCompsPool",
    "_initArray",
    "vectorRegisters",
    "registerComponents",
    "val",
    "../shaders/ShaderRegisterElement",
    "awayjs-renderergl/lib/shaders/ShaderBase",
    "BlendMode_1",
    "ArgumentError_1",
    "ContextGLTriangleFace_1",
    "CompilerBase_1",
    "_blendFactorSource",
    "_blendFactorDest",
    "_invalidProgram",
    "_animationVertexCode",
    "_animationFragmentCode",
    "usesBlending",
    "useImageRect",
    "usesCurves",
    "depthCompareMode",
    "writeDepth",
    "_defaultCulling",
    "ContextGLTriangleFace",
    "BACK",
    "usesPositionFragment",
    "imageIndices",
    "_elementsClass",
    "_updateProgram",
    "_programData",
    "_usesAnimation",
    "_numUsedVertexConstants",
    "_numUsedFragmentConstants",
    "gl_assetClass",
    "CompilerBase",
    "viewDirDependencies",
    "uvDependencies",
    "secondaryUVDependencies",
    "outputsTangentNormals",
    "pInitRegisterIndices",
    "commonsDataIndex",
    "cameraPositionIndex",
    "uvMatrixIndex",
    "colorTransformIndex",
    "sceneNormalMatrixIndex",
    "initConstantData",
    "numUsedFragmentConstants",
    "_iInitConstantData",
    "usesAnimation",
    "setBlendMode",
    "BlendMode",
    "NORMAL",
    "LAYER",
    "SOURCE_ALPHA",
    "ONE_MINUS_SOURCE_ALPHA",
    "MULTIPLY",
    "SOURCE_COLOR",
    "ADD",
    "ALPHA",
    "ArgumentError",
    "setCulling",
    "useBothSides",
    "NONE",
    "coordinateSystem",
    "rawData",
    "usesColorTransform",
    "colorTransform",
    "_iAssignedColorTransform",
    "compiler",
    "compile",
    "_calcAnimationCode",
    "_pRegisterCache",
    "_pSharedRegisters",
    "getProgramData",
    "vertexCode",
    "fragmentCode",
    "postAnimationFragmentCode",
    "setFragmentConst",
    "../shaders/compilers/CompilerBase",
    "awayjs-core/lib/errors/ArgumentError",
    "awayjs-core/lib/image/BlendMode",
    "awayjs-stagegl/lib/base/ContextGLTriangleFace",
    "awayjs-renderergl/lib/shaders/ShaderRegisterCache",
    "RegisterPool_1",
    "_numUsedVaryings",
    "_profile",
    "_fragmentTempCache",
    "_vertexTempCache",
    "_varyingCache",
    "_textureCache",
    "_vertexAttributesCache",
    "_fragmentConstantsCache",
    "_vertexConstantsCache",
    "_fragmentOutputRegister",
    "_vertexOutputRegister",
    "removeFragmentTempUsage",
    "getFreeFragmentSingleTemp",
    "../shaders/RegisterPool",
    "awayjs-renderergl/lib/shaders/ShaderRegisterData",
    "ShaderRegisterData",
    "awayjs-renderergl/lib/shaders/ShaderRegisterElement",
    "component",
    "_index",
    "_toStr",
    "COMPONENTS",
    "awayjs-renderergl/lib/shaders/compilers/CompilerBase",
    "ShaderRegisterData_1",
    "_pVertexCode",
    "_pFragmentCode",
    "_pPostAnimationFragmentCode",
    "_pElementsClass",
    "_pRenderPass",
    "_pShader",
    "pCompileDependencies",
    "compileColorTransformCode",
    "fragmentOutputRegister",
    "ct1",
    "ct2",
    "compileGlobalPositionCode",
    "compilePositionCode",
    "compileCurvesCode",
    "compileUVCode",
    "compileSecondaryUVCode",
    "compileNormalCode",
    "compileViewDirCode",
    "_iGetPreLightingVertexCode",
    "_iGetPreLightingFragmentCode",
    "globalPositionVarying",
    "positionVarying",
    "curvesInput",
    "curvesVarying",
    "uvAttributeReg",
    "varying",
    "uvVarying",
    "uvTransform1",
    "uvTransform2",
    "secondaryUVVarying",
    "cameraPositionReg",
    "viewDirVarying",
    "viewDirFragment",
    "animatedTangent",
    "normalFragment",
    "_iGetNormalVertexCode",
    "_iGetNormalFragmentCode",
    "normalMatrix",
    "normalVarying",
    "animatedNormal",
    "bitangent",
    "tangentVarying",
    "bitangentVarying",
    "normalInput",
    "commons",
    "tangentInput",
    "colorInput",
    "colorVarying",
    "../../shaders/ShaderRegisterData",
    "awayjs-renderergl/lib/shaders/compilers/LightingCompiler",
    "shaderLightingObject",
    "_shaderLightingObject",
    "pCompileShadowCode",
    "initLightRegisters",
    "compileLightCode",
    "compileLightProbeCode",
    "_iGetPostLightingVertexCode",
    "_iGetPostLightingFragmentCode",
    "shadowTarget",
    "_dirLightVertexConstants",
    "_pointLightVertexConstants",
    "_dirLightFragmentConstants",
    "_pointLightFragmentConstants",
    "diffuseColorReg",
    "specularColorReg",
    "lightPosReg",
    "lightDirReg",
    "vertexRegIndex",
    "fragmentRegIndex",
    "lightVarying",
    "_iGetPerLightDiffuseFragmentCode",
    "_iGetPerLightSpecularFragmentCode",
    "weightReg",
    "weightComponents",
    "weightRegisters",
    "texReg",
    "_pNumProbeRegisters",
    "_iGetPerProbeDiffuseFragmentCode",
    "_iGetPerProbeSpecularFragmentCode",
    "ceil",
    "../../shaders/compilers/CompilerBase",
    "awayjs-renderergl/lib/shaders",
    "LightingShader_1",
    "./shaders/LightingShader",
    "./shaders/RegisterPool",
    "./shaders/ShaderBase",
    "./shaders/ShaderRegisterCache",
    "./shaders/ShaderRegisterData",
    "./shaders/ShaderRegisterElement",
    "./shaders/compilers/CompilerBase",
    "./shaders/compilers/LightingCompiler",
    "awayjs-renderergl/lib/sort/IEntitySorter",
    "awayjs-renderergl/lib/sort/RenderableMergeSort",
    "headB",
    "fast",
    "slow",
    "result",
    "curr",
    "cmp",
    "aid",
    "bid",
    "ma",
    "mb",
    "awayjs-renderergl/lib/sort/RenderableNullSort",
    "RenderableNullSort",
    "awayjs-renderergl/lib/sort",
    "RenderableNullSort_1",
    "./sort/RenderableNullSort",
    "awayjs-renderergl/lib/surfaces/GL_BasicMaterialSurface",
    "BasicMaterialPass_1",
    "GL_SurfaceBase_1",
    "renderPool",
    "_material",
    "_pAddPass",
    "BasicMaterialPass",
    "_pUpdateRender",
    "_pRequiresBlending",
    "alphaBlending",
    "preserveAlpha",
    "GL_SurfaceBase",
    "../surfaces/GL_SurfaceBase",
    "../surfaces/passes/BasicMaterialPass",
    "awayjs-renderergl/lib/surfaces/GL_DepthSurface",
    "GL_SurfacePassBase_1",
    "_shader",
    "_textureVO",
    "_fragmentConstantsIndex",
    "targetReg",
    "dataReg1",
    "dataReg2",
    "albedo",
    "cutOffReg",
    "GL_SurfacePassBase",
    "../surfaces/GL_SurfacePassBase",
    "awayjs-renderergl/lib/surfaces/GL_DistanceSurface",
    "awayjs-renderergl/lib/surfaces/GL_SkyboxSurface",
    "_texture",
    "awayjs-renderergl/lib/surfaces/GL_SurfaceBase",
    "SurfaceEvent_1",
    "MaterialBase_1",
    "_forceSeparateMVP",
    "_invalidAnimation",
    "_invalidRender",
    "_invalidImages",
    "_passes",
    "_imageIndices",
    "_onInvalidateAnimationDelegate",
    "onInvalidateAnimation",
    "_onInvalidatePassesDelegate",
    "onInvalidatePasses",
    "SurfaceEvent",
    "INVALIDATE_ANIMATION",
    "INVALIDATE_PASSES",
    "_onPassInvalidateDelegate",
    "onPassInvalidate",
    "_updateAnimation",
    "_renderOrderId",
    "_updateImages",
    "_numImages",
    "imageRect",
    "curves",
    "MaterialBase",
    "useAlphaPremultiplied",
    "alphaPremultiplied",
    "bothSides",
    "animateUVs",
    "useColorTransform",
    "onInvalidate",
    "_getEnabledGPUAnimation",
    "mult",
    "iOwners",
    "numOwners",
    "getDefaultImage2D",
    "_pRemovePass",
    "_pClearPasses",
    "../events/PassEvent",
    "awayjs-display/lib/events/SurfaceEvent",
    "awayjs-display/lib/materials/MaterialBase",
    "awayjs-renderergl/lib/surfaces/GL_SurfacePassBase",
    "awayjs-renderergl/lib/surfaces/ISurfaceClassGL",
    "awayjs-renderergl/lib/surfaces/SurfacePool",
    "awayjs-renderergl/lib/surfaces/passes/BasicMaterialPass",
    "PassBase_1",
    "_diffuseR",
    "_diffuseG",
    "_diffuseB",
    "_diffuseA",
    "regCache",
    "sharedReg",
    "alphaReg",
    "diffuseInputReg",
    "_render",
    "PassBase",
    "../../shaders/ShaderBase",
    "../../surfaces/passes/PassBase",
    "awayjs-renderergl/lib/surfaces/passes/ILightingPass",
    "awayjs-renderergl/lib/surfaces/passes/IPass",
    "awayjs-renderergl/lib/surfaces/passes/PassBase",
    "_preserveAlpha",
    "../../events/PassEvent",
    "awayjs-renderergl/lib/surfaces",
    "GL_BasicMaterialSurface_1",
    "GL_SkyboxSurface_1",
    "./surfaces/GL_BasicMaterialSurface",
    "./surfaces/GL_SkyboxSurface",
    "./surfaces/GL_SurfaceBase",
    "./surfaces/GL_SurfacePassBase",
    "./surfaces/passes/BasicMaterialPass",
    "./surfaces/passes/PassBase",
    "awayjs-renderergl/lib/textures/GL_Single2DTexture",
    "MappingMode_1",
    "GL_TextureBase_1",
    "single2DTexture",
    "_single2DTexture",
    "inputReg",
    "wrap",
    "mappingMode",
    "MappingMode",
    "RADIAL_GRADIENT",
    "samplerReg",
    "_samplerIndex",
    "_imageIndex",
    "textureReg",
    "getTextureReg",
    "_textureIndex",
    "_sampler",
    "GL_TextureBase",
    "../textures/GL_TextureBase",
    "awayjs-display/lib/textures/MappingMode",
    "awayjs-renderergl/lib/textures/GL_SingleCubeTexture",
    "singleCubeTexture",
    "_singleCubeTexture",
    "includeInput",
    "awayjs-renderergl/lib/textures/GL_TextureBase",
    "ContextGLTextureFormat_1",
    "imageIndex",
    "getFormatString",
    "ContextGLTextureFormat",
    "COMPRESSED",
    "COMPRESSED_ALPHA",
    "awayjs-stagegl/lib/base/ContextGLTextureFormat",
    "awayjs-renderergl/lib/textures",
    "GL_Single2DTexture_1",
    "GL_SingleCubeTexture_1",
    "./textures/GL_Single2DTexture",
    "./textures/GL_SingleCubeTexture",
    "./textures/GL_TextureBase",
    "awayjs-renderergl/lib/tools/commands/Merge",
    "Sprite_1",
    "Merge",
    "keepMaterial",
    "disposeSources",
    "objectSpace",
    "_keepMaterial",
    "_disposeSources",
    "_objectSpace",
    "applyToContainer",
    "receiver",
    "objectContainer",
    "parseContainer",
    "collect",
    "merge",
    "applyToSprites",
    "sprites",
    "_toDispose",
    "_graphicVOs",
    "destSprite",
    "destGraphics",
    "useSubMaterials",
    "vertices",
    "addGraphic",
    "subIdx",
    "calc",
    "iIdx",
    "vIdx",
    "nIdx",
    "tIdx",
    "uIdx",
    "ind",
    "getGraphicData",
    "copyAttributes",
    "transformVectors",
    "deltaTransformVectors",
    "attributes",
    "array",
    "startIndex",
    "dim",
    "GraphicVO",
    "object",
    "child",
    "Sprite",
    "getChildAt",
    "awayjs-display/lib/display/Sprite",
    "awayjs-renderergl/lib/tools/data/ParticleGraphicsTransform",
    "ParticleGraphicsTransform",
    "_defaultVertexTransform",
    "_defaultInvVertexTransform",
    "transpose",
    "_defaultUVTransform",
    "awayjs-renderergl/lib/tools",
    "Merge_1",
    "ParticleGraphicsTransform_1",
    "./tools/commands/Merge",
    "./tools/data/ParticleGraphicsTransform",
    "awayjs-renderergl/lib/utils/ParticleGraphicsHelper",
    "ParticleData_1",
    "ParticleGraphicsHelper",
    "generateGraphics",
    "output",
    "graphicsArray",
    "transforms",
    "indicesVector",
    "positionsVector",
    "normalsVector",
    "tangentsVector",
    "uvsVector",
    "vertexCounters",
    "elementsArray",
    "sourceGraphics",
    "numGraphics",
    "vertexCounter",
    "sub2SubMap",
    "tempVertex",
    "tempNormal",
    "tempTangents",
    "tempUV",
    "MAX_VERTEX",
    "particleData",
    "ParticleData",
    "posIndex",
    "tempLen",
    "compact",
    "sourceUVs",
    "particleGraphicsTransform",
    "vertexTransform",
    "invVertexTransform",
    "UVTransform",
    "deltaTransformVector",
    "transformPoint",
    "sourceIndices",
    "awayjs-display/lib/animators/data/ParticleData",
    "awayjs-renderergl/lib/utils/PerspectiveMatrix3D",
    "PerspectiveMatrix3D",
    "perspectiveFieldOfViewLH",
    "fieldOfViewY",
    "aspectRatio",
    "zNear",
    "zFar",
    "yScale",
    "tan",
    "xScale",
    "awayjs-renderergl/lib/utils",
    "ParticleGraphicsHelper_1",
    "PerspectiveMatrix3D_1",
    "./utils/ParticleGraphicsHelper",
    "./utils/PerspectiveMatrix3D"
  ],
  "mappings": "AAAAA,QAAA,QAAAC,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,SAAAR,UAAA,YAAAA,OAAA,KAAAO,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAG,EAAA,MAAAA,GAAAH,GAAA,EAAA,IAAAI,GAAA,GAAAC,OAAA,uBAAAL,EAAA,IAAA,MAAAI,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAV,EAAAG,IAAAQ,WAAAZ,GAAAI,GAAA,GAAAS,KAAAF,EAAAC,QAAA,SAAAb,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAY,EAAAA,EAAAC,QAAAb,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAQ,QAAA,GAAAL,SAAAT,UAAA,YAAAA,OAAA,KAAA,GAAAM,GAAA,EAAAA,EAAAF,EAAAY,OAAAV,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAY,GAAA,SAAAjB,EAAAkB,EAAAJ,GCCA,YCDA,IAAYK,GAASnB,EAAS,kBA8C7Bc,GAAAK,UAASA,CA7CV,IAAYC,GAAQpB,EAAS,iBA8C5Bc,GAAAM,SAAQA,CA7CT,IAAYC,GAAMrB,EAAU,eA8C3Bc,GAAAO,OAAMA,CA7CP,IAAYC,GAAMtB,EAAU,eA8C3Bc,GAAAQ,OAAMA,CA7CP,IAAYC,GAAOvB,EAAU,gBA8C5Bc,GAAAS,QAAOA,CA7CR,IAAYC,GAAQxB,EAAS,iBA8C5Bc,GAAAU,SAAQA,CA7CT,IAAYC,GAAWzB,EAAS,oBA8C/Bc,GAAAW,YAAWA,CA7CZ,IAAYC,GAAO1B,EAAU,gBA8C5Bc,GAAAY,QAAOA,CA7CR,IAAYC,GAAI3B,EAAU,aA8CzBc,GAAAa,KAAIA,CA7CL,IAAYC,GAAQ5B,EAAS,iBA8C5Bc,GAAAc,SAAQA,CA7CT,IAAYC,GAAQ7B,EAAS,iBA8C5Bc,GAAAe,SAAQA,CA7CT,IAAYC,GAAK9B,EAAU,cA8C1Bc,GAAAgB,MAAKA,CA7CN,IAAYC,GAAK/B,EAAU,cA8C1Bc,GAAAiB,MAAKA,CA7CN,IAAAC,GAAAhC,EAAiC,wBA8ChCc,GAAAmB,gBAAeD,EAAAC,eA7ChB,IAAAC,GAAAlC,EAA+B,sBA8C9Bc,GAAAqB,cAAaD,EAAAC,aA7Cd,IAAAC,GAAApC,EAAkC,yBA8CjCc,GAAAuB,iBAAgBD,EAAAC,gBA7CjB,IAAAC,GAAAtC,EAAkC,yBA8CjCc,GAAAyB,iBAAgBD,EAAAC,gBA7CjB,IAAAC,GAAAxC,EAA+B,qBA8C9Bc,GAAA2B,aAAYD,EAAAC,YA5Cb,IAAAC,GAAA1C,EAA+B,6CAC/B,IAAA2C,GAAA3C,EAA0B,oCAC1B,IAAA4C,GAAA5C,EAA4B,uCAC5B,IAAA6C,GAAA7C,EAA8B,yCAC9B,IAAA8C,GAAA9C,EAA+B,2CAC/B,IAAA+C,GAAA/C,EAAkC,+CAClC,IAAAgD,GAAAhD,EAA2B,sCAC3B,IAAAiD,GAAAjD,EAAiC,8CACjC,IAAAkD,GAAAlD,EAAkC,gDAElC,IAAAmD,GAAAnD,EAAyB,gCAEzB4B,GAASwB,YAAYC,oBAAoBzB,EAAS0B,wBAAyBZ,EAAAa,cAC3E3B,GAASwB,YAAYC,oBAAoBzB,EAAS4B,iBAAkBb,EAAAc,OAEpEN,GAAAO,MAAML,oBAAoBjC,EAASuC,gBAAiBb,EAAAc,aACpDT,GAAAO,MAAML,oBAAoBjC,EAASyC,oBAAqBd,EAAAe,iBAExDpC,GAAQqC,WAAWV,oBAAoBxB,EAASmC,mBAAoBf,EAAAgB,gBACpEvC,GAAQqC,WAAWV,oBAAoBxB,EAASqC,qBAAsBhB,EAAAiB,kBAEtE3B,GAAAC,aAAaY,oBAAoB5B,EAAY2C,uBAAwBxB,EAAAyB,UACrE7B,GAAAC,aAAaY,oBAAoB5B,EAAY6C,yBAA0BzB,EAAA0B,YACvE/B,GAAAC,aAAaY,oBAAoB5B,EAAY+C,qBAAsBxB,EAAAyB,QACnEjC,GAAAC,aAAaY,oBAAoB5B,EAAYiD,oBAAqB/B,EAAAc,UAqBjEkB,wBAAA,wCAAAC,sBAAA,sCAAAC,yBAAA,yCAAAC,yBAAA,yCAAAC,qBAAA,qCAAAC,kBAAA,kCAAAC,iBAAA,iCAAAC,eAAA,+BAAAC,eAAA,+BAAAC,gBAAA,gCAAAC,iBAAA,iCAAAC,oBAAA,oCAAAC,gBAAA,gCAAAC,aAAA,6BAAAC,iBAAA,iCAAAC,iBAAA,iCAAAC,cAAA,8BAAAC,cAAA,8BAAAC,uCAAAC,UAAAC,yCAAAD,UAAAE,oCAAAF,UAAAG,sCAAAH,UAAAI,2CAAAJ,UAAAK,+CAAAL,UAAAM,6CAAAN,UAAAO,8CAAAP,UAAAQ,gDAAAR,UAAAS,gCAAAT,YAAAU,yCAAA,SAAAxG,EAAAkB,EAAAJ,GDLD,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IE9DnF,IAAAK,GAAApH,EAA+B,sCAkB/B,IAAAqH,GAAArH,EAAmC,6CAGnC,IAAAwC,GAAAxC,EAA+B,iBAC/B,IAAAkC,GAAAlC,EAA+B,kBAC/B,IAAAoC,GAAApC,EAAkC,qBAClC,IAAAsC,GAAAtC,EAAkC,qBAIlC,IAAAsH,GAAAtH,EAAkC,8BAUlC,IAAAiC,GAAA,SAAAsF,GAAqCd,EAAAxE,EAAAsF,EAmFpC,SAAAtF,GAAYuF,EAAoBC,EAA+BC,EAA6BC,GAAhF,GAAAH,QAAA,GAAkB,CAAlBA,EAAA,KAAoB,GAAAC,QAAA,GAA6B,CAA7BA,EAAA,MAA+B,GAAAC,QAAA,GAA2B,CAA3BA,EAAA,WAA6B,GAAAC,QAAA,GAAoB,CAApBA,EAAA,OAE3FJ,EAAAxG,KAAA2F,KAAMc,EAAO,KAAMC,EAAeC,EAASC,EA3EpCjB,MAAAkB,WAAoB,CACpBlB,MAAAmB,mBAA6C,GAAIC,MACjDpB,MAAAqB,aAAiC,GAAID,MACrCpB,MAAAsB,aAAiC,GAAIF,MA0E5C,IAAIN,EACHd,KAAKuB,aAAe,IAErBvB,MAAKwB,mBAAqBZ,EAAAa,iBAAiBC,YAAY1B,KAAK2B,QAE5D3B,MAAK4B,gBAAkB,GAAIpG,GAAAC,cAAcuE,KAAK2B,QAC9C3B,MAAK6B,mBAAqB,GAAInG,GAAAC,iBAAiBqE,KAAK2B,QAEpD,IAAI3B,KAAK8B,QAAU,EAClB9B,KAAK+B,MAAQC,OAAOC,eAEpBjC,MAAKwB,mBAAmBU,UAAYlC,KAAK8B,MAE1C,IAAI9B,KAAKmC,SAAW,EACnBnC,KAAKoC,OAASJ,OAAOK,gBAErBrC,MAAKwB,mBAAmBc,WAAatC,KAAKmC,QAxF5C3B,OAAA+B,eAAWhH,EAAAgF,UAAA,aFyDJiC,IEzDP,WAEC,MAAOxC,MAAKkB,YF0DNuB,IEvDP,SAAqBC,GAEpB,GAAI1C,KAAKkB,YAAcwB,EACtB,MAED1C,MAAKkB,WAAawB,CAElB1C,MAAK2C,oBAAsB,MFsDrBC,WAAY,KACZC,aAAc,MEjDrBrC,QAAA+B,eAAWhH,EAAAgF,UAAA,gBFuDJiC,IEvDP,WAEC,MAAOxC,MAAK8C,eFwDNL,IErDP,SAAwBC,GAEvB1C,KAAK8C,cAAgBJ,GFsDfE,WAAY,KACZC,aAAc,MEhDrBrC,QAAA+B,eAAWhH,EAAAgF,UAAA,aFuDJiC,IEvDP,WAEC,MAAOxC,MAAK+C,mBAAoB/C,KAAK+C,mBAAmBlI,QAAU,MFwD5D4H,IEtDP,SAAqBC,GAEpB,GAAIA,GAASA,EAAMpI,QAAU,EAC5BoI,EAAQ,IAET,IAAI1C,KAAK+C,qBAAuBL,EAAO,CACtC1C,KAAK+C,mBAAmBC,SACxBhD,MAAK+C,mBAAqB,SACpB,KAAK/C,KAAK+C,oBAAsBL,EAAO,CAC7C1C,KAAK+C,mBAAqB,GAAInH,GAAAC,iBAAiBmE,KAAK2B,QACpD3B,MAAK+C,mBAAmBlI,QAAU6H,EAGnC,GAAI1C,KAAK+C,mBAAoB,CAC5B/C,KAAK+C,mBAAmBlI,QAAU6H,CAClC1C,MAAKiD,qBAAuBjD,KAAK+C,mBAAmBG,uBAC9C,CACNlD,KAAKiD,qBAAuB,KAE5B,IAAIjD,KAAKmD,cAAe,CACvBnD,KAAKmD,cAAcH,SACnBhD,MAAKmD,cAAgB,QFwDjBP,WAAY,KACZC,aAAc,MEpBdtH,GAAAgF,UAAA6C,UAAP,SAAiBC,GAEhB,GAAIC,GAAgBzC,EAAAN,UAAM6C,UAAS/I,KAAA2F,KAACqD,EAEpC,IAAIC,GAASD,EAAKE,aACjBvD,KAAKwD,YAAYH,EAAKI,OAAOC,gBAE9B,OAAOJ,GAGD/H,GAAAgF,UAAAoD,OAAP,SAAcC,EAAeC,GAE5BhD,EAAAN,UAAMoD,OAAMtJ,KAAA2F,KAAC4D,EAAQC,EAErB,KAAK7D,KAAK2B,QAAQmC,sBAAuB,CACxC9D,KAAK2C,oBAAsB,IAC3B,QAGD,GAAI3C,KAAK2C,oBACR3C,KAAK+D,mBAEN,IAAI/D,KAAKuB,cAAgBvB,KAAKgE,UAC7BhE,KAAKgE,UAAUC,MAAM,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGtD,EAAAuD,mBAAmBC,MAE3D,IAAInE,KAAK+C,mBAAoB,CAC5B/C,KAAKoE,cAAgBpE,KAAKwB,mBAAmB4C,aAC7CpE,MAAKqE,cAAgBrE,KAAKwB,mBAAmB6C,kBACvC,CACNrE,KAAKoE,cAAgB,CACrBpE,MAAKqE,cAAgB,EAGtB,GAAIrE,KAAKiD,qBACRjD,KAAKsE,2BAA2BV,EAAQC,EAEzC,IAAI7D,KAAK8C,cACR9C,KAAKuE,oBAAoBX,EAAQC,EAGlC7D,MAAKmB,mBAAmB7G,OAAS,CACjC0F,MAAKqB,aAAa/G,OAAS,CAC3B0F,MAAKsB,aAAahH,OAAS,CAE3B,IAAI0F,KAAK+C,oBAAsB/C,KAAKgE,UAAW,CAC9ChE,KAAKwE,SAASZ,EAAQC,EAAO7D,KAAK+C,mBAAmB0B,oBAAoBzE,KAAK2B,SAAU3B,KAAKwB,mBAAmBkD,oBAChH1E,MAAK+C,mBAAmBY,OAAO3D,KAAK2B,QAASiC,EAAQ5D,KAAKmD,mBACpD,CAEN,GAAInD,KAAKuB,aACRvB,KAAKwE,SAASZ,EAAQC,EAAO,KAAM7D,KAAK2E,mBAExC3E,MAAKwE,SAASZ,EAAQC,GAGxB,IAAK7D,KAAKuB,cAAgBvB,KAAKgE,UAC9BhE,KAAKgE,UAAUY,SAGhB5E,MAAK2B,QAAQkD,YAAc,MAGrBtJ,GAAAgF,UAAAuE,eAAP,SAAsBlB,EAAemB,EAAyBC,EAA8BC,GAAvD,GAAAF,QAAA,GAAuB,CAAvBA,EAAA,KAAyB,GAAAC,QAAA,GAA4B,CAA5BA,EAAA,KAA8B,GAAAC,QAAA,GAA0B,CAA1BA,EAAA,EAE3FjF,KAAKkF,aAAatB,EAElB/C,GAAAN,UAAMuE,eAAczK,KAAA2F,KAAC4D,EAAQmB,EAAQC,EAAaC,GAG3C1J,GAAAgF,UAAA2E,aAAR,SAAqBtB,GAEpB,GAAIuB,GAAYpL,CAChB,IAAIqL,EACJ,IAAIC,EAEJF,GAAMnF,KAAKmB,mBAAmB7G,MAC9B,KAAKP,EAAI,EAAGA,EAAIoL,IAAOpL,EAAG,CACxBqL,EAAQpF,KAAKmB,mBAAmBpH,EAEjCsL,GAAeD,EAAMC,YAErB,IAAID,EAAME,iBAAmBD,EAAaE,mBAAqBF,EAAaG,kBAC3EH,EAAaI,gBAAgB7B,EAAQwB,EAAMvB,MAAO7D,KAAK4B,iBAGzDuD,EAAMnF,KAAKqB,aAAa/G,MACxB,KAAKP,EAAI,EAAGA,EAAIoL,IAAOpL,EAAG,CACzBqL,EAAoBpF,KAAKqB,aAAatH,EAEtCsL,GAAeD,EAAMC,YAErB,IAAID,EAAME,iBAAmBD,EAAaE,mBAAqBF,EAAaG,kBAC3EH,EAAaI,gBAAgB7B,EAAQwB,EAAMvB,MAAO7D,KAAK6B,qBAQnDtG,GAAAgF,UAAAmF,sBAAP,SAA6BC,GAE5B3F,KAAKmB,mBAAmByE,KAAwBD,GAO1CpK,GAAAgF,UAAAsF,gBAAP,SAAuBF,GAEtB3F,KAAKsB,aAAasE,KAAkBD,GAO9BpK,GAAAgF,UAAAuF,gBAAP,SAAuBH,GAEtB3F,KAAKqB,aAAauE,KAAkBD,GAG9BpK,GAAAgF,UAAAyC,QAAP,WAEC,IAAKhD,KAAKuB,aACTvB,KAAK2B,QAAQqB,SAEdhD,MAAKwB,mBAAmBwB,SACxBhD,MAAKwB,mBAAqB,IAE1BxB,MAAK4B,gBAAgBoB,SACrBhD,MAAK6B,mBAAmBmB,SACxBhD,MAAK4B,gBAAkB,IACvB5B,MAAK6B,mBAAqB,IAE1B7B,MAAKmD,cAAgB,IAErBtC,GAAAN,UAAMyC,QAAO3I,KAAA2F,MAOPzE,GAAAgF,UAAAgE,oBAAP,SAA2BX,EAAeC,GAEzC7D,KAAK4B,gBAAgBmE,aAAe,IAEpC,IAAI/F,KAAK+C,mBAAoB,CAC5B/C,KAAK4B,gBAAgBwC,cAAgBpE,KAAKwB,mBAAmB4C,aAC7DpE,MAAK4B,gBAAgByC,cAAgBrE,KAAKwB,mBAAmB6C,aAC7DrE,MAAK4B,gBAAgB4C,SAASZ,EAAQC,EAAO7D,KAAK+C,mBAAmB0B,oBAAoBzE,KAAK2B,SAAU3B,KAAKwB,mBAAmBkD,yBAC1H,CACN1E,KAAK4B,gBAAgBwC,cAAgB,CACrCpE,MAAK4B,gBAAgByC,cAAgB,CACrCrE,MAAK4B,gBAAgB4C,SAASZ,EAAQC,GAGvC7D,KAAK4B,gBAAgBmE,aAAe,MAO9BxK,GAAAgF,UAAA+D,2BAAP,SAAkCV,EAAeC,GAEhD,GAAI7D,KAAKgG,wBAA0BhG,KAAKmD,cACvCnD,KAAKiG,iBAA8BjG,KAAK2B,QAAQuE,QAEjDlG,MAAK4B,gBAAgBwC,cAAgBpE,KAAKwB,mBAAmB4C,aAC7DpE,MAAK4B,gBAAgByC,cAAgBrE,KAAKwB,mBAAmB6C,aAC7DrE,MAAK4B,gBAAgB4C,SAASZ,EAAQC,EAAO7D,KAAKmD,eAO5C5H,GAAAgF,UAAAwD,kBAAP,WAKC,GAAI/D,KAAK2B,QAAQuE,UAAYlG,KAAKuB,aAAc,CAC/C,GAAIvB,KAAK8B,QAAU9B,KAAKmC,QAAS,CAChCnC,KAAK2B,QAAQwE,oBAAoBnG,KAAK8B,OAAQ9B,KAAKmC,QAASnC,KAAKkB,WAAY,KAC7ElB,MAAK2C,oBAAsB,QAQtBpH,GAAAgF,UAAA0F,iBAAR,SAAyBC,GAExBlG,KAAKgG,sBAAwB,KAE7B,IAAIhG,KAAKmD,cACRnD,KAAKmD,cAAcH,SAEpBhD,MAAKmD,cAAgB,GAAIzC,GAAA0F,cAAcpG,KAAKwB,mBAAmB6E,aAAcrG,KAAKwB,mBAAmB8E,eAEvG,OAAA/K,IA1TqCO,EAAAC,aAAxB3B,GAAAmB,gBAAeA,IFqSzBgL,kBAAkB,sCAAsCC,qBAAqB,yCAAyCC,qBAAqB,yCAAyCC,iBAAiB,qCAAqCC,8BAA8B,kDAAkDC,sCAAsCxH,UAAUyH,6CAA6CzH,YAAY0H,uCAAuC,SAASxN,EAAQkB,EAAOJ,GACre,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IG7UnF,IAAAvE,GAAAxC,EAA+B,iBAC/B,IAAAyN,GAAAzN,EAAiC,6BAOjC,IAAAmC,GAAA,SAAAoF,GAAmCd,EAAAtE,EAAAoF,EAOlC,SAAApF,GAAYqF,GAAA,GAAAA,QAAA,GAAkB,CAAlBA,EAAA,KAEXD,EAAAxG,KAAA2F,KAAMc,EAAOiG,EAAAC,gBAEbhH,MAAKiH,cAAgB,CACrBjH,MAAKkH,cAAgB,CACrBlH,MAAKmH,cAAgB,EAOf1L,EAAA8E,UAAA6C,UAAP,SAAiBC,GAEhB,GAAIC,GAAgBD,EAAK+D,kBAAoBtL,EAAAC,aAAaqL,kBAAoB/D,EAAKgE,iBAEnF,KAAK/D,EAAO,CACXD,EAAK+D,iBAAmBtL,EAAAC,aAAaqL,gBAErC,OAAO,OAGR,MAAOvG,GAAAN,UAAM6C,UAAS/I,KAAA2F,KAACqD,GAEzB,OAAA5H,IAhCmCK,EAAAC,aAAtB3B,GAAAqB,cAAaA,IH0WvBiL,iBAAiB,qCAAqCY,6BAA6B,mDAAmDC,0CAA0C,SAASjO,EAAQkB,EAAOJ,GAC3M,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IIvXnF,IAAAvE,GAAAxC,EAA+B,iBAC/B,IAAAkO,GAAAlO,EAAmC,gCAOnC,IAAAqC,GAAA,SAAAkF,GAAsCd,EAAApE,EAAAkF,EAOrC,SAAAlF,GAAYmF,GAAA,GAAAA,QAAA,GAAkB,CAAlBA,EAAA,KAEXD,EAAAxG,KAAA2F,KAAMc,EAAO0G,EAAAC,mBAEbzH,MAAKiH,cAAgB,CACrBjH,MAAKkH,cAAgB,CACrBlH,MAAKmH,cAAgB,EAOfxL,EAAA4E,UAAA6C,UAAP,SAAiBC,GAEhB,GAAIC,GAAgBD,EAAK+D,kBAAoBtL,EAAAC,aAAaqL,kBAAoB/D,EAAKgE,iBAEnF,KAAK/D,EAAO,CACXD,EAAK+D,iBAAmBtL,EAAAC,aAAaqL,gBAErC,OAAO,OAGR,MAAOvG,GAAAN,UAAM6C,UAAS/I,KAAA2F,KAACqD,GAEzB,OAAA1H,IAhCsCG,EAAAC,aAAzB3B,GAAAuB,iBAAgBA,IJoZ1B+K,iBAAiB,qCAAqCgB,gCAAgC,sDAAsDC,0CAA0C,SAASrO,EAAQkB,EAAOJ,GACjN,YK1ZA,IAAAwN,GAAAtO,EAAkC,4CAClC,IAAAuO,GAAAvO,EAAqC,+CACrC,IAAAwO,GAAAxO,EAA0C,sDAK1C,IAAAyO,GAAAzO,EAA4B,oBAC5B,IAAAsH,GAAAtH,EAAkC,8BAOlC,IAAAuC,GAAA,WAYC,QAAAA,GAAYiF,GAZb,GAAAkH,GAAAhI,IASSA,MAAAiI,oBAA8B,IAKrCjI,MAAKkI,qBAAuB,SAACC,GAAmB,MAAAH,GAAKI,YAAYD,GAEjEnI,MAAKqI,OAASvH,CACdd,MAAKsI,YAAc1H,EAAAa,iBAAiBC,YAAYZ,EAChDd,MAAKsI,YAAYC,iBAAiBR,EAAAS,SAASC,OAAQzI,KAAKkI,sBAIjDrM,EAAA0E,UAAA6H,YAAR,SAAoBD,GAEnBnI,KAAKiI,oBAAsB,KAG5BzH,QAAA+B,eAAW1G,EAAA0E,UAAA,sBLsYJiC,IKtYP,WAEC,MAAOxC,MAAK0I,qBLuYN9F,WAAY,KACZC,aAAc,MKrYdhH,GAAA0E,UAAAkE,oBAAP,SAA2B3D,GAE1B,GAAId,KAAK2I,oBACR3I,KAAK4I,kBAAkB9H,EAExB,OAAOd,MAAK6I,kBAGbrI,QAAA+B,eAAW1G,EAAA0E,UAAA,WLqYJiC,IKrYP,WAEC,MAAOxC,MAAK8I,ULsYNrG,IKnYP,SAAmBC,GAElB1C,KAAK8I,SAAWpG,CAEhB1C,MAAK2I,oBAAsB,IAE3B3I,MAAK0I,oBAAsB,KAE3B,KAAK1I,KAAK8I,SACT,MAED,KAAK,GAAI/O,GAAW,EAAGA,EAAIiG,KAAK8I,SAASxO,SAAUP,EAClD,GAAIiG,KAAK8I,SAAS/O,GAAGmJ,mBACpBlD,KAAK0I,oBAAsB,IAE7B1I,MAAKiI,oBAAsB,ML+XrBrF,WAAY,KACZC,aAAc,MK7XbhH,GAAA0E,UAAAqI,kBAAR,SAA0B9H,GAEzB,GAAIqE,EAEJ,IAAInF,KAAKiI,oBACRjI,KAAK+I,mBAEN,KAAK/I,KAAK8I,SAAU,CACnB9I,KAAKgJ,OAAS,IACd,QAGDhJ,KAAKgJ,OAAS,GAAI5H,MAElB+D,GAAMnF,KAAK8I,SAASxO,OAAS,CAE7B,IAAI2O,EAEJ,KAAK,GAAIlP,GAAW,EAAGA,GAAKoL,IAAOpL,EAAG,CAGrCkP,EAASjJ,KAAK8I,SAAS/O,EAEvBkP,GAAOC,iBAAiBnP,GAAKoL,EAAK,KAAOnF,KAAK8I,SAAS/O,EAAI,GAAG0K,oBAAoB3D,GAAQA,EAE1Fd,MAAKgJ,OAAShJ,KAAKgJ,OAAOG,OAAOF,EAAOG,OAIzCpJ,KAAK6I,kBAAoB7I,KAAK8I,SAAS,GAAGrE,oBAAoB3D,GAIxDjF,GAAA0E,UAAAoD,OAAP,SAAc7C,EAAa8C,EAAeyF,GAEzC,GAAIlE,EACJ,IAAIpL,EACJ,IAAIuP,EACJ,IAAIpD,GAAkCpF,EAAMoF,OAE5C,IAAIqD,GAA2BvJ,KAAKsI,YAAYiB,WAEhD,IAAIC,GAA6BxJ,KAAKsI,YAAYmB,2BAElD,KAAKzJ,KAAK8I,SACT,MAED,IAAI9I,KAAKiI,oBACRjI,KAAK+I,mBAEN,IAAI/I,KAAK2I,oBACR3I,KAAK4I,kBAAkB9H,EAExBqE,GAAMnF,KAAK8I,SAASxO,MAEpB,KAAKP,EAAI,EAAGA,EAAIoL,IAAOpL,EACtBiG,KAAK8I,SAAS/O,GAAG2P,OAAO5I,EAAO8C,EAEhCuB,GAAMnF,KAAKgJ,OAAO1O,MAElB,IAAI6K,EAAM,EAAG,CACZe,EAAQyD,WAAW3J,KAAKgJ,OAAO,GAAGY,WAAW9I,GAC7CoF,GAAQ2D,kBAAkB7J,KAAKgJ,OAAO,GAAGc,eAAgBN,EAAc,EAAG1B,EAAAiC,4BAA4BC,QACtG9D,GAAQ2D,kBAAkB7J,KAAKgJ,OAAO,GAAGiB,SAAUT,EAAc,EAAG1B,EAAAiC,4BAA4BC,SAGjG,IAAKjQ,EAAI,EAAGA,EAAIoL,IAAOpL,EAAG,CAEzBuP,EAAOtJ,KAAKgJ,OAAOjP,EAEnB+G,GAAMoJ,gBAAgBZ,EAAKvE,OAE3BmB,GAAQyD,WAAWL,EAAKM,WAAW9I,GACnBA,GAAMqJ,eAAeb,EAAK7E,oBAAoB3D,IAASsJ,SAASd,EAAKe,mBAAoB,MAGzG,KAAKf,EAAKvE,OAAQ,CAEjBjE,EAAMkE,YAAc,IACpBwE,GAAexJ,KAAKsI,YAAYgC,0BAChCpE,GAAQ2D,kBAAkBP,EAAKQ,eAAgBN,EAAc,EAAG1B,EAAAiC,4BAA4BC,QAC5F9D,GAAQ2D,kBAAkBP,EAAKW,SAAUT,EAAc,EAAG1B,EAAAiC,4BAA4BC,SAGvF9D,EAAQjC,MAAM,EAAK,EAAK,EAAK,EAE7BqF,GAAKc,SAAStJ,EAAO8C,EAAQyF,EAE7BnD,GAAQqE,gBAAgB1C,EAAA2C,qBAAqBC,IAAK5C,EAAA2C,qBAAqBE,KACvExE,GAAQyE,YAAY/C,EAAAgD,kBAAkBC,UAAWtB,EAAa,EAAG,EAEjED,GAAKwB,WAAWhK,GAGjBoF,EAAQ6E,aAAa,EAAG,KACxB7E,GAAQ2D,kBAAkB,EAAG,KAC7B3D,GAAQ2D,kBAAkB,EAAG,MAGtBhO,GAAA0E,UAAAwI,kBAAR,WAEC,IAAK,GAAIhP,GAAW,EAAGA,EAAIiG,KAAK8I,SAASxO,SAAUP,EAAG,CACrDiG,KAAK8I,SAAS/O,GAAGsM,aAAerG,KAAKsI,YAAYjC,YACjDrG,MAAK8I,SAAS/O,GAAGuM,cAAgBtG,KAAKsI,YAAYhC,aAClDtG,MAAK8I,SAAS/O,GAAGiR,WAAahL,KAAKsI,YAGpCtI,KAAKiI,oBAAsB,KAGrBpM,GAAA0E,UAAAyC,QAAP,WAEChD,KAAKsI,YAAY2C,oBAAoBlD,EAAAS,SAASC,OAAQzI,KAAKkI,qBAC3DlI,MAAKsI,YAAc,IACnBtI,MAAKqI,OAAS,KAEhB,OAAAxM,KAnLazB,GAAAyB,iBAAgBA,IL4gB1BqP,oBAAoB,wCAAwCvE,8BAA8B,kDAAkDwE,+CAA+C/L,UAAUgM,4CAA4ChM,UAAUiM,sDAAsDjM,YAAYkM,sCAAsC,SAAShS,EAAQkB,EAAOJ,GAC9X,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IMriBnF,IAAAkL,GAAAjS,EAA4B,gCAC5B,IAAAkS,GAAAlS,EAA+B,qCAE/B,IAAAmS,GAAAnS,EAAyB,6BACzB,IAAAoS,GAAApS,EAA4B,iCAC5B,IAAAqS,GAAArS,EAA4B,gCAC5B,IAAAsS,GAAAtS,EAAiC,yCAYjC,IAAAuS,GAAAvS,EAA+B,0CAE/B,IAAAwS,GAAAxS,EAAkC,uDAClC,IAAAuO,GAAAvO,EAAqC,+CACrC,IAAAyS,GAAAzS,EAAqC,+CAGrC,IAAA0S,GAAA1S,EAA6B,uCAC7B,IAAA2S,GAAA3S,EAA+B,2CAS/B,IAAA4S,GAAA5S,EAA8B,yBAG9B,IAAA6S,GAAA7S,EAAoC,6BASpC,IAAAyC,GAAA,SAAA8E,GAAkCd,EAAAhE,EAAA8E,EAwOjC,SAAA9E,GAAY+E,EAAoBsL,EAAuCrL,EAA+BC,EAA6BC,GAxOpI,GAAA+G,GAAAhI,IAwOa,IAAAc,QAAA,GAAkB,CAAlBA,EAAA,KAAoB,GAAAsL,QAAA,GAAqC,CAArCA,EAAA,KAAuC,GAAArL,QAAA,GAA6B,CAA7BA,EAAA,MAA+B,GAAAC,QAAA,GAA2B,CAA3BA,EAAA,WAA6B,GAAAC,QAAA,GAAoB,CAApBA,EAAA,OAElIJ,EAAAxG,KAAA2F,KArOOA,MAAAqM,aAAsB,GAAI7L,OAC1BR,MAAAsM,iBAA0B,GAAI9L,OAI9BR,MAAAuM,mBAA0C,GAAInL,MAC9CpB,MAAAwM,iBAA8C,GAAIpL,MAClDpB,MAAAyM,gBAAyB,CACzBzM,MAAA0M,iBAA0B,CAQ1B1M,MAAA2M,eAA0B,GAAIhB,GAAAiB,QAG9B5M,MAAA6M,UAAsB,GAAInB,GAAAoB,SAI3B9M,MAAA2C,oBAA8B,IAC9B3C,MAAAgG,sBAAgC,IAChChG,MAAA8C,cAAwB,KACvB9C,MAAA+M,aAAsB,CACtB/M,MAAAgN,aAAsB,CACtBhN,MAAAiN,aAAsB,CACtBjN,MAAAkN,iBAA0B,CAM3BlN,MAAAoE,cAAuB,CACvBpE,MAAAqE,cAAuB,CAKvBrE,MAAAmN,0BAAqC,GAAI5B,GAAA6B,QAExCpN,MAAAqN,UAAkB,GAAI5B,GAAA6B,KACtBtN,MAAAuN,WAAmB,GAAI9B,GAAA6B,KACxBtN,MAAA2E,cAA0B,GAAI+G,GAAAoB,SAQ9B9M,MAAAwN,cAAuB,CAIvBxN,MAAAyN,cAAwB,KACxBzN,MAAA0N,eAAyB,IAGxB1N,MAAA2N,eAAwB,CA0K/B3N,MAAK4N,2BAA6B,SAACzF,GAAqB,MAAAH,GAAK6F,kBAAkB1F,GAC/EnI,MAAK8N,yBAA2B,SAAC3F,GAAqB,MAAAH,GAAK+F,gBAAgB5F,GAG3EnI,MAAKgO,iBAAmB,GAAI7B,GAAA8B,mBAG5BjO,MAAK2B,QAAUb,GAASmL,EAAAiC,aAAaxM,cAAcyM,aAAapN,EAAeC,EAASC,EAExFjB,MAAK2B,QAAQ4G,iBAAiByD,EAAAoC,WAAWC,gBAAiBrO,KAAK8N,yBAC/D9N,MAAK2B,QAAQ4G,iBAAiByD,EAAAoC,WAAWE,kBAAmBtO,KAAK8N,yBACjE9N,MAAK2B,QAAQ4G,iBAAiByD,EAAAoC,WAAWG,iBAAkBvO,KAAK4N,2BAEhE5N,MAAKwO,gBAAkBpC,CAMvB,IAAIpM,KAAK2B,QAAQuE,QAChBlG,KAAKgE,UAAyBhE,KAAK2B,QAAQuE,QA/K7C1F,OAAA+B,eAAWxG,EAAAwE,UAAA,cNsfJiC,IMtfP,WAEC,MAAOxC,MAAKyO,mBNufNhM,IMpfP,SAAsBC,GAErB1C,KAAKyO,kBAAoB/L,GNqfnBE,WAAY,KACZC,aAAc,MMlfrBrC,QAAA+B,eAAWxG,EAAAwE,UAAA,iBNqfJiC,IMrfP,WAEC,MAAOxC,MAAK0N,gBNsfNjL,IMnfP,SAAyBC,GAExB1C,KAAK0N,eAAiBhL,GNofhBE,WAAY,KACZC,aAAc,MMjfrBrC,QAAA+B,eAAWxG,EAAAwE,UAAA,gBNofJiC,IMpfP,WAEC,MAAOxC,MAAKyN,eNqfNhL,IMlfP,SAAwBC,GAEvB1C,KAAKyN,cAAgB/K,GNmffE,WAAY,KACZC,aAAc,MM9erBrC,QAAA+B,eAAWxG,EAAAwE,UAAA,eNofJiC,IMpfP,WAEC,MAAOxC,MAAKwN,eNqfN5K,WAAY,KACZC,aAAc,MM1erBrC,QAAA+B,eAAWxG,EAAAwE,UAAA,YNgfJiC,IMhfP,WAEC,MAAOxC,MAAK6M,WNifNjK,WAAY,KACZC,aAAc,MM5erBrC,QAAA+B,eAAWxG,EAAAwE,UAAA,eNkfJiC,IMlfP,WAEC,MAAOxC,MAAK2E,eNmfN/B,WAAY,KACZC,aAAc,MM9erBrC,QAAA+B,eAAWxG,EAAAwE,UAAA,KNofJiC,IMpfP,WAEC,MAAOxC,MAAKqN,UAAUqB,GNqfhBjM,IMlfP,SAAaC,GAEZ,GAAI1C,KAAK0O,GAAKhM,EACb,MAED1C,MAAKuN,WAAWmB,EAAI1O,KAAKqN,UAAUqB,EAAIhM,CAEvC1C,MAAK2O,mBNifC/L,WAAY,KACZC,aAAc,MM5erBrC,QAAA+B,eAAWxG,EAAAwE,UAAA,KNkfJiC,IMlfP,WAEC,MAAOxC,MAAKqN,UAAUuB,GNmfhBnM,IMhfP,SAAaC,GAEZ,GAAI1C,KAAK4O,GAAKlM,EACb,MAED1C,MAAKuN,WAAWqB,EAAI5O,KAAKqN,UAAUuB,EAAIlM,CAEvC1C,MAAK2O,mBN+eC/L,WAAY,KACZC,aAAc,MM1erBrC,QAAA+B,eAAWxG,EAAAwE,UAAA,SNgfJiC,IMhfP,WAEC,MAAOxC,MAAK8B,QNifNW,IM9eP,SAAiBC,GAEhB,GAAI1C,KAAK8B,QAAUY,EAClB,MAED1C,MAAK8B,OAASY,CACd1C,MAAK2E,cAAc5C,MAAQW,CAE3B,IAAI1C,KAAKwB,mBACRxB,KAAKwB,mBAAmBU,UAAYQ,CAErC1C,MAAK2C,oBAAsB,IAC3B3C,MAAKgG,sBAAwB,IAE7BhG,MAAK6O,uBN2eCjM,WAAY,KACZC,aAAc,MMterBrC,QAAA+B,eAAWxG,EAAAwE,UAAA,UN4eJiC,IM5eP,WAEC,MAAOxC,MAAKmC,SN6eNM,IM1eP,SAAkBC,GAEjB,GAAI1C,KAAKmC,SAAWO,EACnB,MAED1C,MAAKmC,QAAUO,CACf1C,MAAK2E,cAAcvC,OAASM,CAE5B,IAAI1C,KAAKwB,mBACRxB,KAAKwB,mBAAmBc,WAAaI,CAEtC1C,MAAK2C,oBAAsB,IAC3B3C,MAAKgG,sBAAwB,IAE7BhG,MAAK6O,uBNueCjM,WAAY,KACZC,aAAc,MMtcd9G,GAAAwE,UAAA4J,eAAP,SAAsB2E,GAErB,MAAO9O,MAAKsM,iBAAiBwC,EAAWC,MAAQ/O,KAAKsM,iBAAiBwC,EAAWC,IAAM,GAAsBhT,GAAaiT,sBAAsBF,EAAWG,WAAYH,EAAY9O,OAO7KjE,GAAAwE,UAAA2O,iBAAP,SAAwBJ,GAEvB9O,KAAKsM,iBAAiBwC,EAAWC,IAAM,KASjChT,GAAAwE,UAAA4O,eAAP,SAAsBzU,GAErB,MAAOsF,MAAKqM,aAAa3R,EAAS0U,gBAAkBpP,KAAKqM,aAAa3R,EAAS0U,cAAgB,GAAIlD,GAAAxP,YAAYhC,EAAS2U,cAAerP,KAAK2B,QAAS3B,KAAKwO,kBAO7IzS,GAAAY,oBAAd,SAAkC2S,EAAgCC,GAEjExT,EAAaiT,sBAAsBO,EAAWN,WAAaK,EAGrDvT,GAAAwE,UAAAiP,aAAP,SAAoBC,EAAY7L,GAG/B,GAAI7J,EACJ,KAAKA,EAAI0V,EAAKC,OAAOC,eAAgB5V,EAAIiG,KAAKyM,gBAAiB1S,IAC9DiG,KAAKgE,UAAU6F,kBAAkB9P,EAAG,KAGrC,KAAKA,EAAI0V,EAAKC,OAAOE,gBAAiB7V,EAAIiG,KAAK0M,iBAAkB3S,IAChEiG,KAAKgE,UAAU+G,aAAahR,EAAG,KAGhC,IAAI8V,GAA0BJ,EAAKC,OAAOG,WAE1C,KAAKA,EAAYC,QAAS,CACzBD,EAAYC,QAAU9P,KAAKgE,UAAU+L,eACrC,IAAIC,IAA4B,GAAIlE,GAAAmE,mBAAoBC,SAAS,kBAAoBL,EAAYM,aAAe,WAAY,UAAUC,IACtI,IAAIC,IAA8B,GAAIvE,GAAAmE,mBAAoBC,SAAS,oBAAsBL,EAAYS,eAAiB,WAAY,YAAYF,IAC9IP,GAAYC,QAAQS,OAAOP,EAAgBK,GAI5CrQ,KAAKgE,UAAU2F,WAAWkG,EAAYC,QAGtCL,GAAKe,WAAW5M,GAGV7H,GAAAwE,UAAAkQ,eAAP,SAAsBhB,GAGrBA,EAAKiB,cAEL1Q,MAAKyM,gBAAkBgD,EAAKC,OAAOC,cACnC3P,MAAK0M,iBAAmB+C,EAAKC,OAAOE,gBAQrCpP,QAAA+B,eAAWxG,EAAAwE,UAAA,iBNubJiC,IMvbP,WAEC,MAAOxC,MAAK+M,cNwbNtK,IMrbP,SAAyBC,GAExB,GAAI1C,KAAK+M,cAAgBrK,EACxB,MAED1C,MAAK+M,aAAerK,CAEpB1C,MAAK2C,oBAAsB,MNobrBC,WAAY,KACZC,aAAc,MM7arBrC,QAAA+B,eAAWxG,EAAAwE,UAAA,iBNqbJiC,IMrbP,WAEC,MAAOxC,MAAKgN,cNsbNvK,IMnbP,SAAyBC,GAExB,GAAI1C,KAAKgN,cAAgBtK,EACxB,MAED1C,MAAKgN,aAAetK,CAEpB1C,MAAK2C,oBAAsB,MNkbrBC,WAAY,KACZC,aAAc,MM3arBrC,QAAA+B,eAAWxG,EAAAwE,UAAA,iBNmbJiC,IMnbP,WAEC,MAAOxC,MAAKiN,cNobNxK,IMjbP,SAAyBC,GAExB,GAAI1C,KAAKiN,cAAgBvK,EACxB,MAED1C,MAAKiN,aAAevK,CAEpB1C,MAAK2C,oBAAsB,MNgbrBC,WAAY,KACZC,aAAc,MM9arBrC,QAAA+B,eAAWxG,EAAAwE,UAAA,WNibJiC,IMjbP,WAEC,MAAOxC,MAAKgE,WNkbNpB,WAAY,KACZC,aAAc,MM7arBrC,QAAA+B,eAAWxG,EAAAwE,UAAA,SNmbJiC,IMnbP,WAEC,MAAOxC,MAAK2B,SNobNiB,WAAY,KACZC,aAAc,MM/ad9G,GAAAwE,UAAAyC,QAAP,WAEC,IAAK,GAAI+L,KAAM/O,MAAKsM,iBACnBtM,KAAKsM,iBAAiByC,GAAI9K,OAE3BjE,MAAKsM,iBAAmB,IAExBtM,MAAK2B,QAAQsJ,oBAAoBe,EAAAoC,WAAWC,gBAAiBrO,KAAK8N,yBAClE9N,MAAK2B,QAAQsJ,oBAAoBe,EAAAoC,WAAWE,kBAAmBtO,KAAK8N,yBACpE9N,MAAK2B,QAAQsJ,oBAAoBe,EAAAoC,WAAWG,iBAAkBvO,KAAK4N,2BAEnE5N,MAAK2B,QAAU,IACf3B,MAAKgE,UAAY,KASXjI,GAAAwE,UAAAoD,OAAP,SAAcC,EAAeC,GAE5B7D,KAAK2Q,eAAiB,KACtB3Q,MAAK4Q,cAAgB,MASf7U,GAAAwE,UAAAiE,SAAP,SAAgBZ,EAAeC,EAAakB,EAAyBC,EAA8BC,GAAvD,GAAAF,QAAA,GAAuB,CAAvBA,EAAA,KAAyB,GAAAC,QAAA,GAA4B,CAA5BA,EAAA,KAA8B,GAAAC,QAAA,GAA0B,CAA1BA,EAAA,EAGlG,IAAKjF,KAAK2B,UAAY3B,KAAKgE,UAC1B,MAGDhE,MAAK6Q,wBAA0B,IAC/B7Q,MAAK8Q,uBAAyB,IAC9B9Q,MAAKwN,cAAgB,CAErBxN,MAAK+Q,YAAc/Q,KAAKyO,kBAAmBzO,KAAKyO,kBAAoB7K,EAAOoN,aAC3EhR,MAAK2N,eAAiB3N,KAAK+Q,YAAa/Q,KAAK+Q,YAAYzW,OAAS,CAClE0F,MAAKiR,gBAAkBrN,EAAOsN,aAC9BlR,MAAKmR,iBAAmBvN,EAAOwN,cAC/BpR,MAAK2M,eAAiBnB,EAAA6F,cAAcC,WAAW1N,EAAOwN,eAAgBpR,KAAK2M,eAE3E5Q,GAAaqL,kBAEbvD,GAAM0N,mBAAmBvR,KAGzB,IAAIA,KAAKgO,iBAAkB,CAC1BhO,KAAK8Q,uBAA6C9Q,KAAKgO,iBAAiBwD,sBAAsBxR,KAAK8Q,uBACnG9Q,MAAK6Q,wBAA8C7Q,KAAKgO,iBAAiByD,uBAAuBzR,KAAK6Q,yBAGtG7Q,KAAKmN,0BAA0BuE,SAAS9N,EAAO+N,eAC/C3R,MAAKmN,0BAA0ByE,YAAY5R,KAAKoE,cAAepE,KAAKqE,cAAe,EAEnFrE,MAAK8E,eAAelB,EAAQmB,EAAQC,EAAaC,EAOjD,KAAK,GAAIlL,GAAW,EAAGA,EAAI,IAAKA,EAAG,CAClCiG,KAAKgE,UAAU6F,kBAAkB9P,EAAG,KACpCiG,MAAKgE,UAAU+G,aAAahR,EAAG,OAI1BgC,GAAAwE,UAAAsR,iBAAP,SAAwBjO,EAAeC,EAAakB,EAAkB+M,EAAoBC,EAA+BC,GAExHhS,KAAK2B,QAAQuI,gBAAgBnF,EAAQ,KAAM,EAC3C/E,MAAKgE,UAAUC,MAAM,EAAG,EAAG,EAAG,EAAG,EAAG,EAEpCjE,MAAKgE,UAAUuG,gBAAgB1C,EAAA2C,qBAAqBC,IAAK5C,EAAA2C,qBAAqBE,KAC9E1K,MAAKgE,UAAUiO,aAAa,KAAMlG,EAAAmG,qBAAqBC,KAEvD,IAAIC,GAAyBpS,KAAK8Q,sBAElC,IAAIuB,GAAgB,IAGpB,KAAK,GAAItY,GAAW+X,EAAc,EAAG/X,GAAK,IAAKA,EAAG,CACjDiG,KAAK2B,QAAQqD,YAAc+M,EAAahY,EAExCsY,GAAQ,MAITrS,KAAKgE,UAAUiO,aAAa,MAAOlG,EAAAmG,qBAAqBI,WAExDtS,MAAK2B,QAAQqD,YAAc,KAUrBjJ,GAAAwE,UAAAuE,eAAP,SAAsBlB,EAAemB,EAAyBC,EAA8BC,GAAvD,GAAAF,QAAA,GAAuB,CAAvBA,EAAA,KAAyB,GAAAC,QAAA,GAA4B,CAA5BA,EAAA,KAA8B,GAAAC,QAAA,GAA0B,CAA1BA,EAAA,EAE3FjF,KAAK2B,QAAQuI,gBAAgBnF,EAAQ,KAAME,EAE3C,KAAKF,IAAW/E,KAAKuB,gBAAkBvB,KAAK8C,cAC3C9C,KAAKgE,UAAUC,MAAMjE,KAAK+M,aAAc/M,KAAKgN,aAAchN,KAAKiN,aAAcjN,KAAKkN,iBAAkB,EAAG,EAEzGlN,MAAK2B,QAAQqD,YAAcA,CAO3BhF,MAAKgE,UAAUuG,gBAAgB1C,EAAA2C,qBAAqBC,IAAK5C,EAAA2C,qBAAqBE,KAE9E1K,MAAKuS,MAAM3O,EAKX,KAAK5D,KAAKuB,aAAc,CACvB,GAAIvB,KAAKwS,mBAAqBxS,KAAKyS,uBAAwB,CAC1DzS,KAAKgE,UAAU0O,oBAAoB1S,KAAKyS,uBACxCzS,MAAKwS,kBAAoB,OAI3BxS,KAAK2B,QAAQqD,YAAc,KAMrBjJ,GAAAwE,UAAAoS,cAAP,SAAqBC,GAEpB5S,KAAKwS,kBAAoB,IACzBxS,MAAKyS,uBAAyBG,EAMxB7W,GAAAwE,UAAAgS,MAAP,SAAa3O,GAEZ5D,KAAKgE,UAAUiO,aAAa,KAAMlG,EAAAmG,qBAAqBC,KAEvD,IAAInS,KAAKyN,cACRzN,KAAKgE,UAAU6O,aAAa,MAAO,MAAO,MAAO,MAElD7S,MAAK8S,gBAAgBlP,EAAQ5D,KAAK8Q,uBAElC,IAAI9Q,KAAK0N,eACR1N,KAAK8S,gBAAgBlP,EAAQ5D,KAAK6Q,wBAEnC,IAAI7Q,KAAKyN,cACRzN,KAAKgE,UAAU6O,aAAa,KAAM,KAAM,KAAM,MAwCzC9W,GAAAwE,UAAAuS,gBAAP,SAAuBlP,EAAemP,GAErC,GAAIhZ,EACJ,IAAIoL,EACJ,IAAI6N,EACJ,IAAIC,EACJ,IAAIC,EACJ,IAAIzD,EAEJzP,MAAKgE,UAAUmP,kBAAkB,eAAgB,SAAU,OAAQ,OAAQ,OAE3EnT,MAAKwM,iBAAiBlS,OAAS,CAC/B,IAAI8Y,GAAKpT,KAAKgE,UAAU,MACxB,IAAGoP,EAAI,CACNA,EAAGC,QAAQD,EAAGE,cAGftT,KAAKuT,YAAc,CAEnB,OAAOR,EAAc,CACpBE,EAAYF,EAAaE,SACzBC,GAASD,EAAUC,MAGnB,IAAIlT,KAAKyN,eAAiBwF,EAAUO,SAASC,gBAAkB,EAAG,CACjET,EAAgBD,CAEhB,GAAG,CACFC,EAAgBA,EAAcU,WAEtBV,GAAiBA,EAAcC,WAAaA,OAC/C,CACN,GAAIjT,KAAK2T,mBAAqB3T,KAAK4T,kBAAkBb,EAAac,aAAc,CAC/E7T,KAAKuM,mBAAqBwG,EAAac,WACvC,KAAK7T,KAAKuM,mBAAmBjS,OAAQ,CAEpC,GAAG8Y,EAAI,CACNA,EAAGC,QAAQD,EAAGE,aACdF,GAAGU,YAAYV,EAAGW,OAAQ,EAAG,IAC7BX,GAAGY,UAAUZ,EAAGa,KAAMb,EAAGa,KAAMb,EAAGa,WAE7B,CACNjU,KAAKkU,aAAatQ,EAAQmP,EAAaoB,aAAaC,mBAErDpU,KAAK2T,kBAAoB,MAK1BxO,EAAM+N,EAAO5Y,MACb,KAAKP,EAAI,EAAGA,EAAIoL,EAAKpL,IAAK,CACzBiZ,EAAgBD,CAChBtD,GAAOyD,EAAOnZ,EAEdiG,MAAKwP,aAAaC,EAAM7L,EAExB,GAAG,CACF,GAAIoP,EAAcqB,UAAY,EAAG,CAChC,GAAIta,GAAK,EACRiG,KAAKsU,cAActB,OACd,CACNA,EAAcxO,SAASiL,EAAM7L,EAAQ5D,KAAKmN,2BAG3C6F,EAAgBA,EAAcU,WAEtBV,GAAiBA,EAAcC,WAAaA,KAAejT,KAAK2T,kBAAoB3T,KAAK4T,kBAAkBZ,EAAca,cAElI7T,MAAKyQ,eAAehB,IAItBsD,EAAeC,GAOTjX,GAAAwE,UAAAwN,gBAAR,SAAwB5F,GAEvBnI,KAAKgE,UAAyBhE,KAAK2B,QAAQuE,QAG5C1F,QAAA+B,eAAWxG,EAAAwE,UAAA,qBN+XJiC,IM/XP,WAEC,MAAOxC,MAAKkN,kBNgYNzK,IM7XP,SAA6BC,GAE5B,GAAI1C,KAAKkN,kBAAoBxK,EAC5B,MAED1C,MAAKkN,iBAAmBxK,CAExB1C,MAAK2C,oBAAsB,MN4XrBC,WAAY,KACZC,aAAc,MMlVb9G,GAAAwE,UAAAsO,oBAAR,WAEC,GAAI7O,KAAK4Q,cACR,MAED5Q,MAAK4Q,cAAgB,IAErB,KAAK5Q,KAAKuU,gBACTvU,KAAKuU,gBAAkB,GAAI1I,GAAA2I,cAAc3I,EAAA2I,cAAcC,gBAExDzU,MAAK0U,cAAc1U,KAAKuU,iBAOjBxY,GAAAwE,UAAAoU,qBAAR,WAEC,GAAI3U,KAAK2Q,eACR,MAED3Q,MAAK2Q,eAAiB,IAEtB,KAAK3Q,KAAK4U,iBACT5U,KAAK4U,iBAAmB,GAAI/I,GAAA2I,cAAc3I,EAAA2I,cAAcjG,iBAEzDvO,MAAK0U,cAAc1U,KAAK4U,kBAMlB7Y,GAAAwE,UAAAsN,kBAAP,SAAyB1F,GAExBnI,KAAK6M,UAAY7M,KAAK2B,QAAQkT,QAG9B,IAAI7U,KAAKuB,aAAc,CACtBvB,KAAK2E,cAAc+J,EAAI1O,KAAKuN,WAAWmB,EAAI1O,KAAK2B,QAAQ+M,CACxD1O,MAAK2E,cAAciK,EAAI5O,KAAKuN,WAAWqB,EAAI5O,KAAK2B,QAAQiN,CACxD5O,MAAK6O,sBAGN7O,KAAK2U,uBAMC5Y,GAAAwE,UAAAoO,gBAAP,WAEC,GAAI3O,KAAKuB,aAAc,CACtBvB,KAAK2E,cAAc+J,EAAI1O,KAAKuN,WAAWmB,EAAI1O,KAAK6M,UAAU6B,CAC1D1O,MAAK2E,cAAciK,EAAI5O,KAAKuN,WAAWqB,EAAI5O,KAAK6M,UAAU+B,MACpD,CACN5O,KAAK2E,cAAc+J,EAAI,CACvB1O,MAAK2E,cAAciK,EAAI,CACvB5O,MAAK6M,UAAU6B,EAAI1O,KAAKuN,WAAWmB,CACnC1O,MAAK6M,UAAU+B,EAAI5O,KAAKuN,WAAWqB,EAGpC5O,KAAK6O,sBAQC9S,GAAAwE,UAAA6C,UAAP,SAAiBC,GAEhB,GAAIC,GAAgBD,EAAK+D,kBAAoBrL,EAAaqL,kBAAoB/D,EAAKyR,gBAAkBzR,EAAK0R,YAAY/U,KAAK+Q,YAAa/Q,KAAK2N,eAE7ItK,GAAK+D,iBAAmBrL,EAAaqL,gBAErC,OAAO9D,GAGDvH,GAAAwE,UAAAiD,YAAP,SAAmBmC,GAElB3F,KAAKgV,cAAgBrP,CAGrB3F,MAAKiV,QAAUtP,EAAOuP,QAAUlV,KAAKiR,gBAAgBkE,SAASxP,EAAOuL,eAAekE,WAAWpV,KAAK2M,eAGpG3M,MAAKqV,sBAAwB1P,EAAO2P,wBAAwBtV,KAAKmR,iBAGjExL,GAAO4P,iBAAiBvV,MAGlBjE,GAAAwE,UAAAiV,gBAAP,SAAuB1G,GAEtB,GAAIiE,GAAiC/S,KAAKmK,eAAe2E,EACzD,IAAImE,GAA2BF,EAAaE,SAG5CF,GAAa0C,UAAYxC,EAAUwC,SACnC1C,GAAa2C,cAAgBzC,EAAUyC,aAEvC3C,GAAa4C,SAAW,KAExB5C,GAAaoB,aAAenU,KAAKgV,aACjCjC,GAAa6C,OAAS5V,KAAKiV,OAC3BlC,GAAasB,OAASrU,KAAKgV,cAAca,kBACzC9C,GAAac,YAAc7T,KAAKgV,cAAcc,eAG9C/C,GAAagD,qBAAuB/V,KAAKqV,qBAEzC,IAAIpC,EAAU+C,iBAAkB,CAC/BjD,EAAaW,KAAO1T,KAAK6Q,uBACzB7Q,MAAK6Q,wBAA0BkC,MACzB,CACNA,EAAaW,KAAO1T,KAAK8Q,sBACzB9Q,MAAK8Q,uBAAyBiC,EAG/B/S,KAAKwN,eAAiBuF,EAAakD,WAAWvb,SAASwb,YAOjDna,GAAAwE,UAAAmF,sBAAP,SAA6BC,IAStB5J,GAAAwE,UAAAsF,gBAAP,SAAuBF,IAShB5J,GAAAwE,UAAAuF,gBAAP,SAAuBH,IAShB5J,GAAAwE,UAAA4V,YAAP,SAAmBxQ,IAKX5J,GAAAwE,UAAA+T,cAAR,SAAsB8B,GAGrBpW,KAAKwM,iBAAiB5G,KAAKwQ,GAGrBra,GAAAwE,UAAA2T,aAAP,SAAoBtQ,EAAeyS,GAElC,GAAIjD,GAAKpT,KAAKgE,UAAU,MAKxBhE,MAAKgE,UAAU6O,aAAa,MAAO,MAAO,MAAO,MAGjDO,GAAGkD,OAAOlD,EAAGE,aACbtT,MAAKuT,aACLH,GAAGU,YAAYV,EAAGW,OAAQ/T,KAAKuT,YAAa,IAC5CH,GAAGY,UAAUZ,EAAGmD,QAASnD,EAAGmD,QAASnD,EAAGmD,QAExC,IAAIC,GAAmBH,EAAM/b,MAC7B,IAAImc,GAAwBzW,KAAKwM,iBAAiBlS,MAClD,IAAIyY,EACJ,IAAI2D,EACJ,IAAIC,EACJ,IAAIC,EAEJ,KAAK,GAAI7c,GAAW,EAAGA,EAAIyc,IAAazc,EAAG,CAC1C,GAAIA,GAAK,EAAG,CACXqZ,EAAGU,YAAYV,EAAGyD,MAAO7W,KAAKuT,YAAa,IAC3CH,GAAGY,UAAUZ,EAAGa,KAAMb,EAAG0D,KAAM1D,EAAG0D,KAClC9W,MAAKuT,cAGNmD,EAAWL,EAAMtc,EACjB4c,GAAcD,EAASpc,MAEvB,KAAK,GAAIyc,GAAW,EAAGA,EAAIJ,IAAeI,EAAG,CAC5CH,EAAOF,EAASK,EAChB,KAAK,GAAIC,GAAW,EAAGA,EAAIP,IAAkBO,EAAG,CAC/CjE,EAAe/S,KAAKwM,iBAAiBwK,EAErC,IAAIjE,EAAasB,QAAUuC,EAAK7H,GAAI,CAEnC/O,KAAKiX,UAAUrT,EAAQmP,MAM3BK,EAAGU,YAAYV,EAAGyD,MAAO7W,KAAKuT,YAAa,IAC3CH,GAAGY,UAAUZ,EAAGa,KAAMb,EAAGa,KAAMb,EAAGa,KAElCjU,MAAKgE,UAAU6O,aAAa,KAAM,KAAM,KAAM,KAC9C7S,MAAKgE,UAAUiO,aAAa,KAAMlG,EAAAmG,qBAAqBC,MAIhDpW,GAAAwE,UAAA0W,UAAR,SAAkBrT,EAAemP,GAEhC,GAAIE,GAAYF,EAAaE,SAC7B,IAAIC,GAASD,EAAUC,MACvB,IAAI/N,GAAM+N,EAAO5Y,MACjB,IAAImV,GAAOyD,EAAO/N,EAAI,EAEtBnF,MAAKwP,aAAaC,EAAM7L,EACxB5D,MAAKgE,UAAUiO,aAAa,MAAOlG,EAAAmG,qBAAqBC,KAExDY,GAAavO,SAASiL,EAAM7L,EAAQ5D,KAAKmN,0BACzCnN,MAAKyQ,eAAehB,GAGb1T,GAAAwE,UAAAqT,kBAAR,SAA0BC,GAEzB,GAAI7T,KAAKuM,mBAAmBjS,QAAUuZ,EAAYvZ,OACjD,MAAO,KAER,IAAIkc,GAAmB3C,EAAYvZ,MACnC,IAAIqc,EACJ,IAAIO,EACJ,IAAIC,EACJ,IAAIC,EACJ,KAAK,GAAIrd,GAAW,EAAGA,EAAIyc,EAAWzc,IAAK,CAC1Cmd,EAAcrD,EAAY9Z,EAC1B4c,GAAcO,EAAY5c,MAC1B8c,GAAoBpX,KAAKuM,mBAAmBxS,EAC5Cod,GAAoBC,EAAkB9c,MACtC,IAAI6c,GAAqBR,EACxB,MAAO,KAER,KAAK,GAAII,GAAW,EAAGA,EAAIJ,EAAaI,IAAK,CAC5C,GAAIK,EAAkBL,IAAMG,EAAYH,GACvC,MAAO,OAIV,MAAO,OA5+BMhb,GAAAqL,iBAAmB,CACnBrL,GAAAiT,sBAA+B,GAAIxO,OA6+BlD,OAAAzE,IAh/BkC6P,EAAAyL,gBAArBjd,GAAA2B,aAAYA,INmzCtBub,6BAA6B,iDAAiDC,yBAAyB,6CAA6CC,yCAAyCpY,UAAUqY,gCAAgCrY,UAAUsY,qCAAqCtY,UAAUuY,6BAA6BvY,UAAUwY,iCAAiCxY,UAAUyY,gCAAgCzY,UAAU0Y,0CAA0C1Y,UAAU2Y,uDAAuD3Y,UAAU+L,+CAA+C/L,UAAU4Y,+CAA+C5Y,UAAU6Y,uCAAuC7Y,UAAU8Y,2CAA2C9Y,YAAY+Y,oDAAoD,SAAS7e,EAAQkB,EAAOJ,GAC1zB,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IOx2CnF,IAAA+X,GAAA9e,EAA4B;AAC5B,GAAA+e,GAAA/e,EAAoC,6CAIpC,IAAAgf,GAAAhf,EAAkC,8BAWlC,IAAAif,GAAA,SAAA1X,GAAsCd,EAAAwY,EAAA1X,EASrC,SAAA0X,KAEC1X,EAAAxG,KAAA2F,KANOA,MAAAwY,YAAuC,GAAIpX,MAC3CpB,MAAAyY,gBAAgC,GAAIrX,MACpCpB,MAAA0Y,qBAA8B,GAAIlY,QAcnC+X,EAAAhY,UAAAoY,cAAP,SAAqBC,EAAuBC,GAAA,GAAAA,QAAA,GAA4B,CAA5BA,EAAA,KAE3C,GAAI9e,GAAW,CACf,IAAI+e,EAEJ,OAAO,KAAM,CACZA,EAAM,KAAO/e,CACb,IAAI6e,EAAQG,QAAQD,KAAS,GAAKD,GAAkBC,EACnD,MAAOA,KACN/e,GASJyG,QAAA+B,eAAWgW,EAAAhY,UAAA,WP21CJiC,IO31CP,WAEC,MAAOxC,MAAKgZ,UP41CNpW,WAAY,KACZC,aAAc,MOp1Cd0V,GAAAhY,UAAA0Y,sBAAP,WAECjZ,KAAKgZ,SAAW,MAGVT,GAAAhY,UAAA2Y,uBAAP,WAEClZ,KAAKgZ,SAAW,KAOVT,GAAAhY,UAAA4Y,kBAAP,SAAyBzJ,EAAmB0J,EAAmCC,GAE9E,KAAM,IAAIhB,GAAAiB,oBAMJf,GAAAhY,UAAAgZ,oBAAP,SAA2B7J,EAAmB0J,EAAmCI,GAEhF,KAAM,IAAInB,GAAAiB,oBAMJf,GAAAhY,UAAAkZ,cAAP,SAAqB/J,EAAmB0J,EAAmCC,GAE1E,KAAM,IAAIhB,GAAAiB,oBAMJf,GAAAhY,UAAAmZ,aAAP,SAAoBhK,GAEnB,KAAM,IAAI2I,GAAAiB,oBAMX9Y,QAAA+B,eAAWgW,EAAAhY,UAAA,aPg1CJiC,IOh1CP,WAEC,MAAO+V,GAAiBtJ,WPi1ClBrM,WAAY,KACZC,aAAc,MO50CrBrC,QAAA+B,eAAWgW,EAAAhY,UAAA,cPk1CJiC,IOl1CP,WAEC,MAAOxC,MAAKwY,aPm1CN5V,WAAY,KACZC,aAAc,MO90CrBrC,QAAA+B,eAAWgW,EAAAhY,UAAA,kBPo1CJiC,IOp1CP,WAEC,MAAOxC,MAAKyY,iBPq1CN7V,WAAY,KACZC,aAAc,MO90Cd0V,GAAAhY,UAAAoZ,aAAP,SAAoBC,GAEnB,MAAO5Z,MAAK0Y,qBAAqBkB,IAAS,KAQpCrB,GAAAhY,UAAAsZ,aAAP,SAAoBD,GAEnB,MAAO5Z,MAAK0Y,qBAAqBkB,GAS3BrB,GAAAhY,UAAAuZ,aAAP,SAAoBzW,GAEnB,GAAIrD,KAAK0Y,qBAAqBrV,EAAKuW,MAClC,KAAM,IAAItB,GAAAyB,kBAAkB,mBAAqB1W,EAAKuW,KAAO,8BAE9D5Z,MAAK0Y,qBAAqBrV,EAAKuW,MAAQvW,CAEvCrD,MAAKwY,YAAY5S,KAAKvC,EAEtBrD,MAAKyY,gBAAgB7S,KAAKvC,EAAKuW,MAMzBrB,GAAAhY,UAAAyC,QAAP,YA5JcuV,GAAAtJ,UAAmB,sBA+JlC,OAAAsJ,IAjKsCH,EAAA4B,UAAzB5f,GAAAme,iBAAgBA,IPg/C1B0B,8BAA8B,iDAAiDC,6CAA6C9a,UAAU+a,oCAAoC/a,YAAYgb,gDAAgD,SAAS9gB,EAAQkB,EAAOJ,GACjQ,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IQrgDnF,IAAA+X,GAAA9e,EAA6B,oCAC7B,IAAA+e,GAAA/e,EAAqC,6CACrC,IAAA+gB,GAAA/gB,EAAsC,8CACtC,IAAAghB,GAAAhhB,EAA6B,iCAa7B,IAAAihB,GAAAjhB,EAAgC,0BA6BhC,IAAAkhB,GAAA,SAAA3Z,GAAkCd,EAAAya,EAAA3Z,EAgJjC,SAAA2Z,GAAYC,GAEX5Z,EAAAxG,KAAA2F,KA5IOA,MAAA0a,YAAsB,IAItB1a,MAAA2a,MAAe,CACf3a,MAAA4a,eAAwB,CAGzB5a,MAAA6a,SAAyB,GAAIzZ,MAI7BpB,MAAA8a,eAAwB,CAEvB9a,MAAA+a,iBAA0B,GAAIva,OAO/BR,MAAAgb,eAAyB,IAyH/Bhb,MAAKib,eAAiBR,CAEtBza,MAAKkb,aAAe,GAAIb,GAAAc,sBAAsBnb,KAAKob,aAAcpb,MAzH3Dwa,EAAAja,UAAA8a,kBAAP,SAAyBhY,GAExB,GAAIiY,GAAgBjY,EAAKkY,UACzB,IAAIC,GAAanY,EAAK0L,EAEtB,IAAI/O,KAAK+a,iBAAiBS,IAAQ,KACjCxb,KAAK+a,iBAAiBS,GAAO,GAAIF,GAAUtb,KAAMqD,EAElD,OAAOrD,MAAK+a,iBAAiBS,GAGvBhB,GAAAja,UAAAkb,wBAAP,SAA+B7B,GAE9B,MAAO5Z,MAAKqb,kBAAkBrb,KAAKib,eAAepB,aAAaD,IAShEpZ,QAAA+B,eAAWiY,EAAAja,UAAA,gBR4+CJiC,IQ5+CP,WAEC,MAAOxC,MAAK8a,gBR6+CNlY,WAAY,KACZC,aAAc,MQx+CrBrC,QAAA+B,eAAWiY,EAAAja,UAAA,gBR8+CJiC,IQ9+CP,WAEC,MAAOxC,MAAKib,gBR++CNrY,WAAY,KACZC,aAAc,MQ1+CrBrC,QAAA+B,eAAWiY,EAAAja,UAAA,eRg/CJiC,IQh/CP,WAEC,MAAOxC,MAAK0b,eRi/CN9Y,WAAY,KACZC,aAAc,MQ5+CrBrC,QAAA+B,eAAWiY,EAAAja,UAAA,mBRk/CJiC,IQl/CP,WAEC,MAAOxC,MAAKib,eAAepB,aAAa7Z,KAAK2b,wBRm/CvC/Y,WAAY,KACZC,aAAc,MQ9+CrBrC,QAAA+B,eAAWiY,EAAAja,UAAA,uBRo/CJiC,IQp/CP,WAEC,MAAOxC,MAAK2b,uBRq/CN/Y,WAAY,KACZC,aAAc,MQ3+CrBrC,QAAA+B,eAAWiY,EAAAja,UAAA,cRs/CJiC,IQt/CP,WAEC,MAAOxC,MAAK0a,aRu/CNjY,IQp/CP,SAAsBC,GAErB,GAAI1C,KAAK0a,aAAehY,EACvB,MAED1C,MAAK0a,YAAchY,CAEnB,IAAI1C,KAAK0a,YACR1a,KAAK4b,YACL5b,MAAK6b,QRo/CAjZ,WAAY,KACZC,aAAc,MQ/+CrBrC,QAAA+B,eAAWiY,EAAAja,UAAA,QRq/CJiC,IQr/CP,WAEC,MAAOxC,MAAK2a,ORs/CNlY,IQn/CP,SAAgBC,GAEf,GAAI1C,KAAK2a,OAASjY,EACjB,MAED1C,MAAK0J,OAAOhH,IRm/CNE,WAAY,KACZC,aAAc,MQ5+Cd2X,GAAAja,UAAAub,MAAP,SAAapZ,GAEZ1C,KAAK0b,cAAcI,MAAMpZ,GAoB1BlC,QAAA+B,eAAWiY,EAAAja,UAAA,iBRo+CJiC,IQp+CP,WAEC,MAAOxC,MAAK4a,gBRq+CNnY,IQl+CP,SAAyBC,GAExB1C,KAAK4a,eAAiBlY,GRm+ChBE,WAAY,KACZC,aAAc,MQj+Cd2X,GAAAja,UAAAwb,eAAP,SAAsBrM,EAAmBZ,EAA8BhO,EAAa8C,GAEnF,KAAM,IAAIyU,GAAAiB,oBAMJkB,GAAAja,UAAAqb,MAAP,WAEC,GAAI5b,KAAKgc,aAAehc,KAAK0a,YAC5B,MAED1a,MAAK2a,MAAQ3a,KAAK8a,eAAiBR,EAAA2B,UAEnCjc,MAAKgc,WAAa,IAElBhc,MAAKkb,aAAaU,OAElB,KAAK5b,KAAKkc,iBAAiB3B,EAAA4B,cAAcC,OACxC,MAED,IAAIpc,KAAKqc,aAAe,KACvBrc,KAAKqc,YAAc,GAAI9B,GAAA4B,cAAc5B,EAAA4B,cAAcC,MAAOpc,KAE3DA,MAAK0U,cAAc1U,KAAKqc,aAUlB7B,GAAAja,UAAAsb,KAAP,WAEC,IAAK7b,KAAKgc,WACT,MAEDhc,MAAKgc,WAAa,KAElBhc,MAAKkb,aAAaW,MAElB,KAAK7b,KAAKkc,iBAAiB3B,EAAA4B,cAAcG,MACxC,MAED,IAAItc,KAAKuc,YAAc,KACtBvc,KAAKuc,WAAa,GAAIhC,GAAA4B,cAAc5B,EAAA4B,cAAcG,KAAMtc,KAEzDA,MAAK0U,cAAc1U,KAAKuc,YAUlB/B,GAAAja,UAAAmJ,OAAP,SAAc8S,GAEb,GAAIC,IAAaD,EAAOxc,KAAK2a,OAAO3a,KAAK0c,aAEzC1c,MAAK2c,kBAAkBF,EAEvBzc,MAAK2a,MAAQ6B,EAGPhC,GAAAja,UAAAqc,MAAP,SAAahD,EAAaiD,GAAA,GAAAA,QAAA,GAAiB,CAAjBA,EAAA,EAEzB7c,KAAKqb,kBAAkBrb,KAAKib,eAAepB,aAAaD,IAAOiD,OAAOA,EAAS7c,KAAK8a,gBAQ9EN,GAAAja,UAAAuc,SAAP,SAAgBC,GAEf/c,KAAK6a,SAASjV,KAAKmX,GAQbvC,GAAAja,UAAAyc,YAAP,SAAmBD,GAElB/c,KAAK6a,SAASoC,OAAOjd,KAAK6a,SAAS9B,QAAQgE,GAAS,GAQ9CvC,GAAAja,UAAAoc,kBAAP,SAAyBF,GAExBzc,KAAK8a,gBAAkB2B,CAEvBzc,MAAK0b,cAAchS,OAAO1J,KAAK8a,eAE/B,IAAI9a,KAAKgb,eACRhb,KAAKkd,qBAMC1C,GAAAja,UAAA6a,aAAR,SAAqBjT,GAAA,GAAAA,QAAA,GAAkB,CAAlBA,EAAA,KAEpBnI,KAAK0J,OAAO4Q,EAAA2B,YAGLzB,GAAAja,UAAA2c,mBAAR,WAEC,GAAIC,GAAiBnd,KAAK0b,cAAc0B,aACxC,IAAIC,GAAcF,EAAM7iB,MACxB,IAAI6K,EACJ,IAAIkY,EAAO,EAAG,CACblY,EAAMnF,KAAK6a,SAASvgB,MACpB,KAAK,GAAIP,GAAW,EAAGA,EAAIoL,IAAOpL,EACjCiG,KAAK6a,SAAS9gB,GAAGujB,UAAUC,eAAeJ,EAAOE,IAS7C7C,GAAAja,UAAAid,mBAAP,WAEC,GAAIxd,KAAKkc,iBAAiB3B,EAAA4B,cAAcsB,gBAAiB,CACxD,GAAIzd,KAAK0d,aAAe,KACvB1d,KAAK0d,YAAc,GAAInD,GAAA4B,cAAc5B,EAAA4B,cAAcsB,eAAgBzd,KAEpEA,MAAK0U,cAAc1U,KAAK0d,cAOnBlD,GAAAja,UAAAod,MAAP,WAEC,KAAM,IAAItF,GAAAiB,oBAMJkB,GAAAja,UAAAyC,QAAP,YAKOwX,GAAAja,UAAAqd,mBAAP,WAEC,GAAIb,EACJ,IAAI5X,GAAanF,KAAK6a,SAASvgB,MAC/B,KAAK,GAAIP,GAAW,EAAGA,EAAIoL,EAAKpL,IAAK,CACpCgjB,EAAS/c,KAAK6a,SAAS9gB,EACvBgjB,GAAOc,SAASD,sBAOXpD,GAAAja,UAAAud,qBAAP,SAA4BpO,GAE3B,KAAM,IAAI2I,GAAAiB,oBAMX9Y,QAAA+B,eAAWiY,EAAAja,UAAA,aRu7CJiC,IQv7CP,WAEC,MAAOgY,GAAavL,WRw7CdrM,WAAY,KACZC,aAAc,MQr7Cd2X,GAAAja,UAAAwd,sBAAP,SAA6BjP,EAA8BkP,GAG1D,MAAOA,GAlWMxD,GAAAvL,UAAmB,kBAoWlC,OAAAuL,IAtWkCpC,EAAA4B,UAArB5f,GAAAogB,aAAYA,IRgyDtByD,0BAA0B,6CAA6C/D,6CAA6C9a,UAAU+a,oCAAoC/a,UAAU8e,8CAA8C9e,UAAU+e,iCAAiC/e,YAAYgf,wDAAwD,SAAS9kB,EAAQkB,EAAOJ,GACpW,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IS50DnF,IAAAge,GAAA/kB,EAAmC,gCACnC,IAAAglB,GAAAhlB,EAAsC,0CACtC,IAAAilB,GAAAjlB,EAAmC,sCACnC,IAAAklB,GAAAllB,EAAsC,0CACtC,IAAAmlB,GAAAnlB,EAAoC,uCACpC,IAAAolB,GAAAplB,EAAuC,2CAEvC,IAAAqlB,GAAArlB,EAAmC,sCAWnC,IAAAslB,GAAA,SAAA/d,GAA0Cd,EAAA6e,EAAA/d,EAqEzC,SAAA+d,GAAYC,EAA8BC,EAA6BC,GAA3D,GAAAF,QAAA,GAA4B,CAA5BA,EAAA,MAA8B,GAAAC,QAAA,GAA2B,CAA3BA,EAAA,MAA6B,GAAAC,QAAA,GAAyB,CAAzBA,EAAA,MAEtEle,EAAAxG,KAAA2F,KArDOA,MAAAgf,mBAA4B,GAAIxe,OAChCR,MAAAif,eAAyC,GAAI7d,MAC7CpB,MAAAkf,mBAA6C,GAAI9d,MACjDpB,MAAAmf,kBAA4C,GAAI/d,MAChDpB,MAAAof,qBAA8B,CAsC/Bpf,MAAAqf,uBAAiC,IAcvCrf,MAAK8Z,aAAa9Z,KAAKsf,UAAY,GAAIX,GAAAY,iBAAiBV,EAAcC,EAAaC,IAMpFve,OAAA+B,eAAWqc,EAAAre,UAAA,iBTsxDJiC,IStxDP,WAEC,MAAOxC,MAAKif,gBTuxDNrc,WAAY,KACZC,aAAc,MSlxDd+b,GAAAre,UAAAuZ,aAAP,SAAoBzW,GAEnB,GAAItJ,EACJ,IAAIN,GAAwC4J,CAC5C5J,GAAE+lB,0BAA0Bxf,KAC5B,IAAIvG,EAAEwH,MAAQyd,EAAAe,uBAAuBC,aAAc,CAClDjmB,EAAEkmB,aAAe3f,KAAKof,oBACtBpf,MAAKof,sBAAwB3lB,EAAEmmB,UAC/B5f,MAAKmf,kBAAkBvZ,KAAKnM,OACtB,IAAIA,EAAEwH,MAAQyd,EAAAe,uBAAuBI,cAC3C7f,KAAKkf,mBAAmBtZ,KAAKnM,EAE9B,KAAKM,EAAIiG,KAAKif,eAAe3kB,OAAS,EAAGP,GAAK,EAAGA,IAAK,CACrD,GAAIiG,KAAKif,eAAellB,GAAG+lB,UAAYrmB,EAAEqmB,SACxC,MAGF9f,KAAKif,eAAehC,OAAOljB,EAAI,EAAG,EAAGN,EAErCoH,GAAAN,UAAMuZ,aAAYzf,KAAA2F,KAACqD,GAMbub,GAAAre,UAAA4Y,kBAAP,SAAyBzJ,EAAmB0J,EAAmCC,GAG9ErZ,KAAK+f,wBAA0BrQ,EAAOsQ,qBAEtC,IAAIhgB,KAAK+f,yBAA2B,KACnC/f,KAAK+f,wBAA0BrQ,EAAOsQ,sBAAwB,GAAI1B,GAAA2B,qBAGnEjgB,MAAK+f,wBAAwBnD,MAAMxD,EAAeC,EAAiBrZ,KAAKkgB,aAExE,IAAIhmB,GAAc,EAElB,IAAIiL,GAAakU,EAAgB8G,qBAAqB7lB,MACtD,KAAK,GAAIP,GAAW,EAAGA,EAAIoL,EAAKpL,IAC/BG,GAAQ,OAASmf,EAAgB+G,yBAAyBrmB,GAAK,IAAMsf,EAAgB8G,qBAAqBpmB,GAAK,IAEhHG,IAAQ,OAAS8F,KAAK+f,wBAAwBM,eAAiB,QAAUrgB,KAAK+f,wBAAwBO,gBAAkB,IAExH,IAAItgB,KAAKkgB,aACRhmB,GAAQ,OAAS8F,KAAK+f,wBAAwBQ,eAAiB,QAAUvgB,KAAK+f,wBAAwBO,gBAAkB,IAEzH,IAAIjd,EACJ,IAAItJ,EAEJ,KAAKA,EAAI,EAAGA,EAAIiG,KAAKif,eAAe3kB,OAAQP,IAAK,CAChDsJ,EAAOrD,KAAKif,eAAellB,EAC3B,IAAIsJ,EAAKyc,SAAWlB,EAAqB4B,cACxCtmB,GAAQmJ,EAAK8V,kBAAkBzJ,EAAQ1P,KAAMoZ,EAAepZ,KAAK+f,yBAGnE7lB,GAAQ,OAAS8F,KAAK+f,wBAAwBU,qBAAuB,QAAUzgB,KAAK+f,wBAAwBU,qBAAuB,QAAUzgB,KAAK+f,wBAAwBM,eAAiB,QAE3L,KAAKtmB,EAAI,EAAGA,EAAIiG,KAAKif,eAAe3kB,OAAQP,IAAK,CAChDsJ,EAAOrD,KAAKif,eAAellB,EAC3B,IAAIsJ,EAAKyc,UAAYlB,EAAqB4B,eAAiBnd,EAAKyc,SAAWlB,EAAqB8B,eAC/FxmB,GAAQmJ,EAAK8V,kBAAkBzJ,EAAQ1P,KAAMoZ,EAAepZ,KAAK+f,yBAGnE,GAAI/f,KAAK2gB,gBAAiB,CACzB3gB,KAAK+f,wBAAwBa,eAAiBxH,EAAcyH,yBAC5DzH,GAAc0H,oBAAoB9gB,KAAK+f,wBAAwBa,eAAgB,EAC/E5gB,MAAK+f,wBAAwBgB,aAAe3H,EAAc4H,gBAC1D9mB,IAAQ,OAAS8F,KAAK+f,wBAAwBa,eAAiB,IAAM5gB,KAAK+f,wBAAwBkB,eAAiB,KAEpH,GAAIjhB,KAAKkhB,gBAAiB,CACzBlhB,KAAK+f,wBAAwBoB,eAAiB/H,EAAcyH,yBAC5DzH,GAAc0H,oBAAoB9gB,KAAK+f,wBAAwBoB,eAAgB,EAC/EnhB,MAAK+f,wBAAwBqB,aAAehI,EAAc4H,gBAC1D9mB,IAAQ,OAAS8F,KAAK+f,wBAAwBoB,eAAiB,IAAMnhB,KAAK+f,wBAAwBO,gBAAkB,KAGrH,IAAKvmB,EAAI,EAAGA,EAAIiG,KAAKif,eAAe3kB,OAAQP,IAAK,CAChDsJ,EAAOrD,KAAKif,eAAellB,EAC3B,IAAIsJ,EAAKyc,UAAYlB,EAAqB8B,eACzCxmB,GAAQmJ,EAAK8V,kBAAkBzJ,EAAQ1P,KAAMoZ,EAAepZ,KAAK+f,yBAEnE,GAAIrQ,EAAO2R,wBAA0BrhB,KAAKkhB,iBAAmBlhB,KAAK2gB,iBAAkB,CACnF,GAAI3gB,KAAK2gB,gBACRzmB,GAAQ,OAAS8F,KAAK+f,wBAAwBgB,aAAe,IAAM/gB,KAAK+f,wBAAwBa,eAAiB,IAClH,IAAI5gB,KAAKkhB,gBACRhnB,GAAQ,OAAS8F,KAAK+f,wBAAwBqB,aAAe,IAAMphB,KAAK+f,wBAAwBoB,eAAiB,KAEnH,MAAOjnB,GAMD0kB,GAAAre,UAAAkZ,cAAP,SAAqB/J,EAAmB0J,EAAmCC,GAE1E,GAAInf,GAAc,EAClB,IAAI8F,KAAKshB,UAAW,CACnBthB,KAAK+f,wBAAwBwB,qBAAqBlI,EAClDnf,IAAQ,OAAS8F,KAAK+f,wBAAwByB,SAAW,OAASxhB,KAAK+f,wBAAwB0B,YAAYC,WAAa,IACxH,IAAIre,EACJ,KAAK,GAAItJ,GAAW,EAAGA,EAAIiG,KAAKif,eAAe3kB,OAAQP,IACtDsJ,EAAOrD,KAAKif,eAAellB,EAC3BG,IAAQmJ,EAAKoW,cAAc/J,EAAQ1P,KAAMoZ,EAAepZ,KAAK+f,wBAC9D7lB,IAAQ,OAAS8F,KAAK+f,wBAAwB4B,MAAQ,IAAM3hB,KAAK+f,wBAAwByB,SAAW,YAEpGtnB,IAAQ,OAASmf,EAAgBmI,SAAW,IAAMnI,EAAgBuI,SAAW,IAC9E,OAAO1nB,GAMD0kB,GAAAre,UAAAgZ,oBAAP,SAA2B7J,EAAmB0J,EAAmCI,GAEhF,GAAItf,GAAc,EAClB,IAAIwV,EAAO2R,wBAA0BrhB,KAAKkhB,iBAAmBlhB,KAAK2gB,iBAAkB,CACnF,GAAI3gB,KAAK2gB,gBACRzmB,GAAQ,OAASsf,EAAe,IAAMA,EAAe,IAAMxZ,KAAK+f,wBAAwBgB,aAAe,IACxG,IAAI/gB,KAAKkhB,gBACRhnB,GAAQ,OAASsf,EAAe,IAAMA,EAAe,IAAMxZ,KAAK+f,wBAAwBqB,aAAe,KAEzG,MAAOlnB,GAMD0kB,GAAAre,UAAAmZ,aAAP,SAAoBhK,GAGnBA,EAAOmS,eAAe7hB,KAAK+f,wBAAwBO,gBAAgBwB,MAAO,EAAG,EAAG,EAAG,GAMpFthB,QAAA+B,eAAWqc,EAAAre,UAAA,WTiwDJiC,ISjwDP,WAEC,MAAO,QTkwDDI,WAAY,KACZC,aAAc,MS7vDd+b,GAAAre,UAAA2Y,uBAAP,YAKO0F,GAAAre,UAAAyC,QAAP,WAEC,IAAK,GAAI+e,KAAO/hB,MAAKgf,mBACChf,KAAKgf,mBAAmB+C,GAAM/e,SAEpDnC,GAAAN,UAAMyC,QAAO3I,KAAA2F,MAGP4e,GAAAre,UAAAyhB,qBAAP,SAA4BC,GAE3B,GAAIC,GAAuCliB,KAA2B,uBAAGA,KAAKgf,mBAAmBiD,EAAQvnB,SAASqU,IAAM/O,KAAKgf,mBAAmBiD,EAAQlT,GAExJ,IAAImT,EACH,MAAOA,EAERliB,MAAKmiB,4BAA4BF,EAAQG,OAEzC,OAAQpiB,MAA2B,uBAAGA,KAAKgf,mBAAmBiD,EAAQvnB,SAASqU,IAAM/O,KAAKgf,mBAAmBiD,EAAQlT,IAK/G6P,GAAAre,UAAA4hB,4BAAP,SAAmCtE,GAElC,GAAI7d,KAAKqiB,kBAAoB,KAC5B,KAAK,IAAKpoB,OAAM,0BAEjB,IAAIF,GAAUgd,EAAUC,CACxB,IAAIkL,EACJ,IAAII,GAA+B,KACnC,IAAI5nB,EACJ,IAAIunB,EACJ,IAAIM,EAEJ,KAAKxoB,EAAI,EAAGA,EAAI8jB,EAAS2E,MAAOzoB,IAAK,CACpCkoB,EAAUpE,EAAS4E,aAAa1oB,EAChCW,GAAWunB,EAAQvnB,QACnB,IAAIsF,KAAKqf,uBAAwB,CAChC6C,EAAoBliB,KAAKgf,mBAAmBtkB,EAASqU,GAErD,IAAImT,EACH,SAGFA,EAAoB,GAAI3D,GAAAmE,iBAExB,IAAI1iB,KAAKqf,uBACRrf,KAAKgf,mBAAmBtkB,EAASqU,IAAMmT,MAEvCliB,MAAKgf,mBAAmBiD,EAAQlT,IAAMmT,CAEvCI,GAAuB,IAGvBJ,GAAkBS,iBAAiBjoB,EAASkoB,YAAa5iB,KAAKof,sBAG/D,IAAKkD,EACJ,MAED,IAAIO,GAAgChF,EAASgF,SAC7C,IAAIC,GAAyBD,EAAUvoB,MACvC,IAAIyoB,GAAsBlF,EAASkF,YACnC,IAAIC,GAAwC,GAAIvE,GAAAwE,kBAChD,IAAIC,EAEJ,IAAIC,EACJ,IAAIC,EACJ,IAAIC,EACJ,IAAIC,EACJ,IAAIC,EACJ,IAAIX,EACJ,IAAIY,EACJ,IAAIC,EACJ,IAAIC,EACJ,IAAIC,EAGJX,GAAmBY,MAAQb,CAC3BC,GAAmBa,UAAY,CAC/Bb,GAAmBc,SAAW,GAC9Bd,GAAmBe,MAAQ,EAE3BhqB,GAAI,CACJgd,GAAI,CACJ,OAAOhd,EAAIgpB,EAAc,CACxBC,EAAmBlB,MAAQ/nB,CAG3BiG,MAAKqiB,iBAAiBhoB,KAAK2F,KAAKgkB,kBAAmBhB,EAGnD,KAAKhM,EAAI,EAAGA,EAAIhX,KAAKmf,kBAAkB7kB,OAAQ0c,IAC9ChX,KAAKmf,kBAAkBnI,GAAGiN,gCAAgCjB,EAG3D,OAAOjM,EAAI+L,IAAoBI,EAAWL,EAAU9L,IAAImN,eAAiBnqB,EAAG,CAE3E,IAAKid,EAAI,EAAGA,EAAI6G,EAAS2E,MAAOxL,IAAK,CACpCiL,EAAUpE,EAAS4E,aAAazL,EAChC,IAAIiL,EAAQvnB,UAAYwoB,EAASxoB,SAAU,CAC1CwnB,EAAqBliB,KAA2B,uBAAGA,KAAKgf,mBAAmBiD,EAAQvnB,SAASqU,IAAM/O,KAAKgf,mBAAmBiD,EAAQlT,GAClI,QAGF6T,EAAcM,EAASN,WACvBY,GAAatB,EAAkBsB,UAC/BC,GAAeb,EAAY5iB,KAAKof,oBAChCsE,GAAiBxB,EAAkBiC,qBAAqBnkB,KAAKof,oBAG7D,KAAKpI,EAAI,EAAGA,EAAIhX,KAAKmf,kBAAkB7kB,OAAQ0c,IAAK,CACnDuL,EAAYviB,KAAKmf,kBAAkBnI,EACnCuM,GAAUhB,EAAUgB,OACpBJ,GAAaZ,EAAU3C,UACvBwD,GAAgBM,EAAiBnB,EAAU5C,YAG3C,KAAK0D,EAAmB,EAAGA,EAAmBI,EAAcJ,GAAoBrjB,KAAKof,qBAAsB,CAC1GuE,EAAeP,EAAgBC,CAG/B,KAAKC,EAAoB,EAAGA,EAAoBH,EAAYG,IAC3DE,EAAWG,EAAeL,GAAqBC,EAAQD,IAM1D,GAAItjB,KAAKkf,mBAAmB5kB,OAC3B4nB,EAAkBkC,mBAAmBxe,KAAK,GAAI4Y,GAAA6F,sBAAsBtqB,EAAGipB,EAAmBa,UAAWb,EAAmBc,SAAUd,EAAmBe,MAAOb,GAE7JhB,GAAkBiC,sBAAwBvB,CAG1C7L,KAIDhd,KA9WY6kB,GAAA4B,cAAuB,CAKvB5B,GAAA8B,eAAwB,EA4WvC,OAAA9B,IA5X0CP,EAAA9F,iBAA7Bne,GAAAwkB,qBAAoBA,ITqmE9B0F,gCAAgC,mDAAmDC,sCAAsC,yDAAyDC,0CAA0C,6DAA6DC,0CAA0C,6DAA6DC,uCAAuC,0DAA0DC,2CAA2C,8DAA8DC,sCAAsC,2DAA2DC,oDAAoD,SAASvrB,EAAQkB,EAAOJ,GAC1vB,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IU5nEnF,IAAAykB,GAAAxrB,EAAgC,4BAGhC,IAAAilB,GAAAjlB,EAAmC,sCACnC,IAAAolB,GAAAplB,EAAuC,2CAgBvC,IAAAyrB,GAAA,SAAAlkB,GAAsCd,EAAAglB,EAAAlkB,EAerC,SAAAkkB,GAAYC,GAEXnkB,EAAAxG,KAAA2F,KAAMglB,EAbChlB,MAAAilB,yBAAoD,GAAI7jB,MACxDpB,MAAAklB,wBAAmD,GAAI9jB,MACvDpB,MAAAmlB,oBAA+C,GAAI/jB,MACnDpB,MAAAof,qBAA8B,CAC9Bpf,MAAAolB,uBAAgC,GAAI5kB,OAU3CR,MAAKqlB,sBAAwBL,CAE7B,IAAIM,EACJ,IAAIjiB,EAEJ,KAAK,GAAItJ,GAAW,EAAGA,EAAIiG,KAAKqlB,sBAAsBE,cAAcjrB,OAAQP,IAAK,CAChFsJ,EAAOrD,KAAKqlB,sBAAsBE,cAAcxrB,EAChDurB,GAA4BtlB,KAAKqb,kBAAkBhY,EACnD,IAAIA,EAAKpC,MAAQyd,EAAAe,uBAAuBI,cAAe,CACtD7f,KAAKklB,wBAAwBtf,KAAK0f,EAClCjiB,GAAKsc,aAAe3f,KAAKof,oBACzBpf,MAAKof,sBAAwB/b,EAAKuc,eAC5B,CACN5f,KAAKilB,yBAAyBrf,KAAK0f,GAEpC,GAAIA,EAAME,eACTxlB,KAAKmlB,oBAAoBvf,KAAK0f,IAO1BP,EAAAxkB,UAAAod,MAAP,WAEC,MAAO,IAAIoH,GAAiB/kB,KAAKqlB,uBAM3BN,GAAAxkB,UAAAwb,eAAP,SAAsBrM,EAAmBZ,EAA8BhO,EAAa8C,GAEnF,GAAIoc,GAA8ChgB,KAAKqlB,sBAAsBtF,uBAE7E,IAAIkC,GAA0CnT,EAAYmT,OAE1D,KAAKA,EACJ,KAAK,IAAKhoB,OAAM,kBAGjB,IAAIioB,GAAsCliB,KAAKqlB,sBAAsBrD,qBAAqBC,EAC1F,IAAIloB,EAEJ,KAAKA,EAAI,EAAGA,EAAIiG,KAAKilB,yBAAyB3qB,OAAQP,IACrDiG,KAAKilB,yBAAyBlrB,GAAGgiB,eAAerM,EAAQZ,EAAYoT,EAAmBlC,EAAuBpc,EAAQ9C,EAGvH,IAAI2kB,GAAqCzlB,KAAK0lB,oBAAoBzD,EAElE,KAAKloB,EAAI,EAAGA,EAAIiG,KAAKklB,wBAAwB5qB,OAAQP,IACpDiG,KAAKklB,wBAAwBnrB,GAAGgiB,eAAerM,EAAQZ,EAAY2W,EAAkBzF,EAAuBpc,EAAQ9C,GAM/GikB,GAAAxkB,UAAAud,qBAAP,SAA4BpO,IAQrBqV,GAAAxkB,UAAAqb,MAAP,WAEC/a,EAAAN,UAAMqb,MAAKvhB,KAAA2F,KAEX,KAAK,GAAIjG,GAAW,EAAGA,EAAIiG,KAAKmlB,oBAAoB7qB,OAAQP,IAC3DiG,KAAKmlB,oBAAoBprB,GAAG8iB,OAAO7c,KAAK8a,gBAMnCiK,GAAAxkB,UAAAoc,kBAAP,SAAyBF,GAExBzc,KAAK8a,gBAAkB2B,CAEvB,KAAK,GAAI1iB,GAAW,EAAGA,EAAIiG,KAAKmlB,oBAAoB7qB,OAAQP,IAC3DiG,KAAKmlB,oBAAoBprB,GAAG2P,OAAO1J,KAAK8a,gBAMnCiK,GAAAxkB,UAAAolB,UAAP,SAAiB9I,GAAA,GAAAA,QAAA,GAAiB,CAAjBA,EAAA,EAEhB,IAAK,GAAI9iB,GAAW,EAAGA,EAAIiG,KAAKmlB,oBAAoB7qB,OAAQP,IAC3DiG,KAAKmlB,oBAAoBprB,GAAG8iB,OAAO7c,KAAK8a,eAAiB+B,EAC1D7c,MAAK0J,OAAO1J,KAAKwc,MAGXuI,GAAAxkB,UAAAyC,QAAP,WAEC,IAAK,GAAI+e,KAAO/hB,MAAKolB,uBACCplB,KAAKolB,uBAAuBrD,GAAM/e,UAGjD+hB,GAAAxkB,UAAAmlB,oBAAR,SAA4BzD,GAE3B,IAAKjiB,KAAKklB,wBAAwB5qB,OACjC,MAED,IAAII,GAAwBunB,EAAQvnB,QACpC,IAAI+qB,GAAqCzlB,KAAKolB,uBAAuB1qB,EAASqU,IAAM,GAAIwP,GAAAmE,iBAGxF+C,GAAiB9C,iBAAiBjoB,EAASkoB,YAAa5iB,KAAKof,qBAG7DqG,GAAiBrB,mBAAqBpkB,KAAKqlB,sBAAsBrD,qBAAqBC,GAASmC,mBAEjG,OAAAW,IApIsCD,EAAAtK,aAAzBpgB,GAAA2qB,iBAAgBA,IV6tE1Ba,4BAA4B,+CAA+CrB,sCAAsC,yDAAyDI,2CAA2C,gEAAgEkB,wDAAwD,SAASvsB,EAAQkB,EAAOJ,GACxW,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IW3vEnF,IAAAge,GAAA/kB,EAAmC,gCAWnC,IAAAwsB,GAAA,SAAAjlB,GAA0Cd,EAAA+lB,EAAAjlB,EAwBzC,SAAAilB,GAAYC,GAAA,GAAAA,QAAA,GAA0B,CAA1BA,EAAA,EAEXllB,EAAAxG,KAAA2F,KAEAA,MAAKgmB,iBAAmBD,EAnBzBvlB,OAAA+B,eAAWujB,EAAAvlB,UAAA,mBXgwEJiC,IWhwEP,WAEC,MAAOxC,MAAKgmB,kBXiwENpjB,WAAY,KACZC,aAAc,MW/vErBrC,QAAA+B,eAAWujB,EAAAvlB,UAAA,iBXkwEJiC,IWlwEP,WAEC,MAAOxC,MAAKimB,gBXmwENrjB,WAAY,KACZC,aAAc,MWlvEdijB,GAAAvlB,UAAA4Y,kBAAP,SAAyBzJ,EAAmB0J,EAAmCC,GAE9ErZ,KAAKimB,eAAiB7M,EAAc8M,sBACpC,IAAIC,GAAsBnmB,KAAKimB,cAC/B,IAAIG,GAAsBpmB,KAAKimB,eAAiB,CAChD,IAAII,GAAsBrmB,KAAKimB,eAAiB,CAEhD,IAAIK,GAAoClN,EAAcmN,wBACtD7W,GAAO8W,gBAAkBF,EAAYxE,KAErC,IAAI2E,GAAqCrN,EAAcmN,wBACvD7W,GAAOgX,iBAAmBD,EAAa3E,KAEvC,IAAI6E,IAA0BL,EAAc,KAAMA,EAAc,KAAMA,EAAc,KAAMA,EAAc,KACxG,IAAIM,IAA0BH,EAAe,KAAMA,EAAe,KAAMA,EAAe,KAAMA,EAAe,KAC5G,IAAII,GAA8BzN,EAAcyH,yBAChD,IAAIiG,GAAa,KACjB,IAAI5sB,GAAc,EAElB,IAAIiL,GAAakU,EAAgB8G,qBAAqB7lB,MACtD,KAAK,GAAIP,GAAW,EAAGA,EAAIoL,IAAOpL,EAAG,CAEpC,GAAIgtB,GAA+B1N,EAAgB8G,qBAAqBpmB,EACxE,IAAIgL,GAA+BsU,EAAgB+G,yBAAyBrmB,EAE5E,KAAK,GAAIgd,GAAW,EAAGA,EAAI/W,KAAKgmB,mBAAoBjP,EAAG,CACtDqC,EAAc4N,uBACd5N,GAAc4N,uBACd5N,GAAc4N,uBACd9sB,IAAQ4sB,EAAM,IAAMD,EAAQ,OAASE,EAAS,QAAUJ,EAAQ5P,GAAK,IAAMoP,EAAe,MACzFW,EAAM,IAAMD,EAAQ,OAASE,EAAS,QAAUJ,EAAQ5P,GAAK,IAAMqP,EAAe,MAClFU,EAAM,IAAMD,EAAQ,OAASE,EAAS,QAAUJ,EAAQ5P,GAAK,IAAMsP,EAAe,MAClF,OAASQ,EAAQ,OAASE,EAAS,OACnC,OAASF,EAAQ,KAAOA,EAAQ,KAAOD,EAAQ7P,GAAK,IAGrD,IAAIA,GAAK,EACR7c,GAAQ,OAAS6K,EAAS,KAAO8hB,EAAQ,SAEzC3sB,IAAQ,OAAS6K,EAAS,KAAOA,EAAS,KAAO8hB,EAAQ,KAI3DC,EAAM,MAGP,MAAO5sB,GAMD4rB,GAAAvlB,UAAAgZ,oBAAP,SAA2B7J,EAAmB0J,EAAmCI,GAEhF,MAAO,GAMDsM,GAAAvlB,UAAAkZ,cAAP,SAAqB/J,EAAmB0J,EAAmCC,GAE1E,MAAO,OAASA,EAAgBmI,SAAW,IAAMnI,EAAgBuI,SAAW,KAMtEkE,GAAAvlB,UAAAmZ,aAAP,SAAoBhK,IAIrB,OAAAoW,IA1G0CzH,EAAA9F,iBAA7Bne,GAAA0rB,qBAAoBA,IXm1E9BxB,gCAAgC,qDAAqD2C,oDAAoD,SAAS3tB,EAAQkB,EAAOJ,GACpK,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IYh2EnF,IAAA6mB,GAAA5tB,EAAgC,0CAIhC,IAAAwrB,GAAAxrB,EAAgC,4BAEhC,IAAA6tB,GAAA7tB,EAA6B,8BAG7B,IAAA8tB,GAAA9tB,EAAgC,iCAGhC,IAAA+tB,GAAA/tB,EAAqC,gCAUrC,IAAAguB,GAAA,SAAAzmB,GAAsCd,EAAAunB,EAAAzmB,EAuFrC,SAAAymB,GAAY7M,EAAmC8M,EAAmBC,GAvFnE,GAAAxf,GAAAhI,IAuFmE,IAAAwnB,QAAA,GAAwB,CAAxBA,EAAA,MAEjE3mB,EAAAxG,KAAA2F,KAAMya,EAtFCza,MAAAynB,YAA2B,GAAIL,GAAAM,YAG/B1nB,MAAA2nB,iBAA0B,GAAInnB,OAC9BR,MAAA4nB,sBAA+B,GAAIpnB,OAoF1CR,MAAK6nB,sBAAwBpN,CAC7Bza,MAAK8nB,UAAYP,CACjBvnB,MAAK+nB,UAAYP,CACjBxnB,MAAKgmB,iBAAmBvL,EAAasL,eAErC/lB,MAAKgoB,WAAahoB,KAAK8nB,UAAUG,SACjCjoB,MAAKkoB,gBAAkB,GAAIC,cAAanoB,KAAKgoB,WAAW,GAExD,IAAIjR,GAAW,CACf,KAAK,GAAIhd,GAAW,EAAGA,EAAIiG,KAAKgoB,aAAcjuB,EAAG,CAChDiG,KAAKkoB,gBAAgBnR,KAAO,CAC5B/W,MAAKkoB,gBAAgBnR,KAAO,CAC5B/W,MAAKkoB,gBAAgBnR,KAAO,CAC5B/W,MAAKkoB,gBAAgBnR,KAAO,CAC5B/W,MAAKkoB,gBAAgBnR,KAAO,CAC5B/W,MAAKkoB,gBAAgBnR,KAAO,CAC5B/W,MAAKkoB,gBAAgBnR,KAAO,CAC5B/W,MAAKkoB,gBAAgBnR,KAAO,CAC5B/W,MAAKkoB,gBAAgBnR,KAAO,CAC5B/W,MAAKkoB,gBAAgBnR,KAAO,CAC5B/W,MAAKkoB,gBAAgBnR,KAAO,CAC5B/W,MAAKkoB,gBAAgBnR,KAAO,EAG7B/W,KAAKooB,8BAAgC,SAACjgB,GAA8B,MAAAH,GAAKqgB,qBAAqBlgB,GAC9FnI,MAAKsoB,yBAA2B,SAACngB,GAAwB,MAAAH,GAAKugB,gBAAgBpgB,GAC9EnI,MAAKwoB,0BAA4B,SAACrgB,GAAwB,MAAAH,GAAKygB,iBAAiBtgB,IA3FjF3H,OAAA+B,eAAW+kB,EAAA/mB,UAAA,kBZ22EJiC,IY32EP,WAEC,GAAIxC,KAAK0oB,uBACR1oB,KAAK2oB,wBAEN,OAAO3oB,MAAKkoB,iBZ22ENtlB,WAAY,KACZC,aAAc,MYp2ErBrC,QAAA+B,eAAW+kB,EAAA/mB,UAAA,cZ42EJiC,IY52EP,WAEC,GAAIxC,KAAK0oB,uBACR1oB,KAAK2oB,wBAEN,OAAO3oB,MAAKynB,aZ42EN7kB,WAAY,KACZC,aAAc,MYt2ErBrC,QAAA+B,eAAW+kB,EAAA/mB,UAAA,YZ62EJiC,IY72EP,WAEC,MAAOxC,MAAK8nB,WZ82ENllB,WAAY,KACZC,aAAc,MYx2ErBrC,QAAA+B,eAAW+kB,EAAA/mB,UAAA,YZ+2EJiC,IY/2EP,WAEC,MAAOxC,MAAK+nB,WZg3ENnlB,WAAY,KACZC,aAAc,MYz2ErBrC,QAAA+B,eAAW+kB,EAAA/mB,UAAA,uBZi3EJiC,IYj3EP,WAEC,MAAOxC,MAAK4oB,sBZk3ENnmB,IY/2EP,SAA+BC,GAE9B1C,KAAK4oB,qBAAuBlmB,GZg3EtBE,WAAY,KACZC,aAAc,MYn0EdykB,GAAA/mB,UAAAod,MAAP,WAEC,MAAO,IAAI2J,GAAiBtnB,KAAK6nB,sBAAuB7nB,KAAK8nB,UAAW9nB,KAAK+nB,WAUvET,GAAA/mB,UAAAsoB,KAAP,SAAYjP,EAAakP,EAAwCjM,GAAxC,GAAAiM,QAAA,GAAsC,CAAtCA,EAAA,KAAwC,GAAAjM,QAAA,GAAmB,CAAnBA,EAAAkM,IAEhE,GAAI/oB,KAAK2b,uBAAyB/B,EACjC,MAED5Z,MAAK2b,sBAAwB/B,CAE7B,KAAK5Z,KAAKib,eAAetB,aAAaC,GACrC,KAAM,IAAI3f,OAAM,uBAAyB2f,EAAO,cAEjD,IAAIkP,GAAc9oB,KAAKgpB,aAAc,CAEpChpB,KAAKgpB,aAAeF,EAAWG,iBAAiBjpB,KAAMA,KAAKgpB,aAAchpB,KAAKib,eAAepB,aAAaD,GAAO5Z,KAAK8a,eACtH9a,MAAKgpB,aAAazgB,iBAAiB8e,EAAA6B,oBAAoBC,oBAAqBnpB,KAAKooB,mCAEjFpoB,MAAKgpB,aAAehpB,KAAKib,eAAepB,aAAaD,EAEtD5Z,MAAK0b,cAAgB1b,KAAKqb,kBAAkBrb,KAAKgpB,aAEjD,IAAIhpB,KAAKgb,eAAgB,CAExBhb,KAAK0b,cAAchS,OAAO1J,KAAK8a,eAC/B9a,MAAK0b,cAAc0B,cAGpBpd,KAAKopB,qBAAiDppB,KAAK0b,aAE3D1b,MAAK4b,OAGL,KAAKyN,MAAMxM,GACV7c,KAAK4c,MAAMhD,EAAMiD,GAMZyK,GAAA/mB,UAAAwb,eAAP,SAAsBrM,EAAmBZ,EAA8BhO,EAAa8C,GAGnF,GAAI5D,KAAK0oB,uBACR1oB,KAAK2oB,wBAEN,IAAIjuB,GAAuEoU,EAAYmT,QAAQvnB,QAE/FA,GAAS4uB,oBAAsBtpB,KAAK4oB,oBAEpC,IAAI5oB,KAAK4oB,qBAAsB,CAE9B5oB,KAAKupB,wBAAwB7uB,EAAS8uB,qBACtC9Z,GAAO+Z,wBAAwBzpB,KAAK6nB,sBAAsB6B,cAAe1pB,KAAK2pB,wBACxE,CACN,GAAI3pB,KAAKib,eAAe2O,QAAS,CAChC,GAAI5pB,KAAK4nB,sBAAsBltB,EAASqU,IACvC/O,KAAK6pB,cAAqC/a,EAAYpU,EAEvD,QAEDgV,EAAO+Z,wBAAwBzpB,KAAK6nB,sBAAsB6B,cAAe1pB,KAAKkoB,kBAOzEZ,GAAA/mB,UAAAud,qBAAP,SAA4BpO,GAE3B,IAAK1P,KAAK4oB,uBAAyB5oB,KAAK+nB,WAAa/nB,KAAKgmB,iBAAmB,GAAKtW,EAAOwW,uBAAyBlmB,KAAKgoB,WAAW,EAAI,KACrIhoB,KAAKib,eAAe/B,yBAMfoO,GAAA/mB,UAAAoc,kBAAP,SAAyBF,GAExB5b,EAAAN,UAAMoc,kBAAiBtiB,KAAA2F,KAACyc,EAGxBzc,MAAK0oB,uBAAyB,IAG9B,IAAI1oB,KAAKib,eAAe2O,QACvB5pB,KAAK4d,qBAGC0J,GAAA/mB,UAAAgpB,wBAAR,SAAgCC,GAE/B,GAAIzS,GAAW,EAAGC,EAAW,CAC7B,IAAI7R,GAAaqkB,EAAqBlvB,MACtC,IAAIwvB,EAEJ9pB,MAAK2pB,mBAAqB,GAAIxB,cAAahjB,EAAI,GAE/C,KAAK,GAAIpL,GAAW,EAAGA,EAAIoL,EAAKpL,IAAK,CACpC+vB,EAAWN,EAAqBzvB,GAAG,EACnCid,GAAI,EAEJ,OAAOA,IACNhX,KAAK2pB,mBAAmB5S,KAAO/W,KAAKkoB,gBAAgB4B,MAI/CxC,GAAA/mB,UAAAooB,uBAAR,WAEC3oB,KAAK0oB,uBAAyB,KAG9B1oB,MAAK+pB,kBAAkB/pB,KAAKopB,qBAAqBY,gBAAgBhqB,KAAK8nB,WAAY9nB,KAAKynB,YAAaznB,KAAK8nB,UAGzG,IAAImC,GAAmB,CACvB,IAAIC,GAA+BlqB,KAAKynB,YAAY0C,UACpD,IAAIC,EACJ,IAAIC,GAAWC,EAAWC,EAAWC,CACrC,IAAIC,GAAYC,EAAYC,CAC5B,IAAIC,GAAYC,EAAYC,CAC5B,IAAIC,GAAYC,EAAYC,CAC5B,IAAIC,GAAYC,EAAYC,CAC5B,IAAIC,GAAYC,EAAYC,CAC5B,IAAIC,GAAYC,EAAYC,EAAYC,CACxC,IAAIC,GAAYC,EAAYC,EAAYC,CACxC,IAAIC,GAAYC,EAAYC,EAAYC,CACxC,IAAIC,GAA8BpsB,KAAK8nB,UAAUsE,MACjD,IAAIC,EACJ,IAAIC,EACJ,IAAIC,EACJ,IAAI/yB,EAEJ,KAAK,GAAIO,GAAW,EAAGA,EAAIiG,KAAKgoB,aAAcjuB,EAAG,CAChDsyB,EAAOnC,EAAYnwB,EACnBuyB,GAAOD,EAAKG,WACZD,GAAMF,EAAKI,WACXpC,GAAKiC,EAAK5d,CACV4b,GAAKgC,EAAK1d,CACV2b,GAAK+B,EAAKI,CACVlC,GAAK8B,EAAKK,CAEVlC,IAAOjxB,EAAI,EAAI6wB,GAAIC,CACnBI,GAAMlxB,EAAE+wB,CACRI,GAAMnxB,EAAEgxB,CACRI,IAAOpxB,EAAI,EAAI8wB,GAAIC,CACnBM,GAAMrxB,EAAEgxB,CACRM,GAAM,EAAIP,EAAGC,CAEbI,GAAM,EAAIN,EAAGC,CACbM,GAAM,EAAIP,EAAGE,CACbM,GAAM,EAAIP,EAAGC,CACbH,IAAMA,CACNC,IAAMA,CACNC,IAAMA,CACNC,IAAMA,CAENO,IAAOvxB,EAAI6wB,EAAKC,GAAMC,EAAKC,CAC3BQ,GAAMP,EAAMK,CACZG,GAAMP,EAAMG,CACZK,GAAMT,EAAMK,CACZK,IAAO3xB,EAAI+wB,EAAKC,CAChBY,GAAMR,EAAMD,CACZU,GAAMX,EAAMG,CACZS,GAAMV,EAAMD,CACZY,IAAOlB,EAAKC,EAAKC,EAAKC,CAGtBJ,GAAMgC,EAAOryB,GAAG6yB,eAChBpB,GAAMpB,EAAI,EACVqB,GAAMrB,EAAI,EACVsB,GAAMtB,EAAI,EACVuB,GAAMvB,EAAI,GACVwB,GAAMxB,EAAI,EACVyB,GAAMzB,EAAI,EACV0B,GAAM1B,EAAI,EACV2B,GAAM3B,EAAI,GACV4B,GAAM5B,EAAI,EACV6B,GAAM7B,EAAI,EACV8B,GAAM9B,EAAI,GACV+B,GAAM/B,EAAI,GAEVpqB,MAAKkoB,gBAAgB+B,GAAac,EAAIS,EAAMR,EAAIY,EAAMX,EAAIe,CAC1DhsB,MAAKkoB,gBAAgB+B,EAAY,GAAKc,EAAIU,EAAMT,EAAIa,EAAMZ,EAAIgB,CAC9DjsB,MAAKkoB,gBAAgB+B,EAAY,GAAKc,EAAIW,EAAMV,EAAIc,EAAMb,EAAIiB,CAC9DlsB,MAAKkoB,gBAAgB+B,EAAY,GAAKc,EAAIY,EAAMX,EAAIe,EAAMd,EAAIkB,EAAMI,EAAI7d,CACxE1O,MAAKkoB,gBAAgB+B,EAAY,GAAKiB,EAAIM,EAAML,EAAIS,EAAMR,EAAIY,CAC9DhsB,MAAKkoB,gBAAgB+B,EAAY,GAAKiB,EAAIO,EAAMN,EAAIU,EAAMT,EAAIa,CAC9DjsB,MAAKkoB,gBAAgB+B,EAAY,GAAKiB,EAAIQ,EAAMP,EAAIW,EAAMV,EAAIc,CAC9DlsB,MAAKkoB,gBAAgB+B,EAAY,GAAKiB,EAAIS,EAAMR,EAAIY,EAAMX,EAAIe,EAAMI,EAAI3d,CACxE5O,MAAKkoB,gBAAgB+B,EAAY,GAAKoB,EAAIG,EAAMF,EAAIM,EAAML,EAAIS,CAC9DhsB,MAAKkoB,gBAAgB+B,EAAY,GAAKoB,EAAII,EAAMH,EAAIO,EAAMN,EAAIU,CAC9DjsB,MAAKkoB,gBAAgB+B,EAAY,IAAMoB,EAAIK,EAAMJ,EAAIQ,EAAMP,EAAIW,CAC/DlsB,MAAKkoB,gBAAgB+B,EAAY,IAAMoB,EAAIM,EAAML,EAAIS,EAAMR,EAAIY,EAAMI,EAAIG,CAEzEzC,GAAYA,EAAY,IAInB3C,GAAA/mB,UAAAwd,sBAAP,SAA6BjP,EAAiCkP,GAE7Dhe,KAAK4nB,sBAAsB5J,EAAejP,IAAM,IAGhD,KAAK/O,KAAKib,eAAe2O,QACxB,MAAO5L,EAER,IAAI6O,EAEJ,MAAMA,EAAiB7sB,KAAK2nB,iBAAiB3J,EAAejP,KAAM,CAEjEiP,EAAe8O,OACf9O,GAAe+O,QACfF,GAAiB7sB,KAAK2nB,iBAAiB3J,EAAejP,IAAMiP,EAAeL,OAE3EkP,GAAeG,kBAAoB,KACnCH,GAAeI,mBAAqB,KAEpCjP,GAAezV,iBAAiB2e,EAAAgG,cAAcC,mBAAoBntB,KAAKsoB,yBACvEtK,GAAezV,iBAAiB2e,EAAAgG,cAAcE,oBAAqBptB,KAAKwoB,2BAGzE,MAAOqE,GAQDvF,GAAA/mB,UAAAspB,cAAP,SAAqB/a,EAAiCkP,GAErDhe,KAAK4nB,sBAAsB5J,EAAejP,IAAM,KAEhD,IAAI6T,GAAqB5E,EAAe4E,WACxC,IAAIyK,GAAkCrP,EAAesP,UAAU9qB,IAAIogB,EACnE,IAAI2K,GAA6BvP,EAAe8O,QAAQtqB,IAAIogB,EAC5D,IAAI4K,GAA8BxP,EAAe+O,SAASvqB,IAAIogB,EAE9D,IAAI6K,GAAgBzP,EAAesP,UAAUI,UAC7C,IAAIC,GAAmB3P,EAAesP,UAAUM,MAChD,IAAIC,GAAsB7P,EAAe8O,QAAQc,MACjD,IAAIE,GAAuB9P,EAAe+O,SAASa,MAEnD,IAAIG,GAA2C/P,EAAe+P,aAAavrB,IAAIogB,EAC/E,IAAIoL,GAA2ChQ,EAAegQ,aAAaxrB,IAAIogB,EAC/E,IAAIqL,GAAqBjQ,EAAe+P,aAAaH,MAErD,IAAIf,GAAkC7sB,KAAK2nB,iBAAiB3J,EAAejP,GAE3E,IAAImf,GAAkCrB,EAAeS,UAAU9qB,IAAIogB,EACnE,IAAIuL,GAA6BtB,EAAeC,QAAQtqB,IAAIogB,EAC5D,IAAIwL,GAA8BvB,EAAeE,SAASvqB,IAAIogB,EAC9DiK,GAAeS,UAAUe,iBAAiBC,YAC1CzB,GAAeC,QAAQuB,iBAAiBC,YACxCzB,GAAeE,SAASsB,iBAAiBC,YAEzC,IAAIxM,GAAe,CACnB,IAAIyM,GAAY,CAChB,IAAIC,GAAY,CAChB,IAAIC,GAAY,CAChB,IAAIC,GAAY,CAChB,IAAI1X,EACJ,IAAI2X,GAAWC,EAAWC,CAC1B,IAAIC,GAAWC,EAAWC,CAC1B,IAAIC,GAAWC,EAAWC,CAC1B,IAAIC,EACJ,IAAIC,GAAcC,EAAcC,CAChC,IAAIC,GAAcC,EAAcC,CAChC,IAAIC,GAAcC,EAAcC,CAChC,IAAIrE,GAAYC,EAAYC,EAAYC,CACxC,IAAIC,GAAYC,EAAYC,EAAYC,CACxC,IAAIC,GAAYC,EAAYC,EAAYC,CAExC,OAAOrK,EAAQc,EAAa,CAC3B2L,EAAKzM,EAAM6L,CACX0B,GAAQhC,EAAgBkB,EACxBe,GAAQjC,EAAgBkB,EAAK,EAC7BgB,GAAS9B,GAAU,EAAIJ,EAAgBkB,EAAK,GAAK,CACjDC,GAAK1M,EAAM+L,CACX2B,GAAQjC,EAAciB,EACtBiB,GAAQlC,EAAciB,EAAK,EAC3BkB,GAAQnC,EAAciB,EAAK,EAC3BC,GAAK3M,EAAMgM,CACX6B,GAAQnC,EAAeiB,EACvBmB,GAAQpC,EAAeiB,EAAK,EAC5BoB,GAAQrC,EAAeiB,EAAK,EAC5BE,GAAK,CACLC,GAAK,CACLC,GAAK,CACLC,GAAK,CACLC,GAAK,CACLC,GAAK,CACLC,GAAK,CACLC,GAAK,CACLC,GAAK,CACLnY,GAAI,CACJ0X,GAAK5M,EAAMmM,CACX,OAAOjX,EAAIhX,KAAKgmB,iBAAkB,CACjCoJ,EAASpB,EAAaU,EAAK1X,EAC3B,IAAIoY,EAAS,EAAG,CAEf,GAAInF,IAAmB8D,EAAaW,EAAK1X,IAAM,CAC/CwU,GAAMxrB,KAAKkoB,gBAAgB+B,GAC3BwB,GAAMzrB,KAAKkoB,gBAAgB+B,GAAY,EACvCyB,GAAM1rB,KAAKkoB,gBAAgB+B,GAAY,EACvC0B,GAAM3rB,KAAKkoB,gBAAgB+B,GAAY,EACvC2B,GAAM5rB,KAAKkoB,gBAAgB+B,GAAY,EACvC4B,GAAM7rB,KAAKkoB,gBAAgB+B,GAAY,EACvC6B,GAAM9rB,KAAKkoB,gBAAgB+B,GAAY,EACvC8B,GAAM/rB,KAAKkoB,gBAAgB+B,GAAY,EACvC+B,GAAMhsB,KAAKkoB,gBAAgB+B,GAAY,EACvCgC,GAAMjsB,KAAKkoB,gBAAgB+B,GAAY,EACvCiC,GAAMlsB,KAAKkoB,gBAAgB+B,GAAY,GACvCkC,GAAMnsB,KAAKkoB,gBAAgB+B,GAAY,GACvC0E,IAAMS,GAAQ5D,EAAI6D,EAAQ5D,EAAI6D,EAAQ5D,EAAI6D,EAAQ5D,EAClDiD,IAAMQ,GAAQxD,EAAIyD,EAAQxD,EAAIyD,EAAQxD,EAAIyD,EAAQxD,EAClD8C,IAAMO,GAAQpD,EAAIqD,EAAQpD,EAAIqD,EAAQpD,EAAIqD,EAAQpD,EAClD2C,IAAMM,GAAQ5D,EAAIgE,EAAQ/D,EAAIgE,EAAQ/D,EAAIgE,EAC1CX,IAAMK,GAAQxD,EAAI4D,EAAQ3D,EAAI4D,EAAQ3D,EAAI4D,EAC1CV,IAAMI,GAAQpD,EAAIwD,EAAQvD,EAAIwD,EAAQvD,EAAIwD,EAC1CT,IAAMG,GAAQ5D,EAAImE,EAAQlE,EAAImE,EAAQlE,EAAImE,EAC1CX,IAAME,GAAQxD,EAAI+D,EAAQ9D,EAAI+D,EAAQ9D,EAAI+D,EAC1CV,IAAMC,GAAQpD,EAAI2D,EAAQ1D,EAAI2D,EAAQ1D,EAAI2D,EAC1C7Y,SACM,CAENA,EAAIhX,KAAKgmB,kBAIXkI,EAAgBK,GAAMI,CACtBT,GAAgBK,EAAK,GAAKK,CAC1B,IAAInB,GAAU,EAAGS,EAAgBK,EAAK,GAAKM,CAC3CV,GAAcK,GAAMM,CACpBX,GAAcK,EAAK,GAAKO,CACxBZ,GAAcK,EAAK,GAAKQ,CACxBZ,GAAeK,GAAMQ,CACrBb,GAAeK,EAAK,GAAKS,CACzBd,GAAeK,EAAK,GAAKU,CAEzBrN,MASMwF,GAAA/mB,UAAAwpB,kBAAR,SAA0B+F,EAAyBC,EAAyBxI,GAE3E,GAAI2C,GAA+B6F,EAAW5F,UAC9C,IAAI6F,EACJ,IAAI5D,GAA8B7E,EAAS6E,MAC3C,IAAIjnB,GAAa2qB,EAAWG,aAC5B,IAAI9F,GAA8B2F,EAAW3F,UAC7C,IAAI+F,EACJ,IAAIC,EACJ,IAAIC,EACJ,IAAI/D,EACJ,IAAIgE,EACJ,IAAIC,EACJ,IAAI92B,EACJ,IAAI+2B,EAEJ,IAAIC,GAAWC,EAAWC,EAAWC,CACrC,IAAIC,GAAWC,EAAWC,EAAWC,CACrC,IAAIC,GAAWC,EAAWC,CAG1B,IAAIhH,EAAY5vB,QAAU6K,EACzB+kB,EAAY5vB,OAAS6K,CAEtB,KAAK,GAAIpL,GAAW,EAAGA,EAAIoL,IAAOpL,EAAG,CACpCi2B,EAAkB9F,EAAYnwB,EAE9B,IAAIi2B,GAAmB,KACtBA,EAAkB9F,EAAYnwB,GAAK,GAAIotB,GAAAgK,SAExChB,GAAQ/D,EAAOryB,EACfm2B,GAAcC,EAAMD,WACpB7D,GAAOlC,EAAWpwB,EAElBw2B,GAAIP,EAAgBxD,WACpBhzB,GAAIw2B,EAAgBvD,WAEpB,IAAIyD,EAAc,EAAG,CACpBI,EAAKjE,EAAKI,WACV4D,GAAKhE,EAAKG,WACV+D,GAAE7hB,EAAI2hB,EAAG3hB,CACT6hB,GAAE3hB,EAAIyhB,EAAGzhB,CACT2hB,GAAE7D,EAAI2D,EAAG3D,CACT6D,GAAE5D,EAAI0D,EAAG1D,CACTnzB,GAAEkV,EAAI4hB,EAAG5hB,CACTlV,GAAEoV,EAAI0hB,EAAG1hB,CACTpV,GAAEkzB,EAAI4D,EAAG5D,MACH,CAEN0D,EAAalG,EAAYgG,EAGzBG,GAAKD,EAAW5D,WAChB8D,GAAKjE,EAAKI,WACVmE,GAAKP,EAAG3hB,CACRmiB,GAAKR,EAAGzhB,CACRkiB,GAAKT,EAAG3D,CACRqE,GAAKV,EAAG1D,CACRqE,GAAKV,EAAG5hB,CACRuiB,GAAKX,EAAG1hB,CACRsiB,GAAKZ,EAAG5D,CAERiE,IAAMC,EAAGI,EAAKH,EAAGI,EAAKH,EAAGI,CACzBV,GAAKO,EAAGC,EAAKH,EAAGK,EAAKJ,EAAGG,CACxBR,GAAKM,EAAGE,EAAKL,EAAGM,EAAKJ,EAAGE,CACxBN,GAAKK,EAAGG,EAAKN,EAAGK,EAAKJ,EAAGG,CAGxBV,GAAKF,EAAW3D,WAChBjzB,GAAEkV,GAAKiiB,EAAGC,EAAKJ,EAAGO,EAAKN,EAAGK,EAAKJ,EAAGG,EAAKP,EAAG5hB,CAC1ClV,GAAEoV,GAAK+hB,EAAGE,EAAKL,EAAGM,EAAKL,EAAGM,EAAKL,EAAGE,EAAKN,EAAG1hB,CAC1CpV,GAAEkzB,GAAKiE,EAAGG,EAAKN,EAAGK,EAAKJ,EAAGG,EAAKF,EAAGK,EAAKT,EAAG5D,CAG1C8D,GAAKH,EAAG3hB,CACR+hB,GAAKJ,EAAGzhB,CACR8hB,GAAKL,EAAG3D,CACRiE,GAAKN,EAAG1D,CACR0D,GAAKhE,EAAKG,WACVoE,GAAKP,EAAG3hB,CACRmiB,GAAKR,EAAGzhB,CACRkiB,GAAKT,EAAG3D,CACRqE,GAAKV,EAAG1D,CAER4D,GAAE5D,EAAIgE,EAAGI,EAAKP,EAAGI,EAAKH,EAAGI,EAAKH,EAAGI,CACjCP,GAAE7hB,EAAIiiB,EAAGC,EAAKJ,EAAGO,EAAKN,EAAGK,EAAKJ,EAAGG,CACjCN,GAAE3hB,EAAI+hB,EAAGE,EAAKL,EAAGM,EAAKL,EAAGM,EAAKL,EAAGE,CACjCL,GAAE7D,EAAIiE,EAAGG,EAAKN,EAAGK,EAAKJ,EAAGG,EAAKF,EAAGK,IAK5BzJ,GAAA/mB,UAAA8nB,qBAAR,SAA6BlgB,GAE5B,GAAIA,EAAMipB,MAAQ/J,EAAA6B,oBAAoBC,oBAAqB,CAC1DhhB,EAAMkpB,cAAcpmB,oBAAoBoc,EAAA6B,oBAAoBC,oBAAqBnpB,KAAKooB,8BAEtF,IAAIpoB,KAAK0b,eAAiBvT,EAAMmpB,eAAgB,CAC/CtxB,KAAKgpB,aAAehpB,KAAKib,eAAepB,aAAa7Z,KAAK2b,sBAC1D3b,MAAK0b,cAAgB1b,KAAKqb,kBAAkBrb,KAAKgpB,aACjDhpB,MAAKopB,qBAAiDppB,KAAK0b,gBAKtD4L,GAAA/mB,UAAAgoB,gBAAR,SAAwBpgB,GAEvB,GAAIzN,GAA+CyN,EAAMpD,MAErC/E,MAAK2nB,iBAAiBjtB,EAASqU,IAAKwiB,WAAW72B,EAASisB,SAGrEW,GAAA/mB,UAAAkoB,iBAAR,SAAyBtgB,GAGxB,GAAIA,EAAMqpB,gBAAkB92B,EAAS+2B,KAAOtpB,EAAMqpB,gBAAkB92B,EAASg3B,mBAAmB,gBAC/F,MAED,IAAIh3B,GAA+CyN,EAAMpD,MACzD,IAAI4sB,GAAoD3xB,KAAK2nB,iBAAiBjtB,EAASqU,GACvF,IAAI6iB,GAAuCD,EAAcF,IAAIjvB,IAAI9H,EAASkoB,YAE1E+O,GAAcE,mBAAmBF,EAAcF,IAE/C,IAAIK,GAAkBH,EAAcF,IAAI7D,MACxC,IAAI6D,GAAkCtpB,EAAMqpB,eAAehvB,IAAI9H,EAASkoB,YAExE,IAAIzd,GAAazK,EAASkoB,YAAYkP,CACtC,KAAK,GAAI/3B,GAAW,EAAGA,EAAIoL,EAAKpL,GAAG+3B,EAAU,CAC5CF,EAAS73B,GAAK03B,EAAI13B,EAClB63B,GAAS73B,EAAI,GAAK03B,EAAI13B,EAAI,IAG7B,OAAAutB,IAtmBsCxC,EAAAtK,aAAzBpgB,GAAAktB,iBAAgBA,IZw2F1B1B,4BAA4B,+CAA+CmM,8BAA8B,iDAAiDC,iCAAiC,oDAAoDC,gCAAgC,mDAAmDC,0CAA0C9yB,YAAY+yB,sDAAsD,SAAS74B,EAAQkB,EAAOJ,GACzc,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,Iat4FnF,IAAAge,GAAA/kB,EAAmC,gCACnC,IAAAglB,GAAAhlB,EAAsC,0CACtC,IAAA84B,GAAA94B,EAAqC,wCAWrC,IAAA+4B,GAAA,SAAAxxB,GAAwCd,EAAAsyB,EAAAxxB,EAuCvC,SAAAwxB,GAAYC,EAAqBC,GAArB,GAAAD,QAAA,GAAmB,CAAnBA,EAAA,EAAqB,GAAAC,QAAA,GAA6B,CAA7BA,EAAA,WAEhC1xB,EAAAxG,KAAA2F,KACAA,MAAKwyB,UAAYF,CACjBtyB,MAAKyyB,WAAaF,EAjCnB/xB,OAAA+B,eAAW8vB,EAAA9xB,UAAA,Ybq5FJiC,Iar5FP,WAEC,MAAOxC,MAAKwyB,Wbs5FN5vB,WAAY,KACZC,aAAc,Maj5FrBrC,QAAA+B,eAAW8vB,EAAA9xB,UAAA,abu5FJiC,Iav5FP,WAEC,MAAOxC,MAAKyyB,Ybw5FN7vB,WAAY,KACZC,aAAc,Ma53FdwvB,GAAA9xB,UAAA4Y,kBAAP,SAAyBzJ,EAAmB0J,EAAmCC,GAG9ErZ,KAAK+f,wBAA0BrQ,EAAOsQ,qBAEtC,IAAIhgB,KAAK+f,yBAA2B,KACnC/f,KAAK+f,wBAA0BrQ,EAAOsQ,sBAAwB,GAAI1B,GAAA2B,qBAEnE,IAAIjgB,KAAKyyB,YAAcL,EAAAM,oBAAoBC,SAC1C,MAAO3yB,MAAK4yB,oBAAoBljB,EAAQ0J,EAAeC,OAEvD,OAAOrZ,MAAK6yB,oBAAoBnjB,EAAQ0J,EAAeC,GAMlDgZ,GAAA9xB,UAAAgZ,oBAAP,SAA2B7J,EAAmB0J,EAAmCI,GAEhF,MAAO,GAMD6Y,GAAA9xB,UAAAkZ,cAAP,SAAqB/J,EAAmB0J,EAAmCC,GAE1E,MAAO,OAASA,EAAgBmI,SAAW,IAAMnI,EAAgBuI,SAAW,KAMtEyQ,GAAA9xB,UAAAmZ,aAAP,SAAoBhK,IAQZ2iB,GAAA9xB,UAAAqyB,oBAAR,SAA4BljB,EAAmB0J,EAAmCC,GAEjF,GAAInf,GAAc,EAClB,IAAI2sB,GAA8BzN,EAAcyH,yBAChDzH,GAAc0H,oBAAoB+F,EAAO,EACzC,IAAIiM,GAA8B1Z,EAAcyH,yBAChD,IAAIkS,GAAqB,GAAI3xB,OAAc,KAAM,KAAM,KAAM,KAC7D,IAAI+D,GAAakU,EAAgB8G,qBAAqB7lB,MACtD,IAAI04B,GAAoC5Z,EAAc4N,uBACtDhnB,MAAK+f,wBAAwBkT,aAAeD,EAAYlR,KACxD9hB,MAAK+f,wBAAwBmT,YAAc,GAAI9xB,OAAcpB,KAAKwyB,UAClE,IAAIW,EACJ,IAAInc,GAAW,CAEf,IAAI7R,EAAM,EACTA,EAAM,CAEP,KAAK,GAAIpL,GAAW,EAAGA,EAAIoL,IAAOpL,EAAG,CACpCG,GAAQ,OAAS2sB,EAAQ,KAAOxN,EAAgB8G,qBAAqBpmB,GAAK,KAAOi5B,EAAcD,EAAK,GAAK,IAEzG,KAAK,GAAIhc,GAAW,EAAGA,EAAI/W,KAAKwyB,YAAazb,EAAG,CAC/Coc,EAAY/Z,EAAcmN,wBAC1BvmB,MAAK+f,wBAAwBmT,YAAYlc,KAAOmc,EAAUrR,KAC1D5nB,IAAQ,OAAS44B,EAAQ,KAAOK,EAAY,KAAOH,EAAcD,EAAKhc,GAAK,IAE3E,IAAIA,EAAI/W,KAAKwyB,UAAY,EACxBt4B,GAAQ,OAAS2sB,EAAQ,KAAOA,EAAQ,KAAOiM,EAAQ,KAGzD54B,GAAQ,OAASmf,EAAgB+G,yBAAyBrmB,GAAK,KAAO8sB,EAAQ,KAAOiM,EAAQ,KAI9F,GAAIpjB,EAAO0jB,oBAAsB,GAAK1jB,EAAO2jB,eAAgB,CAC5Dn5B,GAAQ,OAAS2sB,EAAQ,OAASxN,EAAgB8G,qBAAqB,GAAK,KAAO9G,EAAgB+G,yBAAyB,GAAK,KAChI,OAASyG,EAAQ,KAAOxN,EAAgB+G,yBAAyB,GAAK,KAAOyG,EAAQ,OACrF,OAASxN,EAAgB+G,yBAAyB,GAAK,KAAO/G,EAAgB+G,yBAAyB,GAAK,KAAOyG,EAAQ;CAS7H,MAAO3sB,GAMAm4B,GAAA9xB,UAAAsyB,oBAAR,SAA4BnjB,EAAmB0J,EAAmCC,GAEjF,GAAInf,GAAc,EAClB,IAAIiL,GAAakU,EAAgB8G,qBAAqB7lB,MACtD,IAAIy4B,IAAsB,KAAM,KAAM,KAAM,KAC5C,IAAIlM,GAA8BzN,EAAcyH,yBAChD,IAAImS,GAAoC5Z,EAAc4N,uBACtDhnB,MAAK+f,wBAAwBkT,aAAeD,EAAYlR,KACxD9hB,MAAK+f,wBAAwBmT,YAAc,GAAI9xB,OAAcpB,KAAKwyB,UAClE,IAAIW,EACJ,IAAInc,GAAW,CAEf,IAAI7R,EAAM,EACTA,EAAM,CAEPjL,IAAQ,QAAUmf,EAAgB+G,yBAAyB,GAAK,KAAO/G,EAAgB8G,qBAAqB,GAAK,IACjH,IAAIzQ,EAAO4jB,mBAAqB,EAC/Bp5B,GAAQ,OAASmf,EAAgB+G,yBAAyB,GAAK,KAAO/G,EAAgB8G,qBAAqB,GAAK,IAEjH,KAAK,GAAIpmB,GAAW,EAAGA,EAAIoL,IAAOpL,EAAG,CACpC,IAAK,GAAIgd,GAAW,EAAGA,EAAI/W,KAAKwyB,YAAazb,EAAG,CAC/Coc,EAAY/Z,EAAcmN,wBAC1BvmB,MAAK+f,wBAAwBmT,YAAYlc,KAAOmc,EAAUrR,KAC1D5nB,IAAQ,OAAS2sB,EAAQ,KAAOsM,EAAY,KAAOH,EAAcD,EAAKhc,GAAK,KAC1E,OAASsC,EAAgB+G,yBAAyBrmB,GAAK,KAAOsf,EAAgB+G,yBAAyBrmB,GAAK,KAAO8sB,EAAQ,MAI9H,GAAInX,EAAO0jB,oBAAsB,GAAK1jB,EAAO2jB,eAAgB,CAC5Dn5B,GAAQ,OAAS2sB,EAAQ,OAASxN,EAAgB8G,qBAAqB,GAAK,KAAO9G,EAAgB+G,yBAAyB,GAAK,KAChI,OAASyG,EAAQ,KAAOxN,EAAgB+G,yBAAyB,GAAK,KAAOyG,EAAQ,OACrF,OAASxN,EAAgB+G,yBAAyB,GAAK,KAAO/G,EAAgB8G,qBAAqB,GAAK,KAAO0G,EAAQ,KAGzH,MAAO3sB,GAET,OAAAm4B,IAjLwChU,EAAA9F,iBAA3Bne,GAAAi4B,mBAAkBA,Ib2hG5B/N,gCAAgC,mDAAmDE,0CAA0C,6DAA6D+O,wCAAwC,6DAA6DC,kDAAkD,SAASl6B,EAAQkB,EAAOJ,GAC5W,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,Ic7iGnF,IAAAhE,GAAA/C,EAAmC,+CAMnC,IAAAwrB,GAAAxrB,EAAgC,4BAGhC,IAAA84B,GAAA94B,EAAqC,wCAarC,IAAAm6B,GAAA,SAAA5yB,GAAoCd,EAAA0zB,EAAA5yB,EAYnC,SAAA4yB,GAAYC,GAEX7yB,EAAAxG,KAAA2F,KAAM0zB,EAXC1zB,MAAA2zB,OAAyB,GAAIvyB,MAC7BpB,MAAA4zB,SAAwB,GAAIzL,eAAc,EAAG,EAAG,EAAG,GAY1DnoB,MAAK6zB,oBAAsBH,EAMrBD,EAAAlzB,UAAAod,MAAP,WAEC,MAAO,IAAI8V,GAAezzB,KAAK6zB,qBAOzBJ,GAAAlzB,UAAAsoB,KAAP,SAAYjP,EAAakP,EAAwCjM,GAAxC,GAAAiM,QAAA,GAAsC,CAAtCA,EAAA,KAAwC,GAAAjM,QAAA,GAAmB,CAAnBA,EAAAkM,IAEhE,GAAI/oB,KAAK2b,uBAAyB/B,EACjC,MAED5Z,MAAK2b,sBAAwB/B,CAI7B,KAAK5Z,KAAKib,eAAetB,aAAaC,GACrC,KAAM,IAAI3f,OAAM,uBAAyB2f,EAAO,cAEjD5Z,MAAKgpB,aAAehpB,KAAKib,eAAepB,aAAaD,EAErD5Z,MAAK0b,cAAgB1b,KAAKqb,kBAAkBrb,KAAKgpB,aAEjD,IAAIhpB,KAAKgb,eAAgB,CAExBhb,KAAK0b,cAAchS,OAAO1J,KAAK8a,eAC/B9a,MAAK0b,cAAc0B,cAGpBpd,KAAK8zB,mBAA6C9zB,KAAK0b,aAEvD1b,MAAK4b,OAGL,KAAKyN,MAAMxM,GACV7c,KAAK4c,MAAMhD,EAAMiD,GAMZ4W,GAAAlzB,UAAAoc,kBAAP,SAAyBF,GAExB5b,EAAAN,UAAMoc,kBAAiBtiB,KAAA2F,KAACyc,EAExB,IAAIsX,GAAuB,KAE3B,IAAI/zB,KAAK2zB,OAAO,IAAM3zB,KAAK8zB,mBAAmBE,gBAAiB,CAC9Dh0B,KAAK2zB,OAAO,GAAK3zB,KAAK8zB,mBAAmBE,eACzCD,GAAe,KAGhB,GAAI/zB,KAAK2zB,OAAO,IAAM3zB,KAAK8zB,mBAAmBG,aAC7Cj0B,KAAK2zB,OAAO,GAAK3zB,KAAK8zB,mBAAmBG,YAE1Cj0B,MAAK4zB,SAAS,GAAK,GAAK5zB,KAAK4zB,SAAS,GAAK5zB,KAAK8zB,mBAAmBI,YAEnE,IAAIH,EACH/zB,KAAK4d,qBAMA6V,GAAAlzB,UAAAwb,eAAP,SAAsBrM,EAAmBZ,EAA8BhO,EAAa8C,GAInF,GAAIqe,GAAoDnT,EAAYmT,OACpE,IAAIvnB,GAAwBunB,EAAQvnB,QAGpC,KAAKsF,KAAK2zB,OAAOr5B,OAAQ,CACxB0F,KAAKm0B,YAAYzkB,EAAQhV,EAAUoG,EACnC,QAGD,GAAIkf,GAA8CtQ,EAAOsQ,qBACzD,IAAIjmB,EACJ,IAAIoL,GAAanF,KAAK6zB,oBAAoBvB,QAE1C5iB,GAAO+Z,wBAAwBzJ,EAAsBiT,aAAcjzB,KAAK4zB,SAExE,IAAI5zB,KAAK6zB,oBAAoBtB,WAAaH,EAAAM,oBAAoBC,SAC7D54B,EAAI,MAEJA,GAAI,CAEL,IAAIkc,EACJ,IAAIe,GAAW,CAEf,MAAOjd,EAAIoL,IAAOpL,EAAG,CACpBW,EAAWsF,KAAK2zB,OAAO55B,GAAG0oB,aAAaR,EAAQmS,SAAS15B,UAAYunB,EAAQvnB,QAE5Eub,GAA+BnV,EAAMqJ,eAAezP,EACpDub,GAAWoe,eAAoCvzB,EAAMqJ,eAAe8X,EAAQvnB,UAAW45B,kBAEvF,IAAI55B,EAAS65B,QAAQl4B,EAAAe,kBAAmB,CACvC6Y,EAAWue,uBAAuBxU,EAAsBkT,YAAYlc,KAA0Btc,EAAU4yB,UAExG,IAAI5d,EAAO4jB,mBAAqB,EAC/Brd,EAAWue,uBAAuBxU,EAAsBkT,YAAYlc,KAA0Btc,EAAUoyB,WAKpG2G,GAAAlzB,UAAA4zB,YAAR,SAAoBzkB,EAAmBhV,EAAuBoG,GAE7D,GAAIkf,GAA8CtQ,EAAOsQ,qBAEzDtQ,GAAO+Z,wBAAwBzJ,EAAsBiT,aAAcjzB,KAAK4zB,SAExE,IAAI3d,GAAgDnV,EAAMqJ,eAAezP,EACzE,IAAIsc,GAAW,CAEf,IAAIhX,KAAK6zB,oBAAoBtB,WAAaH,EAAAM,oBAAoBC,SAAU,CACvE,GAAIxtB,GAAanF,KAAK6zB,oBAAoBvB,QAC1C,KAAK,GAAIv4B,GAAW,EAAGA,EAAIoL,IAAOpL,EAAG,CACpC,GAAIW,EAAS65B,QAAQl4B,EAAAe,kBAAmB,CACvC6Y,EAAWue,uBAAuBxU,EAAsBkT,YAAYlc,KAA0Btc,EAAU4yB,UAExG,IAAI5d,EAAO4jB,mBAAqB,EAC/Brd,EAAWue,uBAAuBxU,EAAsBkT,YAAYlc,KAA0Btc,EAAUoyB,YAWtG2G,GAAAlzB,UAAAud,qBAAP,SAA4BpO,IAIrB+jB,GAAAlzB,UAAAwd,sBAAP,SAA6BjP,EAAiCkP,GAE7D,GAAIhe,KAAK6zB,oBAAoBtB,WAAaH,EAAAM,oBAAoBC,UAAY3yB,KAAK2zB,OAAOr5B,OACrF,MAA0B0F,MAAK2zB,OAAO,GAAGlR,aAAa3T,EAAWmT,QAAQmS,SAAS15B,UAAYsjB,CAG/F,OAAOA,GAET,OAAAyV,IAzKoC3O,EAAAtK,aAAvBpgB,GAAAq5B,eAAcA,IdgqGxB7N,4BAA4B,+CAA+C2N,wCAAwC,2DAA2D9zB,+CAA+CL,YAAYq1B,0DAA0D,SAASn7B,EAAQkB,EAAOJ,GAC9T,YehrGA,IAAAsoB,GAAA,WA2BC,QAAAA,KArBO1iB,KAAA00B,eAAsC,GAAItzB,OAAqB,EAC/DpB,MAAA20B,gBAAoC,GAAIvzB,OAAkB,EAC1DpB,MAAA40B,cAA+B,GAAIxzB,OAAe,EAMlDpB,MAAAmkB,qBAA8B,CAE9BnkB,MAAA60B,aAAsBC,OAAOC,iBAE7B/0B,MAAAokB,mBAAkD,GAAIhjB,MAW5D,KAAK,GAAIrH,GAAW,EAAGA,EAAI,EAAGA,IAC7BiG,KAAK40B,cAAc76B,GAAK,IAEzBiG,MAAKg1B,WAAatS,EAAkBuS,mBAG9BvS,EAAAniB,UAAAoiB,iBAAP,SAAwBC,EAAoBsS,GAE3Cl1B,KAAKm1B,aAAevS,CACpB5iB,MAAKof,qBAAuB8V,CAC5Bl1B,MAAKo1B,aAAe,GAAIh0B,OAAcwhB,EAAYsS,GAG5CxS,GAAAniB,UAAA80B,qBAAP,SAA4BvT,EAAcwT,EAAqBx0B,EAAay0B,GAE3E,GAAIC,GAAsB10B,EAAM20B,UAChC,IAAIvvB,GAAkCpF,EAAMoF,OAE5C,IAAIwvB,GAAuB11B,KAAK00B,eAAec,EAC/C,KAAKE,GAAU11B,KAAK20B,gBAAgBa,IAAiBtvB,EAAS,CAC7DwvB,EAAS11B,KAAK00B,eAAec,GAAgBtvB,EAAQyvB,mBAAmB31B,KAAKm1B,aAAcn1B,KAAKof,qBAAqB,EACrHpf,MAAK20B,gBAAgBa,GAAgBtvB,CACrClG,MAAK40B,cAAcY,GAAgB,KAEpC,GAAIx1B,KAAK40B,cAAcY,GAAe,CACrCE,EAAOE,gBAAgB51B,KAAKo1B,aAAc,EAAGp1B,KAAKm1B,aAClDn1B,MAAK40B,cAAcY,GAAgB,MAEpCtvB,EAAQ2D,kBAAkBiY,EAAO4T,EAAQJ,EAAa,EAAGC,GAGnD7S,GAAAniB,UAAAyC,QAAP,WAEC,MAAOhD,KAAK00B,eAAep6B,OAAQ,CAClC,GAAIkP,GAA6BxJ,KAAK00B,eAAemB,KAErD,IAAIrsB,EACHA,EAAaxG,WAIT0f,GAAAniB,UAAAu1B,iBAAP,WAEC,IAAK,GAAI/7B,GAAW,EAAGA,EAAI,EAAGA,IAC7BiG,KAAK40B,cAAc76B,GAAK,KAG1ByG,QAAA+B,eAAWmgB,EAAAniB,UAAA,cfopGJiC,IeppGP,WAEC,MAAOxC,MAAKo1B,cfqpGNxyB,WAAY,KACZC,aAAc,MenpGrBrC,QAAA+B,eAAWmgB,EAAAniB,UAAA,efspGJiC,IetpGP,WAEC,MAAOxC,MAAKm1B,cfupGNvyB,WAAY,KACZC,aAAc,MerpGrBrC,QAAA+B,eAAWmgB,EAAAniB,UAAA,uBfwpGJiC,IexpGP,WAEC,MAAOxC,MAAKof,sBfypGNxc,WAAY,KACZC,aAAc,MehvGP6f,GAAAuS,iBAA0B,CAwFzC,OAAAvS,KA1FatoB,GAAAsoB,kBAAiBA,OfwvGxBqT,8DAA8D,SAASz8B,EAAQkB,EAAOJ,GAC5F,YgB5vGA,IAAA47B,GAAA18B,EAAqC,sCAMrC,IAAA2mB,GAAA,WAgCC,QAAAA,KAFQjgB,KAAAi2B,gBAAyB,GAAIz1B,QAM9Byf,EAAA1f,UAAAqc,MAAP,SAAaxD,EAAmCC,EAAoC6G,GAEnFlgB,KAAKk2B,kBAAoB,GAAI90B,MAC7BpB,MAAKm2B,kBAAoB9c,EAAgB8G,qBAAqB,EAC9DngB,MAAKygB,qBAAuBpH,EAAgB+G,yBAAyB,EAErE,KAAK,GAAIrmB,GAAW,EAAGA,EAAIsf,EAAgB+G,yBAAyB9lB,OAAQP,IAC3EiG,KAAKk2B,kBAAkBtwB,KAAKyT,EAAgB+G,yBAAyBrmB,GAGtEiG,MAAKsgB,gBAAkBlH,EAAc4N,uBACrChnB,MAAKsgB,gBAAkB,GAAI0V,GAAAI,sBAAsBp2B,KAAKsgB,gBAAgB+V,QAASr2B,KAAKsgB,gBAAgBwB,MAAO,EAC3G9hB,MAAKihB,eAAiB,GAAI+U,GAAAI,sBAAsBp2B,KAAKsgB,gBAAgB+V,QAASr2B,KAAKsgB,gBAAgBwB,MAAO,EAC1G9hB,MAAKs2B,eAAiB,GAAIN,GAAAI,sBAAsBp2B,KAAKsgB,gBAAgB+V,QAASr2B,KAAKsgB,gBAAgBwB,MAAO,EAG1G9hB,MAAKqgB,eAAiBjH,EAAcyH,yBACpCzH,GAAc0H,oBAAoB9gB,KAAKqgB,eAAgB,EACvDrgB,MAAKqgB,eAAiB,GAAI2V,GAAAI,sBAAsBp2B,KAAKqgB,eAAegW,QAASr2B,KAAKqgB,eAAeyB,MAEjG,IAAI5B,EAAc,CACjBlgB,KAAKugB,eAAiBnH,EAAcyH,yBACpCzH,GAAc0H,oBAAoB9gB,KAAKugB,eAAgB,EACvDvgB,MAAKugB,eAAiB,GAAIyV,GAAAI,sBAAsBp2B,KAAKugB,eAAe8V,QAASr2B,KAAKugB,eAAeuB,MACjG9hB,MAAKu2B,WAAa,GAAIP,GAAAI,sBAAsBp2B,KAAKugB,eAAe8V,QAASr2B,KAAKugB,eAAeuB,MAAO,EACpG9hB,MAAKw2B,WAAa,GAAIR,GAAAI,sBAAsBp2B,KAAKqgB,eAAegW,QAASr2B,KAAKqgB,eAAeyB,MAAO,OAC9F,CACN,GAAI2U,GAAiCrd,EAAcyH,yBACnDzH,GAAc0H,oBAAoB2V,EAAU,EAC5Cz2B,MAAKu2B,WAAa,GAAIP,GAAAI,sBAAsBK,EAASJ,QAASI,EAAS3U,MAAO,EAC9E9hB,MAAKw2B,WAAa,GAAIR,GAAAI,sBAAsBK,EAASJ,QAASI,EAAS3U,MAAO,IAKzE7B,GAAA1f,UAAAghB,qBAAP,SAA4BlI,GAE3BrZ,KAAK2hB,MAAQtI,EAAgBmI,QAC7BxhB,MAAKyhB,YAAcpI,EAAgBuI,QAEnC5hB,MAAKwhB,SAAW,GAAIwU,GAAAI,sBAAsBp2B,KAAKqgB,eAAegW,QAASr2B,KAAKqgB,eAAeyB,OAGrF7B,GAAA1f,UAAAm2B,iBAAP,SAAwBrzB,EAAwBszB,EAAuBC,GAGtE,GAAIp9B,GAAkBwG,KAAKi2B,gBAAgB5yB,EAAK0L,GAEhD,IAAIvV,GAAK,KACRA,EAAIwG,KAAKi2B,gBAAgB5yB,EAAK0L,IAAM,GAAI3N,OAAc,EAEvD5H,GAAEm9B,GAAkBC,EAGd3W,GAAA1f,UAAAs2B,iBAAP,SAAwBxzB,EAAwBszB,GAE/C,MAAwB32B,MAAKi2B,gBAAgB5yB,EAAK0L,IAAK4nB,GAEzD,OAAA1W,KA9Fa7lB,GAAA6lB,sBAAqBA,IhB+yG/B6W,sCAAsC,wDAAwDC,0DAA0D,SAASz9B,EAAQkB,EAAOJ,GACnL,YiB1zGA,IAAA48B,GAAA,WAKC,QAAAA,GAAYC,EAAaC,GAGxB,GAAID,GAAQ,GAAKA,GAAQ,EACxB,KAAK,IAAKh9B,OAAM,2BACjB+F,MAAKm3B,MAAQF,CACbj3B,MAAKo3B,OAASF,EAGf12B,OAAA+B,eAAWy0B,EAAAz2B,UAAA,SjBszGJiC,IiBtzGP,WAEC,MAAOxC,MAAKo3B,QjBuzGNx0B,WAAY,KACZC,aAAc,MiBrzGrBrC,QAAA+B,eAAWy0B,EAAAz2B,UAAA,QjBwzGJiC,IiBxzGP,WAEC,MAAOxC,MAAKm3B,OjByzGNv0B,WAAY,KACZC,aAAc,MiBvzGtB,OAAAm0B,KAxBa58B,GAAA48B,kBAAiBA,OjBo1GxBK,kDAAkD,SAAS/9B,EAAQkB,EAAOJ,GAChF,YkBv1GA,IAAAmR,GAAAjS,EAA6B,gCAC7B,IAAAg+B,GAAAh+B,EAA8B,kCAC9B,IAAAqS,GAAArS,EAA6B,gCAU7B,IAAA63B,GAAA,WAiBC,QAAAA,KAPOnxB,KAAAwsB,YAAyB,GAAI8K,GAAAC,UAK7Bv3B,MAAAysB,YAAuB,GAAI9gB,GAAAiB,SAa3BukB,EAAA5wB,UAAAi3B,WAAP,SAAkBzyB,GAAA,GAAAA,QAAA,GAAsB,CAAtBA,EAAA,KAEjB,GAAIA,GAAU,KACbA,EAAS,GAAIwG,GAAA6B,QAEdpN,MAAKwsB,YAAYgL,WAAWzyB,EAC5BA,GAAO0yB,kBAAkBz3B,KAAKysB,YAAY/d,EAAG1O,KAAKysB,YAAY7d,EAAG5O,KAAKysB,YAAYC,EAClF,OAAO3nB,GAQDosB,GAAA5wB,UAAAmR,SAAP,SAAgB2a,GAEf,GAAIgE,GAAgBhE,EAAKG,WACzB,IAAI8D,GAAcjE,EAAKI,WACvBzsB,MAAKwsB,YAAY9d,EAAI2hB,EAAG3hB,CACxB1O,MAAKwsB,YAAY5d,EAAIyhB,EAAGzhB,CACxB5O,MAAKwsB,YAAYE,EAAI2D,EAAG3D,CACxB1sB,MAAKwsB,YAAYG,EAAI0D,EAAG1D,CACxB3sB,MAAKysB,YAAY/d,EAAI4hB,EAAG5hB,CACxB1O,MAAKysB,YAAY7d,EAAI0hB,EAAG1hB,CACxB5O,MAAKysB,YAAYC,EAAI4D,EAAG5D,EAE1B,OAAAyE,KAvDa/2B,GAAA+2B,UAASA,IlBm4GnB1Z,gCAAgCrY,UAAUs4B,kCAAkCt4B,UAAUyY,gCAAgCzY,YAAYu4B,8DAA8D,SAASr+B,EAAQkB,EAAOJ,GAC3N,YmB34GA,IAAAiqB,GAAA,WAUC,QAAAA,GAAYvC,EAAc+B,EAAkBC,EAAiBC,EAAcb,GAE1EljB,KAAK8hB,MAAQA,CACb9hB,MAAK6jB,UAAYA,CACjB7jB,MAAK43B,UAAY9T,EAAWC,CAC5B/jB,MAAK8jB,SAAWA,CAChB9jB,MAAK+jB,MAAQA,CACb/jB,MAAK63B,iBAAmB3U,EAAS2U,gBACjC73B,MAAK4iB,YAAcM,EAASN,YAE9B,MAAAyB,KApBajqB,GAAAiqB,sBAAqBA,OnB45G5ByT,+DAA+D,SAASx+B,EAAQkB,EAAOJ,GAC7F,YoB/5GA,IAAAqlB,GAAA,WAAA,QAAAA,MAKeA,EAAAsY,OAAgB,CAKhBtY,GAAAC,aAAsB,CAKtBD,GAAAI,cAAuB,CACtC,OAAAJ,KAhBarlB,GAAAqlB,uBAAsBA,OpBq7G7BuY,2DAA2D,SAAS1+B,EAAQkB,EAAOJ,GACzF,YqBr7GA,IAAA6oB,GAAA,WAAA,QAAAA,MA8BA,MAAAA,KA9Ba7oB,GAAA6oB,mBAAkBA,OrBg8GzBgV,sDAAsD,SAAS3+B,EAAQkB,EAAOJ,GACpF,YsBh8GA,IAAA89B,GAAA,WAsBC,QAAAA,KAfOl4B,KAAAkwB,aAAsB,EAkB9B,MAAAgI,KAzBa99B,GAAA89B,cAAaA,OtBq9GpBC,qDAAqD,SAAS7+B,EAAQkB,EAAOJ,GACnF,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IuB99GnF,IAAA+X,GAAA9e,EAA6B,oCAE7B,IAAA6tB,GAAA7tB,EAA6B,iCAY7B,IAAAouB,GAAA,SAAA7mB,GAAkCd,EAAA2nB,EAAA7mB,EAsBjC,SAAA6mB,KAEC7mB,EAAAxG,KAAA2F,KAEAA,MAAKmqB,WAAa,GAAI/oB,OAZvBZ,OAAA+B,eAAWmlB,EAAAnnB,UAAA,iBvB49GJiC,IuB59GP,WAEC,MAAOxC,MAAKmqB,WAAW7vB,QvB69GjBsI,WAAY,KACZC,aAAc,MuB98GrBrC,QAAA+B,eAAWmlB,EAAAnnB,UAAA,avBo9GJiC,IuBp9GP,WAEC,MAAOklB,GAAazY,WvBq9GdrM,WAAY,KACZC,aAAc,MuB78Gd6kB,GAAAnnB,UAAA63B,kBAAP,SAAyBC,GAExB,GAAIC,GAAwBt4B,KAAKu4B,uBAAuBF,EACxD,IAAIC,IAAmB,EACtB,MAAOt4B,MAAKmqB,WAAWmO,OACvB,OAAO,MAWF5Q,GAAAnnB,UAAAg4B,uBAAP,SAA8BF,GAQ7B,GAAIC,EACJ,IAAIE,EACJ,KAAK,GAAIz+B,GAAUA,EAAIiG,KAAKmqB,WAAW7vB,OAAQP,IAAK,CACnDy+B,EAAYx4B,KAAKmqB,WAAWpwB,EAC5B,IAAIy+B,EAAU5e,MAAQye,EACrB,MAAOC,EACRA,KAGD,OAAQ,EAQF5Q,GAAAnnB,UAAAod,MAAP,WAEC,GAAIA,GAAqB,GAAI+J,EAC7B,IAAIuI,GAAuBjwB,KAAKmqB,WAAW7vB,MAC3C,KAAK,GAAIP,GAAW,EAAGA,EAAIk2B,EAAel2B,IAAK,CAC9C,GAAI0+B,GAA2B,GAAItR,GAAAgK,SACnC,IAAIuH,GAA0B14B,KAAKmqB,WAAWpwB,EAC9C0+B,GAAe7e,KAAO8e,EAAc9e,IACpC6e,GAAe/mB,SAASgnB,EACxB/a,GAAMwM,WAAWpwB,GAAK0+B,EAEvB,MAAO9a,GAMD+J,GAAAnnB,UAAAyC,QAAP,WAEChD,KAAKmqB,WAAW7vB,OAAS,EArGZotB,GAAAzY,UAAmB,sBAuGlC,OAAAyY,IAzGkCtP,EAAA4B,UAArB5f,GAAAstB,aAAYA,IvB2jHtBiR,iCAAiC,iDAAiDxe,oCAAoC/a,YAAYw5B,iDAAiD,SAASt/B,EAAQkB,EAAOJ,GAC9M,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IwB5kHnF,IAAA+X,GAAA9e,EAA6B,oCAO7B,IAAAu/B,GAAA,SAAAh4B,GAA8Bd,EAAA84B,EAAAh4B,EAsB7B,SAAAg4B,KAECh4B,EAAAxG,KAAA2F,KAGAA,MAAKosB,OAAS,GAAIhrB,OAbnBZ,OAAA+B,eAAWs2B,EAAAt4B,UAAA,axB6kHJiC,IwB7kHP,WAEC,MAAOxC,MAAKosB,OAAO9xB,QxB8kHbsI,WAAY,KACZC,aAAc,MwBzjHdg2B,GAAAt4B,UAAAu4B,cAAP,SAAqBT,GAEpB,GAAIU,GAAoB/4B,KAAKg5B,mBAAmBX,EAChD,IAAIU,IAAe,EAClB,MAAO/4B,MAAKosB,OAAO2M,OACnB,OAAO,MAWFF,GAAAt4B,UAAAy4B,mBAAP,SAA0BX,GAQzB,GAAIU,EACJ,IAAI5I,EACJ,KAAK,GAAIp2B,GAAUA,EAAIiG,KAAKosB,OAAO9xB,OAAQP,IAAK,CAC/Co2B,EAAQnwB,KAAKosB,OAAOryB,EACpB,IAAIo2B,EAAMvW,MAAQye,EACjB,MAAOU,EACRA,KAGD,OAAQ,EAMFF,GAAAt4B,UAAAyC,QAAP,WAEChD,KAAKosB,OAAO9xB,OAAS,EAMtBkG,QAAA+B,eAAWs2B,EAAAt4B,UAAA,axB8jHJiC,IwB9jHP,WAEC,MAAOq2B,GAAS5pB,WxB+jHVrM,WAAY,KACZC,aAAc,MwBrpHPg2B,GAAA5pB,UAAmB,kBAuFlC,OAAA4pB,IAzF8BzgB,EAAA4B,UAAjB5f,GAAAy+B,SAAQA,IxB6pHlB1e,oCAAoC/a,YAAY65B,4DAA4D,SAAS3/B,EAAQkB,EAAOJ,GACvI,YyBnqHA,IAAAs4B,GAAA,WAAA,QAAAA,MAKeA,EAAAwG,SAAkB,UAKlBxG,GAAAC,SAAkB,UACjC,OAAAD,KAXat4B,GAAAs4B,oBAAmBA,OzBurH1ByG,+DAA+D,SAAS7/B,EAAQkB,EAAOJ,GAC7F,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I0BjsHnF,IAAAsL,GAAArS,EAA6B,gCAE7B,IAAA8/B,GAAA9/B,EAAmC,uDAKnC,IAAA+/B,GAAA,SAAAx4B,GAA2Cd,EAAAs5B,EAAAx4B,EAwF1C,SAAAw4B,KAECx4B,EAAAxG,KAAA2F,KAxFMA,MAAAs5B,UAAoB,IACpBt5B,MAAAu5B,gBAAyB,CAGzBv5B,MAAAw5B,cAAwB,IACxBx5B,MAAAy5B,mBAA6B,KAC7Bz5B,MAAA05B,YAAqB,CAErB15B,MAAA25B,YAA4B,GAAIv4B,MAEhCpB,MAAA45B,aAAwB,GAAIjuB,GAAAiB,QAE5B5M,MAAA65B,eAAyB,KAKhCr5B,OAAA+B,eAAW82B,EAAA94B,UAAA,W1BmsHJiC,I0BnsHP,WAEC,MAAOxC,MAAKs5B,W1BosHN72B,I0BjsHP,SAAmBC,GAElB,GAAI1C,KAAKs5B,WAAa52B,EACrB,MAED1C,MAAKs5B,UAAY52B,CAEjB1C,MAAKw5B,cAAgB,M1BgsHf52B,WAAY,KACZC,aAAc,M0B1rHrBrC,QAAA+B,eAAW82B,EAAA94B,UAAA,oB1BisHJiC,I0BjsHP,WAEC,MAAOxC,MAAKy5B,oB1BksHNh3B,I0B/rHP,SAA4BC,GAE3B,GAAI1C,KAAKy5B,oBAAsB/2B,EAC9B,MAED1C,MAAKy5B,mBAAqB/2B,CAE1B1C,MAAKw5B,cAAgB,M1B8rHf52B,WAAY,KACZC,aAAc,M0B5rHrBrC,QAAA+B,eAAW82B,EAAA94B,UAAA,iB1B+rHJiC,I0B/rHP,WAEC,GAAIxC,KAAKw5B,cACRx5B,KAAK85B,gBAEN,OAAO95B,MAAKu5B,iB1B+rHN32B,WAAY,KACZC,aAAc,M0B7rHrBrC,QAAA+B,eAAW82B,EAAA94B,UAAA,c1BgsHJiC,I0BhsHP,WAEC,GAAIxC,KAAKw5B,cACRx5B,KAAK85B,gBAEN,OAAO95B,MAAK45B,c1BgsHNh3B,WAAY,KACZC,aAAc,M0B9rHrBrC,QAAA+B,eAAW82B,EAAA94B,UAAA,a1BisHJiC,I0BjsHP,WAEC,GAAIxC,KAAKw5B,cACRx5B,KAAK85B,gBAEN,OAAO95B,MAAK+5B,a1BisHNn3B,WAAY,KACZC,aAAc,M0B5rHrBrC,QAAA+B,eAAW82B,EAAA94B,UAAA,a1BksHJiC,I0BlsHP,WAEC,MAAOxC,MAAK25B,a1BmsHN/2B,WAAY,KACZC,aAAc,M0BprHdw2B,GAAA94B,UAAAu5B,eAAP,WAEC95B,KAAKw5B,cAAgB,KAErBx5B,MAAK+5B,YAAe/5B,KAAuB,mBAAGA,KAAK05B,YAAc15B,KAAK05B,YAAc,CAEpF15B,MAAKu5B,gBAAkB,CACvBv5B,MAAK45B,aAAalrB,EAAI,CACtB1O,MAAK45B,aAAahrB,EAAI,CACtB5O,MAAK45B,aAAalN,EAAI,EAExB,OAAA2M,IA7G2CD,EAAAY,kBAA9B5/B,GAAAi/B,sBAAqBA,I1BwyH/BxhB,gCAAgCzY,UAAU66B,uDAAuD76B,YAAY86B,kEAAkE,SAAS5gC,EAAQkB,EAAOJ,GAC1M,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I2BpzHnF,IAAAsL,GAAArS,EAA6B,gCAM7B,IAAAolB,GAAAplB,EAAuC,8CACvC,IAAA6gC,GAAA7gC,EAAmC,yCACnC,IAAA8gC,GAAA9gC,EAAyC,mDAQzC,IAAA+gC,GAAA,SAAAx5B,GAA8Cd,EAAAs6B,EAAAx5B,EAiB7C,SAAAw5B,GAAYp5B,EAAaq5B,GAAA,GAAAA,QAAA,GAA4B,CAA5BA,EAAA,KAExBz5B,EAAAxG,KAAA2F,KAAM,uBAAwBiB,EAAM,EAEpCjB,MAAKu6B,aAAeH,EAAAI,yBAEpBx6B,MAAKy6B,cAAgBH,GAAgB,GAAI3uB,GAAAiB,SAMnCytB,EAAA95B,UAAA4Y,kBAAP,SAAyBzJ,EAAmB+K,EAAmCrB,EAAmC4G,GAEjH,GAAI0a,GAA2C16B,KAAK26B,QAAUjc,EAAAe,uBAAuBsY,OAAS3e,EAAc4N,wBAA0B5N,EAAcmN,wBACpJvG,GAAsB0W,iBAAiB12B,KAAMo6B,EAAAI,0BAA0BI,mBAAoBF,EAAkB5Y,MAE7G,IAAI+Y,GAA6BzhB,EAAcyH,yBAC/CzH,GAAc0H,oBAAoB+Z,EAAM,EAExC,IAAI3gC,GAAc,OAAS2gC,EAAO,IAAM7a,EAAsBuW,WAAa,IAAMmE,EAAoB,IAErG,IAAIjgB,EAAayF,aAAc,CAC9B,GAAI4S,GAA8B1Z,EAAcyH,yBAChD3mB,IAAQ,OAAS44B,EAAQ,IAAM+H,EAAO,IAAM7a,EAAsBsW,eAAiB,IACnFp8B,IAAQ,OAAS8lB,EAAsBO,eAAiB,QAAUuS,EAAQ,QAAU9S,EAAsBO,eAAiB,SAE5HnH,EAAc0hB,sBAAsBD,EAEpC3gC,IAAQ,OAAS2gC,EAAO,IAAMA,EAAO,IAAM7a,EAAsBuW,WAAa,IAC9Er8B,IAAQ,OAAS8lB,EAAsBK,eAAiB,QAAUwa,EAAO,IAAM7a,EAAsBK,eAAiB,QACtH,OAAOnmB,GAMDmgC,GAAA95B,UAAA8a,kBAAP,SAAyB0f,GAExB,MAAmCA,GAAS1f,kBAAkBrb,MAMxDq6B,GAAA95B,UAAA0jB,gCAAP,SAAuC+W,GAEtC,GAAIC,GAA4BD,EAAMX,EAAyBa,sBAC/D,KAAKD,EACJ,KAAM,IAAIhhC,OAAM,eAAiBogC,EAAyBa,sBAAwB,aAEnFl7B,MAAKm7B,UAAU,GAAKF,EAAiBvsB,EAAE,CACvC1O,MAAKm7B,UAAU,GAAKF,EAAiBrsB,EAAE,CACvC5O,MAAKm7B,UAAU,GAAKF,EAAiBvO,EAAE,EA7D1B2N,GAAAa,sBAA+B,sBA+D9C,OAAAb,IAxE8CF,EAAAiB,iBAAjChhC,GAAAigC,yBAAwBA,I3Bu2HlCgB,8CAA8C,8DAA8DC,yCAAyC,yDAAyDC,mDAAmD,mEAAmE1jB,gCAAgCzY,YAAYo8B,iEAAiE,SAASliC,EAAQkB,EAAOJ,GAC5c,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I4B53HnF,IAAAsL,GAAArS,EAA6B,gCAM7B,IAAAolB,GAAAplB,EAAuC,8CACvC,IAAA6gC,GAAA7gC,EAAmC,yCACnC,IAAAmiC,GAAAniC,EAAyC,kDAGzC,IAAA08B,GAAA18B,EAAsC,sCAItC,IAAAoiC,GAAA,SAAA76B,GAA6Cd,EAAA27B,EAAA76B,EA0B5C,SAAA66B,GAAYz6B,EAAa06B,EAA8BC,GAA9B,GAAAD,QAAA,GAA4B,CAA5BA,EAAA,KAA8B,GAAAC,QAAA,GAAwB,CAAxBA,EAAA,KAEtD/6B,EAAAxG,KAAA2F,KAAM,sBAAuBiB,EAAM,EAEnCjB,MAAKu6B,aAAekB,EAAAI,wBAEpB77B,MAAK87B,eAAiBH,GAAgB,GAAIhwB,GAAAiB,QAC1C5M,MAAK+7B,WAAaH,GAAY,GAAIjwB,GAAAiB,SAM5B8uB,EAAAn7B,UAAA4Y,kBAAP,SAAyBzJ,EAAmB+K,EAAmCrB,EAAmC4G,GAEjH,GAAIgc,GAAsCh8B,KAAK26B,QAAUjc,EAAAe,uBAAuBsY,OAAS3e,EAAc4N,wBAA0B5N,EAAcmN,wBAC/IvG,GAAsB0W,iBAAiB12B,KAAMy7B,EAAAI,yBAAyBI,qBAAsBD,EAAala,MAEzG,IAAIoa,GAAkCl8B,KAAK26B,QAAUjc,EAAAe,uBAAuBsY,OAAS3e,EAAc4N,wBAA0B5N,EAAcmN,wBAC3IvG,GAAsB0W,iBAAiB12B,KAAMy7B,EAAAI,yBAAyBM,iBAAkBD,EAASpa,MAEjG,IAAI+Y,GAA6BzhB,EAAcyH,yBAC/C,IAAIub,GAAiC,GAAIpG,GAAAI,sBAAsByE,EAAKxE,QAASwE,EAAK/Y,MAAO,EACzF,IAAIua,GAA+B,GAAIrG,GAAAI,sBAAsByE,EAAKxE,QAASwE,EAAK/Y,MAAO,EACvF,IAAIwa,GAAkC,GAAItG,GAAAI,sBAAsByE,EAAKxE,QAASwE,EAAK/Y,MAAO,EAC1F1I,GAAc0H,oBAAoB+Z,EAAM,EACxC,IAAI/H,GAA8B1Z,EAAcyH,yBAChD,IAAI0b,GAAiC,GAAIvG,GAAAI,sBAAsBtD,EAAMuD,QAASvD,EAAMhR,MACpF1I,GAAc0hB,sBAAsBD,EAEpC,IAAI3gC,GAAc,EAClBA,IAAQ,OAASkiC,EAAW,IAAMpc,EAAsBiB,eAAiB,IAAMjB,EAAsBwW,WAAa,IAClHt8B,IAAQ,OAASmiC,EAAS,IAAMrc,EAAsBwW,WAAa,IAAMxW,EAAsBwW,WAAa,IAE5Gt8B,IAAQ,OAASoiC,EAAY,IAAMtc,EAAsBwW,WAAa,IAAM4F,EAAW,IACvFliC,IAAQ,OAASoiC,EAAY,IAAMA,EAAY,IAAMtc,EAAsBsW,eAAiB,IAC5Fp8B,IAAQ,OAASqiC,EAAW,QAAUD,EAAY,IAAMN,EAAe,IACvE9hC,IAAQ,OAAS8lB,EAAsBK,eAAiB,QAAUkc,EAAW,QAAUvc,EAAsBK,eAAiB,QAC9HnmB,IAAQ,OAASqiC,EAAW,QAAUF,EAAS,IAAMH,EAAW,IAChEhiC,IAAQ,OAAS8lB,EAAsBK,eAAiB,QAAUkc,EAAW,QAAUvc,EAAsBK,eAAiB,QAE9H,IAAI5F,EAAayF,aAAc,CAC9BhmB,GAAQ,OAASmiC,EAAS,IAAMrc,EAAsBwW,WAAa,IAAMxW,EAAsBsW,eAAiB,IAChHp8B,IAAQ,OAASoiC,EAAY,IAAMtc,EAAsBiB,eAAiB,IAAMob,EAAS,IACzFniC,IAAQ,OAASoiC,EAAY,IAAMtc,EAAsBsW,eAAiB,IAAMgG,EAAY,IAC5FpiC,IAAQ,OAASqiC,EAAW,QAAUP,EAAe,IAAMM,EAAY,IACvEpiC,IAAQ,OAAS8lB,EAAsBO,eAAiB,QAAUgc,EAAW,QAAUvc,EAAsBO,eAAiB,QAC9HrmB,IAAQ,OAASqiC,EAAW,QAAUL,EAAW,IAAMG,EAAS,IAChEniC,IAAQ,OAAS8lB,EAAsBO,eAAiB,QAAUgc,EAAW,QAAUvc,EAAsBO,eAAiB,SAG/H,MAAOrmB,GAMDwhC,GAAAn7B,UAAA8a,kBAAP,SAAyB0f,GAExB,MAAkCA,GAAS1f,kBAAkBrb,MAMvD07B,GAAAn7B,UAAA0jB,gCAAP,SAAuC+W,GAEtC,GAAIwB,GAAyBxB,EAAMU,EAAwBe,wBAC3D,KAAKD,EACJ,KAAM,IAAIviC,OAAM,eAAiByhC,EAAwBe,wBAA0B,aAEpF,IAAIC,GAAqB1B,EAAMU,EAAwBiB,oBACvD,KAAKD,EACJ,KAAM,IAAIziC,OAAM,eAAiByhC,EAAwBiB,oBAAsB,aAEhF38B,MAAKm7B,UAAU,GAAKqB,EAAc9tB,CAClC1O,MAAKm7B,UAAU,GAAKqB,EAAc5tB,CAClC5O,MAAKm7B,UAAU,GAAKqB,EAAc9P,CAClC1sB,MAAKm7B,UAAU,GAAKuB,EAAUhuB,CAC9B1O,MAAKm7B,UAAU,GAAKuB,EAAU9tB,CAC9B5O,MAAKm7B,UAAU,GAAKuB,EAAUhQ,EA/FjBgP,GAAAe,wBAAiC,uBAMjCf,GAAAiB,oBAA6B,mBA2F5C,OAAAjB,IA5G6CvB,EAAAiB,iBAAhChhC,GAAAshC,wBAAuBA,I5Bg9HjCL,8CAA8C,8DAA8DC,yCAAyC,yDAAyDsB,kDAAkD,kEAAkE9F,sCAAsC,sDAAsDjf,gCAAgCzY,YAAYy9B,+DAA+D,SAASvjC,EAAQkB,EAAOJ,GACpiB,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I6B/9HnF,IAAAqe,GAAAplB,EAAuC,8CACvC,IAAA6gC,GAAA7gC,EAAmC,yCACnC,IAAAwjC,GAAAxjC,EAAuC,gDAQvC,IAAAyjC,GAAA,SAAAl8B,GAA2Cd,EAAAg9B,EAAAl8B,EAQ1C,SAAAk8B,GAAYC,GAAA,GAAAA,QAAA,GAA6B,CAA7BA,EAAA,KAEXn8B,EAAAxG,KAAA2F,KAAM,oBAAqB0e,EAAAe,uBAAuBsY,OAAQ,EAAG,EAE7D/3B,MAAKu6B,aAAeuC,EAAAG,sBAEpBj9B,MAAKk9B,gBAAkBF,EAMjBD,EAAAx8B,UAAA4Y,kBAAP,SAAyBzJ,EAAmB+K,EAAmCrB,EAAmC4G,GAEjH,GAAImd,GAA+C/jB,EAAc4N,uBACjEhH,GAAsB0W,iBAAiB12B,KAAM88B,EAAAG,uBAAuBG,aAAcD,EAAuBrb,MACzG1I,GAAc4N,uBACd5N,GAAc4N,uBACd5N,GAAc4N,uBAEd,IAAI6T,GAA6BzhB,EAAcyH,yBAE/C,IAAI3mB,GAAc,OAAS2gC,EAAO,QAAU7a,EAAsBS,qBAAuB,IAAM0c,EAAyB,KAClH,OAASnd,EAAsBS,qBAAuB,QAAUoa,EAAO,IAE7E,IAAIwC,EACJ,KAAK,GAAItjC,GAAW,EAAGA,EAAIimB,EAAsBkW,kBAAkB57B,OAAQP,IAAK,CAC/EsjC,EAAwBrd,EAAsBkW,kBAAkBn8B,EAChEG,IAAQ,OAAS2gC,EAAO,QAAUwC,EAAwB,IAAMF,EAAyB,KACvF,OAASE,EAAwB,QAAUA,EAAwB,KAGtE,MAAOnjC,GAMD6iC,GAAAx8B,UAAA8a,kBAAP,SAAyB0f,GAExB,MAAgCA,GAAS1f,kBAAkBrb,MAMrD+8B,GAAAx8B,UAAAif,0BAAP,SAAiCwF,GAEhCA,EAAqBsY,aAAe,KAEtC,OAAAP,IA1D2C5C,EAAAiB,iBAA9BhhC,GAAA2iC,sBAAqBA,I7B2gI/B1B,8CAA8C,8DAA8DC,yCAAyC,yDAAyDiC,gDAAgD,kEAAkEC,2DAA2D,SAASlkC,EAAQkB,EAAOJ,GACtZ,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I8B/hInF,IAAAo9B,GAAAnkC,EAAiC,sCAGjC,IAAAokC,GAAApkC,EAAsC,uCAGtC,IAAAolB,GAAAplB,EAAuC,8CACvC,IAAA6gC,GAAA7gC,EAAmC,yCACnC,IAAAqkC,GAAArkC,EAAoC,4CAQpC,IAAAskC,GAAA,SAAA/8B,GAAuCd,EAAA69B,EAAA/8B,EA6CtC,SAAA+8B,GAAY38B,EAAa48B,EAA+BC,EAA2BC,EAA2BC,EAA2BC,EAAkCC,EAAgCC,EAA0BC,GAA5M,GAAAP,QAAA,GAA6B,CAA7BA,EAAA,KAA+B,GAAAC,QAAA,GAAyB,CAAzBA,EAAA,KAA2B,GAAAC,QAAA,GAAyB,CAAzBA,EAAA,MAA2B,GAAAC,QAAA,GAAyB,CAAzBA,EAAA,MAA2B,GAAAC,QAAA,GAAgC,CAAhCA,EAAA,KAAkC,GAAAC,QAAA,GAA8B,CAA9BA,EAAA,KAAgC,GAAAC,QAAA,GAAwB,CAAxBA,EAAA,EAA0B,GAAAC,QAAA,GAAqB,CAArBA,EAAA,EAEpOv9B,EAAAxG,KAAA2F,KAAM,gBAAiBiB,EAAO48B,GAAkBC,EAAa,GAAK,EAAGJ,EAAA9e,qBAAqB8B,eAE1F1gB,MAAKu6B,aAAeoD,EAAAU,kBAEpBr+B,MAAKs+B,iBAAmBT,CACxB79B,MAAKu+B,aAAeT,CACpB99B,MAAKw+B,YAAcT,CACnB/9B,MAAKy+B,YAAcT,CAEnBh+B,MAAK0+B,aAAeT,GAAc,GAAIR,GAAAkB,cACtC3+B,MAAK4+B,WAAaV,GAAY,GAAIT,GAAAkB,cAClC3+B,MAAK6+B,gBAAkBV,CACvBn+B,MAAK8+B,aAAeV,EAMdR,EAAAr9B,UAAA4Y,kBAAP,SAAyBzJ,EAAmB+K,EAAmCrB,EAAmC4G,GAEjH,GAAI9lB,GAAc,EAClB,IAAIwV,EAAO2R,sBAAuB,CACjC,GAAIwZ,GAA6BzhB,EAAcyH,yBAE/C,IAAI7gB,KAAKw+B,YAAa,CACrB,GAAIO,GAAmC3lB,EAAc4N,uBACrDhH,GAAsB0W,iBAAiB12B,KAAM29B,EAAAU,mBAAmBW,YAAaD,EAAWjd,MAExF1I,GAAc0H,oBAAoB+Z,EAAM,EACxC,IAAIoE,GAA4B7lB,EAAc8lB,yBAC9C9lB,GAAc0hB,sBAAsBD,EAEpC3gC,IAAQ,OAAS+kC,EAAM,IAAMjf,EAAsBuW,WAAa,IAAMwI,EAAa,MAEnF,IAAI/+B,KAAKy+B,YACRvkC,GAAQ,OAAS+kC,EAAM,IAAMA,EAAM,IAAMF,EAAa,MAEvD7kC,IAAQ,OAAS+kC,EAAM,IAAMA,EAAM,KAGpC,GAAIj/B,KAAKs+B,iBAAkB,CAC1B,GAAIa,GAA8Cn/B,KAAK26B,QAAUjc,EAAAe,uBAAuBsY,OAAS3e,EAAc4N,wBAA0B5N,EAAcmN,wBACvJ,IAAI6Y,GAA8Cp/B,KAAK26B,QAAUjc,EAAAe,uBAAuBsY,OAAS3e,EAAc4N,wBAA0B5N,EAAcmN,wBAEvJvG,GAAsB0W,iBAAiB12B,KAAM29B,EAAAU,mBAAmBgB,uBAAwBF,EAAqBrd,MAC7G9B,GAAsB0W,iBAAiB12B,KAAM29B,EAAAU,mBAAmBiB,uBAAwBF,EAAqBtd,MAE7G5nB,IAAQ,OAAS2gC,EAAO,IAAMuE,EAAuB,KAAOp/B,KAAKw+B,YAAaS,EAAMjf,EAAsBwW,YAAc,IACxHt8B,IAAQ,OAAS2gC,EAAO,IAAMA,EAAO,IAAMsE,EAAuB,IAClEjlC,IAAQ,OAAS8lB,EAAsBY,eAAiB,IAAMia,EAAO,IAAM7a,EAAsBY,eAAiB,KAGnH,GAAI5gB,KAAKu+B,aAAc,CACtB,GAAIgB,GAA0Cv/B,KAAK26B,QAAUjc,EAAAe,uBAAuBC,aAAetG,EAAcmN,yBAA2BnN,EAAc4N,uBAC1J,IAAIwY,GAA0Cx/B,KAAK26B,QAAUjc,EAAAe,uBAAuBC,aAAetG,EAAcmN,yBAA2BnN,EAAc4N,uBAE1JhH,GAAsB0W,iBAAiB12B,KAAM29B,EAAAU,mBAAmBoB,mBAAoBF,EAAiBzd,MACrG9B,GAAsB0W,iBAAiB12B,KAAM29B,EAAAU,mBAAmBqB,mBAAoBF,EAAiB1d,MAErG5nB,IAAQ,OAAS2gC,EAAO,IAAM2E,EAAmB,KAAOx/B,KAAKw+B,YAAaS,EAAMjf,EAAsBwW,YAAc,IACpHt8B,IAAQ,OAAS2gC,EAAO,IAAMA,EAAO,IAAM0E,EAAmB,IAC9DrlC,IAAQ,OAAS8lB,EAAsBmB,eAAiB,IAAM0Z,EAAO,IAAM7a,EAAsBmB,eAAiB,MAIpH,MAAOjnB,GAMD0jC,GAAAr9B,UAAA8a,kBAAP,SAAyB0f,GAExB,MAA4BA,GAAS1f,kBAAkBrb,MAMjD49B,GAAAr9B,UAAAif,0BAAP,SAAiCwF,GAEhC,GAAIhlB,KAAKs+B,iBACRtZ,EAAqBrE,gBAAkB,IACxC,IAAI3gB,KAAKu+B,aACRvZ,EAAqB9D,gBAAkB,KAMlC0c,GAAAr9B,UAAA0jB,gCAAP,SAAuC+W,GAEtC,GAAIiD,GAA4BjD,EAAM4C,EAAkB+B,2BACxD,KAAK1B,EACJ,KAAK,IAAKhkC,OAAM,eAAiB2jC,EAAkB+B,2BAA6B,aAEjF,IAAIzB,GAA0BlD,EAAM4C,EAAkBgC,yBACtD,KAAK1B,EACJ,KAAK,IAAKjkC,OAAM,eAAiB2jC,EAAkBgC,yBAA2B,aAE/E,IAAI7lC,GAAW,CAEf,KAAKiG,KAAKw+B,YAAa,CAEtB,GAAIx+B,KAAKs+B,iBAAkB,CAC1Bt+B,KAAKm7B,UAAUphC,KAAOkkC,EAAW4B,aACjC7/B,MAAKm7B,UAAUphC,KAAOkkC,EAAW6B,eACjC9/B,MAAKm7B,UAAUphC,KAAOkkC,EAAW8B,cACjC//B,MAAKm7B,UAAUphC,KAAOkkC,EAAW+B,eACjChgC,MAAKm7B,UAAUphC,KAAOmkC,EAAS2B,cAAgB5B,EAAW4B,aAC1D7/B,MAAKm7B,UAAUphC,KAAOmkC,EAAS4B,gBAAkB7B,EAAW6B,eAC5D9/B,MAAKm7B,UAAUphC,KAAOmkC,EAAS6B,eAAiB9B,EAAW8B,cAC3D//B,MAAKm7B,UAAUphC,KAAOmkC,EAAS8B,gBAAkB/B,EAAW+B,gBAI7D,GAAIhgC,KAAKu+B,aAAc,CACtBv+B,KAAKm7B,UAAUphC,KAAOkkC,EAAWgC,UAAU,GAC3CjgC,MAAKm7B,UAAUphC,KAAOkkC,EAAWiC,YAAY,GAC7ClgC,MAAKm7B,UAAUphC,KAAOkkC,EAAWkC,WAAW,GAC5CngC,MAAKm7B,UAAUphC,KAAOkkC,EAAWmC,YAAY,GAC7CpgC,MAAKm7B,UAAUphC,MAAQmkC,EAAS+B,UAAYhC,EAAWgC,WAAW,GAClEjgC,MAAKm7B,UAAUphC,MAAQmkC,EAASgC,YAAcjC,EAAWiC,aAAa,GACtElgC,MAAKm7B,UAAUphC,MAAQmkC,EAASiC,WAAalC,EAAWkC,YAAY,GACpEngC,MAAKm7B,UAAUphC,MAAQmkC,EAASkC,YAAcnC,EAAWmC,aAAa,SAEjE,CAEN,GAAIpgC,KAAKs+B,iBAAkB,CAC1Bt+B,KAAKm7B,UAAUphC,MAAQkkC,EAAW4B,cAAgB3B,EAAS2B,eAAe,CAC1E7/B,MAAKm7B,UAAUphC,MAAQkkC,EAAW6B,gBAAkB5B,EAAS4B,iBAAiB,CAC9E9/B,MAAKm7B,UAAUphC,MAAQkkC,EAAW8B,eAAiB7B,EAAS6B,gBAAgB,CAC5E//B,MAAKm7B,UAAUphC,MAAQkkC,EAAW+B,gBAAkB9B,EAAS8B,iBAAiB,CAC9EhgC,MAAKm7B,UAAUphC,MAAQkkC,EAAW4B,cAAgB3B,EAAS2B,eAAe,CAC1E7/B,MAAKm7B,UAAUphC,MAAQkkC,EAAW6B,gBAAkB5B,EAAS4B,iBAAiB,CAC9E9/B,MAAKm7B,UAAUphC,MAAQkkC,EAAW8B,eAAiB7B,EAAS6B,gBAAgB,CAC5E//B,MAAKm7B,UAAUphC,MAAQkkC,EAAW+B,gBAAkB9B,EAAS8B,iBAAiB,EAI/E,GAAIhgC,KAAKu+B,aAAc,CACtBv+B,KAAKm7B,UAAUphC,MAAQkkC,EAAWgC,UAAY/B,EAAS+B,YAAY,IAAI,EACvEjgC,MAAKm7B,UAAUphC,MAAQkkC,EAAWiC,YAAchC,EAASgC,cAAc,IAAI,EAC3ElgC,MAAKm7B,UAAUphC,MAAQkkC,EAAWkC,WAAajC,EAASiC,aAAa,IAAI,EACzEngC,MAAKm7B,UAAUphC,MAAQkkC,EAAWmC,YAAclC,EAASkC,cAAc,IAAI,EAC3EpgC,MAAKm7B,UAAUphC,MAAQkkC,EAAWgC,UAAY/B,EAAS+B,YAAY,IAAI,EACvEjgC,MAAKm7B,UAAUphC,MAAQkkC,EAAWiC,YAAchC,EAASgC,cAAc,IAAI,EAC3ElgC,MAAKm7B,UAAUphC,MAAQkkC,EAAWkC,WAAajC,EAASiC,aAAa,IAAI,EACzEngC,MAAKm7B,UAAUphC,MAAQkkC,EAAWmC,YAAclC,EAASkC,cAAc,IAAI,KA3KhExC,GAAA+B,2BAAoC,0BAMpC/B,GAAAgC,yBAAkC,wBA0KjD,OAAAhC,IAxMuCzD,EAAAiB,iBAA1BhhC,GAAAwjC,kBAAiBA,I9B2rI3ByC,uCAAuC,uDAAuDhF,8CAA8C,8DAA8DC,yCAAyC,yDAAyDgF,4CAA4C,4DAA4DC,sCAAsCnhC,YAAYohC,4DAA4D,SAASlnC,EAAQkB,EAAOJ,GAC7hB,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I+B/sInF,IAAAq9B,GAAApkC,EAAsC,uCAEtC,IAAAolB,GAAAplB,EAAuC,8CACvC,IAAA6gC,GAAA7gC,EAAmC,yCACnC,IAAAmnC,GAAAnnC,EAAqC,6CAQrC,IAAAonC,GAAA,SAAA7/B,GAAwCd,EAAA2gC,EAAA7/B,EAkBvC,SAAA6/B,GAAYC,EAA6BC,EAA6BC,GAA1D,GAAAF,QAAA,GAA2B,CAA3BA,EAAA,KAA6B,GAAAC,QAAA,GAA2B,CAA3BA,EAAA,KAA6B,GAAAC,QAAA,GAAsB,CAAtBA,EAAA,MAErEhgC,EAAAxG,KAAA2F,KAAM,iBAAkB0e,EAAAe,uBAAuBI,cAAgB8gB,GAAgBC,EAAe,EAAI,EAAGlD,EAAA9e,qBAAqB4B,cAE1HxgB,MAAKu6B,aAAekG,EAAAK,mBAEpB9gC,MAAK+gC,eAAiBJ,CACtB3gC,MAAKghC,eAAiBJ,CACtB5gC,MAAKihC,SAAWJ,EAOVH,EAAAngC,UAAA4Y,kBAAP,SAAyBzJ,EAAmB+K,EAAmCrB,EAAmC4G,GAGjH,GAAI9lB,GAAc,EAClB,IAAI8F,KAAKghC,eAAgB,CACxB,GAAIE,GAA0C9nB,EAAcmN,wBAC5DvG,GAAsB0W,iBAAiB12B,KAAMygC,EAAAK,oBAAoBK,sBAAuBD,EAAkBpf,MAE1G,IAAI+E,GAA8BzN,EAAcyH,yBAChDzH,GAAc0H,oBAAoB+F,EAAO,EACzC,IAAIiM,GAA8B1Z,EAAcyH,yBAChDzH,GAAc0H,oBAAoBgS,EAAO,EACzC,IAAIsO,GAA8BhoB,EAAcyH,yBAEhD,IAAIwgB,EACJ,IAAI5mB,EAAa6iB,aAAc,CAC9BlkB,EAAc0H,oBAAoBsgB,EAAO,EACzCC,GAAQjoB,EAAcyH,0BAGvBzH,EAAc0hB,sBAAsBjU,EACpCzN,GAAc0hB,sBAAsBhI,EACpC,IAAIrY,EAAa6iB,aAChBlkB,EAAc0hB,sBAAsBsG,EAErC,IAAIj8B,GAAa6a,EAAsBkW,kBAAkB57B,MACzD,IAAIP,EAGJG,IAAQ,OAAS2sB,EAAQ,IAAM7G,EAAsBM,gBAAkB,IACvEpmB,IAAQ,OAAS2sB,EAAQ,MAAQ7G,EAAsBiB,eAAiB,IACxE/mB,IAAQ,OAASknC,EAAQ,IAAMphB,EAAsBM,gBAAkB,IACvEpmB,IAAQ,OAASknC,EAAQ,MAAQF,EAAoB,MACrDhnC,IAAQ,OAASknC,EAAQ,MAAQF,EAAoB,MACrDhnC,IAAQ,OAAS44B,EAAQ,MAAQ9S,EAAsBM,gBAAkB,IACzEpmB,IAAQ,OAAS44B,EAAQ,MAAQsO,EAAQ,MACzClnC,IAAQ,OAAS44B,EAAQ,MAAQsO,EAAQ,MAEzC,IAAI3mB,EAAa6iB,aAChBpjC,GAAQ,OAASmnC,EAAQ,QAAUrhB,EAAsBK,eAAiB,QAAUwG,EAAQ,SACxF,CACJ3sB,GAAQ,OAAS8lB,EAAsBS,qBAAuB,QAAUT,EAAsBS,qBAAuB,QAAUoG,EAAQ,IACvI,KAAK9sB,EAAI,EAAGA,EAAIoL,EAAKpL,IACpBG,GAAQ,OAAS8lB,EAAsBkW,kBAAkBn8B,GAAK,QAAUimB,EAAsBkW,kBAAkBn8B,GAAK,IAAM8sB,EAAQ,KAIrI3sB,GAAQ,OAAS2sB,EAAQ,IAAM7G,EAAsBM,gBAAkB,IACvEpmB,IAAQ,OAAS2sB,EAAQ,MAAQqa,EAAoB,MACrDhnC,IAAQ,OAAS2sB,EAAQ,MAAQqa,EAAoB,MACrDhnC,IAAQ,OAAS44B,EAAQ,IAAM9S,EAAsBM,gBAAkB,IACvEpmB,IAAQ,OAAS44B,EAAQ,MAAQ9S,EAAsBiB,eAAiB,IACxE/mB,IAAQ,OAASknC,EAAQ,IAAMphB,EAAsBM,gBAAkB,IACvEpmB,IAAQ,OAASknC,EAAQ,MAAQva,EAAQ,MACzC3sB,IAAQ,OAASknC,EAAQ,MAAQva,EAAQ,MAEzC,IAAIpM,EAAa6iB,aAChBpjC,GAAQ,OAASmnC,EAAQ,QAAUA,EAAQ,QAAUxa,EAAQ,SACzD,CACJ3sB,GAAQ,OAAS8lB,EAAsBS,qBAAuB,QAAUT,EAAsBS,qBAAuB,QAAUoG,EAAQ,IACvI,KAAK9sB,EAAI,EAAGA,EAAIoL,EAAKpL,IACpBG,GAAQ,OAAS8lB,EAAsBkW,kBAAkBn8B,GAAK,QAAUimB,EAAsBkW,kBAAkBn8B,GAAK,IAAM8sB,EAAQ,KAIrI3sB,GAAQ,OAAS44B,EAAQ,IAAM9S,EAAsBM,gBAAkB,IACvEpmB,IAAQ,OAAS44B,EAAQ,MAAQoO,EAAoB,MACrDhnC,IAAQ,OAAS44B,EAAQ,MAAQoO,EAAoB,MACrDhnC,IAAQ,OAAS2sB,EAAQ,IAAM7G,EAAsBM,gBAAkB,IACvEpmB,IAAQ,OAAS2sB,EAAQ,MAAQiM,EAAQ,MACzC54B,IAAQ,OAAS2sB,EAAQ,MAAQiM,EAAQ,MACzC54B,IAAQ,OAASknC,EAAQ,IAAMphB,EAAsBM,gBAAkB,IACvEpmB,IAAQ,OAASknC,EAAQ,MAAQphB,EAAsBiB,eAAiB,IAExE,IAAIxG,EAAa6iB,aAAc,CAC9BpjC,GAAQ,OAASmnC,EAAQ,QAAUA,EAAQ,QAAUxa,EAAQ,IAC7D3sB,IAAQ,OAASmnC,EAAQ,QAAUA,EAAQ,QAAUrhB,EAAsBK,eAAiB,QAC5FnmB,IAAQ,OAAS8lB,EAAsBS,qBAAuB,QAAU4gB,EAAQ,QAAUrhB,EAAsBS,qBAAuB,aACjI,CACNvmB,GAAQ,OAAS8lB,EAAsBS,qBAAuB,QAAUT,EAAsBS,qBAAuB,QAAUoG,EAAQ,IACvI,KAAK9sB,EAAI,EAAGA,EAAIoL,EAAKpL,IACpBG,GAAQ,OAAS8lB,EAAsBkW,kBAAkBn8B,GAAK,QAAUimB,EAAsBkW,kBAAkBn8B,GAAK,IAAM8sB,EAAQ,MAKtI,GAAI7mB,KAAK+gC,eAAgB,CACxB,GAAI5K,GAA0C/c,EAAcmN,wBAC5DvG,GAAsB0W,iBAAiB12B,KAAMygC,EAAAK,oBAAoBQ,sBAAuBnL,EAAkBrU,MAC1G5nB,IAAQ,OAAS8lB,EAAsBS,qBAAuB,QAAU0V,EAAoB,IAAMnW,EAAsBS,qBAAuB,SAGhJ,MAAOvmB,GAMDwmC,GAAAngC,UAAA8a,kBAAP,SAAyB0f,GAExB,MAA6BA,GAAS1f,kBAAkBrb,MAE1D,OAAA0gC,IAvIwCvG,EAAAiB,iBAA3BhhC,GAAAsmC,mBAAkBA,I/B4zI5BL,uCAAuC,uDAAuDhF,8CAA8C,8DAA8DC,yCAAyC,yDAAyDiG,6CAA6C;GAA+DC,kEAAkE,SAASloC,EAAQkB,EAAOJ,GACrf,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IgC90InF,IAAAo9B,GAAAnkC,EAAiC,sCAEjC,IAAAokC,GAAApkC,EAAsC,uCAGtC,IAAAolB,GAAAplB,EAAuC,8CACvC,IAAA6gC,GAAA7gC,EAAmC,yCACnC,IAAAmoC,GAAAnoC,EAAyC,mDAQzC,IAAAooC,GAAA,SAAA7gC,GAA8Cd,EAAA2hC,EAAA7gC,EAgB7C,SAAA6gC,GAAYzgC,EAAa48B,EAA+BC,EAA4B6D,GAA3D,GAAA9D,QAAA,GAA6B,CAA7BA,EAAA,KAA+B,GAAAC,QAAA,GAA0B,CAA1BA,EAAA,MAA4B,GAAA6D,QAAA,GAAkC,CAAlCA,EAAA,KAEnF9gC,EAAAxG,KAAA2F,KAAM,uBAAwBiB,EAAO48B,GAAkBC,EAAa,EAAI,EAAGJ,EAAA9e,qBAAqB8B,eAEhG1gB,MAAKu6B,aAAekH,EAAAG,yBAEpB5hC,MAAKs+B,iBAAmBT,CACxB79B,MAAKu+B,aAAeT,CACpB99B,MAAK6hC,eAAiBF,GAAgB,GAAIlE,GAAAkB,eAMpC+C,EAAAnhC,UAAA4Y,kBAAP,SAAyBzJ,EAAmB+K,EAAmCrB,EAAmC4G,GAEjH,GAAI9lB,GAAc,EAClB,IAAIwV,EAAO2R,sBAAuB,CAEjC,GAAIrhB,KAAKs+B,iBAAkB,CAC1B,GAAIwD,GAAyC9hC,KAAK26B,QAAUjc,EAAAe,uBAAuBsY,OAAS3e,EAAc4N,wBAA0B5N,EAAcmN,wBAClJvG,GAAsB0W,iBAAiB12B,KAAMyhC,EAAAG,0BAA0BG,iBAAkBD,EAAgBhgB,MAEzG5nB,IAAQ,OAAS8lB,EAAsBY,eAAiB,IAAMkhB,EAAkB,IAAM9hB,EAAsBY,eAAiB,KAG9H,GAAI5gB,KAAKu+B,aAAc,CACtB,GAAIyD,GAAqChiC,KAAK26B,QAAUjc,EAAAe,uBAAuBC,aAAetG,EAAcmN,yBAA2BnN,EAAc4N,uBACrJhH,GAAsB0W,iBAAiB12B,KAAMyhC,EAAAG,0BAA0BK,aAAcD,EAAYlgB,MAEjG5nB,IAAQ,OAAS8lB,EAAsBmB,eAAiB,IAAM6gB,EAAc,IAAMhiB,EAAsBmB,eAAiB,MAI3H,MAAOjnB,GAMDwnC,GAAAnhC,UAAAif,0BAAP,SAAiCwF,GAEhC,GAAIhlB,KAAKs+B,iBACRtZ,EAAqBrE,gBAAkB,IACxC,IAAI3gB,KAAKu+B,aACRvZ,EAAqB9D,gBAAkB,KAMlCwgB,GAAAnhC,UAAA0jB,gCAAP,SAAuC+W,GAEtC,GAAI2G,GAA8B3G,EAAM0G,EAAyBQ,6BACjE,KAAKP,EACJ,KAAK,IAAK1nC,OAAM,eAAiBynC,EAAyBQ,6BAA+B,aAE1F,IAAInoC,GAAW,CAGf,IAAIiG,KAAKs+B,iBAAkB,CAC1Bt+B,KAAKm7B,UAAUphC,KAAO4nC,EAAa9B,aACnC7/B,MAAKm7B,UAAUphC,KAAO4nC,EAAa7B,eACnC9/B,MAAKm7B,UAAUphC,KAAO4nC,EAAa5B,cACnC//B,MAAKm7B,UAAUphC,KAAO4nC,EAAa3B,gBAGpC,GAAIhgC,KAAKu+B,aAAc,CACtBv+B,KAAKm7B,UAAUphC,KAAO4nC,EAAa1B,UAAU,GAC7CjgC,MAAKm7B,UAAUphC,KAAO4nC,EAAazB,YAAY,GAC/ClgC,MAAKm7B,UAAUphC,KAAO4nC,EAAaxB,WAAW,GAC9CngC,MAAKm7B,UAAUphC,KAAO4nC,EAAavB,YAAY,KAzEnCsB,GAAAQ,6BAAsC,4BA8ErD,OAAAR,IA5F8CvH,EAAAiB,iBAAjChhC,GAAAsnC,yBAAwBA,IhCg5IlCrB,uCAAuC,uDAAuDhF,8CAA8C,8DAA8DC,yCAAyC,yDAAyD6G,mDAAmD,mEAAmE5B,sCAAsCnhC,YAAYgjC,0DAA0D,SAAS9oC,EAAQkB,EAAOJ,GACziB,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IiCp6InF,IAAA+4B,GAAA9/B,EAAmC,uDAWnC,IAAA8hC,GAAA,SAAAv6B,GAAsCd,EAAAq7B,EAAAv6B,EA0ErC,SAAAu6B,GAAYxhB,EAAa3Y,EAAa2e,EAAmBE,GAAA,GAAAA,QAAA,GAAmB,CAAnBA,EAAA,EAExDjf,EAAAxG,KAAA2F,KAvEMA,MAAAqiC,aAAsB,CAyE5BzoB,GAAOA,EAAOwhB,EAAiBkH,MAAMrhC,EAErCjB,MAAK4Z,KAAOA,CACZ5Z,MAAK26B,OAAS15B,CACdjB,MAAKuiC,UAAYziB,CACjB9f,MAAKqiC,aAAeziB,CAEpB5f,MAAKm7B,UAAY,GAAI/5B,OAAcpB,KAAKqiC,cAzDzC7hC,OAAA+B,eAAW64B,EAAA76B,UAAA,QjC85IJiC,IiC95IP,WAEC,MAAOxC,MAAK26B,QjC+5IN/3B,WAAY,KACZC,aAAc,MiCv5IrBrC,QAAA+B,eAAW64B,EAAA76B,UAAA,YjCg6IJiC,IiCh6IP,WAEC,MAAOxC,MAAKuiC,WjCi6IN3/B,WAAY,KACZC,aAAc,MiCz5IrBrC,QAAA+B,eAAW64B,EAAA76B,UAAA,cjCk6IJiC,IiCl6IP,WAEC,MAAOxC,MAAKqiC,cjCm6INz/B,WAAY,KACZC,aAAc,MiC35IrBrC,QAAA+B,eAAW64B,EAAA76B,UAAA,WjCo6IJiC,IiCp6IP,WAEC,MAAOxC,MAAKm7B,WjCq6INv4B,WAAY,KACZC,aAAc,MiC14Idu4B,GAAA76B,UAAA4Y,kBAAP,SAAyBzJ,EAAmB+K,EAAmCrB,EAAmC4G,GAEjH,MAAO,GAMDob,GAAA76B,UAAAgZ,oBAAP,SAA2B7J,EAAmB+K,EAAmCrB,EAAmC4G,GAEnH,MAAO,GAMDob,GAAA76B,UAAAkZ,cAAP,SAAqB/J,EAAmB+K,EAAmCrB,EAAmC4G,GAE7G,MAAO,GAQDob,GAAA76B,UAAA0jB,gCAAP,SAAuC+W,IAQhCI,GAAA76B,UAAAif,0BAAP,SAAiCwF,IAlHlBoW,GAAArD,OAAgB,QAChBqD,GAAA1b,aAAsB,aACtB0b,GAAAvb,cAAuB,cAGvBub,GAAAkH,OAEdE,EAAEpH,EAAiBrD,OACnBx9B,EAAE6gC,EAAiB1b,aACnB+iB,EAAErH,EAAiBvb,cA6GrB,OAAAub,IAjIsChC,EAAAY,kBAAzB5/B,GAAAghC,iBAAgBA,IjCkhJ1BnB,uDAAuD76B,YAAYsjC,2DAA2D,SAASppC,EAAQkB,EAAOJ,GACzJ,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IkCliJnF,IAAAsL,GAAArS,EAA6B,gCAM7B,IAAAolB,GAAAplB,EAAuC,8CACvC,IAAA6gC,GAAA7gC,EAAmC,yCACnC,IAAAqpC,GAAArpC,EAAoC,4CAGpC,IAAA08B,GAAA18B,EAAsC,sCAKtC,IAAAspC,GAAA,SAAA/hC,GAAuCd,EAAA6iC,EAAA/hC,EAsCtC,SAAA+hC,GAAY3hC,EAAa4hC,EAA2B9E,EAA2BC,EAA2B8E,EAAqB3E,EAA0BC,EAAuB2E,GAAvJ,GAAAF,QAAA,GAAyB,CAAzBA,EAAA,KAA2B,GAAA9E,QAAA,GAAyB,CAAzBA,EAAA,MAA2B,GAAAC,QAAA,GAAyB,CAAzBA,EAAA,MAA2B,GAAA8E,QAAA,GAAmB,CAAnBA,EAAA,IAAqB,GAAA3E,QAAA,GAAwB,CAAxBA,EAAA,EAA0B,GAAAC,QAAA,GAAqB,CAArBA,EAAA,EAAuB,GAAA2E,QAAA,GAAsB,CAAtBA,EAAA,KAE/K,GAAI59B,GAAa,CACjB,IAAI64B,EACH74B,GACDtE,GAAAxG,KAAA2F,KAAM,gBAAiBiB,EAAMkE,EAE7BnF,MAAKu6B,aAAeoI,EAAAK,kBAEpBhjC,MAAKijC,aAAeJ,CACpB7iC,MAAKw+B,YAAcT,CACnB/9B,MAAKy+B,YAAcT,CAEnBh+B,MAAKkjC,SAAWJ,CAChB9iC,MAAK6+B,gBAAkBV,CACvBn+B,MAAK8+B,aAAeV,CACpBp+B,MAAKmjC,SAAWJ,GAAU,GAAIp3B,GAAAiB,SAMxBg2B,EAAAriC,UAAA4Y,kBAAP,SAAyBzJ,EAAmB+K,EAAmCrB,EAAmC4G,GAEjH,GAAIojB,GAAuCpjC,KAAK26B,QAAUjc,EAAAe,uBAAuBsY,OAAS3e,EAAc4N,wBAA0B5N,EAAcmN,wBAChJvG,GAAsB0W,iBAAiB12B,KAAM2iC,EAAAK,mBAAmBK,YAAaD,EAActhB,MAE3F,IAAIwhB,GAA6ClqB,EAAc4N,uBAC/DhH,GAAsB0W,iBAAiB12B,KAAM2iC,EAAAK,mBAAmBO,aAAcD,EAAqBxhB,MACnG1I,GAAc4N,uBACd5N,GAAc4N,uBACd5N,GAAc4N,uBAEd,IAAIH,GAA8BzN,EAAcyH,yBAChDzH,GAAc0H,oBAAoB+F,EAAO,EACzC,IAAI0V,GAAiC,GAAIvG,GAAAI,sBAAsBvP,EAAMwP,QAASxP,EAAM/E,MAEpF,IAAIgR,GAA8B1Z,EAAcyH,yBAChD,IAAI2iB,GAA4B,GAAIxN,GAAAI,sBAAsBtD,EAAMuD,QAASvD,EAAMhR,MAAO,EACtF,IAAImd,GAA4B,GAAIjJ,GAAAI,sBAAsBtD,EAAMuD,QAASvD,EAAMhR,MAAO,EACtF,IAAI2hB,GAA+B,GAAIzN,GAAAI,sBAAsBtD,EAAMuD,QAASvD,EAAMhR,MAAO,EACzF1I,GAAc0hB,sBAAsBjU,EAEpC,IAAI3sB,GAAc,EAElB,IAAI8F,KAAKw+B,YAAa,CACrBtkC,GAAQ,OAASupC,EAAS,IAAMzjB,EAAsBuW,WAAa,IAAM6M,EAAgB,MAEzF,IAAIpjC,KAAKy+B,YACRvkC,GAAQ,OAASupC,EAAS,IAAMA,EAAS,IAAML,EAAgB,WAEhElpC,IAAQ,OAASupC,EAAS,IAAMzjB,EAAsBwW,WAAa,IAAM4M,EAAgB,MAE1FlpC,IAAQ,OAASspC,EAAM,IAAMC,EAAS,IACtCvpC,IAAQ,OAAS+kC,EAAM,IAAMwE,EAAS,IACtCvpC,IAAQ,OAASqiC,EAAW,MAAQiH,EAAM,IAAMJ,EAAgB,MAChElpC,IAAQ,OAASqiC,EAAW,MAAQ0C,EAAM,IAAMmE,EAAgB,MAChElpC,IAAQ,OAASqiC,EAAW,MAAQvc,EAAsBM,gBAAkB,IAC5E,IAAItgB,KAAKijC,aACR/oC,GAAQ,OAASqiC,EAAW,IAAMA,EAAW,IAAM+G,EAAuB,IAC3EppC,IAAQ,OAAS8lB,EAAsBK,eAAiB,QAAUkc,EAAW,QAAUvc,EAAsBK,eAAiB,QAE9H,IAAI5F,EAAayF,aAAc,CAC9BhmB,GAAQ,OAASqiC,EAAW,MAAQ0C,EAAM,IAC1C/kC,IAAQ,OAASqiC,EAAW,MAAQiH,EAAM,IAC1CtpC,IAAQ,OAASqiC,EAAW,OAASvc,EAAsBM,gBAAkB,IAC7E,IAAItgB,KAAKijC,aACR/oC,GAAQ,OAASqiC,EAAW,IAAMA,EAAW,IAAM+G,EAAuB,IAC3EppC,IAAQ,OAASqiC,EAAW,IAAMA,EAAW,IAAM6G,EAAgB,MACnElpC,IAAQ,OAASqiC,EAAW,IAAMA,EAAW,IAAM6G,EAAgB,MACnE,KAAKpjC,KAAKw+B,YACTtkC,GAAQ,OAASqiC,EAAW,IAAMA,EAAW,IAAMvc,EAAsBwW,WAAa,IACvFt8B,IAAQ,OAAS8lB,EAAsBO,eAAiB,QAAUP,EAAsBO,eAAiB,QAAUgc,EAAW,SAE/H,MAAOriC,GAMD0oC,GAAAriC,UAAA8a,kBAAP,SAAyB0f,GAExB,MAA4BA,GAAS1f,kBAAkBrb,MAMjD4iC,GAAAriC,UAAA0jB,gCAAP,SAAuC+W,GAGtC,GAAI0I,GAAiB1I,EAAM4H,EAAkBe,eAC7C,KAAKD,EACJ,KAAM,IAAIzpC,OAAM,eAAiB2oC,EAAkBe,eAAiB,aAErE3jC,MAAKm7B,UAAU,GAAKuI,EAAMh1B,CAC1B,IAAI1O,KAAKw+B,aAAekF,EAAM90B,GAAK,EAClC,KAAK,IAAK3U,OAAM,+CACjB+F,MAAKm7B,UAAU,GAAKyI,KAAKC,GAAG,IAAI7jC,KAAKw+B,YAAa,EAAIkF,EAAM90B,EAC5D5O,MAAKm7B,UAAU,GAAKuI,EAAMh1B,EAAEk1B,KAAKC,GAAG,CACpC,IAAI7jC,KAAKy+B,YACRz+B,KAAKm7B,UAAU,GAAKuI,EAAMhX,EAAEkX,KAAKC,GAAG,IAnHxBjB,GAAAe,eAAwB,eAqHvC,OAAAf,IA7IuCzI,EAAAiB,iBAA1BhhC,GAAAwoC,kBAAiBA,IlC8oJ3BvH,8CAA8C,8DAA8DC,yCAAyC,yDAAyDwI,4CAA4C,4DAA4DhN,sCAAsC,sDAAsDjf,gCAAgCzY,YAAY2kC,gEAAgE,SAASzqC,EAAQkB,EAAOJ,GACzhB,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,ImCnqJnF,IAAAsL,GAAArS,EAA6B,gCAM7B,IAAAolB,GAAAplB,EAAuC,8CACvC,IAAA6gC,GAAA7gC,EAAmC,yCACnC,IAAA0qC,GAAA1qC,EAAwC,iDAGxC,IAAA08B,GAAA18B,EAAsC,sCAKtC,IAAA2qC,GAAA,SAAApjC,GAA4Cd,EAAAkkC,EAAApjC,EAiB3C,SAAAojC,GAAYhjC,EAAaijC,GAAA,GAAAA,QAAA,GAA0B,CAA1BA,EAAA,KAExBrjC,EAAAxG,KAAA2F,KAAM,qBAAsBiB,EAAM,EAElCjB,MAAKu6B,aAAeyJ,EAAAG,uBAEpBnkC,MAAKokC,aAAeF,GAAc,GAAIv4B,GAAAiB,SAMhCq3B,EAAA1jC,UAAA4Y,kBAAP,SAAyBzJ,EAAmB+K,EAAmCrB,EAAmC4G,GAEjH,GAAIqkB,GAA4CrkC,KAAK26B,QAAUjc,EAAAe,uBAAuBsY,OAAS3e,EAAc4N,wBAA0B5N,EAAcmN,wBACrJvG,GAAsB0W,iBAAiB12B,KAAMgkC,EAAAG,wBAAwBG,iBAAkBD,EAAmBviB,MAC1G,IAAI+Y,GAA6BzhB,EAAcyH,yBAC/C,IAAI0jB,GAA8B,GAAIvO,GAAAI,sBAAsByE,EAAKxE,QAASwE,EAAK/Y,MAAO,EACtF,IAAImd,GAA4B,GAAIjJ,GAAAI,sBAAsByE,EAAKxE,QAASwE,EAAK/Y,MAAO,EACpF,IAAI0hB,GAA4B,GAAIxN,GAAAI,sBAAsByE,EAAKxE,QAASwE,EAAK/Y,MAAO,EACpF1I,GAAc0H,oBAAoB+Z,EAAM,EACxC,IAAI/H,GAA8B1Z,EAAcyH,yBAChD,IAAI0b,GAAiC,GAAIvG,GAAAI,sBAAsBtD,EAAMuD,QAASvD,EAAMhR,MACpF1I,GAAc0hB,sBAAsBD,EAEpC,IAAI3gC,GAAc,EAClBA,IAAQ,OAASqqC,EAAQ,IAAMvkB,EAAsBuW,WAAa,IAAM8N,EAAqB,MAC7FnqC,IAAQ,OAAS+kC,EAAM,IAAMsF,EAAQ,IACrCrqC,IAAQ,OAASqiC,EAAW,QAAU0C,EAAM,IAAMoF,EAAqB,QACvEnqC,IAAQ,OAAS8lB,EAAsBK,eAAiB,QAAUkc,EAAW,QAAUvc,EAAsBK,eAAiB,QAE9H,IAAI5F,EAAayF,aAAc,CAC9BhmB,GAAQ,OAASspC,EAAM,IAAMe,EAAQ,IACrCrqC,IAAQ,OAASqiC,EAAW,QAAUiH,EAAM,IAAMa,EAAqB,QACvEnqC,IAAQ,OAAS8lB,EAAsBO,eAAiB,QAAUgc,EAAW,QAAUvc,EAAsBO,eAAiB,SAG/H,MAAOrmB,GAMD+pC,GAAA1jC,UAAA8a,kBAAP,SAAyB0f,GAExB,MAAiCA,GAAS1f,kBAAkBrb,MAMtDikC,GAAA1jC,UAAA0jB,gCAAP,SAAuC+W,GAGtC,GAAIwJ,GAAiBxJ,EAAMiJ,EAAuBQ,oBAClD,KAAKD,EACJ,KAAK,IAAKvqC,OAAM,eAAiBgqC,EAAuBQ,oBAAsB,aAE/EzkC,MAAKm7B,UAAU,GAAKqJ,EAAM91B,CAC1B1O,MAAKm7B,UAAU,GAAKqJ,EAAM51B,CAC1B5O,MAAKm7B,UAAU,GAAKqJ,EAAM9X,CAC1B,IAAI8X,EAAM7X,GAAK,EACd,KAAK,IAAK1yB,OAAM,4CACjB+F,MAAKm7B,UAAU,GAAKyI,KAAKC,GAAG,EAAEW,EAAM7X,EAvEvBsX,GAAAQ,oBAA6B,oBAyE5C,OAAAR,IAlF4C9J,EAAAiB,iBAA/BhhC,GAAA6pC,uBAAsBA,InCkuJhC5I,8CAA8C,8DAA8DC,yCAAyC,yDAAyDoJ,iDAAiD,iEAAiE5N,sCAAsC,sDAAsDjf,gCAAgCzY,YAAYulC,8DAA8D,SAASrrC,EAAQkB,EAAOJ,GACjiB,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IoCvvJnF,IAAAsL,GAAArS,EAA6B,gCAM7B,IAAAolB,GAAAplB,EAAuC,8CACvC,IAAA6gC,GAAA7gC,EAAmC,yCACnC,IAAAsrC,GAAAtrC,EAAsC,+CAQtC,IAAAurC,GAAA,SAAAhkC,GAA0Cd,EAAA8kC,EAAAhkC,EAiBzC,SAAAgkC,GAAY5jC,EAAa6jC,GAAA,GAAAA,QAAA,GAAwB,CAAxBA,EAAA,KAExBjkC,EAAAxG,KAAA2F,KAAM,mBAAoBiB,EAAM,EAEhCjB,MAAKu6B,aAAeqK,EAAAG,qBAEpB/kC,MAAKglC,WAAaF,GAAY,GAAIn5B,GAAAiB,SAM5Bi4B,EAAAtkC,UAAA4Y,kBAAP,SAAyBzJ,EAAmB+K,EAAmCrB,EAAmC4G,GAEjH,GAAImW,GAA2Cn2B,KAAK26B,QAAUjc,EAAAe,uBAAuBsY,OAAS3e,EAAc4N,wBAA0B5N,EAAcmN,wBACpJvG,GAAsB0W,iBAAiB12B,KAAM4kC,EAAAG,sBAAsBE,eAAgB9O,EAAkBrU,MAErG,OAAO,OAAS9B,EAAsBK,eAAiB,QAAU8V,EAAoB,QAAUnW,EAAsBK,eAAiB,SAMhIwkB,GAAAtkC,UAAA8a,kBAAP,SAAyB0f,GAExB,MAA+BA,GAAS1f,kBAAkBrb,MAMpD6kC,GAAAtkC,UAAA0jB,gCAAP,SAAuC+W,GAEtC,GAAIne,GAAkBme,EAAM6J,EAAqBK,kBACjD,KAAKroB,EACJ,KAAK,IAAK5iB,OAAM,eAAiB4qC,EAAqBK,kBAAoB,aAE3EllC,MAAKm7B,UAAU,GAAKte,EAAOnO,CAC3B1O,MAAKm7B,UAAU,GAAKte,EAAOjO,CAC3B5O,MAAKm7B,UAAU,GAAKte,EAAO6P,EA/CdmY,GAAAK,kBAA2B,kBAiD1C,OAAAL,IA1D0C1K,EAAAiB,iBAA7BhhC,GAAAyqC,qBAAoBA,IpC+xJ9BxJ,8CAA8C,8DAA8DC,yCAAyC,yDAAyD6J,+CAA+C,+DAA+DttB,gCAAgCzY,YAAYgmC,qEAAqE,SAAS9rC,EAAQkB,EAAOJ,GACxc,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IqCjzJnF,IAAAqe,GAAAplB,EAAuC,8CACvC,IAAA6gC,GAAA7gC,EAAmC,yCACnC,IAAA+rC,GAAA/rC,EAA4C,sDAG5C,IAAA08B,GAAA18B,EAAsC,sCAKtC,IAAAgsC,GAAA,SAAAzkC,GAAiDd,EAAAulC,EAAAzkC,EAKhD,SAAAykC,KAECzkC,EAAAxG,KAAA2F,KAAM,0BAA2B0e,EAAAe,uBAAuBsY,OAAQ,EAAG,EAEnE/3B,MAAKu6B,aAAe8K,EAAAE,6BAMdD,EAAA/kC,UAAA4Y,kBAAP,SAAyBzJ,EAAmB+K,EAAmCrB,EAAmC4G,GAEjH,GAAI9lB,GAAc,EAClB,IAAIiL,GAAa6a,EAAsBkW,kBAAkB57B,MACzD,IAAIP,EACJ,IAAI0gB,EAAa6iB,aAAc,CAC9B,GAAIzW,GAA8BzN,EAAcyH,yBAChDzH,GAAc0H,oBAAoB+F,EAAO,EACzC,IAAIiM,GAA8B1Z,EAAcyH,yBAChDzH,GAAc0H,oBAAoBgS,EAAO,EACzC,IAAIsO,GAA8BhoB,EAAcyH,yBAEhD,IAAIsc,GAA+C/jB,EAAc4N,uBACjEhH,GAAsB0W,iBAAiB12B,KAAMqlC,EAAAE,6BAA6BnI,aAAcD,EAAuBrb,MAC/G1I,GAAc4N,uBACd5N,GAAc4N,uBACd5N,GAAc4N,uBAEd5N,GAAc0hB,sBAAsBjU,EACpCzN,GAAc0hB,sBAAsBhI,EAGpC54B,IAAQ,OAAS2sB,EAAQ,QAAU7G,EAAsBO,eAAiB,QAAU4c,EAAyB,IAE7GjjC,IAAQ,OAASknC,EAAQ,IAAMphB,EAAsBM,gBAAkB,IACvEpmB,IAAQ,OAASknC,EAAQ,OAASva,EAAQ,OAC1C3sB,IAAQ,OAASknC,EAAQ,QAAUA,EAAQ,QAI3ClnC,IAAQ,OAAS44B,EAAQ,IAAM9S,EAAsBM,gBAAkB,IACvEpmB,IAAQ,OAAS44B,EAAQ,MAAQsO,EAAQ,MACzClnC,IAAQ,OAAS44B,EAAQ,MAAQsO,EAAQ,MACzClnC,IAAQ,OAAS2sB,EAAQ,IAAM7G,EAAsBM,gBAAkB,IACvEpmB,IAAQ,OAAS2sB,EAAQ,MAAQua,EAAQ,MACzClnC,IAAQ,OAAS2sB,EAAQ,MAAQua,EAAQ,MACzClnC,IAAQ,OAASknC,EAAQ,IAAMphB,EAAsBM,gBAAkB,IACvEpmB,IAAQ,OAASknC,EAAQ,MAAQphB,EAAsBiB,eAAiB,IACxE/mB,IAAQ,OAAS8lB,EAAsBS,qBAAuB,QAAUT,EAAsBS,qBAAuB,QAAUoG,EAAQ,IACvI,KAAK9sB,EAAI,EAAGA,EAAIoL,EAAKpL,IACpBG,GAAQ,OAAS8lB,EAAsBkW,kBAAkBn8B,GAAK,QAAUimB,EAAsBkW,kBAAkBn8B,GAAK,IAAM8sB,EAAQ,SAC9H,CACN,GAAI2e,GAA+BpsB,EAAcyH,yBACjDzH,GAAc0H,oBAAoB0kB,EAAQ,EAE1C,IAAIC,GAA8BrsB,EAAcyH,yBAChDzH,GAAc0H,oBAAoB2kB,EAAO,EAEzC,IAAIC,GAA0BtsB,EAAcyH,yBAC5CzH,GAAc0H,oBAAoB4kB,EAAG,EACrC,IAAIC,GAA8BvsB,EAAcyH,yBAChD,IAAI2iB,GAA4B,GAAIxN,GAAAI,sBAAsBsP,EAAErP,QAASqP,EAAE5jB,MAAO,EAC9E,IAAImd,GAA4B,GAAIjJ,GAAAI,sBAAsBuP,EAAMtP,QAASsP,EAAM7jB,MAAO,EACtF,IAAI8jB,GAA6B,GAAI5P,GAAAI,sBAAsBoP,EAAOnP,QAASmP,EAAO1jB,MAAO,EACzF,IAAI+jB,GAAmC5G,CAEvC7lB,GAAc0hB,sBAAsB0K,EACpCpsB,GAAc0hB,sBAAsB2K,EACpCrsB,GAAc0hB,sBAAsB4K,EAEpCxrC,IAAQ,OAASurC,EAAQ,MAAQzlB,EAAsBiB,eAAiB,IACxE/mB,IAAQ,OAASurC,EAAQ,OAASzlB,EAAsBM,gBAAkB,IAE1EpmB,IAAQ,OAASsrC,EAAS,QAAUxlB,EAAsBO,eAAiB,QAC3ErmB,IAAQ,OAAS0rC,EAAO,IAAMJ,EAAS,QAAUC,EAAQ,QACzDvrC,IAAQ,OAASsrC,EAAS,QAAUC,EAAQ,QAAUD,EAAS,QAC/DtrC,IAAQ,OAASsrC,EAAS,QAAUA,EAAS,QAG7CtrC,IAAQ,OAASwrC,EAAI,MAAQF,EAAS,QAAUA,EAAS,QACzDtrC,IAAQ,OAASwrC,EAAI,MAAQ1lB,EAAsBM,gBAAkB,IAAMolB,EAAI,MAC/ExrC,IAAQ,OAASsrC,EAAS,MAAQE,EAAI,MAAQF,EAAS,MAEvDtrC,IAAQ,OAAS2rC,EAAa,IAAMD,EAAO,IAAM5lB,EAAsBiB,eAAiB,IACxF/mB,IAAQ,OAAS2rC,EAAa,IAAMA,EAAa,IAAM7lB,EAAsBsW,eAAiB,IAC9Fp8B,IAAQ,OAASspC,EAAM,IAAMqC,EAAa,IAE1C3rC,IAAQ,OAAS2rC,EAAa,IAAM7lB,EAAsBiB,eAAiB,IAAM2kB,EAAO,IACxF1rC,IAAQ,OAAS2rC,EAAa,IAAMA,EAAa,IAAM7lB,EAAsBsW,eAAiB,IAC9Fp8B,IAAQ,OAAS+kC,EAAM,IAAM4G,EAAa,IAE1C3rC,IAAQ,OAASwrC,EAAI,QAAUzG,EAAM,IAAMuG,EAAS,QAIpDtrC,IAAQ,OAASyrC,EAAQ,QAAU1G,EAAM,IAAMuG,EAAS,QACxDtrC,IAAQ,OAASyrC,EAAQ,QAAUA,EAAQ,QAK3CzrC,IAAQ,OAASsrC,EAAS,QAAUE,EAAI,QAAU1lB,EAAsBS,qBAAuB,QAG/FvmB,IAAQ,OAASurC,EAAQ,QAAUjC,EAAM,IAAMxjB,EAAsBS,qBAAuB,QAC5FvmB,IAAQ,OAASsrC,EAAS,QAAUA,EAAS,QAAUC,EAAQ,QAC/DvrC,IAAQ,OAASurC,EAAQ,MAAQC,EAAI,QAAU1lB,EAAsBS,qBAAuB,QAC5FvmB,IAAQ,OAASsrC,EAAS,MAAQC,EAAQ,MAE1CvrC,IAAQ,OAASwrC,EAAI,QAAUF,EAAS,QAAUG,EAAQ,QAE1DzrC,IAAQ,OAASurC,EAAQ,SAAWD,EAAS,SAAWhC,EAAM,IAC9DtpC,IAAQ,OAASwrC,EAAI,QAAUA,EAAI,QAAUD,EAAQ,QACrDvrC,IAAQ,OAASurC,EAAQ,QAAUD,EAAS,MAAQG,EAAQ,QAE5DzrC,IAAQ,OAAS8lB,EAAsBS,qBAAuB,QAAUilB,EAAI,QAAUD,EAAQ,QAE9F,KAAK1rC,EAAI,EAAGA,EAAIoL,EAAKpL,IAAK,CAGzBG,GAAQ,OAASurC,EAAQ,MAAQzlB,EAAsBiB,eAAiB,IACxE/mB,IAAQ,OAASurC,EAAQ,OAASzlB,EAAsBM,gBAAkB,IAC1EpmB,IAAQ,OAASsrC,EAAS,QAAUxlB,EAAsBO,eAAiB,QAC3ErmB,IAAQ,OAAS0rC,EAAO,IAAMJ,EAAS,QAAUC,EAAQ,QACzDvrC,IAAQ,OAASsrC,EAAS,QAAUC,EAAQ,QAAUD,EAAS,QAC/DtrC,IAAQ,OAASsrC,EAAS,QAAUA,EAAS,QAC7CtrC,IAAQ,OAASwrC,EAAI,MAAQF,EAAS,QAAUA,EAAS,QACzDtrC,IAAQ,OAASwrC,EAAI,MAAQ1lB,EAAsBM,gBAAkB,IAAMolB,EAAI,MAC/ExrC,IAAQ,OAASsrC,EAAS,MAAQE,EAAI,MAAQF,EAAS,MACvDtrC,IAAQ,OAAS2rC,EAAa,IAAMD,EAAO,IAAM5lB,EAAsBiB,eAAiB,IACxF/mB,IAAQ,OAAS2rC,EAAa,IAAMA,EAAa,IAAM7lB,EAAsBsW,eAAiB,IAC9Fp8B,IAAQ,OAASspC,EAAM,IAAMqC,EAAa,IAC1C3rC,IAAQ,OAAS2rC,EAAa,IAAM7lB,EAAsBiB,eAAiB,IAAM2kB,EAAO,IACxF1rC,IAAQ,OAAS2rC,EAAa,IAAMA,EAAa,IAAM7lB,EAAsBsW,eAAiB,IAC9Fp8B,IAAQ,OAAS+kC,EAAM,IAAM4G,EAAa,IAC1C3rC,IAAQ,OAASwrC,EAAI,QAAUzG,EAAM,IAAMuG,EAAS,QACpDtrC,IAAQ,OAASyrC,EAAQ,QAAU1G,EAAM,IAAMuG,EAAS,QACxDtrC,IAAQ,OAASyrC,EAAQ,QAAUA,EAAQ,QAC3CzrC,IAAQ,OAASsrC,EAAS,QAAUE,EAAI,QAAU1lB,EAAsBkW,kBAAkBn8B,GAAK,QAC/FG,IAAQ,OAASurC,EAAQ,QAAUjC,EAAM,IAAMxjB,EAAsBkW,kBAAkBn8B,GAAK,QAC5FG,IAAQ,OAASsrC,EAAS,QAAUA,EAAS,QAAUC,EAAQ,QAC/DvrC,IAAQ,OAASurC,EAAQ,MAAQC,EAAI,QAAU1lB,EAAsBkW,kBAAkBn8B,GAAK,QAC5FG,IAAQ,OAASsrC,EAAS,MAAQC,EAAQ,MAC1CvrC,IAAQ,OAASwrC,EAAI,QAAUF,EAAS,QAAUG,EAAQ,QAC1DzrC,IAAQ,OAASurC,EAAQ,SAAWD,EAAS,SAAWhC,EAAM,IAC9DtpC,IAAQ,OAASwrC,EAAI,QAAUA,EAAI,QAAUD,EAAQ,QACrDvrC,IAAQ,OAASurC,EAAQ,QAAUD,EAAS,MAAQG,EAAQ,QAC5DzrC,IAAQ,OAAS8lB,EAAsBkW,kBAAkBn8B,GAAK,QAAU2rC,EAAI,QAAUD,EAAQ,UAIhG,MAAOvrC,GAMDorC,GAAA/kC,UAAA8a,kBAAP,SAAyB0f,GAExB,MAAsCA,GAAS1f,kBAAkBrb,MAM3DslC,GAAA/kC,UAAAif,0BAAP,SAAiCwF,GAEhCA,EAAqB9E,aAAe,KAEtC,OAAAolB,IA9KiDnL,EAAAiB,iBAApChhC,GAAAkrC,4BAA2BA,IrCo8JrCjK,8CAA8C,8DAA8DC,yCAAyC,yDAAyDwK,sDAAsD,sEAAsEhP,sCAAsC,wDAAwDiP,sEAAsE,SAASzsC,EAAQkB,EAAOJ,GACzgB,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IsCt9JnF,IAAAsL,GAAArS,EAA6B,gCAM7B,IAAAolB,GAAAplB,EAAuC,8CACvC,IAAA6gC,GAAA7gC,EAAmC,yCACnC,IAAA0sC,GAAA1sC,EAA4C,uDAG5C,IAAA08B,GAAA18B,EAAsC,sCAKtC,IAAA2sC,GAAA,SAAAplC,GAAkDd,EAAAkmC,EAAAplC,EAcjD,SAAAolC,GAAYhlC,EAAa6jC,GAAA,GAAAA,QAAA,GAAwB,CAAxBA,EAAA,KAExBjkC,EAAAxG,KAAA2F,KAAM,2BAA4BiB,EAAM,EAAG,EAE3CjB,MAAKu6B,aAAeyL,EAAAE,6BAEpBlmC,MAAKglC,WAAaF,GAAY,GAAIn5B,GAAAiB,SAM5Bq5B,EAAA1lC,UAAA4Y,kBAAP,SAAyBzJ,EAAmB+K,EAAmCrB,EAAmC4G,GAEjH,GAAImW,GAA2Cn2B,KAAK26B,QAAUjc,EAAAe,uBAAuBsY,OAAS3e,EAAc4N,wBAA0B5N,EAAcmN,wBACpJvG,GAAsB0W,iBAAiB12B,KAAMgmC,EAAAE,8BAA8BjB,eAAgB9O,EAAkBrU,MAE7G,IAAI5nB,GAAc,EAClB,IAAIiL,GAAa6a,EAAsBkW,kBAAkB57B,MACzD,IAAIP,EACJ,IAAI0gB,EAAa6iB,aAAc,CAC9B,GAAIzW,GAA8BzN,EAAcyH,yBAChDzH,GAAc0H,oBAAoB+F,EAAO,EACzC,IAAIiM,GAA8B1Z,EAAcyH,yBAChDzH,GAAc0H,oBAAoBgS,EAAO,EACzC,IAAIsO,GAA8BhoB,EAAcyH,yBAEhD,IAAIsc,GAA+C/jB,EAAc4N,uBACjEhH,GAAsB0W,iBAAiB12B,KAAMgmC,EAAAE,8BAA8B9I,aAAcD,EAAuBrb,MAChH1I,GAAc4N,uBACd5N,GAAc4N,uBACd5N,GAAc4N,uBAEd5N,GAAc0hB,sBAAsBjU,EACpCzN,GAAc0hB,sBAAsBhI,EAGpC54B,IAAQ,OAAS2sB,EAAQ,QAAUsP,EAAoB,QAAUnW,EAAsBK,eAAiB,QACxGnmB,IAAQ,OAAS2sB,EAAQ,QAAUA,EAAQ,QAAUsW,EAAyB,IAE9EjjC,IAAQ,OAASknC,EAAQ,IAAMphB,EAAsBM,gBAAkB,IACvEpmB,IAAQ,OAASknC,EAAQ,OAASva,EAAQ,OAC1C3sB,IAAQ,OAASknC,EAAQ,QAAUA,EAAQ,QAI3ClnC,IAAQ,OAAS44B,EAAQ,IAAM9S,EAAsBM,gBAAkB,IACvEpmB,IAAQ,OAAS44B,EAAQ,MAAQsO,EAAQ,MACzClnC,IAAQ,OAAS44B,EAAQ,MAAQsO,EAAQ,MACzClnC,IAAQ,OAAS2sB,EAAQ,IAAM7G,EAAsBM,gBAAkB,IACvEpmB,IAAQ,OAAS2sB,EAAQ,MAAQua,EAAQ,MACzClnC,IAAQ,OAAS2sB,EAAQ,MAAQua,EAAQ,MACzClnC,IAAQ,OAASknC,EAAQ,IAAMphB,EAAsBM,gBAAkB,IACvEpmB,IAAQ,OAASknC,EAAQ,MAAQphB,EAAsBiB,eAAiB,IACxE/mB,IAAQ,OAAS8lB,EAAsBS,qBAAuB,QAAUT,EAAsBS,qBAAuB,QAAUoG,EAAQ,IACvI,KAAK9sB,EAAI,EAAGA,EAAIoL,EAAKpL,IACpBG,GAAQ,OAAS8lB,EAAsBkW,kBAAkBn8B,GAAK,QAAUimB,EAAsBkW,kBAAkBn8B,GAAK,IAAM8sB,EAAQ,SAC9H,CACN,GAAIsf,GAAqC/sB,EAAcyH,yBACvDzH,GAAc0H,oBAAoBqlB,EAAc,EAEhD,IAAItL,GAA6BzhB,EAAcyH,yBAC/CzH,GAAc0H,oBAAoB+Z,EAAM,EACxC,IAAI2I,GAA4B,GAAIxN,GAAAI,sBAAsByE,EAAKxE,QAASwE,EAAK/Y,MAAO,EACpF,IAAImd,GAA4B,GAAIjJ,GAAAI,sBAAsByE,EAAKxE,QAASwE,EAAK/Y,MAAO,EACpF,IAAIskB,GAA+B,GAAIpQ,GAAAI,sBAAsByE,EAAKxE,QAASwE,EAAK/Y,MAAO,EACvF,IAAI+jB,GAAmC,GAAI7P,GAAAI,sBAAsByE,EAAKxE,QAASwE,EAAK/Y,MAAO,EAE3F,IAAI4jB,GAA0BtsB,EAAcyH,yBAC5CzH,GAAc0H,oBAAoB4kB,EAAG,EAErCtsB,GAAc0hB,sBAAsBqL,EACpC/sB,GAAc0hB,sBAAsBD,EACpCzhB,GAAc0hB,sBAAsB4K,EAEpCxrC,IAAQ,OAASisC,EAAe,QAAUhQ,EAAoB,QAAUnW,EAAsBK,eAAiB,QAC/GnmB,IAAQ,OAASisC,EAAe,QAAUA,EAAe,QAEzDjsC,IAAQ,OAAS+kC,EAAM,IAAMkH,EAAe,MAC5CjsC,IAAQ,OAASspC,EAAM,IAAMvE,EAAM,IAAMA,EAAM,IAC/C/kC,IAAQ,OAASspC,EAAM,IAAMxjB,EAAsBiB,eAAiB,IAAMuiB,EAAM,IAChFtpC,IAAQ,OAASspC,EAAM,IAAMA,EAAM,IAEnCtpC,IAAQ,OAASwrC,EAAI,MAAQlC,EAAM,IAAMxjB,EAAsBS,qBAAuB,MACtFvmB,IAAQ,OAASwrC,EAAI,MAAQzG,EAAM,IAAMjf,EAAsBS,qBAAuB,MACtFvmB,IAAQ,OAASwrC,EAAI,MAAQzG,EAAM,IAAMjf,EAAsBS,qBAAuB,MACtFvmB,IAAQ,OAASwrC,EAAI,MAAQlC,EAAM,IAAMxjB,EAAsBS,qBAAuB,MAEtFvmB,IAAQ,OAAS8lB,EAAsBS,qBAAuB,MAAQilB,EAAI,MAAQA,EAAI,MACtFxrC,IAAQ,OAAS8lB,EAAsBS,qBAAuB,MAAQilB,EAAI,MAAQA,EAAI,MAEtFxrC,IAAQ,OAASwrC,EAAI,MAAQS,EAAe,MAC5CjsC,IAAQ,OAASwrC,EAAI,MAAQA,EAAI,MAAQ1lB,EAAsBiB,eAAiB,IAChF/mB,IAAQ,OAASwrC,EAAI,MAAQA,EAAI,MAAQS,EAAe,MAGxDjsC,IAAQ,OAASisC,EAAe,MAAQnmB,EAAsBM,gBAAkB,IAChFpmB,IAAQ,OAAS+kC,EAAM,IAAMkH,EAAe,QAAUA,EAAe,QACrEjsC,IAAQ,OAAS2rC,EAAa,IAAM7lB,EAAsBM,gBAAkB,IAAM2e,EAAM,IAExF/kC,IAAQ,OAASisC,EAAe,MAAQnmB,EAAsBM,gBAAkB,IAChFpmB,IAAQ,OAASisC,EAAe,QAAUA,EAAe,QAEzDjsC,IAAQ,OAAS+kC,EAAM,IAAMjf,EAAsBiB,eAAiB,IAAM4kB,EAAa,IACvF3rC,IAAQ,OAAS+kC,EAAM,IAAMA,EAAM,IAAMkH,EAAe,MAExDjsC,IAAQ,OAASspC,EAAM,IAAM2C,EAAe,MAC5CjsC,IAAQ,OAASspC,EAAM,IAAMA,EAAM,IACnCtpC,IAAQ,OAASksC,EAAS,IAAMpmB,EAAsBiB,eAAiB,IAAMuiB,EAAM,IACnFtpC,IAAQ,OAASksC,EAAS,IAAMV,EAAI,MAAQG,EAAa,IACzD3rC,IAAQ,OAASspC,EAAM,IAAMA,EAAM,IAAM4C,EAAS,IAElDlsC,IAAQ,OAASwrC,EAAI,MAAQlC,EAAM,IAAMxjB,EAAsBS,qBAAuB,MACtFvmB,IAAQ,OAASwrC,EAAI,MAAQzG,EAAM,IAAMjf,EAAsBS,qBAAuB,MACtFvmB,IAAQ,OAASwrC,EAAI,MAAQzG,EAAM,IAAMjf,EAAsBS,qBAAuB,MACtFvmB,IAAQ,OAASwrC,EAAI,MAAQlC,EAAM,IAAMxjB,EAAsBS,qBAAuB,MAEtFvmB,IAAQ,OAAS8lB,EAAsBS,qBAAuB,MAAQilB,EAAI,MAAQA,EAAI,MACtFxrC,IAAQ,OAAS8lB,EAAsBS,qBAAuB,MAAQilB,EAAI,MAAQA,EAAI,MAEtF,KAAK3rC,EAAI,EAAGA,EAAIoL,EAAKpL,IAAK,CAGzBG,GAAQ,OAASisC,EAAe,QAAUhQ,EAAoB,QAAUnW,EAAsBK,eAAiB,QAC/GnmB,IAAQ,OAASisC,EAAe,QAAUA,EAAe,QACzDjsC,IAAQ,OAAS+kC,EAAM,IAAMkH,EAAe,MAC5CjsC,IAAQ,OAASspC,EAAM,IAAMvE,EAAM,IAAMA,EAAM,IAC/C/kC,IAAQ,OAASspC,EAAM,IAAMxjB,EAAsBiB,eAAiB,IAAMuiB,EAAM,IAChFtpC,IAAQ,OAASspC,EAAM,IAAMA,EAAM,IACnCtpC,IAAQ,OAASwrC,EAAI,MAAQlC,EAAM,IAAMxjB,EAAsBkW,kBAAkBn8B,GAAK,MACtFG,IAAQ,OAASwrC,EAAI,MAAQzG,EAAM,IAAMjf,EAAsBkW,kBAAkBn8B,GAAK,MACtFG,IAAQ,OAASwrC,EAAI,MAAQzG,EAAM,IAAMjf,EAAsBkW,kBAAkBn8B,GAAK,MACtFG,IAAQ,OAASwrC,EAAI,MAAQlC,EAAM,IAAMxjB,EAAsBkW,kBAAkBn8B,GAAK,MACtFG,IAAQ,OAAS8lB,EAAsBkW,kBAAkBn8B,GAAK,MAAQ2rC,EAAI,MAAQA,EAAI,MACtFxrC,IAAQ,OAAS8lB,EAAsBkW,kBAAkBn8B,GAAK,MAAQ2rC,EAAI,MAAQA,EAAI,MACtFxrC,IAAQ,OAASwrC,EAAI,MAAQS,EAAe,MAC5CjsC,IAAQ,OAASwrC,EAAI,MAAQA,EAAI,MAAQ1lB,EAAsBiB,eAAiB,IAChF/mB,IAAQ,OAASwrC,EAAI,MAAQA,EAAI,MAAQS,EAAe,MACxDjsC,IAAQ,OAASisC,EAAe,MAAQnmB,EAAsBM,gBAAkB,IAChFpmB,IAAQ,OAAS+kC,EAAM,IAAMkH,EAAe,QAAUA,EAAe,QACrEjsC,IAAQ,OAAS2rC,EAAa,IAAM7lB,EAAsBM,gBAAkB,IAAM2e,EAAM,IACxF/kC,IAAQ,OAASisC,EAAe,MAAQnmB,EAAsBM,gBAAkB,IAChFpmB,IAAQ,OAASisC,EAAe,QAAUA,EAAe,QACzDjsC,IAAQ,OAAS+kC,EAAM,IAAMjf,EAAsBiB,eAAiB,IAAM4kB,EAAa,IACvF3rC,IAAQ,OAAS+kC,EAAM,IAAMA,EAAM,IAAMkH,EAAe,MACxDjsC,IAAQ,OAASspC,EAAM,IAAM2C,EAAe,MAC5CjsC,IAAQ,OAASspC,EAAM,IAAMA,EAAM,IACnCtpC,IAAQ,OAASksC,EAAS,IAAMpmB,EAAsBiB,eAAiB,IAAMuiB,EAAM,IACnFtpC,IAAQ,OAASksC,EAAS,IAAMV,EAAI,MAAQG,EAAa,IACzD3rC,IAAQ,OAASspC,EAAM,IAAMA,EAAM,IAAM4C,EAAS,IAClDlsC,IAAQ,OAASwrC,EAAI,MAAQlC,EAAM,IAAMxjB,EAAsBkW,kBAAkBn8B,GAAK,MACtFG,IAAQ,OAASwrC,EAAI,MAAQzG,EAAM,IAAMjf,EAAsBkW,kBAAkBn8B,GAAK,MACtFG,IAAQ,OAASwrC,EAAI,MAAQzG,EAAM,IAAMjf,EAAsBkW,kBAAkBn8B,GAAK,MACtFG,IAAQ,OAASwrC,EAAI,MAAQlC,EAAM,IAAMxjB,EAAsBkW,kBAAkBn8B,GAAK,MACtFG,IAAQ,OAAS8lB,EAAsBkW,kBAAkBn8B,GAAK,MAAQ2rC,EAAI,MAAQA,EAAI,MACtFxrC,IAAQ,OAAS8lB,EAAsBkW,kBAAkBn8B,GAAK,MAAQ2rC,EAAI,MAAQA,EAAI,QAGxF,MAAOxrC,GAMD+rC,GAAA1lC,UAAA8a,kBAAP,SAAyB0f,GAExB,MAAuCA,GAAS1f,kBAAkBrb,MAM5DimC,GAAA1lC,UAAA0jB,gCAAP,SAAuC+W,GAEtC,GAAIne,GAAkBme,EAAMiL,EAA6Bf,kBACzD,KAAKroB,EACJ,KAAK,IAAK5iB,OAAM,eAAiBgsC,EAA6Bf,kBAAoB,aAEnFllC,MAAKm7B,UAAU,GAAKte,EAAOnO,CAC3B1O,MAAKm7B,UAAU,GAAKte,EAAOjO,CAC3B5O,MAAKm7B,UAAU,GAAKte,EAAO6P,EAzLduZ,GAAAf,kBAA2B,0BA2L1C,OAAAe,IApMkD9L,EAAAiB,iBAArChhC,GAAA6rC,6BAA4BA,ItCsnKtC5K,8CAA8C,8DAA8DC,yCAAyC,yDAAyD+K,uDAAuD,uEAAuEvP,sCAAsC,sDAAsDjf,gCAAgCzY,YAAYknC,wEAAwE,SAAShtC,EAAQkB,EAAOJ,GACvjB,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IuC3oKnF,IAAAsL,GAAArS,EAA6B,gCAM7B,IAAAolB,GAAAplB,EAAuC,8CACvC,IAAA6gC,GAAA7gC,EAAmC,yCACnC,IAAAitC,GAAAjtC,EAA8C,yDAG9C,IAAA08B,GAAA18B,EAAsC,sCAKtC,IAAAktC,GAAA,SAAA3lC,GAAoDd,EAAAymC,EAAA3lC,EAgBnD,SAAA2lC,GAAYvlC,EAAawlC,GAAA,GAAAA,QAAA,GAAkC,CAAlCA,EAAA,KAExB5lC,EAAAxG,KAAA2F,KAAM,6BAA8BiB,EAAM,EAE1CjB,MAAKu6B,aAAegM,EAAAG,+BAEpB1mC,MAAK2mC,qBAAuBF,GAAsB,GAAI96B,GAAAiB,SAMhD45B,EAAAjmC,UAAA4Y,kBAAP,SAAyBzJ,EAAmB+K,EAAmCrB,EAAmC4G,GAEjH,GAAI4mB,GAA0C5mC,KAAK26B,QAAUjc,EAAAe,uBAAuBsY,OAAS3e,EAAc4N,wBAA0B5N,EAAcmN,wBACnJvG,GAAsB0W,iBAAiB12B,KAAMumC,EAAAG,gCAAgCG,yBAA0BD,EAAiB9kB,MAExH,IAAI0jB,GAA+BpsB,EAAcyH,yBACjDzH,GAAc0H,oBAAoB0kB,EAAQ,EAE1C,IAAIC,GAA8BrsB,EAAcyH,yBAChDzH,GAAc0H,oBAAoB2kB,EAAO,EAEzC,IAAI5K,GAA6BzhB,EAAcyH,yBAC/CzH,GAAc0H,oBAAoB+Z,EAAM,EACxC,IAAIiM,GAA8B,GAAI9Q,GAAAI,sBAAsByE,EAAKxE,QAASwE,EAAK/Y,MAC/E,IAAI6jB,GAA8BvsB,EAAcyH,yBAChD8kB,GAAQ,GAAI3P,GAAAI,sBAAsBuP,EAAMtP,QAASsP,EAAM7jB,MAEvD,IAAI0hB,GAA4B,GAAIxN,GAAAI,sBAAsB0Q,EAAMzQ,QAASyQ,EAAMhlB,MAAO,EACtF,IAAImd,GAA4B,GAAIjJ,GAAAI,sBAAsBuP,EAAMtP,QAASsP,EAAM7jB,MAAO,EAEtF1I,GAAc0hB,sBAAsB0K,EACpCpsB,GAAc0hB,sBAAsB2K,EACpCrsB,GAAc0hB,sBAAsBD,EAEpC,IAAI3gC,GAAc,EAClBA,IAAQ,OAASsrC,EAAS,QAAUoB,EAAmB,QACvD1sC,IAAQ,OAASsrC,EAAS,MAAQxlB,EAAsBM,gBAAkB,IAE1EpmB,IAAQ,OAASspC,EAAM,IAAMxjB,EAAsBuW,WAAa,IAAMqQ,EAAmB,MAEzF1sC,IAAQ,OAAS+kC,EAAM,IAAMuE,EAAM,IACnCtpC,IAAQ,OAASspC,EAAM,IAAMA,EAAM,IAEnCtpC,IAAQ,OAAS4sC,EAAQ,QAAU7H,EAAM,IAAMuG,EAAS,QAExDtrC,IAAQ,OAASyrC,EAAQ,QAAU1G,EAAM,IAAMuG,EAAS,QACxDtrC,IAAQ,OAASyrC,EAAQ,QAAUA,EAAQ,QAG3CzrC,IAAQ,OAASsrC,EAAS,QAAUsB,EAAQ,QAAU9mB,EAAsBS,qBAAuB,QAEnGvmB,IAAQ,OAASurC,EAAQ,QAAUjC,EAAM,IAAMxjB,EAAsBS,qBAAuB,QAC5FvmB,IAAQ,OAASsrC,EAAS,QAAUA,EAAS,QAAUC,EAAQ,QAC/DvrC,IAAQ,OAASurC,EAAQ,MAAQqB,EAAQ,QAAU9mB,EAAsBS,qBAAuB,QAChGvmB,IAAQ,OAASsrC,EAAS,MAAQC,EAAQ,MAE1CvrC,IAAQ,OAAS4sC,EAAQ,QAAUtB,EAAS,QAAUG,EAAQ,QAG9DzrC,IAAQ,OAASurC,EAAQ,SAAWD,EAAS,SAAWhC,EAAM,IAC9DtpC,IAAQ,OAAS4sC,EAAQ,QAAUA,EAAQ,QAAUrB,EAAQ,QAC7DvrC,IAAQ,OAASurC,EAAQ,QAAUD,EAAS,MAAQG,EAAQ,QAE5DzrC,IAAQ,OAAS8lB,EAAsBS,qBAAuB,QAAUqmB,EAAQ,QAAUrB,EAAQ,QAElG,IAAItgC,GAAa6a,EAAsBkW,kBAAkB57B,MACzD,KAAK,GAAIP,GAAW,EAAGA,EAAIoL,EAAKpL,IAAK,CACpCG,GAAQ,OAASsrC,EAAS,QAAUoB,EAAmB,QACvD1sC,IAAQ,OAASsrC,EAAS,MAAQxlB,EAAsBM,gBAAkB,IAC1EpmB,IAAQ,OAASspC,EAAM,IAAMxjB,EAAsBuW,WAAa,IAAMqQ,EAAmB,MACzF1sC,IAAQ,OAAS+kC,EAAM,IAAMuE,EAAM,IACnCtpC,IAAQ,OAASspC,EAAM,IAAMA,EAAM,IACnCtpC,IAAQ,OAAS4sC,EAAQ,QAAU7H,EAAM,IAAMuG,EAAS,QACxDtrC,IAAQ,OAASyrC,EAAQ,QAAU1G,EAAM,IAAMuG,EAAS,QACxDtrC,IAAQ,OAASyrC,EAAQ,QAAUA,EAAQ,QAC3CzrC,IAAQ,OAASsrC,EAAS,QAAUsB,EAAQ,QAAU9mB,EAAsBkW,kBAAkBn8B,GAAK,QACnGG,IAAQ,OAASurC,EAAQ,QAAUjC,EAAM,IAAMxjB,EAAsBkW,kBAAkBn8B,GAAK,IAC5FG,IAAQ,OAASsrC,EAAS,QAAUA,EAAS,QAAUC,EAAQ,QAC/DvrC,IAAQ,OAASurC,EAAQ,MAAQqB,EAAQ,QAAU9mB,EAAsBkW,kBAAkBn8B,GAAK,IAChGG,IAAQ,OAASsrC,EAAS,MAAQC,EAAQ,MAC1CvrC,IAAQ,OAAS4sC,EAAQ,QAAUtB,EAAS,QAAUG,EAAQ,QAC9DzrC,IAAQ,OAASurC,EAAQ,SAAWD,EAAS,SAAWhC,EAAM,IAC9DtpC,IAAQ,OAAS4sC,EAAQ,QAAUA,EAAQ,QAAUrB,EAAQ,QAC7DvrC,IAAQ,OAASurC,EAAQ,QAAUD,EAAS,MAAQG,EAAQ,QAC5DzrC,IAAQ,OAAS8lB,EAAsBkW,kBAAkBn8B,GAAK,IAAM+sC,EAAQ,QAAUrB,EAAQ,SAE/F,MAAOvrC,GAMDssC,GAAAjmC,UAAA8a,kBAAP,SAAyB0f,GAExB,MAAyCA,GAAS1f,kBAAkBrb,MAM9DwmC,GAAAjmC,UAAA0jB,gCAAP,SAAuC+W,GAGtC,GAAI+L,GAAkB/L,EAAMwL,EAA+BQ,4BAC3D,KAAKD,EACJ,KAAK,IAAK9sC,OAAM,eAAiBusC,EAA+BQ,4BAA8B,aAE/F,IAAID,EAAOzsC,QAAU,EACpBysC,EAAOra,EAAI,MAEXqa,GAAOE,WAERjnC,MAAKm7B,UAAU,GAAK4L,EAAOr4B,CAC3B1O,MAAKm7B,UAAU,GAAK4L,EAAOn4B,CAC3B5O,MAAKm7B,UAAU,GAAK4L,EAAOra,CAC3B,IAAIqa,EAAOpa,GAAK,EACf,KAAK,IAAK1yB,OAAM,4CAEjB+F,MAAKm7B,UAAU,GAAKyI,KAAKC,GAAGkD,EAAOpa,EA/HtB6Z,GAAAQ,4BAAqC,4BAiIpD,OAAAR,IA1IoDrM,EAAAiB,iBAAvChhC,GAAAosC,+BAA8BA,IvCovKxCnL,8CAA8C,8DAA8DC,yCAAyC,yDAAyD4L,yDAAyD,yEAAyEpQ,sCAAsC,sDAAsDjf,gCAAgCzY,YAAY+nC,2DAA2D,SAAS7tC,EAAQkB,EAAOJ,GAC9iB,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IwCnwKnF,IAAAqe,GAAAplB,EAAuC,8CACvC,IAAA6gC,GAAA7gC,EAAmC,yCACnC,IAAA8tC,GAAA9tC,EAAoC,4CAQpC,IAAA+tC,GAAA,SAAAxmC,GAAuCd,EAAAsnC,EAAAxmC,EAkCtC,SAAAwmC,GAAYpmC,EAAa88B,EAAmBC,EAAmBsJ,EAAqBC,EAAqBpJ,EAA0BC,GAApE,GAAAkJ,QAAA,GAAmB,CAAnBA,EAAA,EAAqB,GAAAC,QAAA,GAAmB,CAAnBA,EAAA,EAAqB,GAAApJ,QAAA,GAAwB,CAAxBA,EAAA,EAA0B,GAAAC,QAAA,GAAqB,CAArBA,EAAA,EAElIv9B,EAAAxG,KAAA2F,KAAM,gBAAiBiB,EAAO88B,GAAaC,EAAY,EAAMD,GAAaC,EAAY,EAAI,EAAI,EAE9Fh+B,MAAKu6B,aAAe6M,EAAAI,kBAEpBxnC,MAAKw+B,YAAcT,CACnB/9B,MAAKy+B,YAAcT,CAEnBh+B,MAAKynC,WAAaH,CAClBtnC,MAAK0nC,WAAaH,CAClBvnC,MAAK6+B,gBAAkBV,CACvBn+B,MAAK8+B,aAAeV,EAMdiJ,EAAA9mC,UAAA4Y,kBAAP,SAAyBzJ,EAAmB+K,EAAmCrB,EAAmC4G,GAEjH,GAAI9lB,GAAc,EAClB,IAAI2gC,GAA6BzhB,EAAc8lB,yBAE/C,IAAIyI,GAAuC3nC,KAAK26B,QAAUjc,EAAAe,uBAAuBsY,OAAS3e,EAAc4N,wBAA0B5N,EAAcmN,wBAChJvG,GAAsB0W,iBAAiB12B,KAAMonC,EAAAI,mBAAmBI,YAAaD,EAAc7lB,MAE3F,IAAI9hB,KAAKw+B,YAAa,CACrBtkC,GAAQ,OAAS2gC,EAAO,IAAM7a,EAAsBuW,WAAa,IAAMoR,EAAgB,MAEvF,IAAI3nC,KAAKy+B,YACRvkC,GAAQ,OAAS2gC,EAAO,IAAMA,EAAO,IAAM8M,EAAgB,MAE5DztC,IAAQ,OAAS2gC,EAAO,IAAMA,EAAO,KAGtC3gC,GAAQ,OAAS2gC,EAAO,IAAM8M,EAAgB,OAAU3nC,KAAgB,YAAG66B,EAAO7a,EAAsBwW,YAAc,IACtHt8B,IAAQ,OAAS2gC,EAAO,IAAM8M,EAAgB,MAAQ9M,EAAO,IAC7D3gC,IAAQ,OAAS8lB,EAAsBS,qBAAuB,QAAUT,EAAsBS,qBAAuB,QAAUoa,EAAO,IAEtI,OAAO3gC,GAMDmtC,GAAA9mC,UAAA8a,kBAAP,SAAyB0f,GAExB,MAA4BA,GAAS1f,kBAAkBrb,MAMjDqnC,GAAA9mC,UAAA0jB,gCAAP,SAAuC+W,GAEtC,GAAI6M,GAAiB7M,EAAMqM,EAAkBS,eAC7C,KAAKD,EACJ,KAAK,IAAK5tC,OAAM,eAAiBotC,EAAkBS,eAAiB,aAErE,IAAI9nC,KAAKw+B,YAAa,CACrBx+B,KAAKm7B,UAAU,IAAM0M,EAAMn5B,EAAIm5B,EAAMj5B,GAAG,CACxC5O,MAAKm7B,UAAU,GAAKyI,KAAKmE,IAAIF,EAAMn5B,EAAIm5B,EAAMj5B,GAAG,CAChD,IAAIi5B,EAAMnb,GAAK,EACd,KAAK,IAAKzyB,OAAM,+CACjB+F,MAAKm7B,UAAU,GAAKyI,KAAKC,GAAG,EAAEgE,EAAMnb,CACpC,IAAI1sB,KAAKy+B,YACRz+B,KAAKm7B,UAAU,GAAK0M,EAAMlb,EAAEiX,KAAKC,GAAG,QAC/B,CACN7jC,KAAKm7B,UAAU,GAAK0M,EAAMn5B,CAC1B1O,MAAKm7B,UAAU,GAAK0M,EAAMj5B,EAAIi5B,EAAMn5B,GAlFxB24B,GAAAS,eAAwB,eAqFvC,OAAAT,IA1GuClN,EAAAiB,iBAA1BhhC,GAAAitC,kBAAiBA,IxCk1K3BhM,8CAA8C,8DAA8DC,yCAAyC,yDAAyD0M,4CAA4C,8DAA8DC,oEAAoE,SAAS3uC,EAAQkB,EAAOJ,GACvZ,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IyCr2KnF,IAAAq9B,GAAApkC,EAAsC,uCAGtC,IAAAolB,GAAAplB,EAAuC,8CACvC,IAAA6gC,GAAA7gC,EAAmC,yCACnC,IAAA4uC,GAAA5uC,EAA2C,qDAG3C,IAAA08B,GAAA18B,EAAsC,sCAKtC,IAAA6uC,GAAA,SAAAtnC,GAAgDd,EAAAooC,EAAAtnC,EAe/C,SAAAsnC,GAAYtK,EAAwBC,EAAoBsK,EAAwBnK,EAA2BC,EAAyBmK,GAGnIxnC,EAAAxG,KAAA2F,KAAM,yBAA0B0e,EAAAe,uBAAuBsY,OAAQ,EAAG2F,EAAA9e,qBAAqB8B,eAEvF1gB,MAAKu6B,aAAe2N,EAAAI,2BAEpB,IAAIF,EAAkB,EACrB,KAAK,IAAKnuC,OAAM,8CACjB+F,MAAKs+B,iBAAmBT,CACxB79B,MAAKu+B,aAAeT,CACpB99B,MAAKuoC,kBAAoBH,CACzBpoC,MAAK0+B,aAAeT,CACpBj+B,MAAK4+B,WAAaV,CAClBl+B,MAAKwoC,gBAAkBH,EAMjBF,EAAA5nC,UAAAif,0BAAP,SAAiCwF,GAEhC,GAAIhlB,KAAKs+B,iBACRtZ,EAAqBrE,gBAAkB,IACxC,IAAI3gB,KAAKu+B,aACRvZ,EAAqB9D,gBAAkB,KAMlCinB,GAAA5nC,UAAA4Y,kBAAP,SAAyBzJ,EAAmB+K,EAAmCrB,EAAmC4G,GAEjH,GAAI9lB,GAAc,EAClB,IAAIwV,EAAO2R,sBAAuB,CACjC,GAAIonB,EAEJ,IAAIzoC,KAAKs+B,iBAAkB,CAC1BmK,EAAqBrvB,EAAcyH,yBACnCzH,GAAc0H,oBAAoB2nB,EAAoB,GAGvD,GAAIC,GAAkCtvB,EAAcyH,yBACpDzH,GAAc0H,oBAAoB4nB,EAAW,EAE7C,IAAI7N,GAA6BzhB,EAAcyH,yBAC/C,IAAI8nB,GAAgC,GAAI3S,GAAAI,sBAAsByE,EAAKxE,QAASwE,EAAK/Y,MAAO,EACxF,IAAI2U,GAAiC,GAAIT,GAAAI,sBAAsByE,EAAKxE,QAASwE,EAAK/Y,MAAO,EAEzF,IAAI9hB,KAAKs+B,iBACRllB,EAAc0hB,sBAAsB2N,EAErCrvB,GAAc0hB,sBAAsB4N,EAGpC,IAAIE,GAAyCxvB,EAAc4N,uBAC3DhH,GAAsB0W,iBAAiB12B,KAAMkoC,EAAAI,4BAA4BO,gBAAiBD,EAAiB9mB,MAE3G,IAAI/nB,EAEJ,IAAI+uC,EACJ,IAAIC,EACJ,IAAI/oC,KAAKs+B,iBAAkB,CAC1BwK,EAAgB1vB,EAAc4N,uBAC9BhH,GAAsB0W,iBAAiB12B,KAAMkoC,EAAAI,4BAA4BjJ,uBAAwByJ,EAAchnB,MAC/GinB,GAAiB,GAAI3nC,MACrB,KAAKrH,EAAI,EAAGA,EAAIiG,KAAKuoC,kBAAoB,EAAGxuC,IAC3CgvC,EAAenjC,KAAKwT,EAAc4N,yBAGpC,GAAIuY,EACJ,IAAIyJ,EACJ,IAAIhpC,KAAKu+B,aAAc,CACtBgB,EAAmBnmB,EAAc4N;AACjChH,EAAsB0W,iBAAiB12B,KAAMkoC,EAAAI,4BAA4B7I,mBAAoBF,EAAiBzd,MAC9GknB,GAAoB,GAAI5nC,MACxB,KAAKrH,EAAI,EAAGA,EAAIiG,KAAKuoC,kBAAoB,EAAGxuC,IAC3CivC,EAAkBpjC,KAAKwT,EAAc4N,yBAGvC,GAAIhnB,KAAKs+B,iBACRpkC,GAAQ,OAASuuC,EAAqB,IAAMK,EAAgB,IAC7D,IAAI9oC,KAAKu+B,aACRrkC,GAAQ,OAAS8lB,EAAsBmB,eAAiB,IAAMnB,EAAsBmB,eAAiB,IAAMoe,EAAmB,IAE/H,KAAKxlC,EAAI,EAAGA,EAAIiG,KAAKuoC,kBAAmBxuC,IAAK,CAC5C,OAAQA,GACP,IAAK,GACJG,GAAQ,OAASu8B,EAAW,IAAMzW,EAAsBwW,WAAa,IAAMoS,EAAmB,MAC9F,MACD,KAAK,GACJ1uC,GAAQ,OAASyuC,EAAU,IAAM3oB,EAAsBwW,WAAa,IAAMoS,EAAmB,MAC7F1uC,IAAQ,OAASu8B,EAAW,IAAMkS,EAAU,IAAM3oB,EAAsBM,gBAAkB,IAC1FpmB,IAAQ,OAASu8B,EAAW,IAAMA,EAAW,IAAMmS,EAAmB,MACtE,MACD,KAAK,GACJ1uC,GAAQ,OAASyuC,EAAU,IAAMA,EAAU,IAAMC,EAAmB,MACpE1uC,IAAQ,OAASu8B,EAAW,IAAMkS,EAAU,IAAM3oB,EAAsBM,gBAAkB,IAC1FpmB,IAAQ,OAASu8B,EAAW,IAAMA,EAAW,IAAMmS,EAAmB,MACtE,MACD,KAAK,GACJ1uC,GAAQ,OAASyuC,EAAU,IAAMA,EAAU,IAAMC,EAAmB,MACpE1uC,IAAQ,OAASu8B,EAAW,IAAMkS,EAAU,IAAM3oB,EAAsBM,gBAAkB,IAC1FpmB,IAAQ,OAASu8B,EAAW,IAAMA,EAAW,IAAMmS,EAAmB,MACtE,OAEF,GAAI5oC,KAAKs+B,iBAAkB,CAC1BpkC,GAAQ,OAASwuC,EAAY,IAAMjS,EAAW,IAAMsS,EAAehvC,GAAK,IACxEG,IAAQ,OAASuuC,EAAqB,IAAMA,EAAqB,IAAMC,EAAY,KAEpF,GAAI1oC,KAAKu+B,aAAc,CACtBrkC,GAAQ,OAASwuC,EAAY,IAAMjS,EAAW,IAAMuS,EAAkBjvC,GAAK,IAC3EG,IAAQ,OAAS8lB,EAAsBmB,eAAiB,IAAMnB,EAAsBmB,eAAiB,IAAMunB,EAAY,MAKzH,GAAI1oC,KAAKuoC,mBAAqB,EAC7B9R,EAAWzW,EAAsBwW,eAC7B,CACJ,OAAQx2B,KAAKuoC,mBACZ,IAAK,GACJruC,GAAQ,OAASyuC,EAAU,IAAM3oB,EAAsBwW,WAAa,IAAMoS,EAAmB,MAC7F,MACD,KAAK,GACJ1uC,GAAQ,OAASyuC,EAAU,IAAMA,EAAU,IAAMC,EAAmB,MACpE,MACD,KAAK,GACJ1uC,GAAQ,OAASyuC,EAAU,IAAMA,EAAU,IAAMC,EAAmB,MACpE,MACD,KAAK,GACJ1uC,GAAQ,OAASyuC,EAAU,IAAMA,EAAU,IAAMC,EAAmB,MACpE,OAEF1uC,GAAQ,OAASu8B,EAAW,IAAMkS,EAAU,IAAM3oB,EAAsBM,gBAAkB,KAE3F,GAAItgB,KAAKs+B,iBAAkB,CAC1BpkC,GAAQ,OAASwuC,EAAY,IAAMjS,EAAW,IAAMsS,EAAe/oC,KAAKuoC,mBAAqB,IAC7FruC,IAAQ,OAASuuC,EAAqB,IAAMA,EAAqB,IAAMC,EAAY,IACnFxuC,IAAQ,OAAS8lB,EAAsBY,eAAiB,IAAMZ,EAAsBY,eAAiB,IAAM6nB,EAAqB,KAEjI,GAAIzoC,KAAKu+B,aAAc,CACtBrkC,GAAQ,OAASwuC,EAAY,IAAMjS,EAAW,IAAMuS,EAAkBhpC,KAAKuoC,mBAAqB,IAChGruC,IAAQ,OAAS8lB,EAAsBmB,eAAiB,IAAMnB,EAAsBmB,eAAiB,IAAMunB,EAAY,MAIzH,MAAOxuC,GAGT,OAAAiuC,IArKgDhO,EAAAiB,iBAAnChhC,GAAA+tC,2BAA0BA,IzCy+KpC9H,uCAAuC,uDAAuDhF,8CAA8C,8DAA8DC,yCAAyC,yDAAyD2N,qDAAqD,qEAAqEnS,sCAAsC,wDAAwDoS,iEAAiE,SAAS5vC,EAAQkB,EAAOJ,GAChmB,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I0C1/KnF,IAAAq9B,GAAApkC,EAAsC,uCAGtC,IAAAolB,GAAAplB,EAAuC,8CACvC,IAAA6gC,GAAA7gC,EAAmC,yCACnC,IAAA6vC,GAAA7vC,EAAyC,kDAGzC,IAAA08B,GAAA18B,EAAsC,sCAMtC,IAAA8vC,GAAA,SAAAvoC,GAA6Cd,EAAAqpC,EAAAvoC,EA4D5C,SAAAuoC,GAAYnoC,EAAa88B,EAAmBC,EAAmBqL,EAAuBC,EAAoBnL,EAA0BC,EAAuBmL,GAA5F,GAAAF,QAAA,GAAqB,CAArBA,EAAA,EAAuB,GAAAC,QAAA,GAAkB,CAAlBA,EAAA,EAAoB,GAAAnL,QAAA,GAAwB,CAAxBA,EAAA,EAA0B,GAAAC,QAAA,GAAqB,CAArBA,EAAA,EAAuB,GAAAmL,QAAA,GAAqC,CAArCA,EAAqBzU,OAAO0U,UAEtL3oC,EAAAxG,KAAA2F,KAAM,sBAAuBiB,EAAM88B,EAAYC,EAAW,EAAI,EAAK,EAAGN,EAAA9e,qBAAqB4B,cAAgB,EAE3GxgB,MAAKu6B,aAAe4O,EAAAM,wBAEpBzpC,MAAKw+B,YAAcT,CACnB/9B,MAAKy+B,YAAcT,CAEnBh+B,MAAK0pC,aAAeL,CACpBrpC,MAAK2pC,UAAYL,CACjBtpC,MAAK8+B,aAAeV,CACpBp+B,MAAK6+B,gBAAkBV,CACvBn+B,MAAK4pC,cAAgBhG,KAAKiG,IAAIN,EAAaF,EAAWC,GA7CvD9oC,OAAA+B,eAAW6mC,EAAA7oC,UAAA,c1C4/KJiC,I0C5/KP,WAEC,MAAOxC,MAAK0pC,c1C6/KN9mC,WAAY,KACZC,aAAc,M0Cx/KrBrC,QAAA+B,eAAW6mC,EAAA7oC,UAAA,W1C8/KJiC,I0C9/KP,WAEC,MAAOxC,MAAK2pC,W1C+/KN/mC,WAAY,KACZC,aAAc,M0C1/KrBrC,QAAA+B,eAAW6mC,EAAA7oC,UAAA,e1CggLJiC,I0ChgLP,WAEC,MAAOxC,MAAK4pC,e1CigLNhnC,WAAY,KACZC,aAAc,M0Cj+KdumC,GAAA7oC,UAAAkZ,cAAP,SAAqB/J,EAAmB+K,EAAmCrB,EAAmC4G,GAG7G,GAAI8pB,GAAsC1wB,EAAc4N,uBACxD,IAAI+iB,GAAuC/pC,KAAK26B,QAAUjc,EAAAe,uBAAuBsY,OAAS3e,EAAc4N,wBAA0B5N,EAAcmN,wBAChJvG,GAAsB0W,iBAAiB12B,KAAMmpC,EAAAM,yBAAyBO,WAAYF,EAAchoB,MAChG9B,GAAsB0W,iBAAiB12B,KAAMmpC,EAAAM,yBAAyBQ,WAAYF,EAAcjoB,MAEhG,IAAIooB,GAA+B,GAAIlU,GAAAI,sBAAsB0T,EAAczT,QAASyT,EAAchoB,MAAO,EACzG,IAAIqoB,GAA8B,GAAInU,GAAAI,sBAAsB0T,EAAczT,QAASyT,EAAchoB,MAAO,EACxG,IAAIsoB,GAA8B,GAAIpU,GAAAI,sBAAsB0T,EAAczT,QAASyT,EAAchoB,MAAO,EAExG,IAAIuoB,GAA+B,GAAIrU,GAAAI,sBAAsB2T,EAAc1T,QAAS0T,EAAcjoB,MAAO,EACzG,IAAIwoB,GAA8B,GAAItU,GAAAI,sBAAsB2T,EAAc1T,QAAS0T,EAAcjoB,MAAO,EACxG,IAAIyoB,GAAkC,GAAIvU,GAAAI,sBAAsB2T,EAAc1T,QAAS0T,EAAcjoB,MAAO,EAE5G,IAAI+Y,GAA6BzhB,EAAcyH,yBAC/C,IAAIrE,GAA6B,GAAIwZ,GAAAI,sBAAsByE,EAAKxE,QAASwE,EAAK/Y,MAAO,EACrF,IAAI0oB,GAAgC,GAAIxU,GAAAI,sBAAsByE,EAAKxE,QAASwE,EAAK/Y,MAAO,EACxF+Y,GAAO,GAAI7E,GAAAI,sBAAsByE,EAAKxE,QAASwE,EAAK/Y,MAAO,EAC3D,IAAIgR,GAA8B,GAAIkD,GAAAI,sBAAsByE,EAAKxE,QAASwE,EAAK/Y,MAAO,EAEtF,IAAIjoB,GAA0B,GAAIm8B,GAAAI,sBAAsBpW,EAAsBwB,SAAS6U,QAASrW,EAAsBwB,SAASM,MAAO,EACtI,IAAI2oB,GAA0B,GAAIzU,GAAAI,sBAAsBpW,EAAsBwB,SAAS6U,QAASrW,EAAsBwB,SAASM,MAAO,EAEtI,IAAI5nB,GAAc,EAElBA,IAAQ,OAASL,EAAI,IAAMA,EAAI,IAAMswC,EAAQ,IAC7C,IAAInqC,KAAK2pC,UAAY,EACpBzvC,GAAQ,OAASuwC,EAAI,IAAMA,EAAI,IAAML,EAAQ,IAE9C,IAAIpqC,KAAKw+B,YAAa,CACrB,GAAIx+B,KAAKy+B,YACRvkC,GAAQ,OAASsiB,EAAO,IAAMwD,EAAsBuW,WAAa,IAAMgU,EAAY,SAEnFrwC,IAAQ,OAASsiB,EAAO,IAAMwD,EAAsBuW,WAAa,IAClEr8B,IAAQ,OAASsiB,EAAO,IAAMA,EAAO,IAAM8tB,EAAQ,IACnDpwC,IAAQ,OAASsiB,EAAO,IAAMA,EAAO,IACrCtiB,IAAQ,OAASsiB,EAAO,IAAMA,EAAO,IAAM8tB,EAAQ,IACnDpwC,IAAQ,OAAS2gC,EAAO,IAAMre,EAAO,IAAM6tB,EAAS,SAEpDnwC,IAAQ,OAAS2gC,EAAKnZ,WAAa,IAAM1B,EAAsBwW,WAAa,IAAM0T,EAAS,IAE5F,IAAIlqC,KAAK2pC,UAAY,EAAG,CACvBzvC,GAAQ,OAAS44B,EAAQ,IAAM+H,EAAO,IACtC3gC,IAAQ,OAASswC,EAAU,IAAM3P,EAAO,IAAM/H,EAAQ,IACtD54B,IAAQ,OAASswC,EAAU,IAAMA,EAAU,IAAMJ,EAAQ,IACzDlwC,IAAQ,OAASuwC,EAAI,IAAMA,EAAI,IAAMD,EAAU,KAGhDtwC,GAAQ,OAAS44B,EAAQ,IAAM+H,EAAO,IAAMsP,EAAQ,IACpDjwC,IAAQ,OAAS2gC,EAAO,IAAM/H,EAAQ,IACtC54B,IAAQ,OAAS44B,EAAQ,IAAMA,EAAQ,IAAM+H,EAAO,IACpD3gC,IAAQ,OAAS2gC,EAAO,IAAM/H,EAAQ,IAAMqX,EAAQ,IAEpD,IAAInqC,KAAK2pC,UAAY,EACpBzvC,GAAQ,OAAS2gC,EAAO,IAAMA,EAAO,IACtC3gC,IAAQ,OAASL,EAAI,IAAMA,EAAI,IAAMghC,EAAO,IAE5C,OAAO3gC,GAMDkvC,GAAA7oC,UAAA8a,kBAAP,SAAyB0f,GAExB,MAAkCA,GAAS1f,kBAAkBrb,MAMvDopC,GAAA7oC,UAAAif,0BAAP,SAAiCwF,GAEhCA,EAAqB1D,UAAY,KAM3B8nB,GAAA7oC,UAAA0jB,gCAAP,SAAuC+W,GAEtC,GAAIh7B,KAAKw+B,YAAa,CACrB,GAAIkM,GAAmB1P,EAAMoO,EAAwBuB,YACrD,KAAKD,EACJ,KAAK,IAAKzwC,OAAM,eAAiBmvC,EAAwBuB,YAAc,aACxE,IAAID,EAAQh8B,GAAK,EAChB,KAAK,IAAKzU,OAAM,+CACjB,IAAIiwC,GAAgBlqC,KAAK4pC,cAAc5pC,KAAK0pC,YAC5C1pC,MAAKm7B,UAAU,GAAK+O,EAAOQ,EAAQh8B,CACnC1O,MAAKm7B,UAAU,GAAKuP,EAAQh8B,CAC5B,IAAI1O,KAAKy+B,YACRz+B,KAAKm7B,UAAU,GAAKuP,EAAQ97B,GArJjBw6B,GAAAuB,YAAqB,YAwJpC,OAAAvB,IA/K6CjP,EAAAiB,iBAAhChhC,GAAAgvC,wBAAuBA,I1C6oLjC/I,uCAAuC,uDAAuDhF,8CAA8C,8DAA8DC,yCAAyC,yDAAyDsP,kDAAkD,kEAAkE9T,sCAAsC,wDAAwD+T,0DAA0D,SAASvxC,EAAQkB,EAAOJ,GACnlB,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I2C/pLnF,IAAAqe,GAAAplB,EAAuC,8CACvC,IAAA6gC,GAAA7gC,EAAmC,yCACnC,IAAAwxC,GAAAxxC,EAAmC,2CAQnC,IAAAimB,GAAA,SAAA1e,GAAsCd,EAAAwf,EAAA1e,EAgBrC,SAAA0e,GAAYV,EAA8BC,EAA6BC,GAA3D,GAAAF,QAAA,GAA4B,CAA5BA,EAAA,MAA8B,GAAAC,QAAA,GAA2B,CAA3BA,EAAA,MAA6B,GAAAC,QAAA,GAAyB,CAAzBA,EAAA,MAEtEle,EAAAxG,KAAA2F,KAAM,eAAgB0e,EAAAe,uBAAuBC,aAAc,EAAG,EAE9D1f,MAAKu6B,aAAeuQ,EAAAC,iBAEpB/qC,MAAKgrC,eAAiBnsB,CACtB7e,MAAKirC,cAAgBnsB,CACrB9e,MAAKkrC,YAAcnsB,EAMbQ,EAAAhf,UAAA4Y,kBAAP,SAAyBzJ,EAAmB+K,EAAmCrB,EAAmC4G,GAEjH,GAAImrB,GAA2C/xB,EAAcmN,wBAC7DvG,GAAsB0W,iBAAiB12B,KAAM8qC,EAAAC,kBAAkBK,kBAAmBD,EAAmBrpB,MACrG,IAAIupB,GAAkCjyB,EAAc4N,uBACpDhH,GAAsB0W,iBAAiB12B,KAAM8qC,EAAAC,kBAAkBO,oBAAqBD,EAAUvpB,MAE9F,IAAI5nB,GAAc,EAClBA,IAAQ,OAAS8lB,EAAsBuW,WAAa,IAAM8U,EAAY,IAAMF,EAAqB,MAEjG,IAAItQ,GAA6BzhB,EAAc8lB,yBAC/ChlC,IAAQ,OAAS2gC,EAAO,IAAM7a,EAAsBuW,WAAa,IAAMvW,EAAsBM,gBAAkB,IAC/GpmB,IAAQ,OAAS8lB,EAAsBS,qBAAuB,QAAUT,EAAsBS,qBAAuB,QAAUoa,EAAO,IACtI,IAAI76B,KAAKgrC,eAAgB,CACxB,GAAIhrC,KAAKirC,cAAe,CACvB,GAAIM,GAA4BnyB,EAAc8lB,yBAC9C,IAAIl/B,KAAKkrC,YAAa,CACrBhxC,GAAQ,OAASqxC,EAAM,IAAMvrB,EAAsBuW,WAAa,IAAM4U,EAAqB,MAC3FjxC,IAAQ,OAASqxC,EAAM,IAAMA,EAAM,IACnCrxC,IAAQ,OAAS8lB,EAAsBuW,WAAa,IAAMgV,EAAM,IAAMJ,EAAqB,MAC3FjxC,IAAQ,OAASqxC,EAAM,IAAMvrB,EAAsBuW,WAAa,IAAM4U,EAAqB,MAC3FjxC,IAAQ,OAAS8lB,EAAsBS,qBAAuB,QAAUT,EAAsBS,qBAAuB,QAAU8qB,EAAM,SAC/H,CACNrxC,GAAQ,OAASqxC,EAAM,IAAMvrB,EAAsBuW,WAAa,IAAM4U,EAAqB,MAC3FjxC,IAAQ,OAASqxC,EAAM,IAAMA,EAAM,IACnCrxC,IAAQ,OAAS8lB,EAAsBuW,WAAa,IAAMgV,EAAM,IAAMJ,EAAqB,YAEtF,CACN,GAAIK,GAA4BpyB,EAAc8lB,yBAC9ChlC,IAAQ,OAASsxC,EAAM,IAAML,EAAqB,MAAQnrB,EAAsBuW,WAAa,IAC7Fr8B,IAAQ,OAAS8lB,EAAsBS,qBAAuB,QAAUT,EAAsBS,qBAAuB,QAAU+qB,EAAM,MAGvItxC,GAAQ,OAAS8lB,EAAsBwW,WAAa,IAAMxW,EAAsBuW,WAAa,IAAM4U,EAAqB,MACxH,OAAOjxC,GAMDqlB,GAAAhf,UAAA8a,kBAAP,SAAyB0f,GAExB,MAA2BA,GAAS1f,kBAAkBrb,MAMhDuf,GAAAhf,UAAA0jB,gCAAP,SAAuC+W,GAEtCh7B,KAAKm7B,UAAU,GAAKH,EAAMnX,SAC1B7jB,MAAKm7B,UAAU,GAAKH,EAAMlX,QAC1B9jB,MAAKm7B,UAAU,GAAKH,EAAMjX,MAAQiX,EAAMlX,QACxC9jB,MAAKm7B,UAAU,GAAK,EAAEH,EAAMlX,SAG9B,OAAAvE,IAtFsC4a,EAAAiB,iBAAzBhhC,GAAAmlB,iBAAgBA,I3CyuL1B8b,8CAA8C,8DAA8DC,yCAAyC,yDAAyDmQ,2CAA2C,6DAA6DC,wDAAwD,SAASpyC,EAAQkB,EAAOJ,GACzY,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I4C5vLnF,IAAAsL,GAAArS,EAA6B,gCAG7B,IAAAokC,GAAApkC,EAAsC,uCAEtC,IAAAolB,GAAAplB,EAAuC,8CACvC,IAAA6gC,GAAA7gC,EAAmC,yCACnC,IAAAqyC,GAAAryC,EAAkC,yCAGlC,IAAA08B,GAAA18B,EAAsC,sCAKtC,IAAAsyC,GAAA,SAAA/qC,GAAoCd,EAAA6rC,EAAA/qC,EA2BnC,SAAA+qC,GAAY3qC,EAAaqpC,EAAkBzC,EAAkBgE,GAApC,GAAAvB,QAAA,GAAgB,CAAhBA,EAAA,EAAkB,GAAAzC,QAAA,GAAgB,CAAhBA,EAAA,EAAkB,GAAAgE,QAAA,GAAiB,CAAjBA,EAAA,IAG5DhrC,EAAAxG,KAAA2F,KAAM,aAAc0e,EAAAe,uBAAuBsY,OAAQ,EAAG2F,EAAA9e,qBAAqB4B,cAAgB,EAE3FxgB,MAAKu6B,aAAeoR,EAAAG,eAEpB9rC,MAAK+rC,OAASzB,CACdtqC,MAAKgsC,OAASnE,CACd7nC,MAAKisC,MAAQJ,CAEb7rC,MAAKksC,eAMN1rC,OAAA+B,eAAWqpC,EAAArrC,UAAA,S5CsuLJiC,I4CtuLP,WAEC,MAAOxC,MAAK+rC,Q5CuuLNtpC,I4CpuLP,SAAiBC,GAEhB1C,KAAK+rC,OAASrpC,CAEd1C,MAAKksC,gB5CouLCtpC,WAAY,KACZC,aAAc,M4C/tLrBrC,QAAA+B,eAAWqpC,EAAArrC,UAAA,S5CquLJiC,I4CruLP,WAEC,MAAOxC,MAAKgsC,Q5CsuLNvpC,I4CnuLP,SAAiBC,GAEhB1C,KAAKgsC,OAAStpC,CAEd1C,MAAKksC,gB5CmuLCtpC,WAAY,KACZC,aAAc,M4C9tLrBrC,QAAA+B,eAAWqpC,EAAArrC,UAAA,Q5CouLJiC,I4CpuLP,WAEC,MAAOxC,MAAKisC,O5CquLNxpC,I4CluLP,SAAgBC,GAEf1C,KAAKisC,MAAQvpC,G5CmuLPE,WAAY,KACZC,aAAc,M4C9tLd+oC,GAAArrC,UAAAkZ,cAAP,SAAqB/J,EAAmB+K,EAAmCrB,EAAmC4G,GAE7G,GAAI9lB,GAAc,EAElB,IAAIiyC,GAAgC/yB,EAAc4N,uBAClDhH,GAAsB0W,iBAAiB12B,KAAM2rC,EAAAG,gBAAgBM,SAAUD,EAAQrqB,MAE/E,IAAIuqB,GAAmBrsC,KAAKisC,OAAS,IAAK,EAAKjsC,KAAKisC,OAAS,IAAK,EAAI,CAEtE,IAAIlnC,GAA+B,GAAIixB,GAAAI,sBAAsBpW,EAAsBwB,SAAS6U,QAASrW,EAAsBwB,SAASM,MAAOuqB,EAE3I,IAAIpN,GAA4B7lB,EAAc8lB,yBAE9C,IAAIl/B,KAAKgsC,QAAU,EAClB9xC,GAAQ,OAAS6K,EAAS,IAAMA,EAAS,IAAMonC,EAAU,MAE1DjyC,IAAQ,OAAS+kC,EAAM,IAAMjf,EAAsBuW,WAAa,IAAM4V,EAAU,MAChFjyC,IAAQ,OAAS+kC,EAAM,IAAMA,EAAM,IACnC/kC,IAAQ,OAAS6K,EAAS,IAAMA,EAAS,IAAMk6B,EAAM,IAErD,OAAO/kC,GAMD0xC,GAAArrC,UAAA8a,kBAAP,SAAyB0f,GAExB,MAAyBA,GAAS1f,kBAAkBrb,MAG7C4rC,GAAArrC,UAAA2rC,aAAR,WAEClsC,KAAKssC,SAAW,GAAI3gC,GAAAiB,SAASg3B,KAAKC,GAAG,EAAE7jC,KAAK+rC,OAAQ/rC,KAAKgsC,OAAQ,EAAG,GAM9DJ,GAAArrC,UAAAif,0BAAP,SAAiCwF,GAEhCA,EAAqB1D,UAAY,KAxHpBsqB,GAAAW,OAAgB,GAKhBX,GAAAY,OAAgB,GAqH/B,OAAAZ,IAlIoCzR,EAAAiB,iBAAvBhhC,GAAAwxC,eAAcA,I5Ck2LxBvL,uCAAuC,uDAAuDhF,8CAA8C,8DAA8DC,yCAAyC,yDAAyDmR,yCAAyC,yDAAyD3V,sCAAsC,sDAAsDjf,gCAAgCzY,YAAYstC,8DAA8D,SAASpzC,EAAQkB,EAAOJ,GAC/mB,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I6Ct3LnF,IAAAsL,GAAArS,EAA6B,gCAM7B,IAAAolB,GAAAplB,EAAuC,8CACvC,IAAA6gC,GAAA7gC,EAAmC,yCACnC,IAAAqzC,GAAArzC,EAAsC,+CAQtC,IAAAszC,GAAA,SAAA/rC,GAA0Cd,EAAA6sC,EAAA/rC,EAiBzC,SAAA+rC,GAAY3rC,EAAa4rC,GAAA,GAAAA,QAAA,GAAwB,CAAxBA,EAAA,KAExBhsC,EAAAxG,KAAA2F,KAAM,mBAAoBiB,EAAM,EAEhCjB,MAAKu6B,aAAeoS,EAAAG,qBAEpB9sC,MAAK+sC,WAAaF,GAAY,GAAIlhC,GAAAiB,SAM5BggC,EAAArsC,UAAA4Y,kBAAP,SAAyBzJ,EAAmB+K,EAAmCrB,EAAmC4G,GAEjH,GAAIgtB,GAAuChtC,KAAK26B,QAAUjc,EAAAe,uBAAuBsY,OAAS3e,EAAc4N,wBAA0B5N,EAAcmN,wBAChJvG,GAAsB0W,iBAAiB12B,KAAM2sC,EAAAG,sBAAsBG,eAAgBD,EAAclrB,MAEjG,IAAIya,GAAiCnjB,EAAcyH,yBACnD,IAAI3mB,GAAc,EAClBA,IAAQ,OAASqiC,EAAW,IAAMvc,EAAsBuW,WAAa,IAAMyW,EAAgB,IAC3F9yC,IAAQ,OAAS8lB,EAAsBK,eAAiB,QAAUkc,EAAW,IAAMvc,EAAsBK,eAAiB,QAE1H,IAAI5F,EAAayF,aAChBhmB,GAAQ,OAAS8lB,EAAsBO,eAAiB,QAAUysB,EAAgB,QAAUhtB,EAAsBO,eAAiB,QAEpI,OAAOrmB,GAMD0yC,GAAArsC,UAAA8a,kBAAP,SAAyB0f,GAExB,MAA+BA,GAAS1f,kBAAkBrb,MAMpD4sC,GAAArsC,UAAA0jB,gCAAP,SAAuC+W,GAEtC,GAAIkS,GAAyBlS,EAAM4R,EAAqBO,kBACxD,KAAKD,EACJ,KAAM,IAAIjzC,OAAM,eAAiB2yC,EAAqBO,kBAAoB,aAE3EntC,MAAKm7B,UAAU,GAAK+R,EAAcx+B,CAClC1O,MAAKm7B,UAAU,GAAK+R,EAAct+B,CAClC5O,MAAKm7B,UAAU,GAAK+R,EAAcxgB,EAvDrBkgB,GAAAO,kBAA2B,kBAyD1C,OAAAP,IAlE0CzS,EAAAiB,iBAA7BhhC,GAAAwyC,qBAAoBA,I7Co6L9BvR,8CAA8C,8DAA8DC,yCAAyC,yDAAyD8R,+CAA+C,+DAA+Dv1B,gCAAgCzY,YAAYiuC,gEAAgE,SAAS/zC,EAAQkB,EAAOJ,GACnc,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I8Cz7LnF,IAAA+4B,GAAA9/B,EAAmC,uDAGnC,IAAAg0C,GAAAh0C,EAAwC,iDAKxC,IAAAi0C,GAAA,SAAA1sC,GAA4Cd,EAAAwtC,EAAA1sC,EAe3C,SAAA0sC,KAEC1sC,EAAAxG,KAAA2F,KAEAA,MAAKu6B,aAAe+S,EAAAE,wBAMdD,EAAAhtC,UAAA8a,kBAAP,SAAyB0f,GAExB,MAAiCA,GAAS1f,kBAAkBrb,MAE9D,OAAAutC,IA7B4CnU,EAAAY,kBAA/B5/B,GAAAmzC,uBAAsBA,I9C08LhCE,iDAAiD,iEAAiExT,uDAAuD76B,YAAYsuC,0DAA0D,SAASp0C,EAAQkB,EAAOJ,GAC1Q,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I+Cn9LnF,IAAAstC,GAAAr0C,EAAsC,8CACtC,IAAAs0C,GAAAt0C,EAAmC,2CAKnC,IAAAu0C,GAAA,SAAAhtC,GAAsCd,EAAA8tC,EAAAhtC,EAqBrC,SAAAgtC,KAEChtC,EAAAxG,KAAA2F,KArBOA,MAAA8tC,QAA8B,GAAI1sC,MAMnCpB,MAAA+tC,YAAsB,KAiB5B/tC,MAAKu6B,aAAeqT,EAAAI,kBAZrBxtC,OAAA+B,eAAWsrC,EAAAttC,UAAA,U/C09LJiC,I+C19LP,WAEC,MAAOxC,MAAK8tC,S/C29LNlrC,WAAY,KACZC,aAAc,M+Cz8LdgrC,GAAAttC,UAAA0tC,SAAP,SAAgBC,EAA2BpqB,GAE1C9jB,KAAK8tC,QAAQloC,KAAKsoC,EAClBluC,MAAK25B,YAAY/zB,KAAKke,EAEtB9jB,MAAK05B,YAAc15B,KAAK25B,YAAYr/B,MAEpC0F,MAAKw5B,cAAgB,KAMfqU,GAAAttC,UAAA8a,kBAAP,SAAyB0f,GAExB,MAA2BA,GAAS1f,kBAAkBrb,MAMhD6tC,GAAAttC,UAAAu5B,eAAP,WAECj5B,EAAAN,UAAMu5B,eAAcz/B,KAAA2F,KAEpB,IAAIjG,GAAWiG,KAAK05B,YAAc,CAClC,IAAIyU,GAAaC,EAAajxB,CAC9B,OAAOpjB,IAAK,CACXiG,KAAKu5B,iBAAmBv5B,KAAK25B,YAAY5/B,EACzCo0C,GAAKnuC,KAAK8tC,QAAQ/zC,GAAGowB,WAAW,GAAGsC,WACnC2hB,GAAKpuC,KAAK8tC,QAAQ/zC,EAAI,GAAGowB,WAAW,GAAGsC,WACvCtP,GAAQixB,EAAGj5B,SAASg5B,EACpBnuC,MAAK45B,aAAalrB,GAAKyO,EAAMzO,CAC7B1O,MAAK45B,aAAahrB,GAAKuO,EAAMvO,CAC7B5O,MAAK45B,aAAalN,GAAKvP,EAAMuP,EAG9B,GAAI1sB,KAAKy5B,qBAAuBz5B,KAAKs5B,UAAW,CAC/Ct5B,KAAKu5B,iBAAmBv5B,KAAK25B,YAAY35B,KAAK05B,YAAc,EAC5DyU,GAAKnuC,KAAK8tC,QAAQ,GAAG3jB,WAAW,GAAGsC,WACnC2hB,GAAKpuC,KAAK8tC,QAAQ,GAAG3jB,WAAW,GAAGsC,WACnCtP,GAAQixB,EAAGj5B,SAASg5B,EACpBnuC,MAAK45B,aAAalrB,GAAKyO,EAAMzO,CAC7B1O,MAAK45B,aAAahrB,GAAKuO,EAAMvO,CAC7B5O,MAAK45B,aAAalN,GAAKvP,EAAMuP,GAGhC,OAAAmhB,IAjFsCF,EAAAtU,sBAAzBj/B,GAAAyzC,iBAAgBA,I/C4hM1BQ,8CAA8C,8DAA8DC,2CAA2C,6DAA6DC,gEAAgE,SAASj1C,EAAQkB,EAAOJ,GAC/S,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IgD3iMnF,IAAA+4B,GAAA9/B,EAAmC,uDAGnC,IAAAk1C,GAAAl1C,EAAwC,iDAKxC,IAAAm1C,GAAA,SAAA5tC,GAA4Cd,EAAA0uC,EAAA5tC,EAe3C,SAAA4tC,KAEC5tC,EAAAxG,KAAA2F,KAEAA,MAAKu6B,aAAeiU,EAAAE,wBAMdD,EAAAluC,UAAA8a,kBAAP,SAAyB0f,GAExB,MAAiCA,GAAS1f,kBAAkBrb,MAE9D,OAAAyuC,IA7B4CrV,EAAAY,kBAA/B5/B,GAAAq0C,uBAAsBA,CA+BnCjuC,QAAA+B,eAAAnI,EAAA,cAAAsI,MAAA,MhD8hMAtI,GAAQu0C,QgD9hMOF,IhD+hMZG,iDAAiD,iEAAiE3U,uDAAuD76B,YAAYyvC,iEAAiE,SAASv1C,EAAQkB,EAAOJ,GACjR,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IiD3kMnF,IAAA+4B,GAAA9/B,EAAmC,uDAGnC,IAAAw1C,GAAAx1C,EAAyC,kDAKzC,IAAAy1C,GAAA,SAAAluC,GAA6Cd,EAAAgvC,EAAAluC,EAsB5C,SAAAkuC,KAECluC,EAAAxG,KAAA2F,KAEAA,MAAKu6B,aAAeuU,EAAAE,yBAMdD,EAAAxuC,UAAA8a,kBAAP,SAAyB0f,GAExB,MAAkCA,GAAS1f,kBAAkBrb,MAG/D,OAAA+uC,IArC6C3V,EAAAY,kBAAhC5/B,GAAA20C,wBAAuBA,IjDylMjCE,kDAAkD,kEAAkEhV,uDAAuD76B,YAAY8vC,8DAA8D,SAAS51C,EAAQkB,EAAOJ,GAChR,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IkDtmMnF,IAAA+4B,GAAA9/B,EAAmC,uDAGnC,IAAA61C,GAAA71C,EAAsC,+CAKtC,IAAA81C,GAAA,SAAAvuC,GAA0Cd,EAAAqvC,EAAAvuC,EAczC,SAAAuuC,KAECvuC,EAAAxG,KAAA2F,KAdMA,MAAAqvC,SAAoC,GAAIjuC,MAgB9CpB,MAAKu6B,aAAe4U,EAAAG,sBAZrB9uC,OAAA+B,eAAW6sC,EAAA7uC,UAAA,alD0mMJiC,IkD1mMP,WAEC,MAAOxC,MAAKuvC,YlD2mMN3sC,WAAY,KACZC,aAAc,MkD1lMdusC,GAAA7uC,UAAAivC,cAAP,SAAqBC,GAEpB,MAAOzvC,MAAKqvC,SAASt2B,QAAQ02B,GAQvBL,GAAA7uC,UAAAmvC,WAAP,SAAkB5tB,GAEjB,MAAO9hB,MAAKqvC,SAASvtB,GAMfstB,GAAA7uC,UAAAovC,SAAP,SAAgBF,GAEfzvC,KAAKqvC,SAASrvC,KAAKuvC,cAAgBE,EAM7BL,GAAA7uC,UAAA8a,kBAAP,SAAyB0f,GAExB,MAA+BA,GAAS1f,kBAAkBrb,MAE5D,OAAAovC,IAxD0ChW,EAAAY,kBAA7B5/B,GAAAg1C,qBAAoBA,CA0DjC5uC,QAAA+B,eAAAnI,EAAA,cAAAsI,MAAA,MlD4lMAtI,GAAQu0C,QkD5lMOS,IlD6lMZQ,+CAA+C,+DAA+D3V,uDAAuD76B,YAAYywC,wDAAwD,SAASv2C,EAAQkB,EAAOJ,GACpQ,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,ImDpqMnF,IAAAsL,GAAArS,EAA6B,gCAI7B,IAAAq0C,GAAAr0C,EAAsC,8CACtC,IAAAw2C,GAAAx2C,EAAkC,yCAKlC,IAAAy2C,GAAA,SAAAlvC,GAAoCd,EAAAgwC,EAAAlvC,EAgBnC,SAAAkvC,KAEClvC,EAAAxG,KAAA2F,KAhBOA,MAAA8tC,QAA0B,GAAI1sC,MAC9BpB,MAAAgwC,cAAgC,GAAI5uC,MAiB3CpB,MAAKu6B,aAAeuV,EAAAG,gBAZrBzvC,OAAA+B,eAAWwtC,EAAAxvC,UAAA,UnDyqMJiC,ImDzqMP,WAEC,MAAOxC,MAAK8tC,SnD0qMNlrC,WAAY,KACZC,aAAc,MmDvpMdktC,GAAAxvC,UAAA0tC,SAAP,SAAgBiC,EAAmBpsB,EAAiB2I,GAAA,GAAAA,QAAA,GAA2B,CAA3BA,EAAA,KAEnDzsB,KAAK8tC,QAAQloC,KAAKsqC,EAClBlwC,MAAK25B,YAAY/zB,KAAKke,EACtB9jB,MAAKgwC,cAAcpqC,KAAK6mB,GAAe,GAAI9gB,GAAAiB,SAE3C5M,MAAK05B,YAAc15B,KAAK25B,YAAYr/B,MAEpC0F,MAAKw5B,cAAgB,KAMfuW,GAAAxvC,UAAAu5B,eAAP,WAECj5B,EAAAN,UAAMu5B,eAAcz/B,KAAA2F,KAEpB,IAAIjG,GAAWiG,KAAK05B,YAAc,CAClC,IAAIyU,GAAaC,EAAajxB,CAC9B,OAAOpjB,IAAK,CACXiG,KAAKu5B,iBAAmBv5B,KAAK25B,YAAY5/B,EACzCo0C,GAAKnuC,KAAKgwC,cAAcj2C,EACxBq0C,GAAKpuC,KAAKgwC,cAAcj2C,EAAI,EAC5BojB,GAAQixB,EAAGj5B,SAASg5B,EACpBnuC,MAAK45B,aAAalrB,GAAKyO,EAAMzO,CAC7B1O,MAAK45B,aAAahrB,GAAKuO,EAAMvO,CAC7B5O,MAAK45B,aAAalN,GAAKvP,EAAMuP,EAG9B,GAAI1sB,KAAK05B,YAAc,IAAM15B,KAAKy5B,qBAAuBz5B,KAAKs5B,WAAY,CACzEt5B,KAAKu5B,iBAAmBv5B,KAAK25B,YAAY35B,KAAK05B,YAAc,EAC5DyU,GAAKnuC,KAAKgwC,cAAc,EACxB5B,GAAKpuC,KAAKgwC,cAAc,EACxB7yB,GAAQixB,EAAGj5B,SAASg5B,EACpBnuC,MAAK45B,aAAalrB,GAAKyO,EAAMzO,CAC7B1O,MAAK45B,aAAahrB,GAAKuO,EAAMvO,CAC7B5O,MAAK45B,aAAalN,GAAKvP,EAAMuP,GAGhC,OAAAqjB,IAtEoCpC,EAAAtU,sBAAvBj/B,GAAA21C,eAAcA,InDmuMxB1B,8CAA8C,8DAA8D8B,yCAAyC,yDAAyDt4B,gCAAgCzY,YAAYgxC,6DAA6D,SAAS92C,EAAQkB,EAAOJ,GAClV,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IoDhvMnF,IAAAgwC,GAAA/2C,EAAoC,4CACpC,IAAA+tB,GAAA/tB,EAAqC,mCAKrC,IAAAg3C,GAAA,SAAAzvC,GAAwCd,EAAAuwC,EAAAzvC,EAiDvC,SAAAyvC,GAAYvV,EAAuBwV,GAElC1vC,EAAAxG,KAAA2F,KAAM+6B,EAAUwV,EAzCVvwC,MAAAwwC,cAAwB,IA2C9BxwC,MAAKywC,mBAAqBF,EAlC3B/vC,OAAA+B,eAAW+tC,EAAA/vC,UAAA,epD6uMJiC,IoD7uMP,WAEC,GAAIxC,KAAKwwC,cACRxwC,KAAK0wC,gBAEN,OAAO1wC,MAAK2wC,epD6uMN/tC,WAAY,KACZC,aAAc,MoDxuMrBrC,QAAA+B,eAAW+tC,EAAA/vC,UAAA,gBpD8uMJiC,IoD9uMP,WAEC,GAAIxC,KAAKwwC,cACRxwC,KAAK0wC,gBAEN,OAAO1wC,MAAK4wC,gBpD8uMNhuC,WAAY,KACZC,aAAc,MoDzuMrBrC,QAAA+B,eAAW+tC,EAAA/vC,UAAA,apD+uMJiC,IoD/uMP,WAEC,GAAIxC,KAAKwwC,cACRxwC,KAAK0wC,gBAEN,OAAO1wC,MAAK6wC,apD+uMNjuC,WAAY,KACZC,aAAc,MoDnuMdytC,GAAA/vC,UAAAmJ,OAAP,SAAc8S,GAEb,IAAKxc,KAAKywC,mBAAmBK,QAAS,CACrC,GAAIt0B,EAAOxc,KAAK+wC,YAAc/wC,KAAKywC,mBAAmBO,cACrDx0B,EAAOxc,KAAK+wC,YAAc/wC,KAAKywC,mBAAmBO,kBAAoB,IAAIx0B,EAAOxc,KAAK+wC,YACtFv0B,EAAOxc,KAAK+wC,YAGd,GAAI/wC,KAAKixC,QAAUz0B,EAAOxc,KAAK+wC,YAC9B,MAED/wC,MAAKkxC,aAAa10B,GAMZ8zB,GAAA/vC,UAAAub,MAAP,SAAapZ,GAEZ,GAAI8Z,GAAc9Z,EAAM1C,KAAKywC,mBAAmBO,cAAgBhxC,KAAK+wC,WAErE,IAAI/wC,KAAKixC,QAAUz0B,EAAOxc,KAAK+wC,YAC9B,MAED/wC,MAAKkxC,aAAa10B,GAMZ8zB,GAAA/vC,UAAA2wC,aAAP,SAAoB10B,GAEnBxc,KAAKwwC,cAAgB,IAErBxwC,MAAKmxC,UAAa30B,EAAOxc,KAAK+wC,YAAc/wC,KAAKixC,OAAS,GAAK,CAE/DpwC,GAAAN,UAAM2wC,aAAY72C,KAAA2F,KAACwc,GAUb8zB,GAAA/vC,UAAAmwC,eAAP,WAEC1wC,KAAKwwC,cAAgB,KAErB,IAAIM,GAAkB9wC,KAAKywC,mBAAmBK,OAC9C,IAAIE,GAAuBhxC,KAAKywC,mBAAmBO,aACnD,IAAII,GAAmBpxC,KAAKywC,mBAAmBW,SAC/C,IAAI50B,GAAcxc,KAAKixC,MAGvB,IAAIH,IAAYt0B,GAAQw0B,GAAiBx0B,EAAO,GAAI,CACnDA,GAAQw0B,CACR,IAAIx0B,EAAO,EACVA,GAAQw0B,EAGV,IAAKF,GAAWt0B,GAAQw0B,EAAe,CACtChxC,KAAKqxC,wBACLrxC,MAAK4wC,eAAiBQ,CACtBpxC,MAAK6wC,YAAcO,CACnBpxC,MAAK2wC,cAAgB,MACf,KAAKG,GAAWt0B,GAAQ,EAAG,CACjCxc,KAAK4wC,eAAiB,CACtB5wC,MAAK6wC,YAAc,CACnB7wC,MAAK2wC,cAAgB,MACf,IAAI3wC,KAAKywC,mBAAmB5W,eAAgB,CAClD,GAAIrgC,GAAWgjB,EAAKw0B,EAAcI,CAClCpxC,MAAK4wC,eAAiBhN,KAAK0N,MAAM93C,EACjCwG,MAAK2wC,cAAgBn3C,EAAIwG,KAAK4wC,cAC9B5wC,MAAK6wC,YAAc7wC,KAAK4wC,eAAiB,MACnC,CACN5wC,KAAK4wC,eAAiB,CACtB5wC,MAAK6wC,YAAc,CAEnB,IAAIU,GAAa,EAAGC,CACpB,IAAIC,GAA0BzxC,KAAKywC,mBAAmBgB,SAEtD,GAAG,CACFD,EAAYD,CACZA,IAAOE,EAAUzxC,KAAK6wC,YACtB7wC,MAAK4wC,eAAiB5wC,KAAK6wC,oBACnBr0B,EAAO+0B,EAEhB,IAAIvxC,KAAK4wC,gBAAkBQ,EAAW,CACrCpxC,KAAK4wC,eAAiB,CACtB5wC,MAAK6wC,YAAc,EAGpB7wC,KAAK2wC,eAAiBn0B,EAAOg1B,GAAWC,EAAUzxC,KAAK4wC,iBAIjDN,GAAA/vC,UAAA8wC,uBAAR,WAEC,GAAIrxC,KAAK0xC,iCAAmC,KAC3C1xC,KAAK0xC,gCAAkC,GAAIrqB,GAAA6B,oBAAoB7B,EAAA6B,oBAAoByoB,kBAAmB3xC,KAAK4xC,WAAY5xC,KAAMA,KAAKywC,mBAEnIzwC,MAAKywC,mBAAmB/7B,cAAc1U,KAAK0xC,iCAE7C,OAAApB,IApKwCD,EAAAwB,mBAA3Bz3C,GAAAk2C,mBAAkBA,IpD43M5BwB,4CAA4C,4DAA4DC,mCAAmC,qDAAqDC,6DAA6D,SAAS14C,EAAQkB,EAAOJ,GACxR,YqDr4MA,IAAAuR,GAAArS,EAA6B,gCAU7B,IAAAu4C,GAAA,WAwBC,QAAAA,GAAY9W,EAAuB1J,GArB5BrxB,KAAAiyC,YAAuB,GAAItmC,GAAAiB,QAC3B5M,MAAAkyC,qBAA+B,IAG/BlyC,MAAA+wC,YAAqB,CAmB3B/wC,MAAK4xC,WAAa7W,CAClB/6B,MAAKmyC,gBAAkB9gB,EAdxB7wB,OAAA+B,eAAWsvC,EAAAtxC,UAAA,iBrD+3MJiC,IqD/3MP,WAEC,GAAIxC,KAAKkyC,qBAAsB,CAE9BlyC,KAAKoyC,wBAGN,MAAOpyC,MAAKiyC,arD83MNrvC,WAAY,KACZC,aAAc,MqDh3MdgvC,GAAAtxC,UAAAsc,OAAP,SAAcgH,GAEb7jB,KAAK+wC,YAAcltB,CAEnB7jB,MAAKkyC,qBAAuB,KAUtBL,GAAAtxC,UAAAmJ,OAAP,SAAc8S,GAEb,GAAIxc,KAAKixC,QAAUz0B,EAAOxc,KAAK+wC,YAAa,CAE3C,OAID/wC,KAAKkxC,aAAa10B,GASZq1B,GAAAtxC,UAAAub,MAAP,SAAapZ,IAUNmvC,GAAAtxC,UAAA2wC,aAAP,SAAoB10B,GAEnBxc,KAAKixC,OAASz0B,EAAOxc,KAAK+wC,WAE1B/wC,MAAKkyC,qBAAuB,KAMtBL,GAAAtxC,UAAA6xC,sBAAP,YAGD,OAAAP,KAzFaz3C,GAAAy3C,mBAAkBA,IrDm8M5Bh6B,gCAAgCzY,YAAYizC,0DAA0D,SAAS/4C,EAAQkB,EAAOJ,GACjI,kBACMk4C,kEAAkE,SAASh5C,EAAQkB,EAAOJ,GAChG,kBACMm4C,gEAAgE,SAASj5C,EAAQkB,EAAOJ,GAC9F,kBACMo4C,oEAAoE,SAASl5C,EAAQkB,EAAOJ,GAClG,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IsDx9MnF,IAAAsL,GAAArS,EAA6B,gCAK7B,IAAAwO,GAAAxO,EAA2C,sDAK3C,IAAAolB,GAAAplB,EAAuC,8CAEvC,IAAAm5C,GAAAn5C,EAAmC,2CAOnC,IAAAkhC,GAAA,SAAA35B,GAA+Cd,EAAAy6B,EAAA35B,EA0B9C,SAAA25B,GAAYO,EAA2B2X,GAEtC7xC,EAAAxG,KAAA2F,KAAM+6B,EAAU2X,EAEhB1yC,MAAK2yC,0BAA4BD,CACjC1yC,MAAKy6B,cAAgBz6B,KAAK2yC,0BAA0BlY,aAEpDz6B,MAAK4yC,yBArBNpyC,OAAA+B,eAAWi4B,EAAAj6B,UAAA,gBtD88MJiC,IsD98MP,WAEC,MAAOxC,MAAKy6B,etD+8MNh4B,IsD58MP,SAAwBC,GAEvB1C,KAAKy6B,cAAc/rB,EAAIhM,EAAMgM,CAC7B1O,MAAKy6B,cAAc7rB,EAAIlM,EAAMkM,CAC7B5O,MAAKy6B,cAAc/N,EAAIhqB,EAAMgqB,CAE7B1sB,MAAK4yC,0BtD48MChwC,WAAY,KACZC,aAAc,MsD77Md23B,GAAAj6B,UAAAwb,eAAP,SAAsBrM,EAAmBZ,EAA8BoT,EAAqClC,EAA6Cpc,EAAe9C,GAEvK,GAAIghB,GAAe9B,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiB3X,EAA0BI,mBAE1G,IAAI56B,KAAK2yC,0BAA0B1xC,MAAQyd,EAAAe,uBAAuBC,aACjEwC,EAAkBmT,qBAAqBvT,EAAO9hB,KAAK2yC,0BAA0BhzB,aAAc7e,EAAOgH,EAAAiC,4BAA4B8oC,aAE9HnjC,GAAOmS,eAAeC,EAAO9hB,KAAK8yC,kBAAkBpkC,EAAG1O,KAAK8yC,kBAAkBlkC,EAAG5O,KAAK8yC,kBAAkBpmB,GAGlG8N,GAAAj6B,UAAAqyC,uBAAR,WAEC,GAAI5yC,KAAK2yC,0BAA0B1xC,MAAQyd,EAAAe,uBAAuBsY,OACjE/3B,KAAK8yC,kBAAoB,GAAInnC,GAAAiB,SAAS5M,KAAKy6B,cAAc/rB,EAAE,EAAG1O,KAAKy6B,cAAc7rB,EAAE,EAAG5O,KAAKy6B,cAAc/N,EAAE,GAjD/F8N,GAAAI,mBAA4B,CAmD3C,OAAAJ,IAtD+CiY,EAAAM,kBAAlC34C,GAAAogC,0BAAyBA,ItDy/MnCa,8CAA8C,8DAA8D2X,2CAA2C,2DAA2Dn7B,gCAAgCzY,UAAUiM,sDAAsDjM,YAAY6zC,mEAAmE,SAAS35C,EAAQkB,EAAOJ,GAC5Z,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IuD5gNnF,IAAAyH,GAAAxO,EAA2C,sDAK3C,IAAAolB,GAAAplB,EAAuC,8CAEvC,IAAAm5C,GAAAn5C,EAAmC,2CAOnC,IAAAuiC,GAAA,SAAAh7B,GAA8Cd,EAAA87B,EAAAh7B,EAsC7C,SAAAg7B,GAAYd,EAA2BmY,GAEtCryC,EAAAxG,KAAA2F,KAAM+6B,EAAUmY,EAEhBlzC,MAAKmzC,yBAA2BD,CAChClzC,MAAKozC,cAAgBpzC,KAAKmzC,yBAAyBrX,cACnD97B,MAAKqzC,UAAYrzC,KAAKmzC,yBAAyBpX,WA7BhDv7B,OAAA+B,eAAWs5B,EAAAt7B,UAAA,gBvDmgNJiC,IuDngNP,WAEC,MAAOxC,MAAKozC,evDogNN3wC,IuDjgNP,SAAwBC,GAEvB1C,KAAKozC,cAAgB1wC,GvDkgNfE,WAAY,KACZC,aAAc,MuD7/MrBrC,QAAA+B,eAAWs5B,EAAAt7B,UAAA,YvDmgNJiC,IuDngNP,WAEC,MAAOxC,MAAKqzC,WvDogNN5wC,IuDjgNP,SAAoBC,GAEnB1C,KAAKqzC,UAAY3wC,GvDkgNXE,WAAY,KACZC,aAAc,MuDv/Mdg5B,GAAAt7B,UAAAwb,eAAP,SAAsBrM,EAAmBZ,EAA8BoT,EAAqClC,EAA6Cpc,EAAe9C,GAEvK,GAAIwyC,GAAsBtzB,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiBtW,EAAyBI,qBAChH,IAAIsX,GAAkBvzB,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiBtW,EAAyBM,iBAE5G,IAAIn8B,KAAKmzC,yBAAyBlyC,MAAQyd,EAAAe,uBAAuBC,aAAc,CAC9EwC,EAAkBmT,qBAAqBie,EAActzC,KAAKmzC,yBAAyBxzB,aAAc7e,EAAOgH,EAAAiC,4BAA4B8oC,QACpI3wB,GAAkBmT,qBAAqBke,EAAUvzC,KAAKmzC,yBAAyBxzB,aAAe,EAAG7e,EAAOgH,EAAAiC,4BAA4B8oC,aAC9H,CACNnjC,EAAOmS,eAAeyxB,EAActzC,KAAKozC,cAAc1kC,EAAG1O,KAAKozC,cAAcxkC,EAAG5O,KAAKozC,cAAc1mB,EACnGhd,GAAOmS,eAAe0xB,EAAUvzC,KAAKqzC,UAAU3kC,EAAG1O,KAAKqzC,UAAUzkC,EAAG5O,KAAKqzC,UAAU3mB,IAtDvEmP,GAAAI,qBAA8B,CAG9BJ,GAAAM,iBAA0B,CAsDzC,OAAAN,IA5D8C4W,EAAAM,kBAAjC34C,GAAAyhC,yBAAwBA,IvD2jNlCR,8CAA8C,8DAA8D2X,2CAA2C,2DAA2D3nC,sDAAsDjM,YAAYo0C,iEAAiE,SAASl6C,EAAQkB,EAAOJ,GAChX,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IwDnlNnF,IAAAozC,GAAAn6C,EAA8B,kCAC9B,IAAAiS,GAAAjS,EAA6B,gCAE7B,IAAAo6C,GAAAp6C,EAAgC,qCAUhC,IAAAm5C,GAAAn5C,EAAmC,2CAOnC,IAAA2jC,GAAA,SAAAp8B,GAA4Cd,EAAAk9B,EAAAp8B,EAY3C,SAAAo8B,GAAYlC,EAA2B4Y,GAEtC9yC,EAAAxG,KAAA2F,KAAM+6B,EAAU4Y,EATT3zC,MAAA4zC,QAAmB,GAAIroC,GAAA6B,QAW9BpN,MAAK6zC,eAAiBF,EAAazW,gBAG7BD,EAAA18B,UAAAwb,eAAP,SAAsBrM,EAAmBZ,EAA8BoT,EAAqClC,EAA6Cpc,EAAe9C,GAEvK,GAAIgzC,EACJ,IAAI9zC,KAAK6zC,eAAgB,CACxB,GAAIE,GAAejlC,EAAWqF,aAAa/C,eAAe0zB,QAC1D,IAAIkP,GAAgBpwC,EAAOwN,eAAe0zB,SAAS3vB,SAAS4+B,EAC5D,IAAIE,GAAiBD,EAAKE,aAAal0C,KAAK6zC,eAC5CI,GAAMhN,WACN+M,GAAOh0C,KAAKg9B,cAAckX,aAAaD,EACvCD,GAAK/M,WAGLjnC,MAAK4zC,QAAQliC,SAAS5C,EAAWqF,aAAa/C,eAC9C0iC,GAAQ9zC,KAAK4zC,QAAQO,UAAUT,EAAAU,cAAcC,WAC7Cr0C,MAAK4zC,QAAQU,eAAe,EAAGL,EAC/Bj0C,MAAK4zC,QAAQU,eAAe,EAAGt0C,KAAKg9B,cACpCh9B,MAAK4zC,QAAQU,eAAe,EAAGN,EAC/Bh0C,MAAK4zC,QAAQU,eAAe,EAAGP,EAC/B/zC,MAAK4zC,QAAQW,gBAAgBT,EAAM,GAAGnnB,EAAE8mB,EAAAe,WAAWC,mBAAoBX,EAAM,QACvE,CAEN9zC,KAAK4zC,QAAQliC,SAAS5C,EAAWqF,aAAa/C,eAC9CpR,MAAK4zC,QAAQc,OAAO9wC,EAAO+wC,sBAG3Bb,GAAQ9zC,KAAK4zC,QAAQO,UAAUT,EAAAU,cAAcC,WAG7Cr0C,MAAK4zC,QAAQgB,UACb50C,MAAK4zC,QAAQW,gBAAgBT,EAAM,GAAGnnB,EAAE8mB,EAAAe,WAAWC,mBAAoBX,EAAM,IAI9EpkC,EAAOmlC,yBAAyB70B,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiBlV,EAAuBG,cAAep9B,KAAK4zC,SAMzIpzC,QAAA+B,eAAW06B,EAAA18B,UAAA,iBxD2jNJiC,IwD3jNP,WAEC,MAAOxC,MAAKg9B,exD4jNNv6B,IwDzjNP,SAAyBC,GAExB1C,KAAKg9B,cAAgBt6B,EAAOA,EAAMib,QAAU,IAC5C,IAAI3d,KAAKg9B,cACRh9B,KAAKg9B,cAAciK,axD0jNdrkC,WAAY,KACZC,aAAc,MwD3nNPo6B,GAAAG,aAAsB,CAmErC,OAAAH,IAtE4CwV,EAAAM,kBAA/B34C,GAAA6iC,uBAAsBA,IxDqoNhC+V,2CAA2C,2DAA2D8B,kCAAkC11C,UAAUqY,gCAAgCrY,UAAU21C,qCAAqC31C,YAAY41C,6DAA6D,SAAS17C,EAAQkB,EAAOJ,GACrU,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IyD7pNnF,IAAAsL,GAAArS,EAA6B,gCAK7B,IAAAwO,GAAAxO,EAA2C,sDAK3C,IAAAolB,GAAAplB,EAAuC,8CAEvC,IAAAm5C,GAAAn5C,EAAmC,2CAQnC,IAAA+kC,GAAA,SAAAx9B,GAAwCd,EAAAs+B,EAAAx9B,EA4FvC,SAAAw9B,GAAYtD,EAA2Bka,GAEtCp0C,EAAAxG,KAAA2F,KAAM+6B,EAAUka,EAEhBj1C,MAAKk1C,mBAAqBD,CAC1Bj1C,MAAKm1C,gBAAkBn1C,KAAKk1C,mBAAmB5W,gBAC/Ct+B,MAAKo1C,YAAcp1C,KAAKk1C,mBAAmB3W,YAC3Cv+B,MAAKq1C,WAAar1C,KAAKk1C,mBAAmB1W,WAC1Cx+B,MAAKs1C,WAAat1C,KAAKk1C,mBAAmBzW,WAC1Cz+B,MAAKu1C,YAAcv1C,KAAKk1C,mBAAmBxW,YAC3C1+B,MAAKw1C,UAAYx1C,KAAKk1C,mBAAmBtW,UACzC5+B,MAAKy1C,eAAiBz1C,KAAKk1C,mBAAmBrW;AAC9C7+B,KAAK01C,YAAc11C,KAAKk1C,mBAAmBpW,YAE3C9+B,MAAK21C,kBAvENn1C,OAAA+B,eAAW87B,EAAA99B,UAAA,czDmoNJiC,IyDnoNP,WAEC,MAAOxC,MAAKu1C,azDooNN9yC,IyDjoNP,SAAsBC,GAErB1C,KAAKu1C,YAAc7yC,CAEnB1C,MAAK21C,mBzDioNC/yC,WAAY,KACZC,aAAc,MyD5nNrBrC,QAAA+B,eAAW87B,EAAA99B,UAAA,YzDkoNJiC,IyDloNP,WAEC,MAAOxC,MAAKw1C,WzDmoNN/yC,IyDhoNP,SAAoBC,GAEnB1C,KAAKw1C,UAAY9yC,CAEjB1C,MAAK21C,mBzDgoNC/yC,WAAY,KACZC,aAAc,MyD3nNrBrC,QAAA+B,eAAW87B,EAAA99B,UAAA,iBzDioNJiC,IyDjoNP,WAEC,MAAOxC,MAAKy1C,gBzDkoNNhzC,IyD/nNP,SAAyBC,GAExB1C,KAAKy1C,eAAiB/yC,CAEtB1C,MAAK21C,mBzD+nNC/yC,WAAY,KACZC,aAAc,MyD1nNrBrC,QAAA+B,eAAW87B,EAAA99B,UAAA,czDgoNJiC,IyDhoNP,WAEC,MAAOxC,MAAK01C,azDioNNjzC,IyD9nNP,SAAsBC,GAErB1C,KAAK01C,YAAchzC,CAEnB1C,MAAK21C,mBzD8nNC/yC,WAAY,KACZC,aAAc,MyD3mNdw7B,GAAA99B,UAAAwb,eAAP,SAAsBrM,EAAmBZ,EAA8BoT,EAAqClC,EAA6Cpc,EAAe9C,GAEvK,GAAI4O,EAAO2R,sBAAuB,CACjC,GAAIu0B,GAAoB51C,KAAKk1C,mBAAmBv1B,YAChD,IAAImC,EACJ,IAAI9hB,KAAKq1C,WACR3lC,EAAOmS,eAAe7B,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiB9T,EAAmBW,aAAch/B,KAAK61C,WAAWnnC,EAAG1O,KAAK61C,WAAWjnC,EAAG5O,KAAK61C,WAAWnpB,EAAG1sB,KAAK61C,WAAWlpB,EAE9L,IAAI3sB,KAAKm1C,gBAAiB,CACzB,GAAIn1C,KAAKk1C,mBAAmBj0C,MAAQyd,EAAAe,uBAAuBC,aAAc,CACxEwC,EAAkBmT,qBAAqBrV,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiB9T,EAAmBgB,wBAAyBuW,EAAY90C,EAAOgH,EAAAiC,4BAA4B+rC,QAC/LF,IAAc,CACd1zB,GAAkBmT,qBAAqBrV,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiB9T,EAAmBiB,wBAAyBsW,EAAY90C,EAAOgH,EAAAiC,4BAA4B+rC,QAC/LF,IAAc,MACR,CACNlmC,EAAOmS,eAAe7B,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiB9T,EAAmBgB,wBAAyBr/B,KAAK+1C,qBAAqBrnC,EAAG1O,KAAK+1C,qBAAqBnnC,EAAG5O,KAAK+1C,qBAAqBrpB,EAAG1sB,KAAK+1C,qBAAqBppB,EAChPjd,GAAOmS,eAAe7B,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiB9T,EAAmBiB,wBAAyBt/B,KAAKg2C,qBAAqBtnC,EAAG1O,KAAKg2C,qBAAqBpnC,EAAG5O,KAAKg2C,qBAAqBtpB,EAAG1sB,KAAKg2C,qBAAqBrpB,IAGlP,GAAI3sB,KAAKo1C,YAAa,CACrB,GAAIp1C,KAAKk1C,mBAAmBj0C,MAAQyd,EAAAe,uBAAuBC,aAAc,CACxEwC,EAAkBmT,qBAAqBrV,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiB9T,EAAmBoB,oBAAqBmW,EAAY90C,EAAOgH,EAAAiC,4BAA4B+rC,QAC3LF,IAAc,CACd1zB,GAAkBmT,qBAAqBrV,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiB9T,EAAmBqB,oBAAqBkW,EAAY90C,EAAOgH,EAAAiC,4BAA4B+rC,aACrL,CACNpmC,EAAOmS,eAAe7B,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiB9T,EAAmBoB,oBAAqBz/B,KAAKi2C,iBAAiBvnC,EAAG1O,KAAKi2C,iBAAiBrnC,EAAG5O,KAAKi2C,iBAAiBvpB,EAAG1sB,KAAKi2C,iBAAiBtpB,EAC5Njd,GAAOmS,eAAe7B,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiB9T,EAAmBqB,oBAAqB1/B,KAAKk2C,iBAAiBxnC,EAAG1O,KAAKk2C,iBAAiBtnC,EAAG5O,KAAKk2C,iBAAiBxpB,EAAG1sB,KAAKk2C,iBAAiBvpB,MAMxN0R,GAAA99B,UAAAo1C,gBAAR,WAEC,GAAI31C,KAAKq1C,WAAY,CACpB,GAAIr1C,KAAKy1C,gBAAkB,EAC1B,KAAK,IAAKx7C,OAAM,+CACjB+F,MAAK61C,WAAa,GAAIlqC,GAAAiB,SAASg3B,KAAKC,GAAG,EAAE7jC,KAAKy1C,eAAgBz1C,KAAK01C,YAAY9R,KAAKC,GAAG,IAAK,EAAG,GAEhG,GAAI7jC,KAAKk1C,mBAAmBj0C,MAAQyd,EAAAe,uBAAuBsY,OAAQ,CAClE,GAAI/3B,KAAKq1C,WAAY,CACpB,GAAIr1C,KAAKm1C,gBAAiB,CACzBn1C,KAAK+1C,qBAAuB,GAAIpqC,GAAAiB,UAAU5M,KAAKu1C,YAAY1V,cAAgB7/B,KAAKw1C,UAAU3V,eAAe,GAAI7/B,KAAKu1C,YAAYzV,gBAAkB9/B,KAAKw1C,UAAU1V,iBAAiB,GAAI9/B,KAAKu1C,YAAYxV,eAAiB//B,KAAKw1C,UAAUzV,gBAAgB,GAAI//B,KAAKu1C,YAAYvV,gBAAkBhgC,KAAKw1C,UAAUxV,iBAAiB,EAC5ThgC,MAAKg2C,qBAAuB,GAAIrqC,GAAAiB,UAAU5M,KAAKw1C,UAAU3V,cAAgB7/B,KAAKu1C,YAAY1V,eAAe,GAAI7/B,KAAKw1C,UAAU1V,gBAAkB9/B,KAAKu1C,YAAYzV,iBAAiB,GAAI9/B,KAAKw1C,UAAUzV,eAAiB//B,KAAKu1C,YAAYxV,gBAAgB,GAAI//B,KAAKw1C,UAAUxV,gBAAkBhgC,KAAKu1C,YAAYvV,iBAAiB,GAG7T,GAAIhgC,KAAKo1C,YAAa,CACrBp1C,KAAKi2C,iBAAmB,GAAItqC,GAAAiB,UAAU5M,KAAKu1C,YAAYtV,UAAYjgC,KAAKw1C,UAAUvV,YAAY,IAAI,IAAKjgC,KAAKu1C,YAAYrV,YAAclgC,KAAKw1C,UAAUtV,cAAc,IAAI,IAAKlgC,KAAKu1C,YAAYpV,WAAangC,KAAKw1C,UAAUrV,aAAa,IAAI,IAAKngC,KAAKu1C,YAAYnV,YAAcpgC,KAAKw1C,UAAUpV,cAAc,IAAI,GAC/SpgC,MAAKk2C,iBAAmB,GAAIvqC,GAAAiB,UAAU5M,KAAKw1C,UAAUvV,UAAYjgC,KAAKu1C,YAAYtV,YAAY,IAAI,IAAKjgC,KAAKw1C,UAAUtV,YAAclgC,KAAKu1C,YAAYrV,cAAc,IAAI,IAAKlgC,KAAKw1C,UAAUrV,WAAangC,KAAKu1C,YAAYpV,aAAa,IAAI,IAAKngC,KAAKw1C,UAAUpV,YAAcpgC,KAAKu1C,YAAYnV,cAAc,IAAI,SAE1S,CACN,GAAIpgC,KAAKm1C,gBAAiB,CACzBn1C,KAAK+1C,qBAAuB,GAAIpqC,GAAAiB,SAAS5M,KAAKu1C,YAAY1V,cAAe7/B,KAAKu1C,YAAYzV,gBAAiB9/B,KAAKu1C,YAAYxV,eAAgB//B,KAAKu1C,YAAYvV,gBAC7JhgC,MAAKg2C,qBAAuB,GAAIrqC,GAAAiB,SAAU5M,KAAKw1C,UAAU3V,cAAgB7/B,KAAKu1C,YAAY1V,cAAiB7/B,KAAKw1C,UAAU1V,gBAAkB9/B,KAAKu1C,YAAYzV,gBAAmB9/B,KAAKw1C,UAAUzV,eAAiB//B,KAAKu1C,YAAYxV,eAAkB//B,KAAKw1C,UAAUxV,gBAAkBhgC,KAAKu1C,YAAYvV,iBAGtS,GAAIhgC,KAAKo1C,YAAa,CACrBp1C,KAAKi2C,iBAAmB,GAAItqC,GAAAiB,SAAS5M,KAAKu1C,YAAYtV,UAAU,IAAKjgC,KAAKu1C,YAAYrV,YAAY,IAAKlgC,KAAKu1C,YAAYpV,WAAW,IAAKngC,KAAKu1C,YAAYnV,YAAY,IACrKpgC,MAAKk2C,iBAAmB,GAAIvqC,GAAAiB,UAAU5M,KAAKw1C,UAAUvV,UAAYjgC,KAAKu1C,YAAYtV,WAAW,KAAMjgC,KAAKw1C,UAAUtV,YAAclgC,KAAKu1C,YAAYrV,aAAa,KAAMlgC,KAAKw1C,UAAUrV,WAAangC,KAAKu1C,YAAYpV,YAAa,KAAMngC,KAAKw1C,UAAUpV,YAAcpgC,KAAKu1C,YAAYnV,aAAa,QApKrR/B,GAAAgB,uBAAgC,CAGhChB,GAAAiB,uBAAgC,CAGhCjB,GAAAoB,mBAA4B,CAG5BpB,GAAAqB,mBAA4B,CAG5BrB,GAAAW,YAAqB,CA6JpC,OAAAX,IA5KwCoU,EAAAM,kBAA3B34C,GAAAikC,mBAAkBA,IzDmyN5BhD,8CAA8C,8DAA8D2X,2CAA2C,2DAA2Dn7B,gCAAgCzY,UAAUiM,sDAAsDjM,YAAY+2C,8DAA8D,SAAS78C,EAAQkB,EAAOJ,GACvZ,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I0D7zNnF,IAAAozC,GAAAn6C,EAA8B,kCAC9B,IAAAqS,GAAArS,EAA6B,gCAM7B,IAAAwO,GAAAxO,EAA2C,sDAO3C,IAAAm5C,GAAAn5C,EAAmC,2CAOnC,IAAAwnC,GAAA,SAAAjgC,GAAyCd,EAAA+gC,EAAAjgC,EAoBxC,SAAAigC,GAAY/F,EAA2Bqb,GAEtCv1C,EAAAxG,KAAA2F,KAAM+6B,EAAUqb,EAAoB,KAX7Bp2C,MAAAq2C,WAAsB,GAAI1qC,GAAAiB,QAC1B5M,MAAAs2C,aAAwB,GAAI3qC,GAAAiB,QAM5B5M,MAAAu2C,MAAiB,GAAI5qC,GAAAiB,QAM5B5M,MAAKw2C,oBAAsBJ,CAC3Bp2C,MAAKy2C,QAAUL,EAAmBnV,SAGnCzgC,OAAA+B,eAAWu+B,EAAAvgC,UAAA,gB1DiyNJiC,I0DjyNP,WAEC,MAAOxC,MAAK02C,e1DkyNNj0C,I0D/xNP,SAAwBC,GAEvB1C,KAAK02C,cAAgBh0C,G1DgyNfE,WAAY,KACZC,aAAc,M0D9xNrBrC,QAAA+B,eAAWu+B,EAAAvgC,UAAA,U1DiyNJiC,I0DjyNP,WAEC,MAAOxC,MAAKy2C,S1DkyNNh0C,I0D/xNP,SAAkBC,GAEjB1C,KAAKy2C,QAAU/zC,G1DgyNTE,WAAY,KACZC,aAAc,M0D3xNdi+B,GAAAvgC,UAAAwb,eAAP,SAAsBrM,EAAmBZ,EAA8BoT,EAAqClC,EAA6Cpc,EAAe9C,GAEvK,GAAId,KAAK02C,cAAe,CACvB,GAAI12C,KAAKw2C,oBAAoBzV,eAAgB,CAC5C/gC,KAAKq2C,WAAW3nC,EAAI1O,KAAK02C,cAAcp5B,UAAUwnB,SAASp2B,EAAEI,EAAWqF,aAAawiC,MACpF32C,MAAKq2C,WAAWznC,EAAI5O,KAAK02C,cAAcp5B,UAAUwnB,SAASl2B,EAAEE,EAAWqF,aAAayiC,MACpF52C,MAAKq2C,WAAW3pB,EAAI1sB,KAAK02C,cAAcp5B,UAAUwnB,SAASpY,EAAE5d,EAAWqF,aAAa0iC,OAErF,GAAI72C,KAAKw2C,oBAAoBxV,eAAgB,CAC5ChhC,KAAKs2C,aAAa5nC,EAAI1O,KAAK02C,cAAcI,SACzC92C,MAAKs2C,aAAa1nC,EAAI5O,KAAK02C,cAAcK,SACzC/2C,MAAKs2C,aAAa5pB,EAAI1sB,KAAK02C,cAAcM,SACzCh3C,MAAKs2C,aAAaW,QAAQxD,EAAAe,WAAW0C,qBAIvC,IAAKl3C,KAAKm3C,QACTn3C,KAAKm3C,QAAUn3C,KAAKq2C,WAAW14B,OAChC,KAAK3d,KAAKo3C,UACTp3C,KAAKo3C,UAAYp3C,KAAKs2C,aAAa34B,OAEpC,IAAI05B,GAAqBr3C,KAAKixC,OAAO,GACrC,IAAIpc,GAAsB3S,EAAkB2S,YAC5C,IAAIyiB,GAAmBD,EAAcxiB,CAErC,IAAI0iB,GAAsB1iB,GAAgBwiB,CAE1C,IAAIr3C,KAAKw2C,oBAAoBzV,gBAAkB/gC,KAAKw2C,oBAAoBxV,eAAgB,CACvF,GAAIuW,EACHv3C,KAAKw3C,2BAA2BH,EAAaC,EAAWp1B,EAEzDA,GAAkBmT,qBAAqBrV,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiBrR,EAAoBQ,uBAAwBthC,KAAKw2C,oBAAoB72B,aAAc7e,EAAOgH,EAAAiC,4BAA4B8oC,QAC1N3wB,GAAkBmT,qBAAqBrV,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiBrR,EAAoBK,uBAAwBnhC,KAAKw2C,oBAAoB72B,aAAe,EAAG7e,EAAOgH,EAAAiC,4BAA4B8oC,aACxN,IAAI7yC,KAAKw2C,oBAAoBzV,eAAgB,CACnD,GAAIwW,EACHv3C,KAAKy3C,gBAAgBJ,EAAaC,EAAWp1B,EAE9CA,GAAkBmT,qBAAqBrV,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiBrR,EAAoBQ,uBAAwBthC,KAAKw2C,oBAAoB72B,aAAc7e,EAAOgH,EAAAiC,4BAA4B8oC,aACpN,IAAI7yC,KAAKw2C,oBAAoBxV,eAAgB,CACnD,GAAIuW,EACHv3C,KAAK03C,gBAAgBL,EAAaC,EAAWp1B,EAE9CA,GAAkBmT,qBAAqBrV,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiBrR,EAAoBK,uBAAwBnhC,KAAKw2C,oBAAoB72B,aAAc7e,EAAOgH,EAAAiC,4BAA4B8oC,SAG3N7yC,KAAKm3C,QAAQzlC,SAAS1R,KAAKq2C,WAC3Br2C,MAAKs2C,aAAa5kC,SAAS1R,KAAKs2C,aAChCp0B,GAAkB2S,aAAewiB,EAG1BvW,GAAAvgC,UAAAk3C,gBAAR,SAAwBJ,EAAoBC,EAAkBp1B,GAE7D,GAAI9R,GAAoC8R,EAAkBkC,kBAC1D,IAAIZ,GAA2BtB,EAAkBsB,UAEjD,IAAIm0B,GAAkB,KACtB,IAAIxyC,GAAaiL,EAAK9V,MACtB,IAAIs9C,EACJ,IAAIC,EACJ,IAAI73C,KAAKy2C,QAAS,CACjBoB,EAAc73C,KAAKm3C,QAAQhiC,SAASnV,KAAKq2C,WACzCwB,GAAYZ,QAAQ,EAAEK,OAEtBM,GAAkB53C,KAAKq2C,UACxB,KAAK,GAAIt8C,GAAW,EAAGA,EAAIoL,EAAKpL,IAAK,CACpC,GAAIid,IAAYqgC,EAAcjnC,EAAKrW,GAAG8pB,WAAWzT,EAAKrW,GAAG69B,SACzD,IAAIp+B,IAAYwd,EAAI4sB,KAAK0N,MAAMt6B,IAAI5G,EAAKrW,GAAG69B,SAC3C,IAAIp+B,EAAI89C,GAAa,EAAG,CACvB,GAAIQ,GAAa1nC,EAAKrW,GAAG89B,iBAAiB3V,EAAkBgT,oBAAsBl1B,KAAKw2C,oBAAoB72B,YAE3G,IAAI3f,KAAKy2C,QAAS,CACjBz2C,KAAKu2C,MAAM7kC,SAASmmC,EACpB73C,MAAKu2C,MAAMU,QAAQz9C,EACnBo+C,GAAkB53C,KAAKq2C,WAAW0B,IAAI/3C,KAAKu2C,OAG5C,GAAI/yB,EAAWs0B,IAAQF,EAAgBlpC,GAAK8U,EAAWs0B,EAAM,IAAMF,EAAgBhpC,GAAK4U,EAAWs0B,EAAM,IAAMF,EAAgBlrB,EAAG,CACjIirB,EAAU,IACV,KAAK,GAAI5gC,GAAW,EAAGA,EAAI3G,EAAKrW,GAAG6oB,YAAa7L,IAAK,CACpDyM,EAAWs0B,KAASF,EAAgBlpC,CACpC8U,GAAWs0B,KAASF,EAAgBhpC,CACpC4U,GAAWs0B,KAASF,EAAgBlrB,KAKxC,GAAIirB,EACHz1B,EAAkB4T,mBAIZgL,GAAAvgC,UAAAm3C,gBAAR,SAAwBL,EAAoBC,EAAkBp1B,GAE7D,GAAI9R,GAAoC8R,EAAkBkC,kBAC1D,IAAIZ,GAA2BtB,EAAkBsB,UAEjD,IAAIm0B,GAAkB,KACtB,IAAIxyC,GAAaiL,EAAK9V,MAEtB,IAAI09C,EACJ,IAAIC,EAEJ,IAAIj4C,KAAKy2C,QAAS,CACjBwB,EAAmBj4C,KAAKo3C,UAAUjiC,SAASnV,KAAKs2C,aAChD2B,GAAiBhB,QAAQ,EAAEK,OAE3BU,GAAuBh4C,KAAKs2C,YAE7B,KAAK,GAAIv8C,GAAW,EAAGA,EAAIoL,EAAKpL,IAAK,CACpC,GAAIid,IAAYqgC,EAAcjnC,EAAKrW,GAAG8pB,WAAWzT,EAAKrW,GAAG69B,SACzD,IAAIp+B,IAAYwd,EAAI4sB,KAAK0N,MAAMt6B,IAAI5G,EAAKrW,GAAG69B,SAC3C,IAAIp+B,EAAI89C,GAAa,EAAG,CACvB,GAAIQ,GAAa1nC,EAAKrW,GAAG89B,iBAAiB3V,EAAkBgT,oBAAsBl1B,KAAKw2C,oBAAoB72B,YAE3G,IAAI3f,KAAKy2C,QAAS,CACjBz2C,KAAKu2C,MAAM7kC,SAASumC,EACpBj4C,MAAKu2C,MAAMU,QAAQz9C,EACnBw+C,GAAuBh4C,KAAKs2C,aAAayB,IAAI/3C,KAAKu2C,OAGnD,GAAI/yB,EAAWs0B,IAAQE,EAAqBtpC,GAAK8U,EAAWs0B,EAAM,IAAME,EAAqBppC,GAAK4U,EAAWs0B,EAAM,IAAME,EAAqBtrB,EAAG,CAChJirB,EAAU,IACV,KAAK,GAAI5gC,GAAW,EAAGA,EAAI3G,EAAKrW,GAAG6oB,YAAa7L,IAAK,CACpDyM,EAAWs0B,KAASE,EAAqBtpC,CACzC8U,GAAWs0B,KAASE,EAAqBppC,CACzC4U,GAAWs0B,KAASE,EAAqBtrB,KAK7C,GAAIirB,EACHz1B,EAAkB4T,mBAIZgL,GAAAvgC,UAAAi3C,2BAAR,SAAmCH,EAAoBC,EAAkBp1B,GAExE,GAAI9R,GAAoC8R,EAAkBkC,kBAC1D,IAAIZ,GAA2BtB,EAAkBsB,UAEjD,IAAIm0B,GAAkB,KACtB,IAAIxyC,GAAaiL,EAAK9V,MAEtB,IAAIs9C,EACJ,IAAII,EAEJ,IAAIH,EACJ,IAAII,EACJ,IAAIj4C,KAAKy2C,QAAS,CACjBoB,EAAc73C,KAAKm3C,QAAQhiC,SAASnV,KAAKq2C,WACzCwB,GAAYZ,QAAQ,EAAEK,EACtBW,GAAmBj4C,KAAKo3C,UAAUjiC,SAASnV,KAAKs2C,aAChD2B,GAAiBhB,QAAQ,EAAEK,OACrB,CACNM,EAAkB53C,KAAKq2C,UACvB2B,GAAuBh4C,KAAKs2C,aAG7B,IAAK,GAAIv8C,GAAW,EAAGA,EAAIoL,EAAKpL,IAAK,CACpC,GAAIid,IAAYqgC,EAAcjnC,EAAKrW,GAAG8pB,WAAWzT,EAAKrW,GAAG69B,SACzD,IAAIp+B,IAAYwd,EAAI4sB,KAAK0N,MAAMt6B,IAAI5G,EAAKrW,GAAG69B,SAC3C,IAAIp+B,EAAI89C,GAAa,EAAG,CACvB,GAAIQ,GAAa1nC,EAAKrW,GAAG89B,iBAAiB3V,EAAkBgT,oBAAsBl1B,KAAKw2C,oBAAoB72B,YAC3G,IAAI3f,KAAKy2C,QAAS,CACjBz2C,KAAKu2C,MAAM7kC,SAASmmC,EACpB73C,MAAKu2C,MAAMU,QAAQz9C,EACnBo+C,GAAkB53C,KAAKq2C,WAAW0B,IAAI/3C,KAAKu2C,MAE3Cv2C,MAAKu2C,MAAM7kC,SAASumC,EACpBj4C,MAAKu2C,MAAMU,QAAQz9C,EACnBw+C,GAAuBh4C,KAAKs2C,aAAayB,IAAI/3C,KAAKu2C,OAGnD,GAAI/yB,EAAWs0B,IAAQF,EAAgBlpC,GAAK8U,EAAWs0B,EAAM,IAAMF,EAAgBhpC,GAAK4U,EAAWs0B,EAAM,IAAMF,EAAgBlrB,GAAKlJ,EAAWs0B,EAAM,IAAME,EAAqBtpC,GAAK8U,EAAWs0B,EAAM,IAAME,EAAqBppC,GAAK4U,EAAWs0B,EAAM,IAAME,EAAqBtrB,EAAG,CACpRirB,EAAU,IACV,KAAK,GAAI5gC,GAAW,EAAGA,EAAI3G,EAAKrW,GAAG6oB,YAAa7L,IAAK,CACpDyM,EAAWs0B,KAASF,EAAgBlpC,CACpC8U,GAAWs0B,KAASF,EAAgBhpC,CACpC4U,GAAWs0B,KAASF,EAAgBlrB,CACpClJ,GAAWs0B,KAASE,EAAqBtpC,CACzC8U,GAAWs0B,KAASE,EAAqBppC,CACzC4U,GAAWs0B,KAASE,EAAqBtrB,KAK7C,GAAIirB,EACHz1B,EAAkB4T,mBA3ONgL,GAAAQ,sBAA+B,CAG/BR,GAAAK,sBAA+B,CA2O9C,OAAAL,IAjPyC2R,EAAAM,kBAA5B34C,GAAA0mC,oBAAmBA,I1D6/N7BkS,2CAA2C,2DAA2D8B,kCAAkC11C,UAAUyY,gCAAgCzY,UAAUiM,sDAAsDjM,YAAY84C,oEAAoE,SAAS5+C,EAAQkB,EAAOJ,GAC7V,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I2DthOnF,IAAAsL,GAAArS,EAA6B,gCAK7B,IAAAwO,GAAAxO,EAA2C,sDAK3C,IAAAolB,GAAAplB,EAAuC,8CAEvC,IAAAm5C,GAAAn5C,EAAmC,2CAOnC,IAAAsoC,GAAA,SAAA/gC,GAA+Cd,EAAA6hC,EAAA/gC,EAc9C,SAAA+gC,GAAY7G,EAA2Bod,GAEtCt3C,EAAAxG,KAAA2F,KAAM+6B,EAAUod,EAEhBn4C,MAAKo4C,0BAA4BD,CACjCn4C,MAAKm1C,gBAAkBgD,EAAyB7Z,gBAChDt+B,MAAKo1C,YAAc+C,EAAyB5Z,YAC5Cv+B,MAAKq4C,cAAgBF,EAAyBtW,cAE9C7hC,MAAK21C,kBAMNn1C,OAAA+B,eAAWq/B,EAAArhC,UAAA,gB3D6/NJiC,I2D7/NP,WAEC,MAAOxC,MAAKq4C,e3D8/NN51C,I2D3/NP,SAAwBC,GAEvB1C,KAAKq4C,cAAgB31C,G3D4/NfE,WAAY,KACZC,aAAc,M2Dv/Nd++B,GAAArhC,UAAAwb,eAAP,SAAsBrM,EAAmBZ,EAA8BoT,EAAqClC,EAA6Cpc,EAAe9C,GAEvK,GAAI4O,EAAO2R,sBAAuB,CACjC,GAAIS,EACJ,IAAI9hB,KAAKo4C,0BAA0Bn3C,MAAQyd,EAAAe,uBAAuBC,aAAc,CAC/E,GAAIk2B,GAAoB51C,KAAKo4C,0BAA0Bz4B,YACvD,IAAI3f,KAAKm1C,gBAAiB,CACzBjzB,EAAkBmT,qBAAqBrV,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiBvQ,EAA0BG,kBAAmB6T,EAAY90C,EAAOgH,EAAAiC,4BAA4B+rC,QAChMF,IAAc,EAEf,GAAI51C,KAAKo1C,YACRlzB,EAAkBmT,qBAAqBrV,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiBvQ,EAA0BK,cAAe2T,EAAY90C,EAAOgH,EAAAiC,4BAA4B+rC,aACvL,CACN,GAAI91C,KAAKm1C,gBACRzlC,EAAOmS,eAAe7B,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiBvQ,EAA0BG,kBAAmB/hC,KAAKs4C,gBAAgB5pC,EAAG1O,KAAKs4C,gBAAgB1pC,EAAG5O,KAAKs4C,gBAAgB5rB,EAAG1sB,KAAKs4C,gBAAgB3rB,EAC9N,IAAI3sB,KAAKo1C,YACR1lC,EAAOmS,eAAe7B,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiBvQ,EAA0BK,cAAejiC,KAAKu4C,YAAY7pC,EAAG1O,KAAKu4C,YAAY3pC,EAAG5O,KAAKu4C,YAAY7rB,EAAG1sB,KAAKu4C,YAAY5rB,KAKrMiV,GAAArhC,UAAAo1C,gBAAR,WAEC,GAAI31C,KAAKo4C,0BAA0Bn3C,MAAQyd,EAAAe,uBAAuBsY,OAAQ,CACzE,GAAI/3B,KAAKm1C,gBACRn1C,KAAKs4C,gBAAkB,GAAI3sC,GAAAiB,SAAS5M,KAAKq4C,cAAcxY,cAAe7/B,KAAKq4C,cAAcvY,gBAAiB9/B,KAAKq4C,cAActY,eAAgB//B,KAAKq4C,cAAcrY,gBACjK,IAAIhgC,KAAKo1C,YACRp1C,KAAKu4C,YAAc,GAAI5sC,GAAAiB,SAAS5M,KAAKq4C,cAAcpY,UAAU,IAAKjgC,KAAKq4C,cAAcnY,YAAY,IAAKlgC,KAAKq4C,cAAclY,WAAW,IAAKngC,KAAKq4C,cAAcjY,YAAY,MAlE7JwB,GAAAG,iBAA0B,CAE1BH,GAAAK,aAAsB,CAoErC,OAAAL,IAzE+C6Q,EAAAM,kBAAlC34C,GAAAwnC,0BAAyBA,I3DykOnCvG,8CAA8C,8DAA8D2X,2CAA2C,2DAA2Dn7B,gCAAgCzY,UAAUiM,sDAAsDjM,YAAYo5C,6DAA6D,SAASl/C,EAAQkB,EAAOJ,GACtZ,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I4DlmOnF,IAAAkL,GAAAjS,EAA6B,gCAC7B,IAAAqS,GAAArS,EAA6B,gCAK7B,IAAAwO,GAAAxO,EAA2C,sDAK3C,IAAAolB,GAAAplB,EAAuC,8CAEvC,IAAAm5C,GAAAn5C,EAAmC,2CAOnC,IAAA0pC,GAAA,SAAAniC,GAAwCd,EAAAijC,EAAAniC,EAgFvC,SAAAmiC,GAAYjI,EAA2B0d,GAEtC53C,EAAAxG,KAAA2F,KAAM+6B,EAAU0d,EAEhBz4C,MAAK04C,mBAAqBD,CAC1Bz4C,MAAK24C,YAAc34C,KAAK04C,mBAAmBzV,YAC3CjjC,MAAKq1C,WAAar1C,KAAK04C,mBAAmBla,WAC1Cx+B,MAAKs1C,WAAat1C,KAAK04C,mBAAmBja,WAC1Cz+B,MAAK44C,QAAU54C,KAAK04C,mBAAmBvV,QACvCnjC,MAAK64C,QAAU74C,KAAK04C,mBAAmBxV,QACvCljC,MAAKy1C,eAAiBz1C,KAAK04C,mBAAmB7Z,eAC9C7+B,MAAK01C,YAAc11C,KAAK04C,mBAAmB5Z,YAC3C9+B,MAAK84C,kBAtENt4C,OAAA+B,eAAWygC,EAAAziC,UAAA,U5DolOJiC,I4DplOP,WAEC,MAAOxC,MAAK64C,S5DqlONp2C,I4DllOP,SAAkBC,GAEjB1C,KAAK64C,QAAUn2C,CAEf1C,MAAK84C,mB5DklOCl2C,WAAY,KACZC,aAAc,M4D7kOrBrC,QAAA+B,eAAWygC,EAAAziC,UAAA,iB5DmlOJiC,I4DnlOP,WAEC,MAAOxC,MAAKy1C,gB5DolONhzC,I4DjlOP,SAAyBC,GAExB1C,KAAKy1C,eAAiB/yC,CAEtB1C,MAAK84C,mB5DilOCl2C,WAAY,KACZC,aAAc,M4D5kOrBrC,QAAA+B,eAAWygC,EAAAziC,UAAA,c5DklOJiC,I4DllOP,WAEC,MAAOxC,MAAK01C,a5DmlONjzC,I4DhlOP,SAAsBC,GAErB1C,KAAK01C,YAAchzC,CAEnB1C,MAAK84C,mB5DglOCl2C,WAAY,KACZC,aAAc,M4D3kOrBrC,QAAA+B,eAAWygC,EAAAziC,UAAA,U5DilOJiC,I4DjlOP,WAEC,MAAOxC,MAAK44C,S5DklONn2C,I4D/kOP,SAAkBC,GAEjB1C,KAAK44C,QAAUl2C,CAEf1C,MAAK84C,mB5D+kOCl2C,WAAY,KACZC,aAAc,M4D7jOdmgC,GAAAziC,UAAAwb,eAAP,SAAsBrM,EAAmBZ,EAA8BoT,EAAqClC,EAA6Cpc,EAAe9C,GAEvK,GAAIghB,GAAe9B,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiBnP,EAAmBK,YAEnG,IAAIrjC,KAAK04C,mBAAmBz3C,MAAQyd,EAAAe,uBAAuBC,aAAc,CACxE,GAAI1f,KAAKs1C,WACRpzB,EAAkBmT,qBAAqBvT,EAAO9hB,KAAK04C,mBAAmB/4B,aAAc7e,EAAOgH,EAAAiC,4BAA4B+rC,aAEvH5zB,GAAkBmT,qBAAqBvT,EAAO9hB,KAAK04C,mBAAmB/4B,aAAc7e,EAAOgH,EAAAiC,4BAA4B8oC,aAExHnjC,GAAOmS,eAAeC,EAAO9hB,KAAK+4C,WAAWrqC,EAAG1O,KAAK+4C,WAAWnqC,EAAG5O,KAAK+4C,WAAWrsB,EAAG1sB,KAAK+4C,WAAWpsB,EAEvG,IAAI3sB,KAAK24C,YACRjpC,EAAOmlC,yBAAyB70B,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiBnP,EAAmBO,cAAevjC,KAAKg5C,eAG9HhW,GAAAziC,UAAAu4C,gBAAR,WAEC,GAAI94C,KAAK24C,YAAa,CACrB34C,KAAKg5C,cAAgB,GAAIztC,GAAA6B,QACzBpN,MAAKg5C,cAAczE,eAAev0C,KAAK44C,QAAQlqC,EAAG/C,EAAAiB,SAASqsC,OAC3Dj5C,MAAKg5C,cAAczE,eAAev0C,KAAK44C,QAAQhqC,EAAGjD,EAAAiB,SAASssC,OAC3Dl5C,MAAKg5C,cAAczE,eAAev0C,KAAK44C,QAAQlsB,EAAG/gB,EAAAiB,SAASusC,QAE5D,GAAIn5C,KAAK04C,mBAAmBz3C,MAAQyd,EAAAe,uBAAuBsY,OAAQ,CAClE/3B,KAAK+4C,WAAa,GAAIptC,GAAAiB,SAAS5M,KAAK64C,QAAS,EAAG74C,KAAK64C,QAAQjV,KAAKC,GAAG,EAAG7jC,KAAK01C,YAAY9R,KAAKC,GAAG,IACjG,IAAI7jC,KAAKq1C,WAAY,CACpB,GAAIr1C,KAAKy1C,gBAAkB,EAC1B,KAAK,IAAKx7C,OAAM,+CACjB+F,MAAK+4C,WAAWnqC,EAAIg1B,KAAKC,GAAG,EAAE7jC,KAAKy1C,mBAEnCz1C,MAAK+4C,WAAWnqC,EAAIg1B,KAAKC,GAAG,GA3HjBb,GAAAK,YAAqB,CAGrBL,GAAAO,aAAsB,CA2HrC,OAAAP,IAjIwCyP,EAAAM,kBAA3B34C,GAAA4oC,mBAAkBA,I5DosO5B3H,8CAA8C,8DAA8D2X,2CAA2C,2DAA2Dv7B,gCAAgCrY,UAAUyY,gCAAgCzY,UAAUiM,sDAAsDjM,YAAYg6C,kEAAkE,SAAS9/C,EAAQkB,EAAOJ,GACrc,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I6D7tOnF,IAAAsL,GAAArS,EAA6B,gCAK7B,IAAAwO,GAAAxO,EAA2C,sDAK3C,IAAAolB,GAAAplB,EAAuC,8CAEvC,IAAAm5C,GAAAn5C,EAAmC,2CAOnC,IAAA6qC,GAAA,SAAAtjC,GAA6Cd,EAAAokC,EAAAtjC,EAwB5C,SAAAsjC,GAAYpJ,EAA2Bse,GAEtCx4C,EAAAxG,KAAA2F,KAAM+6B,EAAUse,EAEhBr5C,MAAKs5C,wBAA0BD,CAC/Br5C,MAAKu5C,YAAcv5C,KAAKs5C,wBAAwBlV,YAEhDpkC,MAAKw5C,uBAnBNh5C,OAAA+B,eAAW4hC,EAAA5jC,UAAA,c7DmtOJiC,I6DntOP,WAEC,MAAOxC,MAAKu5C,a7DotON92C,I6DjtOP,SAAsBC,GAErB1C,KAAKu5C,YAAc72C,CAEnB1C,MAAKw5C,wB7DitOC52C,WAAY,KACZC,aAAc,M6DlsOdshC,GAAA5jC,UAAAwb,eAAP,SAAsBrM,EAAmBZ,EAA8BoT,EAAqClC,EAA6Cpc,EAAe9C,GAEvK,GAAIghB,GAAe9B,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiBhO,EAAwBG,iBAExG,IAAItkC,KAAKs5C,wBAAwBr4C,MAAQyd,EAAAe,uBAAuBC,aAC/DwC,EAAkBmT,qBAAqBvT,EAAO9hB,KAAKs5C,wBAAwB35B,aAAc7e,EAAOgH,EAAAiC,4BAA4B+rC,aAE5HpmC,GAAOmS,eAAeC,EAAO9hB,KAAKy5C,gBAAgB/qC,EAAG1O,KAAKy5C,gBAAgB7qC,EAAG5O,KAAKy5C,gBAAgB/sB,EAAG1sB,KAAKy5C,gBAAgB9sB,GAGpHwX,GAAA5jC,UAAAi5C,qBAAR,WAEC,GAAIx5C,KAAKs5C,wBAAwBr4C,MAAQyd,EAAAe,uBAAuBsY,OAAQ,CACvE,GAAI/3B,KAAKu5C,YAAY5sB,GAAK,EACzB,KAAK,IAAK1yB,OAAM,4CAEjB,IAAI+F,KAAKy5C,iBAAmB,KAC3Bz5C,KAAKy5C,gBAAkB,GAAI9tC,GAAAiB,QAE5B5M,MAAKy5C,gBAAgB/qC,EAAI1O,KAAKu5C,YAAY7qC,CAC1C1O,MAAKy5C,gBAAgB7qC,EAAI5O,KAAKu5C,YAAY3qC,CAC1C5O,MAAKy5C,gBAAgB/sB,EAAI1sB,KAAKu5C,YAAY7sB,CAC1C1sB,MAAKy5C,gBAAgB9sB,EAAIiX,KAAKC,GAAG,EAAE7jC,KAAKu5C,YAAY5sB,GAxDxCwX,GAAAG,iBAA0B,CA2DzC,OAAAH,IA9D6CsO,EAAAM,kBAAhC34C,GAAA+pC,wBAAuBA,I7DowOjC9I,8CAA8C,8DAA8D2X,2CAA2C,2DAA2Dn7B,gCAAgCzY,UAAUiM,sDAAsDjM,YAAYs6C,gEAAgE,SAASpgD,EAAQkB,EAAOJ,GACzZ,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I8DvxOnF,IAAAyH,GAAAxO,EAA2C,sDAK3C,IAAAolB,GAAAplB,EAAuC,8CAEvC,IAAAm5C,GAAAn5C,EAAmC,2CAQnC,IAAAyrC,GAAA,SAAAlkC,GAA2Cd,EAAAglC,EAAAlkC,EAoC1C,SAAAkkC,GAAYhK,EAA2B4e,GAEtC94C,EAAAxG,KAAA2F,KAAM+6B,EAAU4e,EAEhB35C,MAAK45C,sBAAwBD,CAC7B35C,MAAK65C,UAAY75C,KAAK45C,sBAAsB5U,WA9B7CxkC,OAAA+B,eAAWwiC,EAAAxkC,UAAA,Y9DixOJiC,I8DjxOP,WAEC,MAAOxC,MAAK65C,W9DkxONp3C,I8D/wOP,SAAoBC,GAEnB1C,KAAK65C,UAAYn3C,G9DgxOXE,WAAY,KACZC,aAAc,M8D3wOdkiC,GAAAxkC,UAAAu5C,aAAP,WAEC,MAAO95C,MAAK+5C,oBAGNhV,GAAAxkC,UAAAy5C,aAAP,SAAoBt3C,GAEnB1C,KAAK+5C,oBAAsBr3C,CAE3B1C,MAAKi6C,yBAA2B,GAAIz5C,QAc9BukC,GAAAxkC,UAAAwb,eAAP,SAAsBrM,EAAmBZ,EAA8BoT,EAAqClC,EAA6Cpc,EAAe9C,GAEvK,GAAId,KAAK45C,sBAAsB34C,MAAQyd,EAAAe,uBAAuBI,gBAAkB7f,KAAKi6C,yBAAyB/3B,EAAkB8S,YAC/Hh1B,KAAKk6C,0BAA0Bh4B,EAEhC,IAAIJ,GAAe9B,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiBpN,EAAsBE,eAEtG,IAAIjlC,KAAK45C,sBAAsB34C,MAAQyd,EAAAe,uBAAuBsY,OAC7DroB,EAAOmS,eAAeC,EAAO9hB,KAAK65C,UAAUnrC,EAAG1O,KAAK65C,UAAUjrC,EAAG5O,KAAK65C,UAAUntB,OAEhFxK,GAAkBmT,qBAAqBvT,EAAO9hB,KAAK45C,sBAAsBj6B,aAAc7e,EAAOgH,EAAAiC,4BAA4B8oC,SAtD9G9N,GAAAE,eAAwB,CAwDvC,OAAAF,IA3D2C0N,EAAAM,kBAA9B34C,GAAA2qC,sBAAqBA,I9Dg0O/B1J,8CAA8C,8DAA8D2X,2CAA2C,2DAA2D3nC,sDAAsDjM,YAAY+6C,uEAAuE,SAAS7gD,EAAQkB,EAAOJ,GACtX,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I+Dz1OnF,IAAAkL,GAAAjS,EAA6B,gCAW7B,IAAAm5C,GAAAn5C,EAAmC,2CAOnC,IAAAisC,GAAA,SAAA1kC,GAAkDd,EAAAwlC,EAAA1kC,EAOjD,SAAA0kC,GAAYxK,EAA2B4Y,GAEtC9yC,EAAAxG,KAAA2F,KAAM+6B,EAAU4Y,EAJT3zC,MAAA4zC,QAAmB,GAAIroC,GAAA6B,SAOxBm4B,EAAAhlC,UAAAwb,eAAP,SAAsBrM,EAAmBZ,EAA8BoT,EAAqClC,EAA6Cpc,EAAe9C,GAEvK,GAA4Bd,KAAKo6C,mBAAmB3/B,aAAc6iB,aAAc,CAC/Et9B,KAAK4zC,QAAQliC,SAAS5C,EAAWqF,aAAa/C,eAC9CpR,MAAK4zC,QAAQc,OAAO9wC,EAAO+wC,sBAC3BjlC,GAAOmlC,yBAAyB70B,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiB5M,EAA6BnI,cAAep9B,KAAK4zC,UAdlIrO,GAAAnI,aAAsB,CAkBrC,OAAAmI,IArBkDkN,EAAAM,kBAArC34C,GAAAmrC,6BAA4BA,I/Dg2OtCyN,2CAA2C,2DAA2Dv7B,gCAAgCrY,YAAYi7C,wEAAwE,SAAS/gD,EAAQkB,EAAOJ,GACrP,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IgEv3OnF,IAAAkL,GAAAjS,EAA6B,gCAM7B,IAAAwO,GAAAxO,EAA2C,sDAM3C,IAAAolB,GAAAplB,EAAuC,8CAEvC,IAAAm5C,GAAAn5C,EAAmC,2CAOnC,IAAA4sC,GAAA,SAAArlC,GAAmDd,EAAAmmC,EAAArlC,EAyBlD,SAAAqlC,GAAYnL,EAA2Buf,GAEtCz5C,EAAAxG,KAAA2F,KAAM+6B,EAAUuf,EAlBTt6C,MAAA4zC,QAAmB,GAAIroC,GAAA6B,QAoB9BpN,MAAKu6C,8BAAgCD,CACrCt6C,MAAK65C,UAAY75C,KAAKu6C,8BAA8BvV,WAfrDxkC,OAAA+B,eAAW2jC,EAAA3lC,UAAA,YhEw2OJiC,IgEx2OP,WAEC,MAAOxC,MAAK65C,WhEy2ONp3C,IgEt2OP,SAAoBC,GAEnB1C,KAAK65C,UAAYn3C,GhEu2OXE,WAAY,KACZC,aAAc,MgE71OdqjC,GAAA3lC,UAAAwb,eAAP,SAAsBrM,EAAmBZ,EAA8BoT,EAAqClC,EAA6Cpc,EAAe9C,GAEvK,GAAIghB,GAAe9B,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiBjM,EAA8BjB,eAE9G,IAA4BjlC,KAAKo6C,mBAAmB3/B,aAAc6iB,aAAc,CAC/Et9B,KAAK4zC,QAAQliC,SAAS5C,EAAWqF,aAAa/C,eAC9CpR,MAAK4zC,QAAQc,OAAO9wC,EAAO+wC,sBAC3BjlC,GAAOmlC,yBAAyB70B,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiBjM,EAA8B9I,cAAep9B,KAAK4zC,SAGhJ,GAAI5zC,KAAKu6C,8BAA8Bt5C,MAAQyd,EAAAe,uBAAuBsY,OAAQ,CAC7E/3B,KAAKw6C,QAAU1rC,EAAWqF,aAAawgC,sBAAsB8F,gBAAgBz6C,KAAK65C,UAClFnqC,GAAOmS,eAAeC,EAAO9hB,KAAKw6C,QAAQ9rC,EAAG1O,KAAKw6C,QAAQ5rC,EAAG5O,KAAKw6C,QAAQ9tB,OAE1ExK,GAAkBmT,qBAAqBvT,EAAO9hB,KAAKu6C,8BAA8B56B,aAAc7e,EAAOgH,EAAAiC,4BAA4B8oC,SA5CtH3M,GAAA9I,aAAsB,CAEtB8I,GAAAjB,eAAwB,CA8CvC,OAAAiB,IAnDmDuM,EAAAM,kBAAtC34C,GAAA8rC,8BAA6BA,IhEq5OvC7K,8CAA8C,8DAA8D2X,2CAA2C,2DAA2Dv7B,gCAAgCrY,UAAUiM,sDAAsDjM,YAAYs7C,0EAA0E,SAASphD,EAAQkB,EAAOJ,GACna,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IiE/6OnF,IAAAsL,GAAArS,EAA6B,gCAK7B,IAAAwO,GAAAxO,EAA2C,sDAK3C,IAAAolB,GAAAplB,EAAuC,8CAEvC,IAAAm5C,GAAAn5C,EAAmC,2CAOnC,IAAAotC,GAAA,SAAA7lC,GAAqDd,EAAA2mC,EAAA7lC,EAuCpD,SAAA6lC,GAAY3L,EAA2B4f,GAEtC95C,EAAAxG,KAAA2F,KAAM+6B,EAAU4f,EAEhB36C,MAAK46C,gCAAkCD,CACvC36C,MAAK66C,oBAAsB76C,KAAK46C,gCAAgCjU,oBAEhE3mC,MAAK86C,+BAlCNt6C,OAAA+B,eAAWmkC,EAAAnmC,UAAA,sBjEq6OJiC,IiEr6OP,WAEC,MAAOxC,MAAK66C,qBjEs6ONp4C,IiEn6OP,SAA8BC,GAE7B1C,KAAK66C,oBAAsBn4C,CAE3B1C,MAAK86C,gCjEm6OCl4C,WAAY,KACZC,aAAc,MiE95Od6jC,GAAAnmC,UAAAw6C,wBAAP,WAEC,MAAO/6C,MAAK+5C,oBAGNrT,GAAAnmC,UAAAy6C,wBAAP,SAA+Bt4C,GAE9B1C,KAAK+5C,oBAAsBr3C,CAE3B1C,MAAKi6C,yBAA2B,GAAIz5C,QAgB9BkmC,GAAAnmC,UAAAwb,eAAP,SAAsBrM,EAAmBZ,EAA8BoT,EAAqClC,EAA6Cpc,EAAe9C,GAEvK,GAAId,KAAK46C,gCAAgC35C,MAAQyd,EAAAe,uBAAuBI,gBAAkB7f,KAAKi6C,yBAAyB/3B,EAAkB8S,YACzIh1B,KAAKk6C,0BAA0Bh4B,EAEhC,IAAIJ,GAAe9B,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiBzL,EAAgCG,yBAEhH,IAAI7mC,KAAK46C,gCAAgC35C,MAAQyd,EAAAe,uBAAuBsY,OACvEroB,EAAOmS,eAAeC,EAAO9hB,KAAKi7C,wBAAwBvsC,EAAG1O,KAAKi7C,wBAAwBrsC,EAAG5O,KAAKi7C,wBAAwBvuB,EAAG1sB,KAAKi7C,wBAAwBtuB,OAE1JzK,GAAkBmT,qBAAqBvT,EAAO9hB,KAAK46C,gCAAgCj7B,aAAc7e,EAAOgH,EAAAiC,4BAA4B+rC,SAG9HpP,GAAAnmC,UAAAu6C,6BAAR,WAEC,GAAI96C,KAAK46C,gCAAgC35C,MAAQyd,EAAAe,uBAAuBsY,OAAQ,CAC/E,GAAI/3B,KAAK66C,oBAAoBluB,GAAK,EACjC,KAAK,IAAK1yB,OAAM,4CACjB,IAAIihD,GAAoBl7C,KAAK66C,oBAAoBl9B,OAEjD,IAAIu9B,EAAS5gD,QAAU,EACtB4gD,EAASxuB,EAAI,MAEbwuB,GAASjU,WAEVjnC,MAAKi7C,wBAA0B,GAAItvC,GAAAiB,SAASsuC,EAASxsC,EAAGwsC,EAAStsC,EAAGssC,EAASxuB,EAAGkX,KAAKC,GAAGqX,EAASvuB,IA1ErF+Z,GAAAG,yBAAkC,CA6EjD,OAAAH,IAhFqD+L,EAAAM,kBAAxC34C,GAAAssC,gCAA+BA,IjEm+OzCrL,8CAA8C,8DAA8D2X,2CAA2C,2DAA2Dn7B,gCAAgCzY,UAAUiM,sDAAsDjM,YAAY+7C,6DAA6D,SAAS7hD,EAAQkB,EAAOJ,GACtZ,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IkE3/OnF,IAAAsL,GAAArS,EAA6B,gCAK7B,IAAAwO,GAAAxO,EAA2C,sDAK3C,IAAAolB,GAAAplB,EAAuC,8CAEvC,IAAAm5C,GAAAn5C,EAAmC,2CAOnC,IAAAkuC,GAAA,SAAA3mC,GAAwCd,EAAAynC,EAAA3mC,EA0EvC,SAAA2mC,GAAYzM,EAA2BqgB,GAEtCv6C,EAAAxG,KAAA2F,KAAM+6B,EAAUqgB,EAEhBp7C,MAAKq7C,mBAAqBD,CAC1Bp7C,MAAKq1C,WAAar1C,KAAKq7C,mBAAmB7c,WAC1Cx+B,MAAKs1C,WAAat1C,KAAKq7C,mBAAmB5c,WAC1Cz+B,MAAKs7C,UAAYt7C,KAAKq7C,mBAAmB5T,UACzCznC,MAAKu7C,UAAYv7C,KAAKq7C,mBAAmB3T,UACzC1nC,MAAKy1C,eAAiBz1C,KAAKq7C,mBAAmBxc,eAC9C7+B,MAAK01C,YAAc11C,KAAKq7C,mBAAmBvc,YAE3C9+B,MAAKw7C,kBArENh7C,OAAA+B,eAAWilC,EAAAjnC,UAAA,YlEi/OJiC,IkEj/OP,WAEC,MAAOxC,MAAKs7C,WlEk/ON74C,IkE/+OP,SAAoBC,GAEnB1C,KAAKs7C,UAAY54C,CAEjB1C,MAAKw7C,mBlE++OC54C,WAAY,KACZC,aAAc,MkE1+OrBrC,QAAA+B,eAAWilC,EAAAjnC,UAAA,YlEg/OJiC,IkEh/OP,WAEC,MAAOxC,MAAKu7C,WlEi/ON94C,IkE9+OP,SAAoBC,GAEnB1C,KAAKu7C,UAAY74C,CAEjB1C,MAAKw7C,mBlE8+OC54C,WAAY,KACZC,aAAc,MkEz+OrBrC,QAAA+B,eAAWilC,EAAAjnC,UAAA,iBlE++OJiC,IkE/+OP,WAEC,MAAOxC,MAAKy1C,gBlEg/ONhzC,IkE7+OP,SAAyBC,GAExB1C,KAAKy1C,eAAiB/yC,CAEtB1C,MAAKw7C,mBlE6+OC54C,WAAY,KACZC,aAAc,MkEx+OrBrC,QAAA+B,eAAWilC,EAAAjnC,UAAA,clE8+OJiC,IkE9+OP,WAEC,MAAOxC,MAAK01C,alE++ONjzC,IkE5+OP,SAAsBC,GAErB1C,KAAK01C,YAAchzC,CAEnB1C,MAAKw7C,mBlE4+OC54C,WAAY,KACZC,aAAc,MkE39Od2kC,GAAAjnC,UAAAwb,eAAP,SAAsBrM,EAAmBZ,EAA8BoT,EAAqClC,EAA6Cpc,EAAe9C,GAEvK,GAAIghB,GAAe9B,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiB3K,EAAmBI,YAEnG,IAAI5nC,KAAKq7C,mBAAmBp6C,MAAQyd,EAAAe,uBAAuBC,aAAc,CACxE,GAAI1f,KAAKq1C,WAAY,CACpB,GAAIr1C,KAAKs1C,WACRpzB,EAAkBmT,qBAAqBvT,EAAO9hB,KAAKq7C,mBAAmB17B,aAAc7e,EAAOgH,EAAAiC,4BAA4B+rC,aAEvH5zB,GAAkBmT,qBAAqBvT,EAAO9hB,KAAKq7C,mBAAmB17B,aAAc7e,EAAOgH,EAAAiC,4BAA4B8oC,aAExH3wB,GAAkBmT,qBAAqBvT,EAAO9hB,KAAKq7C,mBAAmB17B,aAAc7e,EAAOgH,EAAAiC,4BAA4BC,aAExH0F,GAAOmS,eAAeC,EAAO9hB,KAAKy7C,WAAW/sC,EAAG1O,KAAKy7C,WAAW7sC,EAAG5O,KAAKy7C,WAAW/uB,EAAG1sB,KAAKy7C,WAAW9uB,GAGhG6a,GAAAjnC,UAAAi7C,gBAAR,WAEC,GAAIx7C,KAAKq7C,mBAAmBp6C,MAAQyd,EAAAe,uBAAuBsY,OAAQ,CAClE,GAAI/3B,KAAKq1C,WAAY,CACpB,GAAIr1C,KAAKy1C,gBAAkB,EAC1B,KAAK,IAAKx7C,OAAM,+CACjB+F,MAAKy7C,WAAa,GAAI9vC,GAAAiB,UAAU5M,KAAKs7C,UAAYt7C,KAAKu7C,WAAW,EAAG3X,KAAKmE,IAAI/nC,KAAKs7C,UAAYt7C,KAAKu7C,WAAW,EAAG3X,KAAKC,GAAG,EAAE7jC,KAAKy1C,eAAgBz1C,KAAK01C,YAAY9R,KAAKC,GAAG,SAEzK7jC,MAAKy7C,WAAa,GAAI9vC,GAAAiB,SAAS5M,KAAKs7C,UAAWt7C,KAAKu7C,UAAYv7C,KAAKs7C,UAAW,EAAG,IA9GxE9T,GAAAI,YAAqB,CAiHpC,OAAAJ,IApHwCiL,EAAAM,kBAA3B34C,GAAAotC,mBAAkBA,IlEqlP5BnM,8CAA8C,8DAA8D2X,2CAA2C,2DAA2Dn7B,gCAAgCzY,UAAUiM,sDAAsDjM,YAAYs8C,sEAAsE,SAASpiD,EAAQkB,EAAOJ,GAC/Z,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,ImEjmPnF,IAAAoyC,GAAAn5C,EAAmC,2CAOnC,IAAAgvC,GAAA,SAAAznC,GAAiDd,EAAAuoC,EAAAznC,EAoFhD,SAAAynC,GAAYvN,EAA2B4gB,GAEtC96C,EAAAxG,KAAA2F,KAAM+6B,EAAU4gB,EAEhB37C,MAAKm1C,gBAAkBwG,EAA2Brd,gBAClDt+B,MAAKo1C,YAAcuG,EAA2Bpd,YAC9Cv+B,MAAKu1C,YAAcoG,EAA2Bjd,YAC9C1+B,MAAKw1C,UAAYmG,EAA2B/c,UAC5C5+B,MAAK47C,eAAiBD,EAA2BnT,eACjDxoC,MAAK67C,iBAAmBF,EAA2BpT,iBACnDvoC,MAAK21C,kBArENn1C,OAAA+B,eAAW+lC,EAAA/nC,UAAA,cnEulPJiC,ImEvlPP,WAEC,MAAOxC,MAAKu1C,anEwlPN9yC,ImErlPP,SAAsBC,GAErB1C,KAAKu1C,YAAc7yC,CAEnB1C,MAAK21C,mBnEqlPC/yC,WAAY,KACZC,aAAc,MmEhlPrBrC,QAAA+B,eAAW+lC,EAAA/nC,UAAA,YnEslPJiC,ImEtlPP,WAEC,MAAOxC,MAAKw1C,WnEulPN/yC,ImEplPP,SAAoBC,GAEnB1C,KAAKw1C,UAAY9yC,CAEjB1C,MAAK21C,mBnEolPC/yC,WAAY,KACZC,aAAc,MmE/kPrBrC,QAAA+B,eAAW+lC,EAAA/nC,UAAA,mBnEqlPJiC,ImErlPP,WAEC,MAAOxC,MAAK67C,kBnEslPNj5C,WAAY,KACZC,aAAc,MmEjlPrBrC,QAAA+B,eAAW+lC,EAAA/nC,UAAA,iBnEulPJiC,ImEvlPP,WAEC,MAAOxC,MAAK47C,gBnEwlPNn5C,ImErlPP,SAAyBC,GAExB1C,KAAK47C,eAAiBl5C,CACtB1C,MAAK21C,mBnEslPC/yC,WAAY,KACZC,aAAc,MmEplPrBrC,QAAA+B,eAAW+lC,EAAA/nC,UAAA,kBnEulPJiC,ImEvlPP,WAEC,MAAOxC,MAAKm1C,iBnEwlPNvyC,WAAY,KACZC,aAAc,MmEtlPrBrC,QAAA+B,eAAW+lC,EAAA/nC,UAAA,cnEylPJiC,ImEzlPP,WAEC,MAAOxC,MAAKo1C,anE0lPNxyC,WAAY,KACZC,aAAc,MmE3kPdylC,GAAA/nC,UAAAwb,eAAP,SAAsBrM,EAAmBZ,EAA8BoT,EAAqClC,EAA6Cpc,EAAe9C,GAEvK,GAAI4O,EAAO2R,sBAAuB,CACjC,GAAIrhB,KAAK67C,iBAAmB,EAC3BnsC,EAAOmS,eAAe7B,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiB7J,EAA4BO,iBAAkB7oC,KAAK87C,cAAc,GAAI97C,KAAK87C,cAAc,GAAI97C,KAAK87C,cAAc,GAAI97C,KAAK87C,cAAc,GAC1N,IAAI97C,KAAKm1C,gBACRzlC,EAAO+Z,wBAAwBzJ,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiB7J,EAA4BjJ,wBAAyBr/B,KAAKs4C,gBACvJ,IAAIt4C,KAAKo1C,YACR1lC,EAAO+Z,wBAAwBzJ,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiB7J,EAA4B7I,oBAAqBz/B,KAAKu4C,cAI7IjQ,GAAA/nC,UAAAo1C,gBAAR;AAEC31C,KAAK87C,cAAgB,GAAI3zB,cAAa,EACtCnoB,MAAKs4C,gBAAkB,GAAInwB,cAAa,GAAGnoB,KAAK67C,iBAAmB,GACnE77C,MAAKu4C,YAAc,GAAIpwB,cAAa,GAAGnoB,KAAK67C,iBAAmB,GAG/D,IAAI9hD,EACJ,IAAIgd,GAAW,CACf,IAAIyL,GAAexiB,KAAK67C,iBAAmB,EAAG,EAAI77C,KAAK67C,gBACvD,KAAK9hD,EAAI,EAAGA,EAAIyoB,EAAOzoB,IAAK,CAC3B,GAAIA,GAAK,EACRiG,KAAK87C,cAAc/kC,KAAO/W,KAAK47C,eAAe7hD,GAAGk9B,SAEjDj3B,MAAK87C,cAAc/kC,KAAO/W,KAAK47C,eAAe7hD,GAAGk9B,KAAOj3B,KAAK47C,eAAe7hD,EAAI,GAAGk9B,KAErFl9B,EAAIyoB,CACJ,IAAIxiB,KAAK67C,kBAAoB,EAC5B77C,KAAK87C,cAAc/kC,KAAO,MAE1B/W,MAAK87C,cAAc/kC,KAAO,EAAI/W,KAAK47C,eAAe7hD,EAAI,GAAGk9B,IAE1D,IAAIj3B,KAAKm1C,gBAAiB,CACzBp+B,EAAI,CACJ/W,MAAKs4C,gBAAgBvhC,KAAO/W,KAAKu1C,YAAY1V,aAC7C7/B,MAAKs4C,gBAAgBvhC,KAAO/W,KAAKu1C,YAAYzV,eAC7C9/B,MAAKs4C,gBAAgBvhC,KAAO/W,KAAKu1C,YAAYxV,cAC7C//B,MAAKs4C,gBAAgBvhC,KAAO/W,KAAKu1C,YAAYvV,eAC7C,KAAKjmC,EAAI,EAAGA,EAAIiG,KAAK67C,iBAAkB9hD,IAAK,CAC3C,GAAIA,GAAK,EAAG,CACXiG,KAAKs4C,gBAAgBvhC,MAAQ/W,KAAK47C,eAAe7hD,GAAGm9B,MAAM2I,cAAgB7/B,KAAKu1C,YAAY1V,eAAe7/B,KAAK87C,cAAc/hD,EAC7HiG,MAAKs4C,gBAAgBvhC,MAAQ/W,KAAK47C,eAAe7hD,GAAGm9B,MAAM4I,gBAAkB9/B,KAAKu1C,YAAYzV,iBAAiB9/B,KAAK87C,cAAc/hD,EACjIiG,MAAKs4C,gBAAgBvhC,MAAQ/W,KAAK47C,eAAe7hD,GAAGm9B,MAAM6I,eAAiB//B,KAAKu1C,YAAYxV,gBAAgB//B,KAAK87C,cAAc/hD,EAC/HiG,MAAKs4C,gBAAgBvhC,MAAQ/W,KAAK47C,eAAe7hD,GAAGm9B,MAAM8I,gBAAkBhgC,KAAKu1C,YAAYvV,iBAAiBhgC,KAAK87C,cAAc/hD,OAC3H,CACNiG,KAAKs4C,gBAAgBvhC,MAAQ/W,KAAK47C,eAAe7hD,GAAGm9B,MAAM2I,cAAgB7/B,KAAK47C,eAAe7hD,EAAI,GAAGm9B,MAAM2I,eAAe7/B,KAAK87C,cAAc/hD,EAC7IiG,MAAKs4C,gBAAgBvhC,MAAQ/W,KAAK47C,eAAe7hD,GAAGm9B,MAAM4I,gBAAkB9/B,KAAK47C,eAAe7hD,EAAI,GAAGm9B,MAAM4I,iBAAiB9/B,KAAK87C,cAAc/hD,EACjJiG,MAAKs4C,gBAAgBvhC,MAAQ/W,KAAK47C,eAAe7hD,GAAGm9B,MAAM6I,eAAiB//B,KAAK47C,eAAe7hD,EAAI,GAAGm9B,MAAM6I,gBAAgB//B,KAAK87C,cAAc/hD,EAC/IiG,MAAKs4C,gBAAgBvhC,MAAQ/W,KAAK47C,eAAe7hD,GAAGm9B,MAAM8I,gBAAkBhgC,KAAK47C,eAAe7hD,EAAI,GAAGm9B,MAAM8I,iBAAiBhgC,KAAK87C,cAAc/hD,IAGnJA,EAAIiG,KAAK67C,gBACT,IAAI77C,KAAK67C,kBAAoB,EAAG,CAC/B77C,KAAKs4C,gBAAgBvhC,KAAO/W,KAAKw1C,UAAU3V,cAAgB7/B,KAAKu1C,YAAY1V,aAC5E7/B,MAAKs4C,gBAAgBvhC,KAAO/W,KAAKw1C,UAAU1V,gBAAkB9/B,KAAKu1C,YAAYzV,eAC9E9/B,MAAKs4C,gBAAgBvhC,KAAO/W,KAAKw1C,UAAUzV,eAAiB//B,KAAKu1C,YAAYxV,cAC7E//B,MAAKs4C,gBAAgBvhC,KAAO/W,KAAKw1C,UAAUxV,gBAAkBhgC,KAAKu1C,YAAYvV,oBACxE,CACNhgC,KAAKs4C,gBAAgBvhC,MAAQ/W,KAAKw1C,UAAU3V,cAAgB7/B,KAAK47C,eAAe7hD,EAAI,GAAGm9B,MAAM2I,eAAe7/B,KAAK87C,cAAc/hD,EAC/HiG,MAAKs4C,gBAAgBvhC,MAAQ/W,KAAKw1C,UAAU1V,gBAAkB9/B,KAAK47C,eAAe7hD,EAAI,GAAGm9B,MAAM4I,iBAAiB9/B,KAAK87C,cAAc/hD,EACnIiG,MAAKs4C,gBAAgBvhC,MAAQ/W,KAAKw1C,UAAUzV,eAAiB//B,KAAK47C,eAAe7hD,EAAI,GAAGm9B,MAAM6I,gBAAgB//B,KAAK87C,cAAc/hD,EACjIiG,MAAKs4C,gBAAgBvhC,MAAQ/W,KAAKw1C,UAAUxV,gBAAkBhgC,KAAK47C,eAAe7hD,EAAI,GAAGm9B,MAAM8I,iBAAiBhgC,KAAK87C,cAAc/hD,IAIrI,GAAIiG,KAAKo1C,YAAa,CACrBr+B,EAAI,CACJ/W,MAAKu4C,YAAYxhC,KAAO/W,KAAKu1C,YAAYtV,UAAU,GACnDjgC,MAAKu4C,YAAYxhC,KAAO/W,KAAKu1C,YAAYrV,YAAY,GACrDlgC,MAAKu4C,YAAYxhC,KAAO/W,KAAKu1C,YAAYpV,WAAW,GACpDngC,MAAKu4C,YAAYxhC,KAAO/W,KAAKu1C,YAAYnV,YAAY,GACrD,KAAKrmC,EAAI,EAAGA,EAAIiG,KAAK67C,iBAAkB9hD,IAAK,CAC3C,GAAIA,GAAK,EAAG,CACXiG,KAAKu4C,YAAYxhC,MAAQ/W,KAAK47C,eAAe7hD,GAAGm9B,MAAM+I,UAAYjgC,KAAKu1C,YAAYtV,WAAWjgC,KAAK87C,cAAc/hD,GAAG,GACpHiG,MAAKu4C,YAAYxhC,MAAQ/W,KAAK47C,eAAe7hD,GAAGm9B,MAAMgJ,YAAclgC,KAAKu1C,YAAYrV,aAAalgC,KAAK87C,cAAc/hD,GAAG,GACxHiG,MAAKu4C,YAAYxhC,MAAQ/W,KAAK47C,eAAe7hD,GAAGm9B,MAAMiJ,WAAangC,KAAKu1C,YAAYpV,YAAYngC,KAAK87C,cAAc/hD,GAAG,GACtHiG,MAAKu4C,YAAYxhC,MAAQ/W,KAAK47C,eAAe7hD,GAAGm9B,MAAMkJ,YAAcpgC,KAAKu1C,YAAYnV,aAAapgC,KAAK87C,cAAc/hD,GAAG,QAClH,CACNiG,KAAKu4C,YAAYxhC,MAAQ/W,KAAK47C,eAAe7hD,GAAGm9B,MAAM+I,UAAYjgC,KAAK47C,eAAe7hD,EAAI,GAAGm9B,MAAM+I,WAAWjgC,KAAK87C,cAAc/hD,GAAG,GACpIiG,MAAKu4C,YAAYxhC,MAAQ/W,KAAK47C,eAAe7hD,GAAGm9B,MAAMgJ,YAAclgC,KAAK47C,eAAe7hD,EAAI,GAAGm9B,MAAMgJ,aAAalgC,KAAK87C,cAAc/hD,GAAG,GACxIiG,MAAKu4C,YAAYxhC,MAAQ/W,KAAK47C,eAAe7hD,GAAGm9B,MAAMiJ,WAAangC,KAAK47C,eAAe7hD,EAAI,GAAGm9B,MAAMiJ,YAAYngC,KAAK87C,cAAc/hD,GAAG,GACtIiG,MAAKu4C,YAAYxhC,MAAQ/W,KAAK47C,eAAe7hD,GAAGm9B,MAAMkJ,YAAcpgC,KAAK47C,eAAe7hD,EAAI,GAAGm9B,MAAMkJ,aAAapgC,KAAK87C,cAAc/hD,GAAG,KAG1IA,EAAIiG,KAAK67C,gBACT,IAAI77C,KAAK67C,kBAAoB,EAAG,CAC/B77C,KAAKu4C,YAAYxhC,MAAQ/W,KAAKw1C,UAAUvV,UAAYjgC,KAAKu1C,YAAYtV,WAAW,GAChFjgC,MAAKu4C,YAAYxhC,MAAQ/W,KAAKw1C,UAAUtV,YAAclgC,KAAKu1C,YAAYrV,aAAa,GACpFlgC,MAAKu4C,YAAYxhC,MAAQ/W,KAAKw1C,UAAUrV,WAAangC,KAAKu1C,YAAYpV,YAAY,GAClFngC,MAAKu4C,YAAYxhC,MAAQ/W,KAAKw1C,UAAUpV,YAAcpgC,KAAKu1C,YAAYnV,aAAa,QAC9E,CACNpgC,KAAKu4C,YAAYx+C,IAAMiG,KAAKw1C,UAAUvV,UAAYjgC,KAAK47C,eAAe7hD,EAAI,GAAGm9B,MAAM+I,WAAWjgC,KAAK87C,cAAc/hD,GAAG,GACpHiG,MAAKu4C,YAAYxhC,MAAQ/W,KAAKw1C,UAAUtV,YAAclgC,KAAK47C,eAAe7hD,EAAI,GAAGm9B,MAAMgJ,aAAalgC,KAAK87C,cAAc/hD,GAAG,GAC1HiG,MAAKu4C,YAAYxhC,MAAQ/W,KAAKw1C,UAAUrV,WAAangC,KAAK47C,eAAe7hD,EAAI,GAAGm9B,MAAMiJ,YAAYngC,KAAK87C,cAAc/hD,GAAG,GACxHiG,MAAKu4C,YAAYxhC,MAAQ/W,KAAKw1C,UAAUpV,YAAcpgC,KAAK47C,eAAe7hD,EAAI,GAAGm9B,MAAMkJ,aAAapgC,KAAK87C,cAAc/hD,GAAG,MA9L/GuuC,GAAAjJ,uBAAgC,CAGhCiJ,GAAA7I,mBAA4B,CAG5B6I,GAAAO,gBAAyB,CA4LxC,OAAAP,IArMiDmK,EAAAM,kBAApC34C,GAAAkuC,4BAA2BA,InEyxPrC0K,2CAA2C,6DAA6D+I,mEAAmE,SAASziD,EAAQkB,EAAOJ,GACtM,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IoE5yPnF,IAAAyH,GAAAxO,EAA2C,sDAK3C,IAAAolB,GAAAplB,EAAuC,8CAEvC,IAAAm5C,GAAAn5C,EAAmC,2CAOnC,IAAAmwC,GAAA,SAAA5oC,GAA8Cd,EAAA0pC,EAAA5oC,EAgD7C,SAAA4oC,GAAY1O,EAA2BihB,GAEtCn7C,EAAAxG,KAAA2F,KAAM+6B,EAAUihB,EAEhBh8C,MAAKi8C,yBAA2BD,CAEhCh8C,MAAKq1C,WAAar1C,KAAKi8C,yBAAyBzd,WAChDx+B,MAAKs1C,WAAat1C,KAAKi8C,yBAAyBzd,WAChDx+B,MAAKk8C,aAAel8C,KAAKi8C,yBAAyBrS,aAClD5pC,MAAKm8C,YAAcn8C,KAAKi8C,yBAAyBvS,YACjD1pC,MAAKo8C,SAAWp8C,KAAKi8C,yBAAyBtS,SAC9C3pC,MAAKy1C,eAAiBz1C,KAAKi8C,yBAAyBpd,eACpD7+B,MAAK01C,YAAc11C,KAAKi8C,yBAAyBnd,YAEjD9+B,MAAKq8C,wBAzCN77C,OAAA+B,eAAWknC,EAAAlpC,UAAA,cpEmyPJiC,IoEnyPP,WAEC,MAAOxC,MAAK01C,apEoyPNjzC,IoEjyPP,SAAsBC,GAErB1C,KAAK01C,YAAchzC,CAEnB1C,MAAKq8C,yBpEiyPCz5C,WAAY,KACZC,aAAc,MoE5xPrBrC,QAAA+B,eAAWknC,EAAAlpC,UAAA,iBpEkyPJiC,IoElyPP,WAEC,MAAOxC,MAAKy1C,gBpEmyPNhzC,IoEhyPP,SAAyBC,GAExB1C,KAAKy1C,eAAiB/yC,CAEtB1C,MAAKq8C,yBpEgyPCz5C,WAAY,KACZC,aAAc,MoE7wPd4mC,GAAAlpC,UAAAwb,eAAP,SAAsBrM,EAAmBZ,EAA8BoT,EAAqClC,EAA6Cpc,EAAe9C,GAEvK,IAAK4O,EAAO4sC,gBAAiB,CAC5B5sC,EAAOmS,eAAe7B,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiB1I,EAAyBO,YAAahqC,KAAKu8C,iBAAiB,GAAIv8C,KAAKu8C,iBAAiB,GAAIv8C,KAAKu8C,iBAAiB,GAAIv8C,KAAKu8C,iBAAiB,GAC7N,IAAIv8C,KAAKq1C,WAAY,CACpB,GAAIvzB,GAAe9B,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiB1I,EAAyBQ,WACzG,IAAIjqC,KAAKi8C,yBAAyBh7C,MAAQyd,EAAAe,uBAAuBC,aAAc,CAC9E,GAAI1f,KAAKs1C,WACRpzB,EAAkBmT,qBAAqBvT,EAAO9hB,KAAKi8C,yBAAyBt8B,aAAc7e,EAAOgH,EAAAiC,4BAA4B8oC,aAE7H3wB,GAAkBmT,qBAAqBvT,EAAO9hB,KAAKi8C,yBAAyBt8B,aAAc7e,EAAOgH,EAAAiC,4BAA4BC,aAE9H0F,GAAOmS,eAAeC,EAAO9hB,KAAKu8C,iBAAiB,GAAIv8C,KAAKu8C,iBAAiB,MAKzE9S,GAAAlpC,UAAA87C,sBAAR,WAECr8C,KAAKu8C,iBAAmB,GAAIn7C,OAAc,EAE1C,IAAI8oC,GAAgBlqC,KAAKk8C,aAAal8C,KAAKm8C,WAE3Cn8C,MAAKu8C,iBAAiB,GAAKrS,CAC3BlqC,MAAKu8C,iBAAiB,GAAK,EAAEv8C,KAAKm8C,WAClCn8C,MAAKu8C,iBAAiB,GAAK,EAAEv8C,KAAKo8C,QAElC,IAAIp8C,KAAKq1C,WAAY,CACpB,GAAIr1C,KAAKy1C,gBAAkB,EAC1B,KAAK,IAAKx7C,OAAM,+CACjB+F,MAAKu8C,iBAAiB,GAAKrS,EAAOlqC,KAAKy1C,cACvCz1C,MAAKu8C,iBAAiB,GAAKv8C,KAAKy1C,cAChC,IAAIz1C,KAAKs1C,WACRt1C,KAAKu8C,iBAAiB,GAAKv8C,KAAK01C,aA/FrBjM,GAAAO,WAAoB,CAGpBP,GAAAQ,WAAoB,CA+FnC,OAAAR,IArG8CgJ,EAAAM,kBAAjC34C,GAAAqvC,yBAAwBA,IpEs3PlCpO,8CAA8C,8DAA8D2X,2CAA2C,2DAA2D3nC,sDAAsDjM,YAAYo9C,4DAA4D,SAASljD,EAAQkB,EAAOJ,GAC3W,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IqEn4PnF,IAAAgwC,GAAA/2C,EAAoC,4CAOpC,IAAAy5C,GAAA,SAAAlyC,GAAuCd,EAAAgzC,EAAAlyC,EAUtC,SAAAkyC,GAAYhY,EAA2B4Y,EAA+BnuB,GAAA,GAAAA,QAAA,GAA8B,CAA9BA,EAAA,MAErE3kB,EAAAxG,KAAA2F,KAAM+6B,EAAU4Y,EAPV3zC,MAAA+5C,oBAAsC,GAAI34C,MAC1CpB,MAAAi6C,yBAAkC,GAAIz5C,OAQ5CR,MAAKo6C,mBAAqBrf,CAC1B/6B,MAAKy8C,cAAgB9I,CACrB3zC,MAAK08C,iBAAmBl3B,EAGzBhlB,OAAA+B,eAAWwwC,EAAAxyC,UAAA,kBrE23PJiC,IqE33PP,WAEC,MAAOxC,MAAK08C,kBrE43PN95C,WAAY,KACZC,aAAc,MqE13PdkwC,GAAAxyC,UAAAwb,eAAP,SAAsBrM,EAAmBZ,EAA8BoT,EAAqClC,EAA6Cpc,EAAe9C,IAKjKiyC,GAAAxyC,UAAA25C,0BAAP,SAAiCh4B,GAEhCliB,KAAKi6C,yBAAyB/3B,EAAkB8S,YAAc,IAE9D,IAAI5Q,GAAkDlC,EAAkBkC,kBACxE,IAAIZ,GAA2BtB,EAAkBsB,UACjD,IAAI0R,GAA6BhT,EAAkBgT,mBACnD,IAAItV,GAAoB5f,KAAKy8C,cAAc78B,UAC3C,IAAIg2B,GAAoB51C,KAAKy8C,cAAc98B,YAC3C,IAAI8D,EAEJ,IAAIC,EACJ,IAAIC,EACJ,IAAIvT,EACJ,IAAIusC,EAGJ,IAAI55B,GAAsB/iB,KAAK+5C,oBAAoBz/C,MACnD,IAAIP,GAAW,CACf,IAAIgd,GAAW,CACf,IAAIC,GAAW,CAGf,OAAOjd,EAAIgpB,EAAc,CAExB,MAAOhM,EAAIgM,IAAiB45B,EAAoBv4B,EAAmBrN,IAAI+K,OAAS/nB,EAAG,CAClFqW,EAAOpQ,KAAK+5C,oBAAoBhgD,EAChC0pB,GAAek5B,EAAkB/5B,YAAYsS,CAC7CxR,GAAiBi5B,EAAkB9kB,iBAAiB3C,EAAsB0gB,CAE1E,KAAK5+B,EAAI,EAAGA,EAAIyM,EAAczM,GAAKke,EAAqB,CACvDvR,EAAeD,EAAiB1M,CAGhC,KAAKA,EAAI,EAAGA,EAAIyM,EAAczM,GAAKke,EAAqB,CACvDvR,EAAeD,EAAiB1M,CAChCwM,GAAWG,KAAkBvT,EAAK1B,CAClC8U,GAAWG,KAAkBvT,EAAKxB,CAClC4U,GAAWG,KAAkBvT,EAAKsc,CAElC,IAAI9M,GAAc,EACjB4D,EAAWG,KAAkBvT,EAAKuc,GAcrC5V,IAEDhd,IAGDmoB,EAAkB4T,mBAGpB,OAAAid,IA5FuC1C,EAAAwB,mBAA1Bz3C,GAAA24C,kBAAiBA,IrEs8P3BjB,4CAA4C,8DAA8D8K,4DAA4D,SAAStjD,EAAQkB,EAAOJ,GACjM,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IsE19PnF,IAAAyH,GAAAxO,EAA2C,sDAM3C,IAAAm5C,GAAAn5C,EAAmC,2CAOnC,IAAAyxC,GAAA,SAAAlqC,GAAuCd,EAAAgrC,EAAAlqC,EAUtC,SAAAkqC,GAAYhQ,EAA2B8hB,GAEtCh8C,EAAAxG,KAAA2F,KAAM+6B,EAAU8hB,EAAkB,KAElC78C,MAAK88C,kBAAoBD,EAGnB9R,EAAAxqC,UAAAwb,eAAP,SAAsBrM,EAAmBZ,EAA8BoT,EAAqClC,EAA6Cpc,EAAe9C,GAEvKohB,EAAkBmT,qBAAqBrV,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiBpH,EAAkBK,mBAAoBprC,KAAK88C,kBAAkBn9B,aAAc7e,EAAOgH,EAAAiC,4BAA4B+rC,QAElN,IAAIiH,GAAsB/8C,KAAKixC,OAAO,GACtCvhC,GAAOmS,eAAe7B,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiBpH,EAAkBO,qBAAsByR,EAAcA,EAAcA,EAAcA,GAnBxJhS,GAAAK,kBAA2B,CAG3BL,GAAAO,oBAA6B,CAmB5C,OAAAP,IAzBuC0H,EAAAM,kBAA1B34C,GAAA2wC,kBAAiBA,ItEs+P3BiI,2CAA2C,2DAA2D3nC,sDAAsDjM,YAAY49C,0DAA0D,SAAS1jD,EAAQkB,EAAOJ,GAC7P,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IuEj/PnF,IAAAoyC,GAAAn5C,EAAmC,2CAOnC,IAAAwyC,GAAA,SAAAjrC,GAAqCd,EAAA+rC,EAAAjrC,EAOpC,SAAAirC,GAAY/Q,EAA2BkiB,GAEtCp8C,EAAAxG,KAAA2F,KAAM+6B,EAAUkiB,EAEhBj9C,MAAKk9C,gBAAkBD,EAGjBnR,EAAAvrC,UAAAwb,eAAP,SAAsBrM,EAAmBZ,EAA8BoT,EAAqClC,EAA6Cpc,EAAe9C,GAEvK,IAAK4O,EAAO4sC,gBAAiB,CAC5B,GAAIx6B,GAAe9B,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiBrG,EAAgBM,SAChG,IAAIh8B,GAAgBpQ,KAAKk9C,gBAAgB5Q,QACzC58B,GAAOmS,eAAeC,EAAO1R,EAAK1B,EAAG0B,EAAKxB,IAhB9Bk9B,GAAAM,SAAkB,CAoBjC,OAAAN,IAvBqC2G,EAAAM,kBAAxB34C,GAAA0xC,gBAAeA,IvEkgQzBkH,2CAA2C,6DAA6DmK,gEAAgE,SAAS7jD,EAAQkB,EAAOJ,GACnM,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IwEnhQnF,IAAAyH,GAAAxO,EAA2C,sDAK3C,IAAAolB,GAAAplB,EAAuC,8CAEvC,IAAAm5C,GAAAn5C,EAAmC,2CAOnC,IAAAwzC,GAAA,SAAAjsC,GAA2Cd,EAAA+sC,EAAAjsC,EAoC1C,SAAAisC,GAAY/R,EAA2BqiB,GAEtCv8C,EAAAxG,KAAA2F,KAAM+6B,EAAUqiB,EAEhBp9C,MAAKq9C,sBAAwBD,CAC7Bp9C,MAAKs9C,UAAYt9C,KAAKq9C,sBAAsBtQ,WA9B7CvsC,OAAA+B,eAAWuqC,EAAAvsC,UAAA,YxE6gQJiC,IwE7gQP,WAEC,MAAOxC,MAAKs9C,WxE8gQN76C,IwE3gQP,SAAoBC,GAEnB1C,KAAKs9C,UAAY56C,GxE4gQXE,WAAY,KACZC,aAAc,MwEvgQdiqC,GAAAvsC,UAAAg9C,cAAP,WAEC,MAAOv9C,MAAK+5C,oBAGNjN,GAAAvsC,UAAAi9C,cAAP,SAAqB96C,GAEpB1C,KAAK+5C,oBAAsBr3C,CAE3B1C,MAAKi6C,yBAA2B,GAAIz5C,QAW9BssC,GAAAvsC,UAAAwb,eAAP,SAAsBrM,EAAmBZ,EAA8BoT,EAAqClC,EAA6Cpc,EAAe9C,GAEvK,GAAId,KAAKq9C,sBAAsBp8C,MAAQyd,EAAAe,uBAAuBI,gBAAkB7f,KAAKi6C,yBAAyB/3B,EAAkB8S,YAC/Hh1B,KAAKk6C,0BAA0Bh4B,EAEhC,IAAIJ,GAAe9B,EAAsB6W,iBAAiB72B,KAAKmyC,gBAAiBrF,EAAsBG,eAEtG,IAAIjtC,KAAKq9C,sBAAsBp8C,MAAQyd,EAAAe,uBAAuBsY,OAC7DroB,EAAOmS,eAAeC,EAAO9hB,KAAKs9C,UAAU5uC,EAAG1O,KAAKs9C,UAAU1uC,EAAG5O,KAAKs9C,UAAU5wB,OAEhFxK,GAAkBmT,qBAAqBvT,EAAO9hB,KAAKq9C,sBAAsB19B,aAAc7e,EAAOgH,EAAAiC,4BAA4B8oC,SAnD9G/F,GAAAG,eAAwB,CAqDvC,OAAAH,IAxD2C2F,EAAAM,kBAA9B34C,GAAA0yC,sBAAqBA,IxEyjQ/BzR,8CAA8C,8DAA8D2X,2CAA2C,2DAA2D3nC,sDAAsDjM,YAAYq+C,kEAAkE,SAASnkD,EAAQkB,EAAOJ,GACjX,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IyE9kQnF,IAAA8mB,GAAA7tB,EAA6B,iCAE7B,IAAA8tB,GAAA9tB,EAAgC,oCAEhC,IAAA+2C,GAAA/2C,EAAoC,4CAMpC,IAAAk0C,GAAA,SAAA3sC,GAA6Cd,EAAAytC,EAAA3sC,EA6B5C,SAAA2sC,GAAYzS,EAAuB2iB,GAElC78C,EAAAxG,KAAA2F,KAAM+6B,EAAU2iB,EA7BT19C,MAAA29C,aAAsB,CAEtB39C,MAAA49C,cAA6B,GAAIx2B,GAAAM,YACjC1nB,MAAA69C,mBAA6B,IA4BpC79C,MAAK89C,uBAAyBJ,CAE9B19C,MAAK+9C,QAAoChjB,EAAS1f,kBAAkBrb,KAAK89C,uBAAuBE,OAChGh+C,MAAKi+C,QAAoCljB,EAAS1f,kBAAkBrb,KAAK89C,uBAAuBI,QApBjG19C,OAAA+B,eAAWirC,EAAAjtC,UAAA,ezE+kQJiC,IyE/kQP,WAEC,MAAOxC,MAAK29C,czEglQNl7C,IyE7kQP,SAAuBC,GAEtB1C,KAAK29C,aAAej7C,CAEpB1C,MAAKkyC,qBAAuB,IAC5BlyC,MAAK69C,mBAAqB,MzE6kQpBj7C,WAAY,KACZC,aAAc,MyE9jQd2qC,GAAAjtC,UAAAub,MAAP,SAAapZ,GAEZ1C,KAAK69C,mBAAqB,IAE1B79C,MAAKkyC,qBAAuB,IAE5BlyC,MAAK+9C,QAAQjiC,MAAMpZ,EACnB1C,MAAKi+C,QAAQniC,MAAMpZ,GAMb8qC,GAAAjtC,UAAA2wC,aAAP,SAAoB10B,GAEnBxc,KAAK69C,mBAAqB,IAE1B79C,MAAK+9C,QAAQr0C,OAAO8S,EACpBxc,MAAKi+C,QAAQv0C,OAAO8S,EAEpB3b,GAAAN,UAAM2wC,aAAY72C,KAAA2F,KAACwc,GAMbgxB,GAAAjtC,UAAAypB,gBAAP,SAAuBzC,GAEtB,GAAIvnB,KAAK69C,mBACR79C,KAAKm+C,mBAAmB52B,EAEzB,OAAOvnB,MAAK49C,cAMNpQ,GAAAjtC,UAAA6xC,sBAAP,WAECpyC,KAAKkyC,qBAAuB,KAE5B,IAAIkM,GAAiBp+C,KAAK+9C,QAAQ3gC,aAClC,IAAIihC,GAAiBr+C,KAAKi+C,QAAQ7gC,aAElCpd,MAAKiyC,YAAYvjC,EAAI0vC,EAAM1vC,EAAI1O,KAAK29C,cAAcU,EAAM3vC,EAAI0vC,EAAM1vC,EAClE1O,MAAKiyC,YAAYrjC,EAAIwvC,EAAMxvC,EAAI5O,KAAK29C,cAAcU,EAAMzvC,EAAIwvC,EAAMxvC,EAClE5O,MAAKiyC,YAAYvlB,EAAI0xB,EAAM1xB,EAAI1sB,KAAK29C,cAAcU,EAAM3xB,EAAI0xB,EAAM1xB,GAQ3D8gB,GAAAjtC,UAAA49C,mBAAR,SAA2B52B,GAE1BvnB,KAAK69C,mBAAqB,KAE1B,IAAIS,EACJ,IAAIC,GAA4Bv+C,KAAK49C,cAAczzB,UACnD,IAAIq0B,GAA0Bx+C,KAAK+9C,QAAQ/zB,gBAAgBzC,GAAU4C,UACrE,IAAIs0B,GAA0Bz+C,KAAKi+C,QAAQj0B,gBAAgBzC,GAAU4C,UACrE,IAAIu0B,GAAiBC,CACrB,IAAIxQ,GAAaC,CACjB,IAAI9d,EACJ,IAAIrI,GAAmBV,EAASU,SAGhC,IAAIs2B,EAASjkD,QAAU2tB,EACtBs2B,EAASjkD,OAAS2tB,CAEnB,KAAK,GAAIluB,GAAW,EAAGA,EAAIkuB,IAAaluB,EAAG,CAC1CukD,EAAUC,EAASxkD,EAEnB,IAAIukD,GAAW,KACdA,EAAUC,EAASxkD,GAAK,GAAIotB,GAAAgK,SAE7ButB,GAAQF,EAAOzkD,EACf4kD,GAAQF,EAAO1kD,EACfo0C,GAAKuQ,EAAMjyB,WACX2hB,GAAKuQ,EAAMlyB,WAEX6xB,GAAQ9xB,YAAYoyB,KAAKF,EAAMlyB,YAAamyB,EAAMnyB,YAAaxsB,KAAK29C,aAEpErtB,GAAKguB,EAAQ7xB,WACb6D,GAAG5hB,EAAIy/B,EAAGz/B,EAAI1O,KAAK29C,cAAcvP,EAAG1/B,EAAIy/B,EAAGz/B,EAC3C4hB,GAAG1hB,EAAIu/B,EAAGv/B,EAAI5O,KAAK29C,cAAcvP,EAAGx/B,EAAIu/B,EAAGv/B,EAC3C0hB,GAAG5D,EAAIyhB,EAAGzhB,EAAI1sB,KAAK29C,cAAcvP,EAAG1hB,EAAIyhB,EAAGzhB,IAG9C,OAAA8gB,IApI6C6C,EAAAwB,mBAAhCz3C,GAAAozC,wBAAuBA,IzEmrQjC7U,iCAAiC,iDAAiDkmB,oCAAoC,oDAAoD/M,4CAA4C,8DAA8DgN,4DAA4D,SAASxlD,EAAQkB,EAAOJ,GAC3W,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I0ErsQnF,IAAAsL,GAAArS,EAA6B,gCAI7B,IAAA6tB,GAAA7tB,EAA6B,iCAE7B,IAAA8tB,GAAA9tB,EAAgC,oCAEhC,IAAAylD,GAAAzlD,EAAoC,4CAMpC,IAAA00C,GAAA,SAAAntC,GAAuCd,EAAAiuC,EAAAntC,EAgCtC,SAAAmtC,GAAYjT,EAAuBikB,GAElCn+C,EAAAxG,KAAA2F,KAAM+6B,EAAUikB,EAhCTh/C,MAAAi/C,SAAoB,GAAItzC,GAAAiB,QAGxB5M,MAAA49C,cAA6B,GAAIx2B,GAAAM,YACjC1nB,MAAA69C,mBAA6B,IA8BpC79C,MAAKk/C,kBAAoBF,CACzBh/C,MAAK8tC,QAAU9tC,KAAKk/C,kBAAkBC,OAxBvC3+C,OAAA+B,eAAWyrC,EAAAztC,UAAA,e1EisQJiC,I0EjsQP,WAEC,GAAIxC,KAAKwwC,cACRxwC,KAAK0wC,gBAEN,OAAO1wC,MAAKo/C,c1EisQNx8C,WAAY,KACZC,aAAc,M0E5rQrBrC,QAAA+B,eAAWyrC,EAAAztC,UAAA,Y1EksQJiC,I0ElsQP,WAEC,GAAIxC,KAAKwwC,cACRxwC,KAAK0wC,gBAEN,OAAO1wC,MAAKq/C,W1EksQNz8C,WAAY,KACZC,aAAc,M0ErrQdmrC,GAAAztC,UAAAypB,gBAAP,SAAuBzC,GAEtB,GAAIvnB,KAAK69C,mBACR79C,KAAKm+C,mBAAmB52B,EAEzB,OAAOvnB,MAAK49C,cAMN5P,GAAAztC,UAAA2wC,aAAP,SAAoB10B,GAEnBxc,KAAK69C,mBAAqB,IAE1Bh9C,GAAAN,UAAM2wC,aAAY72C,KAAA2F,KAACwc,GAMbwxB,GAAAztC,UAAAmwC,eAAP,WAEC7vC,EAAAN,UAAMmwC,eAAcr2C,KAAA2F,KAEpBA,MAAKo/C,aAAep/C,KAAK8tC,QAAQ9tC,KAAK4wC,eAEtC,IAAI5wC,KAAKk/C,kBAAkBpO,SAAW9wC,KAAK6wC,aAAe7wC,KAAKk/C,kBAAkB9N,UAAW,CAC3FpxC,KAAKq/C,UAAYr/C,KAAK8tC,QAAQ,EACV9tC,MAAK4xC,WAAYp0B,yBAErCxd,MAAKq/C,UAAYr/C,KAAK8tC,QAAQ9tC,KAAK6wC,aAQ7B7C,GAAAztC,UAAA49C,mBAAR,SAA2B52B,GAE1BvnB,KAAK69C,mBAAqB,KAE1B,KAAK79C,KAAKk/C,kBAAkBlO,cAC3B,MAED,IAAIhxC,KAAKwwC,cACRxwC,KAAK0wC,gBAEN,IAAI4O,GAA+Bt/C,KAAKo/C,aAAaj1B,UACrD,IAAIo1B,GAA4Bv/C,KAAKq/C,UAAUl1B,UAC/C,IAAIlC,GAAmBV,EAASU,SAChC,IAAIkmB,GAAaC,CACjB,IAAIsQ,GAAiBC,CACrB,IAAIJ,GAA4Bv+C,KAAK49C,cAAczzB,UACnD,IAAIm0B,EACJ,IAAIhuB,EAGJ,IAAIiuB,EAASjkD,QAAU2tB,EACtBs2B,EAASjkD,OAAS2tB,CAEnB,IAAKA,GAAaq3B,EAAYhlD,QAAY2tB,GAAas3B,EAASjlD,OAC/D,KAAM,IAAIL,OAAM,4BAEjB,KAAK,GAAIF,GAAW,EAAGA,EAAIkuB,IAAaluB,EAAG,CAC1CukD,EAAUC,EAASxkD,EAEnB,IAAIukD,GAAW,KACdA,EAAUC,EAASxkD,GAAK,GAAIotB,GAAAgK,SAE7ButB,GAAQY,EAAYvlD,EACpB4kD,GAAQY,EAASxlD,EACjBo0C,GAAKuQ,EAAMjyB,WACX2hB,GAAKuQ,EAAMlyB,WAEX,IAAIzsB,KAAKk/C,kBAAkBnR,YAC1BuQ,EAAQ9xB,YAAYgzB,MAAMd,EAAMlyB,YAAamyB,EAAMnyB,YAAaxsB,KAAK2wC,mBACrE2N,GAAQ9xB,YAAYoyB,KAAKF,EAAMlyB,YAAamyB,EAAMnyB,YAAaxsB,KAAK2wC,cAErE,IAAI52C,EAAI,EAAG,CACVu2B,EAAKguB,EAAQ7xB,WACb6D,GAAG5hB,EAAIy/B,EAAGz/B,EAAI1O,KAAK2wC,eAAevC,EAAG1/B,EAAIy/B,EAAGz/B,EAC5C4hB,GAAG1hB,EAAIu/B,EAAGv/B,EAAI5O,KAAK2wC,eAAevC,EAAGx/B,EAAIu/B,EAAGv/B,EAC5C0hB,GAAG5D,EAAIyhB,EAAGzhB,EAAI1sB,KAAK2wC,eAAevC,EAAG1hB,EAAIyhB,EAAGzhB,KAQxCshB,GAAAztC,UAAA6xC,sBAAP,WAECpyC,KAAKkyC,qBAAuB,KAE5B,IAAIlyC,KAAKwwC,cACRxwC,KAAK0wC,gBAEN,IAAIvC,GAAaC,EAAaqR,CAC9B,IAAIC,GAAsB1/C,KAAKk/C,kBAAkBQ,UAGjD,IAAK1/C,KAAKmxC,UAAY,GAAKnxC,KAAK6wC,YAAc7wC,KAAK2/C,YAAgB3/C,KAAKmxC,UAAY,GAAKnxC,KAAK6wC,YAAc7wC,KAAK2/C,WAAa,CAC7H3/C,KAAKi/C,SAASvwC,GAAKgxC,EAAWhxC,EAAE1O,KAAKmxC,SACrCnxC,MAAKi/C,SAASrwC,GAAK8wC,EAAW9wC,EAAE5O,KAAKmxC,SACrCnxC,MAAKi/C,SAASvyB,GAAKgzB,EAAWhzB,EAAE1sB,KAAKmxC,UAGtC,GAAIyO,GAAY5/C,KAAKi/C,SAASvwC,CAC9B,IAAImxC,GAAY7/C,KAAKi/C,SAASrwC,CAC9B,IAAIkxC,GAAY9/C,KAAKi/C,SAASvyB,CAE9B,IAAI1sB,KAAKk/C,kBAAkBa,kBAAoB//C,KAAK6wC,aAAe7wC,KAAKk/C,kBAAkB9N,UAAW,CACpGjD,EAAKnuC,KAAK8tC,QAAQ,GAAG3jB,WAAW,GAAGsC,WACnC2hB,GAAKpuC,KAAK8tC,QAAQ,GAAG3jB,WAAW,GAAGsC,WACnCgzB,GAAKz/C,KAAKo/C,aAAaj1B,WAAW,GAAGsC,WAErCzsB,MAAKi/C,SAASvwC,EAAI+wC,EAAG/wC,EAAIy/B,EAAGz/B,EAAI1O,KAAK2wC,eAAevC,EAAG1/B,EAAIy/B,EAAGz/B,EAC9D1O,MAAKi/C,SAASrwC,EAAI6wC,EAAG7wC,EAAIu/B,EAAGv/B,EAAI5O,KAAK2wC,eAAevC,EAAGx/B,EAAIu/B,EAAGv/B,EAC9D5O,MAAKi/C,SAASvyB,EAAI+yB,EAAG/yB,EAAIyhB,EAAGzhB,EAAI1sB,KAAK2wC,eAAevC,EAAG1hB,EAAIyhB,EAAGzhB,OACxD,CACNyhB,EAAKnuC,KAAKo/C,aAAaj1B,WAAW,GAAGsC,WACrC2hB,GAAKpuC,KAAK8tC,QAAQ9tC,KAAK6wC,aAAa1mB,WAAW,GAAGsC,WAClDzsB,MAAKi/C,SAASvwC,EAAIy/B,EAAGz/B,EAAI1O,KAAK2wC,eAAevC,EAAG1/B,EAAIy/B,EAAGz/B,EACvD1O,MAAKi/C,SAASrwC,EAAIu/B,EAAGv/B,EAAI5O,KAAK2wC,eAAevC,EAAGx/B,EAAIu/B,EAAGv/B,EACvD5O,MAAKi/C,SAASvyB,EAAIyhB,EAAGzhB,EAAI1sB,KAAK2wC,eAAevC,EAAG1hB,EAAIyhB,EAAGzhB,GAGxD1sB,KAAKiyC,YAAYvjC,EAAI1O,KAAKi/C,SAASvwC,EAAIkxC,CACvC5/C,MAAKiyC,YAAYrjC,EAAI5O,KAAKi/C,SAASrwC,EAAIixC,CACvC7/C,MAAKiyC,YAAYvlB,EAAI1sB,KAAKi/C,SAASvyB,EAAIozB,CAEvC9/C,MAAK2/C,WAAa3/C,KAAK6wC,YAEzB,OAAA7C,IAlLuC+Q,EAAAzO,mBAA1Bl2C,GAAA4zC,kBAAiBA,I1Em1Q3BrV,iCAAiC,iDAAiDkmB,oCAAoC,oDAAoDmB,4CAA4C,4DAA4DnoC,gCAAgCzY,YAAY6gD,kEAAkE,SAAS3mD,EAAQkB,EAAOJ,GAC3Z,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I2Et2QnF,IAAAi3B,GAAAh+B,EAA8B,kCAI9B,IAAA6tB,GAAA7tB,EAA6B,iCAE7B,IAAA8tB,GAAA9tB,EAAgC,oCAEhC,IAAA+2C,GAAA/2C,EAAoC,4CAMpC,IAAAo1C,GAAA,SAAA7tC,GAA6Cd,EAAA2uC,EAAA7tC,EA8B5C,SAAA6tC,GAAY3T,EAAuB2iB,GAElC78C,EAAAxG,KAAA2F,KAAM+6B,EAAU2iB,EA9BT19C,MAAA29C,aAAsB,CAGtB39C,MAAA49C,cAA6B,GAAIx2B,GAAAM,YACjC1nB,MAAA69C,mBAA6B,IA4BpC79C,MAAK89C,uBAAyBJ,CAE9B19C,MAAKkgD,WAAuCnlB,EAAS1f,kBAAkBrb,KAAK89C,uBAAuBqC,UACnGngD,MAAKogD,iBAA6CrlB,EAAS1f,kBAAkBrb,KAAK89C,uBAAuBuC,iBApB1G7/C,OAAA+B,eAAWmsC,EAAAnuC,UAAA,e3Em2QJiC,I2En2QP,WAEC,MAAOxC,MAAK29C,c3Eo2QNl7C,I2Ej2QP,SAAuBC,GAEtB1C,KAAK29C,aAAej7C,CAEpB1C,MAAKkyC,qBAAuB,IAC5BlyC,MAAK69C,mBAAqB,M3Ei2QpBj7C,WAAY,KACZC,aAAc,M2El1Qd6rC,GAAAnuC,UAAAub,MAAP,SAAapZ,GAEZ1C,KAAK69C,mBAAqB,IAE1B79C,MAAKkyC,qBAAuB,IAE5BlyC,MAAKkgD,WAAWpkC,MAAMpZ,EACtB1C,MAAKkgD,WAAWpkC,MAAMpZ,GAMhBgsC,GAAAnuC,UAAA2wC,aAAP,SAAoB10B,GAEnBxc,KAAK69C,mBAAqB,IAE1B79C,MAAKkgD,WAAWx2C,OAAO8S,EACvBxc,MAAKogD,iBAAiB12C,OAAO8S,EAE7B3b,GAAAN,UAAM2wC,aAAY72C,KAAA2F,KAACwc,GAMbkyB,GAAAnuC,UAAAypB,gBAAP,SAAuBzC,GAEtB,GAAIvnB,KAAK69C,mBACR79C,KAAKm+C,mBAAmB52B,EAEzB,OAAOvnB,MAAK49C,cAMNlP,GAAAnuC,UAAA6xC,sBAAP,WAECpyC,KAAKkyC,qBAAuB,KAE5B,IAAIkM,GAAiBp+C,KAAKkgD,WAAW9iC,aACrC,IAAIihC,GAAiBr+C,KAAKogD,iBAAiBhjC,aAE3Cpd,MAAKod,cAAc1O,EAAI0vC,EAAM1vC,EAAI1O,KAAK29C,aAAaU,EAAM3vC,CACzD1O,MAAKod,cAAcxO,EAAIwvC,EAAMxvC,EAAI5O,KAAK29C,aAAaU,EAAMzvC,CACzD5O,MAAKod,cAAcsP,EAAI0xB,EAAM1xB,EAAI1sB,KAAK29C,aAAaU,EAAM3xB,EAQlDgiB,GAAAnuC,UAAA49C,mBAAR,SAA2B52B,GAE1BvnB,KAAK69C,mBAAqB,KAE1B,IAAIS,EACJ,IAAIC,GAA4Bv+C,KAAK49C,cAAczzB,UACnD,IAAIm2B,GAA6BtgD,KAAKkgD,WAAWl2B,gBAAgBzC,GAAU4C,UAC3E,IAAIo2B,GAA6BvgD,KAAKogD,iBAAiBp2B,gBAAgBzC,GAAU4C,UACjF,IAAIq2B,GAAgBC,CACpB,IAAIC,GAAkBC,CACtB,IAAIrwB,EACJ,IAAIrI,GAAmBV,EAASU,SAGhC,IAAIs2B,EAASjkD,QAAU2tB,EACtBs2B,EAASjkD,OAAS2tB,CAEnB,KAAK,GAAIluB,GAAW,EAAGA,EAAIkuB,IAAaluB,EAAG,CAC1CukD,EAAUC,EAASxkD,EAEnB,IAAIukD,GAAW,KACdA,EAAUC,EAASxkD,GAAK,GAAIotB,GAAAgK,SAE7BqvB,GAAOF,EAAUvmD,EACjB0mD,GAAOF,EAAUxmD,EACjB2mD,GAAUF,EAAK/zB,WACfk0B,GAAUF,EAAKh0B,WAEfiiB,GAAwBkS,UAAUC,SAASJ,EAAKj0B,YAAag0B,EAAKh0B,YAClE8xB,GAAQ9xB,YAAYoyB,KAAK4B,EAAKh0B,YAAakiB,EAAwBkS,UAAW5gD,KAAK29C,aAEnFrtB,GAAKguB,EAAQ7xB,WACb6D,GAAG5hB,EAAIgyC,EAAQhyC,EAAI1O,KAAK29C,aAAagD,EAAQjyC,CAC7C4hB,GAAG1hB,EAAI8xC,EAAQ9xC,EAAI5O,KAAK29C,aAAagD,EAAQ/xC,CAC7C0hB,GAAG5D,EAAIg0B,EAAQh0B,EAAI1sB,KAAK29C,aAAagD,EAAQj0B,GAhIhCgiB,GAAAkS,UAAuB,GAAItpB,GAAAC,UAmI3C,OAAAmX,IAtI6C2B,EAAAwB,mBAAhCz3C,GAAAs0C,wBAAuBA,I3E08QjC/V,iCAAiC,iDAAiDkmB,oCAAoC,oDAAoD/M,4CAA4C,4DAA4Dpa,kCAAkCt4B,YAAY0hD,mEAAmE,SAASxnD,EAAQkB,EAAOJ,GAC9Z,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I4E19QnF,IAAA8mB,GAAA7tB,EAA6B,iCAE7B,IAAA8tB,GAAA9tB,EAAgC,oCAEhC,IAAA+2C,GAAA/2C,EAAoC,4CAMpC,IAAA01C,GAAA,SAAAnuC,GAA8Cd,EAAAivC,EAAAnuC,EAqC7C,SAAAmuC,GAAYjU,EAAuB2iB,GAElC78C,EAAAxG,KAAA2F,KAAM+6B,EAAU2iB,EApCT19C,MAAA49C,cAA6B,GAAIx2B,GAAAM,YACjC1nB,MAAA69C,mBAA6B,IAG7B79C,MAAA29C,aAAsB,CACtB39C,MAAA+gD,WAAoB,CACpB/gD,MAAAghD,YAAsB,IAgC7BhhD,MAAK89C,uBAAyBJ,CAE9B19C,MAAKihD,SAAqClmB,EAAS1f,kBAAkBrb,KAAK89C,uBAAuBoD,QACjGlhD,MAAKmhD,UAAsCpmB,EAAS1f,kBAAkBrb,KAAK89C,uBAAuBsD,SAClGphD,MAAKqhD,MAAkCtmB,EAAS1f,kBAAkBrb,KAAK89C,uBAAuBwD,KAC9FthD,MAAKuhD,OAAmCxmB,EAAS1f,kBAAkBrb,KAAK89C,uBAAuB7J,OA3BhGzzC,OAAA+B,eAAWysC,EAAAzuC,UAAA,a5Eq9QJiC,I4Ex8QP,WAEC,MAAOxC,MAAK+gD,Y5E68QNt+C,I4E59QP,SAAqBC,GAEpB,GAAI1C,KAAK+gD,YAAcr+C,EACtB,MAED1C,MAAK+gD,WAAar+C,CAElB1C,MAAKghD,YAAc,IAEnBhhD,MAAK69C,mBAAqB,IAC1B79C,MAAKkyC,qBAAuB,M5E09QtBtvC,WAAY,KACZC,aAAc,M4Ep8QdmsC,GAAAzuC,UAAAub,MAAP,SAAapZ,GAEZ,GAAI1C,KAAKghD,YACRhhD,KAAKwhD,aAENxhD,MAAK69C,mBAAqB,IAE1B79C,MAAKkyC,qBAAuB,IAE5BlyC,MAAK+9C,QAAQjiC,MAAMpZ,EACnB1C,MAAKi+C,QAAQniC,MAAMpZ,GAMbssC,GAAAzuC,UAAAkhD,YAAP,SAAmBjlC,GAElB,GAAIxc,KAAKghD,YACRhhD,KAAKwhD,aAENxhD,MAAK69C,mBAAqB,IAE1B79C,MAAK+9C,QAAQr0C,OAAO8S,EACpBxc,MAAKi+C,QAAQv0C,OAAO8S,EAEpB3b,GAAAN,UAAM2wC,aAAY72C,KAAA2F,KAACwc,GAMbwyB,GAAAzuC,UAAAypB,gBAAP,SAAuBzC,GAEtB,GAAIvnB,KAAK69C,mBACR79C,KAAKm+C,mBAAmB52B,EAEzB,OAAOvnB,MAAK49C,cAMN5O,GAAAzuC,UAAA6xC,sBAAP,WAECpyC,KAAKkyC,qBAAuB,KAE5B,IAAIlyC,KAAKghD,YACRhhD,KAAKwhD,aAEN,IAAIpD,GAAiBp+C,KAAK+9C,QAAQ3gC,aAClC,IAAIihC,GAAiBr+C,KAAKi+C,QAAQ7gC,aAElCpd,MAAKod,cAAc1O,EAAI0vC,EAAM1vC,EAAI1O,KAAK29C,cAAcU,EAAM3vC,EAAI0vC,EAAM1vC,EACpE1O,MAAKod,cAAcxO,EAAIwvC,EAAMxvC,EAAI5O,KAAK29C,cAAcU,EAAMzvC,EAAIwvC,EAAMxvC,EACpE5O,MAAKod,cAAcsP,EAAI0xB,EAAM1xB,EAAI1sB,KAAK29C,cAAcU,EAAM3xB,EAAI0xB,EAAM1xB,GAQ7DsiB,GAAAzuC,UAAA49C,mBAAR,SAA2B52B,GAE1BvnB,KAAK69C,mBAAqB,KAE1B,IAAI79C,KAAKghD,YACRhhD,KAAKwhD,aAEN,IAAIlD,EACJ,IAAIC,GAA4Bv+C,KAAK49C,cAAczzB,UACnD,IAAIq0B,GAA0Bx+C,KAAK+9C,QAAQ/zB,gBAAgBzC,GAAU4C,UACrE,IAAIs0B,GAA0Bz+C,KAAKi+C,QAAQj0B,gBAAgBzC,GAAU4C,UACrE,IAAIu0B,GAAiBC,CACrB,IAAIxQ,GAAaC,CACjB,IAAI9d,EACJ,IAAIrI,GAAmBV,EAASU,SAGhC,IAAIs2B,EAASjkD,QAAU2tB,EACtBs2B,EAASjkD,OAAS2tB,CAEnB,KAAK,GAAIluB,GAAW,EAAGA,EAAIkuB,IAAaluB,EAAG,CAC1CukD,EAAUC,EAASxkD,EAEnB,IAAIukD,GAAW,KACdA,EAAUC,EAASxkD,GAAK,GAAIotB,GAAAgK,SAE7ButB,GAAQF,EAAOzkD,EACf4kD,GAAQF,EAAO1kD,EACfo0C,GAAKuQ,EAAMjyB,WACX2hB,GAAKuQ,EAAMlyB,WAEX6xB,GAAQ9xB,YAAYoyB,KAAKF,EAAMlyB,YAAamyB,EAAMnyB,YAAaxsB,KAAK29C,aAEpErtB,GAAKguB,EAAQ7xB,WACb6D,GAAG5hB,EAAIy/B,EAAGz/B,EAAI1O,KAAK29C,cAAcvP,EAAG1/B,EAAIy/B,EAAGz/B,EAC3C4hB,GAAG1hB,EAAIu/B,EAAGv/B,EAAI5O,KAAK29C,cAAcvP,EAAGx/B,EAAIu/B,EAAGv/B,EAC3C0hB,GAAG5D,EAAIyhB,EAAGzhB,EAAI1sB,KAAK29C,cAAcvP,EAAG1hB,EAAIyhB,EAAGzhB,IASrCsiB,GAAAzuC,UAAAihD,YAAR,WAECxhD,KAAKghD,YAAc,KAEnB,IAAIhhD,KAAK+gD,WAAa,GAAK/gD,KAAK+gD,WAAa,IAAK,CACjD/gD,KAAK+gD,YAAc,GACnB,IAAI/gD,KAAK+gD,WAAa,EACrB/gD,KAAK+gD,YAAc,IAGrB,GAAI/gD,KAAK+gD,WAAa,GAAI,CACzB/gD,KAAK+9C,QAAU/9C,KAAKihD,QACpBjhD,MAAKi+C,QAAUj+C,KAAKuhD,MACpBvhD,MAAK29C,aAAe39C,KAAK+gD,WAAW,OAC9B,IAAI/gD,KAAK+gD,WAAa,IAAK,CACjC/gD,KAAK+9C,QAAU/9C,KAAKuhD,MACpBvhD,MAAKi+C,QAAUj+C,KAAKmhD,SACpBnhD,MAAK29C,cAAgB39C,KAAK+gD,WAAa,IAAI,OACrC,IAAI/gD,KAAK+gD,WAAa,IAAK,CACjC/gD,KAAK+9C,QAAU/9C,KAAKmhD,SACpBnhD,MAAKi+C,QAAUj+C,KAAKqhD,KACpBrhD,MAAK29C,cAAgB39C,KAAK+gD,WAAa,KAAK,OACtC,CACN/gD,KAAK+9C,QAAU/9C,KAAKqhD,KACpBrhD,MAAKi+C,QAAUj+C,KAAKihD,QACpBjhD,MAAK29C,cAAgB39C,KAAK+gD,WAAa,KAAK,IAG/C,OAAA/R,IA5L8CqB,EAAAwB,mBAAjCz3C,GAAA40C,yBAAwBA,I5E4mRlCrW,iCAAiC,iDAAiDkmB,oCAAoC,oDAAoD/M,4CAA4C,8DAA8D4P,gEAAgE,SAASpoD,EAAQkB,EAAOJ,GAC/W,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I6E1nRnF,IAAA8mB,GAAA7tB,EAA6B,iCAE7B,IAAA8tB,GAAA9tB,EAAgC,oCAEhC,IAAA+2C,GAAA/2C,EAAoC,4CAMpC,IAAAg2C,GAAA,SAAAzuC,GAA2Cd,EAAAuvC,EAAAzuC,EAQ1C,SAAAyuC,GAAYvU,EAAuB2iB,GAElC78C,EAAAxG,KAAA2F,KAAM+6B,EAAU2iB,EAPT19C,MAAA49C,cAA6B,GAAIx2B,GAAAM,YACjC1nB,MAAA69C,mBAA6B,IAC7B79C,MAAA2hD,cAA8B,GAAIvgD,MAClCpB,MAAA4hD,QAAyC,GAAIxgD,MAMpDpB,MAAK89C,uBAAyBJ,CAE9B,IAAI3jD,GAAWiG,KAAK89C,uBAAuB+D,SAE3C,OAAO9nD,IACNiG,KAAK4hD,QAAQ7nD,GAA+BghC,EAAS1f,kBAAkBrb,KAAK89C,uBAAuBzO,SAASt1C,IAMvGu1C,EAAA/uC,UAAAub,MAAP,SAAapZ,GAEZ1C,KAAK69C,mBAAqB,IAE1B79C,MAAKkyC,qBAAuB,IAE5B,KAAK,GAAIn7B,GAAW,EAAGA,EAAI/W,KAAK89C,uBAAuB+D,YAAa9qC,EAAG,CACtE,GAAI/W,KAAK2hD,cAAc5qC,GACtB/W,KAAK4hD,QAAQ7qC,GAAGrN,OAAOhH,IAOnB4sC,GAAA/uC,UAAAkhD,YAAP,SAAmBjlC,GAElB,IAAK,GAAIzF,GAAW,EAAGA,EAAI/W,KAAK89C,uBAAuB+D,YAAa9qC,EAAG,CACtE,GAAI/W,KAAK2hD,cAAc5qC,GACtB/W,KAAK4hD,QAAQ7qC,GAAGrN,OAAO8S,GAGzB3b,EAAAN,UAAM2wC,aAAY72C,KAAA2F,KAACwc,GAMb8yB,GAAA/uC,UAAAypB,gBAAP,SAAuBzC,GAEtB,GAAIvnB,KAAK69C,mBACR79C,KAAKm+C,mBAAmB52B,EAEzB,OAAOvnB,MAAK49C,cAQNtO,GAAA/uC,UAAAuhD,iBAAP,SAAwBhgC,GAEvB,MAAO9hB,MAAK2hD,cAAc7/B,GASpBwtB,GAAA/uC,UAAAwhD,iBAAP,SAAwBjgC,EAAcoS,GAErCl0B,KAAK2hD,cAAc7/B,GAASoS,CAE5Bl0B,MAAKkyC,qBAAuB,IAC5BlyC,MAAK69C,mBAAqB,KAMpBvO,GAAA/uC,UAAA6xC,sBAAP,WAECpyC,KAAKkyC,qBAAuB,KAE5B,IAAI/0B,EACJ,IAAIiS,EAEJpvB,MAAKod,cAAc1O,EAAI,CACvB1O,MAAKod,cAAcxO,EAAI,CACvB5O,MAAKod,cAAcsP,EAAI,CAEvB,KAAK,GAAI3V,GAAW,EAAGA,EAAI/W,KAAK89C,uBAAuB+D,YAAa9qC,EAAG,CACtEqY,EAASpvB,KAAK2hD,cAAc5qC,EAE5B,IAAIqY,EAAQ,CACXjS,EAAQnd,KAAK4hD,QAAQ7qC,GAAGqG,aACxBpd,MAAKod,cAAc1O,GAAK0gB,EAAOjS,EAAMzO,CACrC1O,MAAKod,cAAcxO,GAAKwgB,EAAOjS,EAAMvO,CACrC5O,MAAKod,cAAcsP,GAAK0C,EAAOjS,EAAMuP,IAUhC4iB,GAAA/uC,UAAA49C,mBAAR,SAA2B52B,GAE1BvnB,KAAK69C,mBAAqB,KAE1B,IAAIzuB,EACJ,IAAImvB,GAA4Bv+C,KAAK49C,cAAczzB,UACnD,IAAI63B,EACJ,IAAI1D,GAAmBjyB,CACvB,IAAI41B,GAAgB3xB,CACpB,IAAI4xB,GAAoB3xB,CACxB,IAAI4xB,EACJ,IAAIpoD,EACJ,IAAIqoD,GAAWC,EAAWC,EAAWC,CACrC,IAAI5xB,GAAWH,EAAWC,EAAWC,CACrC,IAAIzI,GAAmBV,EAASU,SAGhC,IAAIs2B,EAASjkD,QAAU2tB,EACtBs2B,EAASjkD,OAAS2tB,CAEnB,KAAK,GAAIlR,GAAW,EAAGA,EAAI/W,KAAK89C,uBAAuB+D,YAAa9qC,EAAG,CACtEqY,EAASpvB,KAAK2hD,cAAc5qC,EAE5B,KAAKqY,EACJ,QAED4yB,GAAQhiD,KAAK4hD,QAAQ7qC,GAAGiT,gBAAgBzC,GAAU4C,UAElD,KAAKg4B,EAAW,CACfA,EAAYH,CACZ,KAAKjoD,EAAI,EAAGA,EAAIkuB,IAAaluB,EAAG,CAC/BukD,EAAUC,EAASxkD,EAEnB,IAAIukD,GAAW,KACdA,EAAUC,EAASxkD,GAAK,GAAIotB,GAAAgK,SAE7B9E,GAAO21B,EAAMjoD,EACbw2B,GAAIlE,EAAKG,WACT8D,GAAKjE,EAAKI,WAEVy1B,GAAU5D,EAAQ9xB,WAElB01B,GAAQxzC,EAAI0gB,EAAOmB,EAAE7hB,CACrBwzC,GAAQtzC,EAAIwgB,EAAOmB,EAAE3hB,CACrBszC,GAAQx1B,EAAI0C,EAAOmB,EAAE7D,CACrBw1B,GAAQv1B,EAAIyC,EAAOmB,EAAE5D,CAErBs1B,GAAQ3D,EAAQ7xB,WAChBw1B,GAAMvzC,EAAI0gB,EAAOkB,EAAG5hB,CACpBuzC,GAAMrzC,EAAIwgB,EAAOkB,EAAG1hB,CACpBqzC,GAAMv1B,EAAI0C,EAAOkB,EAAG5D,OAEf,CACN,IAAK3yB,EAAI,EAAGA,EAAIwtB,EAASU,YAAaluB,EAAG,CACxCukD,EAAUC,EAASxkD,EACnBsyB,GAAO21B,EAAMjoD,EAEbw2B,GAAI4xB,EAAUpoD,GAAGyyB,WACjB61B,GAAK9xB,EAAE7hB,CACP4zC,GAAK/xB,EAAE3hB,CACP2zC,GAAKhyB,EAAE7D,CACP01B,GAAK7xB,EAAE5D,CAEP4D,GAAIlE,EAAKG,WACT8D,GAAKjE,EAAKI,WAEV+D,GAAKD,EAAE7hB,CACP+hB,GAAKF,EAAE3hB,CACP8hB,GAAKH,EAAE7D,CACPiE,GAAKJ,EAAE5D,CAEP,IAAI01B,EAAG7xB,EAAK8xB,EAAG7xB,EAAK8xB,EAAG7xB,EAAK0xB,EAAGzxB,EAAK,EAAG,CACtCH,GAAMA,CACNC,IAAMA,CACNC,IAAMA,CACNC,IAAMA,EAEPuxB,EAAU5D,EAAQ9xB,WAClB01B,GAAQxzC,GAAK0gB,EAAOoB,CACpB0xB,GAAQtzC,GAAKwgB,EAAOqB,CACpByxB,GAAQx1B,GAAK0C,EAAOsB,CACpBwxB,GAAQv1B,GAAKyC,EAAOuB,CAEpBsxB,GAAQ3D,EAAQ7xB,WAChBw1B,GAAMvzC,GAAK0gB,EAAOkB,EAAG5hB,CACrBuzC,GAAMrzC,GAAKwgB,EAAOkB,EAAG1hB,CACrBqzC,GAAMv1B,GAAK0C,EAAOkB,EAAG5D,IAKxB,IAAK3yB,EAAI,EAAGA,EAAIwtB,EAASU,YAAaluB,EACrCwkD,EAASxkD,GAAGyyB,YAAYya,YAE3B,OAAAqI,IAhN2Ce,EAAAwB,mBAA9Bz3C,GAAAk1C,sBAAqBA,I7E+xR/B3W,iCAAiC,iDAAiDkmB,oCAAoC,oDAAoD/M,4CAA4C,8DAA8D0Q,0DAA0D,SAASlpD,EAAQkB,EAAOJ,GACzW,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I8E7yRnF,IAAA0+C,GAAAzlD,EAAoC,4CAMpC,IAAA22C,GAAA,SAAApvC,GAAqCd,EAAAkwC,EAAApvC,EA6BpC,SAAAovC,GAAYlV,EAAuB0nB,GAElC5hD,EAAAxG,KAAA2F,KAAM+6B,EAAU0nB,EAEhBziD,MAAK0iD,gBAAkBD,CACvBziD,MAAK8tC,QAAU9tC,KAAK0iD,gBAAgBvD,OAxBrC3+C,OAAA+B,eAAW0tC,EAAA1vC,UAAA,mB9E8yRJiC,I8E9yRP,WAEC,GAAIxC,KAAKwwC,cACRxwC,KAAK0wC,gBAEN,OAAO1wC,MAAK2iD,kB9E8yRN//C,WAAY,KACZC,aAAc,M8EzyRrBrC,QAAA+B,eAAW0tC,EAAA1vC,UAAA,gB9E+yRJiC,I8E/yRP,WAEC,GAAIxC,KAAKwwC,cACRxwC,KAAK0wC,gBAEN,OAAO1wC,MAAK4iD,e9E+yRNhgD,WAAY,KACZC,aAAc,M8ElyRdotC,GAAA1vC,UAAAmwC,eAAP,WAEC7vC,EAAAN,UAAMmwC,eAAcr2C,KAAA2F,KAEpBA,MAAK2iD,iBAAmB3iD,KAAK8tC,QAAQ9tC,KAAK4wC,eAE1C,IAAI5wC,KAAK0iD,gBAAgB5R,SAAW9wC,KAAK6wC,aAAe7wC,KAAK0iD,gBAAgBtR,UAAW,CACvFpxC,KAAK4iD,cAAgB5iD,KAAK8tC,QAAQ,EAChB9tC,MAAK4xC,WAAYp0B,yBAEnCxd,MAAK4iD,cAAgB5iD,KAAK8tC,QAAQ9tC,KAAK6wC,aAMlCZ,GAAA1vC,UAAA6xC,sBAAP,YAID,OAAAnC,IA5DqC8O,EAAAzO,mBAAxBl2C,GAAA61C,gBAAeA,I9Ek2RzB+P,4CAA4C,8DAA8D6C,uEAAuE,SAASvpD,EAAQkB,EAAOJ,GAC5M,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I+El3RnF,IAAAyiD,GAAAxpD,EAAuC,+CACvC,IAAAypD,GAAAzpD,EAAyC,uDAKzC,IAAA0pD,GAAA,SAAAniD,GAA6Cd,EAAAijD,EAAAniD,EAS5C,SAAAmiD,KAECniD,EAAAxG,KAAA2F,KAEAA,MAAKu6B,aAAewoB,EAAAE,yBAEtB,MAAAD,IAf6CF,EAAAvV,uBAAhCnzC,GAAA4oD,wBAAuBA,I/E+3RjCE,+CAA+C,+DAA+DC,uDAAuD,yEAAyEC,wEAAwE,SAAS9pD,EAAQkB,EAAOJ,GACjV,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IgFx4RnF,IAAAitC,GAAAh0C,EAAwC,iDAExC,IAAA+tB,GAAA/tB,EAAqC;AAKrC,GAAA2pD,GAAA,SAAApiD,GAA8Cd,EAAAkjD,EAAApiD,EAK7C,SAAAoiD,GAAYloB,EAAuB2iB,GAElC78C,EAAAxG,KAAA2F,KAAM+6B,EAAmC2iB,EAEzC19C,MAAKqjD,yBAA2B3F,EAM1BuF,EAAA1iD,UAAA2wC,aAAP,SAAoB10B,GAEnBxc,KAAKk0B,YAAc0P,KAAKmE,IAAIvrB,EAAOxc,KAAKqjD,yBAAyBC,aAAa,IAAKtjD,KAAKqjD,yBAAyBE,WAEjH,IAAIvjD,KAAKk0B,aAAe,EAAG,CAC1Bl0B,KAAKk0B,YAAc,CAEnB,IAAIl0B,KAAKwjD,mCAAqC,KAC7CxjD,KAAKwjD,kCAAoC,GAAIn8B,GAAA6B,oBAAoB7B,EAAA6B,oBAAoBC,oBAAqBnpB,KAAK4xC,WAAY5xC,KAAMA,KAAKqjD,yBAEvIrjD,MAAKqjD,yBAAyB3uC,cAAc1U,KAAKwjD,mCAGlD3iD,EAAAN,UAAM2wC,aAAY72C,KAAA2F,KAACwc,GAErB,OAAAymC,IA9B8C3V,EAAAE,wBAAjCpzC,GAAA6oD,yBAAwBA,IhF85RlCQ,gDAAgD,mDAAmDhW,iDAAiD,mEAAmEiW,mEAAmE,SAASpqD,EAAQkB,EAAOJ,GACrT,YiFr6RA,IAAAupD,GAAArqD,EAAwC,sDAMxC,IAAAsqD,GAAA,WAIC,QAAAA,GAAYL,GAFLvjD,KAAAujD,WAAoB,EAI1BvjD,MAAKujD,WAAaA,EAGZK,EAAArjD,UAAA0oB,iBAAP,SAAwB8R,EAAuB8oB,EAA6BC,EAA2BR,GAEtG,GAAIS,GAAkD,GAAIJ,GAAAX,uBAC1De,GAAwB/F,OAAS6F,CACjCE,GAAwB7F,OAAS4F,CACjCC,GAAwBR,WAAavjD,KAAKujD,UAC1CQ,GAAwBT,WAAaA,CAErC,OAA2BS,GAE7B,OAAAH,KAnBaxpD,GAAAwpD,oBAAmBA,IjFo7R7BI,sDAAsD,wEAAwEC,oEAAoE,SAAS3qD,EAAQkB,EAAOJ,GAC7N,kBACM8pD,mCAAmC,SAAS5qD,EAAQkB,EAAOJ,GACjE,YkFh8RA,IAAAmkB,GAAAjlB,EAAmC,qCAA3Bc,GAAAsoB,kBAAAnE,EAAAmE,iBACR,IAAApE,GAAAhlB,EAAsC,yCAA9Bc,GAAA6lB,sBAAA3B,EAAA2B,qBACR,IAAAkkC,GAAA7qD,EAAmC,qCAA3Bc,GAAA48B,kBAAAmtB,EAAAntB,iBACR,IAAA7P,GAAA7tB,EAA6B,6BAArBc,GAAA+2B,UAAAhK,EAAAgK,SACR,IAAA3S,GAAAllB,EAAsC,yCAA9Bc,GAAAiqB,sBAAA7F,EAAA6F,qBACR,IAAA5F,GAAAnlB,EAAoC,sCAA5Bc,GAAA6oB,mBAAAxE,EAAAwE,kBACR,IAAAvE,GAAAplB,EAAuC,0CAA/Bc,GAAAqlB,uBAAAf,EAAAe,sBACR,IAAA2kC,GAAA9qD,EAA4B,4BAApBc,GAAAy+B,SAAAurB,EAAAvrB,QACR,IAAAwrB,GAAA/qD,EAAgC,iCAAxBc,GAAA89B,cAAAmsB,EAAAnsB,aACR,IAAA9Q,GAAA9tB,EAA+B,gCAAvBc,GAAAstB,aAAAN,EAAAM,YACR,IAAA0K,GAAA94B,EAAqC,uCAA7Bc,GAAAs4B,oBAAAN,EAAAM,mBACR,IAAAib,GAAAr0C,EAAsC,0CAA9Bc,GAAAi/B,sBAAAsU,EAAAtU,qBACR,IAAAirB,GAAAhrD,EAAwC,6CAAhCc,GAAAigC,yBAAAiqB,EAAAjqB,wBACR,IAAAkqB,GAAAjrD,EAAwC,4CAAhCc,GAAAshC,wBAAA6oB,EAAA7oB,uBACR,IAAA8oB,GAAAlrD,EAAsC,0CAA9Bc,GAAA2iC,sBAAAynB,EAAAznB,qBACR,IAAA0nB,GAAAnrD,EAAmC,sCAA3Bc,GAAAwjC,kBAAA6mB,EAAA7mB,iBACR,IAAA8mB,GAAAprD,EAAoC,uCAA5Bc,GAAAsmC,mBAAAgkB,EAAAhkB,kBACR,IAAAikB,GAAArrD,EAAwC,6CAAhCc,GAAAsnC,yBAAAijB,EAAAjjB,wBACR,IAAAvH,GAAA7gC,EAAkC,qCAA1Bc,GAAAghC,iBAAAjB,EAAAiB,gBACR,IAAAwpB,GAAAtrD,EAAmC,sCAA3Bc,GAAAwoC,kBAAAgiB,EAAAhiB,iBACR,IAAAiiB,GAAAvrD,EAAuC,2CAA/Bc,GAAA6pC,uBAAA4gB,EAAA5gB,sBACR,IAAA6gB,GAAAxrD,EAAqC,yCAA7Bc,GAAAyqC,qBAAAigB,EAAAjgB,oBACR,IAAAkgB,GAAAzrD,EAA2C,gDAAnCc,GAAAkrC,4BAAAyf,EAAAzf,2BACR,IAAA0f,GAAA1rD,EAA2C,iDAAnCc,GAAA6rC,6BAAA+e,EAAA/e,4BACR,IAAAgf,GAAA3rD,EAA6C,mDAArCc,GAAAosC,+BAAAye,EAAAze,8BACR,IAAA0e,GAAA5rD,EAAmC,sCAA3Bc,GAAAitC,kBAAA6d,EAAA7d,iBACR,IAAA8d,GAAA7rD,EAA0C,+CAAlCc,GAAA+tC,2BAAAgd,EAAAhd,0BACR,IAAAid,GAAA9rD,EAAwC,4CAAhCc,GAAAgvC,wBAAAgc,EAAAhc,uBACR,IAAAzqB,GAAArlB,EAAkC,qCAA1Bc,GAAAmlB,iBAAAZ,EAAAY,gBACR,IAAA8lC,GAAA/rD,EAAiC,mCAAzBc,GAAAwxC,eAAAyZ,EAAAzZ,cACR,IAAA0Z,GAAAhsD,EAAqC,yCAA7Bc,GAAAwyC,qBAAA0Y,EAAA1Y,oBACR,IAAAkW,GAAAxpD,EAAuC,2CAA/Bc,GAAAmzC,uBAAAuV,EAAAvV,sBACR,IAAAgY,GAAAjsD,EAAkC,qCAA1Bc,GAAAyzC,iBAAA0X,EAAA1X,gBACR,IAAA2X,GAAAlsD,EAAuC,2CAA/Bc,GAAAq0C,uBAAA+W,EAAA/W,sBACR,IAAAgX,GAAAnsD,EAAwC,4CAAhCc,GAAA20C,wBAAA0W,EAAA1W,uBACR,IAAA2W,GAAApsD,EAAqC,yCAA7Bc,GAAAg1C,qBAAAsW,EAAAtW,oBACR,IAAAuW,GAAArsD,EAAiC,mCAAzBc,GAAA21C,eAAA4V,EAAA5V,cACR,IAAAgP,GAAAzlD,EAAoC,wCAA5Bc,GAAAk2C,mBAAAyO,EAAAzO,kBACR,IAAAD,GAAA/2C,EAAoC,wCAA5Bc,GAAAy3C,mBAAAxB,EAAAwB,kBAIR,IAAAzX,GAAA9gC,EAAyC,+CAAjCc,GAAAogC,0BAAAJ,EAAAI,yBACR,IAAAiB,GAAAniC,EAAwC,8CAAhCc,GAAAyhC,yBAAAJ,EAAAI,wBACR,IAAAiB,GAAAxjC,EAAuC,4CAA/Bc,GAAA6iC,uBAAAH,EAAAG,sBACR,IAAAU,GAAArkC,EAAoC,wCAA5Bc,GAAAikC,mBAAAV,EAAAU,kBACR,IAAAoC,GAAAnnC,EAAqC,yCAA7Bc,GAAA0mC,oBAAAL,EAAAK,mBACR,IAAAW,GAAAnoC,EAAyC,+CAAjCc,GAAAwnC,0BAAAH,EAAAG,yBACR,IAAA6Q,GAAAn5C,EAAmC,uCAA3Bc,GAAA24C,kBAAAN,EAAAM,iBACR,IAAApQ,GAAArpC,EAAoC,wCAA5Bc,GAAA4oC,mBAAAL,EAAAK,kBACR,IAAAgB,GAAA1qC,EAAwC,6CAAhCc,GAAA+pC,wBAAAH,EAAAG,uBACR,IAAAS,GAAAtrC,EAAsC,2CAA9Bc,GAAA2qC,sBAAAH,EAAAG,qBACR,IAAAM,GAAA/rC,EAA2C,kDAAnCc,GAAAmrC,6BAAAF,EAAAE,4BACR,IAAAS,GAAA1sC,EAA4C,mDAApCc,GAAA8rC,8BAAAF,EAAAE,6BACR,IAAAK,IAAAjtC,EAA8C,qDAAtCc,GAAAssC,gCAAAH,GAAAG,+BACR,IAAAU,IAAA9tC,EAAoC,wCAA5Bc,GAAAotC,mBAAAJ,GAAAI,kBACR,IAAAU,IAAA5uC,EAA2C,iDAAnCc,GAAAkuC,4BAAAJ,GAAAI,2BACR,IAAAa,IAAA7vC,EAAwC,8CAAhCc,GAAAqvC,yBAAAN,GAAAM,wBACR,IAAAqB,IAAAxxC,EAAmC,uCAA3Bc,GAAA2wC,kBAAAD,GAAAC,iBACR,IAAAY,IAAAryC,EAAkC,qCAA1Bc,GAAA0xC,gBAAAH,GAAAG,eACR,IAAAa,IAAArzC,EAAsC,2CAA9Bc,GAAA0yC,sBAAAH,GAAAG,qBACR,IAAAQ,IAAAh0C,EAAwC,6CAAhCc,GAAAozC,wBAAAF,GAAAE,uBACR,IAAAI,IAAAt0C,EAAmC,uCAA3Bc,GAAA4zC,kBAAAJ,GAAAI,iBACR,IAAAQ,IAAAl1C,EAAwC,6CAAhCc,GAAAs0C,wBAAAF,GAAAE,uBACR,IAAAI,IAAAx1C,EAAwC,8CAAhCc,GAAA40C,yBAAAF,GAAAE,wBACR,IAAAG,IAAA71C,EAAsC,2CAA9Bc,GAAAk1C,sBAAAH,GAAAG,qBACR,IAAAQ,IAAAx2C,EAAkC,qCAA1Bc,GAAA61C,gBAAAH,GAAAG,eACR,IAAA2V,IAAAtsD,EAAqC,8CAA7Bc,GAAAwpD,oBAAAgC,GAAAhC,mBACR,IAAAD,IAAArqD,EAAwC,kDAAhCc,GAAA4oD,wBAAAW,GAAAX,uBACR,IAAAD,IAAAzpD,EAAwC,mDAAhCc,GAAA6oD,yBAAAF,GAAAE,wBAER,IAAA5kC,IAAA/kB,EAAkC,+BAA1Bc,GAAAme,iBAAA8F,GAAA9F,gBACR,IAAAuM,IAAAxrB,EAA+B,2BAAvBc,GAAAogB,aAAAsK,GAAAtK,YACR,IAAAkjB,IAAApkC,EAAqC,mCAA7Bc,GAAAwkB,qBAAA8e,GAAA9e,oBACR,IAAAinC,IAAAvsD,EAAkC,+BAA1Bc,GAAA2qB,iBAAA8gC,GAAA9gC,gBACR,IAAA+gC,IAAAxsD,EAAqC,mCAA7Bc,GAAA0rB,qBAAAggC,GAAAhgC,oBACR,IAAAigC,IAAAzsD,EAAkC,+BAA1Bc,GAAAktB,iBAAAy+B,GAAAz+B,gBACR,IAAA0+B,IAAA1sD,EAAoC,iCAA5Bc,GAAAi4B,mBAAA2zB,GAAA3zB,kBACR,IAAA4zB,IAAA3sD,EAAiC,6BAAzBc,GAAAq5B,eAAAwyB,GAAAxyB,iBlFygSLyyB,+BAA+B,mDAAmDC,2BAA2B,+CAA+CC,mCAAmC,uDAAuDC,+BAA+B,mDAAmDC,mCAAmC,uDAAuDC,+BAA+B,mDAAmDC,iCAAiC,qDAAqDC,6BAA6B,iDAAiDC,qCAAqC,yDAAyDC,yCAAyC,6DAA6DC,qCAAqC,yDAAyDC,6BAA6B,iDAAiDC,yCAAyC,6DAA6DC,sCAAsC,0DAA0DC,0CAA0C,8DAA8DC,4BAA4B,gDAAgDC,iCAAiC,qDAAqDC,gCAAgC,oDAAoDC,uCAAuC,2DAA2DC,0CAA0C,8DAA8DC,6CAA6C,iEAAiEC,4CAA4C,gEAAgEC,0CAA0C,8DAA8DC,sCAAsC,0DAA0DC,uCAAuC,2DAA2DC,6CAA6C,iEAAiEC,qCAAqC,yDAAyDC,sCAAsC,0DAA0DC,2CAA2C,+DAA+DC,yCAAyC,6DAA6DC,gDAAgD,oEAAoEC,iDAAiD,qEAAqEC,mDAAmD,uEAAuEC,sCAAsC,0DAA0DC,+CAA+C,mEAAmEC,4CAA4C,gEAAgEC,qCAAqC,yDAAyDC,mCAAmC,uDAAuDC,yCAAyC,6DAA6DC,2CAA2C,+DAA+DC,qCAAqC,yDAAyDC,2CAA2C,+DAA+DC,4CAA4C,gEAAgEC,yCAAyC,6DAA6DC,mCAAmC,uDAAuDC,wCAAwC,4DAA4DC,wCAAwC,4DAA4DC,+CAA+C,mEAAmEC,8CAA8C,kEAAkEC,4CAA4C,gEAAgEC,wCAAwC,4DAA4DC,yCAAyC,6DAA6DC,+CAA+C,mEAAmEC,wCAAwC,4DAA4DC,6CAA6C,iEAAiEC,2CAA2C,+DAA+DC,kDAAkD,sEAAsEC,mDAAmD,uEAAuEC,qDAAqD,yEAAyEC,wCAAwC,4DAA4DC,iDAAiD,qEAAqEC,8CAA8C,kEAAkEC,uCAAuC,2DAA2DC,uCAAuC,2DAA2DC,qCAAqC,yDAAyDC,2CAA2C,+DAA+DC,6CAA6C,iEAAiEC,uCAAuC,2DAA2DC,6CAA6C,iEAAiEC,8CAA8C,kEAAkEC,2CAA2C,+DAA+DC,qCAAqC,yDAAyDC,8CAA8C,kEAAkEC,kDAAkD,sEAAsEC,mDAAmD,yEAAyEC,kDAAkD,SAASvxD,EAAQkB,EAAOJ,GAC/gP,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,ImFzlSnF,IAAAyqD,GAAAxxD,EAAiC,0CAEjC,IAAA+e,GAAA/e,EAAoC,6CACpC,IAAAyxD,GAAAzxD,EAA6B,oCAQ7B,IAAA4tB,GAAA5tB,EAA+B,0CAC/B,IAAA0xD,GAAA1xD,EAA+B,yCAU/B,IAAA2xD,GAAA,SAAApqD,GAAqCd,EAAAkrD,EAAApqD,EAoDpC,SAAAoqD,GAAYvwD,EAAuBoG,GApDpC,GAAAkH,GAAAhI,IAsDEa,GAAAxG,KAAA2F,KAAMtF,EAAUoG,EApDVd,MAAAkrD,OAAgB,CAUflrD,MAAAmrD,UAAmB,GAAI3qD,OACvBR,MAAAorD,iBAA0B,GAAI5qD,OAE/BR,MAAAq0B,eAA+BjzB,OAE9BpB,MAAAqrD,YAAqB,CAuC5BrrD,MAAKsrD,UAAY5wD,CACjBsF,MAAKqI,OAASvH,CAEdd,MAAKurD,6BAA+B,SAACpjD,GAAwB,MAAAH,GAAKwjD,qBAAqBrjD,GACvFnI,MAAKyrD,wBAA0B,SAACtjD,GAAwB,MAAAH,GAAK0jD,gBAAgBvjD,GAC7EnI,MAAK2rD,8BAAgC,SAACxjD,GAAwB,MAAAH,GAAK4jD,sBAAsBzjD,GACzFnI,MAAK6rD,yBAA2B,SAAC1jD,GAAwB,MAAAH,GAAK8jD,iBAAiB3jD,GAE/EnI,MAAKsrD,UAAU/iD,iBAAiB2e,EAAAgG,cAAc6+B,cAAe/rD,KAAKyrD,wBAClEzrD,MAAKsrD,UAAU/iD,iBAAiB2e,EAAAgG,cAAcC,mBAAoBntB,KAAKurD,6BAEvEvrD,MAAKsrD,UAAU/iD,iBAAiB2e,EAAAgG,cAAc8+B,eAAgBhsD,KAAK6rD,yBACnE7rD,MAAKsrD,UAAU/iD,iBAAiB2e,EAAAgG,cAAcE,oBAAqBptB,KAAK2rD,+BA/CzEnrD,OAAA+B,eAAW0oD,EAAA1qD,UAAA,gBnF+kSJiC,ImF/kSP,WAEC,KAAM,IAAI6V,GAAAiB,qBnFglSJ1W,WAAY,KACZC,aAAc,MmF9kSrBrC,QAAA+B,eAAW0oD,EAAA1qD,UAAA,iBnFilSJiC,ImFjlSP,WAEC,KAAM,IAAI6V,GAAAiB,qBnFklSJ1W,WAAY,KACZC,aAAc,MmFhlSrBrC,QAAA+B,eAAW0oD,EAAA1qD,UAAA,YnFmlSJiC,ImFnlSP,WAEC,MAAOxC,MAAKsrD,WnFolSN1oD,WAAY,KACZC,aAAc,MmF/kSrBrC,QAAA+B,eAAW0oD,EAAA1qD,UAAA,cnFqlSJiC,ImFrlSP,WAEC,MAAOxC,MAAKqrD,anFslSNzoD,WAAY,KACZC,aAAc,MmFjlSrBrC,QAAA+B,eAAW0oD,EAAA1qD,UAAA,enFulSJiC,ImFvlSP,WAEC,MAAOxC,MAAKm1B,cnFwlSNvyB,WAAY,KACZC,aAAc,MmFhkSdooD,GAAA1qD,UAAA+zB,iBAAP,WAEC,IAAKt0B,KAAKisD,gBACTjsD,KAAKksD,gBAEN,OAAOlsD,MAAKq0B,eAMN42B,GAAA1qD,UAAA4rD,iBAAP,WAEC,IAAKnsD,KAAKisD,gBACTjsD,KAAKksD,gBAEN,OAAOlsD,MAAKosD,SAONnB,GAAA1qD,UAAA8rD,kBAAP,SAAyB76B,GAGxB,IAAKxxB,KAAKisD,gBACTjsD,KAAKksD,gBAEN,IAAII,GAAkB96B,EAAenD,iBAAiBtf,EAEtD,KAAK/O,KAAKorD,iBAAiBkB,GAC1BtsD,KAAKusD,gBAAgB/6B,EAEtB,OAAOxxB,MAAKmrD,UAAUmB,GAMhBrB,GAAA1qD,UAAAi0B,uBAAP,SAA8B1S,EAAc0P,EAA+B9D,EAAuB7Q,GAAvB,GAAA6Q,QAAA,GAAqB,CAArBA,EAAA,EAAuB,GAAA7Q,QAAA,GAAiB,CAAjBA,EAAA,EAEjG7c,KAAKqsD,kBAAkB76B,GAAgBpnB,SAAS0X,EAAO0P,EAAeg7B,KAAM9+B,GAAc8D,EAAe9D,WAAY8D,EAAe3U,OAASA,EAAQ2U,EAAei7B,UAM9JxB,GAAA1qD,UAAAmsD,QAAP,SAAevkD,GAEdtH,EAAAN,UAAMmsD,QAAOryD,KAAA2F,KAACmI,EAEdnI,MAAKsrD,UAAUrgD,oBAAoBic,EAAAgG,cAAc6+B,cAAe/rD,KAAKyrD,wBACrEzrD,MAAKsrD,UAAUrgD,oBAAoBic,EAAAgG,cAAcC,mBAAoBntB,KAAKurD,6BAE1EvrD,MAAKsrD,UAAUrgD,oBAAoBic,EAAAgG,cAAc8+B,eAAgBhsD,KAAK6rD,yBACtE7rD,MAAKsrD,UAAUrgD,oBAAoBic,EAAAgG,cAAcE,oBAAqBptB,KAAK2rD,8BAE3E3rD,MAAKsrD,UAAY,IAEjB,IAAItrD,KAAK2sD,UAAW,CACnB3sD,KAAK2sD,UAAUD,QAAQvkD,EACvBnI,MAAK2sD,UAAY,MAIZ1B,GAAA1qD,UAAAqsD,gBAAP,SAAuB99C,EAA8BY,EAAmB9L,EAAe+N,GAEtF,IAAK3R,KAAKorD,iBACTprD,KAAKksD,iBASAjB,GAAA1qD,UAAAssD,KAAP,SAAY/9C,EAA8BY,EAAmB9L,EAAe+N,EAAyB6Q,EAAc3F,GAElH,KAAM,IAAIxE,GAAAiB,oBAQJ2xC,GAAA1qD,UAAA2rD,eAAP,SAAsBY,GAAA,GAAAA,QAAA,GAAsB,CAAtBA,EAAA,EAErB,GAAInmC,GAA2B3mB,KAAKsrD,UAAU3kC,OAC9C,IAAIA,EAAS,CACZ3mB,KAAKosD,SAAiCpsD,KAAKqI,OAAO8B,eAAe6gD,EAAA+B,cAAcC,cAAcrmC,EAAS3mB,KAAKsrD,UAAU1oC,YAAa5iB,KAAKq0B,eAAgBy4B,GACvJ9sD,MAAKqrD,YAAcrrD,KAAKosD,SAASa,kBAAkBzqC,MAAMmE,EAAQ+G,eAC3D,CACN1tB,KAAKosD,SAAW,IAChBpsD,MAAKqrD,YAAc,CACnBrrD,MAAKq0B,eAAkBjzB,QAGxB0rD,GAAe9sD,KAAKqrD,WAGpB,IAAI1kC,GAAWmmC,EAAcnmC,EAAQnE,MAAMxiB,KAAKsrD,UAAU3kC,QAAQ+G,WAAY,CAC7E,IAAK1tB,KAAK2sD,UACT3sD,KAAK2sD,UAAY3sD,KAAKktD,uBAEvBltD,MAAK2sD,UAAUT,eAAeY,OACxB,IAAI9sD,KAAK2sD,UAAW,CAC1B3sD,KAAK2sD,UAAUD,QAAQ,GAAI3B,GAAAoC,WAAWpC,EAAAoC,WAAWC,MAAOptD,KAAKsrD,WAC7DtrD,MAAK2sD,UAAY,KAGlB3sD,KAAKisD,gBAAkB,IAGvB,IAAIjsD,KAAKq0B,eAAe/5B,OACvB,IAAK,GAAIynB,KAAO/hB,MAAKorD,iBACpBprD,KAAKorD,iBAAiBrpC,GAAO,MAUxBkpC,GAAA1qD,UAAAgsD,gBAAR,SAAwB/6B,GAEvBxxB,KAAKm1B,aAAen1B,KAAKsrD,UAAU1oC,WAEnC,IAAI0pC,GAAkB96B,EAAenD,iBAAiBtf,EAEtD/O,MAAKmrD,UAAUmB,GAAkCtsD,KAAKqI,OAAO8B,eAAe6gD,EAAA+B,cAAcM,eAAe77B,EAAenD,iBAAkBruB,KAAKq0B,gBAE/Ir0B,MAAKorD,iBAAiBkB,GAAY,KAS5BrB,GAAA1qD,UAAAirD,qBAAP,SAA4BrjD,GAE3B,IAAKA,EAAMqpB,eACV,MAEDxxB,MAAKisD,gBAAkB,MASjBhB,GAAA1qD,UAAAmrD,gBAAP,SAAuBvjD,GAEtB,IAAKA,EAAMqpB,eACV,MAEDxxB,MAAKosD,SAASM,QAAQ,GAAI3B,GAAAoC,WAAWpC,EAAAoC,WAAWC,MAAOjlD,EAAMqpB,gBAC7DxxB,MAAKosD,SAAW,KASVnB,GAAA1qD,UAAAqrD,sBAAP,SAA6BzjD,GAE5B,IAAKA,EAAMqpB,eACV,MAED,IAAI86B,GAAkBnkD,EAAMqpB,eAAenD,iBAAiBtf,EAE5D/O,MAAKorD,iBAAiBkB,GAAY,MAS5BrB,GAAA1qD,UAAAurD,iBAAP,SAAwB3jD,GAEvB,IAAKA,EAAMqpB,eACV,MAED,IAAI86B,GAAkBnkD,EAAMqpB,eAAenD,iBAAiBtf,EAE5D,IAAI/O,KAAKmrD,UAAUmB,GAAW,CAC7BtsD,KAAKmrD,UAAUmB,GAAUI,QAAQ,GAAI3B,GAAAoC,WAAWpC,EAAAoC,WAAWC,MAAOjlD,EAAMqpB,uBACjExxB,MAAKmrD,UAAUmB,SACftsD,MAAKorD,iBAAiBkB,IAcxBrB,GAAA1qD,UAAA2sD,sBAAP,WAEC,KAAM,IAAI70C,GAAAiB,oBAEZ,OAAA2xC,IApSqCH,EAAAwC,gBAAxBlzD,GAAA6wD,gBAAeA,InF4zSzB/wC,6CAA6C9a,UAAUmuD,oCAAoCnuD,UAAUouD,0CAA0CpuD,UAAU8yB,0CAA0C9yB,UAAUquD,yCAAyCruD,YAAYsuD,kDAAkD,SAASp0D,EAAQkB,EAAOJ,GAC/U,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IoFz1SnF,IAAAkL,GAAAjS,EAA4B,gCAE5B,IAAAsO,GAAAtO,EAAkC,4CAElC,IAAAq0D,GAAAr0D,EAAqC,+CAMrC,IAAAs0D,GAAAt0D,EAAiC,8BAYjC,IAAA2D,GAAA,SAAA4D,GAAqCd,EAAA9C,EAAA4D,EA4HpC,SAAA5D,GAAY4wD,EAA2B/sD,GAEtCD,EAAAxG,KAAA2F,KAAM6tD,EAAc/sD,EAPbd,MAAA8tD,YAAuB,GAAIviD,GAAA6B,QAC3BpN,MAAA+tD,WAAoB,IAQ3B/tD,MAAKguD,cAAgBH,EA5HtBrtD,OAAA+B,eAAWtF,EAAAsD,UAAA,gBpFk1SJiC,IoFl1SP,WAEC,MAAOvF,GAAgBmS,cpFm1SjBxM,WAAY,KACZC,aAAc,MoFj1SrBrC,QAAA+B,eAAWtF,EAAAsD,UAAA,iBpFo1SJiC,IoFp1SP,WAEC,MAAOvF,IpFq1SD2F,WAAY,KACZC,aAAc,MoFn1SP5F,GAAAgxD,sBAAd,SAAoCv+C,GAEnCA,EAAOw+C,oBAGMjxD,GAAAkxD,gBAAd,SAA8Bz+C,EAAmB0J,EAAmCC,GAGnF,GAAI+0C,GAAmC1+C,EAAO2+C,sBAAwB,EAAIh1C,EAAgBi1C,qBAAuBj1C,EAAgBk1C,gBACjI,IAAIC,GAAkCp1C,EAAcmN,wBACpD,IAAIkoC,GAAkCr1C,EAAcmN,wBAGpD,IAAImoC,GAAsCt1C,EAAc4N,uBACxD5N,GAAc4N,uBACd5N,GAAc4N,uBACd5N,GAAc4N,uBACdtX,GAAOi/C,gBAAkBD,EAAc5sC,MAAM,CAE7C1I,GAAc4N,uBACd,IAAI4nC,GAAiCx1C,EAAc4N,uBACnD,IAAI6nC,GAAoCz1C,EAAc4N,uBACtD,IAAI8nC,GAA6B11C,EAAc4N,uBAE/C,IAAI+nC,GAAuC31C,EAAc4N,uBACzD5N,GAAc4N,uBACd5N,GAAc4N,uBACd5N,GAAc4N,uBACdtX,GAAOs/C,iBAAmBD,EAAejtC,MAAM,CAE/C,IAAImtC,GAA2B71C,EAAcyH,yBAC7CzH,GAAc0H,oBAAoBmuC,EAAI,EACtC,IAAIC,GAA2B91C,EAAcyH,yBAC7CzH,GAAc0H,oBAAoBouC,EAAI,EAEtC,IAAI/0D,GAA0Bif,EAAcyH,yBAC5CzH,GAAc0H,oBAAoB3mB,EAAG,EACrC,IAAIg1D,GAA+B/1C,EAAcyH,yBACjDzH,GAAc0H,oBAAoBquC,EAAQ,EAC1C,IAAIC,GAAiCh2C,EAAcyH,yBACnDzH,GAAc0H,oBAAoBsuC,EAAU,EAC5C,IAAIvyC,GAA+BzD,EAAcyH,yBACjDzH,GAAc0H,oBAAoBjE,EAAQ,EAE1C,OAAO,OAASoyC,EAAK,KAAOb,EAAY,KAAOW,EAAiB,QAC/D,OAASG,EAAK,KAAOV,EAAY,KAAOO,EAAiB,QACzD,OAAS50D,EAAI,KAAO+0D,EAAK,KAAOD,EAAK,SAIrC,OAASE,EAAS,OAASF,EAAK,OAASH,EAAO,UAChD,OAASK,EAAS,OAASP,EAAW,OAASO,EAAS,UAQxD,OAAStyC,EAAS,OAASoyC,EAAK,OAASH,EAAO,UAChD,OAASjyC,EAAS,OAASoyC,EAAK,OAASC,EAAK,UAG9C,OAASryC,EAAS,OAASA,EAAS,MAAQgyC,EAAc,UAC1D,OAAShyC,EAAS,OAASA,EAAS,OAASA,EAAS,UAEtD,OAASA,EAAS,OAASA,EAAS,OAASA,EAAS,UAEtD,OAASA,EAAS,SAAWA,EAAS,SAAW1iB,EAAI,UACrD,OAASi1D,EAAW,SAAWH,EAAK,SAAWpyC,EAAS,UACxD,OAASuyC,EAAW,OAASR,EAAW,UAGxC,OAASK,EAAK,KAAOA,EAAK,KAAOE,EAAS,aAC1C,OAASC,EAAW,KAAOA,EAAW,KAAOD,EAAS,aACtD,OAASF,EAAK,KAAOA,EAAK,KAAOG,EAAW,SAG5C,OAASj1D,EAAI,SAAWA,EAAI,YAC5B,OAASg1D,EAAS,SAAWF,EAAK,YAClC,OAASE,EAAS,OAASP,EAAW,WACtC,OAASQ,EAAW,SAAWj1D,EAAI,KAAOg1D,EAAS,QACnD,OAASC,EAAW,SAAWA,EAAW,YAG1C,OAASA,EAAW,SAAWA,EAAW,SAAWX,EAAY,UACjE,OAASW,EAAW,OAASR,EAAW,UAIxC,OAAS/xC,EAAS,OAASoyC,EAAK,KAAOJ,EAAc,QACrD,OAAShyC,EAAS,OAASA,EAAS,OAASiyC,EAAO,UACpD,OAASM,EAAW,SAAWA,EAAW,SAAWvyC,EAAS,UAG9D,OAASoyC,EAAK,SAAWA,EAAK,SAAWG,EAAW,UAEpD,WAAaH,EAAK,KAAOP,EAAgB,QAG7BzxD,GAAAoyD,kBAAd,SAAgC3/C,EAAmB0J,EAAmCC,GAErF,MAAO,GAeDpc,GAAAsD,UAAAmsD,QAAP,SAAevkD,GAEdtH,EAAAN,UAAMmsD,QAAOryD,KAAA2F,KAACmI,EAEdnI,MAAKguD,cAAgB,KAGf/wD,GAAAsD,UAAAqsD,gBAAP,SAAuB99C,EAA8BY,EAAmB9L,EAAe+N,GAEtF9Q,EAAAN,UAAMqsD,gBAAevyD,KAAA2F,KAAC8O,EAAYY,EAAQ9L,EAAQ+N,EAElD,IAAIjC,EAAO4/C,kBAAoB,EAC9BtvD,KAAKw0B,uBAAuB9kB,EAAO4/C,iBAAkBtvD,KAAKguD,cAAcuB,OAEzEvvD,MAAKw0B,uBAAuB,EAAGx0B,KAAKguD,cAAc1gC,UAAW,EAC7DttB,MAAKw0B,uBAAuB,EAAGx0B,KAAKguD,cAAc1gC,UAAW,EAAG,GAChEttB,MAAKw0B,uBAAuB,EAAGx0B,KAAKguD,cAAcS,UAElD/+C,GAAO8/C,mBAAmB,EAAE,IAAM,CAClC9/C,GAAO8/C,mBAAmB,EAAE,IAAM,CAClC9/C,GAAO8/C,mBAAmB,EAAE,IAAM,CAClC9/C,GAAO8/C,mBAAmB,EAAE,IAAM,CAElC9/C,GAAO8/C,mBAAmB,GAAG,KAAO,CAEpC9/C,GAAO8/C,mBAAmB,GAAG,IAAMxvD,KAAK+tD,YAAa/tD,KAAKqI,OAAkB,YAAGu7B,KAAKiG,IAAI7pC,KAAKqI,OAAOrD,YAAYjD,MAAO/B,KAAKqI,OAAOrD,YAAY5C,QAAUwhC,KAAKiG,IAAI7pC,KAAKqI,OAAOtG,MAAO/B,KAAKqI,OAAOjG,QACjMsN,GAAO8/C,mBAAmB,GAAG,IAAM,EAAE,GACrC9/C,GAAO8/C,mBAAmB,GAAG,IAAM5rD,EAAO6rD,WAAWC,IAErD,IAAIxpD,GAAqBlG,KAAKqI,OAAOnC,QAG/BjJ,GAAAsD,UAAAssD,KAAP,SAAY/9C,EAA8BY,EAAmB9L,EAAe+N,EAAyB6Q,EAAc3F,GAElH,GAAI3W,GAAqBlG,KAAKqI,OAAOnC,OAGrCtC,GAAO6rD,WAAWE,OAAOC,cAAclgD,EAAO8/C,mBAAoB9/C,EAAOi/C,gBAAiB,KAE1F3uD,MAAK8tD,YAAYp8C,SAAS5C,EAAWqF,aAAa/C,eAClDpR,MAAK8tD,YAAYpZ,OAAO9wC,EAAO+wC,sBAC/B30C,MAAK8tD,YAAY8B,cAAclgD,EAAO8/C,mBAAoB9/C,EAAOs/C,iBAAkB,KAEnF9oD,GAAQ2pD,6BAA6BlC,EAAAmC,qBAAqBC,OAAQrgD,EAAO8/C,mBAEzE,IAAIxvD,KAAKosD,SACRpsD,KAAKmsD,mBAAmBU,KAAKjlD,EAAAgD,kBAAkBC,UAAW,EAAG7K,KAAKgwD,gBAElEhwD,MAAKqI,OAAOnC,QAAQ+pD,aAAaroD,EAAAgD,kBAAkBC,UAAWgS,EAAQ2F,GAASxiB,KAAK4iB,aAa/E3lB,GAAAsD,UAAA2sD,sBAAP,WAEC,MAAO,IAAIjwD,GAAgB+C,KAAKguD,cAAehuD,KAAKqI,QAhMvCpL,GAAAmS,aAAsB,iBAkMrC,OAAAnS,IApMqC2wD,EAAA3C,gBAAxB7wD,GAAA6C,gBAAeA,IpFu+SzBizD,8BAA8B,iDAAiDz4C,gCAAgCrY,UAAUgM,4CAA4ChM,UAAU+wD,+CAA+C/wD,YAAYgxD,oDAAoD,SAAS92D,EAAQkB,EAAOJ,GACzT,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IqFlgTnF,IAAAkL,GAAAjS,EAA4B,gCAC5B,IAAAqS,GAAArS,EAA4B,gCAI5B,IAAAsO,GAAAtO,EAAkC,4CAClC,IAAAq0D,GAAAr0D,EAAqC,+CAMrC,IAAA+2D,GAAA/2D,EAAoC,kCASpC,IAAAg3D,GAAA,SAAAzvD,GAAuCd,EAAAuwD,EAAAzvD,EAAvC,SAAAyvD,KAAuCzvD,EAAA0vD,MAAAvwD,KAAAwwD,UAE9BxwD,MAAAywD,kBAA6B,GAAIllD,GAAA6B,SAIzC5M,OAAA+B,eAAW+tD,EAAA/vD,UAAA,gBrFy/SJiC,IqFz/SP,WAEC,MAAO8tD,GAAkBlhD,crF0/SnBxM,WAAY,KACZC,aAAc,MqFx/SrBrC,QAAA+B,eAAW+tD,EAAA/vD,UAAA,iBrF2/SJiC,IqF3/SP,WAEC,MAAO8tD,IrF4/SD1tD,WAAY,KACZC,aAAc,MqF1/SPytD,GAAArC,sBAAd,SAAoCv+C,IAOtB4gD,GAAAnC,gBAAd,SAA8Bz+C,EAAmB0J,EAAmCC,GAEnF,GAAInf,GAAc,EAGlB,IAAI4qC,GAAkCp1B,EAAO2+C,sBAAwB,EAAIh1C,EAAgBi1C,qBAAuBj1C,EAAgBk1C,gBAGhI,IAAIG,GAAsCt1C,EAAc4N,uBACxD5N,GAAc4N,uBACd5N,GAAc4N,uBACd5N,GAAc4N,uBACdtX,GAAOi/C,gBAAkBD,EAAc5sC,MAAM,CAE7C,IAAI5Q,GAAsCkI,EAAc4N,uBACxDtX,GAAOghD,mBAAqBx/C,EAAc4Q,MAAM,CAEhD,IAAI6uC,GAAoCv3C,EAAc4N,uBAEtD,IAAI6T,GAA6BzhB,EAAcyH,yBAE/C3mB,IAAQ,OAAS2gC,EAAO,KAAOiK,EAAW,KAAO6rB,EAAc,KAC9D,OAAS91B,EAAO,KAAOA,EAAO,KAAO3pB,EAAgB,IAEtD,IAAIxB,EAAOkhD,uBAAyB,EAAG,CACtCv3C,EAAgBw3C,mBAAqBz3C,EAAc4H,gBACnD9mB,IAAQ,OAAS2gC,EAAO,KAAOA,EAAO,KAAO6zB,EAAgB,KAC5D,OAASr1C,EAAgBw3C,mBAAqB,KAAOh2B,EAAO,KAC5D,WAAaA,EAAO,SACf,CACN3gC,GAAQ,WAAa2gC,EAAO,KAAO6zB,EAAgB,KAGpD,MAAOx0D,GAGMo2D,GAAAjB,kBAAd,SAAgC3/C,EAAmB0J,EAAmCC,GAErF,MAAO,GAGDi3C,GAAA/vD,UAAAssD,KAAP,SAAY/9C,EAA8BY,EAAmB9L,EAAe+N,EAAyB6Q,EAAc3F,GAElH,GAAIiF,GAAepS,EAAOghD,kBAC1B,IAAI3c,GAAenwC,EAAOsN,aAC1BxB,GAAO8/C,mBAAmB1tC,KAAW,EAAEiyB,EAAIrlC,CAC3CgB,GAAO8/C,mBAAmB1tC,KAAW,EAAEiyB,EAAInlC,CAC3Cc,GAAO8/C,mBAAmB1tC,KAAW,EAAEiyB,EAAIrnB,CAC3Chd,GAAO8/C,mBAAmB1tC,KAAW,CACrCpS,GAAO8/C,mBAAmB1tC,KAAWpS,EAAO8/C,mBAAmB1tC,KAAWpS,EAAO8/C,mBAAmB1tC,KAAWle,EAAO6rD,WAAWqB,IAAIltB,KAAKmtB,KAAK,EAC/IrhD,GAAO8/C,mBAAmB1tC,GAAS,CAEnC,IAAI4tC,GAAgB,GAAI/jD,GAAAiB,QAExB5M,MAAKywD,kBAAkB/+C,SAASC,EAChC3R,MAAKywD,kBAAkBO,UAAU,EAAGtB,EAEpC,IAAIuB,GAAkBrtD,EAAOsN,aAE7B,IAAIggD,GAAYxB,EAAKhhD,CACrB,IAAIyiD,GAAYzB,EAAK9gD,CACrB,IAAIwiD,GAAY1B,EAAKhjC,CACrB,IAAI2kC,KAAc3B,EAAKhhD,EAAEuiD,EAAOviD,EAAIghD,EAAK9gD,EAAEqiD,EAAOriD,EAAI8gD,EAAKhjC,EAAEukC,EAAOvkC,EAAIkX,KAAKmtB,KAAKG,EAAGA,EAAKC,EAAGA,EAAKC,EAAGA,GAErG,IAAIE,GAAeJ,GAAM,EAAG,GAAK,CACjC,IAAIK,GAAeJ,GAAM,EAAG,GAAK,CAEjC,IAAIhxD,GAAa,GAAIwL,GAAAiB,SAAS0kD,EAAOC,EAAO,EAAG,EAE/C,IAAIC,GAAmBxxD,KAAKywD,kBAAkB9yC,OAC9C6zC,GAAQC,QAER,IAAIlhC,GAAaihC,EAAQ/W,gBAAgBt6C,EAEzCH,MAAKywD,kBAAkBO,UAAU,EAAG7wD,EAEpC,IAAIrG,IAAYy2B,EAAE7hB,EAAEvO,EAAEuO,EAAI6hB,EAAE3hB,EAAEzO,EAAEyO,EAAI2hB,EAAE7D,EAAEvsB,EAAEusB,EAAI6D,EAAE5D,EAAExsB,EAAEwsB,IAAIukC,EAAG3gC,EAAE7hB,EAAIyiD,EAAG5gC,EAAE3hB,EAAIwiD,EAAG7gC,EAAE7D,EAAI2kC,EAAG9gC,EAAE5D,EAExF3sB,MAAKywD,kBAAkBiB,YAAY,EAAG,GAAI/lD,GAAAiB,SAASskD,EAAGp3D,EAAGq3D,EAAGr3D,EAAGs3D,EAAGt3D,EAAGu3D,EAAGv3D,GAGxE,IAAI4V,EAAOs/C,kBAAoB,EAAG,CACjClgD,EAAWiH,qBAAqB65C,cAAclgD,EAAO8/C,mBAAoB9/C,EAAOs/C,iBAAkB,KAClGhvD,MAAKywD,kBAAkBb,cAAclgD,EAAO8/C,mBAAoB9/C,EAAOi/C,gBAAiB,UAClF,CACN3uD,KAAKywD,kBAAkBb,cAAclgD,EAAO8/C,mBAAoB9/C,EAAOi/C,gBAAiB,MAGzF,GAAIzoD,GAAqBlG,KAAKqI,OAAOnC,OACrCA,GAAQ2pD,6BAA6BlC,EAAAmC,qBAAqBC,OAAQrgD,EAAO8/C,mBACzEtpD,GAAQ2pD,6BAA6BlC,EAAAmC,qBAAqB6B,SAAUjiD,EAAOkiD,qBAE3E,IAAI5xD,KAAKosD,SACRpsD,KAAKmsD,mBAAmBU,KAAKjlD,EAAAgD,kBAAkBC,UAAW,EAAG7K,KAAKgwD,gBAElEhwD,MAAKqI,OAAOnC,QAAQ+pD,aAAaroD,EAAAgD,kBAAkBC,UAAWgS,EAAQ2F,GAASxiB,KAAK4iB,aAlHxE0tC,GAAAlhD,aAAsB,mBAoHrC,OAAAkhD,IAxHuCD,EAAAlzD,oBAA1B/C,GAAAk2D,kBAAiBA,IrF6lT3BuB,kCAAkC,qDAAqDp6C,gCAAgCrY,UAAUyY,gCAAgCzY,UAAUgM,4CAA4ChM,UAAU+wD,+CAA+C/wD,YAAY0yD,sDAAsD,SAASx4D,EAAQkB,EAAOJ,GAC7W,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IsFvnTnF,IAAAmL,GAAAlS,EAA+B,qCAG/B,IAAAsO,GAAAtO,EAAkC,4CAClC,IAAAq0D,GAAAr0D,EAAqC,+CAOrC,IAAAs0D,GAAAt0D,EAAiC,8BAYjC,IAAA6D,GAAA,SAAA0D,GAAyCd,EAAA5C,EAAA0D,EAoDxC,SAAA1D,GAAY40D,EAAmCjxD,GAE9CD,EAAAxG,KAAA2F,KAAM+xD,EAAkBjxD,EAExBd,MAAKgyD,kBAAoBD,EApD1BvxD,OAAA+B,eAAWpF,EAAAoD,UAAA,gBtF6mTJiC,IsF7mTP,WAEC,MAAOrF,GAAoBiS,ctF8mTrBxM,WAAY,KACZC,aAAc,MsF5mTrBrC,QAAA+B,eAAWpF,EAAAoD,UAAA,iBtF+mTJiC,IsF/mTP,WAEC,MAAOrF,ItFgnTDyF,WAAY,KACZC,aAAc,MsF9mTP1F,GAAA8wD,sBAAd,SAAoCv+C,IAItBvS,GAAAgxD,gBAAd,SAA8Bz+C,EAAmB0J,EAAmCC,GAEnF,GAAInf,GAAc,EAGlB,IAAI4qC,GAAkCp1B,EAAO2+C,sBAAwB,EAAIh1C,EAAgBi1C,qBAAuBj1C,EAAgBk1C,gBAGhI,IAAIG,GAAsCt1C,EAAc4N,uBACxD5N,GAAc4N,uBACd5N,GAAc4N,uBACd5N,GAAc4N,uBACdtX,GAAOi/C,gBAAkBD,EAAc5sC,MAAM,CAE7C,IAAIpS,EAAOkhD,uBAAyB,EAAG,CACtCv3C,EAAgBw3C,mBAAqBz3C,EAAc4H,gBACnD,IAAI6Z,GAA6BzhB,EAAcyH,yBAC/C3mB,IAAQ,OAAS2gC,EAAO,KAAOiK,EAAW,KAAO4pB,EAAgB,KAChE,OAASr1C,EAAgBw3C,mBAAqB,KAAOh2B,EAAO,KAC5D,WAAaA,EAAO,SACf,CACN3gC,GAAQ,WAAa4qC,EAAW,KAAO4pB,EAAgB,KAGxD,MAAOx0D,GAGMiD,GAAAkyD,kBAAd,SAAgC3/C,EAAmB0J,EAAmCC,GAErF,MAAO,GAYDlc,GAAAoD,UAAAmsD,QAAP,SAAevkD,GAEdtH,EAAAN,UAAMmsD,QAAOryD,KAAA2F,KAACmI,EAEdnI,MAAKgyD,kBAAoB,KAGnB70D,GAAAoD,UAAAqsD,gBAAP,SAAuB99C,EAA8BY,EAAmB9L,EAAe+N,GAEtF9Q,EAAAN,UAAMqsD,gBAAevyD,KAAA2F,KAAC8O,EAAYY,EAAQ9L,EAAQ+N,EAIlD,IAAIjC,EAAOuiD,aAAe,GAAKjyD,KAAKgyD,kBAAkBhlC,kBACrDhtB,KAAKgyD,kBAAkBllC,OAExB,IAAIpd,EAAOwiD,cAAgB,GAAKlyD,KAAKgyD,kBAAkB/kC,mBACtDjtB,KAAKgyD,kBAAkBjlC,QAExB,IAAIrd,EAAOyiD,aAAe,EACzBnyD,KAAKw0B,uBAAuB9kB,EAAOyiD,YAAanyD,KAAKgyD,kBAAkBtgC,mBAAmB;AAE3F,GAAIhiB,EAAO0iD,SAAW,EACrBpyD,KAAKw0B,uBAAuB9kB,EAAO0iD,QAASpyD,KAAKgyD,kBAAkBvgC,KAAOzxB,KAAKgyD,kBAAkB1kC,UAElG,IAAI5d,EAAO2iD,kBAAoB,EAC9BryD,KAAKw0B,uBAAuB9kB,EAAO2iD,iBAAkBryD,KAAKgyD,kBAAkBtgC,mBAAmB,iBAAmB1xB,KAAKgyD,kBAAkBvgC,KAAOzxB,KAAKgyD,kBAAkB1kC,UAExK,IAAI5d,EAAOuiD,aAAe,EACzBjyD,KAAKw0B,uBAAuB9kB,EAAOuiD,YAAajyD,KAAKgyD,kBAAkBllC,QAExE,IAAIpd,EAAOwiD,cAAgB,EAC1BlyD,KAAKw0B,uBAAuB9kB,EAAOwiD,aAAclyD,KAAKgyD,kBAAkBjlC,SAEzE,IAAIrd,EAAO8W,iBAAmB,EAC7BxmB,KAAKw0B,uBAAuB9kB,EAAO8W,gBAAiBxmB,KAAKgyD,kBAAkBjkC,aAE5E,IAAIre,EAAOgX,kBAAoB,EAC9B1mB,KAAKw0B,uBAAuB9kB,EAAO8W,gBAAiBxmB,KAAKgyD,kBAAkBhkC,aAE5EhuB,MAAKw0B,uBAAuB,EAAGx0B,KAAKgyD,kBAAkB1kC,WAGhDnwB,GAAAoD,UAAAssD,KAAP,SAAY/9C,EAA8BY,EAAmB9L,EAAe+N,EAAyB6Q,EAAc3F,GAGlH,GAAInN,EAAOs/C,kBAAoB,EAAG,CACjClgD,EAAWiH,qBAAqB65C,cAAclgD,EAAO8/C,mBAAoB9/C,EAAOs/C,iBAAkB,KAClGr9C,GAAei+C,cAAclgD,EAAO8/C,mBAAoB9/C,EAAOi/C,gBAAiB,UAC1E,CACN,GAAI2D,GAAoB9mD,EAAA6F,cAAckhD,kBAEtCD,GAAS5gD,SAAS5C,EAAWiH,qBAC7Bu8C,GAAS5d,OAAO/iC,EAEhB2gD,GAAS1C,cAAclgD,EAAO8/C,mBAAoB9/C,EAAOi/C,gBAAiB,MAG3E,GAAIzoD,GAAqBlG,KAAKqI,OAAOnC,OACrCA,GAAQ2pD,6BAA6BlC,EAAAmC,qBAAqBC,OAAQrgD,EAAO8/C,mBACzEtpD,GAAQ2pD,6BAA6BlC,EAAAmC,qBAAqB6B,SAAUjiD,EAAOkiD,qBAE3E,IAAI5xD,KAAKosD,SACRpsD,KAAKmsD,mBAAmBU,KAAKjlD,EAAAgD,kBAAkBC,UAAW,EAAG7K,KAAKgwD,gBAElEhwD,MAAKqI,OAAOnC,QAAQ+pD,aAAaroD,EAAAgD,kBAAkBC,UAAWgS,EAAQ2F,GAASxiB,KAAK4iB,aAa/EzlB,GAAAoD,UAAA2sD,sBAAP,WAEC,MAAO,IAAI/vD,GAAoB6C,KAAKgyD,kBAAmBhyD,KAAKqI,QAzI/ClL,GAAAiS,aAAsB,qBA2IrC,OAAAjS,IA7IyCywD,EAAA3C,gBAA5B7wD,GAAA+C,oBAAmBA,ItF0tT7B+yD,8BAA8B,iDAAiDx4C,qCAAqCtY,UAAUgM,4CAA4ChM,UAAU+wD,+CAA+C/wD,YAAYozD,mDAAmD,SAASl5D,EAAQkB,EAAOJ,GAC7T,kBACMq4D,kCAAkC,SAASn5D,EAAQkB,EAAOJ,GAChE,YuFrvTA,IAAAwzD,GAAAt0D,EAAkC,6BAA1Bc,GAAA6wD,gBAAA2C,EAAA3C,eACR,IAAAyH,GAAAp5D,EAAkC,6BAA1Bc,GAAA6C,gBAAAy1D,EAAAz1D,eACR,IAAA01D,GAAAr5D,EAAmC,+BAA3Bc,GAAAk2D,kBAAAqC,EAAArC,iBACR,IAAAD,GAAA/2D,EAAqC,iCAA7Bc,GAAA+C,oBAAAkzD,EAAAlzD,sBACwDy1D,6BAAA,iDAAAC,6BAAA,iDAAAC,+BAAA,mDAAAC,iCAAA,uDAAAC,kDAAA,SAAA15D,EAAAkB,EAAAJ,GvF2vThE,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IwFnwTnF,IAAA4yD,GAAA35D,EAA4B,mCAE5B,IAAAygB,GAAA,SAAAlZ,GAAuCd,EAAAga,EAAAlZ,EAEtC,SAAAkZ,GAAYm5C,GAEXryD,EAAAxG,KAAA2F,KAAMkzD,GAER,MAAAn5C,IANuCk5C,EAAAE,UAA1B/4D,GAAA2f,kBAAiBA,IxF4wT3Bq5C,mCAAmCh0D,YAAYi0D,gCAAgC,SAAS/5D,EAAQkB,EAAOJ,GAC1G,YyF/wTA,IAAAke,GAAAhf,EAAmC,6BAA3Bc,GAAA2f,kBAAAzB,EAAAyB,oBzFkxTLu5C,6BAA6B,mDAAmDC,oDAAoD,SAASj6D,EAAQkB,EAAOJ,GAC/J,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I0FrxTnF,IAAAmzD,GAAAl6D,EAA6B,mCAQ7B,IAAA4vB,GAAA,SAAAroB,GAAyCd,EAAAmpB,EAAAroB,EAoBxC,SAAAqoB,GAAYkI,EAAa2J,EAAuBzJ,EAAgCD,GAE/ExwB,EAAAxG,KAAA2F,KAAMoxB,EAENpxB,MAAKyzD,UAAY14B,CACjB/6B,MAAK0zD,gBAAkBpiC,CACvBtxB,MAAK2zD,eAAiBtiC,EAMvB7wB,OAAA+B,eAAW2mB,EAAA3oB,UAAA,Y1FswTJiC,I0FtwTP,WAEC,MAAOxC,MAAKyzD,W1FuwTN7wD,WAAY,KACZC,aAAc,M0FlwTrBrC,QAAA+B,eAAW2mB,EAAA3oB,UAAA,kB1FwwTJiC,I0FxwTP,WAEC,MAAOxC,MAAK0zD,iB1FywTN9wD,WAAY,KACZC,aAAc,M0FpwTrBrC,QAAA+B,eAAW2mB,EAAA3oB,UAAA,iB1F0wTJiC,I0F1wTP,WAEC,MAAOxC,MAAK2zD,gB1F2wTN/wD,WAAY,KACZC,aAAc,M0FpwTdqmB,GAAA3oB,UAAAod,MAAP,WAEC,MAAO,IAAIuL,GAAoBlpB,KAAKoxB,KAAMpxB,KAAKyzD,UAAWzzD,KAAK0zD,gBAAiB1zD,KAAK2zD,gBAvDxEzqC,GAAAyoB,kBAA2B,kBAE3BzoB,GAAAC,oBAA6B,oBAuD5C,OAAAD,IA9DyCsqC,EAAAI,UAA5Bx5D,GAAA8uB,oBAAmBA,I1Fg1T7B2qC,mCAAmCz0D,YAAY00D,8CAA8C,SAASx6D,EAAQkB,EAAOJ,GACxH,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I2F/1TnF,IAAAmzD,GAAAl6D,EAA4B,mCAO5B,IAAA6iB,GAAA,SAAAtb,GAAmCd,EAAAoc,EAAAtb,EAyBlC,SAAAsb,GAAYiV,EAAa2J,GAExBl6B,EAAAxG,KAAA2F,KAAMoxB,EACNpxB,MAAKyzD,UAAY14B,EAGlBv6B,OAAA+B,eAAW4Z,EAAA5b,UAAA,Y3F40TJiC,I2F50TP,WAEC,MAAOxC,MAAKyzD,W3F60TN7wD,WAAY,KACZC,aAAc,M2Ft0TdsZ,GAAA5b,UAAAod,MAAP,WAEC,MAAO,IAAIxB,GAAcnc,KAAKoxB,KAAMpxB,KAAKyzD,WAtC5Bt3C,GAAAC,MAAe,eAKfD,GAAAG,KAAc,cAKdH,GAAAsB,eAAwB,uBA8BvC,OAAAtB,IA7CmCq3C,EAAAI,UAAtBx5D,GAAA+hB,cAAaA,I3Fw4TvB03C,mCAAmCz0D,YAAY20D,0CAA0C,SAASz6D,EAAQkB,EAAOJ,GACpH,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I4Fp5TnF,IAAAmzD,GAAAl6D,EAA2B,mCAI3B,IAAA06D,GAAA,SAAAnzD,GAA+Bd,EAAAi0D,EAAAnzD,EAiB9B,SAAAmzD,GAAY5iC,EAAa3hB,GAExB5O,EAAAxG,KAAA2F,KAAMoxB,EAENpxB,MAAKi0D,MAAQxkD,EATdjP,OAAA+B,eAAWyxD,EAAAzzD,UAAA,Q5Fi5TJiC,I4Fj5TP,WAEC,MAAOxC,MAAKi0D,O5Fk5TNrxD,WAAY,KACZC,aAAc,M4Ft4TdmxD,GAAAzzD,UAAAod,MAAP,WAEC,MAAO,IAAIq2C,GAAUh0D,KAAKoxB,KAAMpxB,KAAKi0D,OAxBxBD,GAAAE,WAAoB,gBA0BnC,OAAAF,IA/B+BR,EAAAI,UAAlBx5D,GAAA45D,UAASA,I5Fg7TnBH,mCAAmCz0D,YAAY+0D,yCAAyC,SAAS76D,EAAQkB,EAAOJ,GACnH,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I6Fz7TnF,IAAAmzD,GAAAl6D,EAA2B,mCAI3B,IAAAkP,GAAA,SAAA3H,GAA8Bd,EAAAyI,EAAA3H,EAiB7B,SAAA2H,GAAY4oB,EAAapmB,GAExBnK,EAAAxG,KAAA2F,KAAMoxB,EAENpxB,MAAKsI,YAAc0C,EATpBxK,OAAA+B,eAAWiG,EAAAjI,UAAA,c7Fs7TJiC,I6Ft7TP,WAEC,MAAOxC,MAAKsI,a7Fu7TN1F,WAAY,KACZC,aAAc,M6F36Td2F,GAAAjI,UAAAod,MAAP,WAEC,MAAO,IAAInV,GAASxI,KAAKoxB,KAAMpxB,KAAKsI,aAxBvBE,GAAAC,OAAgB,kBA0B/B,OAAAD,IA/B8BgrD,EAAAI,UAAjBx5D,GAAAoO,SAAQA,I7Fq9TlBqrD,mCAAmCz0D,YAAYg1D,mDAAmD,SAAS96D,EAAQkB,EAAOJ,GAC7H,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I8F99TnF,IAAAmzD,GAAAl6D,EAA4B,mCAE5B,IAAA+6D,GAAA,SAAAxzD,GAAwCd,EAAAs0D,EAAAxzD,EAIvC,SAAAwzD,GAAYjjC,GAEXvwB,EAAAxG,KAAA2F,KAAMoxB,GAJOijC,EAAAC,mBAA4B,mBAM3C,OAAAD,IARwCb,EAAAI,UAA3Bx5D,GAAAi6D,mBAAkBA,I9Fw+T5BR,mCAAmCz0D,YAAYm1D,gCAAgC,SAASj7D,EAAQkB,EAAOJ,GAC1G,Y+F3+TA,IAAAitB,GAAA/tB,EAAqC,+BAA7Bc,GAAA8uB,oBAAA7B,EAAA6B,mBACR,IAAA3O,GAAAjhB,EAAgC,yBAAxBc,GAAA+hB,cAAA5B,EAAA4B,aACR,IAAAq4C,GAAAl7D,EAA6B,qBAArBc,GAAA45D,UAAAQ,EAAAR,SACR,IAAAjsD,GAAAzO,EAA4B,oBAApBc,GAAAoO,SAAAT,EAAAS,QACR,IAAAisD,GAAAn7D,EAAoC,8BAA5Bc,GAAAi6D,mBAAAI,EAAAJ,qB/Fk/TLK,+BAA+B,mDAAmDC,yBAAyB,6CAA6CC,qBAAqB,yCAAyC1pD,oBAAoB,wCAAwC2pD,8BAA8B,oDAAoDC,8CAA8C,SAASx7D,EAAQkB,EAAOJ,GAC7a,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IgGv/TnF,IAAA00D,GAAAz7D,EAAkC,qCAClC,IAAA07D,GAAA17D,EAAkC,qCAClC,IAAA27D,GAAA37D,EAA+B,0BAE/B,IAAA47D,GAAA,SAAAr0D,GAAkCd,EAAAm1D,EAAAr0D,EAWjC,SAAAq0D,GAAYC,EAAkBC,EAAkBC,GAApC,GAAAF,QAAA,GAAgB,CAAhBA,EAAA,EAAkB,GAAAC,QAAA,GAAgB,CAAhBA,EAAA,EAAkB,GAAAC,QAAA,GAAoB,CAApBA,GAAmB,EAElEx0D,EAAAxG,KAAA2F,KAEAA,MAAKs1D,WAAa,GAAIP,GAAAQ,kBAAkBJ,EAAOE,EAC/Cr1D,MAAKw1D,WAAa,GAAIR,GAAAS,kBAAkBL,EAAOC,EAE/Cr1D,MAAK01D,QAAQ11D,KAAKs1D,WAClBt1D,MAAK01D,QAAQ11D,KAAKw1D,YAGnBh1D,OAAA+B,eAAW2yD,EAAA30D,UAAA,ShGq/TJiC,IgGr/TP,WAEC,MAAOxC,MAAKs1D,WAAWK,QhGs/TjBlzD,IgGn/TP,SAAiBC,GAEhB1C,KAAKs1D,WAAWK,OAASjzD,GhGo/TnBE,WAAY,KACZC,aAAc,MgGl/TrBrC,QAAA+B,eAAW2yD,EAAA30D,UAAA,ShGq/TJiC,IgGr/TP,WAEC,MAAOxC,MAAKw1D,WAAWG,QhGs/TjBlzD,IgGn/TP,SAAiBC,GAEhB1C,KAAKw1D,WAAWG,OAASjzD,GhGo/TnBE,WAAY,KACZC,aAAc,MgG9+TrBrC,QAAA+B,eAAW2yD,EAAA30D,UAAA,YhGq/TJiC,IgGr/TP,WAEC,MAAOxC,MAAKs1D,WAAWD,UhGs/TjB5yD,IgGn/TP,SAAoBC,GAEnB1C,KAAKs1D,WAAWD,SAAW3yD,CAC3B1C,MAAKw1D,WAAWH,SAAW3yD,GhGo/TrBE,WAAY,KACZC,aAAc,MgGl/TdqyD,GAAA30D,UAAA2I,iBAAP,SAAwB0sD,EAAoB90D,GAE3Cd,KAAKs1D,WAAWvwD,OAAS/E,KAAKw1D,WAAW/wD,oBAAoB3D,EAC7DD,GAAAN,UAAM2I,iBAAgB7O,KAAA2F,KAAC41D,EAAY90D,GAErC,OAAAo0D,IA9DkCD,EAAAY,aAArBz7D,GAAA86D,aAAYA,IhGojUtBY,0BAA0B,6CAA6CC,qCAAqC,wDAAwDC,qCAAqC,0DAA0DC,mDAAmD,SAAS38D,EAAQkB,EAAOJ,GACjV,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IiG7jUnF,IAAA61D,GAAA58D,EAAqC,yCACrC,IAAA27D,GAAA37D,EAA+B,0BAE/B,IAAA68D,GAAA,SAAAt1D,GAAuCd,EAAAo2D,EAAAt1D,EAUtC,SAAAs1D,GAAY5jC,EAAkB6jC,GAAA,GAAAA,QAAA,GAAmB,CAAnBA,EAAA,EAE7Bv1D,EAAAxG,KAAA2F,KAEAA,MAAKq2D,eAAiB,GAAIH,GAAAI,sBAAsB/jC,EAAW6jC,EAE3Dp2D,MAAK01D,QAAQ11D,KAAKq2D,gBAGnB71D,OAAA+B,eAAW4zD,EAAA51D,UAAA,YjG0jUJiC,IiG1jUP,WAEC,MAAOxC,MAAKq2D,eAAeD,UjG2jUrB3zD,IiGxjUP,SAAoBC,GAEnB1C,KAAKq2D,eAAeD,SAAW1zD,GjGyjUzBE,WAAY,KACZC,aAAc,MiGtjUrBrC,QAAA+B,eAAW4zD,EAAA51D,UAAA,kBjGyjUJiC,IiGzjUP,WAEC,MAAOxC,MAAKq2D,eAAeE,gBjG0jUrB9zD,IiGvjUP,SAA0BC,GAEzB1C,KAAKq2D,eAAeE,eAAiB7zD,GjGwjU/BE,WAAY,KACZC,aAAc,MiGvjUtB,OAAAszD,IAvCuClB,EAAAY,aAA1Bz7D,GAAA+7D,kBAAiBA,IjGmmU3BL,0BAA0B,6CAA6CU,yCAAyC,8DAA8DC,8CAA8C,SAASn9D,EAAQkB,EAAOJ,GACvP,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IkG3mUnF,IAAAq2D,GAAAp9D,EAAkC,oCAClC,IAAA27D,GAAA37D,EAA+B,0BAE/B,IAAAq9D,GAAA,SAAA91D,GAAkCd,EAAA42D,EAAA91D,EASjC,SAAA81D,GAAYhB,EAAeN,GAAA,GAAAA,QAAA,GAAoB,CAApBA,GAAmB,EAE7Cx0D,EAAAxG,KAAA2F,KAEAA,MAAK42D,UAAY,GAAIF,GAAAG,iBAAiBlB,EAAQN,EAE9Cr1D,MAAK01D,QAAQ11D,KAAK42D,WAGnBp2D,OAAA+B,eAAWo0D,EAAAp2D,UAAA,UlGwmUJiC,IkGxmUP,WAEC,MAAOxC,MAAK42D,UAAUjB,QlGymUhBlzD,IkGtmUP,SAAkBC,GAEjB1C,KAAK42D,UAAUjB,OAASjzD,GlGumUlBE,WAAY,KACZC,aAAc,MkGpmUrBrC,QAAA+B,eAAWo0D,EAAAp2D,UAAA,YlGumUJiC,IkGvmUP,WAEC,MAAOxC,MAAK42D,UAAUvB,UlGwmUhB5yD,IkGrmUP,SAAoBC,GAEnB1C,KAAK42D,UAAUvB,SAAW3yD,GlGsmUpBE,WAAY,KACZC,aAAc,MkGrmUtB,OAAA8zD,IAtCkC1B,EAAAY,aAArBz7D,GAAAu8D,aAAYA,IlGgpUtBb,0BAA0B,6CAA6CgB,oCAAoC,yDAAyDC,8CAA8C,SAASz9D,EAAQkB,EAAOJ,GAC7O,YmG/oUA,IAAAy7D,GAAA,WAQC,QAAAA,KAEC71D,KAAKgJ,OAAS,GAAI5H,OAGnBZ,OAAA+B,eAAWszD,EAAAt1D,UAAA,sBnGwoUJiC,ImGxoUP,WAEC,MAAOxC,MAAK0I,qBnGyoUN9F,WAAY,KACZC,aAAc,MmGvoUdgzD,GAAAt1D,UAAAm1D,QAAP,SAAezsD,GAEdjJ,KAAKgJ,OAAOpD,KAAKqD,EAEjB,IAAIjJ,KAAK0I,qBAAuB,KAC/B1I,KAAK0I,oBAAsBO,EAAO/F,mBAGpC1C,QAAA+B,eAAWszD,EAAAt1D,UAAA,SnGuoUJiC,ImGvoUP,WAEC,MAAOxC,MAAKgJ,QnGwoUNpG,WAAY,KACZC,aAAc,MmGtoUdgzD,GAAAt1D,UAAAkE,oBAAP,SAA2B3D,GAE1B,MAAOd,MAAKgJ,OAAO,GAAGvE,oBAAoB3D,GAG3CN,QAAA+B,eAAWszD,EAAAt1D,UAAA,gBnGuoUJiC,ImGvoUP,WAEC,MAAOxC,MAAKg3D,enGwoUNv0D,ImGroUP,SAAwBC,GAEvB1C,KAAKg3D,cAAgBt0D,CAErB,KAAK,GAAI3I,GAAW,EAAGA,EAAIiG,KAAKgJ,OAAO1O,SAAUP,EAChDiG,KAAKgJ,OAAOjP,GAAGsM,aAAe3D,GnGqoUzBE,WAAY,KACZC,aAAc,MmGloUrBrC,QAAA+B,eAAWszD,EAAAt1D,UAAA,cnGqoUJiC,ImGroUP,WAEC,MAAOxC,MAAKsI,anGsoUN7F,ImGnoUP,SAAsBC,GAErB1C,KAAKsI,YAAc5F,CAEnB,KAAK,GAAI3I,GAAW,EAAGA,EAAIiG,KAAKgJ,OAAO1O,SAAUP,EAChDiG,KAAKgJ,OAAOjP,GAAGiR,WAAatI,GnGmoUvBE,WAAY,KACZC,aAAc,MmGjoUrBrC,QAAA+B,eAAWszD,EAAAt1D,UAAA,iBnGooUJiC,ImGpoUP,WAEC,MAAOxC,MAAKi3D,gBnGqoUNx0D,ImGloUP,SAAyBC,GAExB1C,KAAKi3D,eAAiBv0D,CAEtB,KAAK,GAAI3I,GAAW,EAAGA,EAAIiG,KAAKgJ,OAAO1O,SAAUP,EAChDiG,KAAKgJ,OAAOjP,GAAGuM,cAAgB5D,GnGkoU1BE,WAAY,KACZC,aAAc,MmG/nUdgzD,GAAAt1D,UAAA2I,iBAAP,SAAwB0sD,EAAoB90D,GAE3Cd,KAAKgJ,OAAOhJ,KAAKgJ,OAAO1O,OAAS,GAAGyK,OAAS6wD,EAGvCC,GAAAt1D,UAAAyC,QAAP,WAEC,IAAK,GAAIjJ,GAAW,EAAGA,EAAIiG,KAAKgJ,OAAO1O,SAAUP,EAChDiG,KAAKgJ,OAAOjP,GAAGiJ,UAGV6yD,GAAAt1D,UAAAmJ,OAAP,SAAc5I,EAAa8C,IAI5B,OAAAiyD,KA5Faz7D,GAAAy7D,aAAYA,OnG2tUnBqB,6DAA6D,SAAS59D,EAAQkB,EAAOJ,GAC3F,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IoGruUnF,IAAAstD,GAAAr0D,EAAqC,+CAKrC,IAAA69D,GAAA79D,EAAkC,uCAGlC,IAAAg9D,GAAA,SAAAz1D,GAA2Cd,EAAAu2D,EAAAz1D,EAY1C,SAAAy1D,GAAY/jC,EAAkB6jC,GAAA,GAAAA,QAAA,GAAmB,CAAnBA,EAAA,EAE7Bv1D,EAAAxG,KAAA2F,KACAA,MAAKo3D,MAAQ,GAAIjvC,eAAciuC,EAAU,GAAK,GAAM,EAAG,EAAK,EAAK,EAAK,GACtEp2D,MAAKyyB,WAAaF,EAGnB/xB,OAAA+B,eAAW+zD,EAAA/1D,UAAA,kBpGutUJiC,IoGvtUP,WAEC,MAAOxC,MAAKq3D,iBpGwtUN50D,IoGrtUP,SAA0BC,GAEzB1C,KAAKq3D,gBAAkB30D,CACvB1C,MAAKs3D,cAAgBt3D,KAAKq3D,gBAAgBt1D,KAC1C/B,MAAKu3D,eAAiBv3D,KAAKq3D,gBAAgBj1D,QpGstUrCQ,WAAY,KACZC,aAAc,MoGptUrBrC,QAAA+B,eAAW+zD,EAAA/1D,UAAA,YpGutUJiC,IoGvtUP,WAEC,MAAOxC,MAAKo3D,MAAM,IpGwtUZ30D,IoGrtUP,SAAoBC,GAEnB1C,KAAKo3D,MAAM,GAAK10D,GpGstUVE,WAAY,KACZC,aAAc,MoGptUdyzD,GAAA/1D,UAAAi3D,gBAAP,WAEC,GAAI3wC,GAA8B7mB,KAAKy3D,eAAeC,2BACtD13D,MAAKy3D,eAAeE,sBAAsB9wC,EAAO,EACjD,IAAIiM,GAA8B9yB,KAAKy3D,eAAeC,2BACtD13D,MAAKy3D,eAAeE,sBAAsB7kC,EAAO,EACjD,IAAIsO,GAA8BphC,KAAKy3D,eAAeC,2BACtD13D,MAAKy3D,eAAeE,sBAAsBv2B,EAAO,EACjD,IAAIC,GAA8BrhC,KAAKy3D,eAAeC,2BACtD13D,MAAKy3D,eAAeE,sBAAsBt2B,EAAO,EAGjD,IAAIu2B,GAAqC53D,KAAKy3D,eAAeI,mBAC7D73D,MAAKqK,mBAAqButD,EAAa91C,KAEvC,IAAIy0C,GAAuCv2D,KAAKy3D,eAAeI,mBAC/D73D,MAAK83D,qBAAuBvB,EAAez0C,KAE3C,IAAIs0C,GAAiCp2D,KAAKy3D,eAAeM,yBACzD/3D,MAAKg4D,eAAiB5B,EAASt0C,MAAM,CAErC,IAAIm2C,GAAgCj4D,KAAKy3D,eAAeM,yBACxD/3D,MAAKk4D,cAAgBD,EAAQn2C,MAAM,CAEnC,IAAI5nB,EAEJA,GAAO,OAAS2sB,EAAQ,KAAO7mB,KAAKm4D,WAAa,KAAOP,EAAe,uBACtE,OAAS9kC,EAAQ,KAAO9yB,KAAKm4D,WAAa,KAAOF,EAAU,QAC3D,OAASnlC,EAAQ,KAAOA,EAAQ,KAAOmlC,EAAU,QACjD,OAASnlC,EAAQ,KAAOA,EAAQ,KAAOyjC,EAAiB,uBACxD,OAASzjC,EAAQ,KAAOA,EAAQ,KAAOsjC,EAAW,SAClD,OAAStjC,EAAQ,KAAOA,EAAQ,KAAOsjC,EAAW,QACnD,QAAQp2D,KAAKyyB,YACZ,IAAK,WACJv4B,GAAQ,WAAa2sB,EAAQ,KAAOiM,EAAQ,IAC5C,MACD,KAAK,MACJ54B,GAAQ,WAAa2sB,EAAQ,KAAOiM,EAAQ,IAC5C,MACD,KAAK,WACJ54B,GAAQ,WAAa2sB,EAAQ,KAAOiM,EAAQ,IAC5C,MACD,KAAK,UACJ54B,GAAQ,OAASknC,EAAQ,KAAOva,EAAQ,KAAOuvC,EAAW,QAC1Dl8D,IAAQ,OAAS2sB,EAAQ,KAAOua,EAAQ,KAAOva,EAAQ,IACvD3sB,IAAQ,OAAS44B,EAAQ,KAAOA,EAAQ,KAAOsO,EAAQ,IACvDlnC,IAAQ,OAAS44B,EAAQ,KAAOA,EAAQ,KAAOjM,EAAQ,IACvD3sB,IAAQ,OAASmnC,EAAQ,KAAOD,EAAQ,KAAOg1B,EAAW,QAC1Dl8D,IAAQ,OAAS44B,EAAQ,KAAOA,EAAQ,KAAOuO,EAAQ,IACvDnnC,IAAQ,WAAa44B,EAAQ,KAAOsO,EAAQ,IAC5C,MACD,KAAK,SAEJlnC,GAAQ,WAAa2sB,EAAQ,IAC7B,MACD,SACC,KAAM,IAAI5sB,OAAM,sBAElB,MAAOC,GAGDo8D,GAAA/1D,UAAA6J,SAAP,SAAgBtJ,EAAas3D,EAAiB/uD,GAE7CrJ,KAAKo3D,MAAM,IAAM,IAAKp3D,KAAKq4D,oBAAsBr4D,KAAKs3D,eAAet3D,KAAKs3D,aAC1Et3D,MAAKo3D,MAAM,IAAM,IAAKp3D,KAAKs4D,qBAAuBt4D,KAAKu3D,gBAAgBv3D,KAAKu3D,cAE5Ev3D,MAAKo3D,MAAM,GAAKp3D,KAAKq4D,oBAAoBr4D,KAAKs3D,aAC9Ct3D,MAAKo3D,MAAM,GAAKp3D,KAAKs4D,qBAAqBt4D,KAAKu3D,cAE/C,IAAIrxD,GAAqBpF,EAAMoF,OAC/BA,GAAQ2pD,6BAA6BlC,EAAAmC,qBAAqB6B,SAAU3xD,KAAKo3D,MAEzDt2D,GAAMqJ,eAAenK,KAAKq3D,iBAAkBjtD,SAASpK,KAAK83D,qBAAsB,OAG1FxB,GAAA/1D,UAAAuK,WAAP,SAAkBhK,GAEjBA,EAAMoF,QAAQ6E,aAAa,EAAG,MAEhC,OAAAurD,IAxH2Ca,EAAAoB,iBAA9Bn+D,GAAAk8D,sBAAqBA,IpGk0U/BkC,uCAAuC,uDAAuDrI,+CAA+C/wD,YAAYq5D,wDAAwD,SAASn/D,EAAQkB,EAAOJ,GAC5O,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IqG/0UnF,IAAAstD,GAAAr0D,EAAqC,+CAGrC,IAAA69D,GAAA79D,EAAkC,uCAElC,IAAAu9D,GAAA,SAAAh2D,GAAsCd,EAAA82D,EAAAh2D,EAcrC,SAAAg2D,GAAYlB,EAAmBN,GAAnB,GAAAM,QAAA,GAAiB,CAAjBA,EAAA,EAAmB,GAAAN,QAAA,GAAoB,CAApBA,GAAmB,EAEjDx0D,EAAAxG,KAAA2F,KAVOA,MAAA04D,UAAmB,CAY1B14D,MAAKo3D,MAAS,GAAIjvC,cAAa,GAE/BnoB,MAAKo3D,MAAM30D,KAAK,KAAO,KAAO,KAAO,GAAG,EAExCzC,MAAKo3D,MAAM30D,KAAK,IAAM,GAAK,IAAM,GAAI,EAErCzC,MAAKo3D,MAAM30D,KAAK,EAAE,KAAM,EAAE,MAAO,EAAG,GAAI,EAExCzC,MAAKo3D,MAAM30D,KAAK,EAAE,IAAK,EAAE,EAAG,EAAG,GAAI,GAEnCzC,MAAKo3D,MAAM30D,KAAK,EAAI,EAAM,GAAK,EAAI,EAAM,GAAK,EAAI,EAAM,GAAK,EAAI,EAAM,IAAM,GAG7EzC,MAAK21D,OAASA,CACd31D,MAAKq1D,SAAWA,EAGjB70D,OAAA+B,eAAWs0D,EAAAt2D,UAAA,UrGs0UJiC,IqGt0UP,WAEC,MAAOxC,MAAK24D,SrGu0UNl2D,IqGp0UP,SAAkBC,GAEjB,GAAI1C,KAAK24D,SAAWj2D,EACnB,MAED1C,MAAK24D,QAAUj2D,CAEf1C,MAAK44D,mBACL54D,MAAK64D,kBrGm0UCj2D,WAAY,KACZC,aAAc,MqGj0UrBrC,QAAA+B,eAAWs0D,EAAAt2D,UAAA,YrGo0UJiC,IqGp0UP,WAEC,MAAOxC,MAAK04D,WrGq0UNj2D,IqGl0UP,SAAoBC,GAEnB,GAAI1C,KAAK04D,WAAah2D,EACrB,MACD1C,MAAK04D,UAAYh2D,CACjB1C,MAAK84D,mBACL94D,MAAK44D,mBACL54D,MAAK64D,kBrGm0UCj2D,WAAY,KACZC,aAAc,MqGj0Udg0D,GAAAt2D,UAAAi3D,gBAAP,WAEC,GAAIuB,GAAa,KACjB,IAAIC,GAAY,OAEhB,IAAIC,GAAc,OAClB,IAAIC,GAAa,OACjB,IAAIC,GAAc,OAClB,IAAIC,GAAY,OAEhB,IAAIC,GAAa,QACjB,IAAIzZ,GAAY,OAChB,IAAIC,GAAY,OAEhB,IAAIyZ,GAAc,OAClB,IAAIC,GAAa,OAEjB,IAAIC,GAAwB,OAC5B,IAAIC,GAAwB,OAC5B,IAAIC,GAAsB,OAE1B,IAAIC,GAAgB,OACpB,IAAIC,GAAgB,OACpB,IAAIC,GAAgB,OACpB,IAAIC,GAAgB,OAEpB,IAAIC,GAAe,IAEnB,IAAIC,GAAY,QAChB,IAAIC,GAAa,OACjB,IAAIC,GAAa,OAEjB,IAAIC,GAAY,OAChB,IAAIC,GAAY,OAChB,IAAIC,GAAY,OAChB,IAAIC,GAAY,OAChB,IAAIC,GAAW,OAEf,IAAIC,GAAgB,OACpB,IAAIC,GAAgB,OACpB,IAAIC,GAAgB,OAEpB,IAAIC,GAAa,KAEjB,IAAIC,GAAa,KACjB,IAAIC,GAAc,OAClB,IAAIC,GAAc,OAClB,IAAIC,GAAe,QAEnB,IAAIC,GAAmB,OACvB,IAAIC,GAA8B,OAElC,IAAIC,GAAiB,KACrB,IAAIC,GAAiB,KAErB,IAAIC,GAAiB,OACrB,IAAIC,GAAiB,OAErB,IAAIC,GAAgB,KAGpB,IAAIzgC,GAAc8/B,CAClB,IAAIY,GAAgB1gC,EAAO,KAE3B,IAAI3gC,GAAsB,GAAIkH,MAG9BlH,GAAK0L,KAAK,MAAO+0D,EAAKZ,EAAOuB,EAAQ,mBAAoB,KACzDphE,GAAK0L,KAAK,MAAO20D,EAAGI,EAAK5B,EAAK,KAC9B7+D,GAAK0L,KAAK,MAAOo0D,EAAID,EAAO,KAC5B7/D,GAAK0L,KAAK,MAAOo0D,EAAIA,EAAIX,EAAK,KAC9Bn/D,GAAK0L,KAAK,MAAO+0D,EAAKX,EAAIsB,EAAQ,mBAAoB,KACtDphE,GAAK0L,KAAK,MAAOu0D,EAAIQ,EAAK5B,EAAK,KAC/B7+D,GAAK0L,KAAK,MAAOo0D,EAAID,EAAO,KAC5B7/D,GAAK0L,KAAK,MAAOo0D,EAAIA,EAAIX,EAAK,KAC9Bn/D,GAAK0L,KAAK,MAAO+0D,EAAKX,EAAIsB,EAAQ,mBAAoB,KACtDphE,GAAK0L,KAAK,MAAQ00D,EAAIK,EAAK5B,EAAK,KAChC7+D,GAAK0L,KAAK,MAAOo0D,EAAID,EAAO,KAC5B7/D,GAAK0L,KAAK,MAAOs0D,EAAKA,EAAKra,EAAI,KAC/B3lD,GAAK0L,KAAK,MAAOq0D,EAAKA,EAAKra,EAAI,KAC/B1lD,GAAK0L,KAAK,MAAO+0D,EAAKX,EAAIsB,EAAQ,mBAAoB,KACtDphE,GAAK0L,KAAK,MAAOw0D,EAAIO,EAAK5B,EAAK,KAC/B7+D,GAAK0L,KAAK,MAAOo0D,EAAID,EAAO,KAC5B7/D,GAAK0L,KAAK,MAAOs0D,EAAKA,EAAKra,EAAI,KAC/B3lD,GAAK0L,KAAK,MAAOq0D,EAAKA,EAAKra,EAAI,KAC/B1lD,GAAK0L,KAAK,MAAO+0D,EAAKX,EAAIsB,EAAQ,mBAAoB,KACtDphE,GAAK0L,KAAK,MAAOy0D,EAAIM,EAAK5B,EAAK,KAG/B7+D,GAAK0L,KAAK,MAAO40D,EAAQL,EAAIC,EAAI,KACjClgE,GAAK0L,KAAK,MAAO60D,EAAQJ,EAAIC,EAAI,KACjCpgE,GAAK0L,KAAK,MAAOi1D,EAAML,EAAQC,EAAQ,KACvCvgE,GAAK0L,KAAK,MAAOi1D,EAAMA,EAAM,KAE7B3gE,GAAK0L,KAAK,MAAO40D,EAAQL,EAAIE,EAAI,KACjCngE,GAAK0L,KAAK,MAAO60D,EAAQL,EAAIE,EAAI,KACjCpgE,GAAK0L,KAAK,MAAOk1D,EAAMN,EAAQC,EAAQ,KAEvCvgE,GAAK0L,KAAK,MAAO40D,EAAQA,EAAQC,EAAQ,KACzCvgE,GAAK0L,KAAK,MAAO40D,EAAQA,EAAQf,EAAe,KAChDv/D,GAAK0L,KAAK,MAAO40D,EAAQA,EAAQvB,EAAM,KACvC/+D,GAAK0L,KAAK,MAAOo1D,EAAWR,EAAQhB,EAAe,KAEnDt/D,GAAK0L,KAAK,MAAO40D,EAAQK,EAAM,KAC/B3gE,GAAK0L,KAAK,MAAO60D,EAAQK,EAAM,KAC/B5gE,GAAK0L,KAAK,MAAO40D,EAAQA,EAAQC,EAAQ,KACzCvgE,GAAK0L,KAAK,MAAO40D,EAAQA,EAAQQ,EAAW,KAC5C9gE,GAAK0L,KAAK,MAAOq1D,EAAsBT,EAAQ,KAE/CtgE,GAAK0L,KAAK,MAAO40D,EAAQK,EAAMI,EAAsB,KACrD/gE,GAAK0L,KAAK,MAAO60D,EAAQf,EAAa,KACtCx/D,GAAK0L,KAAK,MAAO60D,EAAQA,EAAQ,KACjCvgE,GAAK0L,KAAK,MAAO40D,EAAQA,EAAQC,EAAQ,KACzCvgE,GAAK0L,KAAK,MAAO40D,EAAQd,EAAac,EAAQ,KAC9CtgE,GAAK0L,KAAK,MAAOi1D,EAAML,EAAQ5a,EAAI,KAEnC1lD,GAAK0L,KAAK,MAAO40D,EAAQM,EAAMG,EAAsB,KACrD/gE,GAAK0L,KAAK,MAAO60D,EAAQf,EAAa,KACtCx/D,GAAK0L,KAAK,MAAO60D,EAAQA,EAAQ,KACjCvgE,GAAK0L,KAAK,MAAO40D,EAAQA,EAAQC,EAAQ,KACzCvgE,GAAK0L,KAAK,MAAO40D,EAAQd,EAAac,EAAQ,KAC9CtgE,GAAK0L,KAAK,MAAOk1D,EAAMN,EAAQ3a,EAAI,KAGnC3lD,GAAK0L,KAAK,MAAO21D,EAAQR,EAAOpB,EAAQ,KACxCz/D,GAAK0L,KAAK,MAAOo0D,EAAID,EAAOwB,EAAQ,KACpCrhE,GAAK0L,KAAK,MAAOs1D,EAASlB,EAAIsB,EAAQ,mBAAoB,KAC1DphE,GAAK0L,KAAK,MAAO21D,EAAQR,EAAOnB,EAAQ,KACxC1/D,GAAK0L,KAAK,MAAOo0D,EAAID,EAAOwB,EAAQ,KACpCrhE,GAAK0L,KAAK,MAAO+0D,EAAKX,EAAIsB,EAAQ,mBAAoB,KACtDphE,GAAK0L,KAAK,MAAOs1D,EAASA,EAASP,EAAK,KACxCzgE,GAAK0L,KAAK,MAAOs1D,EAASA,EAAShC,EAAK,KAExCh/D,GAAK0L,KAAK,MAAO21D,EAAQR,EAAOlB,EAAQ,KACxC3/D,GAAK0L,KAAK,MAAOo0D,EAAID,EAAOwB,EAAQ,KACpCrhE,GAAK0L,KAAK,MAAOu1D,EAASnB,EAAIsB,EAAQ,mBAAoB,KAC1DphE,GAAK0L,KAAK,MAAO21D,EAAQR,EAAOjB,EAAQ,KACxC5/D,GAAK0L,KAAK,MAAOo0D,EAAID,EAAOwB,EAAQ,KACpCrhE,GAAK0L,KAAK,MAAO+0D,EAAKX,EAAIsB,EAAQ,mBAAoB,KACtDphE,GAAK0L,KAAK,MAAOu1D,EAASA,EAASR,EAAK,KACxCzgE,GAAK0L,KAAK,MAAOu1D,EAASA,EAASlC,EAAM,KACzC/+D,GAAK0L,KAAK,MAAO+0D,EAAKO,EAAShC,EAAK,KACpCh/D,GAAK0L,KAAK,MAAOu1D,EAASA,EAASR,EAAK,KAExCzgE,GAAK0L,KAAK,MAAO40D,EAAQH,EAAIC,EAAI,KACjCpgE,GAAK0L,KAAK,MAAO60D,EAAQN,EAAIC,EAAI,KACjClgE,GAAK0L,KAAK,MAAO40D,EAAQA,EAAQC,EAAQ,KACzCvgE,GAAK0L,KAAK,MAAOw1D,EAASZ,EAAQD,EAAG,KAErCrgE,GAAK0L,KAAK,MAAO40D,EAAQH,EAAIC,EAAI,KACjCpgE,GAAK0L,KAAK,MAAO60D,EAAQN,EAAIC,EAAI,KACjClgE,GAAK0L,KAAK,MAAO40D,EAAQA,EAAQC,EAAQ,KACzCvgE,GAAK0L,KAAK,MAAOy1D,EAASb,EAAQD,EAAG,KAErCrgE,GAAK0L,KAAK,MAAO40D,EAAQzB,EAAKoC,EAAS,KAEvCjhE,GAAK0L,KAAK,MAAO60D,EAAQD,EAAQY,EAAS,KAC1ClhE,GAAK0L,KAAK,MAAO80D,EAAQF,EAAQa,EAAS,KAC1CnhE,GAAK0L,KAAK,MAAO60D,EAAQA,EAAQC,EAAQ,KAEzCxgE,GAAK0L,KAAK,MAAOs1D,EAASA,EAAST,EAAQ,KAC3CvgE,GAAK0L,KAAK,MAAO60D,EAAQrB,EAAIqB,EAAQ,KACrCvgE,GAAK0L,KAAK,MAAOu1D,EAASA,EAASV,EAAQ,KAE3CvgE,GAAK0L,KAAK,MAAO,KAAMs1D,EAASC,EAAS,KAIzC,OAAOjhE,GAAKshE,KAAK,KAGX3E,GAAAt2D,UAAA6J,SAAP,SAAgBtJ,EAAas3D,EAAiB/uD,GAE7CvI,EAAMoF,QAAQ2pD,6BAA6BlC,EAAAmC,qBAAqB6B,SAAU3xD,KAAKo3D,OAGzEP,GAAAt2D,UAAAk7D,eAAP,SAAsB36D,GAErBD,EAAAN,UAAMk7D,eAAcphE,KAAA2F,KAACc,EAErBd,MAAK64D,iBAGEhC,GAAAt2D,UAAAs4D,eAAR,WAGC,GAAI74D,KAAKsI,YAAa,CACrBtI,KAAKo3D,MAAM,GAAK,EAAEp3D,KAAKg3D,aACvBh3D,MAAKo3D,MAAM,GAAK,EAAEp3D,KAAKi3D,gBAMjBJ,GAAAt2D,UAAAu4D,kBAAR,WAEC94D,KAAK07D,cAAgB,EAlQP7E,GAAA8E,iBAA0B,EAoQ1C,OAAA9E,IAxQsCM,EAAAoB,iBAAzBn+D,GAAAy8D,iBAAgBA,IrGgiV1B2B,uCAAuC,uDAAuDrI,+CAA+C/wD,YAAYw8D,yDAAyD,SAAStiE,EAAQkB,EAAOJ,GAC7O,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IsG1iVnF,IAAAstD,GAAAr0D,EAAqC,+CAGrC,IAAA69D,GAAA79D,EAAkC,uCAElC,IAAAi8D,GAAA,SAAA10D,GAAuCd,EAAAw1D,EAAA10D,EAatC,SAAA00D,GAAYI,EAAeN,GAAA,GAAAA,QAAA,GAAoB,CAApBA,GAAmB,EAE7Cx0D,EAAAxG,KAAA2F,KAVOA,MAAA04D,UAAmB,CAW1B14D,MAAK24D,QAAUhD,CACf31D,MAAKo3D,MAAQ,GAAIjvC,eAAc,EAAG,EAAG,EAAG,GACxCnoB,MAAKq1D,SAAWA,EAGjB70D,OAAA+B,eAAWgzD,EAAAh1D,UAAA,UtGoiVJiC,IsGpiVP,WAEC,MAAOxC,MAAK24D,StGqiVNl2D,IsGliVP,SAAkBC,GAEjB,GAAI1C,KAAK24D,SAAWj2D,EACnB,MAED1C,MAAK24D,QAAUj2D,CAEf1C,MAAK44D,mBACL54D,MAAK64D,gBACL74D,MAAK84D,qBtGiiVCl2D,WAAY,KACZC,aAAc,MsG/hVrBrC,QAAA+B,eAAWgzD,EAAAh1D,UAAA,YtGkiVJiC,IsGliVP,WAEC,MAAOxC,MAAK04D,WtGmiVNj2D,IsGhiVP,SAAoBC,GAEnB,GAAI1C,KAAK04D,WAAah2D,EACrB,MAED1C,MAAK04D,UAAYh2D,CACjB1C,MAAK84D,mBACL94D,MAAK44D,mBACL54D,MAAK64D,kBtGgiVCj2D,WAAY,KACZC,aAAc,MsG9hVd0yD,GAAAh1D,UAAAi3D,gBAAP,WAEC,GAAIt9D,EACJ,IAAI2hE,GAAoB,CAExB3hE,GAAO,iBACN,0BAEDA,IAAQ,uCAER,KAAK,GAAIwU,GAAW1O,KAAK07D,cAAehtD,GAAK1O,KAAK24D,QAASjqD,GAAK1O,KAAK07D,cAAe,CACnFxhE,GAAQ,4BACP,wCACA,wBACC2hE,EAGH3hE,GAAQ,sBAER8F,MAAKo3D,MAAM,GAAK,EAAEyE,CAElB,OAAO3hE,GAGDq7D,GAAAh1D,UAAA6J,SAAP,SAAgBtJ,EAAas3D,EAAiB/uD,GAE7CvI,EAAMoF,QAAQ2pD,6BAA6BlC,EAAAmC,qBAAqB6B,SAAU3xD,KAAKo3D,OAGzE7B,GAAAh1D,UAAAk7D,eAAP,SAAsB36D,GAErBD,EAAAN,UAAMk7D,eAAcphE,KAAA2F,KAACc,EAErBd,MAAK64D,iBAGEtD,GAAAh1D,UAAAs4D,eAAR,WAGC,GAAIiD,GAAc,EAAE97D,KAAKg3D,aAEzBh3D,MAAKo3D,MAAM,GAAKp3D,KAAK24D,QAAQ,GAAGmD,CAChC97D,MAAKo3D,MAAM,GAAKp3D,KAAK07D,cAAcI,EAG5BvG,GAAAh1D,UAAAu4D,kBAAR,WAEC94D,KAAK07D,cAAgB17D,KAAK04D,UAAY,EAAG14D,KAAK04D,UAAY14D,KAAK24D,QAAUpD,EAAkBoG,iBAAkB37D,KAAK24D,QAAQpD,EAAkBoG,iBAAmB,EAnGjJpG,GAAAoG,iBAA0B,EAqG1C,OAAApG,IAvGuC4B,EAAAoB,iBAA1Bn+D,GAAAm7D,kBAAiBA,ItG0nV3BiD,uCAAuC,uDAAuDrI,+CAA+C/wD,YAAY28D,wDAAwD,SAASziE,EAAQkB,EAAOJ,GAC5O,YuGpoVA,IAAA4hE,GAAA1iE,EAA2B,gCAE3B,IAAA+e,GAAA/e,EAAoC,6CAMpC,IAAAwS,GAAAxS,EAAkC,uDAIlC,IAAA2iE,GAAA3iE,EAAoC,oCAGpC,IAAAi/D,GAAA,WAuBC,QAAAA,GAAYr1D,GAAA,GAAAA,QAAA,GAAkC,CAAlCA,EAAA,MAZLlD,KAAAq4D,qBAA8B,CAC9Br4D,MAAAs4D,sBAA+B,CAE/Bt4D,MAAAg3D,eAAwB,CACxBh3D,MAAAi3D,gBAAyB,CACxBj3D,MAAAk8D,0BAAoC,IACpCl8D,MAAAm8D,kBAA4B,IAI5Bn8D,MAAAo8D,cAAuB,CAI9Bp8D,MAAK0I,oBAAsBxF,CAE3BlD,MAAKy3D,eAAiB,GAAIwE,GAAAI,oBAAoB,YAM/C77D,OAAA+B,eAAWg2D,EAAAh4D,UAAA,gBvG2mVJiC,IuG3mVP,WAEC,MAAOxC,MAAKo8D,evG4mVN35D,IuGzmVP,SAAwBC,GAEvB,GAAI1C,KAAKo8D,eAAiB15D,EACzB,MAED1C,MAAKo8D,cAAgB15D,CACrB1C,MAAKq4D,oBAAsBr4D,KAAKg3D,eAAiBh3D,KAAKo8D,aACtDp8D,MAAKs4D,qBAAuBt4D,KAAKi3D,gBAAkBj3D,KAAKo8D,aACxDp8D,MAAKk8D,0BAA4B,MvGymV3Bt5D,WAAY,KACZC,aAAc,MuGvmVrBrC,QAAA+B,eAAWg2D,EAAAh4D,UAAA,UvG0mVJiC,IuG1mVP,WAEC,MAAOxC,MAAKs8D,SvG2mVN75D,IuGxmVP,SAAkBC,GAEjB1C,KAAKs8D,QAAU55D,GvGymVTE,WAAY,KACZC,aAAc,MuGvmVrBrC,QAAA+B,eAAWg2D,EAAAh4D,UAAA,cvG0mVJiC,IuG1mVP,WAEC,MAAOxC,MAAKsI,avG2mVN7F,IuGxmVP,SAAsBC,GAErB,GAAI1C,KAAKsI,aAAe5F,EACvB,MAED1C,MAAKsI,YAAc5F,CACnB1C,MAAKk8D,0BAA4B,MvGwmV3Bt5D,WAAY,KACZC,aAAc,MuGtmVrBrC,QAAA+B,eAAWg2D,EAAAh4D,UAAA,gBvGymVJiC,IuGzmVP,WAEC,MAAOxC,MAAKg3D,evG0mVNv0D,IuGvmVP,SAAwBC,GAEvB,GAAI1C,KAAKg3D,eAAiBt0D,EACzB,MAED1C,MAAKg3D,cAAgBt0D,CACrB1C,MAAKq4D,oBAAsBr4D,KAAKg3D,eAAiBh3D,KAAKo8D,aACtDp8D,MAAKk8D,0BAA4B,MvGumV3Bt5D,WAAY,KACZC,aAAc,MuGrmVrBrC,QAAA+B,eAAWg2D,EAAAh4D,UAAA,iBvGwmVJiC,IuGxmVP,WAEC,MAAOxC,MAAKi3D,gBvGymVNx0D,IuGtmVP,SAAyBC,GAExB,GAAI1C,KAAKi3D,gBAAkBv0D,EAC1B,MAED1C,MAAKi3D,eAAiBv0D,CACtB1C,MAAKs4D,qBAAuBt4D,KAAKi3D,gBAAkBj3D,KAAKo8D,aACxDp8D,MAAKk8D,0BAA4B,MvGsmV3Bt5D,WAAY,KACZC,aAAc,MuGpmVd01D,GAAAh4D,UAAAkE,oBAAP,SAA2B3D,GAE1B,GAAId,KAAKk8D,0BACRl8D,KAAKy7D,eAAe36D,EAErB,OAAOd,MAAK6I,kBAGN0vD,GAAAh4D,UAAAyC,QAAP,WAEC,GAAIhD,KAAK6I,kBACR7I,KAAK6I,kBAAkB7F,SAExB,IAAIhD,KAAKu8D,WACRv8D,KAAKu8D,WAAWv5D,UAGXu1D,GAAAh4D,UAAAq4D,kBAAP,WAEC54D,KAAKm8D,kBAAoB,KAGnB5D,GAAAh4D,UAAAi8D,cAAP,SAAqB17D,GAEpB,GAAId,KAAKu8D,WACRv8D,KAAKu8D,WAAWv5D,SAEjBhD,MAAKu8D,WAAaz7D,EAAMoF,QAAQ6J,eAEhC/P,MAAKy3D,eAAe76C,OAEpB,IAAI5M,IAA4B,GAAIlE,GAAAmE,mBAAoBC,SAAS,kBAAoBlQ,KAAKy8D,gBAAkB,WAAY,UAAUrsD,IAClI,IAAIC,IAA8B,GAAIvE,GAAAmE,mBAAoBC,SAAS,oBAAsBlQ,KAAKw3D,kBAAoB,WAAY,YAAYpnD,IAE1IpQ,MAAKu8D,WAAWhsD,OAAOP,EAAgBK,EACvCrQ,MAAKm8D,kBAAoB,MAGnB5D,GAAAh4D,UAAAk8D,cAAP,WAEC,GAAI33B,GAAiC9kC,KAAKy3D,eAAelxC,wBACzDvmB,MAAK8J,eAAiBg7B,EAAShjB,KAE/B,IAAIk4C,GAA2Bh6D,KAAKy3D,eAAelxC,wBACnDvmB,MAAKiK,SAAW+vD,EAAGl4C,KAEnB9hB,MAAKm4D,WAAan4D,KAAKy3D,eAAez2C,gBAEtC,IAAI9mB,EAEJA,GAAO,WAAa4qC,EAAW,KAC9B,OAAS9kC,KAAKm4D,WAAa,KAAO6B,EAAK,IAExC,OAAO9/D,GAGDq+D,GAAAh4D,UAAAi3D,gBAAP,WAEC,KAAM,IAAIn/C,GAAAiB,oBAGJi/C,GAAAh4D,UAAAk7D,eAAP,SAAsB36D,GAErB,GAAId,KAAK6I,kBACR7I,KAAK6I,kBAAkB7F,SAExBhD,MAAK6I,kBAAoB,GAAImzD,GAAAU,QAAQ18D,KAAKq4D,oBAAqBr4D,KAAKs4D,qBAEpEt4D,MAAKk8D,0BAA4B,MAG3B3D,GAAAh4D,UAAAqJ,WAAP,SAAkB9I,GAEjB,GAAId,KAAKm8D,kBACRn8D,KAAKw8D,cAAc17D,EAEpB,OAAOd,MAAKu8D,WAGNhE,GAAAh4D,UAAA6J,SAAP,SAAgBtJ,EAAa8C,EAAeyF,IAIrCkvD,GAAAh4D,UAAAuK,WAAP,SAAkBhK,IAIlBN,QAAA+B,eAAWg2D,EAAAh4D,UAAA,sBvGqkVJiC,IuGrkVP,WAEC,MAAOxC,MAAK0I,qBvGskVN9F,WAAY,KACZC,aAAc,MuGpkVtB,OAAA01D,KAnMan+D,GAAAm+D,iBAAgBA,IvG4wV1BoE,oCAAoC,oDAAoDziD,6CAA6C9a,UAAUw9D,gCAAgCx9D,UAAU2Y,uDAAuD3Y,YAAYy9D,yDAAyD,SAASvjE,EAAQkB,EAAOJ,GAChV,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IwG5xVnF,IAAAstD,GAAAr0D,EAAqC,+CAGrC,IAAA69D,GAAA79D,EAAkC,uCAElC,IAAAm8D,GAAA,SAAA50D,GAAuCd,EAAA01D,EAAA50D,EAatC,SAAA40D,GAAYE,EAAeN,GAAA,GAAAA,QAAA,GAAoB,CAApBA,GAAmB,EAE7Cx0D,EAAAxG,KAAA2F,KAVOA,MAAA04D,UAAmB,CAW1B14D,MAAK24D,QAAUhD,CACf31D,MAAKo3D,MAAS,GAAIjvC,eAAc,EAAG,EAAG,EAAG,GACzCnoB,MAAKq1D,SAAWA,EAGjB70D,OAAA+B,eAAWkzD,EAAAl1D,UAAA,UxGsxVJiC,IwGtxVP,WAEC,MAAOxC,MAAK24D,SxGuxVNl2D,IwGpxVP,SAAkBC,GAEjB,GAAI1C,KAAK24D,SAAWj2D,EACnB,MAED1C,MAAK24D,QAAUj2D,CAEf1C,MAAK44D,mBACL54D,MAAK64D,kBxGmxVCj2D,WAAY,KACZC,aAAc,MwGjxVrBrC,QAAA+B,eAAWkzD,EAAAl1D,UAAA,YxGoxVJiC,IwGpxVP,WAEC,MAAOxC,MAAK04D,WxGqxVNj2D,IwGlxVP,SAAoBC,GAEnB,GAAI1C,KAAK04D,WAAah2D,EACrB,MACD1C,MAAK04D,UAAYh2D,CACjB1C,MAAK84D,mBACL94D,MAAK44D,mBACL54D,MAAK64D,kBxGmxVCj2D,WAAY,KACZC,aAAc,MwGjxVd4yD,GAAAl1D,UAAAi3D,gBAAP,WAEC,GAAIt9D,EACJ,IAAI2hE,GAAoB,CAExB3hE,GAAO,iBACN,0BAEDA,IAAQ,uCAER,KAAK,GAAIwU,GAAW1O,KAAK07D,cAAehtD,GAAK1O,KAAK24D,QAASjqD,GAAK1O,KAAK07D,cAAe,CACnFxhE,GAAQ,2BACRA,IAAQ,wCACP,wBACC2hE,EAGH3hE,GAAQ,sBAER8F,MAAKo3D,MAAM,GAAK,EAAEyE,CAElB,OAAO3hE,GAGDu7D,GAAAl1D,UAAA6J,SAAP,SAAgBtJ,EAAas3D,EAAiB/uD,GAE7CvI,EAAMoF,QAAQ2pD,6BAA6BlC,EAAAmC,qBAAqB6B,SAAU3xD,KAAKo3D,OAGzE3B,GAAAl1D,UAAAk7D,eAAP,SAAsB36D,GAErBD,EAAAN,UAAMk7D,eAAcphE,KAAA2F,KAACc,EAErBd,MAAK64D,iBAGEpD,GAAAl1D,UAAAs4D,eAAR,WAGC,GAAIiE,GAAc,EAAE98D,KAAKi3D,cAEzBj3D,MAAKo3D,MAAM,GAAKp3D,KAAK24D,QAAQ,GAAGmE,CAChC98D,MAAKo3D,MAAM,GAAKp3D,KAAK07D,cAAcoB,EAG5BrH,GAAAl1D,UAAAu4D,kBAAR,WAEC94D,KAAK07D,cAAgB17D,KAAK04D,UAAY,EAAG14D,KAAK04D,UAAY14D,KAAK24D,QAAUlD,EAAkBkG,iBAAkB37D,KAAK24D,QAAQlD,EAAkBkG,iBAAmB,EAjGjJlG,GAAAkG,iBAA0B,EAmG1C,OAAAlG,IArGuC0B,EAAAoB,iBAA1Bn+D,GAAAq7D,kBAAiBA,IxG22V3B+C,uCAAuC,uDAAuDrI,+CAA+C/wD,YAAY29D,iCAAiC,SAASzjE,EAAQkB,EAAOJ,GACrN,YyGr3VA,IAAA87D,GAAA58D,EAAsC,wCAA9Bc,GAAAk8D,sBAAAJ,EAAAI,qBACR,IAAAI,GAAAp9D,EAAkC,mCAA1Bc,GAAAy8D,iBAAAH,EAAAG,gBACR,IAAA9B,GAAAz7D,EAAmC,oCAA3Bc,GAAAm7D,kBAAAR,EAAAQ,iBACR,IAAA4B,GAAA79D,EAAkC,mCAA1Bc,GAAAm+D,iBAAApB,EAAAoB,gBACR,IAAAvD,GAAA17D,EAAmC,oCAA3Bc,GAAAq7D,kBAAAT,EAAAS,iBACR,IAAAuH,GAAA1jE,EAA+B,yBAAvBc,GAAA86D,aAAA8H,EAAA9H,YACR,IAAA+H,GAAA3jE,EAAmC,8BAA3Bc,GAAA+7D,kBAAA8G,EAAA9G,iBACR,IAAAlB,GAAA37D,EAA+B,yBAAvBc,GAAAy7D,aAAAZ,EAAAY,YACR,IAAAqH,GAAA5jE,EAA+B,yBAAvBc,GAAAu8D,aAAAuG,EAAAvG,ezGg4VLwG,yBAAyB,6CAA6CC,8BAA8B,kDAAkDC,yBAAyB,6CAA6CC,yBAAyB,6CAA6CC,wCAAwC,4DAA4DC,mCAAmC,uDAAuDC,oCAAoC,wDAAwDC,mCAAmC,uDAAuDC,oCAAoC,0DAA0DC,mDAAmD,SAAStkE,EAAQkB,EAAOJ,GACl0B,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I0G74VnF,IAAAqL,GAAApS,EAA4B,iCAC5B,IAAAsS,GAAAtS,EAAiC,yCACjC,IAAAukE,GAAAvkE,EAA6B,mCAM7B,IAAAyO,GAAAzO,EAA4B,qBAE5B,IAAAmI,GAAA,SAAAZ,GAAsCd,EAAA0B,EAAAZ,EAmBrC,SAAAY,GAAYX,GAEXD,EAAAxG,KAAA2F,KAZOA,MAAA89D,YAAqB,CACrB99D,MAAA+9D,aAAsB,CACtB/9D,MAAAg3D,eAAwB,CACxBh3D,MAAAi3D,gBAAyB,CAEzBj3D,MAAAg+D,gBAA0B,IASjCh+D,MAAKi+D,qBAAuB,GAAIvyD,GAAAoB,SAEhC9M,MAAKqI,OAASvH,EAIDW,EAAAC,YAAd,SAA0BZ,GAEzB,IAAKA,EACJ,KAAM,IAAI7G,OAAM,4BAEjB,IAAIwH,EAAiBy8D,YAAc,KAClCz8D,EAAiBy8D,WAAa,GAAI98D,MAEnC,IAAI+8D,GAAoC18D,EAAiB28D,6BAA6Bt9D,EAEtF,IAAIq9D,GAAoB,KAAM,CAC7BA,EAAmB,GAAI18D,GAAiBX,EAExC,IAAIu9D,GAAwB,GAAIC,EAEhCD,GAAGE,QAAUz9D,CACbu9D,GAAGG,OAASL,CAEZ18D,GAAiBy8D,WAAWt4D,KAAKy4D,GAGlC,MAAOF,GAIO18D,GAAA28D,6BAAf,SAA4Ct9D,GAG3C,GAAI3G,GAAWsH,EAAiBy8D,WAAW5jE,MAC3C,IAAIZ,EAEJ,KAAK,GAAI+kE,GAAW,EAAGA,EAAItkE,EAAGskE,IAAK,CAClC/kE,EAAI+H,EAAiBy8D,WAAWO;AAEhC,GAAI/kE,EAAE6kE,UAAYz9D,EACjB,MAAOpH,GAAE8kE,OAGX,MAAO,MAGO/8D,GAAAi9D,uBAAf,SAAsC59D,GAErC,GAAI3G,GAAWsH,EAAiBy8D,WAAW5jE,MAC3C,IAAIZ,EAEJ,KAAK,GAAI+kE,GAAW,EAAGA,EAAItkE,EAAGskE,IAAK,CAClC/kE,EAAI+H,EAAiBy8D,WAAWO,EAEhC,IAAI/kE,EAAE6kE,UAAYz9D,EAAO,CACxBW,EAAiBy8D,WAAWjhD,OAAOwhD,EAAG,EACtC,UAKHj+D,QAAA+B,eAAWd,EAAAlB,UAAA,iB1Gq2VJiC,I0Gr2VP,WAEC,GAAIxC,KAAKg+D,gBACRh+D,KAAK2+D,kBAEN,OAAO3+D,MAAK4+D,gB1Gq2VNh8D,WAAY,KACZC,aAAc,M0Gn2VrBrC,QAAA+B,eAAWd,EAAAlB,UAAA,iB1Gs2VJiC,I0Gt2VP,WAEC,GAAIxC,KAAKg+D,gBACRh+D,KAAK2+D,kBAEN,OAAO3+D,MAAK6+D,gB1Gs2VNj8D,WAAY,KACZC,aAAc,M0Gp2VrBrC,QAAA+B,eAAWd,EAAAlB,UAAA,a1Gu2VJiC,I0Gv2VP,WAEC,MAAOxC,MAAK89D,Y1Gw2VNr7D,I0Gr2VP,SAAqBC,GAEpB,GAAIA,GAAS1C,KAAK89D,WACjB,MAED99D,MAAK89D,WAAap7D,CAElB1C,MAAKg+D,gBAAkB,IAEvBh+D,MAAKg3D,cAAgB6G,EAAAiB,WAAWC,gBAAgB/+D,KAAK89D,WAErD,IAAI99D,KAAKg3D,cAAgBh3D,KAAK89D,WAAY,CACzC99D,KAAKi+D,qBAAqBvvD,EAAIk1B,KAAK0N,OAAOtxC,KAAKg3D,cAAgBh3D,KAAK89D,YAAY,GAChF99D,MAAKi+D,qBAAqBl8D,MAAQ/B,KAAK89D,eACjC,CACN99D,KAAKi+D,qBAAqBvvD,EAAI,CAC9B1O,MAAKi+D,qBAAqBl8D,MAAQ/B,KAAKg3D,cAGxCh3D,KAAK0U,cAAc,GAAI3M,GAAAS,SAAST,EAAAS,SAASC,OAAQzI,Q1Gk2V3C4C,WAAY,KACZC,aAAc,M0Gh2VrBrC,QAAA+B,eAAWd,EAAAlB,UAAA,c1Gm2VJiC,I0Gn2VP,WAEC,MAAOxC,MAAK+9D,a1Go2VNt7D,I0Gj2VP,SAAsBC,GAErB,GAAIA,GAAS1C,KAAK+9D,YACjB,MAED/9D,MAAK+9D,YAAcr7D,CAEnB1C,MAAKg+D,gBAAkB,IAEvBh+D,MAAKi3D,eAAiB4G,EAAAiB,WAAWC,gBAAgB/+D,KAAK+9D,YAEtD,IAAI/9D,KAAKi3D,eAAiBj3D,KAAK+9D,YAAa,CAC3C/9D,KAAKi+D,qBAAqBrvD,EAAIg1B,KAAK0N,OAAOtxC,KAAKi3D,eAAiBj3D,KAAK+9D,aAAa,GAClF/9D,MAAKi+D,qBAAqB77D,OAASpC,KAAK+9D,gBAClC,CACN/9D,KAAKi+D,qBAAqBrvD,EAAI,CAC9B5O,MAAKi+D,qBAAqB77D,OAASpC,KAAKi3D,eAGzCj3D,KAAK0U,cAAc,GAAI3M,GAAAS,SAAST,EAAAS,SAASC,OAAQzI,Q1G81V3C4C,WAAY,KACZC,aAAc,M0G51VrBrC,QAAA+B,eAAWd,EAAAlB,UAAA,+B1G+1VJiC,I0G/1VP,WAEC,GAAIxC,KAAKg+D,gBACRh+D,KAAK2+D,kBAEN,OAAO3+D,MAAKg/D,8B1G+1VNp8D,WAAY,KACZC,aAAc,M0G71VrBrC,QAAA+B,eAAWd,EAAAlB,UAAA,8B1Gg2VJiC,I0Gh2VP,WAEC,GAAIxC,KAAKg+D,gBACRh+D,KAAK2+D,kBAEN,OAAO3+D,MAAKi/D,6B1Gg2VNr8D,WAAY,KACZC,aAAc,M0G71VrBrC,QAAA+B,eAAWd,EAAAlB,UAAA,e1Gg2VJiC,I0Gh2VP,WAEC,MAAOxC,MAAKk/D,c1Gi2VNt8D,WAAY,KACZC,aAAc,M0G/1VrBrC,QAAA+B,eAAWd,EAAAlB,UAAA,uB1Gk2VJiC,I0Gl2VP,WAEC,GAAIxC,KAAKg+D,gBACRh+D,KAAK2+D,kBAEN,OAAO3+D,MAAKi+D,sB1Gk2VNr7D,WAAY,KACZC,aAAc,M0Gh2VrBrC,QAAA+B,eAAWd,EAAAlB,UAAA,gB1Gm2VJiC,I0Gn2VP,WAEC,MAAOxC,MAAKg3D,e1Go2VNp0D,WAAY,KACZC,aAAc,M0Gl2VrBrC,QAAA+B,eAAWd,EAAAlB,UAAA,iB1Gq2VJiC,I0Gr2VP,WAEC,MAAOxC,MAAKi3D,gB1Gs2VNr0D,WAAY,KACZC,aAAc,M0Gp2VdpB,GAAAlB,UAAAyC,QAAP,WAECvB,EAAiBi9D,uBAAuB1+D,KAAKqI,OAE7C,IAAIrI,KAAKk/D,aAAc,CACtBl/D,KAAKk/D,aAAal8D,SAClBhD,MAAKi/D,4BAA4Bj8D,SACjChD,MAAKg/D,6BAA6Bh8D,SAClChD,MAAKi/D,4BAA8B,IACnCj/D,MAAKg/D,6BAA+B,IACpCh/D,MAAKk/D,aAAe,MAOdz9D,GAAAlB,UAAAo+D,iBAAR,WAEC,GAAIz4D,GAAqBlG,KAAKqI,OAAOnC,OACrC,IAAIi5D,EACJ,IAAIC,EAEJ,IAAI1wD,EACJ,IAAIE,EAEJ,IAAI5O,KAAKg/D,8BAAgC,KACxCh/D,KAAKg/D,6BAA+B94D,EAAQyvB,mBAAmB,EAAG,GAEnE,IAAI31B,KAAKi/D,6BAA+B,KACvCj/D,KAAKi/D,4BAA8B/4D,EAAQyvB,mBAAmB,EAAG,GAElE,KAAK31B,KAAKk/D,aAAc,CACvBl/D,KAAKk/D,aAAeh5D,EAAQm5D,kBAAkB,EAE9Cr/D,MAAKk/D,aAAatpC,iBAAiB,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAG1D51B,KAAK4+D,eAAiBlwD,EAAIk1B,KAAKiG,IAAI7pC,KAAK89D,WAAW99D,KAAKg3D,cAAe,EACvEh3D,MAAK6+D,eAAiBjwD,EAAIg1B,KAAKiG,IAAI7pC,KAAK+9D,YAAY/9D,KAAKi3D,eAAgB,EAEzE,IAAIqI,IAAa,EAAI5wD,GAAG,EACxB,IAAI6wD,IAAa7wD,EAAI,GAAG,EACxB,IAAI8wD,IAAa,EAAI5wD,GAAG,EACxB,IAAI6wD,IAAa7wD,EAAI,GAAG,EAGxBuwD,KAAqBzwD,GAAIE,EAAG0wD,EAAIE,EAAI,EAAG9wD,GAAIE,EAAG2wD,EAAIC,EAAI,EAAG9wD,EAAGE,EAAG2wD,EAAIE,EAAI,GAAI/wD,EAAGE,EAAG0wD,EAAIG,EAAI,EAEzFL,KAAqB,GAAI,EAAGE,EAAIE,EAAI,EAAG,GAAI,EAAGD,EAAIC,EAAI,EAAG,EAAG,EAAGD,EAAIE,EAAI,GAAI,EAAG,EAAGH,EAAIG,EAAI,EAEzFz/D,MAAKg/D,6BAA6BppC,gBAAgBupC,EAAc,EAAG,EACnEn/D,MAAKi/D,4BAA4BrpC,gBAAgBwpC,EAAa,EAAG,EAEjEp/D,MAAKg+D,gBAAkB,MAEzB,OAAAv8D,IA3PsCmK,EAAAyL,gBAAzBjd,GAAAqH,iBAAgBA,CA6P7B,IAAA68D,GAAA,WAAA,QAAAA,MAKA,MAAAA,Q1Gw1VGoB,qBAAqB,wCAAwCloD,yCAAyCpY,UAAUwY,iCAAiCxY,UAAUugE,mCAAmCvgE,YAAYwgE,kCAAkC,SAAStmE,EAAQkB,EAAOJ,GACvQ,Y2GrmWA,IAAAwG,GAAAtH,EAAkC,8BAA1Bc,GAAAqH,iBAAAb,EAAAa,mB3GwmWLkF,8BAA8B,oDAAoDk5D,4DAA4D,SAASvmE,EAAQkB,EAAOJ,GACzK,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I4G7mWnF,IAAAy/D,GAAAxmE,EAAkC,8CAIlC,IAAA+C,GAAA/C,EAAkC,+CAElC,IAAAymE,GAAAzmE,EAAsC,qDAKtC,IAAA0mE,GAAA1mE,EAAkC,mCAMlC,IAAAoE,GAAA,SAAAmD,GAA4Cd,EAAArC,EAAAmD,EAiB3C,SAAAnD,GAAYuiE,EAAqBC,GAEhCr/D,EAAAxG,KAAA2F,KAAMigE,EAAWC,EAEjBlgE,MAAKmgE,WAAaF,EAGZviE,EAAA6C,UAAAmsD,QAAP,SAAevkD,GAEdtH,EAAAN,UAAMmsD,QAAOryD,KAAA2F,KAACmI,EAEdnI,MAAKmgE,WAAa,KAQZziE,GAAA6C,UAAA6/D,cAAP,WAEC,GAAIC,GAAsBrgE,KAAKmgE,WAAWG,SAASC,aAAa,EAEhE,IAAIxxD,IAAa,CAEjB,IAAIsxD,EACHtxD,IAAO/O,KAAK8O,WAAW0xD,MAAOxgE,KAAK8O,WAAW0xD,MAAMC,aAAaJ,IAAYA,EAAQI,aAAa,GAAKJ,EAAQI,aAAa,KAAOV,EAAAW,uBAAuBC,qBAAqB5xD,EAEhL/O,MAAK4gE,IAAM7xD,CAEX,IAAIrU,GAA4BgD,EAAuBmjE,iBAAiB9xD,EAExE,IAAIhN,GAAe/B,KAAKmgE,WAAWW,cACnC,IAAI1+D,GAAgBpC,KAAKmgE,WAAWY,eACpC,IAAIC,GAA0BhhE,KAAKmgE,WAAWa,aAE9C,KAAKtmE,EAAU,CACdA,EAAWgD,EAAuBmjE,iBAAiB9xD,GAAM,GAAI1S,GAAAe,iBAAiB,GAAI0iE,GAAAmB,iBAAiB,GAAI,GACvGvmE,GAASsyB,kBAAoB,KAC7BtyB,GAASuyB,mBAAqB,KAC9BvyB,GAAS62B,WAAWnwB,MAAc,EAAG,EAAG,EAAG,EAAG,EAAG,GACjD1G,GAASs/C,aAAa54C,OAAe4/D,EAActyD,GAAIsyD,EAAcpyD,EAAG,EAAG7M,EAAMi/D,EAActyD,GAAIsyD,EAAcpyD,EAAG,EAAG7M,EAAMi/D,EAActyD,EAAGtM,EAAO4+D,EAAcpyD,EAAG,GAAIoyD,EAActyD,EAAGtM,EAAO4+D,EAAcpyD,EAAG,GACnNlU,GAASwmE,WAAW9/D,MAAc,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnE1G,GAASymE,YAAY//D,MAAc,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,GACxE1G,GAAS0mE,OAAOhgE,MAAc,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,QAC7C,CACN1G,EAASs/C,aAAa54C,OAAe4/D,EAActyD,GAAIsyD,EAAcpyD,EAAG,EAAG7M,EAAMi/D,EAActyD,GAAIsyD,EAAcpyD,EAAG,EAAG7M,EAAMi/D,EAActyD,EAAGtM,EAAO4+D,EAAcpyD,EAAG,GAAIoyD,EAActyD,EAAGtM,EAAO4+D,EAAcpyD,EAAG,IAGpN,MAAyB5O,MAAKqI,OAAO8B,eAAezP,GAG9CgD,GAAA6C,UAAA8gE,aAAP,WAEC,MAAOrhE,MAAKshE,UAAUnyD,eAAenP,KAAKiW,YAAY9L,eAAenK,KAAKmgE,WAAWG,UAAYP,EAAAW,uBAAuBa,mBAAmBvhE,KAAK8O,aArElIpR,GAAAmjE,iBAA0B,GAAIrgE,OAwE9C,OAAA9C,IA1E4CsiE,EAAAwB,kBAA/BpnE,GAAAsD,uBAAsBA,I5G0pWhC+jE,mCAAmC,sDAAsDC,8CAA8CtiE,UAAUK,+CAA+CL,UAAUuiE,qDAAqDviE,YAAYwiE,0DAA0D,SAAStoE,EAAQkB,EAAOJ,GAChW,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I6G7qWnF,IAAA0/D,GAAAzmE,EAAsC,qDAKtC,IAAA0mE,GAAA1mE,EAAkC,mCAMlC,IAAAwE,GAAA,SAAA+C,GAA0Cd,EAAAjC,EAAA+C,EAgBzC,SAAA/C,GAAYmkB,EAAiBi+C,GAE5Br/D,EAAAxG,KAAA2F,KAAMiiB,EAASi+C,EAEflgE,MAAKiiB,QAAUA,EAGTnkB,EAAAyC,UAAAmsD,QAAP,SAAevkD,GAEdtH,EAAAN,UAAMmsD,QAAOryD,KAAA2F,KAACmI,EAEdnI,MAAKiiB,QAAU,KAQTnkB,GAAAyC,UAAA6/D,cAAP,WAECpgE,KAAKw6C,QAAUx6C,KAAKiiB,QAAQpF,MAC5B7c,MAAK6hE,OAAS7hE,KAAKiiB,QAAQO,KAG3B,OAAyBxiB,MAAKqI,OAAO8B,eAAgBnK,KAAK8O,WAAmB,SAAmB9O,KAAK8O,WAAWisB,SAAUhd,sBAAsB/d,KAAMA,KAAKiiB,QAAQvnB,UAAYsF,KAAKiiB,QAAQvnB,UAItLoD,GAAAyC,UAAA8gE,aAAP,WAEC,MAAOrhE,MAAKshE,UAAUnyD,eAAenP,KAAKiW,YAAY9L,eAAenK,KAAKiiB,QAAQq+C,UAAYP,EAAAW,uBAAuBa,mBAAmBvhE,KAAK8O,aAE/I,OAAAhR,IAjD0CkiE,EAAAwB,kBAA7BpnE,GAAA0D,qBAAoBA,I7G2sW9B2jE,mCAAmC,sDAAsDE,qDAAqDviE,YAAY0iE,8DAA8D,SAASxoE,EAAQkB,EAAOJ,GACnP,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I8G3tWnF,IAAAjE,GAAA9C,EAA+B,2CAE/B,IAAAymE,GAAAzmE,EAAsC,qDAItC,IAAA0mE,GAAA1mE,EAAkC,mCAMlC,IAAAsE,GAAA,SAAAiD,GAA8Cd,EAAAnC,EAAAiD,EAiB7C,SAAAjD,GAAYmkE,EAAyB7B,GAEpCr/D,EAAAxG,KAAA2F,KAAM+hE,EAAa7B,EAEnBlgE,MAAKgiE,aAAeD,EAGdnkE,EAAA2C,UAAAmsD,QAAP,SAAevkD,GAEdtH,EAAAN,UAAMmsD,QAAOryD,KAAA2F,KAACmI,EAEdnI,MAAKgiE,aAAe,KASdpkE,GAAA2C,UAAA6/D,cAAP,WAEC,GAAI1lE,GAAwBkD,EAAyBqkE,cAAcjiE,KAAKgiE,aAAajzD,MAAQnR,EAAyBqkE,cAAcjiE,KAAKgiE,aAAajzD,IAAM,GAAI3S,GAAAc,aAEhK,IAAI0e,GAAiB5b,KAAKgiE,aAAaE,YACvC,IAAIC,GAAeniE,KAAKgiE,aAAaI,WAErC,IAAI90C,GAAyB,GAAInF,cAAa,EAC9C,IAAIsmC,GAAyB,GAAItmC,cAAa,EAE9CmF,GAAU,GAAK1R,EAAMlN,CACrB4e,GAAU,GAAK1R,EAAMhN,CACrB0e,GAAU,GAAK1R,EAAM8Q,CACrBY,GAAU,GAAK60C,EAAIzzD,CACnB4e,GAAU,GAAK60C,EAAIvzD,CACnB0e,GAAU,GAAK60C,EAAIz1C,CACnB+hC,GAAU,GAAKzuD,KAAKgiE,aAAavT,SAEjC/zD,GAASs/C,aAAa1sB,EACtB5yB,GAAS2nE,aAAa5T,EAEtB,OAAyBzuD,MAAKqI,OAAO8B,eAAezP,GAG9CkD,GAAA2C,UAAA8gE,aAAP,WAEC,MAAOrhE,MAAKshE,UAAUnyD,eAAenP,KAAKiW,YAAY9L,eAAenK,KAAKgiE,aAAa1B,UAAYP,EAAAW,uBAAuBa,mBAAmBvhE,KAAK8O,aAa5IlR,GAAA2C,UAAA+hE,wBAAP,SAA+BxV,GAE9B,MAAO,IAAIlvD,GAAuCoC,KAAK8O,WAAY9O,KAAKshE,WA5E1D1jE,GAAAqkE,cAAuB,GAAIzhE,OA8E3C,OAAA5C,IAhF8CoiE,EAAAwB,kBAAjCpnE,GAAAwD,yBAAwBA,I9GoxWlC6jE,mCAAmC,sDAAsDjiE,2CAA2CJ,UAAUuiE,qDAAqDviE,YAAYmjE,uDAAuD,SAASjpE,EAAQkB,EAAOJ,GACjS,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I+GxyWnF,IAAAgY,GAAA/e,EAAoC,6CACpC,IAAAyxD,GAAAzxD,EAA6B,oCAK7B,IAAAwxD,GAAAxxD,EAAiC,0CAOjC,IAAAkpE,GAAAlpE,EAAiC,4CAgBjC,IAAAkoE,GAAA,SAAA3gE,GAAuCd,EAAAyhE,EAAA3gE,EAwGtC,SAAA2gE,GAAY1yD,EAAwBoxD,GAxGrC,GAAAl4D,GAAAhI,IA0GEa,GAAAxG,KAAA2F,KAAM8O,EAAYoxD,EArGZlgE,MAAA6hE,OAAgB,CAChB7hE,MAAAw6C,QAAiB,CAGhBx6C,MAAAyiE,eAAyB,IACzBziE,MAAA0iE,cAAwB,IAkEzB1iE,MAAA2iE,OAA6B,GAAIvhE,MAEjCpB,MAAA4iE,SAAiC,GAAIxhE,MA8B3CpB,MAAK6iE,6BAA+B,SAAC16D,GAA0B,MAAAH,GAAK86D,qBAAqB36D,GACzFnI,MAAK+iE,8BAAgC,SAAC56D,GAA0B,MAAAH,GAAKg7D,qBAAqB76D,GAG1FnI,MAAKshE,UAAYpB,CACjBlgE,MAAKqI,OAAS63D,EAASp/D,KAEvBd,MAAK8O,WAAaA,CAElB9O,MAAK8O,WAAWvG,iBAAiBi6D,EAAAS,gBAAgBC,mBAAoBljE,KAAK6iE,6BAC1E7iE,MAAK8O,WAAWvG,iBAAiBi6D,EAAAS,gBAAgBE,oBAAqBnjE,KAAK+iE,+BAtC5EviE,OAAA+B,eAAWi/D,EAAAjhE,UAAA,c/GguWJiC,I+GhuWP,WAEC,GAAIxC,KAAKyiE,eACRziE,KAAKojE,iBAEN,OAAOpjE,MAAKqjE,a/GguWNzgE,WAAY,KACZC,aAAc,M+G9tWrBrC,QAAA+B,eAAWi/D,EAAAjhE,UAAA,a/GiuWJiC,I+GjuWP,WAEC,GAAIxC,KAAK0iE,cACR1iE,KAAKsjE,gBAEN,OAAOtjE,MAAKujE,Y/GiuWN3gE,WAAY,KACZC,aAAc,M+GtsWd2+D,GAAAjhE,UAAAmsD,QAAP,SAAevkD,GAEdtH,EAAAN,UAAMmsD,QAAOryD,KAAA2F,KAACmI,EAEdnI,MAAK0T,KAAO,IACZ1T,MAAK6T,YAAc,IACnB7T,MAAK+V,qBAAuB,IAE5B/V,MAAKshE,UAAY,IACjBthE,MAAKqI,OAAS,IACdrI,MAAKmU,aAAe,IAEpBnU,MAAK8O,WAAW7D,oBAAoBu3D,EAAAS,gBAAgBC,mBAAoBljE,KAAK6iE,6BAC7E7iE,MAAK8O,WAAW7D,oBAAoBu3D,EAAAS,gBAAgBE,oBAAqBnjE,KAAK+iE,8BAC9E/iE,MAAK8O,WAAa,IAElB9O,MAAKujE,WAAWrY,QAEhB,KAAKlrD,KAAKujE,WAAWrY,OACpBlrD,KAAKujE,WAAW7W,QAAQ,GAAI3B,GAAAoC,WAAWpC,EAAAoC,WAAWC,MAAOptD,KAAKujE,WAAWC,SAE1ExjE,MAAKujE,WAAa,IAClBvjE,MAAKqjE,YAAc,KAGb7B,GAAAjhE,UAAAyiE,qBAAP,SAA4B76D,GAE3BnI,KAAKyiE,eAAiB,KAGfjB,GAAAjhE,UAAAuiE,qBAAR,SAA6B36D,GAE5BnI,KAAK0iE,cAAgB,KAGflB,GAAAjhE,UAAA6/D,cAAP,WAEC,KAAM,IAAI/nD,GAAAiB,oBAGJkoD,GAAAjhE,UAAA8gE,aAAP,WAEC,KAAM,IAAIhpD,GAAAiB,oBAQJkoD,GAAAjhE,UAAAiE,SAAP,SAAgBiL,EAAY7L,EAAe+N,GAE1C3R,KAAK4sD,gBAAgBn9C,EAAM7L,EAAQ+N,EAEnC3R,MAAKqjE,YAAYxW,KAAK7sD,KAAMyP,EAAKC,OAAQ9L,EAAQ+N,EAAgB3R,KAAK6hE,OAAQ7hE,KAAKw6C,SAG7EgnB,GAAAjhE,UAAAqsD,gBAAP,SAAuBn9C,EAAY7L,EAAe+N,GAEjD,GAAI3R,KAAKyiE,eACRziE,KAAKojE,iBAEN3zD,GAAKm9C,gBAAgB5sD,KAAM4D,EAAQ+N,EAEnC,IAAIlC,EAAKC,OAAO+zD,gBAAkBzjE,KAAKqjE,YAAa,CACnD5zD,EAAKC,OAAO+zD,eAAiBzjE,KAAKqjE,WAClCrjE,MAAKqjE,YAAYzW,gBAAgB5sD,KAAMyP,EAAKC,OAAQ9L,EAAQ+N,IAStD6vD,GAAAjhE,UAAA6iE,gBAAR,WAECpjE,KAAKqjE,YAAcrjE,KAAKogE,eAExBpgE,MAAKyiE,eAAiB,MAGfjB,GAAAjhE,UAAA+iE,eAAR,WAEC,GAAIrwD,GAA2BjT,KAAKqhE,cAEpC,IAAIrhE,KAAKujE,YAActwD,EAAW,CAEjC,GAAIjT,KAAKujE,WAAY,CACpBvjE,KAAKujE,WAAWrY,QAGhB,KAAKlrD,KAAKujE,WAAWrY,OACpBlrD,KAAKujE,WAAW7W,QAAQ,GAAI3B,GAAAoC,WAAWpC,EAAAoC,WAAWC,MAAOptD,KAAKujE,WAAWC,UAG3ExjE,KAAKujE,WAAatwD,CAElBjT,MAAKujE,WAAWrY,SAIjB,GAAIwY,GAAmBzwD,EAAUywD,SAEjC1jE,MAAK2iE,OAAOroE,OAASopE,CACrB1jE,MAAK4iE,SAAStoE,OAASopE,CACvB1jE,MAAK2jE,SAAW3jE,KAAK8O,WAAW0xD,MAAOxgE,KAAK8O,WAAW0xD,MAAMmD,SAAW3jE,KAAKujE,WAAWC,QAAQhD,MAAOxgE,KAAKujE,WAAWC,QAAQhD,MAAMmD,SAAW,IAEhJ,IAAIC,GAAqB5jE,KAAKujE,WAAWC,QAAQK,gBACjD,IAAIxD,EACJ,IAAIqD,EACJ,IAAII,EACJ,IAAIC,EACJ,IAAIjiD,EAEJ,KAAK,GAAI/nB,GAAW,EAAGA,EAAI6pE,EAAa7pE,IAAK,CAC5CsmE,EAAUrgE,KAAKujE,WAAWC,QAAQjD,aAAaxmE,EAC/C2pE,GAAYrD,EAAQ2D,cACpB,KAAK,GAAIjtD,GAAW,EAAGA,EAAI2sD,EAAW3sD,IAAK,CAC1C+K,EAAQ7O,EAAUgxD,cAAc5D,EAAStpD,EACzC+sD,GAAS9jE,KAAK8O,WAAW0xD,MAAOxgE,KAAK8O,WAAW0xD,MAAM0D,WAAW7D,EAAStpD,GAAK,IAC/E/W,MAAK2iE,OAAO7gD,GAASgiD,EAAsB9jE,KAAKqI,OAAO8B,eAAe25D,GAAS,IAC/EC,GAAU/jE,KAAK8O,WAAW0xD,MAAOxgE,KAAK8O,WAAW0xD,MAAMC,aAAaJ,EAAStpD,GAAK,IAClF/W,MAAK4iE,SAAS9gD,GAASiiD,EAA0B/jE,KAAKqI,OAAO8B,eAAe45D,GAAW,MAIzF/jE,KAAK0iE,cAAgB,MAEvB,OAAAlB,IA1PuC1W,EAAAwC,gBAA1BlzD,GAAAonE,kBAAiBA,I/Gg6W3BtnD,6CAA6C9a,UAAUmuD,oCAAoCnuD,UAAUouD,0CAA0CpuD,UAAU+kE,4CAA4C/kE,YAAYglE,yDAAyD,SAAS9qE,EAAQkB,EAAOJ,GACrS,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IgHl8WnF,IAAAy/D,GAAAxmE,EAAkC,8CAMlC,IAAA+C,GAAA/C,EAAkC,+CAYlC,IAAA0mE,GAAA1mE,EAAkC,mCAGlC,IAAAq5D,GAAAr5D,EAAkC,gCAKlC,IAAA0E,GAAA,SAAA6C,GAAyCd,EAAA/B,EAAA6C,EAkBxC,SAAA7C,GAAYqmE,EAAenE,GAE1Br/D,EAAAxG,KAAA2F,KAAMqkE,EAAQnE,EAEdlgE,MAAKskE,QAAUD,EASTrmE,EAAAuC,UAAA6/D,cAAP,WAEC,GAAInqD,GAA+BjY,EAAoBqlE,WAEvD,KAAKptD,EAAY,CAChB,GAAIvb,GAA4B,GAAI2B,GAAAe,iBAAiB,GAAI0iE,GAAAmB,iBAAiB,GAAI,GAC9EvmE,GAASsyB,kBAAoB,KAC7BtyB,GAASuyB,mBAAqB,KAC9BvyB,GAAS62B,WAAWnwB,MAAc,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3I1G,GAASs/C,aAAa54C,OAAe,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,GAErH6U,GAAajY,EAAoBqlE,YAAc,GAAI1Q,GAAArC,kBAAkB51D,EAAUsF,KAAKqI,QAGrF,MAAO4N,GAGDjY,GAAAuC,UAAA8gE,aAAP,WAEC,MAAOrhE,MAAKshE,UAAUnyD,eAAenP,KAAKiW,YAAY9L,eAAenK,KAAKskE,SAG7DtmE,GAAAiwD,sBAAd,SAAoCv+C,IAIrC,OAAA1R,IAzDyCgiE,EAAAwB,kBAA5BpnE,GAAA4D,oBAAmBA,IhHu9W7BumE,gCAAgC,mDAAmD9C,mCAAmC,sDAAsDC,8CAA8CtiE,UAAUK,+CAA+CL,YAAYolE,qCAAqC,SAASlrE,EAAQkB,EAAOJ,GAC/V,YiHl/WA,IAAAqqE,GAAAnrE,EAAuC,uCAA/Bc,GAAAsD,uBAAA+mE,EAAA/mE,sBACR,IAAAgnE,GAAAprE,EAAqC,qCAA7Bc,GAAA0D,qBAAA4mE,EAAA5mE,oBACR,IAAA6mE,GAAArrE,EAAwC,yCAAhCc,GAAAwD,yBAAA+mE,EAAA/mE,wBACR,IAAAoiE,GAAA1mE,EAAmC,kCAA3Bc,GAAAonE,kBAAAxB,EAAAwB,iBACR,IAAAoD,GAAAtrE,EAAqC,oCAA7Bc,GAAA4D,oBAAA4mE,EAAA5mE,sBjHy/WL6mE,uCAAuC,2DAA2DC,qCAAqC,yDAAyDC,yCAAyC,6DAA6DC,kCAAkC,sDAAsDC,oCAAoC,0DAA0DC,gDAAgD,SAAS5rE,EAAQkB,EAAOJ,GACviB,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IkH1/WnF,IAAA8kE,GAAA7rE,EAA+B,4CAE/B,IAAA8rE,GAAA9rE,EAAkC,2CAOlC,IAAA+rE,GAAA/rE,EAA6B,wBAE7B,IAAAgsE,GAAAhsE,EAAkC,wCAYlC,IAAAisE,GAAA,SAAA1kE,GAAoCd,EAAAwlE,EAAA1kE,EAwEnC,SAAA0kE,GAAYl2D,EAAgCm2D,EAA4B1kE,GAEvED,EAAAxG,KAAA2F,KAAMqP,EAAem2D,EAAc1kE,EAtE5Bd,MAAAylE,gBAA0B,IAwEjCzlE,MAAK0lE,cAAgBF,EAGfD,EAAAhlE,UAAA0tD,sBAAP,WAECjuD,KAAK2lE,eAAiB3lE,KAAK0lE,cAAcC,cACzC3lE,MAAK4lE,qBAAuB5lE,KAAK0lE,cAAcE,oBAC/C5lE,MAAK6lE,eAAiB7lE,KAAK0lE,cAAcG,cAEzC,IAAIC,GAAsB9lE,KAAK0lE,cAAcC,eAAiB3lE,KAAK0lE,cAAcE,oBACjF,IAAIC,GAAwB7lE,KAAK0lE,cAAcG,cAC/C,IAAIE,GAA6B/lE,KAAK0lE,cAAcM,cAAchmE,MAAOA,KAAK0lE,cAAcK,oBAAsB,CAClH,IAAIE,GAA8BjmE,KAAK0lE,cAAcQ,eAAelmE,MAAOA,KAAK0lE,cAAcO,qBAAuB,CACrH,IAAIE,GAA8BJ,EAAsBE,CAExDjmE,MAAKomE,iBAAmBpmE,KAAK0lE,cAAcW,oBAAsBrmE,KAAKgB,SAAWokE,EAAAkB,iBAAiBC,oBAClGvmE,MAAKwmE,eAAiBxmE,KAAKomE,gBAC3BpmE,MAAKymE,UAAYX,EAAeD,CAChC7lE,MAAK0mE,WAAaZ,EAAe,IAAMK,EAAuBhB,EAAAwB,aAAaC,SAAW,CACtF5mE,MAAK6mE,WAAahB,EAAiB,IAAMM,EAAuBhB,EAAAwB,aAAaG,SAAW,CACxF9mE,MAAK+mE,sBAAwBjB,EAAe,IAAMG,EAAuBd,EAAAwB,aAAaC,SAAW,CACjG5mE,MAAKgnE,sBAAwBnB,EAAiB,IAAMI,EAAuBd,EAAAwB,aAAaG,SAAW,CACnG9mE,MAAKinE,qBAAuBnB,EAAe,IAAMC,EAAsBZ,EAAAwB,aAAaC,SAAW,CAC/F5mE,MAAKknE,qBAAuBrB,EAAiB,IAAME,EAAsBZ,EAAAwB,aAAaG,SAAW,CACjG9mE,MAAKmnE,YAAcnnE,KAAK0lE,cAAc0B,cAAcpnE,KAGpDa,GAAAN,UAAM0tD,sBAAqB5zD,KAAA2F,MASrBulE,GAAAhlE,UAAA8mE,eAAP,SAAsBh4D,EAAgCI,GAErD,MAAO,IAAI61D,GAAAgC,iBAAiBj4D,EAAeI,EAAMzP,MAW3CulE,GAAAhlE,UAAAqsD,gBAAP,SAAuB99C,EAA8BlL,EAAe+N,GAEnE9Q,EAAAN,UAAMqsD,gBAAevyD,KAAA2F,KAAC8O,EAAYlL,EAAQ+N,EAE1C,IAAI3R,KAAK0lE,cAAc6B,YACtBvnE,KAAK0lE,cAAc6B,YAAYC,cAAc14D,EAAWqF,aAEzD,IAAInU,KAAK0mE,WACR1mE,KAAKkF,cAEN,IAAIlF,KAAK6mE,WACR7mE,KAAKynE,eAMClC,GAAAhlE,UAAA2E,aAAR,WAEC,GAAIwiE,EACJ,IAAIC,EACJ,IAAI5tE,GAAW,CACf,IAAIid,GAAW,CACf,IAAI7R,EACJ,IAAIyiE,EACJ,IAAIhkD,GAAe,CACnB,IAAIikD,GAAuB7nE,KAAKmnE,YAAa,EAAI,CACjD,IAAIhtE,EACJ,IAAI0iB,EAEJ7c,MAAK8nE,SAAW9nE,KAAK+nE,SAAW/nE,KAAKgoE,SAAW,CAEhD7tE,GAAI6F,KAAKioE,wBACTjxD,GAAIhX,KAAKkoE,0BAET,IAAIC,GAAc,CAClB,IAAIC,GAAoCpoE,KAAK0lE,cAAc6B,YAAYc,iBACvExrD,GAAS7c,KAAK0lE,cAAc4C,uBAC5BnjE,GAAMnF,KAAK0lE,cAAc6B,YAAYc,kBAAkB/tE,MAEvD,IAAIuiB,EAAS1X,EAAK,CACjBgjE,EAAO,CACPtrD,IAAU1X,EAGX,KAAOgjE,EAAON,IAAiBM,EAAM,CACpC,GAAIA,EACHC,EAAYpoE,KAAK0lE,cAAc6B,YAAYgB,wBAE5CpjE,GAAMijE,EAAU9tE,MAEhB,IAAI6K,EAAMnF,KAAK4lE,qBACdzgE,EAAMnF,KAAK4lE,oBAEZ,KAAK7rE,EAAI,EAAGA,EAAIoL,IAAOpL,EAAG,CACzB2tE,EAAWU,EAAUvrD,EAAS9iB,EAC9B6tE,GAASF,EAASc,cAElBxoE,MAAK8nE,UAAYJ,EAASe,UAC1BzoE,MAAK+nE,UAAYL,EAASgB,UAC1B1oE,MAAKgoE,UAAYN,EAASiB,UAE1B,IAAI3oE,KAAK4oE,iBAAkB,CAC1B,GAAIl6D,IAAYk5D,EAAOl5D,CACvB,IAAIE,IAAYg5D,EAAOh5D,CACvB,IAAI8d,IAAYk7C,EAAOl7C,CAEvB1sB,MAAKwvD,mBAAmBr1D,KAAO6F,KAAK6oE,qBAAqB,GAAGn6D,EAAI1O,KAAK6oE,qBAAqB,GAAGj6D,EAAI5O,KAAK6oE,qBAAqB,GAAGn8C,CAC9H1sB,MAAKwvD,mBAAmBr1D,KAAO6F,KAAK6oE,qBAAqB,GAAGn6D,EAAI1O,KAAK6oE,qBAAqB,GAAGj6D,EAAI5O,KAAK6oE,qBAAqB,GAAGn8C,CAC9H1sB,MAAKwvD,mBAAmBr1D,KAAO6F,KAAK6oE,qBAAqB,GAAGn6D,EAAI1O,KAAK6oE,qBAAqB,GAAGj6D,EAAI5O,KAAK6oE,qBAAqB,IAAIn8C,CAC/H1sB,MAAKwvD,mBAAmBr1D,KAAO,MACzB,CACN6F,KAAK4xD,qBAAqB56C,MAAQ4wD,EAAOl5D,CACzC1O,MAAK4xD,qBAAqB56C,MAAQ4wD,EAAOh5D,CACzC5O,MAAK4xD,qBAAqB56C,MAAQ4wD,EAAOl7C,CACzC1sB,MAAK4xD,qBAAqB56C,KAAO,EAGlChX,KAAK4xD,qBAAqB56C,KAAO0wD,EAASoB,UAC1C9oE,MAAK4xD,qBAAqB56C,KAAO0wD,EAASqB,UAC1C/oE,MAAK4xD,qBAAqB56C,KAAO0wD,EAASsB,UAC1ChpE,MAAK4xD,qBAAqB56C,KAAO,CAEjChX,MAAK4xD,qBAAqB56C,KAAO0wD,EAASuB,WAC1CjpE,MAAK4xD,qBAAqB56C,KAAO0wD,EAASwB,WAC1ClpE,MAAK4xD,qBAAqB56C,KAAO0wD,EAASyB,WAC1CnpE,MAAK4xD,qBAAqB56C,KAAO,CAEjC,MAAM4M,GAAS5jB,KAAK4lE,qBAAsB,CAEzC7rE,EAAIoL,CACJgjE,GAAON,IAMV,GAAI7nE,KAAK4lE,qBAAuBhiD,EAAO,CACtC7pB,EAAIid,GAAKhX,KAAK4lE,qBAAuBhiD,GAAO,EAE5C,OAAO5M,EAAIjd,EACViG,KAAK4xD,qBAAqB56C,KAAO,EAGnC4M,EAAQ,CAER,IAAIwlD,GAAgCppE,KAAK0lE,cAAc6B,YAAY6B,WACnEvsD,GAAS7c,KAAK0lE,cAAc2D,iBAC5BlkE,GAAMnF,KAAK0lE,cAAc6B,YAAY6B,YAAY9uE,MAEjD,IAAIuiB,EAAS1X,EAAK,CACjBgjE,EAAO,CACPtrD,IAAU1X,MACJ,CACNgjE,EAAO,EAGR,KAAOA,EAAON,IAAiBM,EAAM,CACpC,GAAIA,EACHiB,EAAcppE,KAAK0lE,cAAc6B,YAAY+B,kBAE9CnkE,GAAMikE,EAAY9uE,MAElB,KAAKP,EAAI,EAAGA,EAAIoL,IAAOpL,EAAG,CACzB4tE,EAAayB,EAAYvsD,EAAS9iB,EAClC6tE,GAASD,EAAWz2D,aAEpBlR,MAAK8nE,UAAYH,EAAWc,UAC5BzoE,MAAK+nE,UAAYJ,EAAWe,UAC5B1oE,MAAKgoE,UAAYL,EAAWgB,UAE5B,IAAI3oE,KAAK4oE,iBAAkB,CAC1Bl6D,EAAIk5D,EAAOl5D,CACXE,GAAIg5D,EAAOh5D,CACX8d,GAAIk7C,EAAOl7C,CAEX1sB,MAAKwvD,mBAAmBr1D,KAAO6F,KAAK6oE,qBAAqB,GAAGn6D,EAAI1O,KAAK6oE,qBAAqB,GAAGj6D,EAAI5O,KAAK6oE,qBAAqB,GAAGn8C,EAAI1sB,KAAK6oE,qBAAqB,GAC5J7oE,MAAKwvD,mBAAmBr1D,KAAO6F,KAAK6oE,qBAAqB,GAAGn6D,EAAI1O,KAAK6oE,qBAAqB,GAAGj6D,EAAI5O,KAAK6oE,qBAAqB,GAAGn8C,EAAI1sB,KAAK6oE,qBAAqB,GAC5J7oE,MAAKwvD,mBAAmBr1D,KAAO6F,KAAK6oE,qBAAqB,GAAGn6D,EAAI1O,KAAK6oE,qBAAqB,GAAGj6D,EAAI5O,KAAK6oE,qBAAqB,IAAIn8C,EAAI1sB,KAAK6oE,qBAAqB,GAC7J7oE,MAAKwvD,mBAAmBr1D,KAAO,MACzB,KAAK6F,KAAKupE,sBAAuB,CACvCvpE,KAAKwvD,mBAAmBr1D,KAAOytE,EAAOl5D,CACtC1O,MAAKwvD,mBAAmBr1D,KAAOytE,EAAOh5D,CACtC5O,MAAKwvD,mBAAmBr1D,KAAOytE,EAAOl7C,CACtC1sB,MAAKwvD,mBAAmBr1D,KAAO,MACzB,CACN6F,KAAK4xD,qBAAqB56C,KAAO4wD,EAAOl5D,CACxC1O,MAAK4xD,qBAAqB56C,KAAO4wD,EAAOh5D,CACxC5O,MAAK4xD,qBAAqB56C,KAAO4wD,EAAOl7C,CACxC1sB,MAAK4xD,qBAAqB56C,KAAO,EAGlChX,KAAK4xD,qBAAqB56C,KAAO2wD,EAAWmB,UAC5C9oE,MAAK4xD,qBAAqB56C,KAAO2wD,EAAWoB,UAC5C/oE,MAAK4xD,qBAAqB56C,KAAO2wD,EAAWqB,UAE5C,IAAIlmC,GAAgB6kC,EAAW6B,QAC/BxpE,MAAK4xD,qBAAqB56C,KAAO8rB,EAAOA,CAExC9iC,MAAK4xD,qBAAqB56C,KAAO2wD,EAAWsB,WAC5CjpE,MAAK4xD,qBAAqB56C,KAAO2wD,EAAWuB,WAC5ClpE,MAAK4xD,qBAAqB56C,KAAO2wD,EAAWwB,WAC5CnpE,MAAK4xD,qBAAqB56C,KAAO2wD,EAAW8B,eAE5C,MAAM7lD,GAAS5jB,KAAK2lE,eAAgB,CAEnC5rE,EAAIoL,CACJgjE,GAAON,IAMV,GAAI7nE,KAAK2lE,eAAiB/hD,EAAO,CAChC7pB,EAAIid,GAAK4M,EAAQ5jB,KAAK2lE,gBAAgB,EAEtC,MAAO3uD,EAAIjd,IAAKid,EACfhX,KAAK4xD,qBAAqB56C,GAAK,GAO1BuuD,GAAAhlE,UAAAknE,aAAR,WAEC,GAAIiC,EACJ,IAAIC,GAAgC3pE,KAAK0lE,cAAc6B,YAAYoC,WACnE,IAAI/iD,GAAwB5mB,KAAK0lE,cAAc6B,YAAYqC,iBAC3D,IAAIzkE,GAAawkE,EAAYrvE,OAAS0F,KAAK0lE,cAAcmE,iBACzD,IAAIC,GAAkB9pE,KAAKknE,oBAC3B,IAAI6C,GAAkB/pE,KAAKgnE,qBAE3B,MAAM8C,GAAWC,GAChB,MAED,IAAI5kE,EAAMnF,KAAK6lE,eACd1gE,EAAMnF,KAAK6lE,cAEZ,KAAK,GAAI9rE,GAAW,EAAGA,EAAIoL,IAAOpL,EAAG,CACpC2vE,EAAQC,EAAa3pE,KAAK0lE,cAAcmE,kBAAoB9vE,EAE5D,IAAI+vE,EACa9pE,KAAKqI,OAAO8B,eAAeu/D,EAAMM,YAAa5/D,SAASpK,KAAKiqE,yBAAyBlwE,GAAI2vE,EAAMQ,eAAeC,OAE/H,IAAIJ,EACa/pE,KAAKqI,OAAO8B,eAAeu/D,EAAMU,aAAchgE,SAASpK,KAAKqqE,0BAA0BtwE,GAAI2vE,EAAMQ,eAAeC,QAGlI,IAAKpwE,EAAI,EAAGA,EAAIoL,IAAOpL,EACtBiG,KAAK4xD,qBAAqB5xD,KAAKsqE,kBAAoBvwE,GAAK6sB,EAAQ5mB,KAAK0lE,cAAcmE,kBAAoB9vE,GAE1G,OAAAwrE,IAjVoCF,EAAAhoE,WAAvBjD,GAAAmrE,eAAcA,IlH+sXxBgF,wBAAwB,2CAA2CC,wCAAwC,2DAA2DC,4CAA4CrrE,UAAUsrE,2CAA2CtrE,YAAYurE,8CAA8C,SAASrxE,EAAQkB,EAAOJ,GAC5V,YmH/uXA,IAAA47B,GAAA18B,EAAqC,mCAUrC,IAAAsxE,GAAA,WAqBC,QAAAA,GAAYv0C,EAAgBw0C,EAAiBC,GAAA,GAAAA,QAAA,GAAyB,CAAzBA,EAAA,KAE5C9qE,KAAK+qE,SAAW10C,CAChBr2B,MAAKgrE,UAAYH,CACjB7qE,MAAKirE,YAAcH,CACnB9qE,MAAKkrE,cAAc70C,EAASw0C,GAMtBD,EAAArqE,UAAA4qE,qBAAP,WAEC,IAAK,GAAIpxE,GAAW,EAAGA,EAAIiG,KAAKgrE,YAAajxE,EAAG,CAC/C,IAAKiG,KAAKorE,eAAerxE,GAAI,CAC5B,GAAIiG,KAAKirE,YACRjrE,KAAKqrE,iBAAiBtxE,IAEvB,OAAOiG,MAAKsrE,iBAAiBvxE,IAI/B,KAAM,IAAIE,OAAM,sBAMV2wE,GAAArqE,UAAAgrE,wBAAP,WAEC,IAAK,GAAIxxE,GAAW,EAAGA,EAAIiG,KAAKgrE,YAAajxE,EAAG,CAC/C,GAAIiG,KAAKqrE,iBAAiBtxE,GAAK,EAC9B,QAED,KAAK,GAAIgd,GAAW,EAAGA,EAAI,IAAKA,EAAG,CAClC,GAAI/W,KAAKwrE,iBAAiBz0D,GAAGhd,IAAM,EAAG,CACrC,GAAIiG,KAAKirE,YACRjrE,KAAKwrE,iBAAiBz0D,GAAGhd,IAE1B,OAAOiG,MAAKyrE,oBAAoB10D,GAAGhd,KAKtC,KAAM,IAAIE,OAAM,sBASV2wE,GAAArqE,UAAAmrE,SAAP,SAAgBC,EAAgCC,GAE/C,GAAID,EAASE,YAAc,EAC1B7rE,KAAKwrE,iBAAiBG,EAASE,YAAYF,EAAS7pD,QAAU8pD,MAE9D5rE,MAAKqrE,iBAAiBM,EAAS7pD,QAAU8pD,EAOpChB,GAAArqE,UAAAurE,YAAP,SAAmBH,GAElB,GAAIA,EAASE,YAAc,EAAG,CAC7B,KAAM7rE,KAAKwrE,iBAAiBG,EAASE,YAAYF,EAAS7pD,OAAS,EAClE,KAAM,IAAI7nB,OAAM,uCACX,CACN,KAAM+F,KAAKqrE,iBAAiBM,EAAS7pD,OAAS,EAC7C,KAAM,IAAI7nB,OAAM,oCAOZ2wE,GAAArqE,UAAAyC,QAAP,WAEChD,KAAKsrE,iBAAmB,IACxBtrE,MAAKyrE,oBAAsB,IAC3BzrE,MAAKwrE,iBAAmB,IACxBxrE,MAAKqrE,iBAAmB,KAMlBT,GAAArqE,UAAAwrE,kBAAP,WAEC,IAAK,GAAIhyE,GAAW,EAAGA,EAAIiG,KAAKgrE,YAAajxE,EAC5C,GAAIiG,KAAKorE,eAAerxE,GACvB,MAAO,KAET,OAAO,OAMA6wE,GAAArqE,UAAA2qE,cAAR,SAAsB70C,EAAgBw0C,GAErC,GAAImB,GAAcpB,EAAaqB,UAAU51C,EAASw0C,EAElD7qE,MAAKsrE,iBAAmBV,EAAasB,SAASF,EAC9ChsE,MAAKyrE,oBAAsBb,EAAauB,cAAcH,EAEtDhsE,MAAKqrE,iBAAmBrrE,KAAKosE,WAAWhrE,MAAcypE,GAAW,EAEjE7qE,MAAKwrE,iBAAmB,GAAIpqE,OAAqB,EACjDpB,MAAKwrE,iBAAiB,GAAKxrE,KAAKosE,WAAW,GAAIhrE,OAAcypE,GAAW,EACxE7qE,MAAKwrE,iBAAiB,GAAKxrE,KAAKosE,WAAW,GAAIhrE,OAAcypE,GAAW,EACxE7qE,MAAKwrE,iBAAiB,GAAKxrE,KAAKosE,WAAW,GAAIhrE,OAAcypE,GAAW,EACxE7qE,MAAKwrE,iBAAiB,GAAKxrE,KAAKosE,WAAW,GAAIhrE,OAAcypE,GAAW,GAG1DD,GAAAqB,UAAf,SAAyB51C,EAAgBw0C,GAExC,GAAImB,GAAc31C,EAAUw0C,CAE5B,IAAID,EAAasB,SAASF,IAAS5sE,UAClC,MAAO4sE,EAER,IAAIK,GAA+C,GAAIjrE,OAA6BypE,EACpFD,GAAasB,SAASF,GAAQK,CAE9B,IAAIC,gBAMJ1B,GAAauB,cAAcH,GAAQM,CAEnC,KAAK,GAAIvyE,GAAW,EAAGA,EAAI8wE,IAAY9wE,EAAG,CAEzCsyE,EAAgBtyE,GAAK,GAAIi8B,GAAAI,sBAAsBC,EAASt8B,EAExD,KAAK,GAAIgd,GAAW,EAAGA,EAAI,IAAKA,EAC/Bu1D,EAAmBv1D,GAAGhd,GAAK,GAAIi8B,GAAAI,sBAAsBC,EAASt8B,EAAGgd,GAGnE,MAAOi1D,GAOApB,GAAArqE,UAAA6qE,eAAR,SAAuBtpD,GAEtB,GAAI9hB,KAAKqrE,iBAAiBvpD,GAAS,EAClC,MAAO,KAER,KAAK,GAAI/nB,GAAW,EAAGA,EAAI,IAAKA,EAC/B,GAAIiG,KAAKwrE,iBAAiBzxE,GAAG+nB,GAAS,EACrC,MAAO,KAET,OAAO,OAIA8oD,GAAArqE,UAAA6rE,WAAR,SAAmBtyE,EAAcyyE,GAEhC,GAAIpyE,GAAWL,EAAEQ,MAEjB,KAAK,GAAImkE,GAAW,EAAGA,EAAItkE,EAAGskE,IAC7B3kE,EAAE2kE,GAAK8N,CAER,OAAOzyE,GA9LO8wE,GAAAsB,SAAkB,GAAI1rE,OACtBoqE,GAAAuB,cAAuB,GAAI3rE,OA+L3C,OAAAoqE,KAlMaxwE,GAAAwwE,aAAYA,InH+3XtB4B,mCAAmC,wDAAwDC,4CAA4C,SAASnzE,EAAQkB,EAAOJ,GAClK,YoH14XA,IAAAsyE,GAAApzE,EAA4B,kCAK5B,IAAAqzE,GAAArzE,EAA+B,uCAO/B,IAAAuO,GAAAvO,EAAqC,+CACrC,IAAAyS,GAAAzS,EAAqC,+CACrC,IAAAszE,GAAAtzE,EAAqC,gDAYrC,IAAAuzE,GAAAvzE,EAA+B,oCAc/B,IAAA+D,GAAA,WAqTC,QAAAA,GAAYgS,EAAgCI,EAAY3O,GAjThDd,KAAAsM,iBAA0B,GAAI9L,OAO9BR,MAAA8sE,mBAA4BjlE,EAAA2C,qBAAqBC,GACjDzK,MAAA+sE,iBAA0BllE,EAAA2C,qBAAqBE,IAE/C1K,MAAAgtE,gBAA0B,IAC1BhtE,MAAAitE,qBAA8B,EAC9BjtE,MAAAktE,uBAAgC,EAejCltE,MAAAmtE,aAAuB,KAEvBntE,MAAAotE,aAAuB,KAEvBptE,MAAAqtE,WAAqB,KAOrBrtE,MAAAstE,iBAA0BvhE,EAAAmG,qBAAqBC,IAM/CnS,MAAAutE,WAAqB,IAmBpBvtE,MAAAwtE,gBAAyBZ,EAAAa,sBAAsBC,IAEhD1tE,MAAA6oE,qBAAoC,GAAI1gD,cAAa,GAqDrDnoB,MAAA8nE,SAAkB,GAClB9nE,MAAA+nE,SAAkB,GAClB/nE,MAAAgoE,SAAkB,GA6ElBhoE,MAAAupE,sBAAgC,KAKhCvpE,MAAA2tE,qBAA+B,KA6F/B3tE,MAAA4tE,aAA6B,GAAIxsE,MAYvCpB,MAAK6tE,eAAiBx+D,CACtBrP,MAAKi0D,MAAQxkD,CACbzP,MAAKqI,OAASvH,CAEdd,MAAKgB,QAAUhB,KAAKqI,OAAOrH,QApS5BR,OAAA+B,eAAWlF,EAAAkD,UAAA,epH04XJiC,IoH14XP,WAEC,GAAIxC,KAAKgtE,gBACRhtE,KAAK8tE,gBAEN,OAAO9tE,MAAK+tE,cpH04XNnrE,WAAY,KACZC,aAAc,MoHn3XrBrC,QAAA+B,eAAWlF,EAAAkD,UAAA,iBpHs3XJiC,IoHt3XP,WAEC,MAAOxC,MAAKguE,gBpHu3XNvrE,IoHp3XP,SAAyBC,GAExB,GAAI1C,KAAKguE,gBAAkBtrE,EAC1B,MAED1C,MAAKguE,eAAiBtrE,CAEtB1C,MAAK44D,qBpHm3XCh2D,WAAY,KACZC,aAAc,MoH12XrBrC,QAAA+B,eAAWlF,EAAAkD,UAAA,0BpH62XJiC,IoH72XP,WAEC,GAAIxC,KAAKgtE,gBACRhtE,KAAK8tE,gBAEN,OAAO9tE,MAAKiuE,yBpH62XNrrE,WAAY,KACZC,aAAc,MoH32XrBrC,QAAA+B,eAAWlF,EAAAkD,UAAA,4BpH82XJiC,IoH92XP,WAEC,GAAIxC,KAAKgtE,gBACRhtE,KAAK8tE,gBAEN,OAAO9tE,MAAKkuE,2BpH82XNtrE,WAAY,KACZC,aAAc,MoHz2XrBrC,QAAA+B,eAAWlF,EAAAkD,UAAA,kBpH+2XJiC,IoH/2XP,WAEC,GAAIxC,KAAKgtE,gBACRhtE,KAAK8tE,gBAEN,OAAO9tE,MAAKyM,iBpH+2XN7J,WAAY,KACZC,aAAc,MoH12XrBrC,QAAA+B,eAAWlF,EAAAkD,UAAA,mBpHg3XJiC,IoHh3XP,WAEC,GAAIxC,KAAKgtE,gBACRhtE,KAAK8tE,gBAEN,OAAO9tE,MAAK0M,kBpHg3XN9J,WAAY,KACZC,aAAc,MoHhqXdxF,GAAAkD,UAAA4J,eAAP,SAAsBk2D,GAErB,MAAQrgE,MAAKsM,iBAAiB+zD,EAAQtxD,MAAQ/O,KAAKsM,iBAAiB+zD,EAAQtxD,IAAM,GAAsB1R,GAAW2R,sBAAsBqxD,EAAQpxD,WAAYoxD,EAASrgE,OAOhK3C,GAAAkD,UAAA2O,iBAAP,SAAwBmxD,GAEvBrgE,KAAKsM,iBAAiB+zD,EAAQtxD,IAAM,KAOvB1R,GAAAV,oBAAd,SAAkCwxE,EAA8B5+D,GAE/DlS,EAAW2R,sBAAsBO,EAAWN,WAAak/D,EAGnD9wE,GAAAkD,UAAA0jE,cAAP,SAAqB5D,EAAqBv+C,GAAA,GAAAA,QAAA,GAAgB,CAAhBA,EAAA,EAEzC,MAAO9hB,MAAKi0D,MAAMgQ,cAAc5D,EAASv+C,GAGnCzkB,GAAAkD,UAAA0tD,sBAAP,WAECjuD,KAAKi0D,MAAMhG,sBAAsBjuD,MAW3B3C,GAAAkD,UAAA8mE,eAAP,SAAsBh4D,EAAgCI,GAErD,MAAO,IAAIo9D,GAAAuB,aAAa/+D,EAAeI,EAAMzP,MAMvC3C,GAAAkD,UAAAqc,MAAP,WAEC5c,KAAK4wD,uBAAyB,CAC9B5wD,MAAKszB,mBAAqB,CAC1BtzB,MAAKkuD,kBAAoB,CACzBluD,MAAKquE,oBAAsB,CAC3BruE,MAAKsuE,eAAiB,CACtBtuE,MAAKuuE,wBAA0B,CAC/BvuE,MAAKquD,sBAAwB,CAC7BruD,MAAKozB,oBAAsB,CAC3BpzB,MAAKwmE,eAAiB,KACtBxmE,MAAKupE,sBAAwB,KAC7BvpE,MAAK2tE,qBAAuB,KAC5B3tE,MAAKqhB,sBAAwB,KAC7BrhB,MAAK4oE,iBAAmB,KACxB5oE,MAAKqzB,eAAiB,KACtBrzB,MAAKwuE,sBAAwB,MAGvBnxE,GAAAkD,UAAAkuE,qBAAP,WAECzuE,KAAK0uE,kBAAoB,CACzB1uE,MAAK2uE,qBAAuB,CAC5B3uE,MAAKmyD,aAAe,CACpBnyD,MAAKoyD,SAAW,CAChBpyD,MAAK4uE,eAAiB,CACtB5uE,MAAK6uE,qBAAuB,CAC5B7uE,MAAKqyD,kBAAoB,CACzBryD,MAAKiyD,aAAe,CACpBjyD,MAAKsvD,kBAAoB,CACzBtvD,MAAKkyD,cAAgB,CACrBlyD,MAAKgvD,kBAAoB,CACzBhvD,MAAK8uE,wBAA0B,CAC/B9uE,MAAKwmB,iBAAmB,CACxBxmB,MAAK0mB,kBAAoB,CACzB1mB,MAAK4tE,aAAatzE,OAAS,EAMrB+C,GAAAkD,UAAAwuE,iBAAP,SAAwB31D,GAGvBpZ,KAAKiuE,wBAA0B70D,EAAc8M,sBAC7ClmB,MAAKkuE,0BAA4B90D,EAAc41D,wBAC/ChvE,MAAKyM,gBAAkB2M,EAAczJ,cACrC3P,MAAK0M,iBAAmB0M,EAAcxJ,eAEtC5P,MAAKwvD,mBAAqB,GAAIrnC,cAAa/O,EAAc8M,uBAAuB,EAChFlmB,MAAK4xD,qBAAuB,GAAIzpC,cAAa/O,EAAc41D,yBAAyB,EAGpF,IAAIhvE,KAAK0uE,kBAAoB,EAAG,CAC/B1uE,KAAK4xD,qBAAqB5xD,KAAK0uE,kBAAoB,EACnD1uE,MAAK4xD,qBAAqB5xD,KAAK0uE,iBAAmB,GAAK,CACvD1uE,MAAK4xD,qBAAqB5xD,KAAK0uE,iBAAmB,GAAK,EAAE,GACzD1uE,MAAK4xD,qBAAqB5xD,KAAK0uE,iBAAmB,GAAK,EAIxD,GAAI1uE,KAAK4uE,eAAiB,EAAG,CAC5B5uE,KAAKwvD,mBAAmBxvD,KAAK4uE,eAAiB,CAC9C5uE,MAAKwvD,mBAAmBxvD,KAAK4uE,cAAgB,GAAK,CAClD5uE,MAAKwvD,mBAAmBxvD,KAAK4uE,cAAgB,GAAK,CAClD5uE,MAAKwvD,mBAAmBxvD,KAAK4uE,cAAgB,GAAK,CAClD5uE,MAAKwvD,mBAAmBxvD,KAAK4uE,cAAgB,GAAK,CAClD5uE,MAAKwvD,mBAAmBxvD,KAAK4uE,cAAgB,GAAK,CAClD5uE,MAAKwvD,mBAAmBxvD,KAAK4uE,cAAgB,GAAK,CAClD5uE,MAAKwvD,mBAAmBxvD,KAAK4uE,cAAgB,GAAK,EAInD,GAAI5uE,KAAK6uE,qBAAuB,EAAG,CAClC7uE,KAAK4xD,qBAAqB5xD,KAAK6uE,qBAAuB,CACtD7uE,MAAK4xD,qBAAqB5xD,KAAK6uE,oBAAsB,GAAK,CAC1D7uE,MAAK4xD,qBAAqB5xD,KAAK6uE,oBAAsB,GAAK,CAC1D7uE,MAAK4xD,qBAAqB5xD,KAAK6uE,oBAAsB,GAAK,CAC1D7uE,MAAK4xD,qBAAqB5xD,KAAK6uE,oBAAsB,GAAK,CAC1D7uE,MAAK4xD,qBAAqB5xD,KAAK6uE,oBAAsB,GAAK,CAC1D7uE,MAAK4xD,qBAAqB5xD,KAAK6uE,oBAAsB,GAAK,CAC1D7uE,MAAK4xD,qBAAqB5xD,KAAK6uE,oBAAsB,GAAK,EAE3D,GAAI7uE,KAAK2uE,qBAAuB,EAC/B3uE,KAAKwvD,mBAAmBxvD,KAAK2uE,oBAAsB,GAAK,CAGzD3uE,MAAKi0D,MAAMgb,mBAAmBjvE,KAG9B,IAAIA,KAAKkvE,cACRlvE,KAAKi0D,MAAMx5C,aAAaf,aAAa1Z,MAahC3C,GAAAkD,UAAA4uE,aAAP,SAAoBzsE,GAEnB,OAAQA,GACP,IAAKgqE,GAAA0C,UAAUC,OACdrvE,KAAK8sE,mBAAqBjlE,EAAA2C,qBAAqBC,GAC/CzK,MAAK+sE,iBAAmBllE,EAAA2C,qBAAqBE,IAC7C1K,MAAKmtE,aAAe,KACpB,MAED,KAAKT,GAAA0C,UAAUE,MACdtvE,KAAK8sE,mBAAqBjlE,EAAA2C,qBAAqB+kE,YAC/CvvE,MAAK+sE,iBAAmBllE,EAAA2C,qBAAqBglE,sBAC7CxvE,MAAKmtE,aAAe,IACpB,MAED,KAAKT,GAAA0C,UAAUK,SACdzvE,KAAK8sE,mBAAqBjlE,EAAA2C,qBAAqBE,IAC/C1K,MAAK+sE,iBAAmBllE,EAAA2C,qBAAqBklE,YAC7C1vE,MAAKmtE,aAAe,IACpB,MAED,KAAKT,GAAA0C,UAAUO,IACd3vE,KAAK8sE,mBAAqBjlE,EAAA2C,qBAAqB+kE,YAC/CvvE,MAAK+sE,iBAAmBllE,EAAA2C,qBAAqBC,GAC7CzK,MAAKmtE,aAAe,IACpB,MAED,KAAKT,GAAA0C,UAAUQ,MACd5vE,KAAK8sE,mBAAqBjlE,EAAA2C,qBAAqBE,IAC/C1K,MAAK+sE,iBAAmBllE,EAAA2C,qBAAqB+kE,YAC7CvvE,MAAKmtE,aAAe,IACpB,MAED,SACC,KAAM,IAAIR,GAAAkD,cAAc,4BAQpBxyE,GAAAkD,UAAAiQ,WAAP,SAAkB5M,GAEjB5D,KAAKqI,OAAOnC,QAAQ4pE,WAAW9vE,KAAK+vE,aAAcnD,EAAAa,sBAAsBuC,KAAOhwE,KAAKwtE,gBAAiB5pE,EAAO6rD,WAAWwgB,iBAEvH,KAAKjwE,KAAK4oE,kBAAoB5oE,KAAK2uE,qBAAuB,EAAG,CAC5D,GAAI56B,GAAenwC,EAAOsN,aAE1BlR,MAAKwvD,mBAAmBxvD,KAAK2uE,qBAAuB56B,EAAIrlC,CACxD1O,MAAKwvD,mBAAmBxvD,KAAK2uE,oBAAsB,GAAK56B,EAAInlC,CAC5D5O,MAAKwvD,mBAAmBxvD,KAAK2uE,oBAAsB,GAAK56B,EAAIrnB,EAG7D1sB,KAAKqI,OAAOnC,QAAQ+L,aAAejS,KAAKutE,aAAevtE,KAAKmtE,aAAgBntE,KAAKstE,iBAEjF,IAAIttE,KAAKmtE,aACRntE,KAAKqI,OAAOnC,QAAQqE,gBAAgBvK,KAAK8sE,mBAAoB9sE,KAAK+sE;AAEnE/sE,KAAKyjE,eAAiB,KAMhBpmE,GAAAkD,UAAAmQ,aAAP,WAGC1Q,KAAKqI,OAAOnC,QAAQ+L,aAAa,KAAMlG,EAAAmG,qBAAqBC,KAE5DnS,MAAKyjE,eAAiB,KAWhBpmE,GAAAkD,UAAAqsD,gBAAP,SAAuB99C,EAA8BlL,EAAe+N,GAEnE,GAAI7C,EAAWA,WAAWisB,SACTjsB,EAAWA,WAAWisB,SAAUhf,eAAe/b,KAAM8O,EAAY9O,KAAKqI,OAAQzE,EAE/F,IAAI5D,KAAKs8C,gBAAiB,CACzB,GAAIqnB,GAAkB70D,EAAW60D,QAEjC,IAAIA,EAAU,CAEb,GAAIuM,GAAuBvM,EAASuM,OACpClwE,MAAKwvD,mBAAmBxvD,KAAK4uE,eAAiBsB,EAAQ,EACtDlwE,MAAKwvD,mBAAmBxvD,KAAK4uE,cAAgB,GAAKsB,EAAQ,EAC1DlwE,MAAKwvD,mBAAmBxvD,KAAK4uE,cAAgB,GAAKsB,EAAQ,EAC1DlwE,MAAKwvD,mBAAmBxvD,KAAK4uE,cAAgB,GAAKsB,EAAQ,EAC1DlwE,MAAKwvD,mBAAmBxvD,KAAK4uE,cAAgB,GAAKsB,EAAQ,EAC1DlwE,MAAKwvD,mBAAmBxvD,KAAK4uE,cAAgB,GAAKsB,EAAQ,OACpD,CACNlwE,KAAKwvD,mBAAmBxvD,KAAK4uE,eAAiB,CAC9C5uE,MAAKwvD,mBAAmBxvD,KAAK4uE,cAAgB,GAAK,CAClD5uE,MAAKwvD,mBAAmBxvD,KAAK4uE,cAAgB,GAAK,CAClD5uE,MAAKwvD,mBAAmBxvD,KAAK4uE,cAAgB,GAAK,CAClD5uE,MAAKwvD,mBAAmBxvD,KAAK4uE,cAAgB,GAAK,CAClD5uE,MAAKwvD,mBAAmBxvD,KAAK4uE,cAAgB,GAAK,GAGpD,GAAI5uE,KAAKmwE,mBAAoB,CAE5B,GAAIC,GAAgCthE,EAAWqF,aAAak8D,0BAE5D,IAAID,EAAgB,CAEnBpwE,KAAK4xD,qBAAqB5xD,KAAK6uE,qBAAuBuB,EAAeF,QAAQ,EAC7ElwE,MAAK4xD,qBAAqB5xD,KAAK6uE,oBAAsB,GAAKuB,EAAeF,QAAQ,EACjFlwE,MAAK4xD,qBAAqB5xD,KAAK6uE,oBAAsB,GAAKuB,EAAeF,QAAQ,EACjFlwE,MAAK4xD,qBAAqB5xD,KAAK6uE,oBAAsB,GAAKuB,EAAeF,QAAQ,EACjFlwE,MAAK4xD,qBAAqB5xD,KAAK6uE,oBAAsB,GAAKuB,EAAeF,QAAQ,GAAG,GACpFlwE,MAAK4xD,qBAAqB5xD,KAAK6uE,oBAAsB,GAAKuB,EAAeF,QAAQ,GAAG,GACpFlwE,MAAK4xD,qBAAqB5xD,KAAK6uE,oBAAsB,GAAKuB,EAAeF,QAAQ,GAAG,GACpFlwE,MAAK4xD,qBAAqB5xD,KAAK6uE,oBAAsB,GAAKuB,EAAeF,QAAQ,GAAG,QAC9E,CACNlwE,KAAK4xD,qBAAqB5xD,KAAK6uE,qBAAuB,CACtD7uE,MAAK4xD,qBAAqB5xD,KAAK6uE,oBAAsB,GAAK,CAC1D7uE,MAAK4xD,qBAAqB5xD,KAAK6uE,oBAAsB,GAAK,CAC1D7uE,MAAK4xD,qBAAqB5xD,KAAK6uE,oBAAsB,GAAK,CAC1D7uE,MAAK4xD,qBAAqB5xD,KAAK6uE,oBAAsB,GAAK,CAC1D7uE,MAAK4xD,qBAAqB5xD,KAAK6uE,oBAAsB,GAAK,CAC1D7uE,MAAK4xD,qBAAqB5xD,KAAK6uE,oBAAsB,GAAK,CAC1D7uE,MAAK4xD,qBAAqB5xD,KAAK6uE,oBAAsB,GAAK,GAG5D,GAAI7uE,KAAK8uE,wBAA0B,EAClChgE,EAAWqF,aAAawgC,sBAAsBib,cAAc5vD,KAAKwvD,mBAAoBxvD,KAAK8uE,uBAAwB,MAEnH,IAAI9uE,KAAK4oE,kBAAoB5oE,KAAK2uE,qBAAuB,EAAG,CAE3D7/D,EAAWqF,aAAawgC,sBAAsBib,cAAc5vD,KAAK6oE,qBACjE,IAAI90B,GAAenwC,EAAOsN,aAC1B,IAAIxC,GAAWqlC,EAAIrlC,CACnB,IAAIE,GAAWmlC,EAAInlC,CACnB,IAAI8d,GAAWqnB,EAAIrnB,CAEnB1sB,MAAKwvD,mBAAmBxvD,KAAK2uE,qBAAuB3uE,KAAK6oE,qBAAqB,GAAGn6D,EAAI1O,KAAK6oE,qBAAqB,GAAGj6D,EAAI5O,KAAK6oE,qBAAqB,GAAGn8C,EAAI1sB,KAAK6oE,qBAAqB,GACjL7oE,MAAKwvD,mBAAmBxvD,KAAK2uE,oBAAsB,GAAK3uE,KAAK6oE,qBAAqB,GAAGn6D,EAAI1O,KAAK6oE,qBAAqB,GAAGj6D,EAAI5O,KAAK6oE,qBAAqB,GAAGn8C,EAAI1sB,KAAK6oE,qBAAqB,GACrL7oE,MAAKwvD,mBAAmBxvD,KAAK2uE,oBAAsB,GAAK3uE,KAAK6oE,qBAAqB,GAAGn6D,EAAI1O,KAAK6oE,qBAAqB,GAAGj6D,EAAI5O,KAAK6oE,qBAAqB,IAAIn8C,EAAI1sB,KAAK6oE,qBAAqB,KAIjLxrE,GAAAkD,UAAAq4D,kBAAP,WAEC54D,KAAKgtE,gBAAkB,KAGjB3vE,GAAAkD,UAAAyC,QAAP,WAEChD,KAAK+tE,aAAa/qE,SAClBhD,MAAK+tE,aAAe,KAGb1wE,GAAAkD,UAAAutE,eAAR,WAEC9tE,KAAKgtE,gBAAkB,KAEvB,IAAIsD,GAAwBtwE,KAAKqnE,eAAernE,KAAK6tE,eAAgB7tE,KAAKi0D,MAC1Eqc,GAASC,SAETvwE,MAAKwwE,mBAAmBF,EAASG,gBAAiBH,EAAS92D,aAAc82D,EAASI,kBAGlF1wE,MAAK+uE,iBAAiBuB,EAASG,gBAE/B,IAAI5gE,GAA0B7P,KAAKqI,OAAOsoE,eAAe3wE,KAAKitE,qBAAuBqD,EAASM,WAAYN,EAASO,aAAe7wE,KAAKktE,uBAAyBoD,EAASQ,0BAGzK,IAAI9wE,KAAK+tE,cAAgBl+D,EAAa,CACrC,GAAI7P,KAAK+tE,aACR/tE,KAAK+tE,aAAa/qE,SAEnBhD,MAAK+tE,aAAel+D,CAEpBA,GAAYq7C,UAIN7tD,GAAAkD,UAAAiwE,mBAAR,SAA2Bp3D,EAAmCI,EAAoCH,GAGjGrZ,KAAKitE,qBAAuB,EAC5BjtE,MAAKktE,uBAAyB,EAG9B,IAAIltE,KAAKkvE,cAAe,CAEvB,GAAIz0D,GAAmDza,KAAKi0D,MAAMx5C,YAElEza,MAAKitE,sBAAwBxyD,EAAatB,kBAAkBnZ,KAAMoZ,EAAeC,EAEjF,IAAIrZ,KAAKsuE,eAAiB,IAAMtuE,KAAKs8C,gBACpCt8C,KAAKitE,sBAAwBxyD,EAAahB,cAAczZ,KAAMoZ,EAAeC,EAE9E,IAAIrZ,KAAKqhB,sBACRrhB,KAAKktE,wBAA0BzyD,EAAalB,oBAAoBvZ,KAAMoZ,EAAeI,OAChF,CAGN,GAAIrU,GAAakU,EAAgB8G,qBAAqB7lB,MACtD,KAAK,GAAIP,GAAW,EAAGA,EAAIoL,IAAOpL,EACjCiG,KAAKitE,sBAAwB,OAAS5zD,EAAgB+G,yBAAyBrmB,GAAK,KAAOsf,EAAgB8G,qBAAqBpmB,GAAK,IAEtI,IAAIiG,KAAKsuE,eAAiB,IAAMtuE,KAAKs8C,gBACpCt8C,KAAKitE,sBAAwB,OAAS5zD,EAAgBmI,SAAW,IAAMnI,EAAgBuI,SAAW,MAK9FvkB,GAAAkD,UAAAshB,eAAP,SAAsBC,EAAcpT,EAAcE,EAAc8d,EAAcC,GAA1C,GAAAje,QAAA,GAAY,CAAZA,EAAA,EAAc,GAAAE,QAAA,GAAY,CAAZA,EAAA,EAAc,GAAA8d,QAAA,GAAY,CAAZA,EAAA,EAAc,GAAAC,QAAA,GAAY,CAAZA,EAAA,EAE7E7K,GAAS,CACT9hB,MAAKwvD,mBAAmB1tC,KAAWpT,CACnC1O,MAAKwvD,mBAAmB1tC,KAAWlT,CACnC5O,MAAKwvD,mBAAmB1tC,KAAW4K,CACnC1sB,MAAKwvD,mBAAmB1tC,GAAS6K,EAG3BtvB,GAAAkD,UAAAkpB,wBAAP,SAA+B3H,EAAc1R,GAE5C0R,GAAS,CACT,KAAK,GAAI/nB,GAAmB,EAAGA,EAAIqW,EAAK9V,OAAQP,IAC/CiG,KAAKwvD,mBAAmB1tC,KAAW1R,EAAKrW,GAGnCsD,GAAAkD,UAAAs0C,yBAAP,SAAgC/yB,EAAc6tC,GAE7C7tC,GAAS,CACT,IAAIouD,GAAuBvgB,EAAOugB,OAClClwE,MAAKwvD,mBAAmB1tC,KAAWouD,EAAQ,EAC3ClwE,MAAKwvD,mBAAmB1tC,KAAWouD,EAAQ,EAC3ClwE,MAAKwvD,mBAAmB1tC,KAAWouD,EAAQ,EAC3ClwE,MAAKwvD,mBAAmB1tC,KAAWouD,EAAQ,GAC3ClwE,MAAKwvD,mBAAmB1tC,KAAWouD,EAAQ,EAC3ClwE,MAAKwvD,mBAAmB1tC,KAAWouD,EAAQ,EAC3ClwE,MAAKwvD,mBAAmB1tC,KAAWouD,EAAQ,EAC3ClwE,MAAKwvD,mBAAmB1tC,KAAWouD,EAAQ,GAC3ClwE,MAAKwvD,mBAAmB1tC,KAAWouD,EAAQ,EAC3ClwE,MAAKwvD,mBAAmB1tC,KAAWouD,EAAQ,EAC3ClwE,MAAKwvD,mBAAmB1tC,KAAWouD,EAAQ,GAC3ClwE,MAAKwvD,mBAAmB1tC,KAAWouD,EAAQ,GAC3ClwE,MAAKwvD,mBAAmB1tC,KAAWouD,EAAQ,EAC3ClwE,MAAKwvD,mBAAmB1tC,KAAWouD,EAAQ,EAC3ClwE,MAAKwvD,mBAAmB1tC,KAAWouD,EAAQ,GAC3ClwE,MAAKwvD,mBAAmB1tC,GAASouD,EAAQ,IAInC7yE,GAAAkD,UAAAwwE,iBAAP,SAAwBjvD,EAAcpT,EAAcE,EAAc8d,EAAcC,GAA1C,GAAAje,QAAA,GAAY,CAAZA,EAAA,EAAc,GAAAE,QAAA,GAAY,CAAZA,EAAA,EAAc,GAAA8d,QAAA,GAAY,CAAZA,EAAA,EAAc,GAAAC,QAAA,GAAY,CAAZA,EAAA,EAE/E7K,GAAS,CACT9hB,MAAK4xD,qBAAqB9vC,KAAWpT,CACrC1O,MAAK4xD,qBAAqB9vC,KAAWlT,CACrC5O,MAAK4xD,qBAAqB9vC,KAAW4K,CACrC1sB,MAAK4xD,qBAAqB9vC,GAAS6K,EA1tBtBtvB,GAAA2R,sBAA+B,GAAIxO,OA4tBlD,OAAAnD,KA9tBajD,GAAAiD,WAAUA,IpH8zYpB2zE,oCAAoC,uDAAuDC,uCAAuC7xE,UAAU8xE,kCAAkC9xE,UAAU+L,+CAA+C/L,UAAU4Y,+CAA+C5Y,UAAU+xE,gDAAgD/xE,YAAYgyE,qDAAqD,SAAS93E,EAAQkB,EAAOJ,GACtb,YqHv2YA,IAAAi3E,GAAA/3E,EAA+B,0BAC/B,IAAA08B,GAAA18B,EAAqC,mCAKrC,IAAA+iE,GAAA,WAwBC,QAAAA,GAAYr7D,GAZJhB,KAAAiuE,wBAAiC,CACjCjuE,MAAAkuE,0BAAmC,CACnCluE,MAAAyM,gBAAyB,CACzBzM,MAAA0M,iBAA0B,CAC1B1M,MAAAsxE,iBAA0B,CAUjCtxE,MAAKuxE,SAAWvwE,CAEhBhB,MAAK4c,QAMCy/C,EAAA97D,UAAAqc,MAAP,WAEC5c,KAAKwxE,mBAAqB,GAAIH,GAAAzG,aAAa,KAAM,EAAG,MACpD5qE,MAAKyxE,iBAAmB,GAAIJ,GAAAzG,aAAa,KAAM,EAAG,MAClD5qE,MAAK0xE,cAAgB,GAAIL,GAAAzG,aAAa,IAAK,EAC3C5qE,MAAK2xE,cAAgB,GAAIN,GAAAzG,aAAa,KAAM,EAC5C5qE,MAAK4xE,uBAAyB,GAAIP,GAAAzG,aAAa,KAAM,EACrD5qE,MAAK6xE,wBAA0B,GAAIR,GAAAzG,aAAa,KAAM,GACtD5qE,MAAK8xE,sBAAwB,GAAIT,GAAAzG,aAAa,KAAM,IACpD5qE,MAAK+xE,wBAA0B,GAAI/7C,GAAAI,sBAAsB,MAAO,EAChEp2B,MAAKgyE,sBAAwB,GAAIh8C,GAAAI,sBAAsB,MAAO,EAC9Dp2B,MAAKiuE,wBAA0B,CAC/BjuE,MAAKyM,gBAAkB,CACvBzM,MAAK0M,iBAAmB,CACxB1M,MAAKsxE,iBAAmB,CACxBtxE,MAAKkuE,0BAA4B,EAM3B7R,GAAA97D,UAAAyC,QAAP,WAEChD,KAAKwxE,mBAAmBxuE,SACxBhD,MAAKyxE,iBAAiBzuE,SACtBhD,MAAK0xE,cAAc1uE,SACnBhD,MAAK6xE,wBAAwB7uE,SAC7BhD,MAAK4xE,uBAAuB5uE,SAE5BhD,MAAKwxE,mBAAqB,IAC1BxxE,MAAKyxE,iBAAmB,IACxBzxE,MAAK0xE,cAAgB,IACrB1xE,MAAK6xE,wBAA0B,IAC/B7xE,MAAK4xE,uBAAyB,IAC9B5xE,MAAK+xE,wBAA0B,IAC/B/xE,MAAKgyE,sBAAwB,KASvB3V,GAAA97D,UAAAo3D,sBAAP,SAA6BgU,EAAgCC,GAE5D5rE,KAAKwxE,mBAAmB9F,SAASC,EAAUC,GAOrCvP,GAAA97D,UAAA0xE,wBAAP,SAA+BtG,GAE9B3rE,KAAKwxE,mBAAmB1F,YAAYH,GAS9BtP,GAAA97D,UAAAugB,oBAAP,SAA2B6qD,EAAgCC,GAE1D5rE,KAAKyxE,iBAAiB/F,SAASC,EAAUC,GAOnCvP,GAAA97D,UAAAu6B,sBAAP,SAA6B6wC,GAE5B3rE,KAAKyxE,iBAAiB3F,YAAYH,GAO5BtP,GAAA97D,UAAAm3D,0BAAP,WAEC,MAAO13D,MAAKwxE,mBAAmBrG,uBAMzB9O,GAAA97D,UAAA2xE,0BAAP,WAEC,MAAOlyE,MAAKwxE,mBAAmBjG,0BAMzBlP,GAAA97D,UAAAygB,eAAP,aAEGhhB,KAAKsxE,gBACP,OAAOtxE,MAAK0xE,cAAcvG,uBAMpB9O,GAAA97D,UAAAw3D,wBAAP,aAEG/3D,KAAKkuE,yBACP,OAAOluE,MAAK6xE,wBAAwB1G,uBAM9B9O,GAAA97D,UAAAymB,sBAAP,aAEGhnB,KAAKiuE,uBACP,OAAOjuE,MAAK8xE,sBAAsB3G,uBAM5B9O,GAAA97D,UAAAsgB,wBAAP,WAEC,MAAO7gB,MAAKyxE,iBAAiBtG,uBAMvB9O,GAAA97D,UAAA2+B,wBAAP,WAEC,MAAOl/B,MAAKyxE,iBAAiBlG,0BAMvBlP,GAAA97D,UAAAgmB,uBAAP,aAEGvmB,KAAKyM,eACP,OAAOzM,MAAK4xE,uBAAuBzG,uBAM7B9O,GAAA97D,UAAAs3D,kBAAP,aAEG73D,KAAK0M,gBACP,OAAO1M,MAAK2xE,cAAcxG,uBAM3B3qE,QAAA+B,eAAW85D,EAAA97D,UAAA,0BrHyzYJiC,IqHzzYP,WAEC,MAAOxC,MAAK+xE,yBrH0zYNnvE,WAAY,KACZC,aAAc,MqHrzYrBrC,QAAA+B,eAAW85D,EAAA97D,UAAA,0BrH2zYJiC,IqH3zYP,WAEC,MAAOxC,MAAKiuE,yBrH4zYNrrE,WAAY,KACZC,aAAc,MqHvzYrBrC,QAAA+B,eAAW85D,EAAA97D,UAAA,4BrH6zYJiC,IqH7zYP,WAEC,MAAOxC,MAAKkuE,2BrH8zYNtrE,WAAY,KACZC,aAAc,MqHzzYrBrC,QAAA+B,eAAW85D,EAAA97D,UAAA,kBrH+zYJiC,IqH/zYP,WAEC,MAAOxC,MAAKyM,iBrHg0YN7J,WAAY,KACZC,aAAc,MqH3zYrBrC,QAAA+B,eAAW85D,EAAA97D,UAAA,mBrHi0YJiC,IqHj0YP,WAEC,MAAOxC,MAAK0M,kBrHk0YN9J,WAAY,KACZC,aAAc,MqH7zYrBrC,QAAA+B,eAAW85D,EAAA97D,UAAA,mBrHm0YJiC,IqHn0YP,WAEC,MAAOxC,MAAKsxE,kBrHo0YN1uE,WAAY,KACZC,aAAc,MqHn0YtB,OAAAw5D,KA7OajiE,GAAAiiE,oBAAmBA,IrHqjZ7B8V,0BAA0B,6CAA6C3F,mCAAmC,wDAAwD4F,oDAAoD,SAAS94E,EAAQkB,EAAOJ,GACjP,YsHvjZA,IAAAi4E,GAAA,WA0CC,QAAAA,KAPOryE,KAAA7E,SAAwC,GAAIiG,MAE5CpB,MAAAmgB,qBAAoD,GAAI/e,MACxDpB,MAAAogB,yBAAwD,GAAIhf,OAQpE,MAAAixE,KA9Caj4E,GAAAi4E,mBAAkBA,OtHokZzBC,uDAAuD,SAASh5E,EAAQkB,EAAOJ,GACrF,YuHvkZA,IAAAg8B,GAAA,WAiBC,QAAAA,GAAYC,EAAgBvU,EAAcywD,GAAA,GAAAA,QAAA,GAAqB,CAArBA,GAAoB,EAE7DvyE,KAAK6rE,WAAa0G,CAClBvyE,MAAK+qE,SAAW10C,CAChBr2B,MAAKwyE,OAAS1wD,CAEd9hB,MAAKyyE,OAASzyE,KAAK+qE,QAEnB,IAAI/qE,KAAKwyE,QAAU,EAClBxyE,KAAKyyE,QAAUzyE,KAAKwyE,MAErB,IAAID,GAAa,EAChBvyE,KAAKyyE,QAAU,IAAMr8C,EAAsBs8C,WAAWH,GAMjDn8C,EAAA71B,UAAAmhB,SAAP,WAEC,MAAO1hB,MAAKyyE,OAMbjyE,QAAA+B,eAAW6zB,EAAA71B,UAAA,WvH6jZJiC,IuH7jZP,WAEC,MAAOxC,MAAK+qE,UvH8jZNnoE,WAAY,KACZC,aAAc,MuHzjZrBrC,QAAA+B,eAAW6zB,EAAA71B,UAAA,SvH+jZJiC,IuH/jZP,WAEC,MAAOxC,MAAKwyE,QvHgkZN5vE,WAAY,KACZC,aAAc,MuHhnZNuzB,GAAAs8C,YAAc,IAAK,IAAK,IAAK,IAiD7C,OAAAt8C,KAvDah8B,GAAAg8B,sBAAqBA,OvH4nZ5Bu8C,wDAAwD,SAASr5E,EAAQkB,EAAOJ,GACtF,YwH/nZA,IAAA6hE,GAAA3iE,EAAoC,oCACpC,IAAAs5E,GAAAt5E,EAAmC,mCAWnC,IAAA80E,GAAA,WAgBC,QAAAA,GAAY/+D,EAAgCI,EAAYC,GARjD1P,KAAA6yE,aAAsB,EACtB7yE,MAAA8yE,eAAwB,EACxB9yE,MAAA+yE,4BAAqC,EAQ3C/yE,MAAKgzE,gBAAkB3jE,CACvBrP,MAAKizE,aAAexjE,CACpBzP,MAAKkzE,SAAWxjE,CAEhB1P,MAAK0wE,kBAAoB,GAAIkC,GAAAP,kBAE7BryE,MAAKywE,gBAAkB,GAAIxU,GAAAI,oBAAoB3sD,EAAO1O,SAMhDotE,EAAA7tE,UAAAgwE,QAAP,WAECvwE,KAAKkzE,SAASt2D,OAEd5c,MAAKkzE,SAASjlB,uBAEdjuD,MAAKyuE,sBAELzuE,MAAKmzE,sBAGLnzE,MAAK6yE,cAAgB7yE,KAAKizE,aAAa9kB,gBAAgBnuD,KAAKkzE,SAAUlzE,KAAKywE,gBAAiBzwE,KAAK0wE,kBACjG1wE,MAAK+yE,6BAA+B/yE,KAAKizE,aAAa5jB,kBAAkBrvD,KAAKkzE,SAAUlzE,KAAKywE,gBAAiBzwE,KAAK0wE,kBAElH,IAAI1wE,KAAKkzE,SAAS/C,mBACjBnwE,KAAKozE,gCAELpzE,MAAKkzE,SAASrE,qBAAuB,CAGtC7uE,MAAK+yE,6BAA+B,OAAS/yE,KAAKywE,gBAAgB4C,uBAAyB,KAAOrzE,KAAK0wE,kBAAkBl3D,aAAe,IACxIxZ,MAAKywE,gBAAgBwB,wBAAwBjyE,KAAK0wE,kBAAkBl3D,cAK7D40D,GAAA7tE,UAAA6yE,0BAAR,WAIC,GAAIE,GAA4BtzE,KAAKywE,gBAAgB1Y,yBACrD,IAAIwb,GAA4BvzE,KAAKywE,gBAAgB1Y,yBACrD/3D,MAAKkzE,SAASrE,oBAAsByE,EAAIxxD,MAAM,CAC9C9hB,MAAK+yE,6BAA+B,OAAS/yE,KAAK0wE,kBAAkBl3D,aAAe,KAAOxZ,KAAK0wE,kBAAkBl3D,aAAe,KAAO85D,EAAM,IAC7ItzE,MAAK+yE,6BAA+B,OAAS/yE,KAAK0wE,kBAAkBl3D,aAAe,KAAOxZ,KAAK0wE,kBAAkBl3D,aAAe,KAAO+5D,EAAM,KAKvInF,GAAA7tE,UAAA4yE,qBAAP,WAECnzE,KAAK0wE,kBAAkBl3D,aAAexZ,KAAKywE,gBAAgB/Y,2BAC3D13D,MAAKywE,gBAAgB9Y,sBAAsB33D,KAAK0wE,kBAAkBl3D,aAAc,EAGhF,IAAIxZ,KAAKkzE,SAAS7kB,sBAAwB,EACzCruD,KAAKwzE,2BAGA,IAAIxzE,KAAKkzE,SAASvF,qBACd3tE,KAAKyzE,qBAEf,IAAIzzE,KAAKkzE,SAAS7F,WACjBrtE,KAAK0zE,mBAGN,IAAI1zE,KAAKkzE,SAAS5E,eAAiB,EAClCtuE,KAAK2zE,eAEN,IAAI3zE,KAAKkzE,SAAS3E,wBAA0B,EAC3CvuE,KAAK4zE,wBAEN,IAAI5zE,KAAKkzE,SAAS5/C,mBAAqB,EACtCtzB,KAAK6zE,mBAEN,IAAI7zE,KAAKkzE,SAAS7E,oBAAsB,EACvCruE,KAAK8zE,oBAGN9zE,MAAK6yE,cAAgB7yE,KAAKgzE,gBAAgB7kB,gBAAgBnuD,KAAKkzE,SAAUlzE,KAAKywE,gBAAiBzwE,KAAK0wE,kBACpG1wE,MAAK8yE,gBAAkB9yE,KAAKgzE,gBAAgB3jB,kBAAkBrvD,KAAKkzE,SAAUlzE,KAAKywE,gBAAiBzwE,KAAK0wE,kBAGxG1wE,MAAK6yE,cAAgB7yE,KAAKizE,aAAac,2BAA2B/zE,KAAKkzE,SAAUlzE,KAAKywE,gBAAiBzwE,KAAK0wE,kBAC5G1wE,MAAK8yE,gBAAkB9yE,KAAKizE,aAAae,6BAA6Bh0E,KAAKkzE,SAAUlzE,KAAKywE,gBAAiBzwE,KAAK0wE,mBAGzGtC,GAAA7tE,UAAAizE,0BAAR,WAECxzE,KAAKywE,gBAAgB3vD,oBAAoB9gB,KAAK0wE,kBAAkBpiB,qBAAuBtuD,KAAKywE,gBAAgB5vD,0BAA2B7gB,KAAKkzE,SAAS7kB,sBAErJ,IAAIU,GAAuC/uD,KAAKywE,gBAAgBzpD,uBAChEhnB,MAAKywE,gBAAgBzpD,uBACrBhnB,MAAKywE,gBAAgBzpD,uBACrBhnB,MAAKywE,gBAAgBzpD,uBAErBhnB,MAAKkzE,SAASlkB,iBAAmBD,EAAejtC,MAAM,CAEtD9hB,MAAK6yE,cAAgB,OAAS7yE,KAAK0wE,kBAAkBpiB,qBAAuB,KAAOtuD,KAAK0wE,kBAAkBniB,iBAAmB,KAAOQ,EAAiB,IAErJ,IAAI/uD,KAAKkzE,SAAS3J,sBAAuB,CACxCvpE,KAAK0wE,kBAAkBuD,sBAAwBj0E,KAAKywE,gBAAgBzvD,gBACpEhhB,MAAK6yE,cAAgB,OAAS7yE,KAAK0wE,kBAAkBuD,sBAAwB,KAAOj0E,KAAK0wE,kBAAkBpiB,qBAAuB,MAIzH8f,GAAA7tE,UAAAkzE,oBAAR,WAEIzzE,KAAK0wE,kBAAkBwD,gBAAkBl0E,KAAKywE,gBAAgBzvD,gBAC9DhhB,MAAK6yE,cAAgB,OAAS7yE,KAAK0wE,kBAAkBwD,gBAAkB,KAAOl0E,KAAK0wE,kBAAkBniB,iBAAmB,KAIvH6f,GAAA7tE,UAAAmzE,kBAAR,WAEC1zE,KAAK0wE,kBAAkByD,YAAcn0E,KAAKywE,gBAAgBlqD,wBAC1DvmB,MAAKkzE,SAAS/gB,YAAcnyD,KAAK0wE,kBAAkByD,YAAYryD,KAE/D9hB,MAAK0wE,kBAAkB0D,cAAgBp0E,KAAKywE,gBAAgBzvD,gBAC5DhhB,MAAK6yE,cAAgB,OAAS7yE,KAAK0wE,kBAAkB0D,cAAgB,KAAOp0E,KAAK0wE,kBAAkByD,YAAc,IAEjH,IAAIt5C,GAA6B76B,KAAKywE,gBAAgByB,2BAEtDlyE,MAAK8yE,gBAAkB,OAASj4C,EAAO,KAAO76B,KAAK0wE,kBAAkB0D,cAAgB,OAASp0E,KAAK0wE,kBAAkB0D,cAAgB,OAChI,OAASv5C,EAAO,KAAOA,EAAO,KAAO76B,KAAK0wE,kBAAkB0D,cAAgB,OAC5E,OAASv5C,EAAO,KAAOA,EAAO,KAAO76B,KAAK0wE,kBAAkB0D,cAAgB,OAC5E,OAASv5C,EAAO,KAMduzC,GAAA7tE,UAAAozE,cAAR,WAEC,GAAIU,GAAuCr0E,KAAKywE,gBAAgBlqD,wBAChEvmB,MAAKkzE,SAAS9gB,QAAUiiB,EAAevyD,KAEvC,IAAIwyD,GAAgCt0E,KAAK0wE,kBAAkB6D,UAAYv0E,KAAKywE,gBAAgBzvD,gBAE5F,IAAIhhB,KAAKkzE,SAAS52B,gBAAiB,CAGlC,GAAIk4B,GAAqCx0E,KAAKywE,gBAAgBzpD,uBAC9D,IAAIytD,GAAqCz0E,KAAKywE,gBAAgBzpD,uBAC9DhnB,MAAKkzE,SAAStE,cAAgB4F,EAAa1yD,MAAM,CAEjD9hB,MAAK6yE,cAAgB,OAASyB,EAAU,OAASD,EAAiB,KAAOG,EAAe,KAClF,OAASF,EAAU,OAASD,EAAiB,KAAOI,EAAe,KACnE,OAASH,EAAU,QAAUD,EAAiB,aAC9C,CACNr0E,KAAKkzE,SAAStE,eAAiB,CAC/B5uE,MAAK0wE,kBAAkBlvD,SAAW8yD,CAClCt0E,MAAK0wE,kBAAkB9uD,SAAWyyD,GAO5BjG,GAAA7tE,UAAAqzE,uBAAR,WAEC,GAAIS,GAAuCr0E,KAAKywE,gBAAgBlqD,wBAChEvmB,MAAKkzE,SAAS7gB,iBAAmBgiB,EAAevyD,KAChD9hB,MAAK0wE,kBAAkBgE,mBAAqB10E,KAAKywE,gBAAgBzvD,gBACjEhhB,MAAK6yE,cAAgB,OAAS7yE,KAAK0wE,kBAAkBgE,mBAAqB,KAAOL,EAAiB,KAM5FjG,GAAA7tE,UAAAuzE,mBAAP,WAEC,GAAIa,GAA0C30E,KAAKywE,gBAAgBzpD,uBACnEhnB,MAAK0wE,kBAAkBkE,eAAiB50E,KAAKywE,gBAAgBzvD,gBAC7DhhB,MAAK0wE,kBAAkBmE,gBAAkB70E,KAAKywE,gBAAgB/Y,2BAC9D13D,MAAKywE,gBAAgB9Y,sBAAsB33D,KAAK0wE,kBAAkBmE,gBAAiB70E,KAAKkzE,SAAS7E,oBAEjGruE,MAAKkzE,SAASvE,oBAAsBgG,EAAkB7yD,MAAM,CAE5D,IAAI9hB,KAAKkzE,SAAStK,iBAAkB,CACnC,GAAI/tC,GAA6B76B,KAAKywE,gBAAgB5vD,yBACtD7gB,MAAK6yE,cAAgB,OAASh4C,EAAO,KAAO85C,EAAoB,KAAO30E,KAAK0wE,kBAAkBniB,iBAAmB,KAChH,OAASvuD,KAAK0wE,kBAAkBkE,eAAiB,SAAW/5C,EAAO,KAAO76B,KAAK0wE,kBAAkBoE,gBAAkB,KACnH,OAAS90E,KAAK0wE,kBAAkBkE,eAAiB,OAAS50E,KAAK0wE,kBAAkBniB,iBAAmB,WAC/F,CACNvuD,KAAK6yE,cAAgB,OAAS7yE,KAAK0wE,kBAAkBkE,eAAiB,KAAOD,EAAoB,KAAO30E,KAAK0wE,kBAAkBpiB,qBAAuB,IACtJtuD,MAAKywE,gBAAgB31C,sBAAsB96B,KAAK0wE,kBAAkBpiB,sBAInEtuD,KAAK8yE,gBAAkB,OAAS9yE,KAAK0wE,kBAAkBmE,gBAAkB,SAAW70E,KAAK0wE,kBAAkBkE,eAAiB,KAC3H,OAAS50E,KAAK0wE,kBAAkBmE,gBAAkB,SAAW70E,KAAK0wE,kBAAkBkE,eAAiB,OAMhGxG,GAAA7tE,UAAAszE,kBAAP,WAEC7zE,KAAK0wE,kBAAkBqE,eAAiB/0E,KAAKywE,gBAAgB/Y,2BAC7D13D,MAAKywE,gBAAgB9Y,sBAAsB33D,KAAK0wE,kBAAkBqE,eAAgB/0E,KAAKkzE,SAAS5/C,mBAGhG,IAAItzB,KAAKkzE,SAAS7/C,iBAAmBrzB,KAAKkzE,SAAS1E,sBAAuB,CACzExuE,KAAK6yE,cAAgB7yE,KAAKizE,aAAa+B,sBAAsBh1E,KAAKkzE,SAAUlzE,KAAKywE,gBAAiBzwE,KAAK0wE,kBACvG1wE,MAAK8yE,gBAAkB9yE,KAAKizE,aAAagC,wBAAwBj1E,KAAKkzE,SAAUlzE,KAAKywE,gBAAiBzwE,KAAK0wE,kBAE3G,QAGD,GAAIwE,EAEJ,KAAKl1E,KAAKkzE,SAAS7/C,iBAAmBrzB,KAAKkzE,SAAStK,iBAAkB,CACrEsM,EAAe,GAAI9zE,OAA6B,EAChD8zE,GAAa,GAAKl1E,KAAKywE,gBAAgBzpD,uBACvCkuD,GAAa,GAAKl1E,KAAKywE,gBAAgBzpD,uBACvCkuD,GAAa,GAAKl1E,KAAKywE,gBAAgBzpD,uBAEvChnB,MAAKywE,gBAAgBzpD,uBAErBhnB,MAAKkzE,SAASpE,uBAAyBoG,EAAa,GAAGpzD,MAAM,CAE7D9hB,MAAK0wE,kBAAkByE,cAAgBn1E,KAAKywE,gBAAgBzvD,iBAG7D,GAAIhhB,KAAKkzE,SAAS7/C,eAAgB,CACjC,GAAIrzB,KAAKkzE,SAAStK,iBAAkB,CAEnC5oE,KAAK6yE,cAAgB,OAAS7yE,KAAK0wE,kBAAkB0E,eAAiB,SAAWp1E,KAAK0wE,kBAAkB0E,eAAiB,KACxH,OAASp1E,KAAK0wE,kBAAkBoE,gBAAkB,SAAW90E,KAAK0wE,kBAAkBoE,gBAAkB,KACtG,OAAS90E,KAAK0wE,kBAAkB2E,UAAY,SAAWr1E,KAAK0wE,kBAAkB0E,eAAiB,KAAOp1E,KAAK0wE,kBAAkBoE,gBAAkB,IAEhJ90E,MAAK8yE,gBAAkB9yE,KAAKizE,aAAagC,wBAAwBj1E,KAAKkzE,SAAUlzE,KAAKywE,gBAAiBzwE,KAAK0wE,uBACrG,CAEN1wE,KAAK0wE,kBAAkB4E,eAAiBt1E,KAAKywE,gBAAgBzvD,gBAC7DhhB,MAAK0wE,kBAAkB6E,iBAAmBv1E,KAAKywE,gBAAgBzvD,gBAC/D,IAAI6Z,GAA6B76B,KAAKywE,gBAAgB5vD,yBAEtD7gB,MAAK6yE,cAAgB,OAASh4C,EAAO,SAAW76B,KAAK0wE,kBAAkB0E,eAAiB,KAAOF,EAAa,GAAK,KAChH,OAASl1E,KAAK0wE,kBAAkB0E,eAAiB,SAAWv6C,EAAO,KACnE,OAASA,EAAO,SAAW76B,KAAK0wE,kBAAkBoE,gBAAkB,KAAOI,EAAa,GAAK,KAC7F,OAASl1E,KAAK0wE,kBAAkBoE,gBAAkB,SAAWj6C,EAAO,KACpE,OAAS76B,KAAK0wE,kBAAkB4E,eAAiB,OAASt1E,KAAK0wE,kBAAkBoE,gBAAkB,SACnG,OAAS90E,KAAK0wE,kBAAkB4E,eAAiB,OAASt1E,KAAK0wE,kBAAkB0E,eAAiB,SAClG,OAASp1E,KAAK0wE,kBAAkB4E,eAAiB,OAASt1E,KAAK0wE,kBAAkB8E,YAAc,SAC/F,OAASx1E,KAAK0wE,kBAAkB6E,iBAAmB,OAASv1E,KAAK0wE,kBAAkBoE,gBAAkB,SACrG,OAAS90E,KAAK0wE,kBAAkB6E,iBAAmB,OAASv1E,KAAK0wE,kBAAkB0E,eAAiB,SACpG,OAASp1E,KAAK0wE,kBAAkB6E,iBAAmB,OAASv1E,KAAK0wE,kBAAkB8E,YAAc,SACjG,OAASx1E,KAAK0wE,kBAAkByE,cAAgB,OAASn1E,KAAK0wE,kBAAkBoE,gBAAkB,SAClG,OAAS90E,KAAK0wE,kBAAkByE,cAAgB,OAASn1E,KAAK0wE,kBAAkB0E,eAAiB,SACjG,OAASp1E,KAAK0wE,kBAAkByE,cAAgB,OAASn1E,KAAK0wE,kBAAkB8E,YAAc,SAC9F,OAAS36C,EAAO,SAAW76B,KAAK0wE,kBAAkB0E,eAAiB,KAAOp1E,KAAK0wE,kBAAkBoE,gBAAkB,KACnH,OAAS90E,KAAK0wE,kBAAkB4E,eAAiB,OAASz6C,EAAO,WACjE,OAAS76B,KAAK0wE,kBAAkB6E,iBAAmB,OAAS16C,EAAO,SACnE,OAAS76B,KAAK0wE,kBAAkByE,cAAgB,OAASt6C,EAAO,UAEjE76B,MAAKywE,gBAAgB31C,sBAAsB96B,KAAK0wE,kBAAkBoE,gBAGlE,IAAIt7E,EACJ,IAAI0G,EACJ,IAAIzG,EAEJD,GAAIwG,KAAKywE,gBAAgB/Y,2BACzB13D,MAAKywE,gBAAgB9Y,sBAAsBn+D,EAAG,EAC9C0G,GAAIF,KAAKywE,gBAAgB/Y,2BACzB13D,MAAKywE,gBAAgB9Y,sBAAsBz3D,EAAG,EAC9CzG,GAAIuG,KAAKywE,gBAAgB/Y,2BACzB13D,MAAKywE,gBAAgB9Y,sBAAsBl+D,EAAG,EAE9CuG,MAAK8yE,gBAAkB,OAASt5E,EAAI,SAAWwG,KAAK0wE,kBAAkB4E,eAAiB,KACtF,OAAS97E,EAAI,OAASwG,KAAK0wE,kBAAkB4E,eAAiB,QAC9D,OAASp1E,EAAI,SAAWF,KAAK0wE,kBAAkB6E,iBAAmB,KAClE,OAAS97E,EAAI,SAAWuG,KAAK0wE,kBAAkByE,cAAgB,IAGhEn1E,MAAK8yE,gBAAkB9yE,KAAKizE,aAAagC,wBAAwBj1E,KAAKkzE,SAAUlzE,KAAKywE,gBAAiBzwE,KAAK0wE,mBAC1G,OAAS1wE,KAAK0wE,kBAAkBqE,eAAiB,SAAW/0E,KAAK0wE,kBAAkBqE,eAAiB,KAAOv7E,EAAI,KAC/G,OAASwG,KAAK0wE,kBAAkBqE,eAAiB,OAAS/0E,KAAK0wE,kBAAkByE,cAAgB,MAElGn1E,MAAKywE,gBAAgBwB,wBAAwB/xE,EAC7CF,MAAKywE,gBAAgBwB,wBAAwBz4E,EAC7CwG,MAAKywE,gBAAgBwB,wBAAwBx4E,QAExC,CAENuG,KAAK6yE,cAAgB,OAAS7yE,KAAK0wE,kBAAkByE,cAAgB,SAAWn1E,KAAK0wE,kBAAkB0E,eAAiB,KAAOF,EAAa,GAAK,KAChJ,OAASl1E,KAAK0wE,kBAAkByE,cAAgB,OAASn1E,KAAK0wE,kBAAkB0E,eAAiB,MAElGp1E,MAAK8yE,gBAAkB,OAAS9yE,KAAK0wE,kBAAkBqE,eAAiB,SAAW/0E,KAAK0wE,kBAAkByE,cAAgB,KACzH,OAASn1E,KAAK0wE,kBAAkBqE,eAAiB,OAAS/0E,KAAK0wE,kBAAkByE,cAAgB,MAElG,IAAIn1E,KAAKkzE,SAAS9/C,oBAAsB,EAAG,CAC1CpzB,KAAK0wE,kBAAkB4E,eAAiBt1E,KAAKywE,gBAAgBzvD,gBAE7DhhB,MAAK6yE,cAAgB,OAAS7yE,KAAK0wE,kBAAkB4E,eAAiB,SAAWt1E,KAAK0wE,kBAAkBoE,gBAAkB,KAAOI,EAAa,GAAK,KAClJ,OAASl1E,KAAK0wE,kBAAkB4E,eAAiB,OAASt1E,KAAK0wE,kBAAkBoE,gBAAkB,QAItG,IAAK90E,KAAKkzE,SAAStK,iBAClB5oE,KAAKywE,gBAAgB31C,sBAAsB96B,KAAK0wE,kBAAkB0E,gBAM7DhH,GAAA7tE,UAAAkuE,qBAAP,WAECzuE,KAAKkzE,SAASzE,sBAEdzuE,MAAK0wE,kBAAkBniB,iBAAmBvuD,KAAKywE,gBAAgB5vD,yBAC/D7gB,MAAKywE,gBAAgB3vD,oBAAoB9gB,KAAK0wE,kBAAkBniB,iBAAkB,EAElFvuD,MAAK0wE,kBAAkBvwD,qBAAqBva,KAAK5F,KAAKywE,gBAAgBlqD,yBACtEvmB,MAAK0wE,kBAAkBtwD,yBAAyBxa,KAAK5F,KAAK0wE,kBAAkBniB,iBAC5EvuD,MAAK6yE,aAAe,EACpB7yE,MAAK8yE,eAAiB,EACtB9yE,MAAK+yE,4BAA8B,EAInC,IAAI/yE,KAAKkzE,SAAS1M,gBAAkBxmE,KAAKkzE,SAAS5/C,mBAAqB,EAAG,CACzEtzB,KAAK0wE,kBAAkB+E,QAAUz1E,KAAKywE,gBAAgB1Y,yBACtD/3D,MAAKkzE,SAASxE,iBAAmB1uE,KAAK0wE,kBAAkB+E,QAAQ3zD,MAAM,EAKvE,GAAI9hB,KAAKkzE,SAAS9/C,oBAAsB,GAAKpzB,KAAKkzE,SAAS7/C,eAAgB,CAC1ErzB,KAAK0wE,kBAAkBgF,aAAe11E,KAAKywE,gBAAgBlqD,wBAC3DvmB,MAAKkzE,SAAShhB,aAAelyD,KAAK0wE,kBAAkBgF,aAAa5zD,KAEjE9hB,MAAK0wE,kBAAkBoE,gBAAkB90E,KAAKywE,gBAAgB5vD,yBAC9D7gB,MAAKywE,gBAAgB3vD,oBAAoB9gB,KAAK0wE,kBAAkBoE,gBAAiB,EAEjF,IAAI90E,KAAKkzE,SAAStK,iBAAkB,CACnC5oE,KAAK0wE,kBAAkB2E,UAAYr1E,KAAKywE,gBAAgB5vD,yBACxD7gB,MAAKywE,gBAAgB3vD,oBAAoB9gB,KAAK0wE,kBAAkB2E,UAAW,GAG5Er1E,KAAK0wE,kBAAkBvwD,qBAAqBva,KAAK5F,KAAK0wE,kBAAkBgF,aACxE11E,MAAK0wE,kBAAkBtwD,yBAAyBxa,KAAK5F,KAAK0wE,kBAAkBoE,iBAG7E,GAAI90E,KAAKkzE,SAAS5/C,mBAAqB,EAAG,CACzCtzB,KAAK0wE,kBAAkB8E,YAAcx1E,KAAKywE,gBAAgBlqD,wBAC1DvmB,MAAKkzE,SAASjhB,YAAcjyD,KAAK0wE,kBAAkB8E,YAAY1zD,KAE/D9hB,MAAK0wE,kBAAkB0E,eAAiBp1E,KAAKywE,gBAAgB5vD,yBAC7D7gB,MAAKywE,gBAAgB3vD,oBAAoB9gB,KAAK0wE,kBAAkB0E,eAAgB,EAEhFp1E,MAAK0wE,kBAAkBvwD,qBAAqBva,KAAK5F,KAAK0wE,kBAAkB8E,YACxEx1E,MAAK0wE,kBAAkBtwD,yBAAyBxa,KAAK5F,KAAK0wE,kBAAkB0E,gBAG7E,GAAIp1E,KAAKkzE,SAAShlB,kBAAoB,EAAG,CACxCluD,KAAK0wE,kBAAkBiF,WAAa31E,KAAKywE,gBAAgBlqD,wBACzDvmB,MAAKkzE,SAAS5jB,iBAAmBtvD,KAAK0wE,kBAAkBiF,WAAW7zD,KAEnE9hB,MAAK0wE,kBAAkBkF,aAAe51E,KAAKywE,gBAAgBzvD,gBAC3DhhB,MAAK6yE,cAAgB,OAAS7yE,KAAK0wE,kBAAkBkF,aAAe,KAAO51E,KAAK0wE,kBAAkBiF,WAAa,MAO1GvH,GAAA7tE,UAAAyC,QAAP,WAEChD,KAAKywE,gBAAgBztE,SACrBhD,MAAKywE,gBAAkB,IACvBzwE,MAAK0wE,kBAAoB,KAM1BlwE,QAAA+B,eAAW6rE,EAAA7tE,UAAA,cxHiiZJiC,IwHjiZP,WAEC,MAAOxC,MAAK6yE,cxHkiZNjwE,WAAY,KACZC,aAAc,MwH7hZrBrC,QAAA+B,eAAW6rE,EAAA7tE,UAAA,gBxHmiZJiC,IwHniZP,WAEC,MAAOxC,MAAK8yE,gBxHoiZNlwE,WAAY,KACZC,aAAc,MwH/hZrBrC,QAAA+B,eAAW6rE,EAAA7tE,UAAA,6BxHqiZJiC,IwHriZP,WAEC,MAAOxC,MAAK+yE,6BxHsiZNnwE,WAAY,KACZC,aAAc,MwHjiZrBrC,QAAA+B,eAAW6rE,EAAA7tE,UAAA,gBxHuiZJiC,IwHviZP,WAEC,MAAOxC,MAAK0wE,kBAAkBl3D,cxHwiZxB5W,WAAY,KACZC,aAAc,MwHviZtB,OAAAurE,KA3aah0E,GAAAg0E,aAAYA,IxHu9ZtBzR,oCAAoC,oDAAoDkZ,mCAAmC,qDAAqDC,4DAA4D,SAASx8E,EAAQkB,EAAOJ,GACvQ,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IyHx+ZnF,IAAAwsE,GAAAvzE,EAA+B,uCAW/B,IAAAguE,GAAA,SAAAzmE,GAAsCd,EAAAunE,EAAAzmE,EAerC,SAAAymE,GAAYj4D,EAAgCm2D,EAA4BuQ,GAEvEl1E,EAAAxG,KAAA2F,KAAMqP,EAAem2D,EAAcuQ,EAEnC/1E,MAAKg2E,sBAAwBD,CAC7B/1E,MAAK0lE,cAAgBF,EAMf8B,EAAA/mE,UAAA4yE,qBAAP,WAECtyE,EAAAN,UAAM4yE,qBAAoB94E,KAAA2F,KAG1B,IAAIA,KAAKg2E,sBAAsB7O,YAC9BnnE,KAAKi2E,oBAEN,IAAIj2E,KAAKg2E,sBAAsBtP,WAAY,CAC1C1mE,KAAKk2E,oBACLl2E,MAAKm2E,mBAGN,GAAIn2E,KAAKg2E,sBAAsBnP,WAC9B7mE,KAAKo2E,uBAENp2E,MAAK6yE,cAAgB7yE,KAAK0lE,cAAc2Q,4BAA4Br2E,KAAKg2E,sBAAuBh2E,KAAKywE,gBAAiBzwE,KAAK0wE,kBAC3H1wE,MAAK8yE,gBAAkB9yE,KAAK0lE,cAAc4Q,8BAA8Bt2E,KAAKg2E,sBAAuBh2E,KAAKywE,gBAAiBzwE,KAAK0wE,mBAMzHpJ,GAAA/mE,UAAA01E,mBAAP,WAEC,GAAIj2E,KAAKg2E,sBAAsB1iD,mBAAqB,EAAG,CACtDtzB,KAAK0wE,kBAAkB6F,aAAev2E,KAAK0wE,kBAAkBqE,mBACvD,CACN/0E,KAAK0wE,kBAAkB6F,aAAev2E,KAAKywE,gBAAgB/Y,2BAC3D13D,MAAKywE,gBAAgB9Y,sBAAsB33D,KAAK0wE,kBAAkB6F,aAAc,IAO1EjP,GAAA/mE,UAAA21E,mBAAR,WAGC,GAAIn8E,GAAUoL,CAEd,IAAInF,KAAKw2E,yBAA0B,CAClCrxE,EAAMnF,KAAKw2E,yBAAyBl8E,MACpC,KAAKP,EAAI,EAAGA,EAAIoL,IAAOpL,EAAG,CACzBiG,KAAKw2E,yBAAyBz8E,GAAKiG,KAAKywE,gBAAgBzpD,uBAExD,IAAIhnB,KAAKg2E,sBAAsB/N,2BAA6B,EAC3DjoE,KAAKg2E,sBAAsB/N,yBAA2BjoE,KAAKw2E,yBAAyBz8E,GAAG+nB,MAAM,GAIhG,GAAI9hB,KAAKy2E,2BAA4B,CACpCtxE,EAAMnF,KAAKy2E,2BAA2Bn8E,MACtC,KAAKP,EAAI,EAAGA,EAAIoL,IAAOpL,EAAG,CACzBiG,KAAKy2E,2BAA2B18E,GAAKiG,KAAKywE,gBAAgBzpD,uBAE1D,IAAIhnB,KAAKg2E,sBAAsB/N,2BAA6B,EAC3DjoE,KAAKg2E,sBAAsB/N,yBAA2BjoE,KAAKy2E,2BAA2B18E,GAAG+nB,MAAM,GAIlG3c,EAAMnF,KAAK02E,2BAA2Bp8E,MACtC,KAAKP,EAAI,EAAGA,EAAIoL,IAAOpL,EAAG,CACzBiG,KAAK02E,2BAA2B38E,GAAKiG,KAAKywE,gBAAgB1Y,yBAE1D,IAAI/3D,KAAKg2E,sBAAsB9N,6BAA+B,EAC7DloE,KAAKg2E,sBAAsB9N,2BAA6BloE,KAAK02E,2BAA2B38E,GAAG+nB,MAAM,EAGnG3c,EAAMnF,KAAK22E,6BAA6Br8E,MACxC,KAAKP,EAAI,EAAGA,EAAIoL,IAAOpL,EAAG,CACzBiG,KAAK22E,6BAA6B58E,GAAKiG,KAAKywE,gBAAgB1Y,yBAE5D,IAAI/3D,KAAKg2E,sBAAsB9N,6BAA+B,EAC7DloE,KAAKg2E,sBAAsB9N,2BAA6BloE,KAAK22E,6BAA6B58E,GAAG+nB,MAAM,GAO9FwlD,GAAA/mE,UAAA41E,iBAAR,WAEC,GAAIS,EACJ,IAAIC,EACJ,IAAIC,EACJ,IAAIC,EACJ,IAAIC,GAAwB,CAC5B,IAAIC,GAA0B,CAC9B,IAAIlN,GAAkB/pE,KAAKg2E,sBAAsBjP,qBACjD,IAAI+C,GAAkB9pE,KAAKg2E,sBAAsB/O,oBAGjD,KAAK,GAAIltE,GAAW,EAAGA,EAAIiG,KAAKg2E,sBAAsBpQ,uBAAwB7rE,EAAG,CAChF,GAAIiG,KAAKg2E,sBAAsBpN,iBAAkB,CAChDmO,EAAc/2E,KAAKw2E,yBAAyBQ,IAE5C,IAAIE,GAAqCl3E,KAAKywE,gBAAgBzvD,gBAE9DhhB,MAAK6yE,cAAgB,OAASqE,EAAe,SAAWH,EAAc,KAAO/2E,KAAK0wE,kBAAkBoE,gBAAkB,KACrH,OAASoC,EAAe,OAASH,EAAc,MAEhDA,GAAc/2E,KAAKywE,gBAAgB/Y,2BACnC13D,MAAKywE,gBAAgB3vD,oBAAoBi2D,EAAa,EAEtD/2E,MAAK8yE,gBAAkB,OAASiE,EAAc,SAAWG,EAAe,KACvE,OAASH,EAAc,OAASG,EAAe,WAE1C,CACNH,EAAc/2E,KAAK02E,2BAA2BO,KAG/CL,EAAkB52E,KAAK02E,2BAA2BO,IAClDJ,GAAmB72E,KAAK02E,2BAA2BO,IAEnD,IAAInN,EACH9pE,KAAK8yE,gBAAkB9yE,KAAK0lE,cAAcyR,iCAAiCn3E,KAAKg2E,sBAAuBe,EAAaH,EAAiB52E,KAAKywE,gBAAiBzwE,KAAK0wE,kBAEjK,IAAI3G,EACH/pE,KAAK8yE,gBAAkB9yE,KAAK0lE,cAAc0R,kCAAkCp3E,KAAKg2E,sBAAuBe,EAAaF,EAAkB72E,KAAKywE,gBAAiBzwE,KAAK0wE,kBAEnK,IAAI1wE,KAAKg2E,sBAAsBpN,iBAC9B5oE,KAAKywE,gBAAgB31C,sBAAsBi8C,GAG7CC,EAAiB,CACjBC,GAAmB,CAGnB,KAAK,GAAIl9E,GAAW,EAAGA,EAAIiG,KAAKg2E,sBAAsBrQ,iBAAkB5rE,EAAG,CAE1E,GAAIiG,KAAKg2E,sBAAsBpN,mBAAqB5oE,KAAKg2E,sBAAsBzM,sBAC9EuN,EAAc92E,KAAKy2E,2BAA2BO,SAE9CF,GAAc92E,KAAK22E,6BAA6BM,IAEjDL,GAAkB52E,KAAK22E,6BAA6BM,IACpDJ,GAAmB72E,KAAK22E,6BAA6BM,IAErDF,GAAc/2E,KAAKywE,gBAAgB/Y,2BACnC13D,MAAKywE,gBAAgB9Y,sBAAsBof,EAAa,EAExD,IAAIG,EAEJ,IAAIl3E,KAAKg2E,sBAAsBpN,iBAAkB,CAChDsO,EAAel3E,KAAKywE,gBAAgBzvD,gBACpC,IAAI6Z,GAA6B76B,KAAKywE,gBAAgB5vD,yBACtD7gB,MAAK6yE,cAAgB,OAASh4C,EAAO,KAAOi8C,EAAc,KAAO92E,KAAK0wE,kBAAkBniB,iBAAmB,KAC1G,OAAS2oB,EAAe,SAAWr8C,EAAO,KAAO76B,KAAK0wE,kBAAkBoE,gBAAkB,KAC1F,OAASoC,EAAe,OAASl3E,KAAK0wE,kBAAkBniB,iBAAmB,WACtE,KAAKvuD,KAAKg2E,sBAAsBzM,sBAAuB,CAC7D2N,EAAel3E,KAAKywE,gBAAgBzvD,gBACpChhB,MAAK6yE,cAAgB,OAASqE,EAAe,KAAOJ,EAAc,KAAO92E,KAAK0wE,kBAAkBpiB,qBAAuB,SACjH,CACN4oB,EAAeH,CACf/2E,MAAK8yE,gBAAkB,OAASiE,EAAc,KAAOD,EAAc,KAAO92E,KAAK0wE,kBAAkBuD,sBAAwB,KAG1H,GAAIj0E,KAAKg2E,sBAAsB5P,iBAAkB,CAEhDpmE,KAAK8yE,gBACJ,OAASiE,EAAc,OAASG,EAAe,KAAOA,EAAe,KACrE,OAASH,EAAc,OAASA,EAAc,OAASH,EAAkB,OACzE,OAASG,EAAc,OAASA,EAAc,OAASF,EAAmB,OAC1E,OAASE,EAAc,OAASA,EAAc,OAC9C,OAASA,EAAc,OAAS/2E,KAAK0wE,kBAAkB+E,QAAU,OAASsB,EAAc,OACxF,OAASA,EAAc,SAAWG,EAAe,SAC5C,CACNl3E,KAAK8yE,gBAAkB,OAASiE,EAAc,SAAWG,EAAe,KACvE,OAASH,EAAc,OAASG,EAAe,OAGjD,GAAIl3E,KAAKg2E,sBAAsB9N,6BAA+B,EAC7DloE,KAAKg2E,sBAAsB9N,2BAA6B4O,EAAYh1D,MAAM,CAE3E,IAAIgoD,EACH9pE,KAAK8yE,gBAAkB9yE,KAAK0lE,cAAcyR,iCAAiCn3E,KAAKg2E,sBAAuBe,EAAaH,EAAiB52E,KAAKywE,gBAAiBzwE,KAAK0wE,kBAEjK,IAAI3G,EACH/pE,KAAK8yE,gBAAkB9yE,KAAK0lE,cAAc0R,kCAAkCp3E,KAAKg2E,sBAAuBe,EAAaF,EAAkB72E,KAAKywE,gBAAiBzwE,KAAK0wE,kBAEnK1wE,MAAKywE,gBAAgBwB,wBAAwB8E,IAOvCzP,GAAA/mE,UAAA61E,sBAAR,WAEC,GAAIiB,EACJ,IAAIC,IAAqB,KAAM,KAAM,KAAM,KAC3C,IAAIC,GAA+C,GAAIn2E,MACvD,IAAIrH,EACJ,IAAIy9E,EACJ,IAAIzN,GAAkB/pE,KAAKg2E,sBAAsBhP,qBACjD,IAAI8C,GAAkB9pE,KAAKg2E,sBAAsB9O,oBAEjD,IAAI4C,EACH9pE,KAAKg2E,sBAAsB/L,yBAA2B,GAAI7oE,MAE3D,IAAI2oE,EACH/pE,KAAKg2E,sBAAsB3L,0BAA4B,GAAIjpE,MAE5D,KAAKrH,EAAI,EAAGA,EAAIiG,KAAKy3E,sBAAuB19E,EAAG;AAC9Cw9E,EAAgBx9E,GAAKiG,KAAKywE,gBAAgB1Y,yBAE1C,IAAIh+D,GAAK,EACRiG,KAAKg2E,sBAAsB1L,kBAAoBiN,EAAgBx9E,GAAG+nB,MAAM,EAG1E,IAAK/nB,EAAI,EAAGA,EAAIiG,KAAKg2E,sBAAsBnQ,iBAAkB9rE,EAAG,CAC/Ds9E,EAAYE,EAAgB3zC,KAAK0N,MAAMv3C,EAAE,IAAI2nB,WAAa41D,EAAiBv9E,EAAE,EAE7E,IAAI+vE,EAAS,CACZ0N,EAASx3E,KAAKywE,gBAAgB5Y,mBAC9B73D,MAAKg2E,sBAAsB/L,yBAAyBlwE,GAAKy9E,EAAO11D,KAChE9hB,MAAK8yE,gBAAkB9yE,KAAK0lE,cAAcgS,iCAAiC13E,KAAKg2E,sBAAuBwB,EAAQH,EAAWr3E,KAAKywE,gBAAiBzwE,KAAK0wE,mBAGtJ,GAAI3G,EAAS,CACZyN,EAASx3E,KAAKywE,gBAAgB5Y,mBAC9B73D,MAAKg2E,sBAAsB3L,0BAA0BtwE,GAAKy9E,EAAO11D,KACjE9hB,MAAK8yE,gBAAkB9yE,KAAK0lE,cAAciS,kCAAkC33E,KAAKg2E,sBAAuBwB,EAAQH,EAAWr3E,KAAKywE,gBAAiBzwE,KAAK0wE,qBAQlJpJ,GAAA/mE,UAAAkuE,qBAAP,WAEC5tE,EAAAN,UAAMkuE,qBAAoBp0E,KAAA2F,KAE1BA,MAAKg2E,sBAAsB/N,0BAA4B,CACvDjoE,MAAKg2E,sBAAsB9N,4BAA8B,CACzDloE,MAAKg2E,sBAAsB1L,mBAAqB,CAEhDtqE,MAAKy3E,oBAAsB7zC,KAAKg0C,KAAK53E,KAAKg2E,sBAAsBnQ,eAAe,EAG/E,IAAI7lE,KAAKg2E,sBAAsBpN,mBAAqB5oE,KAAKg2E,sBAAsBzM,sBAAuB,CACrGvpE,KAAKy2E,2BAA6B,GAAIr1E,OAA6BpB,KAAKg2E,sBAAsBrQ,eAC9F3lE,MAAK22E,6BAA+B,GAAIv1E,OAA6BpB,KAAKg2E,sBAAsBrQ,eAAe,OACzG,CACN3lE,KAAK22E,6BAA+B,GAAIv1E,OAA6BpB,KAAKg2E,sBAAsBrQ,eAAe,GAGhH,GAAI3lE,KAAKg2E,sBAAsBpN,iBAAkB,CAChD5oE,KAAKw2E,yBAA2B,GAAIp1E,OAA6BpB,KAAKg2E,sBAAsBpQ,qBAC5F5lE,MAAK02E,2BAA6B,GAAIt1E,OAA6BpB,KAAKg2E,sBAAsBpQ,qBAAqB,OAC7G,CACN5lE,KAAK02E,2BAA6B,GAAIt1E,OAA6BpB,KAAKg2E,sBAAsBpQ,qBAAqB,IAGtH,OAAA0B,IA1RsCuF,EAAAuB,aAAzBh0E,GAAAktE,iBAAgBA,IzHssa1BuQ,uCAAuC,yDAAyDC,iCAAiC,SAASx+E,EAAQkB,EAAOJ,GAC5J,Y0HntaA,IAAAyyE,GAAAvzE,EAA+B,mCAAvBc,GAAAg0E,aAAAvB,EAAAuB,YACR,IAAA9I,GAAAhsE,EAAkC,uCAA1Bc,GAAAktE,iBAAAhC,EAAAgC,gBACR,IAAAyQ,GAAAz+E,EAAiC,2BAAzBc,GAAAmrE,eAAAwS,EAAAxS,cACR,IAAA8L,GAAA/3E,EAA+B,yBAAvBc,GAAAwwE,aAAAyG,EAAAzG,YACR,IAAAvF,GAAA/rE,EAA8B,uBAAtBc,GAAAiD,WAAAgoE,EAAAhoE,UACR,IAAA4+D,GAAA3iE,EAAqC,gCAA7Bc,GAAAiiE,oBAAAJ,EAAAI,mBACR,IAAAuW,GAAAt5E,EAAoC,+BAA5Bc,GAAAi4E,mBAAAO,EAAAP,kBACR,IAAAr8C,GAAA18B,EAAsC,kCAA9Bc,GAAAg8B,sBAAAJ,EAAAI,wB1H6taL4hD,2BAA2B,+CAA+CC,yBAAyB,6CAA6CC,uBAAuB,2CAA2CC,gCAAgC,oDAAoDC,+BAA+B,mDAAmDC,kCAAkC,sDAAsDC,mCAAmC,uDAAuDC,uCAAuC,6DAA6DC,4CAA4C,SAASl/E,EAAQkB,EAAOJ,GACrtB,kBACMq+E,kDAAkD,SAASn/E,EAAQkB,EAAOJ,GAChF,Y2HjuaA,IAAA6T,GAAA,WAAA,QAAAA,MAEQA,EAAA1N,UAAAkR,uBAAP,SAA8BW,GAE7B,GAAIsmE,EACJ,IAAIC,EACJ,IAAIC,EAEJ,KAAKxmE,IAASA,EAAKsB,KAAM,CACxB,MAAOtB,GAIRwmE,EAAOxmE,CACPumE,GAAOvmE,EAAKsB,IAEZ,OAAOilE,EAAM,CACZA,EAAOA,EAAKjlE,IACZ,IAAIilE,EAAM,CACTC,EAAOA,EAAKllE,IACZilE,GAAOA,EAAKjlE,MAIdglE,EAAQE,EAAKllE,IACbklE,GAAKllE,KAAO,IAGZtB,GAAOpS,KAAKyR,uBAAuBW,EACnCsmE,GAAQ14E,KAAKyR,uBAAuBinE,EAGpC,IAAIG,EACJ,IAAIC,EACJ,IAAI3+E,EAEJ,KAAKiY,EACJ,MAAOsmE,EACR,KAAKA,EACJ,MAAOtmE,EAER,OAAOA,GAAQsmE,EAAO,CACrB,GAAItmE,EAAKwD,OAAS8iE,EAAM9iE,OAAQ,CAC/Bzb,EAAIiY,CACJA,GAAOA,EAAKsB,SACN,CACNvZ,EAAIu+E,CACJA,GAAQA,EAAMhlE,KAGf,IAAKmlE,EACJA,EAAS1+E,MACT2+E,GAAKplE,KAAOvZ,CAEb2+E,GAAO3+E,EAGR,GAAIiY,EACH0mE,EAAKplE,KAAOtB,MAAW,IAAIsmE,EAC3BI,EAAKplE,KAAOglE,CAEb,OAAOG,GAGD5qE,GAAA1N,UAAAiR,sBAAP,SAA6BY,GAE5B,GAAIsmE,EACJ,IAAIC,GAAwBC,CAE5B,KAAKxmE,IAASA,EAAKsB,KAAM,CACxB,MAAOtB,GAIRwmE,EAAOxmE,CACPumE,GAAOvmE,EAAKsB,IAEZ,OAAOilE,EAAM,CACZA,EAAOA,EAAKjlE,IACZ,IAAIilE,EAAM,CACTC,EAAOA,EAAKllE,IACZilE,GAAOA,EAAKjlE,MAIdglE,EAAQE,EAAKllE,IACbklE,GAAKllE,KAAO,IAGZtB,GAAOpS,KAAKwR,sBAAsBY,EAClCsmE,GAAQ14E,KAAKwR,sBAAsBknE,EAGnC,IAAIG,EACJ,IAAIC,EACJ,IAAI3+E,EACJ,IAAI4+E,GAAa,CAEjB,KAAK3mE,EACJ,MAAOsmE,EACR,KAAKA,EACJ,MAAOtmE,EAER,OAAOA,GAAQsmE,GAAStmE,GAAQ,MAAQsmE,GAAS,KAAM,CAKtD,GAAIM,GAAa5mE,EAAKsD,aACtB,IAAIujE,GAAaP,EAAMhjE,aAEvB,IAAIsjE,GAAOC,EAAK,CACf,GAAIC,GAAY9mE,EAAKqD,SACrB,IAAI0jE,GAAYT,EAAMjjE,SAEtB,IAAIyjE,GAAMC,EAAI,CACb,GAAI/mE,EAAKwD,OAAS8iE,EAAM9iE,OACvBmjE,EAAM,MACNA,IAAO,MACF,IAAIG,EAAKC,EAAI,CACnBJ,EAAM,MACA,CACNA,GAAO,OAEF,IAAIC,EAAMC,EAAK,CACrBF,EAAM,MACA,CACNA,GAAO,EAGR,GAAIA,EAAM,EAAG,CACZ5+E,EAAIiY,CACJA,GAAOA,EAAKsB,SACN,CACNvZ,EAAIu+E,CACJA,GAAQA,EAAMhlE,KAGf,IAAKmlE,EAAQ,CACZA,EAAS1+E,CACT2+E,GAAO3+E,MACD,CACN2+E,EAAKplE,KAAOvZ,CACZ2+E,GAAO3+E,GAIT,GAAIiY,EACH0mE,EAAKplE,KAAOtB,MAAW,IAAIsmE,EAC3BI,EAAKplE,KAAOglE,CAEb,OAAOG,GAET,OAAA5qE,KAzJa7T,GAAA6T,oBAAmBA,O3H+2a1BmrE,iDAAiD,SAAS9/E,EAAQkB,EAAOJ,GAC/E,Y4H/2aA,IAAAi/E,GAAA,WAAA,QAAAA,MAEQA,EAAA94E,UAAAkR,uBAAP,SAA8BW,GAE7B,MAAOA,GAGDinE,GAAA94E,UAAAiR,sBAAP,SAA6BY,GAE5B,MAAOA,GAET,OAAAinE,KAXaj/E,GAAAi/E,mBAAkBA,O5H+3azBC,8BAA8B,SAAShgF,EAAQkB,EAAOJ,GAC5D,Y6Ht4aA,IAAA+R,GAAA7S,EAAqC,6BAA7Bc,GAAA6T,oBAAA9B,EAAA8B,mBACR,IAAAsrE,GAAAjgF,EAAoC,4BAA5Bc,GAAAi/E,mBAAAE,EAAAF,qB7H04aL/hE,6BAA6B,iDAAiDkiE,4BAA4B,kDAAkDC,0DAA0D,SAASngF,EAAQkB,EAAOJ,GACjP,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I8Hh5anF,IAAAqsE,GAAApzE,EAA4B,kCAI5B,IAAAogF,GAAApgF,EAAkC,uCAElC,IAAAqgF,GAAArgF,EAAgC,6BAOhC,IAAAsD,GAAA,SAAAiE,GAA6Cd,EAAAnD,EAAAiE,EAM5C,SAAAjE,GAAY0jE,EAAwBjxD,EAAgCuqE,GAEnE/4E,EAAAxG,KAAA2F,KAAMsgE,EAAUjxD,EAAeuqE,EAE/B55E,MAAK65E,UAAYvZ,CAEjBtgE,MAAK85E,UAAU95E,KAAKi0D,MAAQ,GAAIylB,GAAAK,kBAAkB/5E,KAAMsgE,EAAUjxD,EAAerP,KAAKqI,SAGhFzL,EAAA2D,UAAAmsD,QAAP,SAAevkD,GAEdtH,EAAAN,UAAMmsD,QAAOryD,KAAA2F,KAACmI,EAEdnI,MAAK65E,UAAY,KAMXj9E,GAAA2D,UAAAy5E,eAAP,WAECn5E,EAAAN,UAAMy5E,eAAc3/E,KAAA2F,KAEpBA,MAAKi6E,mBAAsBj6E,KAAK65E,UAAUtnD,WAAam6C,EAAA0C,UAAUC,QAAUrvE,KAAK65E,UAAUK,eAAkBl6E,KAAK65E,UAAUzJ,gBAAkBpwE,KAAK65E,UAAUzJ,eAAepwC,gBAAkB,CAC7LhgC,MAAKi0D,MAAMkmB,cAAgBn6E,KAAK65E,UAAUM,aAC1Cn6E,MAAKi0D,MAAMvkD,OAAOy/D,aAAcnvE,KAAKwT,SAAS+e,WAAam6C,EAAA0C,UAAUC,QAAUrvE,KAAKi6E,mBAAqBvN,EAAA0C,UAAUE,MAAQtvE,KAAK65E,UAAUtnD,WAG5I,OAAA31B,IAlC6C+8E,EAAAS,eAAhChgF,GAAAwC,wBAAuBA,I9Ho6ajCy9E,6BAA6B,gDAAgDC,uCAAuC,0DAA0DpJ,kCAAkC9xE,YAAYm7E,kDAAkD,SAASjhF,EAAQkB,EAAOJ,GACzS,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I+Hn7anF,IAAAm6E,GAAAlhF,EAAmC,iCAEnC,IAAA+rE,GAAA/rE,EAA6B,wBAU7B,IAAA0N,GAAA,SAAAnG,GAAqCd,EAAAiH,EAAAnG,EAYpC,SAAAmG,GAAYw8D,EAAkBn0D,EAAgCuqE,GAE7D/4E,EAAAxG,KAAA2F,KAAMwjE,EAASn0D,EAAeuqE,EAE9B55E,MAAKy6E,QAAU,GAAIpV,GAAAhoE,WAAWgS,EAAerP,KAAMA,KAAKqI,OAExDrI,MAAK85E,UAAU95E,MAGTgH,EAAAzG,UAAA+tB,WAAP,WAECztB,EAAAN,UAAM+tB,WAAUj0B,KAAA2F,KAEhBA,MAAK06E,WAAa16E,KAAKwT,SAAS+sD,aAAa,GAAqBvgE,KAAKy6E,QAAQtwE,eAAenK,KAAKwT,SAAS+sD,aAAa,IAAM,KAGzHv5D,GAAAzG,UAAA0tD,sBAAP,SAA6Bv+C,GAE5B7O,EAAAN,UAAM0tD,sBAAqB5zD,KAAA2F,KAAC0P,EAE5BA,GAAOkhD,wBAEP,IAAIlhD,EAAO+D,eAAiB,EAC3B/D,EAAO4+D,iBAIFtnE,GAAAzG,UAAA0uE,mBAAP,SAA0Bv/D,GAEzB7O,EAAAN,UAAM0uE,mBAAkB50E,KAAA2F,KAAC0P,EAEzB,IAAIoS,GAAe9hB,KAAK26E,uBACxB,IAAIvqE,GAAoBV,EAAOkiD,oBAC/BxhD,GAAK0R,GAAS,CACd1R,GAAK0R,EAAQ,GAAK,GAClB1R,GAAK0R,EAAQ,GAAK,KAClB1R,GAAK0R,EAAQ,GAAK,QAClB1R,GAAK0R,EAAQ,GAAK,EAAI,GACtB1R,GAAK0R,EAAQ,GAAK,EAAI,GACtB1R,GAAK0R,EAAQ,GAAK,EAAI,GACtB1R,GAAK0R,EAAQ,GAAK,EAMZ9a,GAAAzG,UAAA8uD,kBAAP,SAAyB3/C,EAAmB0J,EAAmCC,GAE9E,GAAInf,GAAc,EAClB,IAAI0gF,GAAkCvhE,EAAgBG,YACtD,IAAIqhE,GAAiCzhE,EAAc2+C,yBACnD,IAAI+iB,GAAiC1hE,EAAc2+C,yBAEnD/3D,MAAK26E,wBAA0BE,EAAS/4D,MAAM,CAE9C,IAAI+E,GAA8BzN,EAAcs+C,2BAChDt+C,GAAcu+C,sBAAsB9wC,EAAO,EAC3C,IAAIiM,GAA8B1Z,EAAcs+C,2BAChDt+C,GAAcu+C,sBAAsB7kC,EAAO,EAE3C54B,IAAQ,OAAS2sB,EAAQ,KAAOxN,EAAgBw3C,mBAAqB,KAAOx3C,EAAgBw3C,mBAAqB,OAChH,OAAShqC,EAAQ,KAAOg0D,EAAW,KAAOh0D,EAAQ,OAClD,OAASA,EAAQ,KAAOA,EAAQ,KAChC,OAASiM,EAAQ,KAAOjM,EAAQ,UAAYi0D,EAAW,IAKxD,IAAI96E,KAAK06E,YAAchrE,EAAO+D,eAAiB,EAAG,CAEjD,GAAIsnE,GAA+B3hE,EAAcs+C,2BACjDx9D,IAAQ8F,KAAK06E,WAAWrrB,kBAAkB0rB,EAAQ3hE,EAAeC,EAAiBA,EAAgBk7D,UAElG,IAAIyG,GAAkC5hE,EAAc2+C,yBAEpD79D,IAAQ,OAAS6gF,EAAS,OAASA,EAAS,OAASC,EAAY,OAChE,OAASD,EAAS,OAGpB7gF,GAAQ,OAAS0gF,EAAY,KAAO/zD,EAAQ,KAAOiM,EAAQ,IAE3D1Z,GAAc64D,wBAAwBprD,EACtCzN,GAAc64D,wBAAwBn/C,EAEtC,OAAO54B,GAMD8M,GAAAzG,UAAAiQ,WAAP,SAAkB5M,GAEjB/C,EAAAN,UAAMiQ,WAAUnW,KAAA2F,KAAC4D,EAEjB,IAAI5D,KAAK06E,YAAc16E,KAAKy6E,QAAQhnE,eAAiB,EAAG,CACvDzT,KAAK06E,WAAWtwE,SAASpK,KAEzBA,MAAKy6E,QAAQ7oB,qBAAqB5xD,KAAK26E,wBAA0B,GAAK36E,KAAKy6E,QAAQhnE,gBAGtF,OAAAzM,IAhHqCwzE,EAAAS,mBAAxB7gF,GAAA4M,gBAAeA,I/HggbzBujE,wBAAwB,2CAA2C2Q,iCAAiC,sDAAsDC,qDAAqD,SAAS7hF,EAAQkB,EAAOJ,GAC1O,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IgIjhbnF,IAAAm6E,GAAAlhF,EAAmC,iCAEnC,IAAA+rE,GAAA/rE,EAA6B,wBAU7B,IAAAmO,GAAA,SAAA5G,GAAwCd,EAAA0H,EAAA5G,EAUvC,SAAA4G,GAAY+7D,EAAkBn0D,EAAgCuqE,GAE7D/4E,EAAAxG,KAAA2F,KAAMwjE,EAASn0D,EAAeuqE,EAE9B55E,MAAKy6E,QAAU,GAAIpV,GAAAhoE,WAAWgS,EAAerP,KAAMA,KAAKqI,OAExDrI,MAAK85E,UAAU95E,MAGTyH,EAAAlH,UAAA+tB,WAAP,WAECztB,EAAAN,UAAM+tB,WAAUj0B,KAAA2F,KAEhBA,MAAK06E,WAAa16E,KAAKwT,SAAS+sD,aAAa,GAAqBvgE,KAAKy6E,QAAQtwE,eAAenK,KAAKwT,SAAS+sD,aAAa,IAAM,KAMzH94D,GAAAlH,UAAA0uE,mBAAP,SAA0Bv/D,GAEzB7O,EAAAN,UAAM0uE,mBAAkB50E,KAAA2F,KAAC0P,EAEzB,IAAIoS,GAAe9hB,KAAK26E,uBACxB,IAAIvqE,GAAoBV,EAAOkiD,oBAC/BxhD,GAAK0R,EAAQ,GAAK,EAAI,GACtB1R,GAAK0R,EAAQ,GAAK,EAAI,GACtB1R,GAAK0R,EAAQ,GAAK,EAAI,GACtB1R,GAAK0R,EAAQ,GAAK,EAGZra,GAAAlH,UAAA0tD,sBAAP,SAA6Bv+C,GAE5B7O,EAAAN,UAAM0tD,sBAAqB5zD,KAAA2F,KAAC0P,EAE5BA,GAAOkhD,wBACPlhD,GAAO2+D,qBAEP,IAAI3+D,EAAO+D,eAAiB,EAC3B/D,EAAO4+D,gBAER,IAAI5+D,EAAO2+D,oBAAsB,EAChC3+D,EAAO2+C,wBAMF5mD,GAAAlH,UAAA8uD,kBAAP,SAAyB3/C,EAAmB0J,EAAmCC,GAE9E,GAAInf,EACJ,IAAI0gF,GAAkCvhE,EAAgBG,YACtD,IAAIqhE,GAAiCzhE,EAAc2+C,yBACnD,IAAI+iB,GAAiC1hE,EAAc2+C,yBAEnD/3D,MAAK26E,wBAA0BE,EAAS/4D,MAAM,CAE9C,IAAI+E,GAA8BzN,EAAcs+C,2BAChDt+C,GAAcu+C,sBAAsB9wC,EAAO,EAC3C,IAAIiM,GAA8B1Z,EAAcs+C,2BAChDt+C,GAAcu+C,sBAAsB7kC,EAAO,EAG3C54B,GAAO,OAAS2sB,EAAQ,OAASxN,EAAgBu7D,eAAiB,SAAWv7D,EAAgBu7D,eAAiB,SAC7G,OAAS/tD,EAAQ,KAAOg0D,EAAW,KAAOh0D,EAAQ,OAClD,OAASA,EAAQ,KAAOA,EAAQ,KAChC,OAASiM,EAAQ,KAAOjM,EAAQ,UAAYi0D,EAAW,IAExD,IAAI96E,KAAK06E,YAAchrE,EAAO+D,eAAiB,EAAG,CAEjD,GAAIsnE,GAA+B3hE,EAAcs+C,2BACjDx9D,IAAQ8F,KAAK06E,WAAWrrB,kBAAkB0rB,EAAQ3hE,EAAeC,EAAiBA,EAAgBk7D,UAElG,IAAIyG,GAAkC5hE,EAAc2+C,yBAEpD79D,IAAQ,OAAS6gF,EAAS,OAASA,EAAS,OAASC,EAAY,OAChE,OAASD,EAAS,OAGpB7gF,GAAQ,OAAS0gF,EAAY,KAAO/zD,EAAQ,KAAOiM,EAAQ,IAE3D,OAAO54B,GAMDuN,GAAAlH,UAAAiQ,WAAP,SAAkB5M,GAEjB/C,EAAAN,UAAMiQ,WAAUnW,KAAA2F,KAAC4D,EAEjB,IAAI5J,GAAW4J,EAAO6rD,WAAWqB,GAEjC92D,GAAI,GAAG,EAAEA,EAAEA,EAEX,IAAI8nB,GAAe9hB,KAAK26E,uBACxB,IAAIvqE,GAAoBpQ,KAAKy6E,QAAQ7oB,oBACrCxhD,GAAK0R,GAAS,EAAI9nB,CAClBoW,GAAK0R,EAAQ,GAAK,IAAM9nB,CACxBoW,GAAK0R,EAAQ,GAAK,MAAQ9nB,CAC1BoW,GAAK0R,EAAQ,GAAK,SAAW9nB,CAE7B,IAAIgG,KAAK06E,YAAc16E,KAAKy6E,QAAQhnE,eAAiB,EAAG,CACvDzT,KAAK06E,WAAWtwE,SAASpK,KAEzBoQ,GAAK0R,EAAQ,GAAK9hB,KAAKy6E,QAAQhnE,gBAGlC,OAAAhM,IAtHwC+yE,EAAAS,mBAA3B7gF,GAAAqN,mBAAkBA,IhIomb5B8iE,wBAAwB,2CAA2C2Q,iCAAiC,sDAAsDE,mDAAmD,SAAS9hF,EAAQkB,EAAOJ,GACxO,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IiIznbnF,IAAA0qD,GAAAzxD,EAA6B,oCAE7B,IAAAozE,GAAApzE,EAA4B,kCAK5B,IAAAyS,GAAAzS,EAAqC,+CAIrC,IAAAkhF,GAAAlhF,EAAmC,iCAEnC,IAAA+rE,GAAA/rE,EAA6B,wBAS7B,IAAAwD,GAAA,SAAA+D,GAAsCd,EAAAjD,EAAA+D,EAKrC,SAAA/D,GAAYunE,EAAeh1D,EAAgCuqE,GAE1D/4E,EAAAxG,KAAA2F,KAAMqkE,EAAQh1D,EAAeuqE,EAE7B55E,MAAKskE,QAAUD,CAEfrkE,MAAKy6E,QAAU,GAAIpV,GAAAhoE,WAAWgS,EAAerP,KAAMA,KAAKqI,OAExDrI,MAAKq7E,SAA4Br7E,KAAKy6E,QAAQtwE,eAAenK,KAAKskE,QAAQjE,QAE1ErgE,MAAK85E,UAAU95E,MAGTlD,EAAAyD,UAAAmsD,QAAP,SAAevkD,GAEdtH,EAAAN,UAAMmsD,QAAOryD,KAAA2F,KAACmI,EAEdnI,MAAKq7E,SAAS3uB,QAAQ,GAAI3B,GAAAoC,WAAWpC,EAAAoC,WAAWC,MAAOptD,KAAKskE,QAAQjE,SACpErgE,MAAKq7E,SAAW,IAEhBr7E,MAAKskE,QAAU,KAMTxnE,GAAAyD,UAAAy5E,eAAP,WAECn5E,EAAAN,UAAMy5E,eAAc3/E,KAAA2F,KAEpBA,MAAKi6E,mBAAsBj6E,KAAKwT,SAAS+e,WAAam6C,EAAA0C,UAAUC,MAEhErvE,MAAK0P,OAAOy/D,aAAcnvE,KAAKwT,SAAS+e,WAAam6C,EAAA0C,UAAUC,QAAUrvE,KAAKi6E,mBAAqBvN,EAAA0C,UAAUE,MAAQtvE,KAAKwT,SAAS+e,WAG7Hz1B,GAAAyD,UAAA0tD,sBAAP,SAA6Bv+C,GAE5B7O,EAAAN,UAAM0tD,sBAAqB5zD,KAAA2F,KAAC0P,EAE5BA,GAAOi+D,qBAAuB,KAMxB7wE,GAAAyD,UAAA8uD,kBAAP,SAAyB3/C,EAAmB0J,EAAmCC,GAE9E,MAAOrZ,MAAKq7E,SAAShsB,kBAAkBh2C,EAAgBG,aAAcJ,EAAeC,EAAiBA,EAAgB66D,iBAI/Gp3E,GAAAyD,UAAAqsD,gBAAP,SAAuB99C,EAA8BlL,EAAe+N,GAEnE9Q,EAAAN,UAAMqsD,gBAAevyD,KAAA2F,KAAC8O,EAAYlL,EAAQ+N,EAE1C3R,MAAKq7E,SAASzuB,gBAAgB99C,GAKxBhS,GAAAyD,UAAAiQ,WAAP,SAAkB5M,GAEjB/C,EAAAN,UAAMiQ,WAAUnW,KAAA2F,KAAC4D,EAEjB5D,MAAKqI,OAAOnC,QAAQ+L,aAAa,MAAOlG,EAAAmG,qBAAqBC,KAE7DnS,MAAKq7E,SAASjxE,SAASpK,MAEzB,OAAAlD,IAzEsC09E,EAAAS,mBAAzB7gF,GAAA0C,iBAAgBA,IjI8pb1BytE,wBAAwB,2CAA2C2Q,iCAAiC,oDAAoD3tB,oCAAoCnuD,UAAU8xE,kCAAkC9xE,UAAU4Y,+CAA+C5Y,YAAYk8E,iDAAiD,SAAShiF,EAAQkB,EAAOJ,GACzX,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IkInrbnF,IAAAyqD,GAAAxxD,EAAiC,0CAIjC,IAAAiiF,GAAAjiF,EAA+B,yCAE/B,IAAAkiF,GAAAliF,EAA+B,4CAC/B,IAAAymE,GAAAzmE,EAAsC,qDAQtC,IAAAk7D,GAAAl7D,EAA4B,sBAa5B,IAAA8gF,GAAA,SAAAv5E,GAAoCd,EAAAq6E,EAAAv5E,EAsEnC,SAAAu5E,GAAY5W,EAAkBn0D,EAAgCuqE,GAtE/D,GAAA5xE,GAAAhI,IAwEEa,GAAAxG,KAAA2F,KAAMwjE,EAASoW,EAnET55E,MAAAkrD,OAAgB,CAChBlrD,MAAAy7E,kBAA4B,KAO3Bz7E,MAAAguE,eAAyB,IACzBhuE,MAAA07E,kBAA4B,IAC5B17E,MAAA27E,eAAyB,IACzB37E,MAAA47E,eAAyB,IACzB57E,MAAA67E,QAAuB,GAAIz6E,MAC3BpB,MAAA87E,cAAuB,GAAIt7E,OAM5BR,MAAAi6E,mBAA6B,KAM7Bj6E,MAAA2iE,OAA6B,GAAIvhE,MACjCpB,MAAA4iE,SAAiC,GAAIxhE,MA2C3CpB,MAAK+7E,+BAAiC,SAAC5zE,GAAuB,MAAAH,GAAKg0E,sBAAsB7zE,GACzFnI,MAAKi8E,4BAA8B,SAAC9zE,GAAuB,MAAAH,GAAKk0E,mBAAmB/zE,GAEnFnI,MAAKyV,UAAY+tD,EAAQz0D,EACzB/O,MAAKwT,SAAWgwD,CAChBxjE,MAAK6tE,eAAiBx+D,CACtBrP,MAAKqI,OAASuxE,EAAW94E,KAEzBd,MAAKwT,SAASjL,iBAAiBgzE,EAAAY,aAAaC,qBAAsBp8E,KAAK+7E,+BACvE/7E,MAAKwT,SAASjL,iBAAiBgzE,EAAAY,aAAaE,kBAAmBr8E,KAAKi8E,4BAEpEj8E,MAAKs8E,0BAA4B,SAACn0E,GAAoB,MAAAH,GAAKu0E,iBAAiBp0E,IAjD7E3H,OAAA+B,eAAW63E,EAAA75E,UAAA,oBlI4pbJiC,IkI5pbP,WAEC,MAAOxC,MAAKi6E,oBlI6pbNr3E,WAAY,KACZC,aAAc,MkI3pbrBrC,QAAA+B,eAAW63E,EAAA75E,UAAA,iBlI8pbJiC,IkI9pbP,WAEC,GAAIxC,KAAK07E,kBACR17E,KAAKw8E,kBAEN,OAAOx8E,MAAKy8E,gBlI8pbN75E,WAAY,KACZC,aAAc,MkI5pbrBrC,QAAA+B,eAAW63E,EAAA75E,UAAA,UlI+pbJiC,IkI/pbP,WAEC,GAAIxC,KAAK07E,kBACR17E,KAAKw8E,kBAEN,OAAOx8E,MAAK67E,SlI+pbNj5E,WAAY,KACZC,aAAc,MkI7pbrBrC,QAAA+B,eAAW63E,EAAA75E,UAAA,WlIgqbJiC,IkIhqbP,WAEC,MAAOxC,MAAKwT,UlIiqbN5Q,WAAY,KACZC,aAAc,MkI/pbrBrC,QAAA+B,eAAW63E,EAAA75E,UAAA,alIkqbJiC,IkIlqbP,WAEC,GAAIxC,KAAK47E,eACR57E,KAAK08E,eAEN,OAAO18E,MAAK28E,YlIkqbN/5E,WAAY,KACZC,aAAc,MkI9obdu3E,GAAA75E,UAAA0tD,sBAAP,SAA6Bv+C,GAE5B1P,KAAK6tE,eAAe5f,sBAAsBv+C,EAE1CA,GAAO+D,eAAiBzT,KAAKwT,SAASC,cACtC/D,GAAO09D,aAAeptE,KAAKwT,SAASopE,SACpCltE,GAAO29D,WAAartE,KAAKwT,SAASqpE,MAElC,IAAI78E,KAAKwT,mBAAoBgoE,GAAAsB,aAAc,CAC1C,GAAIxc,GAAuCtgE,KAAKwT,QAChD9D,GAAOqtE,sBAAwBzc,EAAS0c,kBACxCttE,GAAOqgE,aAAezP,EAAS2c,SAC/BvtE,GAAO4sC,gBAAkBgkB,EAAS4c,UAClCxtE,GAAOygE,mBAAqB7P,EAAS6c,mBAIhC/C,GAAA75E,UAAA0jE,cAAP,SAAqB5D,EAAqBv+C,GAAA,GAAAA,QAAA,GAAgB,CAAhBA,EAAA,EAEzC,GAAI9hB,KAAK47E,eACR57E,KAAK08E,eAEN,OAAO18E,MAAK87E,cAAczb,EAAQtxD,IAAI+S,GAMhCs4D,GAAA75E,UAAAmsD,QAAP,SAAevkD,GAEdtH,EAAAN,UAAMmsD,QAAOryD,KAAA2F,KAACmI,EAEdnI,MAAKwT,SAAW,IAChBxT,MAAK6tE,eAAiB,IACtB7tE,MAAKqI,OAAS,IAEd,IAAIlD,GAAanF,KAAK67E,QAAQvhF,MAC9B,KAAK,GAAIP,GAAW,EAAGA,EAAIoL,EAAKpL,IAAK,CACpCiG,KAAK67E,QAAQ9hF,GAAGkR,oBAAoBupD,EAAAR,UAAUE,WAAYl0D,KAAKs8E,0BAC/Dt8E,MAAK67E,QAAQ9hF,GAAGiJ,UAGjBhD,KAAK67E,QAAU,KAMTzB,GAAA75E,UAAA68E,aAAP,SAAoBj1E,GAEnBtH,EAAAN,UAAM68E,aAAY/iF,KAAA2F,KAACmI,EAEnBnI,MAAK27E,eAAiB,IACtB37E,MAAK07E,kBAAoB,KAMnBtB,GAAA75E,UAAA27E,mBAAP,SAA0B/zE,GAEzB,GAAIhD,GAAanF,KAAK67E,QAAQvhF,MAC9B,KAAK,GAAIP,GAAW,EAAGA,EAAIoL,EAAKpL,IAC/BiG,KAAK67E,QAAQ9hF,GAAGu0B,YAEjBtuB,MAAK07E,kBAAoB,IACzB17E,MAAK47E,eAAiB,KAMhBxB,GAAA75E,UAAAy7E,sBAAP,SAA6B7zE,GAE5BnI,KAAK07E,kBAAoB,KAOlBtB,GAAA75E,UAAAi8E,iBAAR,WAEC,GAAIx8E,KAAK27E,eACR37E,KAAKg6E,gBAENh6E,MAAK07E,kBAAoB,KAEzB,IAAIxM,GAAwBlvE,KAAKq9E,yBAEjC,IAAI3nE,GAAgB,CACpB,IAAI4nE,GAAc,CAClB,IAAI5tE,EACJ,IAAIvK,GAAanF,KAAK67E,QAAQvhF,MAC9B,KAAK,GAAIP,GAAW,EAAGA,EAAIoL,EAAKpL,IAAK,CACpC2V,EAAS1P,KAAK67E,QAAQ9hF,GAAG2V,MACzBA,GAAOw/D,cAAgBA,CAEvBx5D,IAAiBhG,EAAOG,YAAYd,GAAGuuE,CACvCA,IAAQ,IAGT,GAAIt9E,KAAKguE,gBAAkBkB,EAAe,CACzClvE,KAAKguE,eAAiBkB,CAEtB,IAAIn0E,GAAiCiF,KAAKwT,SAAS+pE,OACnD,IAAIC,GAAmBziF,EAAYT,MACnC,KAAK,GAAIyc,GAAW,EAAGA,EAAIymE,EAAWzmE,IACrChc,EAAYgc,GAAG6G,qBAGjB5d,KAAKy8E,eAAiB/mE,EAGf0kE,GAAA75E,UAAAm8E,cAAR,WAEC18E,KAAK47E,eAAiB,KAEtB,IAAIhY,GAAqB5jE,KAAKwT,SAASqwD,gBACvC,IAAIxD,EACJ,IAAIqD,EACJ,IAAIf,EACJ,IAAImB,EACJ,IAAIC,EACJ,IAAIjiD,GAAe,CAEnB,KAAK,GAAI/nB,GAAW,EAAGA,EAAI6pE,EAAa7pE,IAAK,CAC5CsmE,EAAUrgE,KAAKwT,SAAS+sD,aAAaxmE,EACrC2pE,GAAYrD,EAAQ2D,cACpBrB,GAAS3iE,KAAK87E,cAAczb,EAAQtxD,IAAM,GAAI3N,MAC9C,KAAK,GAAI2V,GAAW,EAAGA,EAAI2sD,EAAW3sD,IAAK,CAC1C+sD,EAAQzD,EAAQ6D,WAAWntD,KAAO/W,KAAKwT,SAASgtD,MAAOxgE,KAAKwT,SAASgtD,MAAM0D,WAAW7D,EAAStpD,GAAK,OAASgpD,EAAAW,uBAAuB+c,mBACpIz9E,MAAK2iE,OAAO7gD,GAAwB9hB,KAAKqI,OAAO8B,eAAe25D,EAE/DC,GAAU1D,EAAQI,aAAa1pD,KAAO/W,KAAKwT,SAASgtD,MAAOxgE,KAAKwT,SAASgtD,MAAMC,aAAaJ,EAAStpD,GAAK,OAASgpD,EAAAW,uBAAuBC,mBAC1I3gE,MAAK4iE,SAAS9gD,GAA0B9hB,KAAKqI,OAAO8B,eAAe45D,EAEnEpB,GAAO5rD,GAAK+K,KAId9hB,KAAK28E,WAAa76D,EAQZs4D,GAAA75E,UAAAy5E,eAAP,WAECh6E,KAAK27E,eAAiB,MAShBvB,GAAA75E,UAAAm9E,aAAP,SAAoBjuE,GAEnBA,EAAKxE,oBAAoBupD,EAAAR,UAAUE,WAAYl0D,KAAKs8E,0BACpDt8E,MAAK67E,QAAQ5+D,OAAOjd,KAAK67E,QAAQ9iE,QAAQtJ,GAAO,GAM1C2qE,GAAA75E,UAAAo9E,cAAP,WAEC,GAAIx4E,GAAanF,KAAK67E,QAAQvhF,MAC9B,KAAK,GAAIP,GAAW,EAAGA,EAAIoL,IAAOpL,EACjCiG,KAAK67E,QAAQ9hF,GAAGkR,oBAAoBupD,EAAAR,UAAUE,WAAYl0D,KAAKs8E,0BAEhEt8E,MAAK67E,QAAQvhF,OAAS,EAOhB8/E,GAAA75E,UAAAu5E,UAAP,SAAiBrqE,GAEhBzP,KAAK67E,QAAQj2E,KAAK6J,EAClBA,GAAKlH,iBAAiBisD,EAAAR,UAAUE,WAAYl0D,KAAKs8E,2BAM1ClC,GAAA75E,UAAAg8E,iBAAR,SAAyBp0E,GAExBnI,KAAK07E,kBAAoB,KAUlBtB,GAAA75E,UAAA88E,wBAAR,WAEC,GAAIr9E,KAAKwT,SAASiH,aAAc,CAC/Bza,KAAKwT,SAASiH,aAAaxB,uBAE3B,IAAIle,GAAiCiF,KAAKwT,SAAS+pE,OACnD,IAAIC,GAAmBziF,EAAYT,MAEnC,IAAI6K,GAAanF,KAAK67E,QAAQvhF,MAC9B,IAAIoV,EACJ,KAAK,GAAI3V,GAAW,EAAGA,EAAIoL,EAAKpL,IAAK,CACpC2V,EAAS1P,KAAK67E,QAAQ9hF,GAAG2V,MACzBA,GAAOw/D,cAAgB,KACvB,KAAK,GAAIn4D,GAAW,EAAGA,EAAIymE,EAAWzmE,IACrC,GAAIhc,EAAYgc,GAAGgkB,SACFhgC,EAAYgc,GAAGgkB,SAAUjd,qBAAqBpO,GAIjE,OAAQ1P,KAAKwT,SAASiH,aAAamP,QAGpC,MAAO,OAET,OAAAwwD,IA3ToCtvB,EAAAwC,gBAAvBlzD,GAAAggF,eAAcA,IlIw5bxBwD,sBAAsB,yCAAyCpwB,0CAA0CpuD,UAAUy+E,yCAAyCz+E,UAAUuiE,qDAAqDviE,UAAU0+E,4CAA4C1+E,YAAY2+E,qDAAqD,SAASzkF,EAAQkB,EAAOJ,GAC7W,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,ImIx7bnF,IAAAm0D,GAAAl7D,EAA4B,sBAM5B,IAAAqgF,GAAArgF,EAAgC,6BAMhC,IAAA2hF,GAAA,SAAAp6E,GAAwCd,EAAAk7E,EAAAp6E,EAAxC,SAAAo6E,KAAwCp6E,EAAA0vD,MAAAvwD,KAAAwwD,WAIvChwD,OAAA+B,eAAW04E,EAAA16E,UAAA,UnIs7bJiC,ImIt7bP,WAEC,MAAOxC,MAAKy6E,SnIu7bN73E,WAAY,KACZC,aAAc,MmIr7brBrC,QAAA+B,eAAW04E,EAAA16E,UAAA,gBnIw7bJiC,ImIx7bP,WAEC,MAA0BxC,MAAKwT,SAASiH,cnIy7blC7X,WAAY,KACZC,aAAc,MmIp7bdo4E,GAAA16E,UAAA+tB,WAAP,WAECtuB,KAAKy6E,QAAQ7hB,mBAEb54D,MAAK0U,cAAc,GAAI8/C,GAAAR,UAAUQ,EAAAR,UAAUE,WAAYl0D,OAGjDi7E,GAAA16E,UAAAyC,QAAP,WAEC,GAAIhD,KAAKy6E,QAAS,CACjBz6E,KAAKy6E,QAAQz3E,SACbhD,MAAKy6E,QAAU,MAeVQ,GAAA16E,UAAAqsD,gBAAP,SAAuB99C,EAA8BlL,EAAe+N,GAEnE3R,KAAKy6E,QAAQ7tB,gBAAgB99C,EAAYlL,EAAQ+N,GAU3CspE,GAAA16E,UAAAiQ,WAAP,SAAkB5M,GAEjB5D,KAAKy6E,QAAQjqE,WAAW5M,GASlBq3E,GAAA16E,UAAAmQ,aAAP,WAEC1Q,KAAKy6E,QAAQ/pE,eAGPuqE,GAAA16E,UAAA0uE,mBAAP,SAA0Bv/D,IAKnBurE,GAAA16E,UAAAwzE,2BAAP,SAAkCrkE,EAAmB0J,EAAmCC,GAEvF,MAAO,GAGD4hE,GAAA16E,UAAAyzE,6BAAP,SAAoCtkE,EAAmB0J,EAAmCC,GAEzF,MAAO,GAGD4hE,GAAA16E,UAAA4tD,gBAAP,SAAuBz+C,EAAmB0J,EAAmCC,GAE5E,MAAO,GAGD4hE,GAAA16E,UAAA8uD,kBAAP,SAAyB3/C,EAAmB0J,EAAmCC,GAE9E,MAAO,GAGD4hE,GAAA16E,UAAAy0E,sBAAP,SAA6BtlE,EAAmB0J,EAAmCC,GAElF,MAAO,GAGD4hE,GAAA16E,UAAA00E,wBAAP,SAA+BvlE,EAAmB0J,EAAmCC,GAEpF,MAAO,GAET,OAAA4hE,IAzGwCtB,EAAAS,eAA3BhgF,GAAA6gF,mBAAkBA,InI4gc5B2C,sBAAsB,yCAAyCvD,6BAA6B,kDAAkD2D,kDAAkD,SAAS1kF,EAAQkB,EAAOJ,GAC3N,kBACM6jF,8CAA8C,SAAS3kF,EAAQkB,EAAOJ,GAC5E,YoIphcA,IAAAsC,GAAA,WAmBC,QAAAA,GAAY2S,EAAgCvO,EAAasL,GAAA,GAAAA,QAAA,GAAqC,CAArCA,EAAA,KAfjDpM,KAAAsM,iBAA0B,GAAI9L,OAiBrCR,MAAK6tE,eAAiBx+D,CACtBrP,MAAKqI,OAASvH,CACdd,MAAKwO,gBAAkBpC,EAdxB5L,OAAA+B,eAAI7F,EAAA6D,UAAA,SpI6hcGiC,IoI7hcP,WAEC,MAAOxC,MAAKqI,QpI8hcNzF,WAAY,KACZC,aAAc,MoI1gcdnG,GAAA6D,UAAA4J,eAAP,SAAsBq5D,GAErB,MAAQxjE,MAAKsM,iBAAiBk3D,EAAQz0D,MAAQ/O,KAAKsM,iBAAiBk3D,EAAQz0D,IAAM,IAAuB/O,KAAKwO,iBAAmB9R,EAAYsS,sBAAsBw0D,EAAQv0D,YAAYu0D,EAASxjE,KAAK6tE,eAAgB7tE,OAQ/MtD,GAAA6D,UAAA2O,iBAAP,SAAwBs0D,SAEhBxjE,MAAKsM,iBAAiBk3D,EAAQz0D,IAOxBrS,GAAAC,oBAAd,SAAkCyP,EAAgCmD,GAEjE7S,EAAYsS,sBAAsBO,EAAWN,WAAa7C,EAnD5C1P,GAAAsS,sBAA+B,GAAIxO,OAqDnD,OAAA9D,KAvDatC,GAAAsC,YAAWA,OpIwkclBwhF,2DAA2D,SAAS5kF,EAAQkB,EAAOJ,GACzF,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IqI3lcnF,IAAA0qD,GAAAzxD,EAA6B,oCAU7B,IAAA+rE,GAAA/rE,EAA6B,2BAK7B,IAAA6kF,GAAA7kF,EAA4B,iCAO5B,IAAAygF,GAAA,SAAAl5E,GAAuCd,EAAAg6E,EAAAl5E,EAUtC,SAAAk5E,GAAYp2E,EAAuB6/D,EAAkBn0D,EAAgCvO,GAEpFD,EAAAxG,KAAA2F,KAAM2D,EAAQ6/D,EAASn0D,EAAevO,EAT/Bd,MAAAo+E,UAAmB,CACnBp+E,MAAAq+E,UAAmB,CACnBr+E,MAAAs+E,UAAmB,CACnBt+E,MAAAu+E,UAAmB,CAQ1Bv+E,MAAKy6E,QAAU,GAAIpV,GAAAhoE,WAAWgS,EAAerP,KAAMA,KAAKqI,OAExDrI,MAAKsuB,aAGCyrD,EAAAx5E,UAAA0tD,sBAAP,SAA6Bv+C,GAE5B7O,EAAAN,UAAM0tD,sBAAqB5zD,KAAA2F,KAAC0P,EAE5B,IAAI1P,KAAK06E,YAAc,KACtBhrE,EAAO4+D,iBAGFyL,GAAAx5E,UAAA+tB,WAAP,WAECztB,EAAAN,UAAM+tB,WAAUj0B,KAAA2F,KAEhBA,MAAK06E,WAAa16E,KAAKwT,SAAS+sD,aAAa,GAAqBvgE,KAAKy6E,QAAQtwE,eAAenK,KAAKwT,SAAS+sD,aAAa,IAAM,KAGzHwZ,GAAAx5E,UAAAyC,QAAP,WAEC,GAAIhD,KAAK06E,WAAY,CACpB16E,KAAK06E,WAAWhuB,QAAQ,GAAI3B,GAAAoC,WAAWpC,EAAAoC,WAAWC,MAAOptD,KAAKwT,SAAS+sD,aAAa,IACpFvgE,MAAK06E,WAAa,KAGnB75E,EAAAN,UAAMyC,QAAO3I,KAAA2F,MAMP+5E,GAAAx5E,UAAA8uD,kBAAP,SAAyB3/C,EAAmB8uE,EAA8BC,GAEzE,GAAIvkF,GAAc,EAEZ,IAAIwkF,EAEJ,IAAI1+E,KAAKm6E,cAAe,CACpBuE,EAAWF,EAAStM,2BACpBsM,GAAS7mB,sBAAsB+mB,EAAU,EACzCxkF,IAAQ,OAASwkF,EAAW,KAAOD,EAAUjlE,aAAe,OAGtE,GAAIohE,GAAkC6D,EAAUjlE,YAEhD,IAAIxZ,KAAK06E,YAAc,KAAM,CAE5BxgF,GAAQ8F,KAAK06E,WAAWrrB,kBAAkBurB,EAAW4D,EAAUC,EAAWA,EAAUlK,UAEpF,IAAI7kE,EAAO+D,eAAiB,EAAG,CAC9B,GAAIunE,GAAkCwD,EAASzmB,yBAC/C/3D,MAAK26E,wBAA0BK,EAAUl5D,MAAM,CAE/C5nB,IAAQ,OAAS0gF,EAAY,OAASA,EAAY,OAASI,EAAY,OAAS,OAASJ,EAAY,OAAS,OAASA,EAAY,OAASA,EAAY,OAASI,EAAY,YAExK,IAAItrE,EAAO4/C,mBAAqB,EAAG,CAEzCp1D,GAAQ,OAAS0gF,EAAY,KAAO6D,EAAU7I,aAAe,SACvD,CACN,GAAI+I,GAAwCH,EAASzmB,yBAErD/3D,MAAK26E,wBAA0BgE,EAAgB78D,MAAM,CAErD5nB,IAAQ,OAAS0gF,EAAY,KAAO+D,EAAkB,KAGjD,GAAI3+E,KAAKm6E,cAAe,CACpBjgF,GAAQ,OAASukF,EAAUjlE,aAAe,OAASilE,EAAUjlE,aAAe,OAASklE,EAAW,IAChGF,GAASvM,wBAAwByM,GAG3C,MAAOxkF,GAGD6/E,GAAAx5E,UAAAqsD,gBAAP,SAAuB99C,EAA8BlL,EAAe+N,GAEnE9Q,EAAAN,UAAMqsD,gBAAevyD,KAAA2F,KAAC8O,EAAYlL,EAAQ+N,EAE1C,IAAI3R,KAAK06E,YAAc,KACtB16E,KAAK06E,WAAW9tB,gBAAgB99C,GAK3BirE,GAAAx5E,UAAAiQ,WAAP,SAAkB5M,GAEjB/C,EAAAN,UAAMiQ,WAAUnW,KAAA2F,KAAC4D,EAEjB,IAAI5D,KAAK06E,YAAc,KAAM,CAC5B16E,KAAK06E,WAAWtwE,SAASpK,KAAK4+E,QAE9B,IAAI5+E,KAAKy6E,QAAQhnE,eAAiB,EACjCzT,KAAKy6E,QAAQ7oB,qBAAqB5xD,KAAK26E,yBAA2B36E,KAAKy6E,QAAQhnE,mBAC1E,IAAIzT,KAAKy6E,QAAQnrB,mBAAqB,EAAG,CAC/C,GAAIxtC,GAAe9hB,KAAK26E,uBACxB,IAAIvqE,GAAoBpQ,KAAKy6E,QAAQ7oB,oBACrCxhD,GAAK0R,GAAS9hB,KAAKo+E,SACnBhuE,GAAK0R,EAAQ,GAAK9hB,KAAKq+E,SACvBjuE,GAAK0R,EAAQ,GAAK9hB,KAAKs+E,SACvBluE,GAAK0R,EAAQ,GAAK9hB,KAAKu+E,WAG1B,OAAAxE,IAtHuCoE,EAAAU,SAA1BzkF,GAAA2/E,kBAAiBA,IrIsqc3B+E,2BAA2B,2CAA2CC,iCAAiC,iDAAiDxxB,oCAAoCnuD,YAAY4/E,uDAAuD,SAAS1lF,EAAQkB,EAAOJ,GAC1R,kBACM6kF,+CAA+C,SAAS3lF,EAAQkB,EAAOJ,GAC7E,kBACM8kF,kDAAkD,SAAS5lF,EAAQkB,EAAOJ,GAChF,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IsIpscnF,IAAAuL,GAAAtS,EAAiC,yCASjC,IAAAk7D,GAAAl7D,EAA4B,yBAa5B,IAAAulF,GAAA,SAAAh+E,GAA8Bd,EAAA8+E,EAAAh+E,EA+D7B,SAAAg+E,GAAYl7E,EAAuB6/D,EAAkBn0D,EAAgCvO,GAEpFD,EAAAxG,KAAA2F,KAxDOA,MAAAm/E,eAAyB,IACzBn/E,MAAAy7E,kBAA4B,KAyDnCz7E,MAAK4+E,QAAUj7E,CACf3D,MAAKwT,SAAWgwD,CAChBxjE,MAAK6tE,eAAiBx+D,CACtBrP,MAAKqI,OAASvH,EA1DfN,OAAA+B,eAAWs8E,EAAAt+E,UAAA,UtIyrcJiC,IsIzrcP,WAEC,MAAOxC,MAAKy6E,StI0rcN73E,WAAY,KACZC,aAAc,MsIxrcrBrC,QAAA+B,eAAWs8E,EAAAt+E,UAAA,gBtI2rcJiC,IsI3rcP,WAEC,MAA0BxC,MAAKwT,SAASiH,ctI4rclC7X,WAAY,KACZC,aAAc,MsIvrcrBrC,QAAA+B,eAAWs8E,EAAAt+E,UAAA,iBtI6rcJiC,IsI7rcP,WAEC,MAAOxC,MAAKm/E,gBtI8rcN18E,IsI3rcP,SAAyBC,GAExB,GAAI1C,KAAKm/E,gBAAkBz8E,EAC1B,MAED1C,MAAKm/E,eAAiBz8E,CAEtB1C,MAAKsuB,ctI0rcC1rB,WAAY,KACZC,aAAc,MsInrcrBrC,QAAA+B,eAAWs8E,EAAAt+E,UAAA,oBtI2rcJiC,IsI3rcP,WAEC,MAAOxC,MAAKy7E,mBtI4rcNh5E,IsIzrcP,SAA4BC,GAE3B,GAAI1C,KAAKy7E,mBAAqB/4E,EAC7B,MAED1C,MAAKy7E,kBAAoB/4E,CAEzB1C,MAAKsuB,ctIwrcC1rB,WAAY,KACZC,aAAc,MsIzqcdg8E,GAAAt+E,UAAA0jE,cAAP,SAAqB5D,EAAqBv+C,GAAA,GAAAA,QAAA,GAAgB,CAAhBA,EAAA,EAEzC,MAAO9hB,MAAK4+E,QAAQ3a,cAAc5D,EAASv+C,GAMrC+8D,GAAAt+E,UAAA+tB,WAAP,WAECtuB,KAAKy6E,QAAQ7hB,mBAEb54D,MAAK0U,cAAc,GAAI8/C,GAAAR,UAAUQ,EAAAR,UAAUE,WAAYl0D,OAOjD6+E,GAAAt+E,UAAAyC,QAAP,WAEChD,KAAK4+E,QAAU,IACf5+E,MAAKwT,SAAW,IAChBxT,MAAK6tE,eAAiB,IACtB7tE,MAAKqI,OAAS,IAEd,IAAIrI,KAAKy6E,QAAS,CACjBz6E,KAAKy6E,QAAQz3E,SACbhD,MAAKy6E,QAAU,MAeVoE,GAAAt+E,UAAAqsD,gBAAP,SAAuB99C,EAA8BlL,EAAe+N,GAEnE3R,KAAKy6E,QAAQ7tB,gBAAgB99C,EAAYlL,EAAQ+N,GAU3CktE,GAAAt+E,UAAAiQ,WAAP,SAAkB5M,GAEjB5D,KAAKy6E,QAAQjqE,WAAW5M,GASlBi7E,GAAAt+E,UAAAmQ,aAAP,WAEC1Q,KAAKy6E,QAAQ/pE,eAGPmuE,GAAAt+E,UAAA0tD,sBAAP,SAA6Bv+C,GAE5B1P,KAAK4+E,QAAQ3wB,sBAAsBv+C,EAEnC,IAAI1P,KAAKy7E,kBACR/rE,EAAO2+C,wBAIFwwB,GAAAt+E,UAAA0uE,mBAAP,SAA0Bv/D,IAKnBmvE,GAAAt+E,UAAAwzE,2BAAP,SAAkCrkE,EAAmB0J,EAAmCC,GAEvF,MAAO,GAGDwlE,GAAAt+E,UAAAyzE,6BAAP,SAAoCtkE,EAAmB0J,EAAmCC,GAEzF,MAAO,GAGDwlE,GAAAt+E,UAAA4tD,gBAAP,SAAuBz+C,EAAmB0J,EAAmCC,GAE5E,MAAO,GAGDwlE,GAAAt+E,UAAA8uD,kBAAP,SAAyB3/C,EAAmB0J,EAAmCC,GAE9E,MAAO,GAGDwlE,GAAAt+E,UAAAy0E,sBAAP,SAA6BtlE,EAAmB0J,EAAmCC,GAElF,MAAO,GAGDwlE,GAAAt+E,UAAA00E,wBAAP,SAA+BvlE,EAAmB0J,EAAmCC,GAEpF,MAAO,GAET,OAAAwlE,IA3L8BjzE,EAAAyL,gBAAjBjd,GAAAykF,SAAQA,ItI00clBO,yBAAyB,yCAAyC5nE,yCAAyCpY,YAAYigF,kCAAkC,SAAS/lF,EAAQkB,EAAOJ,GACpL,YuIl2cA,IAAAs/E,GAAApgF,EAAmC,sCAA3Bc,GAAA2/E,kBAAAL,EAAAK,iBAGR,IAAAoE,GAAA7kF,EAA4B,6BAApBc,GAAAykF,SAAAV,EAAAU,QACR,IAAAS,GAAAhmF,EAAwC,qCAAhCc,GAAAwC,wBAAA0iF,EAAA1iF,uBACR,IAAAmK,GAAAzN,EAAkC,6BAA1Bc,GAAA4M,gBAAAD,EAAAC,eACR,IAAAQ,GAAAlO,EAAoC,gCAA5Bc,GAAAqN,mBAAAD,EAAAC,kBACR,IAAA83E,GAAAjmF,EAAkC,8BAA1Bc,GAAA0C,iBAAAyiF,EAAAziF,gBACR,IAAA68E,GAAArgF,EAAiC,4BAAzBc,GAAAggF,eAAAT,EAAAS,cACR,IAAAI,GAAAlhF,EAAoC,gCAA5Bc,GAAA6gF,mBAAAT,EAAAS,kBAER,IAAA/uE,GAAA5S,EAA+B,yBAAvBc,GAAAsC,YAAAwP,EAAAxP,cvI02cL8iF,qCAAqC,yDAAyDl4E,6BAA6B,iDAAiDI,gCAAgC,oDAAoD+3E,8BAA8B,kDAAkDC,4BAA4B,gDAAgDC,gCAAgC,oDAAoDpoE,yBAAyB,6CAA6CqoE,sCAAsC,0DAA0DC,6BAA6B,mDAAmDC,qDAAqD,SAASxmF,EAAQkB,EAAOJ,GACtzB,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IwIp3cnF,IAAA0/E,GAAAzmF,EAA8B,0CAS9B,IAAA0mF,GAAA1mF,EAAgC,6BAMhC,IAAAgE,GAAA,SAAAuD,GAAwCd,EAAAzC,EAAAuD,EAQvC,SAAAvD,GAAY2iF,EAAiCvwE,GAE5C7O,EAAAxG,KAAA2F,KAAMigF,EAAiBvwE,EAEvB1P,MAAKkgF,iBAAmBD,EAGlB3iF,EAAAiD,UAAAmsD,QAAP,SAAevkD,GAEdtH,EAAAN,UAAMmsD,QAAOryD,KAAA2F,KAACmI,EAEdnI,MAAKkgF,iBAAmB,KAYlB5iF,GAAAiD,UAAA8uD,kBAAP,SAAyBurB,EAAiC4D,EAA8BC,EAA8B0B,GAErH,GAAIjmF,GAAc,EAClB,IAAIkmF,GAAc,MAClB,IAAI7qD,GAAgB,EACpB,IAAItsB,GAAgB,kBAEpB,IAAI4xB,EAGJ,IAAI76B,KAAKkgF,iBAAiBG,aAAeN,EAAAO,YAAYC,gBAAiB,CACrE1lD,EAAO2jD,EAAS9mB,2BAChBx9D,IAAQ,OAAS2gC,EAAO,QAAUslD,EAAW,KAAOA,EAAW,IAC/DjmF,IAAQ,OAAS2gC,EAAO,QAAUslD,EAAW,KAAOA,EAAW,IAC/DjmF,IAAQ,OAAS2gC,EAAO,OAASA,EAAO,OAASA,EAAO,MACxD3gC,IAAQ,OAAS2gC,EAAO,OAASA,EAAO,OAASA,EAAO,MACxD3gC,IAAQ,OAAS2gC,EAAO,OAASA,EAAO,OAASA,EAAO,MACxDslD,GAAWtlD,EAIZ,GAAI76B,KAAKy6E,QAAQrN,aAAc,CAC9B,GAAIoT,GAAmChC,EAASzmB,yBAChD/3D,MAAKygF,cAAgBD,EAAW1+D,MAAM,CACtC+Y,GAAO2jD,EAAS9mB,2BAEhBx9D,IAAQ,OAAS2gC,EAAO,KAAOslD,EAAW,KAAOK,EAAa,OAC9DtmF,IAAQ,OAAS2gC,EAAO,KAAOA,EAAO,KAAO2lD,EAAa,OAC1DL,GAAWtlD,EAGZ76B,KAAK0gF,YAAc1gF,KAAKy6E,QAAQxW,cAAcjkE,KAAKkgF,iBAAkB,EAErE,IAAIS,GAAmC3gF,KAAK4gF,cAAc5gF,KAAK0gF,YAAalC,EAAUC,EACtFz+E,MAAK6gF,cAAgBF,EAAW7+D,KAEhC5nB,IAAQ,OAAS0gF,EAAY,KAAOuF,EAAW,KAAOQ,EAAa,QAAU13E,EAAS,IAAMssB,EAAS6qD,EAAO,KAE5G,OAAOlmF,GAGDoD,GAAAiD,UAAA6J,SAAP,SAAgBzG,GAEf,GAAIogE,GAAsCpgE,EAAOi/D,SAAS5iE,KAAK0gF,YAC/D3c,GAAQ35D,SAASpK,KAAK6gF,cAEtB,IAAI/c,GAAmBngE,EAAOg/D,OAAO3iE,KAAK0gF,YAC1C5c,GAAM15D,SAASpK,KAAK6gF,cAAe9c,EAAQ+c,SAAS3W,OAEpD,IAAInqE,KAAKy6E,QAAQrN,aAAc,CAC9B,GAAItrD,GAAe9hB,KAAKygF,aACxB,IAAIrwE,GAAoBpQ,KAAKy6E,QAAQ7oB,oBACrC,KAAKmS,EAAQ+c,SAASlE,UAAW,CAChCxsE,EAAK0R,GAAS,CACd1R,GAAK0R,EAAQ,GAAK,CAClB1R,GAAK0R,EAAQ,GAAK,CAClB1R,GAAK0R,EAAQ,GAAK,MACZ,CACN1R,EAAK0R,GAASiiD,EAAQ+c,SAASlE,UAAU76E,KACzCqO,GAAK0R,EAAQ,GAAKiiD,EAAQ+c,SAASlE,UAAUx6E,MAC7CgO,GAAK0R,EAAQ,GAAKiiD,EAAQ+c,SAASlE,UAAUluE,CAC7C0B,GAAK0R,EAAQ,GAAKiiD,EAAQ+c,SAASlE,UAAUhuE,IAOzCtR,GAAAiD,UAAAqsD,gBAAP,SAAuB99C,GAEtB,GAAIi1D,GAAsCj1D,EAAW8zD,SAAS5iE,KAAK0gF,YAEnE,IAAI3c,EACHA,EAAQ35D,SAASpK,KAAK6gF,cAEvB,IAAI/c,GAAmBh1D,EAAW6zD,OAAO3iE,KAAK0gF,YAE9C,IAAI5c,EACHA,EAAM15D,SAASpK,KAAK6gF,cAAe9c,EAAQ+c,SAAS3W,OAErD,IAAInqE,KAAKy6E,QAAQrN,cAAgBrJ,EAAS,CACzC,GAAIjiD,GAAe9hB,KAAKygF,aACxB,IAAIrwE,GAAoBpQ,KAAKy6E,QAAQ7oB,oBACrC,KAAKmS,EAAQ+c,SAASlE,UAAW,CAChCxsE,EAAK0R,GAAS,CACd1R,GAAK0R,EAAQ,GAAK,CAClB1R,GAAK0R,EAAQ,GAAK,CAClB1R,GAAK0R,EAAQ,GAAK,MACZ,CACN1R,EAAK0R,GAASiiD,EAAQ+c,SAASlE,UAAU76E,KACzCqO,GAAK0R,EAAQ,GAAKiiD,EAAQ+c,SAASlE,UAAUx6E,MAC7CgO,GAAK0R,EAAQ,GAAKiiD,EAAQ+c,SAASlE,UAAUluE,CAC7C0B,GAAK0R,EAAQ,GAAKiiD,EAAQ+c,SAASlE,UAAUhuE,IAKjD,OAAAtR,IAhIwC0iF,EAAAe,eAA3B3mF,GAAAkD,mBAAkBA,IxIg9c5B0jF,6BAA6B,gDAAgDC,0CAA0C7hF,YAAY8hF,uDAAuD,SAAS5nF,EAAQkB,EAAOJ,GACrN,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IyI99cnF,IAAA2/E,GAAA1mF,EAAgC,6BAMhC,IAAAkE,GAAA,SAAAqD,GAA0Cd,EAAAvC,EAAAqD,EAMzC,SAAArD,GAAY2jF,EAAqCzxE,GAEhD7O,EAAAxG,KAAA2F,KAAMmhF,EAAmBzxE,EAEzB1P,MAAKohF,mBAAqBD,EAIpB3jF,EAAA+C,UAAAmsD,QAAP,SAAevkD,GAEdtH,EAAAN,UAAMmsD,QAAOryD,KAAA2F,KAACmI,EAEdnI,MAAKohF,mBAAqB,KAGpB5jF,GAAA+C,UAAA0tD,sBAAP,SAA6BozB,GAAA,GAAAA,QAAA,GAA2B,CAA3BA,EAAA,KAE5B,GAAIA,EACHrhF,KAAKy6E,QAAQ9M,qBAAuB,KAY/BnwE,GAAA+C,UAAA8uD,kBAAP,SAAyBurB,EAAiC4D,EAA8BC,EAA8B0B,GAErH,GAAI5qD,GAAgB,EACpB,IAAItsB,GAAgB,kBAEpBjJ,MAAK0gF,YAAc1gF,KAAKy6E,QAAQxW,cAAcjkE,KAAKohF,mBAAoB,EAEvE,IAAIT,GAAmC3gF,KAAK4gF,cAAc5gF,KAAK0gF,YAAalC,EAAUC,EACtFz+E,MAAK6gF,cAAgBF,EAAW7+D,KAEhC,OAAO,OAAS84D,EAAY,KAAOuF,EAAW,KAAOQ,EAAa,UAAYprD,EAAStsB,EAAS;CAI1FzL,GAAA+C,UAAA6J,SAAP,SAAgBzG,GAEf,GAAIogE,GAA0CpgE,EAAOi/D,SAAS5iE,KAAK0gF,YAEnE,IAAI3c,EACHA,EAAQ35D,SAASpK,KAAK6gF,cAEvB,IAAIl9E,EAAOg/D,OAAO3iE,KAAK0gF,aACtB/8E,EAAOg/D,OAAO3iE,KAAK0gF,aAAat2E,SAASpK,KAAK6gF,cAAe9c,EAAQ+c,SAAS3W,QAIzE3sE,GAAA+C,UAAAqsD,gBAAP,SAAuB99C,GAEtB,GAAIi1D,GAA0Cj1D,EAAW8zD,SAAS5iE,KAAK0gF,YAEvE,IAAI3c,EACHA,EAAQ35D,SAASpK,KAAK6gF,cAEvB,IAAI/xE,EAAW6zD,OAAO3iE,KAAK0gF,cAAgB3c,EAC1Cj1D,EAAW6zD,OAAO3iE,KAAK0gF,aAAat2E,SAASpK,KAAK6gF,cAAe9c,EAAQ+c,SAAS3W,QAErF,OAAA3sE,IAxE0CwiF,EAAAe,eAA7B3mF,GAAAoD,qBAAoBA,IzIghd9BwjF,6BAA6B,kDAAkDM,iDAAiD,SAAShoF,EAAQkB,EAAOJ,GAC3J,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,I0IvidnF,IAAAgY,GAAA/e,EAAoC,6CAIpC,IAAAwxD,GAAAxxD,EAAiC,0CAEjC,IAAAioF,GAAAjoF,EAAsC,iDAgBtC,IAAAynF,GAAA,SAAAlgF,GAAoCd,EAAAghF,EAAAlgF,EAMnC,SAAAkgF,GAAY1gB,EAAqB3wD,GAEhC7O,EAAAxG,KAAA2F,KAAMqgE,EAAS3wD,EAEf1P,MAAKq7E,SAAWhb,CAChBrgE,MAAKy6E,QAAU/qE,CACf1P,MAAKqI,OAASqH,EAAOrH,OAMf04E,EAAAxgF,UAAAmsD,QAAP,SAAevkD,GAEdtH,EAAAN,UAAMmsD,QAAOryD,KAAA2F,KAACmI,EAEdnI,MAAKq7E,SAAW,IAChBr7E,MAAKy6E,QAAU,IACfz6E,MAAKqI,OAAS,KAGR04E,GAAAxgF,UAAA8uD,kBAAP,SAAyBurB,EAAiC4D,EAA8BC,EAA8B0B,GAAA,GAAAA,QAAA,GAAqC,CAArCA,EAAA,KAErH,KAAM,IAAI9nE,GAAAiB,oBAGJynE,GAAAxgF,UAAAqsD,gBAAP,SAAuB99C,IAKhBiyE,GAAAxgF,UAAA6J,SAAP,SAAgBzG,IAKTo9E,GAAAxgF,UAAAqgF,cAAP,SAAqBY,EAAmBhD,EAA8BC,GAErE,GAAI38D,GAAe9hB,KAAKy6E,QAAQ7M,aAAa70D,QAAQyoE,EAErD,IAAI1/D,IAAU,EAAG,CAChB,GAAI6+D,GAAmCnC,EAAS3mB,mBAChD4mB,GAAUtjF,SAASyK,KAAK+6E,EACxB3gF,MAAKy6E,QAAQ7M,aAAahoE,KAAK47E,EAE/B,OAAOb,GAGR,MAAOlC,GAAUtjF,SAAS2mB,GAGpBi/D,GAAAxgF,UAAAkhF,gBAAP,SAAuB3d,GAEtB,OAAQA,EAAMvuC,QACb,IAAKgsD,GAAAG,uBAAuBC,WAC3B,MAAO,OACR,KAAKJ,GAAAG,uBAAuBE,iBAC3B,MAAO,OACR,SACC,MAAO,IAGX,OAAAb,IApEoCj2B,EAAAwC,gBAAvBlzD,GAAA2mF,eAAcA,I1I4kdxB7mE,6CAA6C9a,UAAUouD,0CAA0CpuD,UAAUyiF,iDAAiDziF,YAAY0iF,kCAAkC,SAASxoF,EAAQkB,EAAOJ,GACrO,Y2InmdA,IAAA2nF,GAAAzoF,EAAoC,gCAA5Bc,GAAAkD,mBAAAykF,EAAAzkF,kBACR,IAAA0kF,GAAA1oF,EAAqC,kCAA7Bc,GAAAoD,qBAAAwkF,EAAAxkF,oBACR,IAAAwiF,GAAA1mF,EAAiC,4BAAzBc,GAAA2mF,eAAAf,EAAAe,iB3IwmdLkB,gCAAgC,oDAAoDC,kCAAkC,sDAAsDC,4BAA4B,kDAAkDC,8CAA8C,SAAS9oF,EAAQkB,EAAOJ,GACnU,Y4I3mdA,IAAA0lE,GAAAxmE,EAAmC,8CACnC,IAAAkS,GAAAlS,EAAgC,qCAIhC,IAAA+C,GAAA/C,EAAmC,+CACnC,IAAA+oF,GAAA/oF,EAA2B,oCAO3B,IAAAgpF,GAAA,WAiBC,QAAAA,GAAYC,EAA8BC,EAAgCC,GAA9D,GAAAF,QAAA,GAA4B,CAA5BA,EAAA,MAA8B,GAAAC,QAAA,GAA8B,CAA9BA,EAAA,MAAgC,GAAAC,QAAA,GAA2B,CAA3BA,EAAA,MAEzEziF,KAAK0iF,cAAgBH,CACrBviF,MAAK2iF,gBAAkBH,CACvBxiF,MAAK4iF,aAAeH,EAMrBjiF,OAAA+B,eAAW+/E,EAAA/hF,UAAA,kB5I4ldJiC,I4IvldP,WAEC,MAAOxC,MAAK2iF,iB5I2ldNlgF,I4IlmdP,SAA0BvC,GAEzBF,KAAK2iF,gBAAkBziF,G5ImmdjB0C,WAAY,KACZC,aAAc,M4IzldrBrC,QAAA+B,eAAW+/E,EAAA/hF,UAAA,gB5I4ldJiC,I4IvldP,WAEC,MAAOxC,MAAK0iF,e5I2ldNjgF,I4IlmdP,SAAwBvC,GAEvBF,KAAK0iF,cAAgBxiF,G5Immdf0C,WAAY,KACZC,aAAc,M4IzldrBrC,QAAA+B,eAAW+/E,EAAA/hF,UAAA,e5I4ldJiC,I4IvldP,WAEC,MAAOxC,MAAK4iF,c5I2ldNngF,I4IlmdP,SAAuBvC,GAEtBF,KAAK4iF,aAAe1iF,G5Immdd0C,WAAY,KACZC,aAAc,M4Iplddy/E,GAAA/hF,UAAAsiF,iBAAP,SAAwBC,EAAiBC,GAExC/iF,KAAK4c,OAGL5c,MAAKgjF,eAAeF,EAAUC,EAG9B/iF,MAAKijF,QAAQH,EAAU,MAGvB9iF,MAAKkjF,MAAMJ,EAAU9iF,KAAK2iF,iBASpBL,GAAA/hF,UAAA4iF,eAAP,SAAsBL,EAAiBM,GAEtCpjF,KAAK4c,OAEL,KAAKwmE,EAAQ9oF,OACZ,MAGD,KAAK,GAAIP,GAAW,EAAGA,EAAIqpF,EAAQ9oF,OAAQP,IAC1C,GAAIqpF,EAAQrpF,IAAM+oF,EACjB9iF,KAAKijF,QAAQG,EAAQrpF,GAAIiG,KAAK2iF,gBAGhC3iF,MAAKijF,QAAQH,EAAU,MAGvB9iF,MAAKkjF,MAAMJ,EAAU9iF,KAAK2iF,iBASpBL,GAAA/hF,UAAAgwD,MAAP,SAAauyB,EAAiB/lE,GAE7B/c,KAAK4c,OAGL5c,MAAKijF,QAAQlmE,EAAQ/c,KAAK2iF,gBAG1B3iF,MAAKijF,QAAQH,EAAU,MAGvB9iF,MAAKkjF,MAAMJ,EAAU9iF,KAAK2iF,iBAGnBL,GAAA/hF,UAAAqc,MAAR,WAEC5c,KAAKqjF,WAAc,GAAIjiF,MACvBpB,MAAKsjF,YAAc,GAAIliF,OAGhBkhF,GAAA/hF,UAAA2iF,MAAR,SAAcK,EAAmBvgF,GAEhC,GAAIjJ,EAEJ,IAAIypF,EACJ,IAAIC,EAGJD,GAAeD,EAAW1lE,QAI1B4lE,GAAmBzjF,KAAKsjF,YAAYhpF,OAAS,CAE7C,KAAKP,EAAI,EAAGA,EAAIiG,KAAKsjF,YAAYhpF,OAAQP,IAAK,CAC7C,GAAIW,GAA4B,GAAI2B,GAAAe,iBAAiB,GAAI0iE,GAAAmB,iBACzDvmE,GAASsyB,kBAAoB,KAC7BtyB,GAASuyB,mBAAqB,KAE9B,IAAI7c,GAAiBpQ,KAAKsjF,YAAYvpF,EACtCW,GAAS62B,WAAWnhB,EAAKuW,QACzBjsB,GAASs/C,aAAa5pC,EAAKszE,SAC3BhpF,GAASwmE,WAAW9wD,EAAK0c,QACzBpyB,GAASymE,YAAY/wD,EAAK2c,SAC1BryB,GAAS0mE,OAAOhxD,EAAKqhB,IAErB,IAAIzxB,KAAK0iF,eAAiBe,EACzBD,EAAaG,WAAWjpF,EAAU0V,EAAKkwD,cAEvCkjB,GAAaG,WAAWjpF,GAG1B,GAAIsF,KAAK0iF,gBAAkBe,GAAmBzjF,KAAKsjF,YAAYhpF,OAC9DipF,EAAWjjB,SAAWtgE,KAAKsjF,YAAY,GAAGhjB,QAE3C,IAAIt9D,EAAS,CACZ,GAAImC,GAAanF,KAAKqjF,WAAW/oF,MACjC,KAAK,GAAIP,GAAUA,EAAIoL,EAAKpL,IAC3BiG,KAAKqjF,WAAWtpF,GAAGiJ,UAGrBhD,KAAKqjF,WAAa,KAGXf,GAAA/hF,UAAA0iF,QAAR,SAAgBlmE,EAAe/Z,GAE9B,GAAI4gF,EACJ,IAAIC,EACJ,KAAKD,EAAS,EAAGA,EAAS7mE,EAAOc,SAAS2E,MAAOohE,IAAU,CAC1D,GAAI7pF,EACJ,IAAIoL,EACJ,IAAI2+E,GAAaC,EAAaC,EAAaC,EAAaC,CACxD,IAAIp3B,EACJ,IAAIpyD,EACJ,IAAI2jE,EACJ,IAAIqlB,EACJ,IAAI52D,EACJ,IAAIC,EACJ,IAAIo3D,EAEJzpF,GAA8BqiB,EAAOc,SAAS4E,aAAamhE,GAAQlpF,QAGnE2jE,GAAKr+D,KAAKokF,eAAernE,EAAOc,SAAS4E,aAAamhE,GAAQtjB,SAK9DojB,GAAY1jF,KAAiB,aAAGq+D,EAAGqlB,SAAW,GAAItiF,MAClD0rB,GAAW9sB,KAAiB,aAAGq+D,EAAGvxC,QAAU,GAAI1rB,MAChD2rB,GAAY/sB,KAAiB,aAAGq+D,EAAGtxC,SAAW,GAAI3rB,MAGlD2iF,GAAOL,EAASppF,MAChB0pF,GAAOl3D,EAAQxyB,MACf2pF,GAAOl3D,EAASzyB,MAChB4pF,GAAO7lB,EAAG5sC,IAAIn3B,MAEd0F,MAAKqkF,eAAe3pF,EAAS4yB,UAAWo2D,EAAUhpF,EAASkoB,YAAamhE,EACxE/jF,MAAKqkF,eAAe3pF,EAASoyB,QAASA,EAASpyB,EAASkoB,YAAaohE,EACrEhkF,MAAKqkF,eAAe3pF,EAASqyB,SAAUA,EAAUryB,EAASkoB,YAAaqhE,EACvEjkF,MAAKqkF,eAAe3pF,EAAS+2B,IAAK4sC,EAAG5sC,IAAK/2B,EAASkoB,YAAashE,EAGhEp3B,IAAgB9sD,KAAK4iF,aAAevkB,EAAGqlB,SAASppF,OAAO,EAAG,CAC1DwpF,GAAOzlB,EAAG13C,QAAQrsB,MAClB6K,GAAMzK,EAASwb,WACfiuE,GAAMzpF,EAASisB,QAAQnkB,IAAI2C,EAC3B,KAAKpL,EAAI,EAAGA,EAAIoL,EAAKpL,IAAK,CACzB8pF,EAAO9pF,EAAE,CACTskE,GAAG13C,QAAQm9D,KAAUK,EAAIN,GAAQ/2B,CACjCuR,GAAG13C,QAAQm9D,KAAUK,EAAIN,EAAO,GAAK/2B,CACrCuR,GAAG13C,QAAQm9D,KAAUK,EAAIN,EAAO,GAAK/2B,EAGtC,IAAK9sD,KAAK4iF,aAAc,CACvB7lE,EAAO3L,eAAekzE,iBAAiBZ,EAAUA,EACjDl4E,GAAA6F,cAAckzE,sBAAsBxnE,EAAO3L,eAAgB0b,EAASA,EACpEthB,GAAA6F,cAAckzE,sBAAsBxnE,EAAO3L,eAAgB2b,EAAUA,EAGrEg3D,GAAO1lB,EAAGqlB,SAASppF,MACnB0pF,GAAO3lB,EAAGvxC,QAAQxyB,MAClB2pF,GAAO5lB,EAAGtxC,SAASzyB,MACnB6K,GAAMu+E,EAASppF,MACf,KAAKP,EAAI,EAAGA,EAAIoL,EAAKpL,IAAK,CACzBskE,EAAGqlB,SAASK,KAAUL,EAAS3pF,EAC/BskE,GAAGvxC,QAAQk3D,KAAUl3D,EAAQ/yB,EAC7BskE,GAAGtxC,SAASk3D,KAAUl3D,EAAShzB,KAKlC,GAAIiJ,EACHhD,KAAKqjF,WAAWz9E,KAAKmX,GAGfulE,GAAA/hF,UAAA8jF,eAAR,SAAuBG,EAA2BC,EAAqBjiE,EAAckiE,GAEpF,GAAIhB,GAA2Bc,EAAWhiF,IAAIggB,EAC9C,IAAImiE,GAAaH,EAAW92D,UAC5B,IAAIE,GAAgB42D,EAAW52D,MAC/B,IAAIzoB,GAAaqd,EAAMoL,CAEvB,KAAK,GAAI7zB,GAAW,EAAGA,EAAIoL,EAAKpL,GAAK6zB,EACpC,IAAK,GAAI7W,GAAW,EAAGA,EAAI4tE,EAAK5tE,IAC/B0tE,EAAMC,KAAgBhB,EAAS3pF,EAAIgd,GAG9BurE,GAAA/hF,UAAA6jF,eAAR,SAAuB9jB,GAEtB,GAAIlwD,EAEJ,IAAIpQ,KAAK0iF,cAAe,CACvB,GAAI3oF,EACJ,IAAIoL,EAEJA,GAAMnF,KAAKsjF,YAAYhpF,MACvB,KAAKP,EAAI,EAAGA,EAAIoL,EAAKpL,IAAK,CACzB,GAAIiG,KAAKsjF,YAAYvpF,GAAGumE,UAAYA,EAAU,CAC7ClwD,EAAOpQ,KAAKsjF,YAAYvpF,EACxB,aAGI,IAAIiG,KAAKsjF,YAAYhpF,OAAQ,CAGnC8V,EAAOpQ,KAAKsjF,YAAY,GAIzB,IAAKlzE,EAAM,CACVA,EAAO,GAAIw0E,EACXx0E,GAAKszE,SAAW,GAAItiF,MACpBgP,GAAK0c,QAAU,GAAI1rB,MACnBgP,GAAK2c,SAAW,GAAI3rB,MACpBgP,GAAKqhB,IAAM,GAAIrwB,MACfgP,GAAKuW,QAAU,GAAIvlB,MACnBgP,GAAKkwD,SAAWA,CAEhBtgE,MAAKsjF,YAAY19E,KAAKwK,GAGvB,MAAOA,GAGAkyE,GAAA/hF,UAAAyiF,eAAR,SAAuBF,EAAiB+B,GAEvC,GAAIC,EACJ,IAAI/qF,EAEJ,IAAI8qF,YAAkBxC,GAAA0C,QAAUF,GAAoC/B,EACnE9iF,KAAKijF,QAAiB4B,EAAQ7kF,KAAK2iF,gBAEpC,KAAK5oF,EAAI,EAAGA,EAAI8qF,EAAOluE,cAAe5c,EAAG,CACxC+qF,EAAiCD,EAAOG,WAAWjrF,EACnDiG,MAAKgjF,eAAeF,EAAUgC,IAGjC,OAAAxC,KA3TaloF,GAAAkoF,MAAKA,CA6TlB,IAAAsC,GAAA,WAAA,QAAAA,MAQA,MAAAA,KARaxqF,GAAAwqF,UAASA,I5IkjdnBljB,8CAA8CtiE,UAAUsY,qCAAqCtY,UAAU6lF,oCAAoC7lF,UAAUK,+CAA+CL,YAAY8lF,8DAA8D,SAAS5rF,EAAQkB,EAAOJ,GACzS,Y6Iv3dA,IAAA+qF,GAAA,WAAA,QAAAA,MAMC3kF,OAAA+B,eAAW4iF,EAAA5kF,UAAA,mB7Iy3dJiC,I6Iv2dP,WAEC,MAAOxC,MAAKolF,yB7Iw2dN3iF,I6I53dP,SAA2BC,GAE1B1C,KAAKolF,wBAA0B1iF,CAC/B1C,MAAKqlF,2BAA6B3iF,EAAMib,OACxC3d,MAAKqlF,2BAA2B5zB,QAChCzxD,MAAKqlF,2BAA2BC,a7I63d1B1iF,WAAY,KACZC,aAAc,M6I33drBrC,QAAA+B,eAAW4iF,EAAA5kF,UAAA,e7I83dJiC,I6Iz3dP,WAEC,MAAOxC,MAAKulF,qB7I03dN9iF,I6Ij4dP,SAAuBC,GAEtB1C,KAAKulF,oBAAsB7iF,G7Ik4drBE,WAAY,KACZC,aAAc,M6It3drBrC,QAAA+B,eAAW4iF,EAAA5kF,UAAA,sB7Iy3dJiC,I6Iz3dP,WAEC,MAAOxC,MAAKqlF,4B7I03dNziF,WAAY,KACZC,aAAc,M6Iz3dtB,OAAAsiF,KAjCa/qF,GAAA+qF,0BAAyBA,O7I+5dhCK,+BAA+B,SAASlsF,EAAQkB,EAAOJ,GAC7D,Y8It6dA,IAAAqrF,GAAAnsF,EAA0B,yBAAlBc,GAAAkoF,MAAAmD,EAAAnD,KACR,IAAAoD,GAAApsF,EAAyC,yCAAjCc,GAAA+qF,0BAAAO,EAAAP,4B9I06dLQ,yBAAyB,6CAA6CC,yCAAyC,+DAA+DC,sDAAsD,SAASvsF,EAAQkB,EAAOJ,GAC/P,Y+I56dA,IAAA0lE,GAAAxmE,EAAmC,8CAGnC,IAAAmS,GAAAnS,EAA0B,6BAC1B,IAAAqS,GAAArS,EAA6B,gCAE7B,IAAAwsF,GAAAxsF,EAAgC,iDAEhC,IAAA+C,GAAA/C,EAAmC,+CAQnC,IAAAysF,GAAA,WAAA,QAAAA,MAIeA,EAAAC,iBAAd,SAA+BC,EAAiBC,EAA+BC,GAAA,GAAAA,QAAA,GAAkD,CAAlDA,EAAA,KAE9E,GAAIC,GAAqC,GAAIhlF,MAC7C,IAAIilF,GAAuC,GAAIjlF,MAC/C,IAAIklF,GAAqC,GAAIllF,MAC7C,IAAImlF,GAAsC,GAAInlF,MAC9C,IAAIolF,GAAiC,GAAIplF,MACzC,IAAIqlF,GAA+B,GAAIrlF,MACvC,IAAIyhB,GAAgC,GAAIzhB,MACxC,IAAIslF,GAAwC,GAAItlF,MAChD,IAAI2hB,GAAsBmjE,EAAc5rF,MAExC,IAAIqsF,EACJ,IAAI3oE,EACJ,IAAI4oE,EACJ,IAAIjgE,EACJ,IAAI2G,EACJ,IAAIR,EACJ,IAAIC,EACJ,IAAI0E,EACJ,IAAIo1D,EACJ,IAAInsF,EACJ,IAAIX,EACJ,IAAIgd,EACJ,IAAI+vE,GAA2B,GAAI1lF,MAEnC,IAAI2lF,GAAsB,GAAIp7E,GAAAiB,QAC9B,IAAIo6E,GAAsB,GAAIr7E,GAAAiB,QAC9B,IAAIq6E,GAAwB,GAAIt7E,GAAAiB,QAChC,IAAIs6E,GAAe,GAAIz7E,GAAA6B,KAEvB,KAAKvT,EAAI,EAAGA,EAAIgpB,EAAchpB,IAAK,CAClC4sF,EAAiBT,EAAcnsF,EAC/B6sF,GAAcD,EAAenkE,KAC7B,KAAK,GAAIsH,GAAkB,EAAGA,EAAW88D,EAAa98D,IAAY,CAEjE,GAAIg9D,EAAWxsF,QAAUwvB,EAAU,CAClCg9D,EAAWlhF,KAAK8gF,EAAcpsF,OAC9B8rF,GAAcxgF,KAAK,GAAIxE,OACvBilF,GAAgBzgF,KAAK,GAAIxE,OACzBklF,GAAc1gF,KAAK,GAAIxE,OACvBmlF,GAAe3gF,KAAK,GAAIxE,OACxBolF,GAAU5gF,KAAK,GAAIxE,OACnBslF,GAAc9gF,KAAK,GAAIvJ,GAAAe,iBAAiB,GAAI0iE,GAAAmB,kBAC5CwlB,GAAe7gF,KAAK,GAGrBoY,EAAoC2oE,EAAelkE,aAAaqH,GAAUpvB,QAG1E,IAAIsjB,EAAe4E,YAAc6jE,EAAeK,EAAWh9D,IAAai8D,EAAuBoB,WAAY,CAE1GL,EAAWh9D,GAAY48D,EAAcpsF,MACrC8rF,GAAcxgF,KAAK,GAAIxE,OACvBilF,GAAgBzgF,KAAK,GAAIxE,OACzBklF,GAAc1gF,KAAK,GAAIxE,OACvBmlF,GAAe3gF,KAAK,GAAIxE,OACxBolF,GAAU5gF,KAAK,GAAIxE,OACnBslF,GAAc9gF,KAAK,GAAIvJ,GAAAe,iBAAiB,GAAI0iE,GAAAmB,kBAC5CwlB,GAAe7gF,KAAK,GAGrBmR,EAAI+vE,EAAWh9D,EAGfnD,GAAUy/D,EAAcrvE,EACxBuW,GAAY+4D,EAAgBtvE,EAC5B+V,GAAUw5D,EAAcvvE,EACxBgW,GAAWw5D,EAAexvE,EAC1B0a,GAAM+0D,EAAUzvE,EAChB8vE,GAAgBJ,EAAe1vE,EAC/Brc,GAAWgsF,EAAc3vE,EAEzB,IAAIqwE,GAA4B,GAAItB,GAAAuB,YACpCD,GAAaxkE,YAAc5E,EAAe4E,WAC1CwkE,GAAavvD,iBAAmBgvD,CAChCO,GAAaljE,cAAgBnqB,CAC7BqtF,GAAa1sF,SAAWA,CACxBmoB,GAAUjd,KAAKwhF,EAEfX,GAAe1vE,IAAMiH,EAAe4E,WAEpC,IAAI5L,EACJ,IAAI8K,EACJ,IAAIwlE,EACJ,IAAIr1B,EACJ,IAAIC,EACJ,IAAIE,EAEJ,IAAIm1B,EACJ,IAAIC,GAA2BxpE,CAC/B,IAAIqP,EACJ,IAAIM,EACJ,IAAIJ,EACJ,IAAIM,EACJ,IAAIL,EACJ,IAAIM,EACJ,IAAI25D,EACJ,IAAI31D,EAEJ,IAAI01D,EAAS,CACZD,EAAUC,EAAQ5kE,WAClByK,GAAkBm6D,EAAQl6D,UAAU9qB,IAAI+kF,EACxC55D,GAAY65D,EAAQl6D,UAAUM,MAC9BL,GAAgBi6D,EAAQ16D,QAAQtqB,IAAI+kF,EACpC15D,GAAe25D,EAAQ16D,QAAQc,MAC/BJ,GAAiBg6D,EAAQz6D,SAASvqB,IAAI+kF,EACtCz5D,GAAgB05D,EAAQz6D,SAASa,MACjC65D,GAAYD,EAAQ/1D,IAAIjvB,IAAI+kF,EAC5Bz1D,GAAW01D,EAAQ/1D,IAAI7D,MAEvB,IAAIu4D,EAAY,CACf,GAAIuB,GAAsDvB,EAAWpsF,EACrE,IAAI4tF,IAA2BD,EAA0BC,eACzD,IAAIC,IAA8BF,EAA0BE,kBAC5D,IAAIC,IAAqBH,EAA0BG,WAEnD,KAAK7wE,EAAI,EAAGA,EAAIuwE,EAASvwE,IAAK,CAO7BswE,EAAWtwE,EAAE2W,CACbo5D,GAAWr4E,EAAI2e,EAAgBi6D,EAC/BP,GAAWn4E,EAAIye,EAAgBi6D,EAAW,EAC1CP,GAAWr6D,EAAIW,EAAgBi6D,EAAW,EAC1Cr1B,GAAcj7C,EAAE6W,CAChBm5D,GAAWt4E,EAAI6e,EAAc0kC,EAC7B+0B,GAAWp4E,EAAI2e,EAAc0kC,EAAc,EAC3C+0B,GAAWt6D,EAAIa,EAAc0kC,EAAc,EAC3CC,GAAel7C,EAAE8W,CACjBm5D,GAAav4E,EAAI8e,EAAe0kC,EAChC+0B,GAAar4E,EAAI4e,EAAe0kC,EAAe,EAC/C+0B,GAAav6D,EAAIc,EAAe0kC,EAAe,EAC/CE,GAAUp7C,EAAE8a,CACZo1D,GAAOx4E,EAAI+4E,EAAUr1B,EACrB80B,GAAOt4E,EAAI64E,EAAUr1B,EAAU,EAC/B,IAAIu1B,GAAiB,CACpBZ,EAAaY,GAAgBltC,gBAAgBssC,EAC7CC,GAAaY,GAAmBE,qBAAqBd,EACrDC,GAAeW,GAAmBE,qBAAqBd,GAExD,GAAIa,GACHX,EAASW,GAAYE,eAAeb,EAErC55D,GAAU1nB,KAAKmhF,EAAWr4E,EAAGq4E,EAAWn4E,EAAGm4E,EAAWr6D,EACtDI,GAAQlnB,KAAKohF,EAAWt4E,EAAGs4E,EAAWp4E,EAAGo4E,EAAWt6D,EACpDK,GAASnnB,KAAKqhF,EAAav4E,EAAGu4E,EAAar4E,EAAGq4E,EAAav6D,EAC3D+E,GAAI7rB,KAAKshF,EAAOx4E,EAAGw4E,EAAOt4E,QAErB,CACN,IAAKoI,EAAI,EAAGA,EAAIuwE,EAASvwE,IAAK,CAC7BswE,EAAWtwE,EAAE2W,CACbskC,GAAcj7C,EAAE6W,CAChBqkC,GAAel7C,EAAE8W,CACjBskC,GAAUp7C,EAAE8a,CAEZxE,GAAU1nB,KAAKynB,EAAgBi6D,GAAWj6D,EAAgBi6D,EAAW,GAAIj6D,EAAgBi6D,EAAW,GACpGx6D,GAAQlnB,KAAK2nB,EAAc0kC,GAAc1kC,EAAc0kC,EAAc,GAAI1kC,EAAc0kC,EAAc,GACrGllC,GAASnnB,KAAK4nB,EAAe0kC,GAAe1kC,EAAe0kC,EAAe,GAAI1kC,EAAe0kC,EAAe,GAC5GzgC,GAAI7rB,KAAK6hF,EAAUr1B,GAAUq1B,EAAUr1B,EAAU,UAG7C,EAIPm1B,EAAUvpE,EAAe9H,WACzB,IAAI8xE,IAA4BhqE,EAAe2I,QAAQnkB,IAAI+kF,EAC3D,KAAKvwE,EAAI,EAAGA,EAAIuwE,EAASvwE,IAAK,CAC7B8K,EAAQ9K,EAAE,CACV2P,GAAQ/gB,KAAKoiF,GAAclmE,GAAS+kE,EAAemB,GAAclmE,EAAQ,GAAK+kE,EAAemB,GAAclmE,EAAQ,GAAK+kE,KAK3HZ,EAAOpjE,UAAYA,CACnBojE,GAAOljE,aAAeA,CAEtBA,GAAe2jE,EAAcpsF,MAC7B,KAAKP,EAAI,EAAGA,EAAIgpB,EAAchpB,IAAK,CAClCW,EAAWgsF,EAAc3sF,EACzBW,GAASsyB,kBAAoB,KAC7BtyB,GAASuyB,mBAAqB,KAC9BvyB,GAAS62B,WAAW60D,EAAcrsF,GAClCW,GAASs/C,aAAaqsC,EAAgBtsF,GACtCW,GAASwmE,WAAWolB,EAAcvsF,GAClCW,GAASymE,YAAYolB,EAAexsF,GACpCW,GAAS0mE,OAAOolB,EAAUzsF,GAC1BksF,GAAOtC,WAAWjpF,IAjMNqrF,GAAAoB,WAAoB,KAoMnC,OAAApB,KAtMa3rF,GAAA2rF,uBAAsBA,I/I8lehCrkB,8CAA8CtiE,UAAUuY,6BAA6BvY,UAAUyY,gCAAgCzY,UAAU6oF,iDAAiD7oF,UAAUK,+CAA+CL,YAAY8oF,mDAAmD,SAAS5uF,EAAQkB,EAAOJ,GAC7U,YACA,IAAI2F,GAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GACrD,IAAK,GAAIC,KAAKD,GAAG,GAAIA,EAAEE,eAAeD,GAAIF,EAAEE,GAAKD,EAAEC,EACnD,SAASE,KAAOL,KAAKM,YAAcL,EACnCA,EAAEM,UAAYL,IAAM,KAAOM,OAAOC,OAAOP,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,IgJnnenF,IAAAkL,GAAAjS,EAA6B,gCAK7B,IAAA6uF,GAAA,SAAAtnF,GAAyCd,EAAAooF,EAAAtnF,EAExC,SAAAsnF,GAAY19C,GAAA,GAAAA,QAAA,GAAqB,CAArBA,EAAA,KAEX5pC,EAAAxG,KAAA2F,KAAMyqC,GAGA09C,EAAA5nF,UAAA6nF,yBAAP,SAAgCC,EAAqBC,EAAoBC,EAAcC,GAEtF,GAAIC,GAAgB,EAAE7kD,KAAK8kD,IAAIL,EAAa,EAC5C,IAAIM,GAAgBF,EAAOH,CAE3BtoF,MAAKkwE,QAAQ,GAAKyY,CAClB3oF,MAAKkwE,QAAQ,GAAK,CAClBlwE,MAAKkwE,QAAQ,GAAK,CAClBlwE,MAAKkwE,QAAQ,GAAK,CAElBlwE,MAAKkwE,QAAQ,GAAK,CAClBlwE,MAAKkwE,QAAQ,GAAKuY,CAClBzoF,MAAKkwE,QAAQ,GAAK,CAClBlwE,MAAKkwE,QAAQ,GAAK,CAElBlwE,MAAKkwE,QAAQ,GAAK,CAClBlwE,MAAKkwE,QAAQ,GAAK,CAClBlwE,MAAKkwE,QAAQ,IAAMsY,GAAMA,EAAOD,EAChCvoF,MAAKkwE,QAAQ,IAAM,CAEnBlwE,MAAKkwE,QAAQ,IAAM,CACnBlwE,MAAKkwE,QAAQ,IAAM,CACnBlwE,MAAKkwE,QAAQ,IAAOqY,EAAMC,GAAOD,EAAQC,EACzCxoF,MAAKkwE,QAAQ,IAAM,EAErB,OAAAiY,IAhCyC58E,EAAA6B,SAA5BhT,GAAA+tF,oBAAmBA,IhJipe7B1wE,gCAAgCrY,YAAYwpF,+BAA+B,SAAStvF,EAAQkB,EAAOJ,GACtG,YiJvpeA,IAAAyuF,GAAAvvF,EAAuC,iCAA/Bc,GAAA2rF,uBAAA8C,EAAA9C,sBACR,IAAA+C,GAAAxvF,EAAqC,8BAA7Bc,GAAA+tF,oBAAAW,EAAAX,sBjJ2peLY,iCAAiC,qDAAqDC,8BAA8B,yDAAyD",
  "file": "awayjs-renderergl.min.js",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\r\nvar animators = require(\"./lib/animators\");\r\nexports.animators = animators;\r\nvar elements = require(\"./lib/elements\");\r\nexports.elements = elements;\r\nvar errors = require(\"./lib/errors\");\r\nexports.errors = errors;\r\nvar events = require(\"./lib/events\");\r\nexports.events = events;\r\nvar filters = require(\"./lib/filters\");\r\nexports.filters = filters;\r\nvar managers = require(\"./lib/managers\");\r\nexports.managers = managers;\r\nvar renderables = require(\"./lib/renderables\");\r\nexports.renderables = renderables;\r\nvar shaders = require(\"./lib/shaders\");\r\nexports.shaders = shaders;\r\nvar sort = require(\"./lib/sort\");\r\nexports.sort = sort;\r\nvar surfaces = require(\"./lib/surfaces\");\r\nexports.surfaces = surfaces;\r\nvar textures = require(\"./lib/textures\");\r\nexports.textures = textures;\r\nvar tools = require(\"./lib/tools\");\r\nexports.tools = tools;\r\nvar utils = require(\"./lib/utils\");\r\nexports.utils = utils;\r\nvar DefaultRenderer_1 = require(\"./lib/DefaultRenderer\");\r\nexports.DefaultRenderer = DefaultRenderer_1.DefaultRenderer;\r\nvar DepthRenderer_1 = require(\"./lib/DepthRenderer\");\r\nexports.DepthRenderer = DepthRenderer_1.DepthRenderer;\r\nvar DistanceRenderer_1 = require(\"./lib/DistanceRenderer\");\r\nexports.DistanceRenderer = DistanceRenderer_1.DistanceRenderer;\r\nvar Filter3DRenderer_1 = require(\"./lib/Filter3DRenderer\");\r\nexports.Filter3DRenderer = Filter3DRenderer_1.Filter3DRenderer;\r\nvar RendererBase_1 = require(\"./lib/RendererBase\");\r\nexports.RendererBase = RendererBase_1.RendererBase;\r\nvar BasicMaterial_1 = require(\"awayjs-display/lib/materials/BasicMaterial\");\r\nvar Skybox_1 = require(\"awayjs-display/lib/display/Skybox\");\r\nvar Billboard_1 = require(\"awayjs-display/lib/display/Billboard\");\r\nvar LineSegment_1 = require(\"awayjs-display/lib/display/LineSegment\");\r\nvar LineElements_1 = require(\"awayjs-display/lib/graphics/LineElements\");\r\nvar TriangleElements_1 = require(\"awayjs-display/lib/graphics/TriangleElements\");\r\nvar Graphic_1 = require(\"awayjs-display/lib/graphics/Graphic\");\r\nvar Single2DTexture_1 = require(\"awayjs-display/lib/textures/Single2DTexture\");\r\nvar SingleCubeTexture_1 = require(\"awayjs-display/lib/textures/SingleCubeTexture\");\r\nvar Stage_1 = require(\"awayjs-stagegl/lib/base/Stage\");\r\nsurfaces.SurfacePool.registerAbstraction(surfaces.GL_BasicMaterialSurface, BasicMaterial_1.BasicMaterial);\r\nsurfaces.SurfacePool.registerAbstraction(surfaces.GL_SkyboxSurface, Skybox_1.Skybox);\r\nStage_1.Stage.registerAbstraction(elements.GL_LineElements, LineElements_1.LineElements);\r\nStage_1.Stage.registerAbstraction(elements.GL_TriangleElements, TriangleElements_1.TriangleElements);\r\nshaders.ShaderBase.registerAbstraction(textures.GL_Single2DTexture, Single2DTexture_1.Single2DTexture);\r\nshaders.ShaderBase.registerAbstraction(textures.GL_SingleCubeTexture, SingleCubeTexture_1.SingleCubeTexture);\r\nRendererBase_1.RendererBase.registerAbstraction(renderables.GL_BillboardRenderable, Billboard_1.Billboard);\r\nRendererBase_1.RendererBase.registerAbstraction(renderables.GL_LineSegmentRenderable, LineSegment_1.LineSegment);\r\nRendererBase_1.RendererBase.registerAbstraction(renderables.GL_GraphicRenderable, Graphic_1.Graphic);\r\nRendererBase_1.RendererBase.registerAbstraction(renderables.GL_SkyboxRenderable, Skybox_1.Skybox);\r\n},{\"./lib/DefaultRenderer\":\"awayjs-renderergl/lib/DefaultRenderer\",\"./lib/DepthRenderer\":\"awayjs-renderergl/lib/DepthRenderer\",\"./lib/DistanceRenderer\":\"awayjs-renderergl/lib/DistanceRenderer\",\"./lib/Filter3DRenderer\":\"awayjs-renderergl/lib/Filter3DRenderer\",\"./lib/RendererBase\":\"awayjs-renderergl/lib/RendererBase\",\"./lib/animators\":\"awayjs-renderergl/lib/animators\",\"./lib/elements\":\"awayjs-renderergl/lib/elements\",\"./lib/errors\":\"awayjs-renderergl/lib/errors\",\"./lib/events\":\"awayjs-renderergl/lib/events\",\"./lib/filters\":\"awayjs-renderergl/lib/filters\",\"./lib/managers\":\"awayjs-renderergl/lib/managers\",\"./lib/renderables\":\"awayjs-renderergl/lib/renderables\",\"./lib/shaders\":\"awayjs-renderergl/lib/shaders\",\"./lib/sort\":\"awayjs-renderergl/lib/sort\",\"./lib/surfaces\":\"awayjs-renderergl/lib/surfaces\",\"./lib/textures\":\"awayjs-renderergl/lib/textures\",\"./lib/tools\":\"awayjs-renderergl/lib/tools\",\"./lib/utils\":\"awayjs-renderergl/lib/utils\",\"awayjs-display/lib/display/Billboard\":undefined,\"awayjs-display/lib/display/LineSegment\":undefined,\"awayjs-display/lib/display/Skybox\":undefined,\"awayjs-display/lib/graphics/Graphic\":undefined,\"awayjs-display/lib/graphics/LineElements\":undefined,\"awayjs-display/lib/graphics/TriangleElements\":undefined,\"awayjs-display/lib/materials/BasicMaterial\":undefined,\"awayjs-display/lib/textures/Single2DTexture\":undefined,\"awayjs-display/lib/textures/SingleCubeTexture\":undefined,\"awayjs-stagegl/lib/base/Stage\":undefined}],\"awayjs-renderergl/lib/DefaultRenderer\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar BitmapImage2D_1 = require(\"awayjs-core/lib/image/BitmapImage2D\");\r\nvar ContextGLClearMask_1 = require(\"awayjs-stagegl/lib/base/ContextGLClearMask\");\r\nvar RendererBase_1 = require(\"./RendererBase\");\r\nvar DepthRenderer_1 = require(\"./DepthRenderer\");\r\nvar DistanceRenderer_1 = require(\"./DistanceRenderer\");\r\nvar Filter3DRenderer_1 = require(\"./Filter3DRenderer\");\r\nvar RTTBufferManager_1 = require(\"./managers/RTTBufferManager\");\r\n/**\r\n * The DefaultRenderer class provides the default rendering method. It renders the scene graph objects using the\r\n * materials assigned to them.\r\n *\r\n * @class away.render.DefaultRenderer\r\n */\r\nvar DefaultRenderer = (function (_super) {\r\n    __extends(DefaultRenderer, _super);\r\n    /**\r\n     * Creates a new DefaultRenderer object.\r\n     *\r\n     * @param antiAlias The amount of anti-aliasing to use.\r\n     * @param renderMode The render mode to use.\r\n     */\r\n    function DefaultRenderer(stage, forceSoftware, profile, mode) {\r\n        if (stage === void 0) { stage = null; }\r\n        if (forceSoftware === void 0) { forceSoftware = false; }\r\n        if (profile === void 0) { profile = \"baseline\"; }\r\n        if (mode === void 0) { mode = \"auto\"; }\r\n        _super.call(this, stage, null, forceSoftware, profile, mode);\r\n        this._antiAlias = 0;\r\n        this._directionalLights = new Array();\r\n        this._pointLights = new Array();\r\n        this._lightProbes = new Array();\r\n        if (stage)\r\n            this.shareContext = true;\r\n        this._pRttBufferManager = RTTBufferManager_1.RTTBufferManager.getInstance(this._pStage);\r\n        this._pDepthRenderer = new DepthRenderer_1.DepthRenderer(this._pStage);\r\n        this._pDistanceRenderer = new DistanceRenderer_1.DistanceRenderer(this._pStage);\r\n        if (this._width == 0)\r\n            this.width = window.innerWidth;\r\n        else\r\n            this._pRttBufferManager.viewWidth = this._width;\r\n        if (this._height == 0)\r\n            this.height = window.innerHeight;\r\n        else\r\n            this._pRttBufferManager.viewHeight = this._height;\r\n    }\r\n    Object.defineProperty(DefaultRenderer.prototype, \"antiAlias\", {\r\n        get: function () {\r\n            return this._antiAlias;\r\n        },\r\n        set: function (value) {\r\n            if (this._antiAlias == value)\r\n                return;\r\n            this._antiAlias = value;\r\n            this._pBackBufferInvalid = true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DefaultRenderer.prototype, \"depthPrepass\", {\r\n        /**\r\n         *\r\n         */\r\n        get: function () {\r\n            return this._depthPrepass;\r\n        },\r\n        set: function (value) {\r\n            this._depthPrepass = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DefaultRenderer.prototype, \"filters3d\", {\r\n        /**\r\n         *\r\n         * @returns {*}\r\n         */\r\n        get: function () {\r\n            return this._pFilter3DRenderer ? this._pFilter3DRenderer.filters : null;\r\n        },\r\n        set: function (value) {\r\n            if (value && value.length == 0)\r\n                value = null;\r\n            if (this._pFilter3DRenderer && !value) {\r\n                this._pFilter3DRenderer.dispose();\r\n                this._pFilter3DRenderer = null;\r\n            }\r\n            else if (!this._pFilter3DRenderer && value) {\r\n                this._pFilter3DRenderer = new Filter3DRenderer_1.Filter3DRenderer(this._pStage);\r\n                this._pFilter3DRenderer.filters = value;\r\n            }\r\n            if (this._pFilter3DRenderer) {\r\n                this._pFilter3DRenderer.filters = value;\r\n                this._pRequireDepthRender = this._pFilter3DRenderer.requireDepthRender;\r\n            }\r\n            else {\r\n                this._pRequireDepthRender = false;\r\n                if (this._pDepthRender) {\r\n                    this._pDepthRender.dispose();\r\n                    this._pDepthRender = null;\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     *\r\n     */\r\n    DefaultRenderer.prototype.enterNode = function (node) {\r\n        var enter = _super.prototype.enterNode.call(this, node);\r\n        if (enter && node.debugVisible)\r\n            this.applyEntity(node.bounds.boundsPrimitive);\r\n        return enter;\r\n    };\r\n    DefaultRenderer.prototype.render = function (camera, scene) {\r\n        _super.prototype.render.call(this, camera, scene);\r\n        if (!this._pStage.recoverFromDisposal()) {\r\n            this._pBackBufferInvalid = true;\r\n            return;\r\n        }\r\n        if (this._pBackBufferInvalid)\r\n            this.pUpdateBackBuffer();\r\n        if (this.shareContext && this._pContext)\r\n            this._pContext.clear(0, 0, 0, 1, 1, 0, ContextGLClearMask_1.ContextGLClearMask.DEPTH);\r\n        if (this._pFilter3DRenderer) {\r\n            this.textureRatioX = this._pRttBufferManager.textureRatioX;\r\n            this.textureRatioY = this._pRttBufferManager.textureRatioY;\r\n        }\r\n        else {\r\n            this.textureRatioX = 1;\r\n            this.textureRatioY = 1;\r\n        }\r\n        if (this._pRequireDepthRender)\r\n            this.pRenderSceneDepthToTexture(camera, scene);\r\n        if (this._depthPrepass)\r\n            this.pRenderDepthPrepass(camera, scene);\r\n        //reset lights\r\n        this._directionalLights.length = 0;\r\n        this._pointLights.length = 0;\r\n        this._lightProbes.length = 0;\r\n        if (this._pFilter3DRenderer && this._pContext) {\r\n            this._iRender(camera, scene, this._pFilter3DRenderer.getMainInputTexture(this._pStage), this._pRttBufferManager.renderToTextureRect);\r\n            this._pFilter3DRenderer.render(this._pStage, camera, this._pDepthRender);\r\n        }\r\n        else {\r\n            if (this.shareContext)\r\n                this._iRender(camera, scene, null, this._pScissorRect);\r\n            else\r\n                this._iRender(camera, scene);\r\n        }\r\n        if (!this.shareContext && this._pContext)\r\n            this._pContext.present();\r\n        // register that a view has been rendered\r\n        this._pStage.bufferClear = false;\r\n    };\r\n    DefaultRenderer.prototype.pExecuteRender = function (camera, target, scissorRect, surfaceSelector) {\r\n        if (target === void 0) { target = null; }\r\n        if (scissorRect === void 0) { scissorRect = null; }\r\n        if (surfaceSelector === void 0) { surfaceSelector = 0; }\r\n        this.updateLights(camera);\r\n        _super.prototype.pExecuteRender.call(this, camera, target, scissorRect, surfaceSelector);\r\n    };\r\n    DefaultRenderer.prototype.updateLights = function (camera) {\r\n        var len, i;\r\n        var light;\r\n        var shadowMapper;\r\n        len = this._directionalLights.length;\r\n        for (i = 0; i < len; ++i) {\r\n            light = this._directionalLights[i];\r\n            shadowMapper = light.shadowMapper;\r\n            if (light.shadowsEnabled && (shadowMapper.autoUpdateShadows || shadowMapper._iShadowsInvalid))\r\n                shadowMapper.iRenderDepthMap(camera, light.scene, this._pDepthRenderer);\r\n        }\r\n        len = this._pointLights.length;\r\n        for (i = 0; i < len; ++i) {\r\n            light = this._pointLights[i];\r\n            shadowMapper = light.shadowMapper;\r\n            if (light.shadowsEnabled && (shadowMapper.autoUpdateShadows || shadowMapper._iShadowsInvalid))\r\n                shadowMapper.iRenderDepthMap(camera, light.scene, this._pDistanceRenderer);\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param entity\r\n     */\r\n    DefaultRenderer.prototype.applyDirectionalLight = function (entity) {\r\n        this._directionalLights.push(entity);\r\n    };\r\n    /**\r\n     *\r\n     * @param entity\r\n     */\r\n    DefaultRenderer.prototype.applyLightProbe = function (entity) {\r\n        this._lightProbes.push(entity);\r\n    };\r\n    /**\r\n     *\r\n     * @param entity\r\n     */\r\n    DefaultRenderer.prototype.applyPointLight = function (entity) {\r\n        this._pointLights.push(entity);\r\n    };\r\n    DefaultRenderer.prototype.dispose = function () {\r\n        if (!this.shareContext)\r\n            this._pStage.dispose();\r\n        this._pRttBufferManager.dispose();\r\n        this._pRttBufferManager = null;\r\n        this._pDepthRenderer.dispose();\r\n        this._pDistanceRenderer.dispose();\r\n        this._pDepthRenderer = null;\r\n        this._pDistanceRenderer = null;\r\n        this._pDepthRender = null;\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    DefaultRenderer.prototype.pRenderDepthPrepass = function (camera, scene) {\r\n        this._pDepthRenderer.disableColor = true;\r\n        if (this._pFilter3DRenderer) {\r\n            this._pDepthRenderer.textureRatioX = this._pRttBufferManager.textureRatioX;\r\n            this._pDepthRenderer.textureRatioY = this._pRttBufferManager.textureRatioY;\r\n            this._pDepthRenderer._iRender(camera, scene, this._pFilter3DRenderer.getMainInputTexture(this._pStage), this._pRttBufferManager.renderToTextureRect);\r\n        }\r\n        else {\r\n            this._pDepthRenderer.textureRatioX = 1;\r\n            this._pDepthRenderer.textureRatioY = 1;\r\n            this._pDepthRenderer._iRender(camera, scene);\r\n        }\r\n        this._pDepthRenderer.disableColor = false;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    DefaultRenderer.prototype.pRenderSceneDepthToTexture = function (camera, scene) {\r\n        if (this._pDepthTextureInvalid || !this._pDepthRender)\r\n            this.initDepthTexture(this._pStage.context);\r\n        this._pDepthRenderer.textureRatioX = this._pRttBufferManager.textureRatioX;\r\n        this._pDepthRenderer.textureRatioY = this._pRttBufferManager.textureRatioY;\r\n        this._pDepthRenderer._iRender(camera, scene, this._pDepthRender);\r\n    };\r\n    /**\r\n     * Updates the backbuffer dimensions.\r\n     */\r\n    DefaultRenderer.prototype.pUpdateBackBuffer = function () {\r\n        // No reason trying to configure back buffer if there is no context available.\r\n        // Doing this anyway (and relying on _stage to cache width/height for\r\n        // context does get available) means usesSoftwareRendering won't be reliable.\r\n        if (this._pStage.context && !this.shareContext) {\r\n            if (this._width && this._height) {\r\n                this._pStage.configureBackBuffer(this._width, this._height, this._antiAlias, true);\r\n                this._pBackBufferInvalid = false;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    DefaultRenderer.prototype.initDepthTexture = function (context) {\r\n        this._pDepthTextureInvalid = false;\r\n        if (this._pDepthRender)\r\n            this._pDepthRender.dispose();\r\n        this._pDepthRender = new BitmapImage2D_1.BitmapImage2D(this._pRttBufferManager.textureWidth, this._pRttBufferManager.textureHeight);\r\n    };\r\n    return DefaultRenderer;\r\n}(RendererBase_1.RendererBase));\r\nexports.DefaultRenderer = DefaultRenderer;\r\n},{\"./DepthRenderer\":\"awayjs-renderergl/lib/DepthRenderer\",\"./DistanceRenderer\":\"awayjs-renderergl/lib/DistanceRenderer\",\"./Filter3DRenderer\":\"awayjs-renderergl/lib/Filter3DRenderer\",\"./RendererBase\":\"awayjs-renderergl/lib/RendererBase\",\"./managers/RTTBufferManager\":\"awayjs-renderergl/lib/managers/RTTBufferManager\",\"awayjs-core/lib/image/BitmapImage2D\":undefined,\"awayjs-stagegl/lib/base/ContextGLClearMask\":undefined}],\"awayjs-renderergl/lib/DepthRenderer\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar RendererBase_1 = require(\"./RendererBase\");\r\nvar GL_DepthSurface_1 = require(\"./surfaces/GL_DepthSurface\");\r\n/**\r\n * The DepthRenderer class renders 32-bit depth information encoded as RGBA\r\n *\r\n * @class away.render.DepthRenderer\r\n */\r\nvar DepthRenderer = (function (_super) {\r\n    __extends(DepthRenderer, _super);\r\n    /**\r\n     * Creates a new DepthRenderer object.\r\n     * @param renderBlended Indicates whether semi-transparent objects should be rendered.\r\n     * @param distanceBased Indicates whether the written depth value is distance-based or projected depth-based\r\n     */\r\n    function DepthRenderer(stage) {\r\n        if (stage === void 0) { stage = null; }\r\n        _super.call(this, stage, GL_DepthSurface_1.GL_DepthSurface);\r\n        this._iBackgroundR = 1;\r\n        this._iBackgroundG = 1;\r\n        this._iBackgroundB = 1;\r\n    }\r\n    /**\r\n     *\r\n     */\r\n    DepthRenderer.prototype.enterNode = function (node) {\r\n        var enter = node._iCollectionMark != RendererBase_1.RendererBase._iCollectionMark && node.isCastingShadow();\r\n        if (!enter) {\r\n            node._iCollectionMark = RendererBase_1.RendererBase._iCollectionMark;\r\n            return false;\r\n        }\r\n        return _super.prototype.enterNode.call(this, node);\r\n    };\r\n    return DepthRenderer;\r\n}(RendererBase_1.RendererBase));\r\nexports.DepthRenderer = DepthRenderer;\r\n},{\"./RendererBase\":\"awayjs-renderergl/lib/RendererBase\",\"./surfaces/GL_DepthSurface\":\"awayjs-renderergl/lib/surfaces/GL_DepthSurface\"}],\"awayjs-renderergl/lib/DistanceRenderer\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar RendererBase_1 = require(\"./RendererBase\");\r\nvar GL_DistanceSurface_1 = require(\"./surfaces/GL_DistanceSurface\");\r\n/**\r\n * The DistanceRenderer class renders 32-bit depth information encoded as RGBA\r\n *\r\n * @class away.render.DistanceRenderer\r\n */\r\nvar DistanceRenderer = (function (_super) {\r\n    __extends(DistanceRenderer, _super);\r\n    /**\r\n     * Creates a new DistanceRenderer object.\r\n     * @param renderBlended Indicates whether semi-transparent objects should be rendered.\r\n     * @param distanceBased Indicates whether the written depth value is distance-based or projected depth-based\r\n     */\r\n    function DistanceRenderer(stage) {\r\n        if (stage === void 0) { stage = null; }\r\n        _super.call(this, stage, GL_DistanceSurface_1.GL_DistanceSurface);\r\n        this._iBackgroundR = 1;\r\n        this._iBackgroundG = 1;\r\n        this._iBackgroundB = 1;\r\n    }\r\n    /**\r\n     *\r\n     */\r\n    DistanceRenderer.prototype.enterNode = function (node) {\r\n        var enter = node._iCollectionMark != RendererBase_1.RendererBase._iCollectionMark && node.isCastingShadow();\r\n        if (!enter) {\r\n            node._iCollectionMark = RendererBase_1.RendererBase._iCollectionMark;\r\n            return false;\r\n        }\r\n        return _super.prototype.enterNode.call(this, node);\r\n    };\r\n    return DistanceRenderer;\r\n}(RendererBase_1.RendererBase));\r\nexports.DistanceRenderer = DistanceRenderer;\r\n},{\"./RendererBase\":\"awayjs-renderergl/lib/RendererBase\",\"./surfaces/GL_DistanceSurface\":\"awayjs-renderergl/lib/surfaces/GL_DistanceSurface\"}],\"awayjs-renderergl/lib/Filter3DRenderer\":[function(require,module,exports){\n\"use strict\";\r\nvar ContextGLDrawMode_1 = require(\"awayjs-stagegl/lib/base/ContextGLDrawMode\");\r\nvar ContextGLBlendFactor_1 = require(\"awayjs-stagegl/lib/base/ContextGLBlendFactor\");\r\nvar ContextGLVertexBufferFormat_1 = require(\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\");\r\nvar RTTEvent_1 = require(\"./events/RTTEvent\");\r\nvar RTTBufferManager_1 = require(\"./managers/RTTBufferManager\");\r\n/**\r\n * @class away.render.Filter3DRenderer\r\n */\r\nvar Filter3DRenderer = (function () {\r\n    function Filter3DRenderer(stage) {\r\n        var _this = this;\r\n        this._filterSizesInvalid = true;\r\n        this._onRTTResizeDelegate = function (event) { return _this.onRTTResize(event); };\r\n        this._stage = stage;\r\n        this._rttManager = RTTBufferManager_1.RTTBufferManager.getInstance(stage);\r\n        this._rttManager.addEventListener(RTTEvent_1.RTTEvent.RESIZE, this._onRTTResizeDelegate);\r\n    }\r\n    Filter3DRenderer.prototype.onRTTResize = function (event) {\r\n        this._filterSizesInvalid = true;\r\n    };\r\n    Object.defineProperty(Filter3DRenderer.prototype, \"requireDepthRender\", {\r\n        get: function () {\r\n            return this._requireDepthRender;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Filter3DRenderer.prototype.getMainInputTexture = function (stage) {\r\n        if (this._filterTasksInvalid)\r\n            this.updateFilterTasks(stage);\r\n        return this._mainInputTexture;\r\n    };\r\n    Object.defineProperty(Filter3DRenderer.prototype, \"filters\", {\r\n        get: function () {\r\n            return this._filters;\r\n        },\r\n        set: function (value) {\r\n            this._filters = value;\r\n            this._filterTasksInvalid = true;\r\n            this._requireDepthRender = false;\r\n            if (!this._filters)\r\n                return;\r\n            for (var i = 0; i < this._filters.length; ++i)\r\n                if (this._filters[i].requireDepthRender)\r\n                    this._requireDepthRender = true;\r\n            this._filterSizesInvalid = true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Filter3DRenderer.prototype.updateFilterTasks = function (stage) {\r\n        var len;\r\n        if (this._filterSizesInvalid)\r\n            this.updateFilterSizes();\r\n        if (!this._filters) {\r\n            this._tasks = null;\r\n            return;\r\n        }\r\n        this._tasks = new Array();\r\n        len = this._filters.length - 1;\r\n        var filter;\r\n        for (var i = 0; i <= len; ++i) {\r\n            // make sure all internal tasks are linked together\r\n            filter = this._filters[i];\r\n            filter.setRenderTargets(i == len ? null : this._filters[i + 1].getMainInputTexture(stage), stage);\r\n            this._tasks = this._tasks.concat(filter.tasks);\r\n        }\r\n        this._mainInputTexture = this._filters[0].getMainInputTexture(stage);\r\n    };\r\n    Filter3DRenderer.prototype.render = function (stage, camera, depthTexture) {\r\n        var len;\r\n        var i;\r\n        var task;\r\n        var context = stage.context;\r\n        var indexBuffer = this._rttManager.indexBuffer;\r\n        var vertexBuffer = this._rttManager.renderToTextureVertexBuffer;\r\n        if (!this._filters)\r\n            return;\r\n        if (this._filterSizesInvalid)\r\n            this.updateFilterSizes();\r\n        if (this._filterTasksInvalid)\r\n            this.updateFilterTasks(stage);\r\n        len = this._filters.length;\r\n        for (i = 0; i < len; ++i)\r\n            this._filters[i].update(stage, camera);\r\n        len = this._tasks.length;\r\n        if (len > 1) {\r\n            context.setProgram(this._tasks[0].getProgram(stage));\r\n            context.setVertexBufferAt(this._tasks[0]._positionIndex, vertexBuffer, 0, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_2);\r\n            context.setVertexBufferAt(this._tasks[0]._uvIndex, vertexBuffer, 8, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_2);\r\n        }\r\n        for (i = 0; i < len; ++i) {\r\n            task = this._tasks[i];\r\n            stage.setRenderTarget(task.target);\r\n            context.setProgram(task.getProgram(stage));\r\n            stage.getAbstraction(task.getMainInputTexture(stage)).activate(task._inputTextureIndex, false);\r\n            if (!task.target) {\r\n                stage.scissorRect = null;\r\n                vertexBuffer = this._rttManager.renderToScreenVertexBuffer;\r\n                context.setVertexBufferAt(task._positionIndex, vertexBuffer, 0, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_2);\r\n                context.setVertexBufferAt(task._uvIndex, vertexBuffer, 8, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_2);\r\n            }\r\n            context.clear(0.0, 0.0, 0.0, 0.0);\r\n            task.activate(stage, camera, depthTexture);\r\n            context.setBlendFactors(ContextGLBlendFactor_1.ContextGLBlendFactor.ONE, ContextGLBlendFactor_1.ContextGLBlendFactor.ZERO);\r\n            context.drawIndices(ContextGLDrawMode_1.ContextGLDrawMode.TRIANGLES, indexBuffer, 0, 6);\r\n            task.deactivate(stage);\r\n        }\r\n        context.setTextureAt(0, null);\r\n        context.setVertexBufferAt(0, null);\r\n        context.setVertexBufferAt(1, null);\r\n    };\r\n    Filter3DRenderer.prototype.updateFilterSizes = function () {\r\n        for (var i = 0; i < this._filters.length; ++i) {\r\n            this._filters[i].textureWidth = this._rttManager.textureWidth;\r\n            this._filters[i].textureHeight = this._rttManager.textureHeight;\r\n            this._filters[i].rttManager = this._rttManager;\r\n        }\r\n        this._filterSizesInvalid = true;\r\n    };\r\n    Filter3DRenderer.prototype.dispose = function () {\r\n        this._rttManager.removeEventListener(RTTEvent_1.RTTEvent.RESIZE, this._onRTTResizeDelegate);\r\n        this._rttManager = null;\r\n        this._stage = null;\r\n    };\r\n    return Filter3DRenderer;\r\n}());\r\nexports.Filter3DRenderer = Filter3DRenderer;\r\n},{\"./events/RTTEvent\":\"awayjs-renderergl/lib/events/RTTEvent\",\"./managers/RTTBufferManager\":\"awayjs-renderergl/lib/managers/RTTBufferManager\",\"awayjs-stagegl/lib/base/ContextGLBlendFactor\":undefined,\"awayjs-stagegl/lib/base/ContextGLDrawMode\":undefined,\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\":undefined}],\"awayjs-renderergl/lib/RendererBase\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Matrix3D_1 = require(\"awayjs-core/lib/geom/Matrix3D\");\r\nvar Matrix3DUtils_1 = require(\"awayjs-core/lib/geom/Matrix3DUtils\");\r\nvar Point_1 = require(\"awayjs-core/lib/geom/Point\");\r\nvar Rectangle_1 = require(\"awayjs-core/lib/geom/Rectangle\");\r\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\r\nvar EventDispatcher_1 = require(\"awayjs-core/lib/events/EventDispatcher\");\r\nvar RendererEvent_1 = require(\"awayjs-display/lib/events/RendererEvent\");\r\nvar AGALMiniAssembler_1 = require(\"awayjs-stagegl/lib/aglsl/assembler/AGALMiniAssembler\");\r\nvar ContextGLBlendFactor_1 = require(\"awayjs-stagegl/lib/base/ContextGLBlendFactor\");\r\nvar ContextGLCompareMode_1 = require(\"awayjs-stagegl/lib/base/ContextGLCompareMode\");\r\nvar StageEvent_1 = require(\"awayjs-stagegl/lib/events/StageEvent\");\r\nvar StageManager_1 = require(\"awayjs-stagegl/lib/managers/StageManager\");\r\nvar SurfacePool_1 = require(\"./surfaces/SurfacePool\");\r\nvar RenderableMergeSort_1 = require(\"./sort/RenderableMergeSort\");\r\n/**\r\n * RendererBase forms an abstract base class for classes that are used in the rendering pipeline to render the\r\n * contents of a partition\r\n *\r\n * @class away.render.RendererBase\r\n */\r\nvar RendererBase = (function (_super) {\r\n    __extends(RendererBase, _super);\r\n    /**\r\n     * Creates a new RendererBase object.\r\n     */\r\n    function RendererBase(stage, surfaceClassGL, forceSoftware, profile, mode) {\r\n        var _this = this;\r\n        if (stage === void 0) { stage = null; }\r\n        if (surfaceClassGL === void 0) { surfaceClassGL = null; }\r\n        if (forceSoftware === void 0) { forceSoftware = false; }\r\n        if (profile === void 0) { profile = \"baseline\"; }\r\n        if (mode === void 0) { mode = \"auto\"; }\r\n        _super.call(this);\r\n        this._objectPools = new Object();\r\n        this._abstractionPool = new Object();\r\n        this._activeMasksConfig = new Array();\r\n        this._registeredMasks = new Array();\r\n        this._numUsedStreams = 0;\r\n        this._numUsedTextures = 0;\r\n        this._cameraForward = new Vector3D_1.Vector3D();\r\n        this._viewPort = new Rectangle_1.Rectangle();\r\n        this._pBackBufferInvalid = true;\r\n        this._pDepthTextureInvalid = true;\r\n        this._depthPrepass = false;\r\n        this._backgroundR = 0;\r\n        this._backgroundG = 0;\r\n        this._backgroundB = 0;\r\n        this._backgroundAlpha = 1;\r\n        this.textureRatioX = 1;\r\n        this.textureRatioY = 1;\r\n        this._pRttViewProjectionMatrix = new Matrix3D_1.Matrix3D();\r\n        this._localPos = new Point_1.Point();\r\n        this._globalPos = new Point_1.Point();\r\n        this._pScissorRect = new Rectangle_1.Rectangle();\r\n        this._pNumElements = 0;\r\n        this._disableColor = false;\r\n        this._renderBlended = true;\r\n        this._numCullPlanes = 0;\r\n        this._onViewportUpdatedDelegate = function (event) { return _this.onViewportUpdated(event); };\r\n        this._onContextUpdateDelegate = function (event) { return _this.onContextUpdate(event); };\r\n        //default sorting algorithm\r\n        this.renderableSorter = new RenderableMergeSort_1.RenderableMergeSort();\r\n        //set stage\r\n        this._pStage = stage || StageManager_1.StageManager.getInstance().getFreeStage(forceSoftware, profile, mode);\r\n        this._pStage.addEventListener(StageEvent_1.StageEvent.CONTEXT_CREATED, this._onContextUpdateDelegate);\r\n        this._pStage.addEventListener(StageEvent_1.StageEvent.CONTEXT_RECREATED, this._onContextUpdateDelegate);\r\n        this._pStage.addEventListener(StageEvent_1.StageEvent.VIEWPORT_UPDATED, this._onViewportUpdatedDelegate);\r\n        this._surfaceClassGL = surfaceClassGL;\r\n        /*\r\n         if (_backgroundImageRenderer)\r\n         _backgroundImageRenderer.stage = value;\r\n         */\r\n        if (this._pStage.context)\r\n            this._pContext = this._pStage.context;\r\n    }\r\n    Object.defineProperty(RendererBase.prototype, \"cullPlanes\", {\r\n        /**\r\n         *\r\n         */\r\n        get: function () {\r\n            return this._customCullPlanes;\r\n        },\r\n        set: function (value) {\r\n            this._customCullPlanes = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RendererBase.prototype, \"renderBlended\", {\r\n        get: function () {\r\n            return this._renderBlended;\r\n        },\r\n        set: function (value) {\r\n            this._renderBlended = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RendererBase.prototype, \"disableColor\", {\r\n        get: function () {\r\n            return this._disableColor;\r\n        },\r\n        set: function (value) {\r\n            this._disableColor = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RendererBase.prototype, \"numElements\", {\r\n        /**\r\n         *\r\n         */\r\n        get: function () {\r\n            return this._pNumElements;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RendererBase.prototype, \"viewPort\", {\r\n        /**\r\n         * A viewPort rectangle equivalent of the Stage size and position.\r\n         */\r\n        get: function () {\r\n            return this._viewPort;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RendererBase.prototype, \"scissorRect\", {\r\n        /**\r\n         * A scissor rectangle equivalent of the view size and position.\r\n         */\r\n        get: function () {\r\n            return this._pScissorRect;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RendererBase.prototype, \"x\", {\r\n        /**\r\n         *\r\n         */\r\n        get: function () {\r\n            return this._localPos.x;\r\n        },\r\n        set: function (value) {\r\n            if (this.x == value)\r\n                return;\r\n            this._globalPos.x = this._localPos.x = value;\r\n            this.updateGlobalPos();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RendererBase.prototype, \"y\", {\r\n        /**\r\n         *\r\n         */\r\n        get: function () {\r\n            return this._localPos.y;\r\n        },\r\n        set: function (value) {\r\n            if (this.y == value)\r\n                return;\r\n            this._globalPos.y = this._localPos.y = value;\r\n            this.updateGlobalPos();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RendererBase.prototype, \"width\", {\r\n        /**\r\n         *\r\n         */\r\n        get: function () {\r\n            return this._width;\r\n        },\r\n        set: function (value) {\r\n            if (this._width == value)\r\n                return;\r\n            this._width = value;\r\n            this._pScissorRect.width = value;\r\n            if (this._pRttBufferManager)\r\n                this._pRttBufferManager.viewWidth = value;\r\n            this._pBackBufferInvalid = true;\r\n            this._pDepthTextureInvalid = true;\r\n            this.notifyScissorUpdate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RendererBase.prototype, \"height\", {\r\n        /**\r\n         *\r\n         */\r\n        get: function () {\r\n            return this._height;\r\n        },\r\n        set: function (value) {\r\n            if (this._height == value)\r\n                return;\r\n            this._height = value;\r\n            this._pScissorRect.height = value;\r\n            if (this._pRttBufferManager)\r\n                this._pRttBufferManager.viewHeight = value;\r\n            this._pBackBufferInvalid = true;\r\n            this._pDepthTextureInvalid = true;\r\n            this.notifyScissorUpdate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    RendererBase.prototype.getAbstraction = function (renderable) {\r\n        return this._abstractionPool[renderable.id] || (this._abstractionPool[renderable.id] = new RendererBase._abstractionClassPool[renderable.assetType](renderable, this));\r\n    };\r\n    /**\r\n     *\r\n     * @param image\r\n     */\r\n    RendererBase.prototype.clearAbstraction = function (renderable) {\r\n        this._abstractionPool[renderable.id] = null;\r\n    };\r\n    /**\r\n     * //TODO\r\n     *\r\n     * @param elementsClass\r\n     * @returns SurfacePool\r\n     */\r\n    RendererBase.prototype.getSurfacePool = function (elements) {\r\n        return this._objectPools[elements.elementsType] || (this._objectPools[elements.elementsType] = new SurfacePool_1.SurfacePool(elements.elementsClass, this._pStage, this._surfaceClassGL));\r\n    };\r\n    /**\r\n     *\r\n     * @param imageObjectClass\r\n     */\r\n    RendererBase.registerAbstraction = function (renderableClass, assetClass) {\r\n        RendererBase._abstractionClassPool[assetClass.assetType] = renderableClass;\r\n    };\r\n    RendererBase.prototype.activatePass = function (pass, camera) {\r\n        //clear unused vertex streams\r\n        var i;\r\n        for (i = pass.shader.numUsedStreams; i < this._numUsedStreams; i++)\r\n            this._pContext.setVertexBufferAt(i, null);\r\n        //clear unused texture streams\r\n        for (i = pass.shader.numUsedTextures; i < this._numUsedTextures; i++)\r\n            this._pContext.setTextureAt(i, null);\r\n        //check program data is uploaded\r\n        var programData = pass.shader.programData;\r\n        if (!programData.program) {\r\n            programData.program = this._pContext.createProgram();\r\n            var vertexByteCode = (new AGALMiniAssembler_1.AGALMiniAssembler().assemble(\"part vertex 1\\n\" + programData.vertexString + \"endpart\"))['vertex'].data;\r\n            var fragmentByteCode = (new AGALMiniAssembler_1.AGALMiniAssembler().assemble(\"part fragment 1\\n\" + programData.fragmentString + \"endpart\"))['fragment'].data;\r\n            programData.program.upload(vertexByteCode, fragmentByteCode);\r\n        }\r\n        //set program data\r\n        this._pContext.setProgram(programData.program);\r\n        //activate shader object through pass\r\n        pass._iActivate(camera);\r\n    };\r\n    RendererBase.prototype.deactivatePass = function (pass) {\r\n        //deactivate shader object through pass\r\n        pass._iDeactivate();\r\n        this._numUsedStreams = pass.shader.numUsedStreams;\r\n        this._numUsedTextures = pass.shader.numUsedTextures;\r\n    };\r\n    Object.defineProperty(RendererBase.prototype, \"_iBackgroundR\", {\r\n        /**\r\n         * The background color's red component, used when clearing.\r\n         *\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this._backgroundR;\r\n        },\r\n        set: function (value) {\r\n            if (this._backgroundR == value)\r\n                return;\r\n            this._backgroundR = value;\r\n            this._pBackBufferInvalid = true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RendererBase.prototype, \"_iBackgroundG\", {\r\n        /**\r\n         * The background color's green component, used when clearing.\r\n         *\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this._backgroundG;\r\n        },\r\n        set: function (value) {\r\n            if (this._backgroundG == value)\r\n                return;\r\n            this._backgroundG = value;\r\n            this._pBackBufferInvalid = true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RendererBase.prototype, \"_iBackgroundB\", {\r\n        /**\r\n         * The background color's blue component, used when clearing.\r\n         *\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this._backgroundB;\r\n        },\r\n        set: function (value) {\r\n            if (this._backgroundB == value)\r\n                return;\r\n            this._backgroundB = value;\r\n            this._pBackBufferInvalid = true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RendererBase.prototype, \"context\", {\r\n        get: function () {\r\n            return this._pContext;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RendererBase.prototype, \"stage\", {\r\n        /**\r\n         * The Stage that will provide the ContextGL used for rendering.\r\n         */\r\n        get: function () {\r\n            return this._pStage;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Disposes the resources used by the RendererBase.\r\n     */\r\n    RendererBase.prototype.dispose = function () {\r\n        for (var id in this._abstractionPool)\r\n            this._abstractionPool[id].clear();\r\n        this._abstractionPool = null;\r\n        this._pStage.removeEventListener(StageEvent_1.StageEvent.CONTEXT_CREATED, this._onContextUpdateDelegate);\r\n        this._pStage.removeEventListener(StageEvent_1.StageEvent.CONTEXT_RECREATED, this._onContextUpdateDelegate);\r\n        this._pStage.removeEventListener(StageEvent_1.StageEvent.VIEWPORT_UPDATED, this._onViewportUpdatedDelegate);\r\n        this._pStage = null;\r\n        this._pContext = null;\r\n        /*\r\n         if (_backgroundImageRenderer) {\r\n         _backgroundImageRenderer.dispose();\r\n         _backgroundImageRenderer = null;\r\n         }\r\n         */\r\n    };\r\n    RendererBase.prototype.render = function (camera, scene) {\r\n        this._viewportDirty = false;\r\n        this._scissorDirty = false;\r\n    };\r\n    /**\r\n     * Renders the potentially visible geometry to the back buffer or texture.\r\n     * @param target An option target texture to render to.\r\n     * @param surfaceSelector The index of a CubeTexture's face to render to.\r\n     * @param additionalClearMask Additional clear mask information, in case extra clear channels are to be omitted.\r\n     */\r\n    RendererBase.prototype._iRender = function (camera, scene, target, scissorRect, surfaceSelector) {\r\n        if (target === void 0) { target = null; }\r\n        if (scissorRect === void 0) { scissorRect = null; }\r\n        if (surfaceSelector === void 0) { surfaceSelector = 0; }\r\n        //TODO refactor setTarget so that rendertextures are created before this check\r\n        if (!this._pStage || !this._pContext)\r\n            return;\r\n        //reset head values\r\n        this._pBlendedRenderableHead = null;\r\n        this._pOpaqueRenderableHead = null;\r\n        this._pNumElements = 0;\r\n        this._cullPlanes = this._customCullPlanes ? this._customCullPlanes : camera.frustumPlanes;\r\n        this._numCullPlanes = this._cullPlanes ? this._cullPlanes.length : 0;\r\n        this._cameraPosition = camera.scenePosition;\r\n        this._cameraTransform = camera.sceneTransform;\r\n        this._cameraForward = Matrix3DUtils_1.Matrix3DUtils.getForward(camera.sceneTransform, this._cameraForward);\r\n        RendererBase._iCollectionMark++;\r\n        scene.traversePartitions(this);\r\n        //sort the resulting renderables\r\n        if (this.renderableSorter) {\r\n            this._pOpaqueRenderableHead = this.renderableSorter.sortOpaqueRenderables(this._pOpaqueRenderableHead);\r\n            this._pBlendedRenderableHead = this.renderableSorter.sortBlendedRenderables(this._pBlendedRenderableHead);\r\n        }\r\n        this._pRttViewProjectionMatrix.copyFrom(camera.viewProjection);\r\n        this._pRttViewProjectionMatrix.appendScale(this.textureRatioX, this.textureRatioY, 1);\r\n        this.pExecuteRender(camera, target, scissorRect, surfaceSelector);\r\n        // generate mip maps on target (if target exists) //TODO\r\n        //if (target)\r\n        //\t(<Texture>target).generateMipmaps();\r\n        // clear buffers\r\n        for (var i = 0; i < 8; ++i) {\r\n            this._pContext.setVertexBufferAt(i, null);\r\n            this._pContext.setTextureAt(i, null);\r\n        }\r\n    };\r\n    RendererBase.prototype._iRenderCascades = function (camera, scene, target, numCascades, scissorRects, cameras) {\r\n        this._pStage.setRenderTarget(target, true, 0);\r\n        this._pContext.clear(1, 1, 1, 1, 1, 0);\r\n        this._pContext.setBlendFactors(ContextGLBlendFactor_1.ContextGLBlendFactor.ONE, ContextGLBlendFactor_1.ContextGLBlendFactor.ZERO);\r\n        this._pContext.setDepthTest(true, ContextGLCompareMode_1.ContextGLCompareMode.LESS);\r\n        var head = this._pOpaqueRenderableHead;\r\n        var first = true;\r\n        //TODO cascades must have separate collectors, rather than separate draw commands\r\n        for (var i = numCascades - 1; i >= 0; --i) {\r\n            this._pStage.scissorRect = scissorRects[i];\r\n            //this.drawCascadeRenderables(head, cameras[i], first? null : cameras[i].frustumPlanes);\r\n            first = false;\r\n        }\r\n        //line required for correct rendering when using away3d with starling. DO NOT REMOVE UNLESS STARLING INTEGRATION IS RETESTED!\r\n        this._pContext.setDepthTest(false, ContextGLCompareMode_1.ContextGLCompareMode.LESS_EQUAL);\r\n        this._pStage.scissorRect = null;\r\n    };\r\n    /**\r\n     * Renders the potentially visible geometry to the back buffer or texture. Only executed if everything is set up.\r\n     *\r\n     * @param target An option target texture to render to.\r\n     * @param surfaceSelector The index of a CubeTexture's face to render to.\r\n     * @param additionalClearMask Additional clear mask information, in case extra clear channels are to be omitted.\r\n     */\r\n    RendererBase.prototype.pExecuteRender = function (camera, target, scissorRect, surfaceSelector) {\r\n        if (target === void 0) { target = null; }\r\n        if (scissorRect === void 0) { scissorRect = null; }\r\n        if (surfaceSelector === void 0) { surfaceSelector = 0; }\r\n        this._pStage.setRenderTarget(target, true, surfaceSelector);\r\n        if ((target || !this.shareContext) && !this._depthPrepass)\r\n            this._pContext.clear(this._backgroundR, this._backgroundG, this._backgroundB, this._backgroundAlpha, 1, 0);\r\n        this._pStage.scissorRect = scissorRect;\r\n        /*\r\n         if (_backgroundImageRenderer)\r\n         _backgroundImageRenderer.render();\r\n         */\r\n        this._pContext.setBlendFactors(ContextGLBlendFactor_1.ContextGLBlendFactor.ONE, ContextGLBlendFactor_1.ContextGLBlendFactor.ZERO);\r\n        this.pDraw(camera);\r\n        //line required for correct rendering when using away3d with starling. DO NOT REMOVE UNLESS STARLING INTEGRATION IS RETESTED!\r\n        //this._pContext.setDepthTest(false, ContextGLCompareMode.LESS_EQUAL); //oopsie\r\n        if (!this.shareContext) {\r\n            if (this._snapshotRequired && this._snapshotBitmapImage2D) {\r\n                this._pContext.drawToBitmapImage2D(this._snapshotBitmapImage2D);\r\n                this._snapshotRequired = false;\r\n            }\r\n        }\r\n        this._pStage.scissorRect = null;\r\n    };\r\n    /*\r\n     * Will draw the renderer's output on next render to the provided bitmap data.\r\n     * */\r\n    RendererBase.prototype.queueSnapshot = function (bmd) {\r\n        this._snapshotRequired = true;\r\n        this._snapshotBitmapImage2D = bmd;\r\n    };\r\n    /**\r\n     * Performs the actual drawing of geometry to the target.\r\n     */\r\n    RendererBase.prototype.pDraw = function (camera) {\r\n        this._pContext.setDepthTest(true, ContextGLCompareMode_1.ContextGLCompareMode.LESS);\r\n        if (this._disableColor)\r\n            this._pContext.setColorMask(false, false, false, false);\r\n        this.drawRenderables(camera, this._pOpaqueRenderableHead);\r\n        if (this._renderBlended)\r\n            this.drawRenderables(camera, this._pBlendedRenderableHead);\r\n        if (this._disableColor)\r\n            this._pContext.setColorMask(true, true, true, true);\r\n    };\r\n    //private drawCascadeRenderables(renderableGL:GL_RenderableBase, camera:Camera, cullPlanes:Array<Plane3D>)\r\n    //{\r\n    //\tvar renderableGL2:GL_RenderableBase;\r\n    //\tvar render:GL_SurfaceBase;\r\n    //\tvar pass:IPass;\r\n    //\r\n    //\twhile (renderableGL) {\r\n    //\t\trenderableGL2 = renderableGL;\r\n    //\t\trender = renderableGL.render;\r\n    //\t\tpass = render.passes[0] //assuming only one pass per material\r\n    //\r\n    //\t\tthis.activatePass(renderableGL, pass, camera);\r\n    //\r\n    //\t\tdo {\r\n    //\t\t\t// if completely in front, it will fall in a different cascade\r\n    //\t\t\t// do not use near and far planes\r\n    //\t\t\tif (!cullPlanes || renderableGL2.sourceEntity.worldBounds.isInFrustum(cullPlanes, 4)) {\r\n    //\t\t\t\trenderableGL2._iRender(pass, camera, this._pRttViewProjectionMatrix);\r\n    //\t\t\t} else {\r\n    //\t\t\t\trenderableGL2.cascaded = true;\r\n    //\t\t\t}\r\n    //\r\n    //\t\t\trenderableGL2 = renderableGL2.next;\r\n    //\r\n    //\t\t} while (renderableGL2 && renderableGL2.render == render && !renderableGL2.cascaded);\r\n    //\r\n    //\t\tthis.deactivatePass(renderableGL, pass);\r\n    //\r\n    //\t\trenderableGL = renderableGL2;\r\n    //\t}\r\n    //}\r\n    /**\r\n     * Draw a list of renderables.\r\n     *\r\n     * @param renderables The renderables to draw.\r\n     */\r\n    RendererBase.prototype.drawRenderables = function (camera, renderableGL) {\r\n        var i;\r\n        var len;\r\n        var renderableGL2;\r\n        var surfaceGL;\r\n        var passes;\r\n        var pass;\r\n        this._pContext.setStencilActions(\"frontAndBack\", \"always\", \"keep\", \"keep\", \"keep\");\r\n        this._registeredMasks.length = 0;\r\n        var gl = this._pContext[\"_gl\"];\r\n        if (gl) {\r\n            gl.disable(gl.STENCIL_TEST);\r\n        }\r\n        this._maskConfig = 0;\r\n        while (renderableGL) {\r\n            surfaceGL = renderableGL.surfaceGL;\r\n            passes = surfaceGL.passes;\r\n            // otherwise this would result in depth rendered anyway because fragment shader kil is ignored\r\n            if (this._disableColor && surfaceGL._surface.alphaThreshold != 0) {\r\n                renderableGL2 = renderableGL;\r\n                // fast forward\r\n                do {\r\n                    renderableGL2 = renderableGL2.next;\r\n                } while (renderableGL2 && renderableGL2.surfaceGL == surfaceGL);\r\n            }\r\n            else {\r\n                if (this._activeMasksDirty || this._checkMasksConfig(renderableGL.masksConfig)) {\r\n                    this._activeMasksConfig = renderableGL.masksConfig;\r\n                    if (!this._activeMasksConfig.length) {\r\n                        // disable stencil\r\n                        if (gl) {\r\n                            gl.disable(gl.STENCIL_TEST);\r\n                            gl.stencilFunc(gl.ALWAYS, 0, 0xff);\r\n                            gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\r\n                        }\r\n                    }\r\n                    else {\r\n                        this._renderMasks(camera, renderableGL.sourceEntity._iAssignedMasks());\r\n                    }\r\n                    this._activeMasksDirty = false;\r\n                }\r\n                //iterate through each shader object\r\n                len = passes.length;\r\n                for (i = 0; i < len; i++) {\r\n                    renderableGL2 = renderableGL;\r\n                    pass = passes[i];\r\n                    this.activatePass(pass, camera);\r\n                    do {\r\n                        if (renderableGL2.maskId !== -1) {\r\n                            if (i == 0)\r\n                                this._registerMask(renderableGL2);\r\n                        }\r\n                        else {\r\n                            renderableGL2._iRender(pass, camera, this._pRttViewProjectionMatrix);\r\n                        }\r\n                        renderableGL2 = renderableGL2.next;\r\n                    } while (renderableGL2 && renderableGL2.surfaceGL == surfaceGL && !(this._activeMasksDirty = this._checkMasksConfig(renderableGL2.masksConfig)));\r\n                    this.deactivatePass(pass);\r\n                }\r\n            }\r\n            renderableGL = renderableGL2;\r\n        }\r\n    };\r\n    /**\r\n     * Assign the context once retrieved\r\n     */\r\n    RendererBase.prototype.onContextUpdate = function (event) {\r\n        this._pContext = this._pStage.context;\r\n    };\r\n    Object.defineProperty(RendererBase.prototype, \"_iBackgroundAlpha\", {\r\n        get: function () {\r\n            return this._backgroundAlpha;\r\n        },\r\n        set: function (value) {\r\n            if (this._backgroundAlpha == value)\r\n                return;\r\n            this._backgroundAlpha = value;\r\n            this._pBackBufferInvalid = true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /*\r\n     public get iBackground():Texture2DBase\r\n     {\r\n     return this._background;\r\n     }\r\n     */\r\n    /*\r\n     public set iBackground(value:Texture2DBase)\r\n     {\r\n     if (this._backgroundImageRenderer && !value) {\r\n     this._backgroundImageRenderer.dispose();\r\n     this._backgroundImageRenderer = null;\r\n     }\r\n\r\n     if (!this._backgroundImageRenderer && value)\r\n     {\r\n\r\n     this._backgroundImageRenderer = new BackgroundImageRenderer(this._pStage);\r\n\r\n     }\r\n\r\n\r\n     this._background = value;\r\n\r\n     if (this._backgroundImageRenderer)\r\n     this._backgroundImageRenderer.texture = value;\r\n     }\r\n     */\r\n    /*\r\n     public get backgroundImageRenderer():BackgroundImageRenderer\r\n     {\r\n     return _backgroundImageRenderer;\r\n     }\r\n     */\r\n    /**\r\n     * @private\r\n     */\r\n    RendererBase.prototype.notifyScissorUpdate = function () {\r\n        if (this._scissorDirty)\r\n            return;\r\n        this._scissorDirty = true;\r\n        if (!this._scissorUpdated)\r\n            this._scissorUpdated = new RendererEvent_1.RendererEvent(RendererEvent_1.RendererEvent.SCISSOR_UPDATED);\r\n        this.dispatchEvent(this._scissorUpdated);\r\n    };\r\n    /**\r\n     * @private\r\n     */\r\n    RendererBase.prototype.notifyViewportUpdate = function () {\r\n        if (this._viewportDirty)\r\n            return;\r\n        this._viewportDirty = true;\r\n        if (!this._viewPortUpdated)\r\n            this._viewPortUpdated = new RendererEvent_1.RendererEvent(RendererEvent_1.RendererEvent.VIEWPORT_UPDATED);\r\n        this.dispatchEvent(this._viewPortUpdated);\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    RendererBase.prototype.onViewportUpdated = function (event) {\r\n        this._viewPort = this._pStage.viewPort;\r\n        //TODO stop firing viewport updated for every stagegl viewport change\r\n        if (this.shareContext) {\r\n            this._pScissorRect.x = this._globalPos.x - this._pStage.x;\r\n            this._pScissorRect.y = this._globalPos.y - this._pStage.y;\r\n            this.notifyScissorUpdate();\r\n        }\r\n        this.notifyViewportUpdate();\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    RendererBase.prototype.updateGlobalPos = function () {\r\n        if (this.shareContext) {\r\n            this._pScissorRect.x = this._globalPos.x - this._viewPort.x;\r\n            this._pScissorRect.y = this._globalPos.y - this._viewPort.y;\r\n        }\r\n        else {\r\n            this._pScissorRect.x = 0;\r\n            this._pScissorRect.y = 0;\r\n            this._viewPort.x = this._globalPos.x;\r\n            this._viewPort.y = this._globalPos.y;\r\n        }\r\n        this.notifyScissorUpdate();\r\n    };\r\n    /**\r\n     *\r\n     * @param node\r\n     * @returns {boolean}\r\n     */\r\n    RendererBase.prototype.enterNode = function (node) {\r\n        var enter = node._iCollectionMark != RendererBase._iCollectionMark && node.isRenderable() && node.isInFrustum(this._cullPlanes, this._numCullPlanes);\r\n        node._iCollectionMark = RendererBase._iCollectionMark;\r\n        return enter;\r\n    };\r\n    RendererBase.prototype.applyEntity = function (entity) {\r\n        this._sourceEntity = entity;\r\n        // project onto camera's z-axis\r\n        this._zIndex = entity.zOffset + this._cameraPosition.subtract(entity.scenePosition).dotProduct(this._cameraForward);\r\n        //save sceneTransform\r\n        this._renderSceneTransform = entity.getRenderSceneTransform(this._cameraTransform);\r\n        //collect renderables\r\n        entity._acceptTraverser(this);\r\n    };\r\n    RendererBase.prototype.applyRenderable = function (renderable) {\r\n        var renderableGL = this.getAbstraction(renderable);\r\n        var surfaceGL = renderableGL.surfaceGL;\r\n        //set local vars for faster referencing\r\n        renderableGL.surfaceID = surfaceGL.surfaceID;\r\n        renderableGL.renderOrderId = surfaceGL.renderOrderId;\r\n        renderableGL.cascaded = false;\r\n        renderableGL.sourceEntity = this._sourceEntity;\r\n        renderableGL.zIndex = this._zIndex;\r\n        renderableGL.maskId = this._sourceEntity._iAssignedMaskId();\r\n        renderableGL.masksConfig = this._sourceEntity._iMasksConfig();\r\n        //store reference to scene transform\r\n        renderableGL.renderSceneTransform = this._renderSceneTransform;\r\n        if (surfaceGL.requiresBlending) {\r\n            renderableGL.next = this._pBlendedRenderableHead;\r\n            this._pBlendedRenderableHead = renderableGL;\r\n        }\r\n        else {\r\n            renderableGL.next = this._pOpaqueRenderableHead;\r\n            this._pOpaqueRenderableHead = renderableGL;\r\n        }\r\n        this._pNumElements += renderableGL.elementsGL.elements.numElements;\r\n    };\r\n    /**\r\n     *\r\n     * @param entity\r\n     */\r\n    RendererBase.prototype.applyDirectionalLight = function (entity) {\r\n        //don't do anything here\r\n    };\r\n    /**\r\n     *\r\n     * @param entity\r\n     */\r\n    RendererBase.prototype.applyLightProbe = function (entity) {\r\n        //don't do anything here\r\n    };\r\n    /**\r\n     *\r\n     * @param entity\r\n     */\r\n    RendererBase.prototype.applyPointLight = function (entity) {\r\n        //don't do anything here\r\n    };\r\n    /**\r\n     *\r\n     * @param entity\r\n     */\r\n    RendererBase.prototype.applySkybox = function (entity) {\r\n        //don't do anything here\r\n    };\r\n    RendererBase.prototype._registerMask = function (obj) {\r\n        //console.log(\"registerMask\");\r\n        this._registeredMasks.push(obj);\r\n    };\r\n    RendererBase.prototype._renderMasks = function (camera, masks) {\r\n        var gl = this._pContext[\"_gl\"];\r\n        //var oldRenderTarget = this._stage.renderTarget;\r\n        //this._stage.setRenderTarget(this._image);\r\n        //this._stage.clear();\r\n        this._pContext.setColorMask(false, false, false, false);\r\n        // TODO: Could we create masks within masks by providing a previous configID, and supply \"clear/keep\" on stencil fail\r\n        //context.setStencilActions(\"frontAndBack\", \"always\", \"set\", \"set\", \"set\");\r\n        gl.enable(gl.STENCIL_TEST);\r\n        this._maskConfig++;\r\n        gl.stencilFunc(gl.ALWAYS, this._maskConfig, 0xff);\r\n        gl.stencilOp(gl.REPLACE, gl.REPLACE, gl.REPLACE);\r\n        var numLayers = masks.length;\r\n        var numRenderables = this._registeredMasks.length;\r\n        var renderableGL;\r\n        var children;\r\n        var numChildren;\r\n        var mask;\r\n        for (var i = 0; i < numLayers; ++i) {\r\n            if (i != 0) {\r\n                gl.stencilFunc(gl.EQUAL, this._maskConfig, 0xff);\r\n                gl.stencilOp(gl.KEEP, gl.INCR, gl.INCR);\r\n                this._maskConfig++;\r\n            }\r\n            children = masks[i];\r\n            numChildren = children.length;\r\n            for (var j = 0; j < numChildren; ++j) {\r\n                mask = children[j];\r\n                for (var k = 0; k < numRenderables; ++k) {\r\n                    renderableGL = this._registeredMasks[k];\r\n                    //console.log(\"testing for \" + mask[\"hierarchicalMaskID\"] + \", \" + mask.name);\r\n                    if (renderableGL.maskId == mask.id) {\r\n                        //console.log(\"Rendering hierarchicalMaskID \" + mask[\"hierarchicalMaskID\"]);\r\n                        this._drawMask(camera, renderableGL);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        gl.stencilFunc(gl.EQUAL, this._maskConfig, 0xff);\r\n        gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\r\n        this._pContext.setColorMask(true, true, true, true);\r\n        this._pContext.setDepthTest(true, ContextGLCompareMode_1.ContextGLCompareMode.LESS);\r\n        //this._stage.setRenderTarget(oldRenderTarget);\r\n    };\r\n    RendererBase.prototype._drawMask = function (camera, renderableGL) {\r\n        var surfaceGL = renderableGL.surfaceGL;\r\n        var passes = surfaceGL.passes;\r\n        var len = passes.length;\r\n        var pass = passes[len - 1];\r\n        this.activatePass(pass, camera);\r\n        this._pContext.setDepthTest(false, ContextGLCompareMode_1.ContextGLCompareMode.LESS); //TODO: setup so as not to override activate\r\n        // only render last pass for now\r\n        renderableGL._iRender(pass, camera, this._pRttViewProjectionMatrix);\r\n        this.deactivatePass(pass);\r\n    };\r\n    RendererBase.prototype._checkMasksConfig = function (masksConfig) {\r\n        if (this._activeMasksConfig.length != masksConfig.length)\r\n            return true;\r\n        var numLayers = masksConfig.length;\r\n        var numChildren;\r\n        var childConfig;\r\n        var activeNumChildren;\r\n        var activeChildConfig;\r\n        for (var i = 0; i < numLayers; i++) {\r\n            childConfig = masksConfig[i];\r\n            numChildren = childConfig.length;\r\n            activeChildConfig = this._activeMasksConfig[i];\r\n            activeNumChildren = activeChildConfig.length;\r\n            if (activeNumChildren != numChildren)\r\n                return true;\r\n            for (var j = 0; j < numChildren; j++) {\r\n                if (activeChildConfig[j] != childConfig[j])\r\n                    return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    RendererBase._iCollectionMark = 0;\r\n    RendererBase._abstractionClassPool = new Object();\r\n    return RendererBase;\r\n}(EventDispatcher_1.EventDispatcher));\r\nexports.RendererBase = RendererBase;\r\n},{\"./sort/RenderableMergeSort\":\"awayjs-renderergl/lib/sort/RenderableMergeSort\",\"./surfaces/SurfacePool\":\"awayjs-renderergl/lib/surfaces/SurfacePool\",\"awayjs-core/lib/events/EventDispatcher\":undefined,\"awayjs-core/lib/geom/Matrix3D\":undefined,\"awayjs-core/lib/geom/Matrix3DUtils\":undefined,\"awayjs-core/lib/geom/Point\":undefined,\"awayjs-core/lib/geom/Rectangle\":undefined,\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-display/lib/events/RendererEvent\":undefined,\"awayjs-stagegl/lib/aglsl/assembler/AGALMiniAssembler\":undefined,\"awayjs-stagegl/lib/base/ContextGLBlendFactor\":undefined,\"awayjs-stagegl/lib/base/ContextGLCompareMode\":undefined,\"awayjs-stagegl/lib/events/StageEvent\":undefined,\"awayjs-stagegl/lib/managers/StageManager\":undefined}],\"awayjs-renderergl/lib/animators/AnimationSetBase\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar AssetBase_1 = require(\"awayjs-core/lib/library/AssetBase\");\r\nvar AbstractMethodError_1 = require(\"awayjs-core/lib/errors/AbstractMethodError\");\r\nvar AnimationSetError_1 = require(\"../errors/AnimationSetError\");\r\n/**\r\n * Provides an abstract base class for data set classes that hold animation data for use in animator classes.\r\n *\r\n * @see away.animators.AnimatorBase\r\n */\r\nvar AnimationSetBase = (function (_super) {\r\n    __extends(AnimationSetBase, _super);\r\n    function AnimationSetBase() {\r\n        _super.call(this);\r\n        this._animations = new Array();\r\n        this._animationNames = new Array();\r\n        this._animationDictionary = new Object();\r\n    }\r\n    /**\r\n     * Retrieves a temporary GPU register that's still free.\r\n     *\r\n     * @param exclude An array of non-free temporary registers.\r\n     * @param excludeAnother An additional register that's not free.\r\n     * @return A temporary register that can be used.\r\n     */\r\n    AnimationSetBase.prototype._pFindTempReg = function (exclude, excludeAnother) {\r\n        if (excludeAnother === void 0) { excludeAnother = null; }\r\n        var i = 0;\r\n        var reg;\r\n        while (true) {\r\n            reg = \"vt\" + i;\r\n            if (exclude.indexOf(reg) == -1 && excludeAnother != reg)\r\n                return reg;\r\n            ++i;\r\n        }\r\n    };\r\n    Object.defineProperty(AnimationSetBase.prototype, \"usesCPU\", {\r\n        /**\r\n         * Indicates whether the properties of the animation data contained within the set combined with\r\n         * the vertex registers already in use on shading materials allows the animation data to utilise\r\n         * GPU calls.\r\n         */\r\n        get: function () {\r\n            return this._usesCPU;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Called by the material to reset the GPU indicator before testing whether register space in the shader\r\n     * is available for running GPU-based animation code.\r\n     *\r\n     * @private\r\n     */\r\n    AnimationSetBase.prototype.resetGPUCompatibility = function () {\r\n        this._usesCPU = false;\r\n    };\r\n    AnimationSetBase.prototype.cancelGPUCompatibility = function () {\r\n        this._usesCPU = true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    AnimationSetBase.prototype.getAGALVertexCode = function (shader, registerCache, sharedRegisters) {\r\n        throw new AbstractMethodError_1.AbstractMethodError();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    AnimationSetBase.prototype.getAGALFragmentCode = function (shader, registerCache, shadedTarget) {\r\n        throw new AbstractMethodError_1.AbstractMethodError();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    AnimationSetBase.prototype.getAGALUVCode = function (shader, registerCache, sharedRegisters) {\r\n        throw new AbstractMethodError_1.AbstractMethodError();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    AnimationSetBase.prototype.doneAGALCode = function (shader) {\r\n        throw new AbstractMethodError_1.AbstractMethodError();\r\n    };\r\n    Object.defineProperty(AnimationSetBase.prototype, \"assetType\", {\r\n        /**\r\n         * @inheritDoc\r\n         */\r\n        get: function () {\r\n            return AnimationSetBase.assetType;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AnimationSetBase.prototype, \"animations\", {\r\n        /**\r\n         * Returns a vector of animation state objects that make up the contents of the animation data set.\r\n         */\r\n        get: function () {\r\n            return this._animations;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AnimationSetBase.prototype, \"animationNames\", {\r\n        /**\r\n         * Returns a vector of animation state objects that make up the contents of the animation data set.\r\n         */\r\n        get: function () {\r\n            return this._animationNames;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Check to determine whether a state is registered in the animation set under the given name.\r\n     *\r\n     * @param stateName The name of the animation state object to be checked.\r\n     */\r\n    AnimationSetBase.prototype.hasAnimation = function (name) {\r\n        return this._animationDictionary[name] != null;\r\n    };\r\n    /**\r\n     * Retrieves the animation state object registered in the animation data set under the given name.\r\n     *\r\n     * @param stateName The name of the animation state object to be retrieved.\r\n     */\r\n    AnimationSetBase.prototype.getAnimation = function (name) {\r\n        return this._animationDictionary[name];\r\n    };\r\n    /**\r\n     * Adds an animation state object to the aniamtion data set under the given name.\r\n     *\r\n     * @param stateName The name under which the animation state object will be stored.\r\n     * @param animationState The animation state object to be staored in the set.\r\n     */\r\n    AnimationSetBase.prototype.addAnimation = function (node) {\r\n        if (this._animationDictionary[node.name])\r\n            throw new AnimationSetError_1.AnimationSetError(\"root node name '\" + node.name + \"' already exists in the set\");\r\n        this._animationDictionary[node.name] = node;\r\n        this._animations.push(node);\r\n        this._animationNames.push(node.name);\r\n    };\r\n    /**\r\n     * Cleans up any resources used by the current object.\r\n     */\r\n    AnimationSetBase.prototype.dispose = function () {\r\n    };\r\n    AnimationSetBase.assetType = \"[asset AnimationSet]\";\r\n    return AnimationSetBase;\r\n}(AssetBase_1.AssetBase));\r\nexports.AnimationSetBase = AnimationSetBase;\r\n},{\"../errors/AnimationSetError\":\"awayjs-renderergl/lib/errors/AnimationSetError\",\"awayjs-core/lib/errors/AbstractMethodError\":undefined,\"awayjs-core/lib/library/AssetBase\":undefined}],\"awayjs-renderergl/lib/animators/AnimatorBase\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar AssetBase_1 = require(\"awayjs-core/lib/library/AssetBase\");\r\nvar AbstractMethodError_1 = require(\"awayjs-core/lib/errors/AbstractMethodError\");\r\nvar RequestAnimationFrame_1 = require(\"awayjs-core/lib/utils/RequestAnimationFrame\");\r\nvar getTimer_1 = require(\"awayjs-core/lib/utils/getTimer\");\r\nvar AnimatorEvent_1 = require(\"../events/AnimatorEvent\");\r\n/**\r\n * Dispatched when playback of an animation inside the animator object starts.\r\n *\r\n * @eventType away3d.events.AnimatorEvent\r\n */\r\n//[Event(name=\"start\", type=\"away3d.events.AnimatorEvent\")]\r\n/**\r\n * Dispatched when playback of an animation inside the animator object stops.\r\n *\r\n * @eventType away3d.events.AnimatorEvent\r\n */\r\n//[Event(name=\"stop\", type=\"away3d.events.AnimatorEvent\")]\r\n/**\r\n * Dispatched when playback of an animation reaches the end of an animation.\r\n *\r\n * @eventType away3d.events.AnimatorEvent\r\n */\r\n//[Event(name=\"cycle_complete\", type=\"away3d.events.AnimatorEvent\")]\r\n/**\r\n * Provides an abstract base class for animator classes that control animation output from a data set subtype of <code>AnimationSetBase</code>.\r\n *\r\n * @see away.animators.AnimationSetBase\r\n */\r\nvar AnimatorBase = (function (_super) {\r\n    __extends(AnimatorBase, _super);\r\n    /**\r\n     * Creates a new <code>AnimatorBase</code> object.\r\n     *\r\n     * @param animationSet The animation data set to be used by the animator object.\r\n     */\r\n    function AnimatorBase(animationSet) {\r\n        _super.call(this);\r\n        this._autoUpdate = true;\r\n        this._time = 0;\r\n        this._playbackSpeed = 1;\r\n        this._pOwners = new Array();\r\n        this._pAbsoluteTime = 0;\r\n        this._animationStates = new Object();\r\n        /**\r\n         * Enables translation of the animated sprite from data returned per frame via the positionDelta property of the active animation node. Defaults to true.\r\n         *\r\n         * @see away.animators.IAnimationState#positionDelta\r\n         */\r\n        this.updatePosition = true;\r\n        this._pAnimationSet = animationSet;\r\n        this._broadcaster = new RequestAnimationFrame_1.RequestAnimationFrame(this.onEnterFrame, this);\r\n    }\r\n    AnimatorBase.prototype.getAnimationState = function (node) {\r\n        var className = node.stateClass;\r\n        var uID = node.id;\r\n        if (this._animationStates[uID] == null)\r\n            this._animationStates[uID] = new className(this, node);\r\n        return this._animationStates[uID];\r\n    };\r\n    AnimatorBase.prototype.getAnimationStateByName = function (name) {\r\n        return this.getAnimationState(this._pAnimationSet.getAnimation(name));\r\n    };\r\n    Object.defineProperty(AnimatorBase.prototype, \"absoluteTime\", {\r\n        /**\r\n         * Returns the internal absolute time of the animator, calculated by the current time and the playback speed.\r\n         *\r\n         * @see #time\r\n         * @see #playbackSpeed\r\n         */\r\n        get: function () {\r\n            return this._pAbsoluteTime;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AnimatorBase.prototype, \"animationSet\", {\r\n        /**\r\n         * Returns the animation data set in use by the animator.\r\n         */\r\n        get: function () {\r\n            return this._pAnimationSet;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AnimatorBase.prototype, \"activeState\", {\r\n        /**\r\n         * Returns the current active animation state.\r\n         */\r\n        get: function () {\r\n            return this._pActiveState;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AnimatorBase.prototype, \"activeAnimation\", {\r\n        /**\r\n         * Returns the current active animation node.\r\n         */\r\n        get: function () {\r\n            return this._pAnimationSet.getAnimation(this._pActiveAnimationName);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AnimatorBase.prototype, \"activeAnimationName\", {\r\n        /**\r\n         * Returns the current active animation node.\r\n         */\r\n        get: function () {\r\n            return this._pActiveAnimationName;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AnimatorBase.prototype, \"autoUpdate\", {\r\n        /**\r\n         * Determines whether the animators internal update mechanisms are active. Used in cases\r\n         * where manual updates are required either via the <code>time</code> property or <code>update()</code> method.\r\n         * Defaults to true.\r\n         *\r\n         * @see #time\r\n         * @see #update()\r\n         */\r\n        get: function () {\r\n            return this._autoUpdate;\r\n        },\r\n        set: function (value) {\r\n            if (this._autoUpdate == value)\r\n                return;\r\n            this._autoUpdate = value;\r\n            if (this._autoUpdate)\r\n                this.start();\r\n            else\r\n                this.stop();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AnimatorBase.prototype, \"time\", {\r\n        /**\r\n         * Gets and sets the internal time clock of the animator.\r\n         */\r\n        get: function () {\r\n            return this._time;\r\n        },\r\n        set: function (value) {\r\n            if (this._time == value)\r\n                return;\r\n            this.update(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets the animation phase of the current active state's animation clip(s).\r\n     *\r\n     * @param value The phase value to use. 0 represents the beginning of an animation clip, 1 represents the end.\r\n     */\r\n    AnimatorBase.prototype.phase = function (value) {\r\n        this._pActiveState.phase(value);\r\n    };\r\n    Object.defineProperty(AnimatorBase.prototype, \"playbackSpeed\", {\r\n        /**\r\n         * The amount by which passed time should be scaled. Used to slow down or speed up animations. Defaults to 1.\r\n         */\r\n        get: function () {\r\n            return this._playbackSpeed;\r\n        },\r\n        set: function (value) {\r\n            this._playbackSpeed = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    AnimatorBase.prototype.setRenderState = function (shader, renderable, stage, camera) {\r\n        throw new AbstractMethodError_1.AbstractMethodError();\r\n    };\r\n    /**\r\n     * Resumes the automatic playback clock controling the active state of the animator.\r\n     */\r\n    AnimatorBase.prototype.start = function () {\r\n        if (this._isPlaying || !this._autoUpdate)\r\n            return;\r\n        this._time = this._pAbsoluteTime = getTimer_1.getTimer();\r\n        this._isPlaying = true;\r\n        this._broadcaster.start();\r\n        if (!this.hasEventListener(AnimatorEvent_1.AnimatorEvent.START))\r\n            return;\r\n        if (this._startEvent == null)\r\n            this._startEvent = new AnimatorEvent_1.AnimatorEvent(AnimatorEvent_1.AnimatorEvent.START, this);\r\n        this.dispatchEvent(this._startEvent);\r\n    };\r\n    /**\r\n     * Pauses the automatic playback clock of the animator, in case manual updates are required via the\r\n     * <code>time</code> property or <code>update()</code> method.\r\n     *\r\n     * @see #time\r\n     * @see #update()\r\n     */\r\n    AnimatorBase.prototype.stop = function () {\r\n        if (!this._isPlaying)\r\n            return;\r\n        this._isPlaying = false;\r\n        this._broadcaster.stop();\r\n        if (!this.hasEventListener(AnimatorEvent_1.AnimatorEvent.STOP))\r\n            return;\r\n        if (this._stopEvent == null)\r\n            this._stopEvent = new AnimatorEvent_1.AnimatorEvent(AnimatorEvent_1.AnimatorEvent.STOP, this);\r\n        this.dispatchEvent(this._stopEvent);\r\n    };\r\n    /**\r\n     * Provides a way to manually update the active state of the animator when automatic\r\n     * updates are disabled.\r\n     *\r\n     * @see #stop()\r\n     * @see #autoUpdate\r\n     */\r\n    AnimatorBase.prototype.update = function (time) {\r\n        var dt = (time - this._time) * this.playbackSpeed;\r\n        this._pUpdateDeltaTime(dt);\r\n        this._time = time;\r\n    };\r\n    AnimatorBase.prototype.reset = function (name, offset) {\r\n        if (offset === void 0) { offset = 0; }\r\n        this.getAnimationState(this._pAnimationSet.getAnimation(name)).offset(offset + this._pAbsoluteTime);\r\n    };\r\n    /**\r\n     * Used by the sprite object to which the animator is applied, registers the owner for internal use.\r\n     *\r\n     * @private\r\n     */\r\n    AnimatorBase.prototype.addOwner = function (sprite) {\r\n        this._pOwners.push(sprite);\r\n    };\r\n    /**\r\n     * Used by the sprite object from which the animator is removed, unregisters the owner for internal use.\r\n     *\r\n     * @private\r\n     */\r\n    AnimatorBase.prototype.removeOwner = function (sprite) {\r\n        this._pOwners.splice(this._pOwners.indexOf(sprite), 1);\r\n    };\r\n    /**\r\n     * Internal abstract method called when the time delta property of the animator's contents requires updating.\r\n     *\r\n     * @private\r\n     */\r\n    AnimatorBase.prototype._pUpdateDeltaTime = function (dt) {\r\n        this._pAbsoluteTime += dt;\r\n        this._pActiveState.update(this._pAbsoluteTime);\r\n        if (this.updatePosition)\r\n            this.applyPositionDelta();\r\n    };\r\n    /**\r\n     * Enter frame event handler for automatically updating the active state of the animator.\r\n     */\r\n    AnimatorBase.prototype.onEnterFrame = function (event) {\r\n        if (event === void 0) { event = null; }\r\n        this.update(getTimer_1.getTimer());\r\n    };\r\n    AnimatorBase.prototype.applyPositionDelta = function () {\r\n        var delta = this._pActiveState.positionDelta;\r\n        var dist = delta.length;\r\n        var len;\r\n        if (dist > 0) {\r\n            len = this._pOwners.length;\r\n            for (var i = 0; i < len; ++i)\r\n                this._pOwners[i].transform.translateLocal(delta, dist);\r\n        }\r\n    };\r\n    /**\r\n     *  for internal use.\r\n     *\r\n     * @private\r\n     */\r\n    AnimatorBase.prototype.dispatchCycleEvent = function () {\r\n        if (this.hasEventListener(AnimatorEvent_1.AnimatorEvent.CYCLE_COMPLETE)) {\r\n            if (this._cycleEvent == null)\r\n                this._cycleEvent = new AnimatorEvent_1.AnimatorEvent(AnimatorEvent_1.AnimatorEvent.CYCLE_COMPLETE, this);\r\n            this.dispatchEvent(this._cycleEvent);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    AnimatorBase.prototype.clone = function () {\r\n        throw new AbstractMethodError_1.AbstractMethodError();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    AnimatorBase.prototype.dispose = function () {\r\n    };\r\n    AnimatorBase.prototype.invalidateElements = function () {\r\n        var sprite;\r\n        var len = this._pOwners.length;\r\n        for (var i = 0; i < len; i++) {\r\n            sprite = this._pOwners[i];\r\n            sprite.graphics.invalidateElements();\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    AnimatorBase.prototype.testGPUCompatibility = function (shader) {\r\n        throw new AbstractMethodError_1.AbstractMethodError();\r\n    };\r\n    Object.defineProperty(AnimatorBase.prototype, \"assetType\", {\r\n        /**\r\n         * @inheritDoc\r\n         */\r\n        get: function () {\r\n            return AnimatorBase.assetType;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    AnimatorBase.prototype.getRenderableElements = function (renderable, sourceElements) {\r\n        //nothing to do here\r\n        return sourceElements;\r\n    };\r\n    AnimatorBase.assetType = \"[asset Animator]\";\r\n    return AnimatorBase;\r\n}(AssetBase_1.AssetBase));\r\nexports.AnimatorBase = AnimatorBase;\r\n},{\"../events/AnimatorEvent\":\"awayjs-renderergl/lib/events/AnimatorEvent\",\"awayjs-core/lib/errors/AbstractMethodError\":undefined,\"awayjs-core/lib/library/AssetBase\":undefined,\"awayjs-core/lib/utils/RequestAnimationFrame\":undefined,\"awayjs-core/lib/utils/getTimer\":undefined}],\"awayjs-renderergl/lib/animators/ParticleAnimationSet\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar AnimationSetBase_1 = require(\"../animators/AnimationSetBase\");\r\nvar AnimationRegisterData_1 = require(\"../animators/data/AnimationRegisterData\");\r\nvar AnimationElements_1 = require(\"../animators/data/AnimationElements\");\r\nvar ParticleAnimationData_1 = require(\"../animators/data/ParticleAnimationData\");\r\nvar ParticleProperties_1 = require(\"../animators/data/ParticleProperties\");\r\nvar ParticlePropertiesMode_1 = require(\"../animators/data/ParticlePropertiesMode\");\r\nvar ParticleTimeNode_1 = require(\"../animators/nodes/ParticleTimeNode\");\r\n/**\r\n * The animation data set used by particle-based animators, containing particle animation data.\r\n *\r\n * @see away.animators.ParticleAnimator\r\n */\r\nvar ParticleAnimationSet = (function (_super) {\r\n    __extends(ParticleAnimationSet, _super);\r\n    /**\r\n     * Creates a new <code>ParticleAnimationSet</code>\r\n     *\r\n     * @param    [optional] usesDuration    Defines whether the animation set uses the <code>duration</code> data in its static properties to determine how long a particle is visible for. Defaults to false.\r\n     * @param    [optional] usesLooping     Defines whether the animation set uses a looping timeframe for each particle determined by the <code>startTime</code>, <code>duration</code> and <code>delay</code> data in its static properties function. Defaults to false. Requires <code>usesDuration</code> to be true.\r\n     * @param    [optional] usesDelay       Defines whether the animation set uses the <code>delay</code> data in its static properties to determine how long a particle is hidden for. Defaults to false. Requires <code>usesLooping</code> to be true.\r\n     */\r\n    function ParticleAnimationSet(usesDuration, usesLooping, usesDelay) {\r\n        if (usesDuration === void 0) { usesDuration = false; }\r\n        if (usesLooping === void 0) { usesLooping = false; }\r\n        if (usesDelay === void 0) { usesDelay = false; }\r\n        _super.call(this);\r\n        this._animationElements = new Object();\r\n        this._particleNodes = new Array();\r\n        this._localDynamicNodes = new Array();\r\n        this._localStaticNodes = new Array();\r\n        this._totalLenOfOneVertex = 0;\r\n        /**\r\n         *\r\n         */\r\n        this.shareAnimationGraphics = true;\r\n        //automatically add a particle time node to the set\r\n        this.addAnimation(this._timeNode = new ParticleTimeNode_1.ParticleTimeNode(usesDuration, usesLooping, usesDelay));\r\n    }\r\n    Object.defineProperty(ParticleAnimationSet.prototype, \"particleNodes\", {\r\n        /**\r\n         * Returns a vector of the particle animation nodes contained within the set.\r\n         */\r\n        get: function () {\r\n            return this._particleNodes;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleAnimationSet.prototype.addAnimation = function (node) {\r\n        var i;\r\n        var n = node;\r\n        n._iProcessAnimationSetting(this);\r\n        if (n.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_STATIC) {\r\n            n._iDataOffset = this._totalLenOfOneVertex;\r\n            this._totalLenOfOneVertex += n.dataLength;\r\n            this._localStaticNodes.push(n);\r\n        }\r\n        else if (n.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_DYNAMIC)\r\n            this._localDynamicNodes.push(n);\r\n        for (i = this._particleNodes.length - 1; i >= 0; i--) {\r\n            if (this._particleNodes[i].priority <= n.priority)\r\n                break;\r\n        }\r\n        this._particleNodes.splice(i + 1, 0, n);\r\n        _super.prototype.addAnimation.call(this, node);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleAnimationSet.prototype.getAGALVertexCode = function (shader, registerCache, sharedRegisters) {\r\n        //grab animationRegisterData from the materialpassbase or create a new one if the first time\r\n        this._iAnimationRegisterData = shader.animationRegisterData;\r\n        if (this._iAnimationRegisterData == null)\r\n            this._iAnimationRegisterData = shader.animationRegisterData = new AnimationRegisterData_1.AnimationRegisterData();\r\n        //reset animationRegisterData\r\n        this._iAnimationRegisterData.reset(registerCache, sharedRegisters, this.needVelocity);\r\n        var code = \"\";\r\n        var len = sharedRegisters.animatableAttributes.length;\r\n        for (var i = 0; i < len; i++)\r\n            code += \"mov \" + sharedRegisters.animationTargetRegisters[i] + \",\" + sharedRegisters.animatableAttributes[i] + \"\\n\";\r\n        code += \"mov \" + this._iAnimationRegisterData.positionTarget + \".xyz,\" + this._iAnimationRegisterData.vertexZeroConst + \"\\n\";\r\n        if (this.needVelocity)\r\n            code += \"mov \" + this._iAnimationRegisterData.velocityTarget + \".xyz,\" + this._iAnimationRegisterData.vertexZeroConst + \"\\n\";\r\n        var node;\r\n        var i;\r\n        for (i = 0; i < this._particleNodes.length; i++) {\r\n            node = this._particleNodes[i];\r\n            if (node.priority < ParticleAnimationSet.POST_PRIORITY)\r\n                code += node.getAGALVertexCode(shader, this, registerCache, this._iAnimationRegisterData);\r\n        }\r\n        code += \"add \" + this._iAnimationRegisterData.scaleAndRotateTarget + \".xyz,\" + this._iAnimationRegisterData.scaleAndRotateTarget + \".xyz,\" + this._iAnimationRegisterData.positionTarget + \".xyz\\n\";\r\n        for (i = 0; i < this._particleNodes.length; i++) {\r\n            node = this._particleNodes[i];\r\n            if (node.priority >= ParticleAnimationSet.POST_PRIORITY && node.priority < ParticleAnimationSet.COLOR_PRIORITY)\r\n                code += node.getAGALVertexCode(shader, this, registerCache, this._iAnimationRegisterData);\r\n        }\r\n        if (this.hasColorMulNode) {\r\n            this._iAnimationRegisterData.colorMulTarget = registerCache.getFreeVertexVectorTemp();\r\n            registerCache.addVertexTempUsages(this._iAnimationRegisterData.colorMulTarget, 1);\r\n            this._iAnimationRegisterData.colorMulVary = registerCache.getFreeVarying();\r\n            code += \"mov \" + this._iAnimationRegisterData.colorMulTarget + \",\" + this._iAnimationRegisterData.vertexOneConst + \"\\n\";\r\n        }\r\n        if (this.hasColorAddNode) {\r\n            this._iAnimationRegisterData.colorAddTarget = registerCache.getFreeVertexVectorTemp();\r\n            registerCache.addVertexTempUsages(this._iAnimationRegisterData.colorAddTarget, 1);\r\n            this._iAnimationRegisterData.colorAddVary = registerCache.getFreeVarying();\r\n            code += \"mov \" + this._iAnimationRegisterData.colorAddTarget + \",\" + this._iAnimationRegisterData.vertexZeroConst + \"\\n\";\r\n        }\r\n        for (i = 0; i < this._particleNodes.length; i++) {\r\n            node = this._particleNodes[i];\r\n            if (node.priority >= ParticleAnimationSet.COLOR_PRIORITY)\r\n                code += node.getAGALVertexCode(shader, this, registerCache, this._iAnimationRegisterData);\r\n        }\r\n        if (shader.usesFragmentAnimation && (this.hasColorAddNode || this.hasColorMulNode)) {\r\n            if (this.hasColorMulNode)\r\n                code += \"mov \" + this._iAnimationRegisterData.colorMulVary + \",\" + this._iAnimationRegisterData.colorMulTarget + \"\\n\";\r\n            if (this.hasColorAddNode)\r\n                code += \"mov \" + this._iAnimationRegisterData.colorAddVary + \",\" + this._iAnimationRegisterData.colorAddTarget + \"\\n\";\r\n        }\r\n        return code;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleAnimationSet.prototype.getAGALUVCode = function (shader, registerCache, sharedRegisters) {\r\n        var code = \"\";\r\n        if (this.hasUVNode) {\r\n            this._iAnimationRegisterData.setUVSourceAndTarget(sharedRegisters);\r\n            code += \"mov \" + this._iAnimationRegisterData.uvTarget + \".xy,\" + this._iAnimationRegisterData.uvAttribute.toString() + \"\\n\";\r\n            var node;\r\n            for (var i = 0; i < this._particleNodes.length; i++)\r\n                node = this._particleNodes[i];\r\n            code += node.getAGALUVCode(shader, this, registerCache, this._iAnimationRegisterData);\r\n            code += \"mov \" + this._iAnimationRegisterData.uvVar + \",\" + this._iAnimationRegisterData.uvTarget + \".xy\\n\";\r\n        }\r\n        else\r\n            code += \"mov \" + sharedRegisters.uvTarget + \",\" + sharedRegisters.uvSource + \"\\n\";\r\n        return code;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleAnimationSet.prototype.getAGALFragmentCode = function (shader, registerCache, shadedTarget) {\r\n        var code = \"\";\r\n        if (shader.usesFragmentAnimation && (this.hasColorAddNode || this.hasColorMulNode)) {\r\n            if (this.hasColorMulNode)\r\n                code += \"mul \" + shadedTarget + \",\" + shadedTarget + \",\" + this._iAnimationRegisterData.colorMulVary + \"\\n\";\r\n            if (this.hasColorAddNode)\r\n                code += \"add \" + shadedTarget + \",\" + shadedTarget + \",\" + this._iAnimationRegisterData.colorAddVary + \"\\n\";\r\n        }\r\n        return code;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleAnimationSet.prototype.doneAGALCode = function (shader) {\r\n        //set vertexZeroConst,vertexOneConst,vertexTwoConst\r\n        shader.setVertexConst(this._iAnimationRegisterData.vertexZeroConst.index, 0, 1, 2, 0);\r\n    };\r\n    Object.defineProperty(ParticleAnimationSet.prototype, \"usesCPU\", {\r\n        /**\r\n         * @inheritDoc\r\n         */\r\n        get: function () {\r\n            return false;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleAnimationSet.prototype.cancelGPUCompatibility = function () {\r\n    };\r\n    ParticleAnimationSet.prototype.dispose = function () {\r\n        for (var key in this._animationElements)\r\n            this._animationElements[key].dispose();\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    ParticleAnimationSet.prototype.getAnimationElements = function (graphic) {\r\n        var animationElements = (this.shareAnimationGraphics) ? this._animationElements[graphic.elements.id] : this._animationElements[graphic.id];\r\n        if (animationElements)\r\n            return animationElements;\r\n        this._iGenerateAnimationElements(graphic.parent);\r\n        return (this.shareAnimationGraphics) ? this._animationElements[graphic.elements.id] : this._animationElements[graphic.id];\r\n    };\r\n    /** @private */\r\n    ParticleAnimationSet.prototype._iGenerateAnimationElements = function (graphics) {\r\n        if (this.initParticleFunc == null)\r\n            throw (new Error(\"no initParticleFunc set\"));\r\n        var i, j, k;\r\n        var animationElements;\r\n        var newAnimationElements = false;\r\n        var elements;\r\n        var graphic;\r\n        var localNode;\r\n        for (i = 0; i < graphics.count; i++) {\r\n            graphic = graphics.getGraphicAt(i);\r\n            elements = graphic.elements;\r\n            if (this.shareAnimationGraphics) {\r\n                animationElements = this._animationElements[elements.id];\r\n                if (animationElements)\r\n                    continue;\r\n            }\r\n            animationElements = new AnimationElements_1.AnimationElements();\r\n            if (this.shareAnimationGraphics)\r\n                this._animationElements[elements.id] = animationElements;\r\n            else\r\n                this._animationElements[graphic.id] = animationElements;\r\n            newAnimationElements = true;\r\n            //create the vertexData vector that will be used for local node data\r\n            animationElements.createVertexData(elements.numVertices, this._totalLenOfOneVertex);\r\n        }\r\n        if (!newAnimationElements)\r\n            return;\r\n        var particles = graphics.particles;\r\n        var particlesLength = particles.length;\r\n        var numParticles = graphics.numParticles;\r\n        var particleProperties = new ParticleProperties_1.ParticleProperties();\r\n        var particle;\r\n        var oneDataLen;\r\n        var oneDataOffset;\r\n        var counterForVertex;\r\n        var counterForOneData;\r\n        var oneData;\r\n        var numVertices;\r\n        var vertexData;\r\n        var vertexLength;\r\n        var startingOffset;\r\n        var vertexOffset;\r\n        //default values for particle param\r\n        particleProperties.total = numParticles;\r\n        particleProperties.startTime = 0;\r\n        particleProperties.duration = 1000;\r\n        particleProperties.delay = 0.1;\r\n        i = 0;\r\n        j = 0;\r\n        while (i < numParticles) {\r\n            particleProperties.index = i;\r\n            //call the init on the particle parameters\r\n            this.initParticleFunc.call(this.initParticleScope, particleProperties);\r\n            //create the next set of node properties for the particle\r\n            for (k = 0; k < this._localStaticNodes.length; k++)\r\n                this._localStaticNodes[k]._iGeneratePropertyOfOneParticle(particleProperties);\r\n            //loop through all particle data for the curent particle\r\n            while (j < particlesLength && (particle = particles[j]).particleIndex == i) {\r\n                //find the target animationElements\r\n                for (k = 0; k < graphics.count; k++) {\r\n                    graphic = graphics.getGraphicAt(k);\r\n                    if (graphic.elements == particle.elements) {\r\n                        animationElements = (this.shareAnimationGraphics) ? this._animationElements[graphic.elements.id] : this._animationElements[graphic.id];\r\n                        break;\r\n                    }\r\n                }\r\n                numVertices = particle.numVertices;\r\n                vertexData = animationElements.vertexData;\r\n                vertexLength = numVertices * this._totalLenOfOneVertex;\r\n                startingOffset = animationElements.numProcessedVertices * this._totalLenOfOneVertex;\r\n                //loop through each static local node in the animation set\r\n                for (k = 0; k < this._localStaticNodes.length; k++) {\r\n                    localNode = this._localStaticNodes[k];\r\n                    oneData = localNode.oneData;\r\n                    oneDataLen = localNode.dataLength;\r\n                    oneDataOffset = startingOffset + localNode._iDataOffset;\r\n                    //loop through each vertex set in the vertex data\r\n                    for (counterForVertex = 0; counterForVertex < vertexLength; counterForVertex += this._totalLenOfOneVertex) {\r\n                        vertexOffset = oneDataOffset + counterForVertex;\r\n                        //add the data for the local node to the vertex data\r\n                        for (counterForOneData = 0; counterForOneData < oneDataLen; counterForOneData++)\r\n                            vertexData[vertexOffset + counterForOneData] = oneData[counterForOneData];\r\n                    }\r\n                }\r\n                //store particle properties if they need to be retreived for dynamic local nodes\r\n                if (this._localDynamicNodes.length)\r\n                    animationElements.animationParticles.push(new ParticleAnimationData_1.ParticleAnimationData(i, particleProperties.startTime, particleProperties.duration, particleProperties.delay, particle));\r\n                animationElements.numProcessedVertices += numVertices;\r\n                //next index\r\n                j++;\r\n            }\r\n            //next particle\r\n            i++;\r\n        }\r\n    };\r\n    /**\r\n     * Property used by particle nodes that require compilers at the end of the shader\r\n     */\r\n    ParticleAnimationSet.POST_PRIORITY = 9;\r\n    /**\r\n     * Property used by particle nodes that require color compilers\r\n     */\r\n    ParticleAnimationSet.COLOR_PRIORITY = 18;\r\n    return ParticleAnimationSet;\r\n}(AnimationSetBase_1.AnimationSetBase));\r\nexports.ParticleAnimationSet = ParticleAnimationSet;\r\n},{\"../animators/AnimationSetBase\":\"awayjs-renderergl/lib/animators/AnimationSetBase\",\"../animators/data/AnimationElements\":\"awayjs-renderergl/lib/animators/data/AnimationElements\",\"../animators/data/AnimationRegisterData\":\"awayjs-renderergl/lib/animators/data/AnimationRegisterData\",\"../animators/data/ParticleAnimationData\":\"awayjs-renderergl/lib/animators/data/ParticleAnimationData\",\"../animators/data/ParticleProperties\":\"awayjs-renderergl/lib/animators/data/ParticleProperties\",\"../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../animators/nodes/ParticleTimeNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleTimeNode\"}],\"awayjs-renderergl/lib/animators/ParticleAnimator\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar AnimatorBase_1 = require(\"../animators/AnimatorBase\");\r\nvar AnimationElements_1 = require(\"../animators/data/AnimationElements\");\r\nvar ParticlePropertiesMode_1 = require(\"../animators/data/ParticlePropertiesMode\");\r\n/**\r\n * Provides an interface for assigning paricle-based animation data sets to sprite-based entity objects\r\n * and controlling the various available states of animation through an interative playhead that can be\r\n * automatically updated or manually triggered.\r\n *\r\n * Requires that the containing geometry of the parent sprite is particle geometry\r\n *\r\n * @see away.base.ParticleGraphics\r\n */\r\nvar ParticleAnimator = (function (_super) {\r\n    __extends(ParticleAnimator, _super);\r\n    /**\r\n     * Creates a new <code>ParticleAnimator</code> object.\r\n     *\r\n     * @param particleAnimationSet The animation data set containing the particle animations used by the animator.\r\n     */\r\n    function ParticleAnimator(particleAnimationSet) {\r\n        _super.call(this, particleAnimationSet);\r\n        this._animationParticleStates = new Array();\r\n        this._animatorParticleStates = new Array();\r\n        this._timeParticleStates = new Array();\r\n        this._totalLenOfOneVertex = 0;\r\n        this._animatorSubGeometries = new Object();\r\n        this._particleAnimationSet = particleAnimationSet;\r\n        var state;\r\n        var node;\r\n        for (var i = 0; i < this._particleAnimationSet.particleNodes.length; i++) {\r\n            node = this._particleAnimationSet.particleNodes[i];\r\n            state = this.getAnimationState(node);\r\n            if (node.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_DYNAMIC) {\r\n                this._animatorParticleStates.push(state);\r\n                node._iDataOffset = this._totalLenOfOneVertex;\r\n                this._totalLenOfOneVertex += node.dataLength;\r\n            }\r\n            else {\r\n                this._animationParticleStates.push(state);\r\n            }\r\n            if (state.needUpdateTime)\r\n                this._timeParticleStates.push(state);\r\n        }\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleAnimator.prototype.clone = function () {\r\n        return new ParticleAnimator(this._particleAnimationSet);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleAnimator.prototype.setRenderState = function (shader, renderable, stage, camera) {\r\n        var animationRegisterData = this._particleAnimationSet._iAnimationRegisterData;\r\n        var graphic = renderable.graphic;\r\n        if (!graphic)\r\n            throw (new Error(\"Must be graphic\"));\r\n        //process animation sub geometries\r\n        var animationElements = this._particleAnimationSet.getAnimationElements(graphic);\r\n        var i;\r\n        for (i = 0; i < this._animationParticleStates.length; i++)\r\n            this._animationParticleStates[i].setRenderState(shader, renderable, animationElements, animationRegisterData, camera, stage);\r\n        //process animator subgeometries\r\n        var animatorElements = this.getAnimatorElements(graphic);\r\n        for (i = 0; i < this._animatorParticleStates.length; i++)\r\n            this._animatorParticleStates[i].setRenderState(shader, renderable, animatorElements, animationRegisterData, camera, stage);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleAnimator.prototype.testGPUCompatibility = function (shader) {\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleAnimator.prototype.start = function () {\r\n        _super.prototype.start.call(this);\r\n        for (var i = 0; i < this._timeParticleStates.length; i++)\r\n            this._timeParticleStates[i].offset(this._pAbsoluteTime);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleAnimator.prototype._pUpdateDeltaTime = function (dt) {\r\n        this._pAbsoluteTime += dt;\r\n        for (var i = 0; i < this._timeParticleStates.length; i++)\r\n            this._timeParticleStates[i].update(this._pAbsoluteTime);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleAnimator.prototype.resetTime = function (offset) {\r\n        if (offset === void 0) { offset = 0; }\r\n        for (var i = 0; i < this._timeParticleStates.length; i++)\r\n            this._timeParticleStates[i].offset(this._pAbsoluteTime + offset);\r\n        this.update(this.time);\r\n    };\r\n    ParticleAnimator.prototype.dispose = function () {\r\n        for (var key in this._animatorSubGeometries)\r\n            this._animatorSubGeometries[key].dispose();\r\n    };\r\n    ParticleAnimator.prototype.getAnimatorElements = function (graphic) {\r\n        if (!this._animatorParticleStates.length)\r\n            return;\r\n        var elements = graphic.elements;\r\n        var animatorElements = this._animatorSubGeometries[elements.id] = new AnimationElements_1.AnimationElements();\r\n        //create the vertexData vector that will be used for local state data\r\n        animatorElements.createVertexData(elements.numVertices, this._totalLenOfOneVertex);\r\n        //pass the particles data to the animator elements\r\n        animatorElements.animationParticles = this._particleAnimationSet.getAnimationElements(graphic).animationParticles;\r\n    };\r\n    return ParticleAnimator;\r\n}(AnimatorBase_1.AnimatorBase));\r\nexports.ParticleAnimator = ParticleAnimator;\r\n},{\"../animators/AnimatorBase\":\"awayjs-renderergl/lib/animators/AnimatorBase\",\"../animators/data/AnimationElements\":\"awayjs-renderergl/lib/animators/data/AnimationElements\",\"../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\"}],\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar AnimationSetBase_1 = require(\"../animators/AnimationSetBase\");\r\n/**\r\n * The animation data set used by skeleton-based animators, containing skeleton animation data.\r\n *\r\n * @see away.animators.SkeletonAnimator\r\n */\r\nvar SkeletonAnimationSet = (function (_super) {\r\n    __extends(SkeletonAnimationSet, _super);\r\n    /**\r\n     * Creates a new <code>SkeletonAnimationSet</code> object.\r\n     *\r\n     * @param jointsPerVertex Sets the amount of skeleton joints that can be linked to a single vertex via skinned weight values. For GPU-base animation, the maximum allowed value is 4. Defaults to 4.\r\n     */\r\n    function SkeletonAnimationSet(jointsPerVertex) {\r\n        if (jointsPerVertex === void 0) { jointsPerVertex = 4; }\r\n        _super.call(this);\r\n        this._jointsPerVertex = jointsPerVertex;\r\n    }\r\n    Object.defineProperty(SkeletonAnimationSet.prototype, \"jointsPerVertex\", {\r\n        /**\r\n         * Returns the amount of skeleton joints that can be linked to a single vertex via skinned weight values. For GPU-base animation, the\r\n         * maximum allowed value is 4.\r\n         */\r\n        get: function () {\r\n            return this._jointsPerVertex;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SkeletonAnimationSet.prototype, \"matricesIndex\", {\r\n        get: function () {\r\n            return this._matricesIndex;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    SkeletonAnimationSet.prototype.getAGALVertexCode = function (shader, registerCache, sharedRegisters) {\r\n        this._matricesIndex = registerCache.numUsedVertexConstants;\r\n        var indexOffset0 = this._matricesIndex;\r\n        var indexOffset1 = this._matricesIndex + 1;\r\n        var indexOffset2 = this._matricesIndex + 2;\r\n        var indexStream = registerCache.getFreeVertexAttribute();\r\n        shader.jointIndexIndex = indexStream.index;\r\n        var weightStream = registerCache.getFreeVertexAttribute();\r\n        shader.jointWeightIndex = weightStream.index;\r\n        var indices = [indexStream + \".x\", indexStream + \".y\", indexStream + \".z\", indexStream + \".w\"];\r\n        var weights = [weightStream + \".x\", weightStream + \".y\", weightStream + \".z\", weightStream + \".w\"];\r\n        var temp1 = registerCache.getFreeVertexVectorTemp();\r\n        var dot = \"dp4\";\r\n        var code = \"\";\r\n        var len = sharedRegisters.animatableAttributes.length;\r\n        for (var i = 0; i < len; ++i) {\r\n            var source = sharedRegisters.animatableAttributes[i];\r\n            var target = sharedRegisters.animationTargetRegisters[i];\r\n            for (var j = 0; j < this._jointsPerVertex; ++j) {\r\n                registerCache.getFreeVertexConstant();\r\n                registerCache.getFreeVertexConstant();\r\n                registerCache.getFreeVertexConstant();\r\n                code += dot + \" \" + temp1 + \".x, \" + source + \", vc[\" + indices[j] + \"+\" + indexOffset0 + \"]\\n\" +\r\n                    dot + \" \" + temp1 + \".y, \" + source + \", vc[\" + indices[j] + \"+\" + indexOffset1 + \"]\\n\" +\r\n                    dot + \" \" + temp1 + \".z, \" + source + \", vc[\" + indices[j] + \"+\" + indexOffset2 + \"]\\n\" +\r\n                    \"mov \" + temp1 + \".w, \" + source + \".w\\n\" +\r\n                    \"mul \" + temp1 + \", \" + temp1 + \", \" + weights[j] + \"\\n\"; // apply weight\r\n                // add or mov to target. Need to write to a temp reg first, because an output can be a target\r\n                if (j == 0)\r\n                    code += \"mov \" + target + \", \" + temp1 + \"\\n\";\r\n                else\r\n                    code += \"add \" + target + \", \" + target + \", \" + temp1 + \"\\n\";\r\n            }\r\n            // switch to dp3 once positions have been transformed, from now on, it should only be vectors instead of points\r\n            dot = \"dp3\";\r\n        }\r\n        return code;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    SkeletonAnimationSet.prototype.getAGALFragmentCode = function (shader, registerCache, shadedTarget) {\r\n        return \"\";\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    SkeletonAnimationSet.prototype.getAGALUVCode = function (shader, registerCache, sharedRegisters) {\r\n        return \"mov \" + sharedRegisters.uvTarget + \",\" + sharedRegisters.uvSource + \"\\n\";\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    SkeletonAnimationSet.prototype.doneAGALCode = function (shader) {\r\n    };\r\n    return SkeletonAnimationSet;\r\n}(AnimationSetBase_1.AnimationSetBase));\r\nexports.SkeletonAnimationSet = SkeletonAnimationSet;\r\n},{\"../animators/AnimationSetBase\":\"awayjs-renderergl/lib/animators/AnimationSetBase\"}],\"awayjs-renderergl/lib/animators/SkeletonAnimator\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar ElementsEvent_1 = require(\"awayjs-display/lib/events/ElementsEvent\");\r\nvar AnimatorBase_1 = require(\"../animators/AnimatorBase\");\r\nvar JointPose_1 = require(\"../animators/data/JointPose\");\r\nvar SkeletonPose_1 = require(\"../animators/data/SkeletonPose\");\r\nvar AnimationStateEvent_1 = require(\"../events/AnimationStateEvent\");\r\n/**\r\n * Provides an interface for assigning skeleton-based animation data sets to sprite-based entity objects\r\n * and controlling the various available states of animation through an interative playhead that can be\r\n * automatically updated or manually triggered.\r\n */\r\nvar SkeletonAnimator = (function (_super) {\r\n    __extends(SkeletonAnimator, _super);\r\n    /**\r\n     * Creates a new <code>SkeletonAnimator</code> object.\r\n     *\r\n     * @param skeletonAnimationSet The animation data set containing the skeleton animations used by the animator.\r\n     * @param skeleton The skeleton object used for calculating the resulting global matrices for transforming skinned sprite data.\r\n     * @param forceCPU Optional value that only allows the animator to perform calculation on the CPU. Defaults to false.\r\n     */\r\n    function SkeletonAnimator(animationSet, skeleton, forceCPU) {\r\n        var _this = this;\r\n        if (forceCPU === void 0) { forceCPU = false; }\r\n        _super.call(this, animationSet);\r\n        this._globalPose = new SkeletonPose_1.SkeletonPose();\r\n        this._morphedElements = new Object();\r\n        this._morphedElementsDirty = new Object();\r\n        this._skeletonAnimationSet = animationSet;\r\n        this._skeleton = skeleton;\r\n        this._forceCPU = forceCPU;\r\n        this._jointsPerVertex = animationSet.jointsPerVertex;\r\n        this._numJoints = this._skeleton.numJoints;\r\n        this._globalMatrices = new Float32Array(this._numJoints * 12);\r\n        var j = 0;\r\n        for (var i = 0; i < this._numJoints; ++i) {\r\n            this._globalMatrices[j++] = 1;\r\n            this._globalMatrices[j++] = 0;\r\n            this._globalMatrices[j++] = 0;\r\n            this._globalMatrices[j++] = 0;\r\n            this._globalMatrices[j++] = 0;\r\n            this._globalMatrices[j++] = 1;\r\n            this._globalMatrices[j++] = 0;\r\n            this._globalMatrices[j++] = 0;\r\n            this._globalMatrices[j++] = 0;\r\n            this._globalMatrices[j++] = 0;\r\n            this._globalMatrices[j++] = 1;\r\n            this._globalMatrices[j++] = 0;\r\n        }\r\n        this._onTransitionCompleteDelegate = function (event) { return _this.onTransitionComplete(event); };\r\n        this._onIndicesUpdateDelegate = function (event) { return _this.onIndicesUpdate(event); };\r\n        this._onVerticesUpdateDelegate = function (event) { return _this.onVerticesUpdate(event); };\r\n    }\r\n    Object.defineProperty(SkeletonAnimator.prototype, \"globalMatrices\", {\r\n        /**\r\n         * returns the calculated global matrices of the current skeleton pose.\r\n         *\r\n         * @see #globalPose\r\n         */\r\n        get: function () {\r\n            if (this._globalPropertiesDirty)\r\n                this.updateGlobalProperties();\r\n            return this._globalMatrices;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SkeletonAnimator.prototype, \"globalPose\", {\r\n        /**\r\n         * returns the current skeleton pose output from the animator.\r\n         *\r\n         * @see away.animators.data.SkeletonPose\r\n         */\r\n        get: function () {\r\n            if (this._globalPropertiesDirty)\r\n                this.updateGlobalProperties();\r\n            return this._globalPose;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SkeletonAnimator.prototype, \"skeleton\", {\r\n        /**\r\n         * Returns the skeleton object in use by the animator - this defines the number and heirarchy of joints used by the\r\n         * skinned geoemtry to which skeleon animator is applied.\r\n         */\r\n        get: function () {\r\n            return this._skeleton;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SkeletonAnimator.prototype, \"forceCPU\", {\r\n        /**\r\n         * Indicates whether the skeleton animator is disabled by default for GPU rendering, something that allows the animator to perform calculation on the GPU.\r\n         * Defaults to false.\r\n         */\r\n        get: function () {\r\n            return this._forceCPU;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SkeletonAnimator.prototype, \"useCondensedIndices\", {\r\n        /**\r\n         * Offers the option of enabling GPU accelerated animation on skeletons larger than 32 joints\r\n         * by condensing the number of joint index values required per sprite. Only applicable to\r\n         * skeleton animations that utilise more than one sprite object. Defaults to false.\r\n         */\r\n        get: function () {\r\n            return this._useCondensedIndices;\r\n        },\r\n        set: function (value) {\r\n            this._useCondensedIndices = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    SkeletonAnimator.prototype.clone = function () {\r\n        return new SkeletonAnimator(this._skeletonAnimationSet, this._skeleton, this._forceCPU);\r\n    };\r\n    /**\r\n     * Plays an animation state registered with the given name in the animation data set.\r\n     *\r\n     * @param name The data set name of the animation state to be played.\r\n     * @param transition An optional transition object that determines how the animator will transition from the currently active animation state.\r\n     * @param offset An option offset time (in milliseconds) that resets the state's internal clock to the absolute time of the animator plus the offset value. Required for non-looping animation states.\r\n     */\r\n    SkeletonAnimator.prototype.play = function (name, transition, offset) {\r\n        if (transition === void 0) { transition = null; }\r\n        if (offset === void 0) { offset = NaN; }\r\n        if (this._pActiveAnimationName == name)\r\n            return;\r\n        this._pActiveAnimationName = name;\r\n        if (!this._pAnimationSet.hasAnimation(name))\r\n            throw new Error(\"Animation root node \" + name + \" not found!\");\r\n        if (transition && this._pActiveNode) {\r\n            //setup the transition\r\n            this._pActiveNode = transition.getAnimationNode(this, this._pActiveNode, this._pAnimationSet.getAnimation(name), this._pAbsoluteTime);\r\n            this._pActiveNode.addEventListener(AnimationStateEvent_1.AnimationStateEvent.TRANSITION_COMPLETE, this._onTransitionCompleteDelegate);\r\n        }\r\n        else\r\n            this._pActiveNode = this._pAnimationSet.getAnimation(name);\r\n        this._pActiveState = this.getAnimationState(this._pActiveNode);\r\n        if (this.updatePosition) {\r\n            //update straight away to reset position deltas\r\n            this._pActiveState.update(this._pAbsoluteTime);\r\n            this._pActiveState.positionDelta;\r\n        }\r\n        this._activeSkeletonState = this._pActiveState;\r\n        this.start();\r\n        //apply a time offset if specified\r\n        if (!isNaN(offset))\r\n            this.reset(name, offset);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    SkeletonAnimator.prototype.setRenderState = function (shader, renderable, stage, camera) {\r\n        // do on request of globalProperties\r\n        if (this._globalPropertiesDirty)\r\n            this.updateGlobalProperties();\r\n        var elements = renderable.graphic.elements;\r\n        elements.useCondensedIndices = this._useCondensedIndices;\r\n        if (this._useCondensedIndices) {\r\n            // using a condensed data set\r\n            this.updateCondensedMatrices(elements.condensedIndexLookUp);\r\n            shader.setVertexConstFromArray(this._skeletonAnimationSet.matricesIndex, this._condensedMatrices);\r\n        }\r\n        else {\r\n            if (this._pAnimationSet.usesCPU) {\r\n                if (this._morphedElementsDirty[elements.id])\r\n                    this.morphElements(renderable, elements);\r\n                return;\r\n            }\r\n            shader.setVertexConstFromArray(this._skeletonAnimationSet.matricesIndex, this._globalMatrices);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    SkeletonAnimator.prototype.testGPUCompatibility = function (shader) {\r\n        if (!this._useCondensedIndices && (this._forceCPU || this._jointsPerVertex > 4 || shader.numUsedVertexConstants + this._numJoints * 3 > 128))\r\n            this._pAnimationSet.cancelGPUCompatibility();\r\n    };\r\n    /**\r\n     * Applies the calculated time delta to the active animation state node or state transition object.\r\n     */\r\n    SkeletonAnimator.prototype._pUpdateDeltaTime = function (dt) {\r\n        _super.prototype._pUpdateDeltaTime.call(this, dt);\r\n        //invalidate pose matrices\r\n        this._globalPropertiesDirty = true;\r\n        //trigger geometry invalidation if using CPU animation\r\n        if (this._pAnimationSet.usesCPU)\r\n            this.invalidateElements();\r\n    };\r\n    SkeletonAnimator.prototype.updateCondensedMatrices = function (condensedIndexLookUp) {\r\n        var j = 0, k = 0;\r\n        var len = condensedIndexLookUp.length;\r\n        var srcIndex;\r\n        this._condensedMatrices = new Float32Array(len * 12);\r\n        for (var i = 0; i < len; i++) {\r\n            srcIndex = condensedIndexLookUp[i] * 12; //12 required for the three 4-component vectors that store the matrix\r\n            k = 12;\r\n            // copy into condensed\r\n            while (k--)\r\n                this._condensedMatrices[j++] = this._globalMatrices[srcIndex++];\r\n        }\r\n    };\r\n    SkeletonAnimator.prototype.updateGlobalProperties = function () {\r\n        this._globalPropertiesDirty = false;\r\n        //get global pose\r\n        this.localToGlobalPose(this._activeSkeletonState.getSkeletonPose(this._skeleton), this._globalPose, this._skeleton);\r\n        // convert pose to matrix\r\n        var mtxOffset = 0;\r\n        var globalPoses = this._globalPose.jointPoses;\r\n        var raw;\r\n        var ox, oy, oz, ow;\r\n        var xy2, xz2, xw2;\r\n        var yz2, yw2, zw2;\r\n        var n11, n12, n13;\r\n        var n21, n22, n23;\r\n        var n31, n32, n33;\r\n        var m11, m12, m13, m14;\r\n        var m21, m22, m23, m24;\r\n        var m31, m32, m33, m34;\r\n        var joints = this._skeleton.joints;\r\n        var pose;\r\n        var quat;\r\n        var vec;\r\n        var t;\r\n        for (var i = 0; i < this._numJoints; ++i) {\r\n            pose = globalPoses[i];\r\n            quat = pose.orientation;\r\n            vec = pose.translation;\r\n            ox = quat.x;\r\n            oy = quat.y;\r\n            oz = quat.z;\r\n            ow = quat.w;\r\n            xy2 = (t = 2.0 * ox) * oy;\r\n            xz2 = t * oz;\r\n            xw2 = t * ow;\r\n            yz2 = (t = 2.0 * oy) * oz;\r\n            yw2 = t * ow;\r\n            zw2 = 2.0 * oz * ow;\r\n            yz2 = 2.0 * oy * oz;\r\n            yw2 = 2.0 * oy * ow;\r\n            zw2 = 2.0 * oz * ow;\r\n            ox *= ox;\r\n            oy *= oy;\r\n            oz *= oz;\r\n            ow *= ow;\r\n            n11 = (t = ox - oy) - oz + ow;\r\n            n12 = xy2 - zw2;\r\n            n13 = xz2 + yw2;\r\n            n21 = xy2 + zw2;\r\n            n22 = -t - oz + ow;\r\n            n23 = yz2 - xw2;\r\n            n31 = xz2 - yw2;\r\n            n32 = yz2 + xw2;\r\n            n33 = -ox - oy + oz + ow;\r\n            // prepend inverse bind pose\r\n            raw = joints[i].inverseBindPose;\r\n            m11 = raw[0];\r\n            m12 = raw[4];\r\n            m13 = raw[8];\r\n            m14 = raw[12];\r\n            m21 = raw[1];\r\n            m22 = raw[5];\r\n            m23 = raw[9];\r\n            m24 = raw[13];\r\n            m31 = raw[2];\r\n            m32 = raw[6];\r\n            m33 = raw[10];\r\n            m34 = raw[14];\r\n            this._globalMatrices[mtxOffset] = n11 * m11 + n12 * m21 + n13 * m31;\r\n            this._globalMatrices[mtxOffset + 1] = n11 * m12 + n12 * m22 + n13 * m32;\r\n            this._globalMatrices[mtxOffset + 2] = n11 * m13 + n12 * m23 + n13 * m33;\r\n            this._globalMatrices[mtxOffset + 3] = n11 * m14 + n12 * m24 + n13 * m34 + vec.x;\r\n            this._globalMatrices[mtxOffset + 4] = n21 * m11 + n22 * m21 + n23 * m31;\r\n            this._globalMatrices[mtxOffset + 5] = n21 * m12 + n22 * m22 + n23 * m32;\r\n            this._globalMatrices[mtxOffset + 6] = n21 * m13 + n22 * m23 + n23 * m33;\r\n            this._globalMatrices[mtxOffset + 7] = n21 * m14 + n22 * m24 + n23 * m34 + vec.y;\r\n            this._globalMatrices[mtxOffset + 8] = n31 * m11 + n32 * m21 + n33 * m31;\r\n            this._globalMatrices[mtxOffset + 9] = n31 * m12 + n32 * m22 + n33 * m32;\r\n            this._globalMatrices[mtxOffset + 10] = n31 * m13 + n32 * m23 + n33 * m33;\r\n            this._globalMatrices[mtxOffset + 11] = n31 * m14 + n32 * m24 + n33 * m34 + vec.z;\r\n            mtxOffset = mtxOffset + 12;\r\n        }\r\n    };\r\n    SkeletonAnimator.prototype.getRenderableElements = function (renderable, sourceElements) {\r\n        this._morphedElementsDirty[sourceElements.id] = true;\r\n        //early out for GPU animations\r\n        if (!this._pAnimationSet.usesCPU)\r\n            return sourceElements;\r\n        var targetElements;\r\n        if (!(targetElements = this._morphedElements[sourceElements.id])) {\r\n            //not yet stored\r\n            sourceElements.normals;\r\n            sourceElements.tangents;\r\n            targetElements = this._morphedElements[sourceElements.id] = sourceElements.clone();\r\n            //turn off auto calculations on the morphed geometry\r\n            targetElements.autoDeriveNormals = false;\r\n            targetElements.autoDeriveTangents = false;\r\n            //add event listeners for any changes in UV values on the source geometry\r\n            sourceElements.addEventListener(ElementsEvent_1.ElementsEvent.INVALIDATE_INDICES, this._onIndicesUpdateDelegate);\r\n            sourceElements.addEventListener(ElementsEvent_1.ElementsEvent.INVALIDATE_VERTICES, this._onVerticesUpdateDelegate);\r\n        }\r\n        return targetElements;\r\n    };\r\n    /**\r\n     * If the animation can't be performed on GPU, transform vertices manually\r\n     * @param subGeom The subgeometry containing the weights and joint index data per vertex.\r\n     * @param pass The material pass for which we need to transform the vertices\r\n     */\r\n    SkeletonAnimator.prototype.morphElements = function (renderable, sourceElements) {\r\n        this._morphedElementsDirty[sourceElements.id] = false;\r\n        var numVertices = sourceElements.numVertices;\r\n        var sourcePositions = sourceElements.positions.get(numVertices);\r\n        var sourceNormals = sourceElements.normals.get(numVertices);\r\n        var sourceTangents = sourceElements.tangents.get(numVertices);\r\n        var posDim = sourceElements.positions.dimensions;\r\n        var posStride = sourceElements.positions.stride;\r\n        var normalStride = sourceElements.normals.stride;\r\n        var tangentStride = sourceElements.tangents.stride;\r\n        var jointIndices = sourceElements.jointIndices.get(numVertices);\r\n        var jointWeights = sourceElements.jointWeights.get(numVertices);\r\n        var jointStride = sourceElements.jointIndices.stride;\r\n        var targetElements = this._morphedElements[sourceElements.id];\r\n        var targetPositions = targetElements.positions.get(numVertices);\r\n        var targetNormals = targetElements.normals.get(numVertices);\r\n        var targetTangents = targetElements.tangents.get(numVertices);\r\n        targetElements.positions.attributesBuffer.invalidate();\r\n        targetElements.normals.attributesBuffer.invalidate();\r\n        targetElements.tangents.attributesBuffer.invalidate();\r\n        var index = 0;\r\n        var i0 = 0;\r\n        var i1 = 0;\r\n        var i2 = 0;\r\n        var i3 = 0;\r\n        var k;\r\n        var vx, vy, vz;\r\n        var nx, ny, nz;\r\n        var tx, ty, tz;\r\n        var weight;\r\n        var vertX, vertY, vertZ;\r\n        var normX, normY, normZ;\r\n        var tangX, tangY, tangZ;\r\n        var m11, m12, m13, m14;\r\n        var m21, m22, m23, m24;\r\n        var m31, m32, m33, m34;\r\n        while (index < numVertices) {\r\n            i0 = index * posStride;\r\n            vertX = sourcePositions[i0];\r\n            vertY = sourcePositions[i0 + 1];\r\n            vertZ = (posDim == 3) ? sourcePositions[i0 + 2] : 0;\r\n            i1 = index * normalStride;\r\n            normX = sourceNormals[i1];\r\n            normY = sourceNormals[i1 + 1];\r\n            normZ = sourceNormals[i1 + 2];\r\n            i2 = index * tangentStride;\r\n            tangX = sourceTangents[i2];\r\n            tangY = sourceTangents[i2 + 1];\r\n            tangZ = sourceTangents[i2 + 2];\r\n            vx = 0;\r\n            vy = 0;\r\n            vz = 0;\r\n            nx = 0;\r\n            ny = 0;\r\n            nz = 0;\r\n            tx = 0;\r\n            ty = 0;\r\n            tz = 0;\r\n            k = 0;\r\n            i3 = index * jointStride;\r\n            while (k < this._jointsPerVertex) {\r\n                weight = jointWeights[i3 + k];\r\n                if (weight > 0) {\r\n                    // implicit /3*12 (/3 because indices are multiplied by 3 for gpu matrix access, *12 because it's the matrix size)\r\n                    var mtxOffset = jointIndices[i3 + k] << 2;\r\n                    m11 = this._globalMatrices[mtxOffset];\r\n                    m12 = this._globalMatrices[mtxOffset + 1];\r\n                    m13 = this._globalMatrices[mtxOffset + 2];\r\n                    m14 = this._globalMatrices[mtxOffset + 3];\r\n                    m21 = this._globalMatrices[mtxOffset + 4];\r\n                    m22 = this._globalMatrices[mtxOffset + 5];\r\n                    m23 = this._globalMatrices[mtxOffset + 6];\r\n                    m24 = this._globalMatrices[mtxOffset + 7];\r\n                    m31 = this._globalMatrices[mtxOffset + 8];\r\n                    m32 = this._globalMatrices[mtxOffset + 9];\r\n                    m33 = this._globalMatrices[mtxOffset + 10];\r\n                    m34 = this._globalMatrices[mtxOffset + 11];\r\n                    vx += weight * (m11 * vertX + m12 * vertY + m13 * vertZ + m14);\r\n                    vy += weight * (m21 * vertX + m22 * vertY + m23 * vertZ + m24);\r\n                    vz += weight * (m31 * vertX + m32 * vertY + m33 * vertZ + m34);\r\n                    nx += weight * (m11 * normX + m12 * normY + m13 * normZ);\r\n                    ny += weight * (m21 * normX + m22 * normY + m23 * normZ);\r\n                    nz += weight * (m31 * normX + m32 * normY + m33 * normZ);\r\n                    tx += weight * (m11 * tangX + m12 * tangY + m13 * tangZ);\r\n                    ty += weight * (m21 * tangX + m22 * tangY + m23 * tangZ);\r\n                    tz += weight * (m31 * tangX + m32 * tangY + m33 * tangZ);\r\n                    k++;\r\n                }\r\n                else {\r\n                    //if zero weight encountered, skip to the next vertex\r\n                    k = this._jointsPerVertex;\r\n                }\r\n            }\r\n            targetPositions[i0] = vx;\r\n            targetPositions[i0 + 1] = vy;\r\n            if (posDim == 3)\r\n                targetPositions[i0 + 2] = vz;\r\n            targetNormals[i1] = nx;\r\n            targetNormals[i1 + 1] = ny;\r\n            targetNormals[i1 + 2] = nz;\r\n            targetTangents[i2] = tx;\r\n            targetTangents[i2 + 1] = ty;\r\n            targetTangents[i2 + 2] = tz;\r\n            index++;\r\n        }\r\n    };\r\n    /**\r\n     * Converts a local hierarchical skeleton pose to a global pose\r\n     * @param targetPose The SkeletonPose object that will contain the global pose.\r\n     * @param skeleton The skeleton containing the joints, and as such, the hierarchical data to transform to global poses.\r\n     */\r\n    SkeletonAnimator.prototype.localToGlobalPose = function (sourcePose, targetPose, skeleton) {\r\n        var globalPoses = targetPose.jointPoses;\r\n        var globalJointPose;\r\n        var joints = skeleton.joints;\r\n        var len = sourcePose.numJointPoses;\r\n        var jointPoses = sourcePose.jointPoses;\r\n        var parentIndex;\r\n        var joint;\r\n        var parentPose;\r\n        var pose;\r\n        var or;\r\n        var tr;\r\n        var t;\r\n        var q;\r\n        var x1, y1, z1, w1;\r\n        var x2, y2, z2, w2;\r\n        var x3, y3, z3;\r\n        // :s\r\n        if (globalPoses.length != len)\r\n            globalPoses.length = len;\r\n        for (var i = 0; i < len; ++i) {\r\n            globalJointPose = globalPoses[i];\r\n            if (globalJointPose == null)\r\n                globalJointPose = globalPoses[i] = new JointPose_1.JointPose();\r\n            joint = joints[i];\r\n            parentIndex = joint.parentIndex;\r\n            pose = jointPoses[i];\r\n            q = globalJointPose.orientation;\r\n            t = globalJointPose.translation;\r\n            if (parentIndex < 0) {\r\n                tr = pose.translation;\r\n                or = pose.orientation;\r\n                q.x = or.x;\r\n                q.y = or.y;\r\n                q.z = or.z;\r\n                q.w = or.w;\r\n                t.x = tr.x;\r\n                t.y = tr.y;\r\n                t.z = tr.z;\r\n            }\r\n            else {\r\n                // append parent pose\r\n                parentPose = globalPoses[parentIndex];\r\n                // rotate point\r\n                or = parentPose.orientation;\r\n                tr = pose.translation;\r\n                x2 = or.x;\r\n                y2 = or.y;\r\n                z2 = or.z;\r\n                w2 = or.w;\r\n                x3 = tr.x;\r\n                y3 = tr.y;\r\n                z3 = tr.z;\r\n                w1 = -x2 * x3 - y2 * y3 - z2 * z3;\r\n                x1 = w2 * x3 + y2 * z3 - z2 * y3;\r\n                y1 = w2 * y3 - x2 * z3 + z2 * x3;\r\n                z1 = w2 * z3 + x2 * y3 - y2 * x3;\r\n                // append parent translation\r\n                tr = parentPose.translation;\r\n                t.x = -w1 * x2 + x1 * w2 - y1 * z2 + z1 * y2 + tr.x;\r\n                t.y = -w1 * y2 + x1 * z2 + y1 * w2 - z1 * x2 + tr.y;\r\n                t.z = -w1 * z2 - x1 * y2 + y1 * x2 + z1 * w2 + tr.z;\r\n                // append parent orientation\r\n                x1 = or.x;\r\n                y1 = or.y;\r\n                z1 = or.z;\r\n                w1 = or.w;\r\n                or = pose.orientation;\r\n                x2 = or.x;\r\n                y2 = or.y;\r\n                z2 = or.z;\r\n                w2 = or.w;\r\n                q.w = w1 * w2 - x1 * x2 - y1 * y2 - z1 * z2;\r\n                q.x = w1 * x2 + x1 * w2 + y1 * z2 - z1 * y2;\r\n                q.y = w1 * y2 - x1 * z2 + y1 * w2 + z1 * x2;\r\n                q.z = w1 * z2 + x1 * y2 - y1 * x2 + z1 * w2;\r\n            }\r\n        }\r\n    };\r\n    SkeletonAnimator.prototype.onTransitionComplete = function (event) {\r\n        if (event.type == AnimationStateEvent_1.AnimationStateEvent.TRANSITION_COMPLETE) {\r\n            event.animationNode.removeEventListener(AnimationStateEvent_1.AnimationStateEvent.TRANSITION_COMPLETE, this._onTransitionCompleteDelegate);\r\n            //if this is the current active state transition, revert control to the active node\r\n            if (this._pActiveState == event.animationState) {\r\n                this._pActiveNode = this._pAnimationSet.getAnimation(this._pActiveAnimationName);\r\n                this._pActiveState = this.getAnimationState(this._pActiveNode);\r\n                this._activeSkeletonState = this._pActiveState;\r\n            }\r\n        }\r\n    };\r\n    SkeletonAnimator.prototype.onIndicesUpdate = function (event) {\r\n        var elements = event.target;\r\n        this._morphedElements[elements.id].setIndices(elements.indices);\r\n    };\r\n    SkeletonAnimator.prototype.onVerticesUpdate = function (event) {\r\n        //only update uvs\r\n        if (event.attributesView != elements.uvs && event.attributesView != elements.getCustomAtributes(\"secondaryUVs\"))\r\n            return;\r\n        var elements = event.target;\r\n        var morphGraphics = this._morphedElements[elements.id];\r\n        var morphUVs = morphGraphics.uvs.get(elements.numVertices);\r\n        morphGraphics.invalidateVertices(morphGraphics.uvs);\r\n        var uvStride = morphGraphics.uvs.stride;\r\n        var uvs = event.attributesView.get(elements.numVertices);\r\n        var len = elements.numVertices * uvStride;\r\n        for (var i = 0; i < len; i += uvStride) {\r\n            morphUVs[i] = uvs[i];\r\n            morphUVs[i + 1] = uvs[i + 1];\r\n        }\r\n    };\r\n    return SkeletonAnimator;\r\n}(AnimatorBase_1.AnimatorBase));\r\nexports.SkeletonAnimator = SkeletonAnimator;\r\n},{\"../animators/AnimatorBase\":\"awayjs-renderergl/lib/animators/AnimatorBase\",\"../animators/data/JointPose\":\"awayjs-renderergl/lib/animators/data/JointPose\",\"../animators/data/SkeletonPose\":\"awayjs-renderergl/lib/animators/data/SkeletonPose\",\"../events/AnimationStateEvent\":\"awayjs-renderergl/lib/events/AnimationStateEvent\",\"awayjs-display/lib/events/ElementsEvent\":undefined}],\"awayjs-renderergl/lib/animators/VertexAnimationSet\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar AnimationSetBase_1 = require(\"../animators/AnimationSetBase\");\r\nvar AnimationRegisterData_1 = require(\"../animators/data/AnimationRegisterData\");\r\nvar VertexAnimationMode_1 = require(\"../animators/data/VertexAnimationMode\");\r\n/**\r\n * The animation data set used by vertex-based animators, containing vertex animation state data.\r\n *\r\n * @see VertexAnimator\r\n */\r\nvar VertexAnimationSet = (function (_super) {\r\n    __extends(VertexAnimationSet, _super);\r\n    /**\r\n     * Returns whether or not normal data is used in last set GPU pass of the vertex shader.\r\n     */\r\n    //\t\tpublic get useNormals():boolean\r\n    //\t\t{\r\n    //\t\t\treturn this._uploadNormals;\r\n    //\t\t}\r\n    /**\r\n     * Creates a new <code>VertexAnimationSet</code> object.\r\n     *\r\n     * @param numPoses The number of poses made available at once to the GPU animation code.\r\n     * @param blendMode Optional value for setting the animation mode of the vertex animator object.\r\n     *\r\n     * @see away3d.animators.data.VertexAnimationMode\r\n     */\r\n    function VertexAnimationSet(numPoses, blendMode) {\r\n        if (numPoses === void 0) { numPoses = 2; }\r\n        if (blendMode === void 0) { blendMode = \"absolute\"; }\r\n        _super.call(this);\r\n        this._numPoses = numPoses;\r\n        this._blendMode = blendMode;\r\n    }\r\n    Object.defineProperty(VertexAnimationSet.prototype, \"numPoses\", {\r\n        /**\r\n         * Returns the number of poses made available at once to the GPU animation code.\r\n         */\r\n        get: function () {\r\n            return this._numPoses;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(VertexAnimationSet.prototype, \"blendMode\", {\r\n        /**\r\n         * Returns the active blend mode of the vertex animator object.\r\n         */\r\n        get: function () {\r\n            return this._blendMode;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    VertexAnimationSet.prototype.getAGALVertexCode = function (shader, registerCache, sharedRegisters) {\r\n        //grab animationRegisterData from the materialpassbase or create a new one if the first time\r\n        this._iAnimationRegisterData = shader.animationRegisterData;\r\n        if (this._iAnimationRegisterData == null)\r\n            this._iAnimationRegisterData = shader.animationRegisterData = new AnimationRegisterData_1.AnimationRegisterData();\r\n        if (this._blendMode == VertexAnimationMode_1.VertexAnimationMode.ABSOLUTE)\r\n            return this.getAbsoluteAGALCode(shader, registerCache, sharedRegisters);\r\n        else\r\n            return this.getAdditiveAGALCode(shader, registerCache, sharedRegisters);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    VertexAnimationSet.prototype.getAGALFragmentCode = function (shader, registerCache, shadedTarget) {\r\n        return \"\";\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    VertexAnimationSet.prototype.getAGALUVCode = function (shader, registerCache, sharedRegisters) {\r\n        return \"mov \" + sharedRegisters.uvTarget + \",\" + sharedRegisters.uvSource + \"\\n\";\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    VertexAnimationSet.prototype.doneAGALCode = function (shader) {\r\n    };\r\n    /**\r\n     * Generates the vertex AGAL code for absolute blending.\r\n     */\r\n    VertexAnimationSet.prototype.getAbsoluteAGALCode = function (shader, registerCache, sharedRegisters) {\r\n        var code = \"\";\r\n        var temp1 = registerCache.getFreeVertexVectorTemp();\r\n        registerCache.addVertexTempUsages(temp1, 1);\r\n        var temp2 = registerCache.getFreeVertexVectorTemp();\r\n        var regs = new Array(\".x\", \".y\", \".z\", \".w\");\r\n        var len = sharedRegisters.animatableAttributes.length;\r\n        var constantReg = registerCache.getFreeVertexConstant();\r\n        this._iAnimationRegisterData.weightsIndex = constantReg.index;\r\n        this._iAnimationRegisterData.poseIndices = new Array(this._numPoses);\r\n        var poseInput;\r\n        var k = 0;\r\n        if (len > 2)\r\n            len = 2;\r\n        for (var i = 0; i < len; ++i) {\r\n            code += \"mul \" + temp1 + \", \" + sharedRegisters.animatableAttributes[i] + \", \" + constantReg + regs[0] + \"\\n\";\r\n            for (var j = 1; j < this._numPoses; ++j) {\r\n                poseInput = registerCache.getFreeVertexAttribute();\r\n                this._iAnimationRegisterData.poseIndices[k++] = poseInput.index;\r\n                code += \"mul \" + temp2 + \", \" + poseInput + \", \" + constantReg + regs[j] + \"\\n\";\r\n                if (j < this._numPoses - 1)\r\n                    code += \"add \" + temp1 + \", \" + temp1 + \", \" + temp2 + \"\\n\";\r\n            }\r\n            code += \"add \" + sharedRegisters.animationTargetRegisters[i] + \", \" + temp1 + \", \" + temp2 + \"\\n\";\r\n        }\r\n        // add code for bitangents if tangents are used\r\n        if (shader.tangentDependencies > 0 || shader.outputsNormals) {\r\n            code += \"dp3 \" + temp1 + \".x, \" + sharedRegisters.animatableAttributes[2] + \", \" + sharedRegisters.animationTargetRegisters[1] + \"\\n\" +\r\n                \"mul \" + temp1 + \", \" + sharedRegisters.animationTargetRegisters[1] + \", \" + temp1 + \".x\\n\" +\r\n                \"sub \" + sharedRegisters.animationTargetRegisters[2] + \", \" + sharedRegisters.animationTargetRegisters[2] + \", \" + temp1 + \"\\n\";\r\n        }\r\n        //\r\n        // // simply write attributes to targets, do not animate them\r\n        // // projection will pick up on targets[0] to do the projection\r\n        // var len:number = sharedRegisters.animatableAttributes.length;\r\n        // for (var i:number = 0; i < len; ++i)\r\n        // \tcode += \"mov \" + sharedRegisters.animationTargetRegisters[i] + \", \" + sharedRegisters.animatableAttributes[i] + \"\\n\";\r\n        return code;\r\n    };\r\n    /**\r\n     * Generates the vertex AGAL code for additive blending.\r\n     */\r\n    VertexAnimationSet.prototype.getAdditiveAGALCode = function (shader, registerCache, sharedRegisters) {\r\n        var code = \"\";\r\n        var len = sharedRegisters.animatableAttributes.length;\r\n        var regs = [\".x\", \".y\", \".z\", \".w\"];\r\n        var temp1 = registerCache.getFreeVertexVectorTemp();\r\n        var constantReg = registerCache.getFreeVertexConstant();\r\n        this._iAnimationRegisterData.weightsIndex = constantReg.index;\r\n        this._iAnimationRegisterData.poseIndices = new Array(this._numPoses);\r\n        var poseInput;\r\n        var k = 0;\r\n        if (len > 2)\r\n            len = 2;\r\n        code += \"mov  \" + sharedRegisters.animationTargetRegisters[0] + \", \" + sharedRegisters.animatableAttributes[0] + \"\\n\";\r\n        if (shader.normalDependencies > 0)\r\n            code += \"mov \" + sharedRegisters.animationTargetRegisters[1] + \", \" + sharedRegisters.animatableAttributes[1] + \"\\n\";\r\n        for (var i = 0; i < len; ++i) {\r\n            for (var j = 0; j < this._numPoses; ++j) {\r\n                poseInput = registerCache.getFreeVertexAttribute();\r\n                this._iAnimationRegisterData.poseIndices[k++] = poseInput.index;\r\n                code += \"mul \" + temp1 + \", \" + poseInput + \", \" + constantReg + regs[j] + \"\\n\" +\r\n                    \"add \" + sharedRegisters.animationTargetRegisters[i] + \", \" + sharedRegisters.animationTargetRegisters[i] + \", \" + temp1 + \"\\n\";\r\n            }\r\n        }\r\n        if (shader.tangentDependencies > 0 || shader.outputsNormals) {\r\n            code += \"dp3 \" + temp1 + \".x, \" + sharedRegisters.animatableAttributes[2] + \", \" + sharedRegisters.animationTargetRegisters[1] + \"\\n\" +\r\n                \"mul \" + temp1 + \", \" + sharedRegisters.animationTargetRegisters[1] + \", \" + temp1 + \".x\\n\" +\r\n                \"sub \" + sharedRegisters.animationTargetRegisters[2] + \", \" + sharedRegisters.animatableAttributes[2] + \", \" + temp1 + \"\\n\";\r\n        }\r\n        return code;\r\n    };\r\n    return VertexAnimationSet;\r\n}(AnimationSetBase_1.AnimationSetBase));\r\nexports.VertexAnimationSet = VertexAnimationSet;\r\n},{\"../animators/AnimationSetBase\":\"awayjs-renderergl/lib/animators/AnimationSetBase\",\"../animators/data/AnimationRegisterData\":\"awayjs-renderergl/lib/animators/data/AnimationRegisterData\",\"../animators/data/VertexAnimationMode\":\"awayjs-renderergl/lib/animators/data/VertexAnimationMode\"}],\"awayjs-renderergl/lib/animators/VertexAnimator\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar TriangleElements_1 = require(\"awayjs-display/lib/graphics/TriangleElements\");\r\nvar AnimatorBase_1 = require(\"../animators/AnimatorBase\");\r\nvar VertexAnimationMode_1 = require(\"../animators/data/VertexAnimationMode\");\r\n/**\r\n * Provides an interface for assigning vertex-based animation data sets to sprite-based entity objects\r\n * and controlling the various available states of animation through an interative playhead that can be\r\n * automatically updated or manually triggered.\r\n */\r\nvar VertexAnimator = (function (_super) {\r\n    __extends(VertexAnimator, _super);\r\n    /**\r\n     * Creates a new <code>VertexAnimator</code> object.\r\n     *\r\n     * @param vertexAnimationSet The animation data set containing the vertex animations used by the animator.\r\n     */\r\n    function VertexAnimator(vertexAnimationSet) {\r\n        _super.call(this, vertexAnimationSet);\r\n        this._poses = new Array();\r\n        this._weights = new Float32Array([1, 0, 0, 0]);\r\n        this._vertexAnimationSet = vertexAnimationSet;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    VertexAnimator.prototype.clone = function () {\r\n        return new VertexAnimator(this._vertexAnimationSet);\r\n    };\r\n    /**\r\n     * Plays a sequence with a given name. If the sequence is not found, it may not be loaded yet, and it will retry every frame.\r\n     * @param sequenceName The name of the clip to be played.\r\n     */\r\n    VertexAnimator.prototype.play = function (name, transition, offset) {\r\n        if (transition === void 0) { transition = null; }\r\n        if (offset === void 0) { offset = NaN; }\r\n        if (this._pActiveAnimationName == name)\r\n            return;\r\n        this._pActiveAnimationName = name;\r\n        //TODO: implement transitions in vertex animator\r\n        if (!this._pAnimationSet.hasAnimation(name))\r\n            throw new Error(\"Animation root node \" + name + \" not found!\");\r\n        this._pActiveNode = this._pAnimationSet.getAnimation(name);\r\n        this._pActiveState = this.getAnimationState(this._pActiveNode);\r\n        if (this.updatePosition) {\r\n            //update straight away to reset position deltas\r\n            this._pActiveState.update(this._pAbsoluteTime);\r\n            this._pActiveState.positionDelta;\r\n        }\r\n        this._activeVertexState = this._pActiveState;\r\n        this.start();\r\n        //apply a time offset if specified\r\n        if (!isNaN(offset))\r\n            this.reset(name, offset);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    VertexAnimator.prototype._pUpdateDeltaTime = function (dt) {\r\n        _super.prototype._pUpdateDeltaTime.call(this, dt);\r\n        var geometryFlag = false;\r\n        if (this._poses[0] != this._activeVertexState.currentGraphics) {\r\n            this._poses[0] = this._activeVertexState.currentGraphics;\r\n            geometryFlag = true;\r\n        }\r\n        if (this._poses[1] != this._activeVertexState.nextGraphics)\r\n            this._poses[1] = this._activeVertexState.nextGraphics;\r\n        this._weights[0] = 1 - (this._weights[1] = this._activeVertexState.blendWeight);\r\n        if (geometryFlag)\r\n            this.invalidateElements();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    VertexAnimator.prototype.setRenderState = function (shader, renderable, stage, camera) {\r\n        // todo: add code for when running on cpu\r\n        // this type of animation can only be SubSprite\r\n        var graphic = renderable.graphic;\r\n        var elements = graphic.elements;\r\n        // if no poses defined, set temp data\r\n        if (!this._poses.length) {\r\n            this.setNullPose(shader, elements, stage);\r\n            return;\r\n        }\r\n        var animationRegisterData = shader.animationRegisterData;\r\n        var i;\r\n        var len = this._vertexAnimationSet.numPoses;\r\n        shader.setVertexConstFromArray(animationRegisterData.weightsIndex, this._weights);\r\n        if (this._vertexAnimationSet.blendMode == VertexAnimationMode_1.VertexAnimationMode.ABSOLUTE)\r\n            i = 1;\r\n        else\r\n            i = 0;\r\n        var elementsGL;\r\n        var k = 0;\r\n        for (; i < len; ++i) {\r\n            elements = this._poses[i].getGraphicAt(graphic._iIndex).elements || graphic.elements;\r\n            elementsGL = stage.getAbstraction(elements);\r\n            elementsGL._indexMappings = stage.getAbstraction(graphic.elements).getIndexMappings();\r\n            if (elements.isAsset(TriangleElements_1.TriangleElements)) {\r\n                elementsGL.activateVertexBufferVO(animationRegisterData.poseIndices[k++], elements.positions);\r\n                if (shader.normalDependencies > 0)\r\n                    elementsGL.activateVertexBufferVO(animationRegisterData.poseIndices[k++], elements.normals);\r\n            }\r\n        }\r\n    };\r\n    VertexAnimator.prototype.setNullPose = function (shader, elements, stage) {\r\n        var animationRegisterData = shader.animationRegisterData;\r\n        shader.setVertexConstFromArray(animationRegisterData.weightsIndex, this._weights);\r\n        var elementsGL = stage.getAbstraction(elements);\r\n        var k = 0;\r\n        if (this._vertexAnimationSet.blendMode == VertexAnimationMode_1.VertexAnimationMode.ABSOLUTE) {\r\n            var len = this._vertexAnimationSet.numPoses;\r\n            for (var i = 1; i < len; ++i) {\r\n                if (elements.isAsset(TriangleElements_1.TriangleElements)) {\r\n                    elementsGL.activateVertexBufferVO(animationRegisterData.poseIndices[k++], elements.positions);\r\n                    if (shader.normalDependencies > 0)\r\n                        elementsGL.activateVertexBufferVO(animationRegisterData.poseIndices[k++], elements.normals);\r\n                }\r\n            }\r\n        }\r\n        // todo: set temp data for additive?\r\n    };\r\n    /**\r\n     * Verifies if the animation will be used on cpu. Needs to be true for all passes for a material to be able to use it on gpu.\r\n     * Needs to be called if gpu code is potentially required.\r\n     */\r\n    VertexAnimator.prototype.testGPUCompatibility = function (shader) {\r\n    };\r\n    VertexAnimator.prototype.getRenderableElements = function (renderable, sourceElements) {\r\n        if (this._vertexAnimationSet.blendMode == VertexAnimationMode_1.VertexAnimationMode.ABSOLUTE && this._poses.length)\r\n            return this._poses[0].getGraphicAt(renderable.graphic._iIndex).elements || sourceElements;\r\n        //nothing to do here\r\n        return sourceElements;\r\n    };\r\n    return VertexAnimator;\r\n}(AnimatorBase_1.AnimatorBase));\r\nexports.VertexAnimator = VertexAnimator;\r\n},{\"../animators/AnimatorBase\":\"awayjs-renderergl/lib/animators/AnimatorBase\",\"../animators/data/VertexAnimationMode\":\"awayjs-renderergl/lib/animators/data/VertexAnimationMode\",\"awayjs-display/lib/graphics/TriangleElements\":undefined}],\"awayjs-renderergl/lib/animators/data/AnimationElements\":[function(require,module,exports){\n\"use strict\";\r\n/**\r\n * ...\r\n */\r\nvar AnimationElements = (function () {\r\n    function AnimationElements() {\r\n        this._pVertexBuffer = new Array(8);\r\n        this._pBufferContext = new Array(8);\r\n        this._pBufferDirty = new Array(8);\r\n        this.numProcessedVertices = 0;\r\n        this.previousTime = Number.NEGATIVE_INFINITY;\r\n        this.animationParticles = new Array();\r\n        for (var i = 0; i < 8; i++)\r\n            this._pBufferDirty[i] = true;\r\n        this._iUniqueId = AnimationElements.SUBGEOM_ID_COUNT++;\r\n    }\r\n    AnimationElements.prototype.createVertexData = function (numVertices, totalLenOfOneVertex) {\r\n        this._numVertices = numVertices;\r\n        this._totalLenOfOneVertex = totalLenOfOneVertex;\r\n        this._pVertexData = new Array(numVertices * totalLenOfOneVertex);\r\n    };\r\n    AnimationElements.prototype.activateVertexBuffer = function (index, bufferOffset, stage, format) {\r\n        var contextIndex = stage.stageIndex;\r\n        var context = stage.context;\r\n        var buffer = this._pVertexBuffer[contextIndex];\r\n        if (!buffer || this._pBufferContext[contextIndex] != context) {\r\n            buffer = this._pVertexBuffer[contextIndex] = context.createVertexBuffer(this._numVertices, this._totalLenOfOneVertex * 4);\r\n            this._pBufferContext[contextIndex] = context;\r\n            this._pBufferDirty[contextIndex] = true;\r\n        }\r\n        if (this._pBufferDirty[contextIndex]) {\r\n            buffer.uploadFromArray(this._pVertexData, 0, this._numVertices);\r\n            this._pBufferDirty[contextIndex] = false;\r\n        }\r\n        context.setVertexBufferAt(index, buffer, bufferOffset * 4, format);\r\n    };\r\n    AnimationElements.prototype.dispose = function () {\r\n        while (this._pVertexBuffer.length) {\r\n            var vertexBuffer = this._pVertexBuffer.pop();\r\n            if (vertexBuffer)\r\n                vertexBuffer.dispose();\r\n        }\r\n    };\r\n    AnimationElements.prototype.invalidateBuffer = function () {\r\n        for (var i = 0; i < 8; i++)\r\n            this._pBufferDirty[i] = true;\r\n    };\r\n    Object.defineProperty(AnimationElements.prototype, \"vertexData\", {\r\n        get: function () {\r\n            return this._pVertexData;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AnimationElements.prototype, \"numVertices\", {\r\n        get: function () {\r\n            return this._numVertices;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AnimationElements.prototype, \"totalLenOfOneVertex\", {\r\n        get: function () {\r\n            return this._totalLenOfOneVertex;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    AnimationElements.SUBGEOM_ID_COUNT = 0;\r\n    return AnimationElements;\r\n}());\r\nexports.AnimationElements = AnimationElements;\r\n},{}],\"awayjs-renderergl/lib/animators/data/AnimationRegisterData\":[function(require,module,exports){\n\"use strict\";\r\nvar ShaderRegisterElement_1 = require(\"../../shaders/ShaderRegisterElement\");\r\n/**\r\n * ...\r\n */\r\nvar AnimationRegisterData = (function () {\r\n    function AnimationRegisterData() {\r\n        this.indexDictionary = new Object();\r\n    }\r\n    AnimationRegisterData.prototype.reset = function (registerCache, sharedRegisters, needVelocity) {\r\n        this.rotationRegisters = new Array();\r\n        this.positionAttribute = sharedRegisters.animatableAttributes[0];\r\n        this.scaleAndRotateTarget = sharedRegisters.animationTargetRegisters[0];\r\n        for (var i = 1; i < sharedRegisters.animationTargetRegisters.length; i++)\r\n            this.rotationRegisters.push(sharedRegisters.animationTargetRegisters[i]);\r\n        //allot const register\r\n        this.vertexZeroConst = registerCache.getFreeVertexConstant();\r\n        this.vertexZeroConst = new ShaderRegisterElement_1.ShaderRegisterElement(this.vertexZeroConst.regName, this.vertexZeroConst.index, 0);\r\n        this.vertexOneConst = new ShaderRegisterElement_1.ShaderRegisterElement(this.vertexZeroConst.regName, this.vertexZeroConst.index, 1);\r\n        this.vertexTwoConst = new ShaderRegisterElement_1.ShaderRegisterElement(this.vertexZeroConst.regName, this.vertexZeroConst.index, 2);\r\n        //allot temp register\r\n        this.positionTarget = registerCache.getFreeVertexVectorTemp();\r\n        registerCache.addVertexTempUsages(this.positionTarget, 1);\r\n        this.positionTarget = new ShaderRegisterElement_1.ShaderRegisterElement(this.positionTarget.regName, this.positionTarget.index);\r\n        if (needVelocity) {\r\n            this.velocityTarget = registerCache.getFreeVertexVectorTemp();\r\n            registerCache.addVertexTempUsages(this.velocityTarget, 1);\r\n            this.velocityTarget = new ShaderRegisterElement_1.ShaderRegisterElement(this.velocityTarget.regName, this.velocityTarget.index);\r\n            this.vertexTime = new ShaderRegisterElement_1.ShaderRegisterElement(this.velocityTarget.regName, this.velocityTarget.index, 3);\r\n            this.vertexLife = new ShaderRegisterElement_1.ShaderRegisterElement(this.positionTarget.regName, this.positionTarget.index, 3);\r\n        }\r\n        else {\r\n            var tempTime = registerCache.getFreeVertexVectorTemp();\r\n            registerCache.addVertexTempUsages(tempTime, 1);\r\n            this.vertexTime = new ShaderRegisterElement_1.ShaderRegisterElement(tempTime.regName, tempTime.index, 0);\r\n            this.vertexLife = new ShaderRegisterElement_1.ShaderRegisterElement(tempTime.regName, tempTime.index, 1);\r\n        }\r\n    };\r\n    AnimationRegisterData.prototype.setUVSourceAndTarget = function (sharedRegisters) {\r\n        this.uvVar = sharedRegisters.uvTarget;\r\n        this.uvAttribute = sharedRegisters.uvSource;\r\n        //uv action is processed after normal actions,so use offsetTarget as uvTarget\r\n        this.uvTarget = new ShaderRegisterElement_1.ShaderRegisterElement(this.positionTarget.regName, this.positionTarget.index);\r\n    };\r\n    AnimationRegisterData.prototype.setRegisterIndex = function (node, parameterIndex, registerIndex) {\r\n        //8 should be enough for any node.\r\n        var t = this.indexDictionary[node.id];\r\n        if (t == null)\r\n            t = this.indexDictionary[node.id] = new Array(8);\r\n        t[parameterIndex] = registerIndex;\r\n    };\r\n    AnimationRegisterData.prototype.getRegisterIndex = function (node, parameterIndex) {\r\n        return this.indexDictionary[node.id][parameterIndex];\r\n    };\r\n    return AnimationRegisterData;\r\n}());\r\nexports.AnimationRegisterData = AnimationRegisterData;\r\n},{\"../../shaders/ShaderRegisterElement\":\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\"}],\"awayjs-renderergl/lib/animators/data/ColorSegmentPoint\":[function(require,module,exports){\n\"use strict\";\r\nvar ColorSegmentPoint = (function () {\r\n    function ColorSegmentPoint(life, color) {\r\n        //0<life<1\r\n        if (life <= 0 || life >= 1)\r\n            throw (new Error(\"life exceeds range (0,1)\"));\r\n        this._life = life;\r\n        this._color = color;\r\n    }\r\n    Object.defineProperty(ColorSegmentPoint.prototype, \"color\", {\r\n        get: function () {\r\n            return this._color;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ColorSegmentPoint.prototype, \"life\", {\r\n        get: function () {\r\n            return this._life;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return ColorSegmentPoint;\r\n}());\r\nexports.ColorSegmentPoint = ColorSegmentPoint;\r\n},{}],\"awayjs-renderergl/lib/animators/data/JointPose\":[function(require,module,exports){\n\"use strict\";\r\nvar Matrix3D_1 = require(\"awayjs-core/lib/geom/Matrix3D\");\r\nvar Quaternion_1 = require(\"awayjs-core/lib/geom/Quaternion\");\r\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\r\n/**\r\n * Contains transformation data for a skeleton joint, used for skeleton animation.\r\n *\r\n * @see away.animation.Skeleton\r\n * @see away.animation.SkeletonJoint\r\n *\r\n * todo: support (uniform) scale\r\n */\r\nvar JointPose = (function () {\r\n    function JointPose() {\r\n        /**\r\n         * The rotation of the pose stored as a quaternion\r\n         */\r\n        this.orientation = new Quaternion_1.Quaternion();\r\n        /**\r\n         * The translation of the pose\r\n         */\r\n        this.translation = new Vector3D_1.Vector3D();\r\n    }\r\n    /**\r\n     * Converts the transformation to a Matrix3D representation.\r\n     *\r\n     * @param target An optional target matrix to store the transformation. If not provided, it will create a new instance.\r\n     * @return The transformation matrix of the pose.\r\n     */\r\n    JointPose.prototype.toMatrix3D = function (target) {\r\n        if (target === void 0) { target = null; }\r\n        if (target == null)\r\n            target = new Matrix3D_1.Matrix3D();\r\n        this.orientation.toMatrix3D(target);\r\n        target.appendTranslation(this.translation.x, this.translation.y, this.translation.z);\r\n        return target;\r\n    };\r\n    /**\r\n     * Copies the transformation data from a source pose object into the existing pose object.\r\n     *\r\n     * @param pose The source pose to copy from.\r\n     */\r\n    JointPose.prototype.copyFrom = function (pose) {\r\n        var or = pose.orientation;\r\n        var tr = pose.translation;\r\n        this.orientation.x = or.x;\r\n        this.orientation.y = or.y;\r\n        this.orientation.z = or.z;\r\n        this.orientation.w = or.w;\r\n        this.translation.x = tr.x;\r\n        this.translation.y = tr.y;\r\n        this.translation.z = tr.z;\r\n    };\r\n    return JointPose;\r\n}());\r\nexports.JointPose = JointPose;\r\n},{\"awayjs-core/lib/geom/Matrix3D\":undefined,\"awayjs-core/lib/geom/Quaternion\":undefined,\"awayjs-core/lib/geom/Vector3D\":undefined}],\"awayjs-renderergl/lib/animators/data/ParticleAnimationData\":[function(require,module,exports){\n\"use strict\";\r\n/**\r\n * ...\r\n */\r\nvar ParticleAnimationData = (function () {\r\n    function ParticleAnimationData(index, startTime, duration, delay, particle) {\r\n        this.index = index;\r\n        this.startTime = startTime;\r\n        this.totalTime = duration + delay;\r\n        this.duration = duration;\r\n        this.delay = delay;\r\n        this.startVertexIndex = particle.startVertexIndex;\r\n        this.numVertices = particle.numVertices;\r\n    }\r\n    return ParticleAnimationData;\r\n}());\r\nexports.ParticleAnimationData = ParticleAnimationData;\r\n},{}],\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\":[function(require,module,exports){\n\"use strict\";\r\n/**\r\n * Options for setting the properties mode of a particle animation node.\r\n */\r\nvar ParticlePropertiesMode = (function () {\r\n    function ParticlePropertiesMode() {\r\n    }\r\n    /**\r\n     * Mode that defines the particle node as acting on global properties (ie. the properties set in the node constructor or the corresponding animation state).\r\n     */\r\n    ParticlePropertiesMode.GLOBAL = 0;\r\n    /**\r\n     * Mode that defines the particle node as acting on local static properties (ie. the properties of particles set in the initialising on the animation set).\r\n     */\r\n    ParticlePropertiesMode.LOCAL_STATIC = 1;\r\n    /**\r\n     * Mode that defines the particle node as acting on local dynamic properties (ie. the properties of the particles set in the corresponding animation state).\r\n     */\r\n    ParticlePropertiesMode.LOCAL_DYNAMIC = 2;\r\n    return ParticlePropertiesMode;\r\n}());\r\nexports.ParticlePropertiesMode = ParticlePropertiesMode;\r\n},{}],\"awayjs-renderergl/lib/animators/data/ParticleProperties\":[function(require,module,exports){\n\"use strict\";\r\n/**\r\n * Dynamic class for holding the local properties of a particle, used for processing the static properties\r\n * of particles in the particle animation set before beginning upload to the GPU.\r\n */\r\nvar ParticleProperties = (function () {\r\n    function ParticleProperties() {\r\n    }\r\n    return ParticleProperties;\r\n}());\r\nexports.ParticleProperties = ParticleProperties;\r\n},{}],\"awayjs-renderergl/lib/animators/data/SkeletonJoint\":[function(require,module,exports){\n\"use strict\";\r\n/**\r\n * A value obect representing a single joint in a skeleton object.\r\n *\r\n * @see away.animators.Skeleton\r\n */\r\nvar SkeletonJoint = (function () {\r\n    /**\r\n     * Creates a new <code>SkeletonJoint</code> object\r\n     */\r\n    function SkeletonJoint() {\r\n        /**\r\n         * The index of the parent joint in the skeleton's joints vector.\r\n         *\r\n         * @see away.animators.Skeleton#joints\r\n         */\r\n        this.parentIndex = -1;\r\n    }\r\n    return SkeletonJoint;\r\n}());\r\nexports.SkeletonJoint = SkeletonJoint;\r\n},{}],\"awayjs-renderergl/lib/animators/data/SkeletonPose\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar AssetBase_1 = require(\"awayjs-core/lib/library/AssetBase\");\r\nvar JointPose_1 = require(\"../../animators/data/JointPose\");\r\n/**\r\n * A collection of pose objects, determining the pose for an entire skeleton.\r\n * The <code>jointPoses</code> vector object corresponds to a skeleton's <code>joints</code> vector object, however, there is no\r\n * reference to a skeleton's instance, since several skeletons can be influenced by the same pose (eg: animation\r\n * clips are added to any animator with a valid skeleton)\r\n *\r\n * @see away.animators.Skeleton\r\n * @see away.animators.JointPose\r\n */\r\nvar SkeletonPose = (function (_super) {\r\n    __extends(SkeletonPose, _super);\r\n    /**\r\n     * Creates a new <code>SkeletonPose</code> object.\r\n     */\r\n    function SkeletonPose() {\r\n        _super.call(this);\r\n        this.jointPoses = new Array();\r\n    }\r\n    Object.defineProperty(SkeletonPose.prototype, \"numJointPoses\", {\r\n        /**\r\n         * The total number of joint poses in the skeleton pose.\r\n         */\r\n        get: function () {\r\n            return this.jointPoses.length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SkeletonPose.prototype, \"assetType\", {\r\n        /**\r\n         * @inheritDoc\r\n         */\r\n        get: function () {\r\n            return SkeletonPose.assetType;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns the joint pose object with the given joint name, otherwise returns a null object.\r\n     *\r\n     * @param jointName The name of the joint object whose pose is to be found.\r\n     * @return The pose object with the given joint name.\r\n     */\r\n    SkeletonPose.prototype.jointPoseFromName = function (jointName) {\r\n        var jointPoseIndex = this.jointPoseIndexFromName(jointName);\r\n        if (jointPoseIndex != -1)\r\n            return this.jointPoses[jointPoseIndex];\r\n        else\r\n            return null;\r\n    };\r\n    /**\r\n     * Returns the pose index, given the joint name. -1 is returned if the joint name is not found in the pose.\r\n     *\r\n     * @param The name of the joint object whose pose is to be found.\r\n     * @return The index of the pose object in the jointPoses Array\r\n     *\r\n     * @see #jointPoses\r\n     */\r\n    SkeletonPose.prototype.jointPoseIndexFromName = function (jointName) {\r\n        // this is implemented as a linear search, rather than a possibly\r\n        // more optimal method (Dictionary lookup, for example) because:\r\n        // a) it is assumed that it will be called once for each joint\r\n        // b) it is assumed that it will be called only during load, and not during main loop\r\n        // c) maintaining a dictionary (for safety) would dictate an interface to access JointPoses,\r\n        //    rather than direct array access.  this would be sub-optimal.\r\n        var jointPoseIndex;\r\n        var jointPose;\r\n        for (var i; i < this.jointPoses.length; i++) {\r\n            jointPose = this.jointPoses[i];\r\n            if (jointPose.name == jointName)\r\n                return jointPoseIndex;\r\n            jointPoseIndex++;\r\n        }\r\n        return -1;\r\n    };\r\n    /**\r\n     * Creates a copy of the <code>SkeletonPose</code> object, with a dulpicate of its component joint poses.\r\n     *\r\n     * @return SkeletonPose\r\n     */\r\n    SkeletonPose.prototype.clone = function () {\r\n        var clone = new SkeletonPose();\r\n        var numJointPoses = this.jointPoses.length;\r\n        for (var i = 0; i < numJointPoses; i++) {\r\n            var cloneJointPose = new JointPose_1.JointPose();\r\n            var thisJointPose = this.jointPoses[i];\r\n            cloneJointPose.name = thisJointPose.name;\r\n            cloneJointPose.copyFrom(thisJointPose);\r\n            clone.jointPoses[i] = cloneJointPose;\r\n        }\r\n        return clone;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    SkeletonPose.prototype.dispose = function () {\r\n        this.jointPoses.length = 0;\r\n    };\r\n    SkeletonPose.assetType = \"[asset SkeletonPose]\";\r\n    return SkeletonPose;\r\n}(AssetBase_1.AssetBase));\r\nexports.SkeletonPose = SkeletonPose;\r\n},{\"../../animators/data/JointPose\":\"awayjs-renderergl/lib/animators/data/JointPose\",\"awayjs-core/lib/library/AssetBase\":undefined}],\"awayjs-renderergl/lib/animators/data/Skeleton\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar AssetBase_1 = require(\"awayjs-core/lib/library/AssetBase\");\r\n/**\r\n * A Skeleton object is a hierarchical grouping of joint objects that can be used for skeletal animation.\r\n *\r\n * @see away.animators.SkeletonJoint\r\n */\r\nvar Skeleton = (function (_super) {\r\n    __extends(Skeleton, _super);\r\n    /**\r\n     * Creates a new <code>Skeleton</code> object\r\n     */\r\n    function Skeleton() {\r\n        _super.call(this);\r\n        // in the long run, it might be a better idea to not store Joint objects, but keep all data in Vectors, that we can upload easily?\r\n        this.joints = new Array();\r\n    }\r\n    Object.defineProperty(Skeleton.prototype, \"numJoints\", {\r\n        /**\r\n         * The total number of joints in the skeleton.\r\n         */\r\n        get: function () {\r\n            return this.joints.length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns the joint object in the skeleton with the given name, otherwise returns a null object.\r\n     *\r\n     * @param jointName The name of the joint object to be found.\r\n     * @return The joint object with the given name.\r\n     *\r\n     * @see #joints\r\n     */\r\n    Skeleton.prototype.jointFromName = function (jointName) {\r\n        var jointIndex = this.jointIndexFromName(jointName);\r\n        if (jointIndex != -1)\r\n            return this.joints[jointIndex];\r\n        else\r\n            return null;\r\n    };\r\n    /**\r\n     * Returns the joint index, given the joint name. -1 is returned if the joint name is not found.\r\n     *\r\n     * @param jointName The name of the joint object to be found.\r\n     * @return The index of the joint object in the joints Array\r\n     *\r\n     * @see #joints\r\n     */\r\n    Skeleton.prototype.jointIndexFromName = function (jointName) {\r\n        // this is implemented as a linear search, rather than a possibly\r\n        // more optimal method (Dictionary lookup, for example) because:\r\n        // a) it is assumed that it will be called once for each joint\r\n        // b) it is assumed that it will be called only during load, and not during main loop\r\n        // c) maintaining a dictionary (for safety) would dictate an interface to access SkeletonJoints,\r\n        //    rather than direct array access.  this would be sub-optimal.\r\n        var jointIndex;\r\n        var joint;\r\n        for (var i; i < this.joints.length; i++) {\r\n            joint = this.joints[i];\r\n            if (joint.name == jointName)\r\n                return jointIndex;\r\n            jointIndex++;\r\n        }\r\n        return -1;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    Skeleton.prototype.dispose = function () {\r\n        this.joints.length = 0;\r\n    };\r\n    Object.defineProperty(Skeleton.prototype, \"assetType\", {\r\n        /**\r\n         * @inheritDoc\r\n         */\r\n        get: function () {\r\n            return Skeleton.assetType;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Skeleton.assetType = \"[asset Skeleton]\";\r\n    return Skeleton;\r\n}(AssetBase_1.AssetBase));\r\nexports.Skeleton = Skeleton;\r\n},{\"awayjs-core/lib/library/AssetBase\":undefined}],\"awayjs-renderergl/lib/animators/data/VertexAnimationMode\":[function(require,module,exports){\n\"use strict\";\r\n/**\r\n * Options for setting the animation mode of a vertex animator object.\r\n *\r\n * @see away.animators.VertexAnimator\r\n */\r\nvar VertexAnimationMode = (function () {\r\n    function VertexAnimationMode() {\r\n    }\r\n    /**\r\n     * Animation mode that adds all outputs from active vertex animation state to form the current vertex animation pose.\r\n     */\r\n    VertexAnimationMode.ADDITIVE = \"additive\";\r\n    /**\r\n     * Animation mode that picks the output from a single vertex animation state to form the current vertex animation pose.\r\n     */\r\n    VertexAnimationMode.ABSOLUTE = \"absolute\";\r\n    return VertexAnimationMode;\r\n}());\r\nexports.VertexAnimationMode = VertexAnimationMode;\r\n},{}],\"awayjs-renderergl/lib/animators/nodes/AnimationClipNodeBase\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\r\nvar AnimationNodeBase_1 = require(\"awayjs-display/lib/animators/nodes/AnimationNodeBase\");\r\n/**\r\n * Provides an abstract base class for nodes with time-based animation data in an animation blend tree.\r\n */\r\nvar AnimationClipNodeBase = (function (_super) {\r\n    __extends(AnimationClipNodeBase, _super);\r\n    /**\r\n     * Creates a new <code>AnimationClipNodeBase</code> object.\r\n     */\r\n    function AnimationClipNodeBase() {\r\n        _super.call(this);\r\n        this._pLooping = true;\r\n        this._pTotalDuration = 0;\r\n        this._pStitchDirty = true;\r\n        this._pStitchFinalFrame = false;\r\n        this._pNumFrames = 0;\r\n        this._pDurations = new Array();\r\n        /*uint*/\r\n        this._pTotalDelta = new Vector3D_1.Vector3D();\r\n        this.fixedFrameRate = true;\r\n    }\r\n    Object.defineProperty(AnimationClipNodeBase.prototype, \"looping\", {\r\n        /**\r\n         * Determines whether the contents of the animation node have looping characteristics enabled.\r\n         */\r\n        get: function () {\r\n            return this._pLooping;\r\n        },\r\n        set: function (value) {\r\n            if (this._pLooping == value)\r\n                return;\r\n            this._pLooping = value;\r\n            this._pStitchDirty = true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AnimationClipNodeBase.prototype, \"stitchFinalFrame\", {\r\n        /**\r\n         * Defines if looping content blends the final frame of animation data with the first (true) or works on the\r\n         * assumption that both first and last frames are identical (false). Defaults to false.\r\n         */\r\n        get: function () {\r\n            return this._pStitchFinalFrame;\r\n        },\r\n        set: function (value) {\r\n            if (this._pStitchFinalFrame == value)\r\n                return;\r\n            this._pStitchFinalFrame = value;\r\n            this._pStitchDirty = true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AnimationClipNodeBase.prototype, \"totalDuration\", {\r\n        get: function () {\r\n            if (this._pStitchDirty)\r\n                this._pUpdateStitch();\r\n            return this._pTotalDuration;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AnimationClipNodeBase.prototype, \"totalDelta\", {\r\n        get: function () {\r\n            if (this._pStitchDirty)\r\n                this._pUpdateStitch();\r\n            return this._pTotalDelta;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AnimationClipNodeBase.prototype, \"lastFrame\", {\r\n        get: function () {\r\n            if (this._pStitchDirty)\r\n                this._pUpdateStitch();\r\n            return this._pLastFrame;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AnimationClipNodeBase.prototype, \"durations\", {\r\n        /**\r\n         * Returns a vector of time values representing the duration (in milliseconds) of each animation frame in the clip.\r\n         */\r\n        get: function () {\r\n            return this._pDurations;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates the node's final frame stitch state.\r\n     *\r\n     * @see #stitchFinalFrame\r\n     */\r\n    AnimationClipNodeBase.prototype._pUpdateStitch = function () {\r\n        this._pStitchDirty = false;\r\n        this._pLastFrame = (this._pStitchFinalFrame) ? this._pNumFrames : this._pNumFrames - 1;\r\n        this._pTotalDuration = 0;\r\n        this._pTotalDelta.x = 0;\r\n        this._pTotalDelta.y = 0;\r\n        this._pTotalDelta.z = 0;\r\n    };\r\n    return AnimationClipNodeBase;\r\n}(AnimationNodeBase_1.AnimationNodeBase));\r\nexports.AnimationClipNodeBase = AnimationClipNodeBase;\r\n},{\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-display/lib/animators/nodes/AnimationNodeBase\":undefined}],\"awayjs-renderergl/lib/animators/nodes/ParticleAccelerationNode\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\r\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\r\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\r\nvar ParticleAccelerationState_1 = require(\"../../animators/states/ParticleAccelerationState\");\r\n/**\r\n * A particle animation node used to apply a constant acceleration vector to the motion of a particle.\r\n */\r\nvar ParticleAccelerationNode = (function (_super) {\r\n    __extends(ParticleAccelerationNode, _super);\r\n    /**\r\n     * Creates a new <code>ParticleAccelerationNode</code>\r\n     *\r\n     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\r\n     * @param    [optional] acceleration    Defines the default acceleration vector of the node, used when in global mode.\r\n     */\r\n    function ParticleAccelerationNode(mode, acceleration) {\r\n        if (acceleration === void 0) { acceleration = null; }\r\n        _super.call(this, \"ParticleAcceleration\", mode, 3);\r\n        this._pStateClass = ParticleAccelerationState_1.ParticleAccelerationState;\r\n        this._acceleration = acceleration || new Vector3D_1.Vector3D();\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleAccelerationNode.prototype.getAGALVertexCode = function (shader, animationSet, registerCache, animationRegisterData) {\r\n        var accelerationValue = (this._pMode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) ? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\r\n        animationRegisterData.setRegisterIndex(this, ParticleAccelerationState_1.ParticleAccelerationState.ACCELERATION_INDEX, accelerationValue.index);\r\n        var temp = registerCache.getFreeVertexVectorTemp();\r\n        registerCache.addVertexTempUsages(temp, 1);\r\n        var code = \"mul \" + temp + \",\" + animationRegisterData.vertexTime + \",\" + accelerationValue + \"\\n\";\r\n        if (animationSet.needVelocity) {\r\n            var temp2 = registerCache.getFreeVertexVectorTemp();\r\n            code += \"mul \" + temp2 + \",\" + temp + \",\" + animationRegisterData.vertexTwoConst + \"\\n\";\r\n            code += \"add \" + animationRegisterData.velocityTarget + \".xyz,\" + temp2 + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz\\n\";\r\n        }\r\n        registerCache.removeVertexTempUsage(temp);\r\n        code += \"mul \" + temp + \",\" + temp + \",\" + animationRegisterData.vertexTime + \"\\n\";\r\n        code += \"add \" + animationRegisterData.positionTarget + \".xyz,\" + temp + \",\" + animationRegisterData.positionTarget + \".xyz\\n\";\r\n        return code;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleAccelerationNode.prototype.getAnimationState = function (animator) {\r\n        return animator.getAnimationState(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleAccelerationNode.prototype._iGeneratePropertyOfOneParticle = function (param) {\r\n        var tempAcceleration = param[ParticleAccelerationNode.ACCELERATION_VECTOR3D];\r\n        if (!tempAcceleration)\r\n            throw new Error(\"there is no \" + ParticleAccelerationNode.ACCELERATION_VECTOR3D + \" in param!\");\r\n        this._pOneData[0] = tempAcceleration.x / 2;\r\n        this._pOneData[1] = tempAcceleration.y / 2;\r\n        this._pOneData[2] = tempAcceleration.z / 2;\r\n    };\r\n    /**\r\n     * Reference for acceleration node properties on a single particle (when in local property mode).\r\n     * Expects a <code>Vector3D</code> object representing the direction of acceleration on the particle.\r\n     */\r\n    ParticleAccelerationNode.ACCELERATION_VECTOR3D = \"AccelerationVector3D\";\r\n    return ParticleAccelerationNode;\r\n}(ParticleNodeBase_1.ParticleNodeBase));\r\nexports.ParticleAccelerationNode = ParticleAccelerationNode;\r\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticleAccelerationState\":\"awayjs-renderergl/lib/animators/states/ParticleAccelerationState\",\"awayjs-core/lib/geom/Vector3D\":undefined}],\"awayjs-renderergl/lib/animators/nodes/ParticleBezierCurveNode\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\r\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\r\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\r\nvar ParticleBezierCurveState_1 = require(\"../../animators/states/ParticleBezierCurveState\");\r\nvar ShaderRegisterElement_1 = require(\"../../shaders/ShaderRegisterElement\");\r\n/**\r\n * A particle animation node used to control the position of a particle over time along a bezier curve.\r\n */\r\nvar ParticleBezierCurveNode = (function (_super) {\r\n    __extends(ParticleBezierCurveNode, _super);\r\n    /**\r\n     * Creates a new <code>ParticleBezierCurveNode</code>\r\n     *\r\n     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\r\n     * @param    [optional] controlPoint    Defines the default control point of the node, used when in global mode.\r\n     * @param    [optional] endPoint        Defines the default end point of the node, used when in global mode.\r\n     */\r\n    function ParticleBezierCurveNode(mode, controlPoint, endPoint) {\r\n        if (controlPoint === void 0) { controlPoint = null; }\r\n        if (endPoint === void 0) { endPoint = null; }\r\n        _super.call(this, \"ParticleBezierCurve\", mode, 6);\r\n        this._pStateClass = ParticleBezierCurveState_1.ParticleBezierCurveState;\r\n        this._iControlPoint = controlPoint || new Vector3D_1.Vector3D();\r\n        this._iEndPoint = endPoint || new Vector3D_1.Vector3D();\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleBezierCurveNode.prototype.getAGALVertexCode = function (shader, animationSet, registerCache, animationRegisterData) {\r\n        var controlValue = (this._pMode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) ? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\r\n        animationRegisterData.setRegisterIndex(this, ParticleBezierCurveState_1.ParticleBezierCurveState.BEZIER_CONTROL_INDEX, controlValue.index);\r\n        var endValue = (this._pMode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) ? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\r\n        animationRegisterData.setRegisterIndex(this, ParticleBezierCurveState_1.ParticleBezierCurveState.BEZIER_END_INDEX, endValue.index);\r\n        var temp = registerCache.getFreeVertexVectorTemp();\r\n        var rev_time = new ShaderRegisterElement_1.ShaderRegisterElement(temp.regName, temp.index, 0);\r\n        var time_2 = new ShaderRegisterElement_1.ShaderRegisterElement(temp.regName, temp.index, 1);\r\n        var time_temp = new ShaderRegisterElement_1.ShaderRegisterElement(temp.regName, temp.index, 2);\r\n        registerCache.addVertexTempUsages(temp, 1);\r\n        var temp2 = registerCache.getFreeVertexVectorTemp();\r\n        var distance = new ShaderRegisterElement_1.ShaderRegisterElement(temp2.regName, temp2.index);\r\n        registerCache.removeVertexTempUsage(temp);\r\n        var code = \"\";\r\n        code += \"sub \" + rev_time + \",\" + animationRegisterData.vertexOneConst + \",\" + animationRegisterData.vertexLife + \"\\n\";\r\n        code += \"mul \" + time_2 + \",\" + animationRegisterData.vertexLife + \",\" + animationRegisterData.vertexLife + \"\\n\";\r\n        code += \"mul \" + time_temp + \",\" + animationRegisterData.vertexLife + \",\" + rev_time + \"\\n\";\r\n        code += \"mul \" + time_temp + \",\" + time_temp + \",\" + animationRegisterData.vertexTwoConst + \"\\n\";\r\n        code += \"mul \" + distance + \".xyz,\" + time_temp + \",\" + controlValue + \"\\n\";\r\n        code += \"add \" + animationRegisterData.positionTarget + \".xyz,\" + distance + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\r\n        code += \"mul \" + distance + \".xyz,\" + time_2 + \",\" + endValue + \"\\n\";\r\n        code += \"add \" + animationRegisterData.positionTarget + \".xyz,\" + distance + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\r\n        if (animationSet.needVelocity) {\r\n            code += \"mul \" + time_2 + \",\" + animationRegisterData.vertexLife + \",\" + animationRegisterData.vertexTwoConst + \"\\n\";\r\n            code += \"sub \" + time_temp + \",\" + animationRegisterData.vertexOneConst + \",\" + time_2 + \"\\n\";\r\n            code += \"mul \" + time_temp + \",\" + animationRegisterData.vertexTwoConst + \",\" + time_temp + \"\\n\";\r\n            code += \"mul \" + distance + \".xyz,\" + controlValue + \",\" + time_temp + \"\\n\";\r\n            code += \"add \" + animationRegisterData.velocityTarget + \".xyz,\" + distance + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz\\n\";\r\n            code += \"mul \" + distance + \".xyz,\" + endValue + \",\" + time_2 + \"\\n\";\r\n            code += \"add \" + animationRegisterData.velocityTarget + \".xyz,\" + distance + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz\\n\";\r\n        }\r\n        return code;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleBezierCurveNode.prototype.getAnimationState = function (animator) {\r\n        return animator.getAnimationState(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleBezierCurveNode.prototype._iGeneratePropertyOfOneParticle = function (param) {\r\n        var bezierControl = param[ParticleBezierCurveNode.BEZIER_CONTROL_VECTOR3D];\r\n        if (!bezierControl)\r\n            throw new Error(\"there is no \" + ParticleBezierCurveNode.BEZIER_CONTROL_VECTOR3D + \" in param!\");\r\n        var bezierEnd = param[ParticleBezierCurveNode.BEZIER_END_VECTOR3D];\r\n        if (!bezierEnd)\r\n            throw new Error(\"there is no \" + ParticleBezierCurveNode.BEZIER_END_VECTOR3D + \" in param!\");\r\n        this._pOneData[0] = bezierControl.x;\r\n        this._pOneData[1] = bezierControl.y;\r\n        this._pOneData[2] = bezierControl.z;\r\n        this._pOneData[3] = bezierEnd.x;\r\n        this._pOneData[4] = bezierEnd.y;\r\n        this._pOneData[5] = bezierEnd.z;\r\n    };\r\n    /**\r\n     * Reference for bezier curve node properties on a single particle (when in local property mode).\r\n     * Expects a <code>Vector3D</code> object representing the control point position (0, 1, 2) of the curve.\r\n     */\r\n    ParticleBezierCurveNode.BEZIER_CONTROL_VECTOR3D = \"BezierControlVector3D\";\r\n    /**\r\n     * Reference for bezier curve node properties on a single particle (when in local property mode).\r\n     * Expects a <code>Vector3D</code> object representing the end point position (0, 1, 2) of the curve.\r\n     */\r\n    ParticleBezierCurveNode.BEZIER_END_VECTOR3D = \"BezierEndVector3D\";\r\n    return ParticleBezierCurveNode;\r\n}(ParticleNodeBase_1.ParticleNodeBase));\r\nexports.ParticleBezierCurveNode = ParticleBezierCurveNode;\r\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticleBezierCurveState\":\"awayjs-renderergl/lib/animators/states/ParticleBezierCurveState\",\"../../shaders/ShaderRegisterElement\":\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\",\"awayjs-core/lib/geom/Vector3D\":undefined}],\"awayjs-renderergl/lib/animators/nodes/ParticleBillboardNode\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\r\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\r\nvar ParticleBillboardState_1 = require(\"../../animators/states/ParticleBillboardState\");\r\n/**\r\n * A particle animation node that controls the rotation of a particle to always face the camera.\r\n */\r\nvar ParticleBillboardNode = (function (_super) {\r\n    __extends(ParticleBillboardNode, _super);\r\n    /**\r\n     * Creates a new <code>ParticleBillboardNode</code>\r\n     */\r\n    function ParticleBillboardNode(billboardAxis) {\r\n        if (billboardAxis === void 0) { billboardAxis = null; }\r\n        _super.call(this, \"ParticleBillboard\", ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL, 0, 4);\r\n        this._pStateClass = ParticleBillboardState_1.ParticleBillboardState;\r\n        this._iBillboardAxis = billboardAxis;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleBillboardNode.prototype.getAGALVertexCode = function (shader, animationSet, registerCache, animationRegisterData) {\r\n        var rotationMatrixRegister = registerCache.getFreeVertexConstant();\r\n        animationRegisterData.setRegisterIndex(this, ParticleBillboardState_1.ParticleBillboardState.MATRIX_INDEX, rotationMatrixRegister.index);\r\n        registerCache.getFreeVertexConstant();\r\n        registerCache.getFreeVertexConstant();\r\n        registerCache.getFreeVertexConstant();\r\n        var temp = registerCache.getFreeVertexVectorTemp();\r\n        var code = \"m33 \" + temp + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \",\" + rotationMatrixRegister + \"\\n\" +\r\n            \"mov \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp + \"\\n\";\r\n        var shaderRegisterElement;\r\n        for (var i = 0; i < animationRegisterData.rotationRegisters.length; i++) {\r\n            shaderRegisterElement = animationRegisterData.rotationRegisters[i];\r\n            code += \"m33 \" + temp + \".xyz,\" + shaderRegisterElement + \",\" + rotationMatrixRegister + \"\\n\" +\r\n                \"mov \" + shaderRegisterElement + \".xyz,\" + shaderRegisterElement + \"\\n\";\r\n        }\r\n        return code;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleBillboardNode.prototype.getAnimationState = function (animator) {\r\n        return animator.getAnimationState(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleBillboardNode.prototype._iProcessAnimationSetting = function (particleAnimationSet) {\r\n        particleAnimationSet.hasBillboard = true;\r\n    };\r\n    return ParticleBillboardNode;\r\n}(ParticleNodeBase_1.ParticleNodeBase));\r\nexports.ParticleBillboardNode = ParticleBillboardNode;\r\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticleBillboardState\":\"awayjs-renderergl/lib/animators/states/ParticleBillboardState\"}],\"awayjs-renderergl/lib/animators/nodes/ParticleColorNode\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar ColorTransform_1 = require(\"awayjs-core/lib/geom/ColorTransform\");\r\nvar ParticleAnimationSet_1 = require(\"../../animators/ParticleAnimationSet\");\r\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\r\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\r\nvar ParticleColorState_1 = require(\"../../animators/states/ParticleColorState\");\r\n/**\r\n * A particle animation node used to control the color variation of a particle over time.\r\n */\r\nvar ParticleColorNode = (function (_super) {\r\n    __extends(ParticleColorNode, _super);\r\n    /**\r\n     * Creates a new <code>ParticleColorNode</code>\r\n     *\r\n     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\r\n     * @param    [optional] usesMultiplier  Defines whether the node uses multiplier data in the shader for its color transformations. Defaults to true.\r\n     * @param    [optional] usesOffset      Defines whether the node uses offset data in the shader for its color transformations. Defaults to true.\r\n     * @param    [optional] usesCycle       Defines whether the node uses the <code>cycleDuration</code> property in the shader to calculate the period of the animation independent of particle duration. Defaults to false.\r\n     * @param    [optional] usesPhase       Defines whether the node uses the <code>cyclePhase</code> property in the shader to calculate a starting offset to the cycle rotation of the particle. Defaults to false.\r\n     * @param    [optional] startColor      Defines the default start color transform of the node, when in global mode.\r\n     * @param    [optional] endColor        Defines the default end color transform of the node, when in global mode.\r\n     * @param    [optional] cycleDuration   Defines the duration of the animation in seconds, used as a period independent of particle duration when in global mode. Defaults to 1.\r\n     * @param    [optional] cyclePhase      Defines the phase of the cycle in degrees, used as the starting offset of the cycle when in global mode. Defaults to 0.\r\n     */\r\n    function ParticleColorNode(mode, usesMultiplier, usesOffset, usesCycle, usesPhase, startColor, endColor, cycleDuration, cyclePhase) {\r\n        if (usesMultiplier === void 0) { usesMultiplier = true; }\r\n        if (usesOffset === void 0) { usesOffset = true; }\r\n        if (usesCycle === void 0) { usesCycle = false; }\r\n        if (usesPhase === void 0) { usesPhase = false; }\r\n        if (startColor === void 0) { startColor = null; }\r\n        if (endColor === void 0) { endColor = null; }\r\n        if (cycleDuration === void 0) { cycleDuration = 1; }\r\n        if (cyclePhase === void 0) { cyclePhase = 0; }\r\n        _super.call(this, \"ParticleColor\", mode, (usesMultiplier && usesOffset) ? 16 : 8, ParticleAnimationSet_1.ParticleAnimationSet.COLOR_PRIORITY);\r\n        this._pStateClass = ParticleColorState_1.ParticleColorState;\r\n        this._iUsesMultiplier = usesMultiplier;\r\n        this._iUsesOffset = usesOffset;\r\n        this._iUsesCycle = usesCycle;\r\n        this._iUsesPhase = usesPhase;\r\n        this._iStartColor = startColor || new ColorTransform_1.ColorTransform();\r\n        this._iEndColor = endColor || new ColorTransform_1.ColorTransform();\r\n        this._iCycleDuration = cycleDuration;\r\n        this._iCyclePhase = cyclePhase;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleColorNode.prototype.getAGALVertexCode = function (shader, animationSet, registerCache, animationRegisterData) {\r\n        var code = \"\";\r\n        if (shader.usesFragmentAnimation) {\r\n            var temp = registerCache.getFreeVertexVectorTemp();\r\n            if (this._iUsesCycle) {\r\n                var cycleConst = registerCache.getFreeVertexConstant();\r\n                animationRegisterData.setRegisterIndex(this, ParticleColorState_1.ParticleColorState.CYCLE_INDEX, cycleConst.index);\r\n                registerCache.addVertexTempUsages(temp, 1);\r\n                var sin = registerCache.getFreeVertexSingleTemp();\r\n                registerCache.removeVertexTempUsage(temp);\r\n                code += \"mul \" + sin + \",\" + animationRegisterData.vertexTime + \",\" + cycleConst + \".x\\n\";\r\n                if (this._iUsesPhase)\r\n                    code += \"add \" + sin + \",\" + sin + \",\" + cycleConst + \".y\\n\";\r\n                code += \"sin \" + sin + \",\" + sin + \"\\n\";\r\n            }\r\n            if (this._iUsesMultiplier) {\r\n                var startMultiplierValue = (this._pMode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) ? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\r\n                var deltaMultiplierValue = (this._pMode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) ? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\r\n                animationRegisterData.setRegisterIndex(this, ParticleColorState_1.ParticleColorState.START_MULTIPLIER_INDEX, startMultiplierValue.index);\r\n                animationRegisterData.setRegisterIndex(this, ParticleColorState_1.ParticleColorState.DELTA_MULTIPLIER_INDEX, deltaMultiplierValue.index);\r\n                code += \"mul \" + temp + \",\" + deltaMultiplierValue + \",\" + (this._iUsesCycle ? sin : animationRegisterData.vertexLife) + \"\\n\";\r\n                code += \"add \" + temp + \",\" + temp + \",\" + startMultiplierValue + \"\\n\";\r\n                code += \"mul \" + animationRegisterData.colorMulTarget + \",\" + temp + \",\" + animationRegisterData.colorMulTarget + \"\\n\";\r\n            }\r\n            if (this._iUsesOffset) {\r\n                var startOffsetValue = (this._pMode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_STATIC) ? registerCache.getFreeVertexAttribute() : registerCache.getFreeVertexConstant();\r\n                var deltaOffsetValue = (this._pMode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_STATIC) ? registerCache.getFreeVertexAttribute() : registerCache.getFreeVertexConstant();\r\n                animationRegisterData.setRegisterIndex(this, ParticleColorState_1.ParticleColorState.START_OFFSET_INDEX, startOffsetValue.index);\r\n                animationRegisterData.setRegisterIndex(this, ParticleColorState_1.ParticleColorState.DELTA_OFFSET_INDEX, deltaOffsetValue.index);\r\n                code += \"mul \" + temp + \",\" + deltaOffsetValue + \",\" + (this._iUsesCycle ? sin : animationRegisterData.vertexLife) + \"\\n\";\r\n                code += \"add \" + temp + \",\" + temp + \",\" + startOffsetValue + \"\\n\";\r\n                code += \"add \" + animationRegisterData.colorAddTarget + \",\" + temp + \",\" + animationRegisterData.colorAddTarget + \"\\n\";\r\n            }\r\n        }\r\n        return code;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleColorNode.prototype.getAnimationState = function (animator) {\r\n        return animator.getAnimationState(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleColorNode.prototype._iProcessAnimationSetting = function (particleAnimationSet) {\r\n        if (this._iUsesMultiplier)\r\n            particleAnimationSet.hasColorMulNode = true;\r\n        if (this._iUsesOffset)\r\n            particleAnimationSet.hasColorAddNode = true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleColorNode.prototype._iGeneratePropertyOfOneParticle = function (param) {\r\n        var startColor = param[ParticleColorNode.COLOR_START_COLORTRANSFORM];\r\n        if (!startColor)\r\n            throw (new Error(\"there is no \" + ParticleColorNode.COLOR_START_COLORTRANSFORM + \" in param!\"));\r\n        var endColor = param[ParticleColorNode.COLOR_END_COLORTRANSFORM];\r\n        if (!endColor)\r\n            throw (new Error(\"there is no \" + ParticleColorNode.COLOR_END_COLORTRANSFORM + \" in param!\"));\r\n        var i = 0;\r\n        if (!this._iUsesCycle) {\r\n            //multiplier\r\n            if (this._iUsesMultiplier) {\r\n                this._pOneData[i++] = startColor.redMultiplier;\r\n                this._pOneData[i++] = startColor.greenMultiplier;\r\n                this._pOneData[i++] = startColor.blueMultiplier;\r\n                this._pOneData[i++] = startColor.alphaMultiplier;\r\n                this._pOneData[i++] = endColor.redMultiplier - startColor.redMultiplier;\r\n                this._pOneData[i++] = endColor.greenMultiplier - startColor.greenMultiplier;\r\n                this._pOneData[i++] = endColor.blueMultiplier - startColor.blueMultiplier;\r\n                this._pOneData[i++] = endColor.alphaMultiplier - startColor.alphaMultiplier;\r\n            }\r\n            //offset\r\n            if (this._iUsesOffset) {\r\n                this._pOneData[i++] = startColor.redOffset / 255;\r\n                this._pOneData[i++] = startColor.greenOffset / 255;\r\n                this._pOneData[i++] = startColor.blueOffset / 255;\r\n                this._pOneData[i++] = startColor.alphaOffset / 255;\r\n                this._pOneData[i++] = (endColor.redOffset - startColor.redOffset) / 255;\r\n                this._pOneData[i++] = (endColor.greenOffset - startColor.greenOffset) / 255;\r\n                this._pOneData[i++] = (endColor.blueOffset - startColor.blueOffset) / 255;\r\n                this._pOneData[i++] = (endColor.alphaOffset - startColor.alphaOffset) / 255;\r\n            }\r\n        }\r\n        else {\r\n            //multiplier\r\n            if (this._iUsesMultiplier) {\r\n                this._pOneData[i++] = (startColor.redMultiplier + endColor.redMultiplier) / 2;\r\n                this._pOneData[i++] = (startColor.greenMultiplier + endColor.greenMultiplier) / 2;\r\n                this._pOneData[i++] = (startColor.blueMultiplier + endColor.blueMultiplier) / 2;\r\n                this._pOneData[i++] = (startColor.alphaMultiplier + endColor.alphaMultiplier) / 2;\r\n                this._pOneData[i++] = (startColor.redMultiplier - endColor.redMultiplier) / 2;\r\n                this._pOneData[i++] = (startColor.greenMultiplier - endColor.greenMultiplier) / 2;\r\n                this._pOneData[i++] = (startColor.blueMultiplier - endColor.blueMultiplier) / 2;\r\n                this._pOneData[i++] = (startColor.alphaMultiplier - endColor.alphaMultiplier) / 2;\r\n            }\r\n            //offset\r\n            if (this._iUsesOffset) {\r\n                this._pOneData[i++] = (startColor.redOffset + endColor.redOffset) / (255 * 2);\r\n                this._pOneData[i++] = (startColor.greenOffset + endColor.greenOffset) / (255 * 2);\r\n                this._pOneData[i++] = (startColor.blueOffset + endColor.blueOffset) / (255 * 2);\r\n                this._pOneData[i++] = (startColor.alphaOffset + endColor.alphaOffset) / (255 * 2);\r\n                this._pOneData[i++] = (startColor.redOffset - endColor.redOffset) / (255 * 2);\r\n                this._pOneData[i++] = (startColor.greenOffset - endColor.greenOffset) / (255 * 2);\r\n                this._pOneData[i++] = (startColor.blueOffset - endColor.blueOffset) / (255 * 2);\r\n                this._pOneData[i++] = (startColor.alphaOffset - endColor.alphaOffset) / (255 * 2);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Reference for color node properties on a single particle (when in local property mode).\r\n     * Expects a <code>ColorTransform</code> object representing the start color transform applied to the particle.\r\n     */\r\n    ParticleColorNode.COLOR_START_COLORTRANSFORM = \"ColorStartColorTransform\";\r\n    /**\r\n     * Reference for color node properties on a single particle (when in local property mode).\r\n     * Expects a <code>ColorTransform</code> object representing the end color transform applied to the particle.\r\n     */\r\n    ParticleColorNode.COLOR_END_COLORTRANSFORM = \"ColorEndColorTransform\";\r\n    return ParticleColorNode;\r\n}(ParticleNodeBase_1.ParticleNodeBase));\r\nexports.ParticleColorNode = ParticleColorNode;\r\n},{\"../../animators/ParticleAnimationSet\":\"awayjs-renderergl/lib/animators/ParticleAnimationSet\",\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticleColorState\":\"awayjs-renderergl/lib/animators/states/ParticleColorState\",\"awayjs-core/lib/geom/ColorTransform\":undefined}],\"awayjs-renderergl/lib/animators/nodes/ParticleFollowNode\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar ParticleAnimationSet_1 = require(\"../../animators/ParticleAnimationSet\");\r\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\r\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\r\nvar ParticleFollowState_1 = require(\"../../animators/states/ParticleFollowState\");\r\n/**\r\n * A particle animation node used to create a follow behaviour on a particle system.\r\n */\r\nvar ParticleFollowNode = (function (_super) {\r\n    __extends(ParticleFollowNode, _super);\r\n    /**\r\n     * Creates a new <code>ParticleFollowNode</code>\r\n     *\r\n     * @param    [optional] usesPosition     Defines wehether the individual particle reacts to the position of the target.\r\n     * @param    [optional] usesRotation     Defines wehether the individual particle reacts to the rotation of the target.\r\n     * @param    [optional] smooth     Defines wehether the state calculate the interpolated value.\r\n     */\r\n    function ParticleFollowNode(usesPosition, usesRotation, smooth) {\r\n        if (usesPosition === void 0) { usesPosition = true; }\r\n        if (usesRotation === void 0) { usesRotation = true; }\r\n        if (smooth === void 0) { smooth = false; }\r\n        _super.call(this, \"ParticleFollow\", ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_DYNAMIC, (usesPosition && usesRotation) ? 6 : 3, ParticleAnimationSet_1.ParticleAnimationSet.POST_PRIORITY);\r\n        this._pStateClass = ParticleFollowState_1.ParticleFollowState;\r\n        this._iUsesPosition = usesPosition;\r\n        this._iUsesRotation = usesRotation;\r\n        this._iSmooth = smooth;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleFollowNode.prototype.getAGALVertexCode = function (shader, animationSet, registerCache, animationRegisterData) {\r\n        //TODO: use Quaternion to implement this function\r\n        var code = \"\";\r\n        if (this._iUsesRotation) {\r\n            var rotationAttribute = registerCache.getFreeVertexAttribute();\r\n            animationRegisterData.setRegisterIndex(this, ParticleFollowState_1.ParticleFollowState.FOLLOW_ROTATION_INDEX, rotationAttribute.index);\r\n            var temp1 = registerCache.getFreeVertexVectorTemp();\r\n            registerCache.addVertexTempUsages(temp1, 1);\r\n            var temp2 = registerCache.getFreeVertexVectorTemp();\r\n            registerCache.addVertexTempUsages(temp2, 1);\r\n            var temp3 = registerCache.getFreeVertexVectorTemp();\r\n            var temp4;\r\n            if (animationSet.hasBillboard) {\r\n                registerCache.addVertexTempUsages(temp3, 1);\r\n                temp4 = registerCache.getFreeVertexVectorTemp();\r\n            }\r\n            registerCache.removeVertexTempUsage(temp1);\r\n            registerCache.removeVertexTempUsage(temp2);\r\n            if (animationSet.hasBillboard)\r\n                registerCache.removeVertexTempUsage(temp3);\r\n            var len = animationRegisterData.rotationRegisters.length;\r\n            var i;\r\n            //x axis\r\n            code += \"mov \" + temp1 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n            code += \"mov \" + temp1 + \".x,\" + animationRegisterData.vertexOneConst + \"\\n\";\r\n            code += \"mov \" + temp3 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n            code += \"sin \" + temp3 + \".y,\" + rotationAttribute + \".x\\n\";\r\n            code += \"cos \" + temp3 + \".z,\" + rotationAttribute + \".x\\n\";\r\n            code += \"mov \" + temp2 + \".x,\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n            code += \"mov \" + temp2 + \".y,\" + temp3 + \".z\\n\";\r\n            code += \"neg \" + temp2 + \".z,\" + temp3 + \".y\\n\";\r\n            if (animationSet.hasBillboard)\r\n                code += \"m33 \" + temp4 + \".xyz,\" + animationRegisterData.positionTarget + \".xyz,\" + temp1 + \"\\n\";\r\n            else {\r\n                code += \"m33 \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp1 + \"\\n\";\r\n                for (i = 0; i < len; i++)\r\n                    code += \"m33 \" + animationRegisterData.rotationRegisters[i] + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \",\" + temp1 + \"\\n\";\r\n            }\r\n            //y axis\r\n            code += \"mov \" + temp1 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n            code += \"cos \" + temp1 + \".x,\" + rotationAttribute + \".y\\n\";\r\n            code += \"sin \" + temp1 + \".z,\" + rotationAttribute + \".y\\n\";\r\n            code += \"mov \" + temp2 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n            code += \"mov \" + temp2 + \".y,\" + animationRegisterData.vertexOneConst + \"\\n\";\r\n            code += \"mov \" + temp3 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n            code += \"neg \" + temp3 + \".x,\" + temp1 + \".z\\n\";\r\n            code += \"mov \" + temp3 + \".z,\" + temp1 + \".x\\n\";\r\n            if (animationSet.hasBillboard)\r\n                code += \"m33 \" + temp4 + \".xyz,\" + temp4 + \".xyz,\" + temp1 + \"\\n\";\r\n            else {\r\n                code += \"m33 \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp1 + \"\\n\";\r\n                for (i = 0; i < len; i++)\r\n                    code += \"m33 \" + animationRegisterData.rotationRegisters[i] + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \",\" + temp1 + \"\\n\";\r\n            }\r\n            //z axis\r\n            code += \"mov \" + temp2 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n            code += \"sin \" + temp2 + \".x,\" + rotationAttribute + \".z\\n\";\r\n            code += \"cos \" + temp2 + \".y,\" + rotationAttribute + \".z\\n\";\r\n            code += \"mov \" + temp1 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n            code += \"mov \" + temp1 + \".x,\" + temp2 + \".y\\n\";\r\n            code += \"neg \" + temp1 + \".y,\" + temp2 + \".x\\n\";\r\n            code += \"mov \" + temp3 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n            code += \"mov \" + temp3 + \".z,\" + animationRegisterData.vertexOneConst + \"\\n\";\r\n            if (animationSet.hasBillboard) {\r\n                code += \"m33 \" + temp4 + \".xyz,\" + temp4 + \".xyz,\" + temp1 + \"\\n\";\r\n                code += \"sub \" + temp4 + \".xyz,\" + temp4 + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\r\n                code += \"add \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp4 + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz\\n\";\r\n            }\r\n            else {\r\n                code += \"m33 \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp1 + \"\\n\";\r\n                for (i = 0; i < len; i++)\r\n                    code += \"m33 \" + animationRegisterData.rotationRegisters[i] + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \",\" + temp1 + \"\\n\";\r\n            }\r\n        }\r\n        if (this._iUsesPosition) {\r\n            var positionAttribute = registerCache.getFreeVertexAttribute();\r\n            animationRegisterData.setRegisterIndex(this, ParticleFollowState_1.ParticleFollowState.FOLLOW_POSITION_INDEX, positionAttribute.index);\r\n            code += \"add \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + positionAttribute + \",\" + animationRegisterData.scaleAndRotateTarget + \".xyz\\n\";\r\n        }\r\n        return code;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleFollowNode.prototype.getAnimationState = function (animator) {\r\n        return animator.getAnimationState(this);\r\n    };\r\n    return ParticleFollowNode;\r\n}(ParticleNodeBase_1.ParticleNodeBase));\r\nexports.ParticleFollowNode = ParticleFollowNode;\r\n},{\"../../animators/ParticleAnimationSet\":\"awayjs-renderergl/lib/animators/ParticleAnimationSet\",\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticleFollowState\":\"awayjs-renderergl/lib/animators/states/ParticleFollowState\"}],\"awayjs-renderergl/lib/animators/nodes/ParticleInitialColorNode\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar ColorTransform_1 = require(\"awayjs-core/lib/geom/ColorTransform\");\r\nvar ParticleAnimationSet_1 = require(\"../../animators/ParticleAnimationSet\");\r\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\r\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\r\nvar ParticleInitialColorState_1 = require(\"../../animators/states/ParticleInitialColorState\");\r\n/**\r\n *\r\n */\r\nvar ParticleInitialColorNode = (function (_super) {\r\n    __extends(ParticleInitialColorNode, _super);\r\n    function ParticleInitialColorNode(mode, usesMultiplier, usesOffset, initialColor) {\r\n        if (usesMultiplier === void 0) { usesMultiplier = true; }\r\n        if (usesOffset === void 0) { usesOffset = false; }\r\n        if (initialColor === void 0) { initialColor = null; }\r\n        _super.call(this, \"ParticleInitialColor\", mode, (usesMultiplier && usesOffset) ? 8 : 4, ParticleAnimationSet_1.ParticleAnimationSet.COLOR_PRIORITY);\r\n        this._pStateClass = ParticleInitialColorState_1.ParticleInitialColorState;\r\n        this._iUsesMultiplier = usesMultiplier;\r\n        this._iUsesOffset = usesOffset;\r\n        this._iInitialColor = initialColor || new ColorTransform_1.ColorTransform();\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleInitialColorNode.prototype.getAGALVertexCode = function (shader, animationSet, registerCache, animationRegisterData) {\r\n        var code = \"\";\r\n        if (shader.usesFragmentAnimation) {\r\n            if (this._iUsesMultiplier) {\r\n                var multiplierValue = (this._pMode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) ? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\r\n                animationRegisterData.setRegisterIndex(this, ParticleInitialColorState_1.ParticleInitialColorState.MULTIPLIER_INDEX, multiplierValue.index);\r\n                code += \"mul \" + animationRegisterData.colorMulTarget + \",\" + multiplierValue + \",\" + animationRegisterData.colorMulTarget + \"\\n\";\r\n            }\r\n            if (this._iUsesOffset) {\r\n                var offsetValue = (this._pMode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_STATIC) ? registerCache.getFreeVertexAttribute() : registerCache.getFreeVertexConstant();\r\n                animationRegisterData.setRegisterIndex(this, ParticleInitialColorState_1.ParticleInitialColorState.OFFSET_INDEX, offsetValue.index);\r\n                code += \"add \" + animationRegisterData.colorAddTarget + \",\" + offsetValue + \",\" + animationRegisterData.colorAddTarget + \"\\n\";\r\n            }\r\n        }\r\n        return code;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleInitialColorNode.prototype._iProcessAnimationSetting = function (particleAnimationSet) {\r\n        if (this._iUsesMultiplier)\r\n            particleAnimationSet.hasColorMulNode = true;\r\n        if (this._iUsesOffset)\r\n            particleAnimationSet.hasColorAddNode = true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleInitialColorNode.prototype._iGeneratePropertyOfOneParticle = function (param) {\r\n        var initialColor = param[ParticleInitialColorNode.COLOR_INITIAL_COLORTRANSFORM];\r\n        if (!initialColor)\r\n            throw (new Error(\"there is no \" + ParticleInitialColorNode.COLOR_INITIAL_COLORTRANSFORM + \" in param!\"));\r\n        var i = 0;\r\n        //multiplier\r\n        if (this._iUsesMultiplier) {\r\n            this._pOneData[i++] = initialColor.redMultiplier;\r\n            this._pOneData[i++] = initialColor.greenMultiplier;\r\n            this._pOneData[i++] = initialColor.blueMultiplier;\r\n            this._pOneData[i++] = initialColor.alphaMultiplier;\r\n        }\r\n        //offset\r\n        if (this._iUsesOffset) {\r\n            this._pOneData[i++] = initialColor.redOffset / 255;\r\n            this._pOneData[i++] = initialColor.greenOffset / 255;\r\n            this._pOneData[i++] = initialColor.blueOffset / 255;\r\n            this._pOneData[i++] = initialColor.alphaOffset / 255;\r\n        }\r\n    };\r\n    /**\r\n     * Reference for color node properties on a single particle (when in local property mode).\r\n     * Expects a <code>ColorTransform</code> object representing the color transform applied to the particle.\r\n     */\r\n    ParticleInitialColorNode.COLOR_INITIAL_COLORTRANSFORM = \"ColorInitialColorTransform\";\r\n    return ParticleInitialColorNode;\r\n}(ParticleNodeBase_1.ParticleNodeBase));\r\nexports.ParticleInitialColorNode = ParticleInitialColorNode;\r\n},{\"../../animators/ParticleAnimationSet\":\"awayjs-renderergl/lib/animators/ParticleAnimationSet\",\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticleInitialColorState\":\"awayjs-renderergl/lib/animators/states/ParticleInitialColorState\",\"awayjs-core/lib/geom/ColorTransform\":undefined}],\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar AnimationNodeBase_1 = require(\"awayjs-display/lib/animators/nodes/AnimationNodeBase\");\r\n/**\r\n * Provides an abstract base class for particle animation nodes.\r\n */\r\nvar ParticleNodeBase = (function (_super) {\r\n    __extends(ParticleNodeBase, _super);\r\n    /**\r\n     * Creates a new <code>ParticleNodeBase</code> object.\r\n     *\r\n     * @param               name            Defines the generic name of the particle animation node.\r\n     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\r\n     * @param               dataLength      Defines the length of the data used by the node when in <code>LOCAL_STATIC</code> mode.\r\n     * @param    [optional] priority        the priority of the particle animation node, used to order the agal generated in a particle animation set. Defaults to 1.\r\n     */\r\n    function ParticleNodeBase(name, mode, dataLength, priority) {\r\n        if (priority === void 0) { priority = 1; }\r\n        _super.call(this);\r\n        this._pDataLength = 3;\r\n        name = name + ParticleNodeBase.MODES[mode];\r\n        this.name = name;\r\n        this._pMode = mode;\r\n        this._priority = priority;\r\n        this._pDataLength = dataLength;\r\n        this._pOneData = new Array(this._pDataLength);\r\n    }\r\n    Object.defineProperty(ParticleNodeBase.prototype, \"mode\", {\r\n        /**\r\n         * Returns the property mode of the particle animation node. Typically set in the node constructor\r\n         *\r\n         * @see away.animators.ParticlePropertiesMode\r\n         */\r\n        get: function () {\r\n            return this._pMode;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ParticleNodeBase.prototype, \"priority\", {\r\n        /**\r\n         * Returns the priority of the particle animation node, used to order the agal generated in a particle animation set. Set automatically on instantiation.\r\n         *\r\n         * @see away.animators.ParticleAnimationSet\r\n         * @see #getAGALVertexCode\r\n         */\r\n        get: function () {\r\n            return this._priority;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ParticleNodeBase.prototype, \"dataLength\", {\r\n        /**\r\n         * Returns the length of the data used by the node when in <code>LOCAL_STATIC</code> mode. Used to generate the local static data of the particle animation set.\r\n         *\r\n         * @see away.animators.ParticleAnimationSet\r\n         * @see #getAGALVertexCode\r\n         */\r\n        get: function () {\r\n            return this._pDataLength;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ParticleNodeBase.prototype, \"oneData\", {\r\n        /**\r\n         * Returns the generated data vector of the node after one particle pass during the generation of all local static data of the particle animation set.\r\n         *\r\n         * @see away.animators.ParticleAnimationSet\r\n         * @see #generatePropertyOfOneParticle\r\n         */\r\n        get: function () {\r\n            return this._pOneData;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns the AGAL code of the particle animation node for use in the vertex shader.\r\n     */\r\n    ParticleNodeBase.prototype.getAGALVertexCode = function (shader, animationSet, registerCache, animationRegisterData) {\r\n        return \"\";\r\n    };\r\n    /**\r\n     * Returns the AGAL code of the particle animation node for use in the fragment shader.\r\n     */\r\n    ParticleNodeBase.prototype.getAGALFragmentCode = function (shader, animationSet, registerCache, animationRegisterData) {\r\n        return \"\";\r\n    };\r\n    /**\r\n     * Returns the AGAL code of the particle animation node for use in the fragment shader when UV coordinates are required.\r\n     */\r\n    ParticleNodeBase.prototype.getAGALUVCode = function (shader, animationSet, registerCache, animationRegisterData) {\r\n        return \"\";\r\n    };\r\n    /**\r\n     * Called internally by the particle animation set when assigning the set of static properties originally defined by the initParticleFunc of the set.\r\n     *\r\n     * @see away.animators.ParticleAnimationSet#initParticleFunc\r\n     */\r\n    ParticleNodeBase.prototype._iGeneratePropertyOfOneParticle = function (param) {\r\n    };\r\n    /**\r\n     * Called internally by the particle animation set when determining the requirements of the particle animation node AGAL.\r\n     */\r\n    ParticleNodeBase.prototype._iProcessAnimationSetting = function (particleAnimationSet) {\r\n    };\r\n    //modes alias\r\n    ParticleNodeBase.GLOBAL = 'Global';\r\n    ParticleNodeBase.LOCAL_STATIC = 'LocalStatic';\r\n    ParticleNodeBase.LOCAL_DYNAMIC = 'LocalDynamic';\r\n    //modes list\r\n    ParticleNodeBase.MODES = {\r\n        0: ParticleNodeBase.GLOBAL,\r\n        1: ParticleNodeBase.LOCAL_STATIC,\r\n        2: ParticleNodeBase.LOCAL_DYNAMIC\r\n    };\r\n    return ParticleNodeBase;\r\n}(AnimationNodeBase_1.AnimationNodeBase));\r\nexports.ParticleNodeBase = ParticleNodeBase;\r\n},{\"awayjs-display/lib/animators/nodes/AnimationNodeBase\":undefined}],\"awayjs-renderergl/lib/animators/nodes/ParticleOrbitNode\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\r\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\r\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\r\nvar ParticleOrbitState_1 = require(\"../../animators/states/ParticleOrbitState\");\r\nvar ShaderRegisterElement_1 = require(\"../../shaders/ShaderRegisterElement\");\r\n/**\r\n * A particle animation node used to control the position of a particle over time around a circular orbit.\r\n */\r\nvar ParticleOrbitNode = (function (_super) {\r\n    __extends(ParticleOrbitNode, _super);\r\n    /**\r\n     * Creates a new <code>ParticleOrbitNode</code> object.\r\n     *\r\n     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\r\n     * @param    [optional] usesEulers      Defines whether the node uses the <code>eulers</code> property in the shader to calculate a rotation on the orbit. Defaults to true.\r\n     * @param    [optional] usesCycle       Defines whether the node uses the <code>cycleDuration</code> property in the shader to calculate the period of the orbit independent of particle duration. Defaults to false.\r\n     * @param    [optional] usesPhase       Defines whether the node uses the <code>cyclePhase</code> property in the shader to calculate a starting offset to the cycle rotation of the particle. Defaults to false.\r\n     * @param    [optional] radius          Defines the radius of the orbit when in global mode. Defaults to 100.\r\n     * @param    [optional] cycleDuration   Defines the duration of the orbit in seconds, used as a period independent of particle duration when in global mode. Defaults to 1.\r\n     * @param    [optional] cyclePhase      Defines the phase of the orbit in degrees, used as the starting offset of the cycle when in global mode. Defaults to 0.\r\n     * @param    [optional] eulers          Defines the euler rotation in degrees, applied to the orientation of the orbit when in global mode.\r\n     */\r\n    function ParticleOrbitNode(mode, usesEulers, usesCycle, usesPhase, radius, cycleDuration, cyclePhase, eulers) {\r\n        if (usesEulers === void 0) { usesEulers = true; }\r\n        if (usesCycle === void 0) { usesCycle = false; }\r\n        if (usesPhase === void 0) { usesPhase = false; }\r\n        if (radius === void 0) { radius = 100; }\r\n        if (cycleDuration === void 0) { cycleDuration = 1; }\r\n        if (cyclePhase === void 0) { cyclePhase = 0; }\r\n        if (eulers === void 0) { eulers = null; }\r\n        var len = 3;\r\n        if (usesPhase)\r\n            len++;\r\n        _super.call(this, \"ParticleOrbit\", mode, len);\r\n        this._pStateClass = ParticleOrbitState_1.ParticleOrbitState;\r\n        this._iUsesEulers = usesEulers;\r\n        this._iUsesCycle = usesCycle;\r\n        this._iUsesPhase = usesPhase;\r\n        this._iRadius = radius;\r\n        this._iCycleDuration = cycleDuration;\r\n        this._iCyclePhase = cyclePhase;\r\n        this._iEulers = eulers || new Vector3D_1.Vector3D();\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleOrbitNode.prototype.getAGALVertexCode = function (shader, animationSet, registerCache, animationRegisterData) {\r\n        var orbitRegister = (this._pMode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) ? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\r\n        animationRegisterData.setRegisterIndex(this, ParticleOrbitState_1.ParticleOrbitState.ORBIT_INDEX, orbitRegister.index);\r\n        var eulersMatrixRegister = registerCache.getFreeVertexConstant();\r\n        animationRegisterData.setRegisterIndex(this, ParticleOrbitState_1.ParticleOrbitState.EULERS_INDEX, eulersMatrixRegister.index);\r\n        registerCache.getFreeVertexConstant();\r\n        registerCache.getFreeVertexConstant();\r\n        registerCache.getFreeVertexConstant();\r\n        var temp1 = registerCache.getFreeVertexVectorTemp();\r\n        registerCache.addVertexTempUsages(temp1, 1);\r\n        var distance = new ShaderRegisterElement_1.ShaderRegisterElement(temp1.regName, temp1.index);\r\n        var temp2 = registerCache.getFreeVertexVectorTemp();\r\n        var cos = new ShaderRegisterElement_1.ShaderRegisterElement(temp2.regName, temp2.index, 0);\r\n        var sin = new ShaderRegisterElement_1.ShaderRegisterElement(temp2.regName, temp2.index, 1);\r\n        var degree = new ShaderRegisterElement_1.ShaderRegisterElement(temp2.regName, temp2.index, 2);\r\n        registerCache.removeVertexTempUsage(temp1);\r\n        var code = \"\";\r\n        if (this._iUsesCycle) {\r\n            code += \"mul \" + degree + \",\" + animationRegisterData.vertexTime + \",\" + orbitRegister + \".y\\n\";\r\n            if (this._iUsesPhase)\r\n                code += \"add \" + degree + \",\" + degree + \",\" + orbitRegister + \".w\\n\";\r\n        }\r\n        else\r\n            code += \"mul \" + degree + \",\" + animationRegisterData.vertexLife + \",\" + orbitRegister + \".y\\n\";\r\n        code += \"cos \" + cos + \",\" + degree + \"\\n\";\r\n        code += \"sin \" + sin + \",\" + degree + \"\\n\";\r\n        code += \"mul \" + distance + \".x,\" + cos + \",\" + orbitRegister + \".x\\n\";\r\n        code += \"mul \" + distance + \".y,\" + sin + \",\" + orbitRegister + \".x\\n\";\r\n        code += \"mov \" + distance + \".wz\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n        if (this._iUsesEulers)\r\n            code += \"m44 \" + distance + \",\" + distance + \",\" + eulersMatrixRegister + \"\\n\";\r\n        code += \"add \" + animationRegisterData.positionTarget + \".xyz,\" + distance + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\r\n        if (animationSet.needVelocity) {\r\n            code += \"neg \" + distance + \".x,\" + sin + \"\\n\";\r\n            code += \"mov \" + distance + \".y,\" + cos + \"\\n\";\r\n            code += \"mov \" + distance + \".zw,\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n            if (this._iUsesEulers)\r\n                code += \"m44 \" + distance + \",\" + distance + \",\" + eulersMatrixRegister + \"\\n\";\r\n            code += \"mul \" + distance + \",\" + distance + \",\" + orbitRegister + \".z\\n\";\r\n            code += \"div \" + distance + \",\" + distance + \",\" + orbitRegister + \".y\\n\";\r\n            if (!this._iUsesCycle)\r\n                code += \"div \" + distance + \",\" + distance + \",\" + animationRegisterData.vertexLife + \"\\n\";\r\n            code += \"add \" + animationRegisterData.velocityTarget + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz,\" + distance + \".xyz\\n\";\r\n        }\r\n        return code;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleOrbitNode.prototype.getAnimationState = function (animator) {\r\n        return animator.getAnimationState(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleOrbitNode.prototype._iGeneratePropertyOfOneParticle = function (param) {\r\n        //Vector3D.x is radius, Vector3D.y is cycle duration, Vector3D.z is phase\r\n        var orbit = param[ParticleOrbitNode.ORBIT_VECTOR3D];\r\n        if (!orbit)\r\n            throw new Error(\"there is no \" + ParticleOrbitNode.ORBIT_VECTOR3D + \" in param!\");\r\n        this._pOneData[0] = orbit.x;\r\n        if (this._iUsesCycle && orbit.y <= 0)\r\n            throw (new Error(\"the cycle duration must be greater than zero\"));\r\n        this._pOneData[1] = Math.PI * 2 / (!this._iUsesCycle ? 1 : orbit.y);\r\n        this._pOneData[2] = orbit.x * Math.PI * 2;\r\n        if (this._iUsesPhase)\r\n            this._pOneData[3] = orbit.z * Math.PI / 180;\r\n    };\r\n    /**\r\n     * Reference for orbit node properties on a single particle (when in local property mode).\r\n     * Expects a <code>Vector3D</code> object representing the radius (x), cycle speed (y) and cycle phase (z) of the motion on the particle.\r\n     */\r\n    ParticleOrbitNode.ORBIT_VECTOR3D = \"OrbitVector3D\";\r\n    return ParticleOrbitNode;\r\n}(ParticleNodeBase_1.ParticleNodeBase));\r\nexports.ParticleOrbitNode = ParticleOrbitNode;\r\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticleOrbitState\":\"awayjs-renderergl/lib/animators/states/ParticleOrbitState\",\"../../shaders/ShaderRegisterElement\":\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\",\"awayjs-core/lib/geom/Vector3D\":undefined}],\"awayjs-renderergl/lib/animators/nodes/ParticleOscillatorNode\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\r\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\r\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\r\nvar ParticleOscillatorState_1 = require(\"../../animators/states/ParticleOscillatorState\");\r\nvar ShaderRegisterElement_1 = require(\"../../shaders/ShaderRegisterElement\");\r\n/**\r\n * A particle animation node used to control the position of a particle over time using simple harmonic motion.\r\n */\r\nvar ParticleOscillatorNode = (function (_super) {\r\n    __extends(ParticleOscillatorNode, _super);\r\n    /**\r\n     * Creates a new <code>ParticleOscillatorNode</code>\r\n     *\r\n     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\r\n     * @param    [optional] oscillator      Defines the default oscillator axis (x, y, z) and cycleDuration (w) of the node, used when in global mode.\r\n     */\r\n    function ParticleOscillatorNode(mode, oscillator) {\r\n        if (oscillator === void 0) { oscillator = null; }\r\n        _super.call(this, \"ParticleOscillator\", mode, 4);\r\n        this._pStateClass = ParticleOscillatorState_1.ParticleOscillatorState;\r\n        this._iOscillator = oscillator || new Vector3D_1.Vector3D();\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleOscillatorNode.prototype.getAGALVertexCode = function (shader, animationSet, registerCache, animationRegisterData) {\r\n        var oscillatorRegister = (this._pMode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) ? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\r\n        animationRegisterData.setRegisterIndex(this, ParticleOscillatorState_1.ParticleOscillatorState.OSCILLATOR_INDEX, oscillatorRegister.index);\r\n        var temp = registerCache.getFreeVertexVectorTemp();\r\n        var dgree = new ShaderRegisterElement_1.ShaderRegisterElement(temp.regName, temp.index, 0);\r\n        var sin = new ShaderRegisterElement_1.ShaderRegisterElement(temp.regName, temp.index, 1);\r\n        var cos = new ShaderRegisterElement_1.ShaderRegisterElement(temp.regName, temp.index, 2);\r\n        registerCache.addVertexTempUsages(temp, 1);\r\n        var temp2 = registerCache.getFreeVertexVectorTemp();\r\n        var distance = new ShaderRegisterElement_1.ShaderRegisterElement(temp2.regName, temp2.index);\r\n        registerCache.removeVertexTempUsage(temp);\r\n        var code = \"\";\r\n        code += \"mul \" + dgree + \",\" + animationRegisterData.vertexTime + \",\" + oscillatorRegister + \".w\\n\";\r\n        code += \"sin \" + sin + \",\" + dgree + \"\\n\";\r\n        code += \"mul \" + distance + \".xyz,\" + sin + \",\" + oscillatorRegister + \".xyz\\n\";\r\n        code += \"add \" + animationRegisterData.positionTarget + \".xyz,\" + distance + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\r\n        if (animationSet.needVelocity) {\r\n            code += \"cos \" + cos + \",\" + dgree + \"\\n\";\r\n            code += \"mul \" + distance + \".xyz,\" + cos + \",\" + oscillatorRegister + \".xyz\\n\";\r\n            code += \"add \" + animationRegisterData.velocityTarget + \".xyz,\" + distance + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz\\n\";\r\n        }\r\n        return code;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleOscillatorNode.prototype.getAnimationState = function (animator) {\r\n        return animator.getAnimationState(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleOscillatorNode.prototype._iGeneratePropertyOfOneParticle = function (param) {\r\n        //(Vector3D.x,Vector3D.y,Vector3D.z) is oscillator axis, Vector3D.w is oscillator cycle duration\r\n        var drift = param[ParticleOscillatorNode.OSCILLATOR_VECTOR3D];\r\n        if (!drift)\r\n            throw (new Error(\"there is no \" + ParticleOscillatorNode.OSCILLATOR_VECTOR3D + \" in param!\"));\r\n        this._pOneData[0] = drift.x;\r\n        this._pOneData[1] = drift.y;\r\n        this._pOneData[2] = drift.z;\r\n        if (drift.w <= 0)\r\n            throw (new Error(\"the cycle duration must greater than zero\"));\r\n        this._pOneData[3] = Math.PI * 2 / drift.w;\r\n    };\r\n    /**\r\n     * Reference for ocsillator node properties on a single particle (when in local property mode).\r\n     * Expects a <code>Vector3D</code> object representing the axis (x,y,z) and cycle speed (w) of the motion on the particle.\r\n     */\r\n    ParticleOscillatorNode.OSCILLATOR_VECTOR3D = \"OscillatorVector3D\";\r\n    return ParticleOscillatorNode;\r\n}(ParticleNodeBase_1.ParticleNodeBase));\r\nexports.ParticleOscillatorNode = ParticleOscillatorNode;\r\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticleOscillatorState\":\"awayjs-renderergl/lib/animators/states/ParticleOscillatorState\",\"../../shaders/ShaderRegisterElement\":\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\",\"awayjs-core/lib/geom/Vector3D\":undefined}],\"awayjs-renderergl/lib/animators/nodes/ParticlePositionNode\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\r\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\r\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\r\nvar ParticlePositionState_1 = require(\"../../animators/states/ParticlePositionState\");\r\n/**\r\n * A particle animation node used to set the starting position of a particle.\r\n */\r\nvar ParticlePositionNode = (function (_super) {\r\n    __extends(ParticlePositionNode, _super);\r\n    /**\r\n     * Creates a new <code>ParticlePositionNode</code>\r\n     *\r\n     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\r\n     * @param    [optional] position        Defines the default position of the particle when in global mode. Defaults to 0,0,0.\r\n     */\r\n    function ParticlePositionNode(mode, position) {\r\n        if (position === void 0) { position = null; }\r\n        _super.call(this, \"ParticlePosition\", mode, 3);\r\n        this._pStateClass = ParticlePositionState_1.ParticlePositionState;\r\n        this._iPosition = position || new Vector3D_1.Vector3D();\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticlePositionNode.prototype.getAGALVertexCode = function (shader, animationSet, registerCache, animationRegisterData) {\r\n        var positionAttribute = (this._pMode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) ? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\r\n        animationRegisterData.setRegisterIndex(this, ParticlePositionState_1.ParticlePositionState.POSITION_INDEX, positionAttribute.index);\r\n        return \"add \" + animationRegisterData.positionTarget + \".xyz,\" + positionAttribute + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticlePositionNode.prototype.getAnimationState = function (animator) {\r\n        return animator.getAnimationState(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticlePositionNode.prototype._iGeneratePropertyOfOneParticle = function (param) {\r\n        var offset = param[ParticlePositionNode.POSITION_VECTOR3D];\r\n        if (!offset)\r\n            throw (new Error(\"there is no \" + ParticlePositionNode.POSITION_VECTOR3D + \" in param!\"));\r\n        this._pOneData[0] = offset.x;\r\n        this._pOneData[1] = offset.y;\r\n        this._pOneData[2] = offset.z;\r\n    };\r\n    /**\r\n     * Reference for position node properties on a single particle (when in local property mode).\r\n     * Expects a <code>Vector3D</code> object representing position of the particle.\r\n     */\r\n    ParticlePositionNode.POSITION_VECTOR3D = \"PositionVector3D\";\r\n    return ParticlePositionNode;\r\n}(ParticleNodeBase_1.ParticleNodeBase));\r\nexports.ParticlePositionNode = ParticlePositionNode;\r\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticlePositionState\":\"awayjs-renderergl/lib/animators/states/ParticlePositionState\",\"awayjs-core/lib/geom/Vector3D\":undefined}],\"awayjs-renderergl/lib/animators/nodes/ParticleRotateToHeadingNode\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\r\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\r\nvar ParticleRotateToHeadingState_1 = require(\"../../animators/states/ParticleRotateToHeadingState\");\r\nvar ShaderRegisterElement_1 = require(\"../../shaders/ShaderRegisterElement\");\r\n/**\r\n * A particle animation node used to control the rotation of a particle to match its heading vector.\r\n */\r\nvar ParticleRotateToHeadingNode = (function (_super) {\r\n    __extends(ParticleRotateToHeadingNode, _super);\r\n    /**\r\n     * Creates a new <code>ParticleBillboardNode</code>\r\n     */\r\n    function ParticleRotateToHeadingNode() {\r\n        _super.call(this, \"ParticleRotateToHeading\", ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL, 0, 3);\r\n        this._pStateClass = ParticleRotateToHeadingState_1.ParticleRotateToHeadingState;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleRotateToHeadingNode.prototype.getAGALVertexCode = function (shader, animationSet, registerCache, animationRegisterData) {\r\n        var code = \"\";\r\n        var len = animationRegisterData.rotationRegisters.length;\r\n        var i;\r\n        if (animationSet.hasBillboard) {\r\n            var temp1 = registerCache.getFreeVertexVectorTemp();\r\n            registerCache.addVertexTempUsages(temp1, 1);\r\n            var temp2 = registerCache.getFreeVertexVectorTemp();\r\n            registerCache.addVertexTempUsages(temp2, 1);\r\n            var temp3 = registerCache.getFreeVertexVectorTemp();\r\n            var rotationMatrixRegister = registerCache.getFreeVertexConstant();\r\n            animationRegisterData.setRegisterIndex(this, ParticleRotateToHeadingState_1.ParticleRotateToHeadingState.MATRIX_INDEX, rotationMatrixRegister.index);\r\n            registerCache.getFreeVertexConstant();\r\n            registerCache.getFreeVertexConstant();\r\n            registerCache.getFreeVertexConstant();\r\n            registerCache.removeVertexTempUsage(temp1);\r\n            registerCache.removeVertexTempUsage(temp2);\r\n            //process the velocity\r\n            code += \"m33 \" + temp1 + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz,\" + rotationMatrixRegister + \"\\n\";\r\n            code += \"mov \" + temp3 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n            code += \"mov \" + temp3 + \".xy,\" + temp1 + \".xy\\n\";\r\n            code += \"nrm \" + temp3 + \".xyz,\" + temp3 + \".xyz\\n\";\r\n            //temp3.x=cos,temp3.y=sin\r\n            //only process z axis\r\n            code += \"mov \" + temp2 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n            code += \"mov \" + temp2 + \".x,\" + temp3 + \".y\\n\";\r\n            code += \"mov \" + temp2 + \".y,\" + temp3 + \".x\\n\";\r\n            code += \"mov \" + temp1 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n            code += \"mov \" + temp1 + \".x,\" + temp3 + \".x\\n\";\r\n            code += \"neg \" + temp1 + \".y,\" + temp3 + \".y\\n\";\r\n            code += \"mov \" + temp3 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n            code += \"mov \" + temp3 + \".z,\" + animationRegisterData.vertexOneConst + \"\\n\";\r\n            code += \"m33 \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp1 + \"\\n\";\r\n            for (i = 0; i < len; i++)\r\n                code += \"m33 \" + animationRegisterData.rotationRegisters[i] + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \",\" + temp1 + \"\\n\";\r\n        }\r\n        else {\r\n            var nrmVel = registerCache.getFreeVertexVectorTemp();\r\n            registerCache.addVertexTempUsages(nrmVel, 1);\r\n            var xAxis = registerCache.getFreeVertexVectorTemp();\r\n            registerCache.addVertexTempUsages(xAxis, 1);\r\n            var R = registerCache.getFreeVertexVectorTemp();\r\n            registerCache.addVertexTempUsages(R, 1);\r\n            var R_rev = registerCache.getFreeVertexVectorTemp();\r\n            var cos = new ShaderRegisterElement_1.ShaderRegisterElement(R.regName, R.index, 3);\r\n            var sin = new ShaderRegisterElement_1.ShaderRegisterElement(R_rev.regName, R_rev.index, 3);\r\n            var cos2 = new ShaderRegisterElement_1.ShaderRegisterElement(nrmVel.regName, nrmVel.index, 3);\r\n            var tempSingle = sin;\r\n            registerCache.removeVertexTempUsage(nrmVel);\r\n            registerCache.removeVertexTempUsage(xAxis);\r\n            registerCache.removeVertexTempUsage(R);\r\n            code += \"mov \" + xAxis + \".x,\" + animationRegisterData.vertexOneConst + \"\\n\";\r\n            code += \"mov \" + xAxis + \".yz,\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n            code += \"nrm \" + nrmVel + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz\\n\";\r\n            code += \"dp3 \" + cos2 + \",\" + nrmVel + \".xyz,\" + xAxis + \".xyz\\n\";\r\n            code += \"crs \" + nrmVel + \".xyz,\" + xAxis + \".xyz,\" + nrmVel + \".xyz\\n\";\r\n            code += \"nrm \" + nrmVel + \".xyz,\" + nrmVel + \".xyz\\n\";\r\n            //use R as temp to judge if nrm is (0,0,0).\r\n            //if nrm is (0,0,0) ,change it to (0,0,1).\r\n            code += \"dp3 \" + R + \".x,\" + nrmVel + \".xyz,\" + nrmVel + \".xyz\\n\";\r\n            code += \"sge \" + R + \".x,\" + animationRegisterData.vertexZeroConst + \",\" + R + \".x\\n\";\r\n            code += \"add \" + nrmVel + \".z,\" + R + \".x,\" + nrmVel + \".z\\n\";\r\n            code += \"add \" + tempSingle + \",\" + cos2 + \",\" + animationRegisterData.vertexOneConst + \"\\n\";\r\n            code += \"div \" + tempSingle + \",\" + tempSingle + \",\" + animationRegisterData.vertexTwoConst + \"\\n\";\r\n            code += \"sqt \" + cos + \",\" + tempSingle + \"\\n\";\r\n            code += \"sub \" + tempSingle + \",\" + animationRegisterData.vertexOneConst + \",\" + cos2 + \"\\n\";\r\n            code += \"div \" + tempSingle + \",\" + tempSingle + \",\" + animationRegisterData.vertexTwoConst + \"\\n\";\r\n            code += \"sqt \" + sin + \",\" + tempSingle + \"\\n\";\r\n            code += \"mul \" + R + \".xyz,\" + sin + \",\" + nrmVel + \".xyz\\n\";\r\n            //use cos as R.w\r\n            code += \"mul \" + R_rev + \".xyz,\" + sin + \",\" + nrmVel + \".xyz\\n\";\r\n            code += \"neg \" + R_rev + \".xyz,\" + R_rev + \".xyz\\n\";\r\n            //use cos as R_rev.w\r\n            //nrmVel and xAxis are used as temp register\r\n            code += \"crs \" + nrmVel + \".xyz,\" + R + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz\\n\";\r\n            //use cos as R.w\r\n            code += \"mul \" + xAxis + \".xyz,\" + cos + \",\" + animationRegisterData.scaleAndRotateTarget + \".xyz\\n\";\r\n            code += \"add \" + nrmVel + \".xyz,\" + nrmVel + \".xyz,\" + xAxis + \".xyz\\n\";\r\n            code += \"dp3 \" + xAxis + \".w,\" + R + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz\\n\";\r\n            code += \"neg \" + nrmVel + \".w,\" + xAxis + \".w\\n\";\r\n            code += \"crs \" + R + \".xyz,\" + nrmVel + \".xyz,\" + R_rev + \".xyz\\n\";\r\n            //code += \"mul \" + xAxis + \".xyzw,\" + nrmVel + \".xyzw,\" +R_rev + \".w\\n\";\r\n            code += \"mul \" + xAxis + \".xyzw,\" + nrmVel + \".xyzw,\" + cos + \"\\n\";\r\n            code += \"add \" + R + \".xyz,\" + R + \".xyz,\" + xAxis + \".xyz\\n\";\r\n            code += \"mul \" + xAxis + \".xyz,\" + nrmVel + \".w,\" + R_rev + \".xyz\\n\";\r\n            code += \"add \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + R + \".xyz,\" + xAxis + \".xyz\\n\";\r\n            for (i = 0; i < len; i++) {\r\n                //just repeat the calculate above\r\n                //because of the limited registers, no need to optimise\r\n                code += \"mov \" + xAxis + \".x,\" + animationRegisterData.vertexOneConst + \"\\n\";\r\n                code += \"mov \" + xAxis + \".yz,\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n                code += \"nrm \" + nrmVel + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz\\n\";\r\n                code += \"dp3 \" + cos2 + \",\" + nrmVel + \".xyz,\" + xAxis + \".xyz\\n\";\r\n                code += \"crs \" + nrmVel + \".xyz,\" + xAxis + \".xyz,\" + nrmVel + \".xyz\\n\";\r\n                code += \"nrm \" + nrmVel + \".xyz,\" + nrmVel + \".xyz\\n\";\r\n                code += \"dp3 \" + R + \".x,\" + nrmVel + \".xyz,\" + nrmVel + \".xyz\\n\";\r\n                code += \"sge \" + R + \".x,\" + animationRegisterData.vertexZeroConst + \",\" + R + \".x\\n\";\r\n                code += \"add \" + nrmVel + \".z,\" + R + \".x,\" + nrmVel + \".z\\n\";\r\n                code += \"add \" + tempSingle + \",\" + cos2 + \",\" + animationRegisterData.vertexOneConst + \"\\n\";\r\n                code += \"div \" + tempSingle + \",\" + tempSingle + \",\" + animationRegisterData.vertexTwoConst + \"\\n\";\r\n                code += \"sqt \" + cos + \",\" + tempSingle + \"\\n\";\r\n                code += \"sub \" + tempSingle + \",\" + animationRegisterData.vertexOneConst + \",\" + cos2 + \"\\n\";\r\n                code += \"div \" + tempSingle + \",\" + tempSingle + \",\" + animationRegisterData.vertexTwoConst + \"\\n\";\r\n                code += \"sqt \" + sin + \",\" + tempSingle + \"\\n\";\r\n                code += \"mul \" + R + \".xyz,\" + sin + \",\" + nrmVel + \".xyz\\n\";\r\n                code += \"mul \" + R_rev + \".xyz,\" + sin + \",\" + nrmVel + \".xyz\\n\";\r\n                code += \"neg \" + R_rev + \".xyz,\" + R_rev + \".xyz\\n\";\r\n                code += \"crs \" + nrmVel + \".xyz,\" + R + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \".xyz\\n\";\r\n                code += \"mul \" + xAxis + \".xyz,\" + cos + \",\" + animationRegisterData.rotationRegisters[i] + \".xyz\\n\";\r\n                code += \"add \" + nrmVel + \".xyz,\" + nrmVel + \".xyz,\" + xAxis + \".xyz\\n\";\r\n                code += \"dp3 \" + xAxis + \".w,\" + R + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \".xyz\\n\";\r\n                code += \"neg \" + nrmVel + \".w,\" + xAxis + \".w\\n\";\r\n                code += \"crs \" + R + \".xyz,\" + nrmVel + \".xyz,\" + R_rev + \".xyz\\n\";\r\n                code += \"mul \" + xAxis + \".xyzw,\" + nrmVel + \".xyzw,\" + cos + \"\\n\";\r\n                code += \"add \" + R + \".xyz,\" + R + \".xyz,\" + xAxis + \".xyz\\n\";\r\n                code += \"mul \" + xAxis + \".xyz,\" + nrmVel + \".w,\" + R_rev + \".xyz\\n\";\r\n                code += \"add \" + animationRegisterData.rotationRegisters[i] + \".xyz,\" + R + \".xyz,\" + xAxis + \".xyz\\n\";\r\n            }\r\n        }\r\n        return code;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleRotateToHeadingNode.prototype.getAnimationState = function (animator) {\r\n        return animator.getAnimationState(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleRotateToHeadingNode.prototype._iProcessAnimationSetting = function (particleAnimationSet) {\r\n        particleAnimationSet.needVelocity = true;\r\n    };\r\n    return ParticleRotateToHeadingNode;\r\n}(ParticleNodeBase_1.ParticleNodeBase));\r\nexports.ParticleRotateToHeadingNode = ParticleRotateToHeadingNode;\r\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticleRotateToHeadingState\":\"awayjs-renderergl/lib/animators/states/ParticleRotateToHeadingState\",\"../../shaders/ShaderRegisterElement\":\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\"}],\"awayjs-renderergl/lib/animators/nodes/ParticleRotateToPositionNode\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\r\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\r\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\r\nvar ParticleRotateToPositionState_1 = require(\"../../animators/states/ParticleRotateToPositionState\");\r\nvar ShaderRegisterElement_1 = require(\"../../shaders/ShaderRegisterElement\");\r\n/**\r\n * A particle animation node used to control the rotation of a particle to face to a position\r\n */\r\nvar ParticleRotateToPositionNode = (function (_super) {\r\n    __extends(ParticleRotateToPositionNode, _super);\r\n    /**\r\n     * Creates a new <code>ParticleRotateToPositionNode</code>\r\n     */\r\n    function ParticleRotateToPositionNode(mode, position) {\r\n        if (position === void 0) { position = null; }\r\n        _super.call(this, \"ParticleRotateToPosition\", mode, 3, 3);\r\n        this._pStateClass = ParticleRotateToPositionState_1.ParticleRotateToPositionState;\r\n        this._iPosition = position || new Vector3D_1.Vector3D();\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleRotateToPositionNode.prototype.getAGALVertexCode = function (shader, animationSet, registerCache, animationRegisterData) {\r\n        var positionAttribute = (this._pMode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) ? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\r\n        animationRegisterData.setRegisterIndex(this, ParticleRotateToPositionState_1.ParticleRotateToPositionState.POSITION_INDEX, positionAttribute.index);\r\n        var code = \"\";\r\n        var len = animationRegisterData.rotationRegisters.length;\r\n        var i;\r\n        if (animationSet.hasBillboard) {\r\n            var temp1 = registerCache.getFreeVertexVectorTemp();\r\n            registerCache.addVertexTempUsages(temp1, 1);\r\n            var temp2 = registerCache.getFreeVertexVectorTemp();\r\n            registerCache.addVertexTempUsages(temp2, 1);\r\n            var temp3 = registerCache.getFreeVertexVectorTemp();\r\n            var rotationMatrixRegister = registerCache.getFreeVertexConstant();\r\n            animationRegisterData.setRegisterIndex(this, ParticleRotateToPositionState_1.ParticleRotateToPositionState.MATRIX_INDEX, rotationMatrixRegister.index);\r\n            registerCache.getFreeVertexConstant();\r\n            registerCache.getFreeVertexConstant();\r\n            registerCache.getFreeVertexConstant();\r\n            registerCache.removeVertexTempUsage(temp1);\r\n            registerCache.removeVertexTempUsage(temp2);\r\n            //process the position\r\n            code += \"sub \" + temp1 + \".xyz,\" + positionAttribute + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\r\n            code += \"m33 \" + temp1 + \".xyz,\" + temp1 + \".xyz,\" + rotationMatrixRegister + \"\\n\";\r\n            code += \"mov \" + temp3 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n            code += \"mov \" + temp3 + \".xy,\" + temp1 + \".xy\\n\";\r\n            code += \"nrm \" + temp3 + \".xyz,\" + temp3 + \".xyz\\n\";\r\n            //temp3.x=cos,temp3.y=sin\r\n            //only process z axis\r\n            code += \"mov \" + temp2 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n            code += \"mov \" + temp2 + \".x,\" + temp3 + \".y\\n\";\r\n            code += \"mov \" + temp2 + \".y,\" + temp3 + \".x\\n\";\r\n            code += \"mov \" + temp1 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n            code += \"mov \" + temp1 + \".x,\" + temp3 + \".x\\n\";\r\n            code += \"neg \" + temp1 + \".y,\" + temp3 + \".y\\n\";\r\n            code += \"mov \" + temp3 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n            code += \"mov \" + temp3 + \".z,\" + animationRegisterData.vertexOneConst + \"\\n\";\r\n            code += \"m33 \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp1 + \"\\n\";\r\n            for (i = 0; i < len; i++)\r\n                code += \"m33 \" + animationRegisterData.rotationRegisters[i] + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \",\" + temp1 + \"\\n\";\r\n        }\r\n        else {\r\n            var nrmDirection = registerCache.getFreeVertexVectorTemp();\r\n            registerCache.addVertexTempUsages(nrmDirection, 1);\r\n            var temp = registerCache.getFreeVertexVectorTemp();\r\n            registerCache.addVertexTempUsages(temp, 1);\r\n            var cos = new ShaderRegisterElement_1.ShaderRegisterElement(temp.regName, temp.index, 0);\r\n            var sin = new ShaderRegisterElement_1.ShaderRegisterElement(temp.regName, temp.index, 1);\r\n            var o_temp = new ShaderRegisterElement_1.ShaderRegisterElement(temp.regName, temp.index, 2);\r\n            var tempSingle = new ShaderRegisterElement_1.ShaderRegisterElement(temp.regName, temp.index, 3);\r\n            var R = registerCache.getFreeVertexVectorTemp();\r\n            registerCache.addVertexTempUsages(R, 1);\r\n            registerCache.removeVertexTempUsage(nrmDirection);\r\n            registerCache.removeVertexTempUsage(temp);\r\n            registerCache.removeVertexTempUsage(R);\r\n            code += \"sub \" + nrmDirection + \".xyz,\" + positionAttribute + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\r\n            code += \"nrm \" + nrmDirection + \".xyz,\" + nrmDirection + \".xyz\\n\";\r\n            code += \"mov \" + sin + \",\" + nrmDirection + \".y\\n\";\r\n            code += \"mul \" + cos + \",\" + sin + \",\" + sin + \"\\n\";\r\n            code += \"sub \" + cos + \",\" + animationRegisterData.vertexOneConst + \",\" + cos + \"\\n\";\r\n            code += \"sqt \" + cos + \",\" + cos + \"\\n\";\r\n            code += \"mul \" + R + \".x,\" + cos + \",\" + animationRegisterData.scaleAndRotateTarget + \".y\\n\";\r\n            code += \"mul \" + R + \".y,\" + sin + \",\" + animationRegisterData.scaleAndRotateTarget + \".z\\n\";\r\n            code += \"mul \" + R + \".z,\" + sin + \",\" + animationRegisterData.scaleAndRotateTarget + \".y\\n\";\r\n            code += \"mul \" + R + \".w,\" + cos + \",\" + animationRegisterData.scaleAndRotateTarget + \".z\\n\";\r\n            code += \"sub \" + animationRegisterData.scaleAndRotateTarget + \".y,\" + R + \".x,\" + R + \".y\\n\";\r\n            code += \"add \" + animationRegisterData.scaleAndRotateTarget + \".z,\" + R + \".z,\" + R + \".w\\n\";\r\n            code += \"abs \" + R + \".y,\" + nrmDirection + \".y\\n\";\r\n            code += \"sge \" + R + \".z,\" + R + \".y,\" + animationRegisterData.vertexOneConst + \"\\n\";\r\n            code += \"mul \" + R + \".x,\" + R + \".y,\" + nrmDirection + \".y\\n\";\r\n            //judgu if nrmDirection=(0,1,0);\r\n            code += \"mov \" + nrmDirection + \".y,\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n            code += \"dp3 \" + sin + \",\" + nrmDirection + \".xyz,\" + nrmDirection + \".xyz\\n\";\r\n            code += \"sge \" + tempSingle + \",\" + animationRegisterData.vertexZeroConst + \",\" + sin + \"\\n\";\r\n            code += \"mov \" + nrmDirection + \".y,\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n            code += \"nrm \" + nrmDirection + \".xyz,\" + nrmDirection + \".xyz\\n\";\r\n            code += \"sub \" + sin + \",\" + animationRegisterData.vertexOneConst + \",\" + tempSingle + \"\\n\";\r\n            code += \"mul \" + sin + \",\" + sin + \",\" + nrmDirection + \".x\\n\";\r\n            code += \"mov \" + cos + \",\" + nrmDirection + \".z\\n\";\r\n            code += \"neg \" + cos + \",\" + cos + \"\\n\";\r\n            code += \"sub \" + o_temp + \",\" + animationRegisterData.vertexOneConst + \",\" + cos + \"\\n\";\r\n            code += \"mul \" + o_temp + \",\" + R + \".x,\" + tempSingle + \"\\n\";\r\n            code += \"add \" + cos + \",\" + cos + \",\" + o_temp + \"\\n\";\r\n            code += \"mul \" + R + \".x,\" + cos + \",\" + animationRegisterData.scaleAndRotateTarget + \".x\\n\";\r\n            code += \"mul \" + R + \".y,\" + sin + \",\" + animationRegisterData.scaleAndRotateTarget + \".z\\n\";\r\n            code += \"mul \" + R + \".z,\" + sin + \",\" + animationRegisterData.scaleAndRotateTarget + \".x\\n\";\r\n            code += \"mul \" + R + \".w,\" + cos + \",\" + animationRegisterData.scaleAndRotateTarget + \".z\\n\";\r\n            code += \"sub \" + animationRegisterData.scaleAndRotateTarget + \".x,\" + R + \".x,\" + R + \".y\\n\";\r\n            code += \"add \" + animationRegisterData.scaleAndRotateTarget + \".z,\" + R + \".z,\" + R + \".w\\n\";\r\n            for (i = 0; i < len; i++) {\r\n                //just repeat the calculate above\r\n                //because of the limited registers, no need to optimise\r\n                code += \"sub \" + nrmDirection + \".xyz,\" + positionAttribute + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\r\n                code += \"nrm \" + nrmDirection + \".xyz,\" + nrmDirection + \".xyz\\n\";\r\n                code += \"mov \" + sin + \",\" + nrmDirection + \".y\\n\";\r\n                code += \"mul \" + cos + \",\" + sin + \",\" + sin + \"\\n\";\r\n                code += \"sub \" + cos + \",\" + animationRegisterData.vertexOneConst + \",\" + cos + \"\\n\";\r\n                code += \"sqt \" + cos + \",\" + cos + \"\\n\";\r\n                code += \"mul \" + R + \".x,\" + cos + \",\" + animationRegisterData.rotationRegisters[i] + \".y\\n\";\r\n                code += \"mul \" + R + \".y,\" + sin + \",\" + animationRegisterData.rotationRegisters[i] + \".z\\n\";\r\n                code += \"mul \" + R + \".z,\" + sin + \",\" + animationRegisterData.rotationRegisters[i] + \".y\\n\";\r\n                code += \"mul \" + R + \".w,\" + cos + \",\" + animationRegisterData.rotationRegisters[i] + \".z\\n\";\r\n                code += \"sub \" + animationRegisterData.rotationRegisters[i] + \".y,\" + R + \".x,\" + R + \".y\\n\";\r\n                code += \"add \" + animationRegisterData.rotationRegisters[i] + \".z,\" + R + \".z,\" + R + \".w\\n\";\r\n                code += \"abs \" + R + \".y,\" + nrmDirection + \".y\\n\";\r\n                code += \"sge \" + R + \".z,\" + R + \".y,\" + animationRegisterData.vertexOneConst + \"\\n\";\r\n                code += \"mul \" + R + \".x,\" + R + \".y,\" + nrmDirection + \".y\\n\";\r\n                code += \"mov \" + nrmDirection + \".y,\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n                code += \"dp3 \" + sin + \",\" + nrmDirection + \".xyz,\" + nrmDirection + \".xyz\\n\";\r\n                code += \"sge \" + tempSingle + \",\" + animationRegisterData.vertexZeroConst + \",\" + sin + \"\\n\";\r\n                code += \"mov \" + nrmDirection + \".y,\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n                code += \"nrm \" + nrmDirection + \".xyz,\" + nrmDirection + \".xyz\\n\";\r\n                code += \"sub \" + sin + \",\" + animationRegisterData.vertexOneConst + \",\" + tempSingle + \"\\n\";\r\n                code += \"mul \" + sin + \",\" + sin + \",\" + nrmDirection + \".x\\n\";\r\n                code += \"mov \" + cos + \",\" + nrmDirection + \".z\\n\";\r\n                code += \"neg \" + cos + \",\" + cos + \"\\n\";\r\n                code += \"sub \" + o_temp + \",\" + animationRegisterData.vertexOneConst + \",\" + cos + \"\\n\";\r\n                code += \"mul \" + o_temp + \",\" + R + \".x,\" + tempSingle + \"\\n\";\r\n                code += \"add \" + cos + \",\" + cos + \",\" + o_temp + \"\\n\";\r\n                code += \"mul \" + R + \".x,\" + cos + \",\" + animationRegisterData.rotationRegisters[i] + \".x\\n\";\r\n                code += \"mul \" + R + \".y,\" + sin + \",\" + animationRegisterData.rotationRegisters[i] + \".z\\n\";\r\n                code += \"mul \" + R + \".z,\" + sin + \",\" + animationRegisterData.rotationRegisters[i] + \".x\\n\";\r\n                code += \"mul \" + R + \".w,\" + cos + \",\" + animationRegisterData.rotationRegisters[i] + \".z\\n\";\r\n                code += \"sub \" + animationRegisterData.rotationRegisters[i] + \".x,\" + R + \".x,\" + R + \".y\\n\";\r\n                code += \"add \" + animationRegisterData.rotationRegisters[i] + \".z,\" + R + \".z,\" + R + \".w\\n\";\r\n            }\r\n        }\r\n        return code;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleRotateToPositionNode.prototype.getAnimationState = function (animator) {\r\n        return animator.getAnimationState(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleRotateToPositionNode.prototype._iGeneratePropertyOfOneParticle = function (param) {\r\n        var offset = param[ParticleRotateToPositionNode.POSITION_VECTOR3D];\r\n        if (!offset)\r\n            throw (new Error(\"there is no \" + ParticleRotateToPositionNode.POSITION_VECTOR3D + \" in param!\"));\r\n        this._pOneData[0] = offset.x;\r\n        this._pOneData[1] = offset.y;\r\n        this._pOneData[2] = offset.z;\r\n    };\r\n    /**\r\n     * Reference for the position the particle will rotate to face for a single particle (when in local property mode).\r\n     * Expects a <code>Vector3D</code> object representing the position that the particle must face.\r\n     */\r\n    ParticleRotateToPositionNode.POSITION_VECTOR3D = \"RotateToPositionVector3D\";\r\n    return ParticleRotateToPositionNode;\r\n}(ParticleNodeBase_1.ParticleNodeBase));\r\nexports.ParticleRotateToPositionNode = ParticleRotateToPositionNode;\r\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticleRotateToPositionState\":\"awayjs-renderergl/lib/animators/states/ParticleRotateToPositionState\",\"../../shaders/ShaderRegisterElement\":\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\",\"awayjs-core/lib/geom/Vector3D\":undefined}],\"awayjs-renderergl/lib/animators/nodes/ParticleRotationalVelocityNode\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\r\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\r\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\r\nvar ParticleRotationalVelocityState_1 = require(\"../../animators/states/ParticleRotationalVelocityState\");\r\nvar ShaderRegisterElement_1 = require(\"../../shaders/ShaderRegisterElement\");\r\n/**\r\n * A particle animation node used to set the starting rotational velocity of a particle.\r\n */\r\nvar ParticleRotationalVelocityNode = (function (_super) {\r\n    __extends(ParticleRotationalVelocityNode, _super);\r\n    /**\r\n     * Creates a new <code>ParticleRotationalVelocityNode</code>\r\n     *\r\n     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\r\n     */\r\n    function ParticleRotationalVelocityNode(mode, rotationalVelocity) {\r\n        if (rotationalVelocity === void 0) { rotationalVelocity = null; }\r\n        _super.call(this, \"ParticleRotationalVelocity\", mode, 4);\r\n        this._pStateClass = ParticleRotationalVelocityState_1.ParticleRotationalVelocityState;\r\n        this._iRotationalVelocity = rotationalVelocity || new Vector3D_1.Vector3D();\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleRotationalVelocityNode.prototype.getAGALVertexCode = function (shader, animationSet, registerCache, animationRegisterData) {\r\n        var rotationRegister = (this._pMode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) ? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\r\n        animationRegisterData.setRegisterIndex(this, ParticleRotationalVelocityState_1.ParticleRotationalVelocityState.ROTATIONALVELOCITY_INDEX, rotationRegister.index);\r\n        var nrmVel = registerCache.getFreeVertexVectorTemp();\r\n        registerCache.addVertexTempUsages(nrmVel, 1);\r\n        var xAxis = registerCache.getFreeVertexVectorTemp();\r\n        registerCache.addVertexTempUsages(xAxis, 1);\r\n        var temp = registerCache.getFreeVertexVectorTemp();\r\n        registerCache.addVertexTempUsages(temp, 1);\r\n        var Rtemp = new ShaderRegisterElement_1.ShaderRegisterElement(temp.regName, temp.index);\r\n        var R_rev = registerCache.getFreeVertexVectorTemp();\r\n        R_rev = new ShaderRegisterElement_1.ShaderRegisterElement(R_rev.regName, R_rev.index);\r\n        var cos = new ShaderRegisterElement_1.ShaderRegisterElement(Rtemp.regName, Rtemp.index, 3);\r\n        var sin = new ShaderRegisterElement_1.ShaderRegisterElement(R_rev.regName, R_rev.index, 3);\r\n        registerCache.removeVertexTempUsage(nrmVel);\r\n        registerCache.removeVertexTempUsage(xAxis);\r\n        registerCache.removeVertexTempUsage(temp);\r\n        var code = \"\";\r\n        code += \"mov \" + nrmVel + \".xyz,\" + rotationRegister + \".xyz\\n\";\r\n        code += \"mov \" + nrmVel + \".w,\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n        code += \"mul \" + cos + \",\" + animationRegisterData.vertexTime + \",\" + rotationRegister + \".w\\n\";\r\n        code += \"sin \" + sin + \",\" + cos + \"\\n\";\r\n        code += \"cos \" + cos + \",\" + cos + \"\\n\";\r\n        code += \"mul \" + Rtemp + \".xyz,\" + sin + \",\" + nrmVel + \".xyz\\n\";\r\n        code += \"mul \" + R_rev + \".xyz,\" + sin + \",\" + nrmVel + \".xyz\\n\";\r\n        code += \"neg \" + R_rev + \".xyz,\" + R_rev + \".xyz\\n\";\r\n        //nrmVel and xAxis are used as temp register\r\n        code += \"crs \" + nrmVel + \".xyz,\" + Rtemp + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz\\n\";\r\n        code += \"mul \" + xAxis + \".xyz,\" + cos + \",\" + animationRegisterData.scaleAndRotateTarget + \".xyz\\n\";\r\n        code += \"add \" + nrmVel + \".xyz,\" + nrmVel + \".xyz,\" + xAxis + \".xyz\\n\";\r\n        code += \"dp3 \" + xAxis + \".w,\" + Rtemp + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz\\n\";\r\n        code += \"neg \" + nrmVel + \".w,\" + xAxis + \".w\\n\";\r\n        code += \"crs \" + Rtemp + \".xyz,\" + nrmVel + \".xyz,\" + R_rev + \".xyz\\n\";\r\n        //use cos as R_rev.w\r\n        code += \"mul \" + xAxis + \".xyzw,\" + nrmVel + \".xyzw,\" + cos + \"\\n\";\r\n        code += \"add \" + Rtemp + \".xyz,\" + Rtemp + \".xyz,\" + xAxis + \".xyz\\n\";\r\n        code += \"mul \" + xAxis + \".xyz,\" + nrmVel + \".w,\" + R_rev + \".xyz\\n\";\r\n        code += \"add \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + Rtemp + \".xyz,\" + xAxis + \".xyz\\n\";\r\n        var len = animationRegisterData.rotationRegisters.length;\r\n        for (var i = 0; i < len; i++) {\r\n            code += \"mov \" + nrmVel + \".xyz,\" + rotationRegister + \".xyz\\n\";\r\n            code += \"mov \" + nrmVel + \".w,\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n            code += \"mul \" + cos + \",\" + animationRegisterData.vertexTime + \",\" + rotationRegister + \".w\\n\";\r\n            code += \"sin \" + sin + \",\" + cos + \"\\n\";\r\n            code += \"cos \" + cos + \",\" + cos + \"\\n\";\r\n            code += \"mul \" + Rtemp + \".xyz,\" + sin + \",\" + nrmVel + \".xyz\\n\";\r\n            code += \"mul \" + R_rev + \".xyz,\" + sin + \",\" + nrmVel + \".xyz\\n\";\r\n            code += \"neg \" + R_rev + \".xyz,\" + R_rev + \".xyz\\n\";\r\n            code += \"crs \" + nrmVel + \".xyz,\" + Rtemp + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \".xyz\\n\";\r\n            code += \"mul \" + xAxis + \".xyz,\" + cos + \",\" + animationRegisterData.rotationRegisters[i] + \"\\n\";\r\n            code += \"add \" + nrmVel + \".xyz,\" + nrmVel + \".xyz,\" + xAxis + \".xyz\\n\";\r\n            code += \"dp3 \" + xAxis + \".w,\" + Rtemp + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \"\\n\";\r\n            code += \"neg \" + nrmVel + \".w,\" + xAxis + \".w\\n\";\r\n            code += \"crs \" + Rtemp + \".xyz,\" + nrmVel + \".xyz,\" + R_rev + \".xyz\\n\";\r\n            code += \"mul \" + xAxis + \".xyzw,\" + nrmVel + \".xyzw,\" + cos + \"\\n\";\r\n            code += \"add \" + Rtemp + \".xyz,\" + Rtemp + \".xyz,\" + xAxis + \".xyz\\n\";\r\n            code += \"mul \" + xAxis + \".xyz,\" + nrmVel + \".w,\" + R_rev + \".xyz\\n\";\r\n            code += \"add \" + animationRegisterData.rotationRegisters[i] + \",\" + Rtemp + \".xyz,\" + xAxis + \".xyz\\n\";\r\n        }\r\n        return code;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleRotationalVelocityNode.prototype.getAnimationState = function (animator) {\r\n        return animator.getAnimationState(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleRotationalVelocityNode.prototype._iGeneratePropertyOfOneParticle = function (param) {\r\n        //(Vector3d.x,Vector3d.y,Vector3d.z) is rotation axis,Vector3d.w is cycle duration\r\n        var rotate = param[ParticleRotationalVelocityNode.ROTATIONALVELOCITY_VECTOR3D];\r\n        if (!rotate)\r\n            throw (new Error(\"there is no \" + ParticleRotationalVelocityNode.ROTATIONALVELOCITY_VECTOR3D + \" in param!\"));\r\n        if (rotate.length <= 0)\r\n            rotate.z = 1; //set the default direction\r\n        else\r\n            rotate.normalize();\r\n        this._pOneData[0] = rotate.x;\r\n        this._pOneData[1] = rotate.y;\r\n        this._pOneData[2] = rotate.z;\r\n        if (rotate.w <= 0)\r\n            throw (new Error(\"the cycle duration must greater than zero\"));\r\n        // it's used as angle/2 in agal\r\n        this._pOneData[3] = Math.PI / rotate.w;\r\n    };\r\n    /**\r\n     * Reference for rotational velocity node properties on a single particle (when in local property mode).\r\n     * Expects a <code>Vector3D</code> object representing the rotational velocity around an axis of the particle.\r\n     */\r\n    ParticleRotationalVelocityNode.ROTATIONALVELOCITY_VECTOR3D = \"RotationalVelocityVector3D\";\r\n    return ParticleRotationalVelocityNode;\r\n}(ParticleNodeBase_1.ParticleNodeBase));\r\nexports.ParticleRotationalVelocityNode = ParticleRotationalVelocityNode;\r\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticleRotationalVelocityState\":\"awayjs-renderergl/lib/animators/states/ParticleRotationalVelocityState\",\"../../shaders/ShaderRegisterElement\":\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\",\"awayjs-core/lib/geom/Vector3D\":undefined}],\"awayjs-renderergl/lib/animators/nodes/ParticleScaleNode\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\r\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\r\nvar ParticleScaleState_1 = require(\"../../animators/states/ParticleScaleState\");\r\n/**\r\n * A particle animation node used to control the scale variation of a particle over time.\r\n */\r\nvar ParticleScaleNode = (function (_super) {\r\n    __extends(ParticleScaleNode, _super);\r\n    /**\r\n     * Creates a new <code>ParticleScaleNode</code>\r\n     *\r\n     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\r\n     * @param    [optional] usesCycle       Defines whether the node uses the <code>cycleDuration</code> property in the shader to calculate the period of animation independent of particle duration. Defaults to false.\r\n     * @param    [optional] usesPhase       Defines whether the node uses the <code>cyclePhase</code> property in the shader to calculate a starting offset to the animation cycle. Defaults to false.\r\n     * @param    [optional] minScale        Defines the default min scale transform of the node, when in global mode. Defaults to 1.\r\n     * @param    [optional] maxScale        Defines the default max color transform of the node, when in global mode. Defaults to 1.\r\n     * @param    [optional] cycleDuration   Defines the default duration of the animation in seconds, used as a period independent of particle duration when in global mode. Defaults to 1.\r\n     * @param    [optional] cyclePhase      Defines the default phase of the cycle in degrees, used as the starting offset of the cycle when in global mode. Defaults to 0.\r\n     */\r\n    function ParticleScaleNode(mode, usesCycle, usesPhase, minScale, maxScale, cycleDuration, cyclePhase) {\r\n        if (minScale === void 0) { minScale = 1; }\r\n        if (maxScale === void 0) { maxScale = 1; }\r\n        if (cycleDuration === void 0) { cycleDuration = 1; }\r\n        if (cyclePhase === void 0) { cyclePhase = 0; }\r\n        _super.call(this, \"ParticleScale\", mode, (usesCycle && usesPhase) ? 4 : ((usesCycle || usesPhase) ? 3 : 2), 3);\r\n        this._pStateClass = ParticleScaleState_1.ParticleScaleState;\r\n        this._iUsesCycle = usesCycle;\r\n        this._iUsesPhase = usesPhase;\r\n        this._iMinScale = minScale;\r\n        this._iMaxScale = maxScale;\r\n        this._iCycleDuration = cycleDuration;\r\n        this._iCyclePhase = cyclePhase;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleScaleNode.prototype.getAGALVertexCode = function (shader, animationSet, registerCache, animationRegisterData) {\r\n        var code = \"\";\r\n        var temp = registerCache.getFreeVertexSingleTemp();\r\n        var scaleRegister = (this._pMode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) ? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\r\n        animationRegisterData.setRegisterIndex(this, ParticleScaleState_1.ParticleScaleState.SCALE_INDEX, scaleRegister.index);\r\n        if (this._iUsesCycle) {\r\n            code += \"mul \" + temp + \",\" + animationRegisterData.vertexTime + \",\" + scaleRegister + \".z\\n\";\r\n            if (this._iUsesPhase)\r\n                code += \"add \" + temp + \",\" + temp + \",\" + scaleRegister + \".w\\n\";\r\n            code += \"sin \" + temp + \",\" + temp + \"\\n\";\r\n        }\r\n        code += \"mul \" + temp + \",\" + scaleRegister + \".y,\" + ((this._iUsesCycle) ? temp : animationRegisterData.vertexLife) + \"\\n\";\r\n        code += \"add \" + temp + \",\" + scaleRegister + \".x,\" + temp + \"\\n\";\r\n        code += \"mul \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp + \"\\n\";\r\n        return code;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleScaleNode.prototype.getAnimationState = function (animator) {\r\n        return animator.getAnimationState(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleScaleNode.prototype._iGeneratePropertyOfOneParticle = function (param) {\r\n        var scale = param[ParticleScaleNode.SCALE_VECTOR3D];\r\n        if (!scale)\r\n            throw (new Error(\"there is no \" + ParticleScaleNode.SCALE_VECTOR3D + \" in param!\"));\r\n        if (this._iUsesCycle) {\r\n            this._pOneData[0] = (scale.x + scale.y) / 2;\r\n            this._pOneData[1] = Math.abs(scale.x - scale.y) / 2;\r\n            if (scale.z <= 0)\r\n                throw (new Error(\"the cycle duration must be greater than zero\"));\r\n            this._pOneData[2] = Math.PI * 2 / scale.z;\r\n            if (this._iUsesPhase)\r\n                this._pOneData[3] = scale.w * Math.PI / 180;\r\n        }\r\n        else {\r\n            this._pOneData[0] = scale.x;\r\n            this._pOneData[1] = scale.y - scale.x;\r\n        }\r\n    };\r\n    /**\r\n     * Reference for scale node properties on a single particle (when in local property mode).\r\n     * Expects a <code>Vector3D</code> representing the min scale (x), max scale(y), optional cycle speed (z) and phase offset (w) applied to the particle.\r\n     */\r\n    ParticleScaleNode.SCALE_VECTOR3D = \"ScaleVector3D\";\r\n    return ParticleScaleNode;\r\n}(ParticleNodeBase_1.ParticleNodeBase));\r\nexports.ParticleScaleNode = ParticleScaleNode;\r\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticleScaleState\":\"awayjs-renderergl/lib/animators/states/ParticleScaleState\"}],\"awayjs-renderergl/lib/animators/nodes/ParticleSegmentedColorNode\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar ParticleAnimationSet_1 = require(\"../../animators/ParticleAnimationSet\");\r\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\r\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\r\nvar ParticleSegmentedColorState_1 = require(\"../../animators/states/ParticleSegmentedColorState\");\r\nvar ShaderRegisterElement_1 = require(\"../../shaders/ShaderRegisterElement\");\r\n/**\r\n *\r\n */\r\nvar ParticleSegmentedColorNode = (function (_super) {\r\n    __extends(ParticleSegmentedColorNode, _super);\r\n    function ParticleSegmentedColorNode(usesMultiplier, usesOffset, numSegmentPoint, startColor, endColor, segmentPoints) {\r\n        //because of the stage3d register limitation, it only support the global mode\r\n        _super.call(this, \"ParticleSegmentedColor\", ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL, 0, ParticleAnimationSet_1.ParticleAnimationSet.COLOR_PRIORITY);\r\n        this._pStateClass = ParticleSegmentedColorState_1.ParticleSegmentedColorState;\r\n        if (numSegmentPoint > 4)\r\n            throw (new Error(\"the numSegmentPoint must be less or equal 4\"));\r\n        this._iUsesMultiplier = usesMultiplier;\r\n        this._iUsesOffset = usesOffset;\r\n        this._iNumSegmentPoint = numSegmentPoint;\r\n        this._iStartColor = startColor;\r\n        this._iEndColor = endColor;\r\n        this._iSegmentPoints = segmentPoints;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleSegmentedColorNode.prototype._iProcessAnimationSetting = function (particleAnimationSet) {\r\n        if (this._iUsesMultiplier)\r\n            particleAnimationSet.hasColorMulNode = true;\r\n        if (this._iUsesOffset)\r\n            particleAnimationSet.hasColorAddNode = true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleSegmentedColorNode.prototype.getAGALVertexCode = function (shader, animationSet, registerCache, animationRegisterData) {\r\n        var code = \"\";\r\n        if (shader.usesFragmentAnimation) {\r\n            var accMultiplierColor;\r\n            //var accOffsetColor:ShaderRegisterElement;\r\n            if (this._iUsesMultiplier) {\r\n                accMultiplierColor = registerCache.getFreeVertexVectorTemp();\r\n                registerCache.addVertexTempUsages(accMultiplierColor, 1);\r\n            }\r\n            var tempColor = registerCache.getFreeVertexVectorTemp();\r\n            registerCache.addVertexTempUsages(tempColor, 1);\r\n            var temp = registerCache.getFreeVertexVectorTemp();\r\n            var accTime = new ShaderRegisterElement_1.ShaderRegisterElement(temp.regName, temp.index, 0);\r\n            var tempTime = new ShaderRegisterElement_1.ShaderRegisterElement(temp.regName, temp.index, 1);\r\n            if (this._iUsesMultiplier)\r\n                registerCache.removeVertexTempUsage(accMultiplierColor);\r\n            registerCache.removeVertexTempUsage(tempColor);\r\n            //for saving all the life values (at most 4)\r\n            var lifeTimeRegister = registerCache.getFreeVertexConstant();\r\n            animationRegisterData.setRegisterIndex(this, ParticleSegmentedColorState_1.ParticleSegmentedColorState.TIME_DATA_INDEX, lifeTimeRegister.index);\r\n            var i;\r\n            var startMulValue;\r\n            var deltaMulValues;\r\n            if (this._iUsesMultiplier) {\r\n                startMulValue = registerCache.getFreeVertexConstant();\r\n                animationRegisterData.setRegisterIndex(this, ParticleSegmentedColorState_1.ParticleSegmentedColorState.START_MULTIPLIER_INDEX, startMulValue.index);\r\n                deltaMulValues = new Array();\r\n                for (i = 0; i < this._iNumSegmentPoint + 1; i++)\r\n                    deltaMulValues.push(registerCache.getFreeVertexConstant());\r\n            }\r\n            var startOffsetValue;\r\n            var deltaOffsetValues;\r\n            if (this._iUsesOffset) {\r\n                startOffsetValue = registerCache.getFreeVertexConstant();\r\n                animationRegisterData.setRegisterIndex(this, ParticleSegmentedColorState_1.ParticleSegmentedColorState.START_OFFSET_INDEX, startOffsetValue.index);\r\n                deltaOffsetValues = new Array();\r\n                for (i = 0; i < this._iNumSegmentPoint + 1; i++)\r\n                    deltaOffsetValues.push(registerCache.getFreeVertexConstant());\r\n            }\r\n            if (this._iUsesMultiplier)\r\n                code += \"mov \" + accMultiplierColor + \",\" + startMulValue + \"\\n\";\r\n            if (this._iUsesOffset)\r\n                code += \"add \" + animationRegisterData.colorAddTarget + \",\" + animationRegisterData.colorAddTarget + \",\" + startOffsetValue + \"\\n\";\r\n            for (i = 0; i < this._iNumSegmentPoint; i++) {\r\n                switch (i) {\r\n                    case 0:\r\n                        code += \"min \" + tempTime + \",\" + animationRegisterData.vertexLife + \",\" + lifeTimeRegister + \".x\\n\";\r\n                        break;\r\n                    case 1:\r\n                        code += \"sub \" + accTime + \",\" + animationRegisterData.vertexLife + \",\" + lifeTimeRegister + \".x\\n\";\r\n                        code += \"max \" + tempTime + \",\" + accTime + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n                        code += \"min \" + tempTime + \",\" + tempTime + \",\" + lifeTimeRegister + \".y\\n\";\r\n                        break;\r\n                    case 2:\r\n                        code += \"sub \" + accTime + \",\" + accTime + \",\" + lifeTimeRegister + \".y\\n\";\r\n                        code += \"max \" + tempTime + \",\" + accTime + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n                        code += \"min \" + tempTime + \",\" + tempTime + \",\" + lifeTimeRegister + \".z\\n\";\r\n                        break;\r\n                    case 3:\r\n                        code += \"sub \" + accTime + \",\" + accTime + \",\" + lifeTimeRegister + \".z\\n\";\r\n                        code += \"max \" + tempTime + \",\" + accTime + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n                        code += \"min \" + tempTime + \",\" + tempTime + \",\" + lifeTimeRegister + \".w\\n\";\r\n                        break;\r\n                }\r\n                if (this._iUsesMultiplier) {\r\n                    code += \"mul \" + tempColor + \",\" + tempTime + \",\" + deltaMulValues[i] + \"\\n\";\r\n                    code += \"add \" + accMultiplierColor + \",\" + accMultiplierColor + \",\" + tempColor + \"\\n\";\r\n                }\r\n                if (this._iUsesOffset) {\r\n                    code += \"mul \" + tempColor + \",\" + tempTime + \",\" + deltaOffsetValues[i] + \"\\n\";\r\n                    code += \"add \" + animationRegisterData.colorAddTarget + \",\" + animationRegisterData.colorAddTarget + \",\" + tempColor + \"\\n\";\r\n                }\r\n            }\r\n            //for the last segment:\r\n            if (this._iNumSegmentPoint == 0)\r\n                tempTime = animationRegisterData.vertexLife;\r\n            else {\r\n                switch (this._iNumSegmentPoint) {\r\n                    case 1:\r\n                        code += \"sub \" + accTime + \",\" + animationRegisterData.vertexLife + \",\" + lifeTimeRegister + \".x\\n\";\r\n                        break;\r\n                    case 2:\r\n                        code += \"sub \" + accTime + \",\" + accTime + \",\" + lifeTimeRegister + \".y\\n\";\r\n                        break;\r\n                    case 3:\r\n                        code += \"sub \" + accTime + \",\" + accTime + \",\" + lifeTimeRegister + \".z\\n\";\r\n                        break;\r\n                    case 4:\r\n                        code += \"sub \" + accTime + \",\" + accTime + \",\" + lifeTimeRegister + \".w\\n\";\r\n                        break;\r\n                }\r\n                code += \"max \" + tempTime + \",\" + accTime + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n            }\r\n            if (this._iUsesMultiplier) {\r\n                code += \"mul \" + tempColor + \",\" + tempTime + \",\" + deltaMulValues[this._iNumSegmentPoint] + \"\\n\";\r\n                code += \"add \" + accMultiplierColor + \",\" + accMultiplierColor + \",\" + tempColor + \"\\n\";\r\n                code += \"mul \" + animationRegisterData.colorMulTarget + \",\" + animationRegisterData.colorMulTarget + \",\" + accMultiplierColor + \"\\n\";\r\n            }\r\n            if (this._iUsesOffset) {\r\n                code += \"mul \" + tempColor + \",\" + tempTime + \",\" + deltaOffsetValues[this._iNumSegmentPoint] + \"\\n\";\r\n                code += \"add \" + animationRegisterData.colorAddTarget + \",\" + animationRegisterData.colorAddTarget + \",\" + tempColor + \"\\n\";\r\n            }\r\n        }\r\n        return code;\r\n    };\r\n    return ParticleSegmentedColorNode;\r\n}(ParticleNodeBase_1.ParticleNodeBase));\r\nexports.ParticleSegmentedColorNode = ParticleSegmentedColorNode;\r\n},{\"../../animators/ParticleAnimationSet\":\"awayjs-renderergl/lib/animators/ParticleAnimationSet\",\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticleSegmentedColorState\":\"awayjs-renderergl/lib/animators/states/ParticleSegmentedColorState\",\"../../shaders/ShaderRegisterElement\":\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\"}],\"awayjs-renderergl/lib/animators/nodes/ParticleSpriteSheetNode\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar ParticleAnimationSet_1 = require(\"../../animators/ParticleAnimationSet\");\r\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\r\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\r\nvar ParticleSpriteSheetState_1 = require(\"../../animators/states/ParticleSpriteSheetState\");\r\nvar ShaderRegisterElement_1 = require(\"../../shaders/ShaderRegisterElement\");\r\n/**\r\n * A particle animation node used when a spritesheet texture is required to animate the particle.\r\n * NB: to enable use of this node, the <code>repeat</code> property on the material has to be set to true.\r\n */\r\nvar ParticleSpriteSheetNode = (function (_super) {\r\n    __extends(ParticleSpriteSheetNode, _super);\r\n    /**\r\n     * Creates a new <code>ParticleSpriteSheetNode</code>\r\n     *\r\n     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\r\n     * @param    [optional] numColumns      Defines the number of columns in the spritesheet, when in global mode. Defaults to 1.\r\n     * @param    [optional] numRows         Defines the number of rows in the spritesheet, when in global mode. Defaults to 1.\r\n     * @param    [optional] cycleDuration   Defines the default cycle duration in seconds, when in global mode. Defaults to 1.\r\n     * @param    [optional] cyclePhase      Defines the default cycle phase, when in global mode. Defaults to 0.\r\n     * @param    [optional] totalFrames     Defines the total number of frames used by the spritesheet, when in global mode. Defaults to the number defined by numColumns and numRows.\r\n     * @param    [optional] looping         Defines whether the spritesheet animation is set to loop indefinitely. Defaults to true.\r\n     */\r\n    function ParticleSpriteSheetNode(mode, usesCycle, usesPhase, numColumns, numRows, cycleDuration, cyclePhase, totalFrames) {\r\n        if (numColumns === void 0) { numColumns = 1; }\r\n        if (numRows === void 0) { numRows = 1; }\r\n        if (cycleDuration === void 0) { cycleDuration = 1; }\r\n        if (cyclePhase === void 0) { cyclePhase = 0; }\r\n        if (totalFrames === void 0) { totalFrames = Number.MAX_VALUE; }\r\n        _super.call(this, \"ParticleSpriteSheet\", mode, usesCycle ? (usesPhase ? 3 : 2) : 1, ParticleAnimationSet_1.ParticleAnimationSet.POST_PRIORITY + 1);\r\n        this._pStateClass = ParticleSpriteSheetState_1.ParticleSpriteSheetState;\r\n        this._iUsesCycle = usesCycle;\r\n        this._iUsesPhase = usesPhase;\r\n        this._iNumColumns = numColumns;\r\n        this._iNumRows = numRows;\r\n        this._iCyclePhase = cyclePhase;\r\n        this._iCycleDuration = cycleDuration;\r\n        this._iTotalFrames = Math.min(totalFrames, numColumns * numRows);\r\n    }\r\n    Object.defineProperty(ParticleSpriteSheetNode.prototype, \"numColumns\", {\r\n        /**\r\n         * Defines the number of columns in the spritesheet, when in global mode. Defaults to 1. Read only.\r\n         */\r\n        get: function () {\r\n            return this._iNumColumns;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ParticleSpriteSheetNode.prototype, \"numRows\", {\r\n        /**\r\n         * Defines the number of rows in the spritesheet, when in global mode. Defaults to 1. Read only.\r\n         */\r\n        get: function () {\r\n            return this._iNumRows;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ParticleSpriteSheetNode.prototype, \"totalFrames\", {\r\n        /**\r\n         * Defines the total number of frames used by the spritesheet, when in global mode. Defaults to the number defined by numColumns and numRows. Read only.\r\n         */\r\n        get: function () {\r\n            return this._iTotalFrames;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleSpriteSheetNode.prototype.getAGALUVCode = function (shader, animationSet, registerCache, animationRegisterData) {\r\n        //get 2 vc\r\n        var uvParamConst1 = registerCache.getFreeVertexConstant();\r\n        var uvParamConst2 = (this._pMode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) ? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\r\n        animationRegisterData.setRegisterIndex(this, ParticleSpriteSheetState_1.ParticleSpriteSheetState.UV_INDEX_0, uvParamConst1.index);\r\n        animationRegisterData.setRegisterIndex(this, ParticleSpriteSheetState_1.ParticleSpriteSheetState.UV_INDEX_1, uvParamConst2.index);\r\n        var uTotal = new ShaderRegisterElement_1.ShaderRegisterElement(uvParamConst1.regName, uvParamConst1.index, 0);\r\n        var uStep = new ShaderRegisterElement_1.ShaderRegisterElement(uvParamConst1.regName, uvParamConst1.index, 1);\r\n        var vStep = new ShaderRegisterElement_1.ShaderRegisterElement(uvParamConst1.regName, uvParamConst1.index, 2);\r\n        var uSpeed = new ShaderRegisterElement_1.ShaderRegisterElement(uvParamConst2.regName, uvParamConst2.index, 0);\r\n        var cycle = new ShaderRegisterElement_1.ShaderRegisterElement(uvParamConst2.regName, uvParamConst2.index, 1);\r\n        var phaseTime = new ShaderRegisterElement_1.ShaderRegisterElement(uvParamConst2.regName, uvParamConst2.index, 2);\r\n        var temp = registerCache.getFreeVertexVectorTemp();\r\n        var time = new ShaderRegisterElement_1.ShaderRegisterElement(temp.regName, temp.index, 0);\r\n        var vOffset = new ShaderRegisterElement_1.ShaderRegisterElement(temp.regName, temp.index, 1);\r\n        temp = new ShaderRegisterElement_1.ShaderRegisterElement(temp.regName, temp.index, 2);\r\n        var temp2 = new ShaderRegisterElement_1.ShaderRegisterElement(temp.regName, temp.index, 3);\r\n        var u = new ShaderRegisterElement_1.ShaderRegisterElement(animationRegisterData.uvTarget.regName, animationRegisterData.uvTarget.index, 0);\r\n        var v = new ShaderRegisterElement_1.ShaderRegisterElement(animationRegisterData.uvTarget.regName, animationRegisterData.uvTarget.index, 1);\r\n        var code = \"\";\r\n        //scale uv\r\n        code += \"mul \" + u + \",\" + u + \",\" + uStep + \"\\n\";\r\n        if (this._iNumRows > 1)\r\n            code += \"mul \" + v + \",\" + v + \",\" + vStep + \"\\n\";\r\n        if (this._iUsesCycle) {\r\n            if (this._iUsesPhase)\r\n                code += \"add \" + time + \",\" + animationRegisterData.vertexTime + \",\" + phaseTime + \"\\n\";\r\n            else\r\n                code += \"mov \" + time + \",\" + animationRegisterData.vertexTime + \"\\n\";\r\n            code += \"div \" + time + \",\" + time + \",\" + cycle + \"\\n\";\r\n            code += \"frc \" + time + \",\" + time + \"\\n\";\r\n            code += \"mul \" + time + \",\" + time + \",\" + cycle + \"\\n\";\r\n            code += \"mul \" + temp + \",\" + time + \",\" + uSpeed + \"\\n\";\r\n        }\r\n        else\r\n            code += \"mul \" + temp.toString() + \",\" + animationRegisterData.vertexLife + \",\" + uTotal + \"\\n\";\r\n        if (this._iNumRows > 1) {\r\n            code += \"frc \" + temp2 + \",\" + temp + \"\\n\";\r\n            code += \"sub \" + vOffset + \",\" + temp + \",\" + temp2 + \"\\n\";\r\n            code += \"mul \" + vOffset + \",\" + vOffset + \",\" + vStep + \"\\n\";\r\n            code += \"add \" + v + \",\" + v + \",\" + vOffset + \"\\n\";\r\n        }\r\n        code += \"div \" + temp2 + \",\" + temp + \",\" + uStep + \"\\n\";\r\n        code += \"frc \" + temp + \",\" + temp2 + \"\\n\";\r\n        code += \"sub \" + temp2 + \",\" + temp2 + \",\" + temp + \"\\n\";\r\n        code += \"mul \" + temp + \",\" + temp2 + \",\" + uStep + \"\\n\";\r\n        if (this._iNumRows > 1)\r\n            code += \"frc \" + temp + \",\" + temp + \"\\n\";\r\n        code += \"add \" + u + \",\" + u + \",\" + temp + \"\\n\";\r\n        return code;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleSpriteSheetNode.prototype.getAnimationState = function (animator) {\r\n        return animator.getAnimationState(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleSpriteSheetNode.prototype._iProcessAnimationSetting = function (particleAnimationSet) {\r\n        particleAnimationSet.hasUVNode = true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleSpriteSheetNode.prototype._iGeneratePropertyOfOneParticle = function (param) {\r\n        if (this._iUsesCycle) {\r\n            var uvCycle = param[ParticleSpriteSheetNode.UV_VECTOR3D];\r\n            if (!uvCycle)\r\n                throw (new Error(\"there is no \" + ParticleSpriteSheetNode.UV_VECTOR3D + \" in param!\"));\r\n            if (uvCycle.x <= 0)\r\n                throw (new Error(\"the cycle duration must be greater than zero\"));\r\n            var uTotal = this._iTotalFrames / this._iNumColumns;\r\n            this._pOneData[0] = uTotal / uvCycle.x;\r\n            this._pOneData[1] = uvCycle.x;\r\n            if (this._iUsesPhase)\r\n                this._pOneData[2] = uvCycle.y;\r\n        }\r\n    };\r\n    /**\r\n     * Reference for spritesheet node properties on a single particle (when in local property mode).\r\n     * Expects a <code>Vector3D</code> representing the cycleDuration (x), optional phaseTime (y).\r\n     */\r\n    ParticleSpriteSheetNode.UV_VECTOR3D = \"UVVector3D\";\r\n    return ParticleSpriteSheetNode;\r\n}(ParticleNodeBase_1.ParticleNodeBase));\r\nexports.ParticleSpriteSheetNode = ParticleSpriteSheetNode;\r\n},{\"../../animators/ParticleAnimationSet\":\"awayjs-renderergl/lib/animators/ParticleAnimationSet\",\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticleSpriteSheetState\":\"awayjs-renderergl/lib/animators/states/ParticleSpriteSheetState\",\"../../shaders/ShaderRegisterElement\":\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\"}],\"awayjs-renderergl/lib/animators/nodes/ParticleTimeNode\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\r\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\r\nvar ParticleTimeState_1 = require(\"../../animators/states/ParticleTimeState\");\r\n/**\r\n * A particle animation node used as the base node for timekeeping inside a particle. Automatically added to a particle animation set on instatiation.\r\n */\r\nvar ParticleTimeNode = (function (_super) {\r\n    __extends(ParticleTimeNode, _super);\r\n    /**\r\n     * Creates a new <code>ParticleTimeNode</code>\r\n     *\r\n     * @param    [optional] usesDuration    Defines whether the node uses the <code>duration</code> data in the static properties to determine how long a particle is visible for. Defaults to false.\r\n     * @param    [optional] usesDelay       Defines whether the node uses the <code>delay</code> data in the static properties to determine how long a particle is hidden for. Defaults to false. Requires <code>usesDuration</code> to be true.\r\n     * @param    [optional] usesLooping     Defines whether the node creates a looping timeframe for each particle determined by the <code>startTime</code>, <code>duration</code> and <code>delay</code> data in the static properties function. Defaults to false. Requires <code>usesLooping</code> to be true.\r\n     */\r\n    function ParticleTimeNode(usesDuration, usesLooping, usesDelay) {\r\n        if (usesDuration === void 0) { usesDuration = false; }\r\n        if (usesLooping === void 0) { usesLooping = false; }\r\n        if (usesDelay === void 0) { usesDelay = false; }\r\n        _super.call(this, \"ParticleTime\", ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_STATIC, 4, 0);\r\n        this._pStateClass = ParticleTimeState_1.ParticleTimeState;\r\n        this._iUsesDuration = usesDuration;\r\n        this._iUsesLooping = usesLooping;\r\n        this._iUsesDelay = usesDelay;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleTimeNode.prototype.getAGALVertexCode = function (shader, animationSet, registerCache, animationRegisterData) {\r\n        var timeStreamRegister = registerCache.getFreeVertexAttribute(); //timeStreamRegister.x is start，timeStreamRegister.y is during time\r\n        animationRegisterData.setRegisterIndex(this, ParticleTimeState_1.ParticleTimeState.TIME_STREAM_INDEX, timeStreamRegister.index);\r\n        var timeConst = registerCache.getFreeVertexConstant();\r\n        animationRegisterData.setRegisterIndex(this, ParticleTimeState_1.ParticleTimeState.TIME_CONSTANT_INDEX, timeConst.index);\r\n        var code = \"\";\r\n        code += \"sub \" + animationRegisterData.vertexTime + \",\" + timeConst + \",\" + timeStreamRegister + \".x\\n\";\r\n        //if time=0,set the position to zero.\r\n        var temp = registerCache.getFreeVertexSingleTemp();\r\n        code += \"sge \" + temp + \",\" + animationRegisterData.vertexTime + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n        code += \"mul \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp + \"\\n\";\r\n        if (this._iUsesDuration) {\r\n            if (this._iUsesLooping) {\r\n                var div = registerCache.getFreeVertexSingleTemp();\r\n                if (this._iUsesDelay) {\r\n                    code += \"div \" + div + \",\" + animationRegisterData.vertexTime + \",\" + timeStreamRegister + \".z\\n\";\r\n                    code += \"frc \" + div + \",\" + div + \"\\n\";\r\n                    code += \"mul \" + animationRegisterData.vertexTime + \",\" + div + \",\" + timeStreamRegister + \".z\\n\";\r\n                    code += \"slt \" + div + \",\" + animationRegisterData.vertexTime + \",\" + timeStreamRegister + \".y\\n\";\r\n                    code += \"mul \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + div + \"\\n\";\r\n                }\r\n                else {\r\n                    code += \"mul \" + div + \",\" + animationRegisterData.vertexTime + \",\" + timeStreamRegister + \".w\\n\";\r\n                    code += \"frc \" + div + \",\" + div + \"\\n\";\r\n                    code += \"mul \" + animationRegisterData.vertexTime + \",\" + div + \",\" + timeStreamRegister + \".y\\n\";\r\n                }\r\n            }\r\n            else {\r\n                var sge = registerCache.getFreeVertexSingleTemp();\r\n                code += \"sge \" + sge + \",\" + timeStreamRegister + \".y,\" + animationRegisterData.vertexTime + \"\\n\";\r\n                code += \"mul \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + sge + \"\\n\";\r\n            }\r\n        }\r\n        code += \"mul \" + animationRegisterData.vertexLife + \",\" + animationRegisterData.vertexTime + \",\" + timeStreamRegister + \".w\\n\";\r\n        return code;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleTimeNode.prototype.getAnimationState = function (animator) {\r\n        return animator.getAnimationState(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleTimeNode.prototype._iGeneratePropertyOfOneParticle = function (param) {\r\n        this._pOneData[0] = param.startTime;\r\n        this._pOneData[1] = param.duration;\r\n        this._pOneData[2] = param.delay + param.duration;\r\n        this._pOneData[3] = 1 / param.duration;\r\n    };\r\n    return ParticleTimeNode;\r\n}(ParticleNodeBase_1.ParticleNodeBase));\r\nexports.ParticleTimeNode = ParticleTimeNode;\r\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticleTimeState\":\"awayjs-renderergl/lib/animators/states/ParticleTimeState\"}],\"awayjs-renderergl/lib/animators/nodes/ParticleUVNode\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\r\nvar ParticleAnimationSet_1 = require(\"../../animators/ParticleAnimationSet\");\r\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\r\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\r\nvar ParticleUVState_1 = require(\"../../animators/states/ParticleUVState\");\r\nvar ShaderRegisterElement_1 = require(\"../../shaders/ShaderRegisterElement\");\r\n/**\r\n * A particle animation node used to control the UV offset and scale of a particle over time.\r\n */\r\nvar ParticleUVNode = (function (_super) {\r\n    __extends(ParticleUVNode, _super);\r\n    /**\r\n     * Creates a new <code>ParticleTimeNode</code>\r\n     *\r\n     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\r\n     * @param    [optional] cycle           Defines whether the time track is in loop mode. Defaults to false.\r\n     * @param    [optional] scale           Defines whether the time track is in loop mode. Defaults to false.\r\n     * @param    [optional] axis            Defines whether the time track is in loop mode. Defaults to false.\r\n     */\r\n    function ParticleUVNode(mode, cycle, scale, axis) {\r\n        if (cycle === void 0) { cycle = 1; }\r\n        if (scale === void 0) { scale = 1; }\r\n        if (axis === void 0) { axis = \"x\"; }\r\n        //because of the stage3d register limitation, it only support the global mode\r\n        _super.call(this, \"ParticleUV\", ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL, 4, ParticleAnimationSet_1.ParticleAnimationSet.POST_PRIORITY + 1);\r\n        this._pStateClass = ParticleUVState_1.ParticleUVState;\r\n        this._cycle = cycle;\r\n        this._scale = scale;\r\n        this._axis = axis;\r\n        this.updateUVData();\r\n    }\r\n    Object.defineProperty(ParticleUVNode.prototype, \"cycle\", {\r\n        /**\r\n         *\r\n         */\r\n        get: function () {\r\n            return this._cycle;\r\n        },\r\n        set: function (value) {\r\n            this._cycle = value;\r\n            this.updateUVData();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ParticleUVNode.prototype, \"scale\", {\r\n        /**\r\n         *\r\n         */\r\n        get: function () {\r\n            return this._scale;\r\n        },\r\n        set: function (value) {\r\n            this._scale = value;\r\n            this.updateUVData();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ParticleUVNode.prototype, \"axis\", {\r\n        /**\r\n         *\r\n         */\r\n        get: function () {\r\n            return this._axis;\r\n        },\r\n        set: function (value) {\r\n            this._axis = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleUVNode.prototype.getAGALUVCode = function (shader, animationSet, registerCache, animationRegisterData) {\r\n        var code = \"\";\r\n        var uvConst = registerCache.getFreeVertexConstant();\r\n        animationRegisterData.setRegisterIndex(this, ParticleUVState_1.ParticleUVState.UV_INDEX, uvConst.index);\r\n        var axisIndex = this._axis == \"x\" ? 0 : (this._axis == \"y\" ? 1 : 2);\r\n        var target = new ShaderRegisterElement_1.ShaderRegisterElement(animationRegisterData.uvTarget.regName, animationRegisterData.uvTarget.index, axisIndex);\r\n        var sin = registerCache.getFreeVertexSingleTemp();\r\n        if (this._scale != 1)\r\n            code += \"mul \" + target + \",\" + target + \",\" + uvConst + \".y\\n\";\r\n        code += \"mul \" + sin + \",\" + animationRegisterData.vertexTime + \",\" + uvConst + \".x\\n\";\r\n        code += \"sin \" + sin + \",\" + sin + \"\\n\";\r\n        code += \"add \" + target + \",\" + target + \",\" + sin + \"\\n\";\r\n        return code;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleUVNode.prototype.getAnimationState = function (animator) {\r\n        return animator.getAnimationState(this);\r\n    };\r\n    ParticleUVNode.prototype.updateUVData = function () {\r\n        this._iUvData = new Vector3D_1.Vector3D(Math.PI * 2 / this._cycle, this._scale, 0, 0);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleUVNode.prototype._iProcessAnimationSetting = function (particleAnimationSet) {\r\n        particleAnimationSet.hasUVNode = true;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    ParticleUVNode.U_AXIS = \"x\";\r\n    /**\r\n     *\r\n     */\r\n    ParticleUVNode.V_AXIS = \"y\";\r\n    return ParticleUVNode;\r\n}(ParticleNodeBase_1.ParticleNodeBase));\r\nexports.ParticleUVNode = ParticleUVNode;\r\n},{\"../../animators/ParticleAnimationSet\":\"awayjs-renderergl/lib/animators/ParticleAnimationSet\",\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticleUVState\":\"awayjs-renderergl/lib/animators/states/ParticleUVState\",\"../../shaders/ShaderRegisterElement\":\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\",\"awayjs-core/lib/geom/Vector3D\":undefined}],\"awayjs-renderergl/lib/animators/nodes/ParticleVelocityNode\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\r\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\r\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\r\nvar ParticleVelocityState_1 = require(\"../../animators/states/ParticleVelocityState\");\r\n/**\r\n * A particle animation node used to set the starting velocity of a particle.\r\n */\r\nvar ParticleVelocityNode = (function (_super) {\r\n    __extends(ParticleVelocityNode, _super);\r\n    /**\r\n     * Creates a new <code>ParticleVelocityNode</code>\r\n     *\r\n     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\r\n     * @param    [optional] velocity        Defines the default velocity vector of the node, used when in global mode.\r\n     */\r\n    function ParticleVelocityNode(mode, velocity) {\r\n        if (velocity === void 0) { velocity = null; }\r\n        _super.call(this, \"ParticleVelocity\", mode, 3);\r\n        this._pStateClass = ParticleVelocityState_1.ParticleVelocityState;\r\n        this._iVelocity = velocity || new Vector3D_1.Vector3D();\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleVelocityNode.prototype.getAGALVertexCode = function (shader, animationSet, registerCache, animationRegisterData) {\r\n        var velocityValue = (this._pMode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) ? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\r\n        animationRegisterData.setRegisterIndex(this, ParticleVelocityState_1.ParticleVelocityState.VELOCITY_INDEX, velocityValue.index);\r\n        var distance = registerCache.getFreeVertexVectorTemp();\r\n        var code = \"\";\r\n        code += \"mul \" + distance + \",\" + animationRegisterData.vertexTime + \",\" + velocityValue + \"\\n\";\r\n        code += \"add \" + animationRegisterData.positionTarget + \".xyz,\" + distance + \",\" + animationRegisterData.positionTarget + \".xyz\\n\";\r\n        if (animationSet.needVelocity)\r\n            code += \"add \" + animationRegisterData.velocityTarget + \".xyz,\" + velocityValue + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz\\n\";\r\n        return code;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleVelocityNode.prototype.getAnimationState = function (animator) {\r\n        return animator.getAnimationState(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleVelocityNode.prototype._iGeneratePropertyOfOneParticle = function (param) {\r\n        var _tempVelocity = param[ParticleVelocityNode.VELOCITY_VECTOR3D];\r\n        if (!_tempVelocity)\r\n            throw new Error(\"there is no \" + ParticleVelocityNode.VELOCITY_VECTOR3D + \" in param!\");\r\n        this._pOneData[0] = _tempVelocity.x;\r\n        this._pOneData[1] = _tempVelocity.y;\r\n        this._pOneData[2] = _tempVelocity.z;\r\n    };\r\n    /**\r\n     * Reference for velocity node properties on a single particle (when in local property mode).\r\n     * Expects a <code>Vector3D</code> object representing the direction of movement on the particle.\r\n     */\r\n    ParticleVelocityNode.VELOCITY_VECTOR3D = \"VelocityVector3D\";\r\n    return ParticleVelocityNode;\r\n}(ParticleNodeBase_1.ParticleNodeBase));\r\nexports.ParticleVelocityNode = ParticleVelocityNode;\r\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticleVelocityState\":\"awayjs-renderergl/lib/animators/states/ParticleVelocityState\",\"awayjs-core/lib/geom/Vector3D\":undefined}],\"awayjs-renderergl/lib/animators/nodes/SkeletonBinaryLERPNode\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar AnimationNodeBase_1 = require(\"awayjs-display/lib/animators/nodes/AnimationNodeBase\");\r\nvar SkeletonBinaryLERPState_1 = require(\"../../animators/states/SkeletonBinaryLERPState\");\r\n/**\r\n * A skeleton animation node that uses two animation node inputs to blend a lineraly interpolated output of a skeleton pose.\r\n */\r\nvar SkeletonBinaryLERPNode = (function (_super) {\r\n    __extends(SkeletonBinaryLERPNode, _super);\r\n    /**\r\n     * Creates a new <code>SkeletonBinaryLERPNode</code> object.\r\n     */\r\n    function SkeletonBinaryLERPNode() {\r\n        _super.call(this);\r\n        this._pStateClass = SkeletonBinaryLERPState_1.SkeletonBinaryLERPState;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    SkeletonBinaryLERPNode.prototype.getAnimationState = function (animator) {\r\n        return animator.getAnimationState(this);\r\n    };\r\n    return SkeletonBinaryLERPNode;\r\n}(AnimationNodeBase_1.AnimationNodeBase));\r\nexports.SkeletonBinaryLERPNode = SkeletonBinaryLERPNode;\r\n},{\"../../animators/states/SkeletonBinaryLERPState\":\"awayjs-renderergl/lib/animators/states/SkeletonBinaryLERPState\",\"awayjs-display/lib/animators/nodes/AnimationNodeBase\":undefined}],\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar AnimationClipNodeBase_1 = require(\"../../animators/nodes/AnimationClipNodeBase\");\r\nvar SkeletonClipState_1 = require(\"../../animators/states/SkeletonClipState\");\r\n/**\r\n * A skeleton animation node containing time-based animation data as individual skeleton poses.\r\n */\r\nvar SkeletonClipNode = (function (_super) {\r\n    __extends(SkeletonClipNode, _super);\r\n    /**\r\n     * Creates a new <code>SkeletonClipNode</code> object.\r\n     */\r\n    function SkeletonClipNode() {\r\n        _super.call(this);\r\n        this._frames = new Array();\r\n        /**\r\n         * Determines whether to use SLERP equations (true) or LERP equations (false) in the calculation\r\n         * of the output skeleton pose. Defaults to false.\r\n         */\r\n        this.highQuality = false;\r\n        this._pStateClass = SkeletonClipState_1.SkeletonClipState;\r\n    }\r\n    Object.defineProperty(SkeletonClipNode.prototype, \"frames\", {\r\n        /**\r\n         * Returns a vector of skeleton poses representing the pose of each animation frame in the clip.\r\n         */\r\n        get: function () {\r\n            return this._frames;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Adds a skeleton pose frame to the internal timeline of the animation node.\r\n     *\r\n     * @param skeletonPose The skeleton pose object to add to the timeline of the node.\r\n     * @param duration The specified duration of the frame in milliseconds.\r\n     */\r\n    SkeletonClipNode.prototype.addFrame = function (skeletonPose, duration) {\r\n        this._frames.push(skeletonPose);\r\n        this._pDurations.push(duration);\r\n        this._pNumFrames = this._pDurations.length;\r\n        this._pStitchDirty = true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    SkeletonClipNode.prototype.getAnimationState = function (animator) {\r\n        return animator.getAnimationState(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    SkeletonClipNode.prototype._pUpdateStitch = function () {\r\n        _super.prototype._pUpdateStitch.call(this);\r\n        var i = this._pNumFrames - 1;\r\n        var p1, p2, delta;\r\n        while (i--) {\r\n            this._pTotalDuration += this._pDurations[i];\r\n            p1 = this._frames[i].jointPoses[0].translation;\r\n            p2 = this._frames[i + 1].jointPoses[0].translation;\r\n            delta = p2.subtract(p1);\r\n            this._pTotalDelta.x += delta.x;\r\n            this._pTotalDelta.y += delta.y;\r\n            this._pTotalDelta.z += delta.z;\r\n        }\r\n        if (this._pStitchFinalFrame || !this._pLooping) {\r\n            this._pTotalDuration += this._pDurations[this._pNumFrames - 1];\r\n            p1 = this._frames[0].jointPoses[0].translation;\r\n            p2 = this._frames[1].jointPoses[0].translation;\r\n            delta = p2.subtract(p1);\r\n            this._pTotalDelta.x += delta.x;\r\n            this._pTotalDelta.y += delta.y;\r\n            this._pTotalDelta.z += delta.z;\r\n        }\r\n    };\r\n    return SkeletonClipNode;\r\n}(AnimationClipNodeBase_1.AnimationClipNodeBase));\r\nexports.SkeletonClipNode = SkeletonClipNode;\r\n},{\"../../animators/nodes/AnimationClipNodeBase\":\"awayjs-renderergl/lib/animators/nodes/AnimationClipNodeBase\",\"../../animators/states/SkeletonClipState\":\"awayjs-renderergl/lib/animators/states/SkeletonClipState\"}],\"awayjs-renderergl/lib/animators/nodes/SkeletonDifferenceNode\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar AnimationNodeBase_1 = require(\"awayjs-display/lib/animators/nodes/AnimationNodeBase\");\r\nvar SkeletonDifferenceState_1 = require(\"../../animators/states/SkeletonDifferenceState\");\r\n/**\r\n * A skeleton animation node that uses a difference input pose with a base input pose to blend a linearly interpolated output of a skeleton pose.\r\n */\r\nvar SkeletonDifferenceNode = (function (_super) {\r\n    __extends(SkeletonDifferenceNode, _super);\r\n    /**\r\n     * Creates a new <code>SkeletonAdditiveNode</code> object.\r\n     */\r\n    function SkeletonDifferenceNode() {\r\n        _super.call(this);\r\n        this._pStateClass = SkeletonDifferenceState_1.SkeletonDifferenceState;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    SkeletonDifferenceNode.prototype.getAnimationState = function (animator) {\r\n        return animator.getAnimationState(this);\r\n    };\r\n    return SkeletonDifferenceNode;\r\n}(AnimationNodeBase_1.AnimationNodeBase));\r\nexports.SkeletonDifferenceNode = SkeletonDifferenceNode;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.default = SkeletonDifferenceNode;\r\n},{\"../../animators/states/SkeletonDifferenceState\":\"awayjs-renderergl/lib/animators/states/SkeletonDifferenceState\",\"awayjs-display/lib/animators/nodes/AnimationNodeBase\":undefined}],\"awayjs-renderergl/lib/animators/nodes/SkeletonDirectionalNode\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar AnimationNodeBase_1 = require(\"awayjs-display/lib/animators/nodes/AnimationNodeBase\");\r\nvar SkeletonDirectionalState_1 = require(\"../../animators/states/SkeletonDirectionalState\");\r\n/**\r\n * A skeleton animation node that uses four directional input poses with an input direction to blend a linearly interpolated output of a skeleton pose.\r\n */\r\nvar SkeletonDirectionalNode = (function (_super) {\r\n    __extends(SkeletonDirectionalNode, _super);\r\n    function SkeletonDirectionalNode() {\r\n        _super.call(this);\r\n        this._pStateClass = SkeletonDirectionalState_1.SkeletonDirectionalState;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    SkeletonDirectionalNode.prototype.getAnimationState = function (animator) {\r\n        return animator.getAnimationState(this);\r\n    };\r\n    return SkeletonDirectionalNode;\r\n}(AnimationNodeBase_1.AnimationNodeBase));\r\nexports.SkeletonDirectionalNode = SkeletonDirectionalNode;\r\n},{\"../../animators/states/SkeletonDirectionalState\":\"awayjs-renderergl/lib/animators/states/SkeletonDirectionalState\",\"awayjs-display/lib/animators/nodes/AnimationNodeBase\":undefined}],\"awayjs-renderergl/lib/animators/nodes/SkeletonNaryLERPNode\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar AnimationNodeBase_1 = require(\"awayjs-display/lib/animators/nodes/AnimationNodeBase\");\r\nvar SkeletonNaryLERPState_1 = require(\"../../animators/states/SkeletonNaryLERPState\");\r\n/**\r\n * A skeleton animation node that uses an n-dimensional array of animation node inputs to blend a lineraly interpolated output of a skeleton pose.\r\n */\r\nvar SkeletonNaryLERPNode = (function (_super) {\r\n    __extends(SkeletonNaryLERPNode, _super);\r\n    /**\r\n     * Creates a new <code>SkeletonNaryLERPNode</code> object.\r\n     */\r\n    function SkeletonNaryLERPNode() {\r\n        _super.call(this);\r\n        this._iInputs = new Array();\r\n        this._pStateClass = SkeletonNaryLERPState_1.SkeletonNaryLERPState;\r\n    }\r\n    Object.defineProperty(SkeletonNaryLERPNode.prototype, \"numInputs\", {\r\n        get: function () {\r\n            return this._numInputs;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns an integer representing the input index of the given skeleton animation node.\r\n     *\r\n     * @param input The skeleton animation node for with the input index is requested.\r\n     */\r\n    SkeletonNaryLERPNode.prototype.getInputIndex = function (input) {\r\n        return this._iInputs.indexOf(input);\r\n    };\r\n    /**\r\n     * Returns the skeleton animation node object that resides at the given input index.\r\n     *\r\n     * @param index The input index for which the skeleton animation node is requested.\r\n     */\r\n    SkeletonNaryLERPNode.prototype.getInputAt = function (index) {\r\n        return this._iInputs[index];\r\n    };\r\n    /**\r\n     * Adds a new skeleton animation node input to the animation node.\r\n     */\r\n    SkeletonNaryLERPNode.prototype.addInput = function (input) {\r\n        this._iInputs[this._numInputs++] = input;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    SkeletonNaryLERPNode.prototype.getAnimationState = function (animator) {\r\n        return animator.getAnimationState(this);\r\n    };\r\n    return SkeletonNaryLERPNode;\r\n}(AnimationNodeBase_1.AnimationNodeBase));\r\nexports.SkeletonNaryLERPNode = SkeletonNaryLERPNode;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.default = SkeletonNaryLERPNode;\r\n},{\"../../animators/states/SkeletonNaryLERPState\":\"awayjs-renderergl/lib/animators/states/SkeletonNaryLERPState\",\"awayjs-display/lib/animators/nodes/AnimationNodeBase\":undefined}],\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\r\nvar AnimationClipNodeBase_1 = require(\"../../animators/nodes/AnimationClipNodeBase\");\r\nvar VertexClipState_1 = require(\"../../animators/states/VertexClipState\");\r\n/**\r\n * A vertex animation node containing time-based animation data as individual geometry obejcts.\r\n */\r\nvar VertexClipNode = (function (_super) {\r\n    __extends(VertexClipNode, _super);\r\n    /**\r\n     * Creates a new <code>VertexClipNode</code> object.\r\n     */\r\n    function VertexClipNode() {\r\n        _super.call(this);\r\n        this._frames = new Array();\r\n        this._translations = new Array();\r\n        this._pStateClass = VertexClipState_1.VertexClipState;\r\n    }\r\n    Object.defineProperty(VertexClipNode.prototype, \"frames\", {\r\n        /**\r\n         * Returns a vector of geometry frames representing the vertex values of each animation frame in the clip.\r\n         */\r\n        get: function () {\r\n            return this._frames;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Adds a geometry object to the internal timeline of the animation node.\r\n     *\r\n     * @param geometry The geometry object to add to the timeline of the node.\r\n     * @param duration The specified duration of the frame in milliseconds.\r\n     * @param translation The absolute translation of the frame, used in root delta calculations for sprite movement.\r\n     */\r\n    VertexClipNode.prototype.addFrame = function (geometry, duration, translation) {\r\n        if (translation === void 0) { translation = null; }\r\n        this._frames.push(geometry);\r\n        this._pDurations.push(duration);\r\n        this._translations.push(translation || new Vector3D_1.Vector3D());\r\n        this._pNumFrames = this._pDurations.length;\r\n        this._pStitchDirty = true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    VertexClipNode.prototype._pUpdateStitch = function () {\r\n        _super.prototype._pUpdateStitch.call(this);\r\n        var i = this._pNumFrames - 1;\r\n        var p1, p2, delta;\r\n        while (i--) {\r\n            this._pTotalDuration += this._pDurations[i];\r\n            p1 = this._translations[i];\r\n            p2 = this._translations[i + 1];\r\n            delta = p2.subtract(p1);\r\n            this._pTotalDelta.x += delta.x;\r\n            this._pTotalDelta.y += delta.y;\r\n            this._pTotalDelta.z += delta.z;\r\n        }\r\n        if (this._pNumFrames > 1 && (this._pStitchFinalFrame || !this._pLooping)) {\r\n            this._pTotalDuration += this._pDurations[this._pNumFrames - 1];\r\n            p1 = this._translations[0];\r\n            p2 = this._translations[1];\r\n            delta = p2.subtract(p1);\r\n            this._pTotalDelta.x += delta.x;\r\n            this._pTotalDelta.y += delta.y;\r\n            this._pTotalDelta.z += delta.z;\r\n        }\r\n    };\r\n    return VertexClipNode;\r\n}(AnimationClipNodeBase_1.AnimationClipNodeBase));\r\nexports.VertexClipNode = VertexClipNode;\r\n},{\"../../animators/nodes/AnimationClipNodeBase\":\"awayjs-renderergl/lib/animators/nodes/AnimationClipNodeBase\",\"../../animators/states/VertexClipState\":\"awayjs-renderergl/lib/animators/states/VertexClipState\",\"awayjs-core/lib/geom/Vector3D\":undefined}],\"awayjs-renderergl/lib/animators/states/AnimationClipState\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar AnimationStateBase_1 = require(\"../../animators/states/AnimationStateBase\");\r\nvar AnimationStateEvent_1 = require(\"../../events/AnimationStateEvent\");\r\n/**\r\n *\r\n */\r\nvar AnimationClipState = (function (_super) {\r\n    __extends(AnimationClipState, _super);\r\n    function AnimationClipState(animator, animationClipNode) {\r\n        _super.call(this, animator, animationClipNode);\r\n        this._pFramesDirty = true;\r\n        this._animationClipNode = animationClipNode;\r\n    }\r\n    Object.defineProperty(AnimationClipState.prototype, \"blendWeight\", {\r\n        /**\r\n         * Returns a fractional value between 0 and 1 representing the blending ratio of the current playhead position\r\n         * between the current frame (0) and next frame (1) of the animation.\r\n         *\r\n         * @see #currentFrame\r\n         * @see #nextFrame\r\n         */\r\n        get: function () {\r\n            if (this._pFramesDirty)\r\n                this._pUpdateFrames();\r\n            return this._pBlendWeight;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AnimationClipState.prototype, \"currentFrame\", {\r\n        /**\r\n         * Returns the current frame of animation in the clip based on the internal playhead position.\r\n         */\r\n        get: function () {\r\n            if (this._pFramesDirty)\r\n                this._pUpdateFrames();\r\n            return this._pCurrentFrame;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AnimationClipState.prototype, \"nextFrame\", {\r\n        /**\r\n         * Returns the next frame of animation in the clip based on the internal playhead position.\r\n         */\r\n        get: function () {\r\n            if (this._pFramesDirty)\r\n                this._pUpdateFrames();\r\n            return this._pNextFrame;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    AnimationClipState.prototype.update = function (time) {\r\n        if (!this._animationClipNode.looping) {\r\n            if (time > this._pStartTime + this._animationClipNode.totalDuration)\r\n                time = this._pStartTime + this._animationClipNode.totalDuration;\r\n            else if (time < this._pStartTime)\r\n                time = this._pStartTime;\r\n        }\r\n        if (this._pTime == time - this._pStartTime)\r\n            return;\r\n        this._pUpdateTime(time);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    AnimationClipState.prototype.phase = function (value) {\r\n        var time = value * this._animationClipNode.totalDuration + this._pStartTime;\r\n        if (this._pTime == time - this._pStartTime)\r\n            return;\r\n        this._pUpdateTime(time);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    AnimationClipState.prototype._pUpdateTime = function (time) {\r\n        this._pFramesDirty = true;\r\n        this._pTimeDir = (time - this._pStartTime > this._pTime) ? 1 : -1;\r\n        _super.prototype._pUpdateTime.call(this, time);\r\n    };\r\n    /**\r\n     * Updates the nodes internal playhead to determine the current and next animation frame, and the blendWeight between the two.\r\n     *\r\n     * @see #currentFrame\r\n     * @see #nextFrame\r\n     * @see #blendWeight\r\n     */\r\n    AnimationClipState.prototype._pUpdateFrames = function () {\r\n        this._pFramesDirty = false;\r\n        var looping = this._animationClipNode.looping;\r\n        var totalDuration = this._animationClipNode.totalDuration;\r\n        var lastFrame = this._animationClipNode.lastFrame;\r\n        var time = this._pTime;\r\n        //trace(\"time\", time, totalDuration)\r\n        if (looping && (time >= totalDuration || time < 0)) {\r\n            time %= totalDuration;\r\n            if (time < 0)\r\n                time += totalDuration;\r\n        }\r\n        if (!looping && time >= totalDuration) {\r\n            this.notifyPlaybackComplete();\r\n            this._pCurrentFrame = lastFrame;\r\n            this._pNextFrame = lastFrame;\r\n            this._pBlendWeight = 0;\r\n        }\r\n        else if (!looping && time <= 0) {\r\n            this._pCurrentFrame = 0;\r\n            this._pNextFrame = 0;\r\n            this._pBlendWeight = 0;\r\n        }\r\n        else if (this._animationClipNode.fixedFrameRate) {\r\n            var t = time / totalDuration * lastFrame;\r\n            this._pCurrentFrame = Math.floor(t);\r\n            this._pBlendWeight = t - this._pCurrentFrame;\r\n            this._pNextFrame = this._pCurrentFrame + 1;\r\n        }\r\n        else {\r\n            this._pCurrentFrame = 0;\r\n            this._pNextFrame = 0;\r\n            var dur = 0, frameTime;\r\n            var durations = this._animationClipNode.durations;\r\n            do {\r\n                frameTime = dur;\r\n                dur += durations[this._pNextFrame];\r\n                this._pCurrentFrame = this._pNextFrame++;\r\n            } while (time > dur);\r\n            if (this._pCurrentFrame == lastFrame) {\r\n                this._pCurrentFrame = 0;\r\n                this._pNextFrame = 1;\r\n            }\r\n            this._pBlendWeight = (time - frameTime) / durations[this._pCurrentFrame];\r\n        }\r\n    };\r\n    AnimationClipState.prototype.notifyPlaybackComplete = function () {\r\n        if (this._animationStatePlaybackComplete == null)\r\n            this._animationStatePlaybackComplete = new AnimationStateEvent_1.AnimationStateEvent(AnimationStateEvent_1.AnimationStateEvent.PLAYBACK_COMPLETE, this._pAnimator, this, this._animationClipNode);\r\n        this._animationClipNode.dispatchEvent(this._animationStatePlaybackComplete);\r\n    };\r\n    return AnimationClipState;\r\n}(AnimationStateBase_1.AnimationStateBase));\r\nexports.AnimationClipState = AnimationClipState;\r\n},{\"../../animators/states/AnimationStateBase\":\"awayjs-renderergl/lib/animators/states/AnimationStateBase\",\"../../events/AnimationStateEvent\":\"awayjs-renderergl/lib/events/AnimationStateEvent\"}],\"awayjs-renderergl/lib/animators/states/AnimationStateBase\":[function(require,module,exports){\n\"use strict\";\r\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\r\n/**\r\n *\r\n */\r\nvar AnimationStateBase = (function () {\r\n    function AnimationStateBase(animator, animationNode) {\r\n        this._pRootDelta = new Vector3D_1.Vector3D();\r\n        this._pPositionDeltaDirty = true;\r\n        this._pStartTime = 0;\r\n        this._pAnimator = animator;\r\n        this._pAnimationNode = animationNode;\r\n    }\r\n    Object.defineProperty(AnimationStateBase.prototype, \"positionDelta\", {\r\n        /**\r\n         * Returns a 3d vector representing the translation delta of the animating entity for the current timestep of animation\r\n         */\r\n        get: function () {\r\n            if (this._pPositionDeltaDirty) {\r\n                this._pUpdatePositionDelta();\r\n            }\r\n            return this._pRootDelta;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Resets the start time of the node to a  new value.\r\n     *\r\n     * @param startTime The absolute start time (in milliseconds) of the node's starting time.\r\n     */\r\n    AnimationStateBase.prototype.offset = function (startTime) {\r\n        this._pStartTime = startTime;\r\n        this._pPositionDeltaDirty = true;\r\n    };\r\n    /**\r\n     * Updates the configuration of the node to its current state.\r\n     *\r\n     * @param time The absolute time (in milliseconds) of the animator's play head position.\r\n     *\r\n     * @see AnimatorBase#update()\r\n     */\r\n    AnimationStateBase.prototype.update = function (time) {\r\n        if (this._pTime == time - this._pStartTime) {\r\n            return;\r\n        }\r\n        this._pUpdateTime(time);\r\n    };\r\n    /**\r\n     * Sets the animation phase of the node.\r\n     *\r\n     * @param value The phase value to use. 0 represents the beginning of an animation clip, 1 represents the end.\r\n     */\r\n    AnimationStateBase.prototype.phase = function (value) {\r\n    };\r\n    /**\r\n     * Updates the node's internal playhead position.\r\n     *\r\n     * @param time The local time (in milliseconds) of the node's playhead position.\r\n     */\r\n    AnimationStateBase.prototype._pUpdateTime = function (time) {\r\n        this._pTime = time - this._pStartTime;\r\n        this._pPositionDeltaDirty = true;\r\n    };\r\n    /**\r\n     * Updates the node's root delta position\r\n     */\r\n    AnimationStateBase.prototype._pUpdatePositionDelta = function () {\r\n    };\r\n    return AnimationStateBase;\r\n}());\r\nexports.AnimationStateBase = AnimationStateBase;\r\n},{\"awayjs-core/lib/geom/Vector3D\":undefined}],\"awayjs-renderergl/lib/animators/states/IAnimationState\":[function(require,module,exports){\n\"use strict\";\r\n},{}],\"awayjs-renderergl/lib/animators/states/ISkeletonAnimationState\":[function(require,module,exports){\n\"use strict\";\r\n},{}],\"awayjs-renderergl/lib/animators/states/IVertexAnimationState\":[function(require,module,exports){\n\"use strict\";\r\n},{}],\"awayjs-renderergl/lib/animators/states/ParticleAccelerationState\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\r\nvar ContextGLVertexBufferFormat_1 = require(\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\");\r\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\r\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\r\n/**\r\n * ...\r\n */\r\nvar ParticleAccelerationState = (function (_super) {\r\n    __extends(ParticleAccelerationState, _super);\r\n    function ParticleAccelerationState(animator, particleAccelerationNode) {\r\n        _super.call(this, animator, particleAccelerationNode);\r\n        this._particleAccelerationNode = particleAccelerationNode;\r\n        this._acceleration = this._particleAccelerationNode._acceleration;\r\n        this.updateAccelerationData();\r\n    }\r\n    Object.defineProperty(ParticleAccelerationState.prototype, \"acceleration\", {\r\n        /**\r\n         * Defines the acceleration vector of the state, used when in global mode.\r\n         */\r\n        get: function () {\r\n            return this._acceleration;\r\n        },\r\n        set: function (value) {\r\n            this._acceleration.x = value.x;\r\n            this._acceleration.y = value.y;\r\n            this._acceleration.z = value.z;\r\n            this.updateAccelerationData();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleAccelerationState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\r\n        var index = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleAccelerationState.ACCELERATION_INDEX);\r\n        if (this._particleAccelerationNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_STATIC)\r\n            animationElements.activateVertexBuffer(index, this._particleAccelerationNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_3);\r\n        else\r\n            shader.setVertexConst(index, this._halfAcceleration.x, this._halfAcceleration.y, this._halfAcceleration.z);\r\n    };\r\n    ParticleAccelerationState.prototype.updateAccelerationData = function () {\r\n        if (this._particleAccelerationNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL)\r\n            this._halfAcceleration = new Vector3D_1.Vector3D(this._acceleration.x / 2, this._acceleration.y / 2, this._acceleration.z / 2);\r\n    };\r\n    /** @private */\r\n    ParticleAccelerationState.ACCELERATION_INDEX = 0;\r\n    return ParticleAccelerationState;\r\n}(ParticleStateBase_1.ParticleStateBase));\r\nexports.ParticleAccelerationState = ParticleAccelerationState;\r\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\",\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\":undefined}],\"awayjs-renderergl/lib/animators/states/ParticleBezierCurveState\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar ContextGLVertexBufferFormat_1 = require(\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\");\r\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\r\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\r\n/**\r\n * ...\r\n */\r\nvar ParticleBezierCurveState = (function (_super) {\r\n    __extends(ParticleBezierCurveState, _super);\r\n    function ParticleBezierCurveState(animator, particleBezierCurveNode) {\r\n        _super.call(this, animator, particleBezierCurveNode);\r\n        this._particleBezierCurveNode = particleBezierCurveNode;\r\n        this._controlPoint = this._particleBezierCurveNode._iControlPoint;\r\n        this._endPoint = this._particleBezierCurveNode._iEndPoint;\r\n    }\r\n    Object.defineProperty(ParticleBezierCurveState.prototype, \"controlPoint\", {\r\n        /**\r\n         * Defines the default control point of the node, used when in global mode.\r\n         */\r\n        get: function () {\r\n            return this._controlPoint;\r\n        },\r\n        set: function (value) {\r\n            this._controlPoint = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ParticleBezierCurveState.prototype, \"endPoint\", {\r\n        /**\r\n         * Defines the default end point of the node, used when in global mode.\r\n         */\r\n        get: function () {\r\n            return this._endPoint;\r\n        },\r\n        set: function (value) {\r\n            this._endPoint = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ParticleBezierCurveState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\r\n        var controlIndex = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleBezierCurveState.BEZIER_CONTROL_INDEX);\r\n        var endIndex = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleBezierCurveState.BEZIER_END_INDEX);\r\n        if (this._particleBezierCurveNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_STATIC) {\r\n            animationElements.activateVertexBuffer(controlIndex, this._particleBezierCurveNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_3);\r\n            animationElements.activateVertexBuffer(endIndex, this._particleBezierCurveNode._iDataOffset + 3, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_3);\r\n        }\r\n        else {\r\n            shader.setVertexConst(controlIndex, this._controlPoint.x, this._controlPoint.y, this._controlPoint.z);\r\n            shader.setVertexConst(endIndex, this._endPoint.x, this._endPoint.y, this._endPoint.z);\r\n        }\r\n    };\r\n    /** @private */\r\n    ParticleBezierCurveState.BEZIER_CONTROL_INDEX = 0;\r\n    /** @private */\r\n    ParticleBezierCurveState.BEZIER_END_INDEX = 1;\r\n    return ParticleBezierCurveState;\r\n}(ParticleStateBase_1.ParticleStateBase));\r\nexports.ParticleBezierCurveState = ParticleBezierCurveState;\r\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\",\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\":undefined}],\"awayjs-renderergl/lib/animators/states/ParticleBillboardState\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar MathConsts_1 = require(\"awayjs-core/lib/geom/MathConsts\");\r\nvar Matrix3D_1 = require(\"awayjs-core/lib/geom/Matrix3D\");\r\nvar Orientation3D_1 = require(\"awayjs-core/lib/geom/Orientation3D\");\r\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\r\n/**\r\n * ...\r\n */\r\nvar ParticleBillboardState = (function (_super) {\r\n    __extends(ParticleBillboardState, _super);\r\n    /**\r\n     *\r\n     */\r\n    function ParticleBillboardState(animator, particleNode) {\r\n        _super.call(this, animator, particleNode);\r\n        this._matrix = new Matrix3D_1.Matrix3D;\r\n        this._billboardAxis = particleNode._iBillboardAxis;\r\n    }\r\n    ParticleBillboardState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\r\n        var comps;\r\n        if (this._billboardAxis) {\r\n            var pos = renderable.sourceEntity.sceneTransform.position;\r\n            var look = camera.sceneTransform.position.subtract(pos);\r\n            var right = look.crossProduct(this._billboardAxis);\r\n            right.normalize();\r\n            look = this.billboardAxis.crossProduct(right);\r\n            look.normalize();\r\n            //create a quick inverse projection matrix\r\n            this._matrix.copyFrom(renderable.sourceEntity.sceneTransform);\r\n            comps = this._matrix.decompose(Orientation3D_1.Orientation3D.AXIS_ANGLE);\r\n            this._matrix.copyColumnFrom(0, right);\r\n            this._matrix.copyColumnFrom(1, this.billboardAxis);\r\n            this._matrix.copyColumnFrom(2, look);\r\n            this._matrix.copyColumnFrom(3, pos);\r\n            this._matrix.appendRotation(-comps[1].w * MathConsts_1.MathConsts.RADIANS_TO_DEGREES, comps[1]);\r\n        }\r\n        else {\r\n            //create a quick inverse projection matrix\r\n            this._matrix.copyFrom(renderable.sourceEntity.sceneTransform);\r\n            this._matrix.append(camera.inverseSceneTransform);\r\n            //decompose using axis angle rotations\r\n            comps = this._matrix.decompose(Orientation3D_1.Orientation3D.AXIS_ANGLE);\r\n            //recreate the matrix with just the rotation data\r\n            this._matrix.identity();\r\n            this._matrix.appendRotation(-comps[1].w * MathConsts_1.MathConsts.RADIANS_TO_DEGREES, comps[1]);\r\n        }\r\n        //set a new matrix transform constant\r\n        shader.setVertexConstFromMatrix(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleBillboardState.MATRIX_INDEX), this._matrix);\r\n    };\r\n    Object.defineProperty(ParticleBillboardState.prototype, \"billboardAxis\", {\r\n        /**\r\n         * Defines the billboard axis.\r\n         */\r\n        get: function () {\r\n            return this.billboardAxis;\r\n        },\r\n        set: function (value) {\r\n            this.billboardAxis = value ? value.clone() : null;\r\n            if (this.billboardAxis)\r\n                this.billboardAxis.normalize();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** @private */\r\n    ParticleBillboardState.MATRIX_INDEX = 0;\r\n    return ParticleBillboardState;\r\n}(ParticleStateBase_1.ParticleStateBase));\r\nexports.ParticleBillboardState = ParticleBillboardState;\r\n},{\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\",\"awayjs-core/lib/geom/MathConsts\":undefined,\"awayjs-core/lib/geom/Matrix3D\":undefined,\"awayjs-core/lib/geom/Orientation3D\":undefined}],\"awayjs-renderergl/lib/animators/states/ParticleColorState\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\r\nvar ContextGLVertexBufferFormat_1 = require(\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\");\r\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\r\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\r\n/**\r\n * ...\r\n * @author ...\r\n */\r\nvar ParticleColorState = (function (_super) {\r\n    __extends(ParticleColorState, _super);\r\n    function ParticleColorState(animator, particleColorNode) {\r\n        _super.call(this, animator, particleColorNode);\r\n        this._particleColorNode = particleColorNode;\r\n        this._usesMultiplier = this._particleColorNode._iUsesMultiplier;\r\n        this._usesOffset = this._particleColorNode._iUsesOffset;\r\n        this._usesCycle = this._particleColorNode._iUsesCycle;\r\n        this._usesPhase = this._particleColorNode._iUsesPhase;\r\n        this._startColor = this._particleColorNode._iStartColor;\r\n        this._endColor = this._particleColorNode._iEndColor;\r\n        this._cycleDuration = this._particleColorNode._iCycleDuration;\r\n        this._cyclePhase = this._particleColorNode._iCyclePhase;\r\n        this.updateColorData();\r\n    }\r\n    Object.defineProperty(ParticleColorState.prototype, \"startColor\", {\r\n        /**\r\n         * Defines the start color transform of the state, when in global mode.\r\n         */\r\n        get: function () {\r\n            return this._startColor;\r\n        },\r\n        set: function (value) {\r\n            this._startColor = value;\r\n            this.updateColorData();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ParticleColorState.prototype, \"endColor\", {\r\n        /**\r\n         * Defines the end color transform of the state, when in global mode.\r\n         */\r\n        get: function () {\r\n            return this._endColor;\r\n        },\r\n        set: function (value) {\r\n            this._endColor = value;\r\n            this.updateColorData();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ParticleColorState.prototype, \"cycleDuration\", {\r\n        /**\r\n         * Defines the duration of the animation in seconds, used as a period independent of particle duration when in global mode. Defaults to 1.\r\n         */\r\n        get: function () {\r\n            return this._cycleDuration;\r\n        },\r\n        set: function (value) {\r\n            this._cycleDuration = value;\r\n            this.updateColorData();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ParticleColorState.prototype, \"cyclePhase\", {\r\n        /**\r\n         * Defines the phase of the cycle in degrees, used as the starting offset of the cycle when in global mode. Defaults to 0.\r\n         */\r\n        get: function () {\r\n            return this._cyclePhase;\r\n        },\r\n        set: function (value) {\r\n            this._cyclePhase = value;\r\n            this.updateColorData();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ParticleColorState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\r\n        if (shader.usesFragmentAnimation) {\r\n            var dataOffset = this._particleColorNode._iDataOffset;\r\n            var index;\r\n            if (this._usesCycle)\r\n                shader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.CYCLE_INDEX), this._cycleData.x, this._cycleData.y, this._cycleData.z, this._cycleData.w);\r\n            if (this._usesMultiplier) {\r\n                if (this._particleColorNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_STATIC) {\r\n                    animationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.START_MULTIPLIER_INDEX), dataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_4);\r\n                    dataOffset += 4;\r\n                    animationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.DELTA_MULTIPLIER_INDEX), dataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_4);\r\n                    dataOffset += 4;\r\n                }\r\n                else {\r\n                    shader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.START_MULTIPLIER_INDEX), this._startMultiplierData.x, this._startMultiplierData.y, this._startMultiplierData.z, this._startMultiplierData.w);\r\n                    shader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.DELTA_MULTIPLIER_INDEX), this._deltaMultiplierData.x, this._deltaMultiplierData.y, this._deltaMultiplierData.z, this._deltaMultiplierData.w);\r\n                }\r\n            }\r\n            if (this._usesOffset) {\r\n                if (this._particleColorNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_STATIC) {\r\n                    animationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.START_OFFSET_INDEX), dataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_4);\r\n                    dataOffset += 4;\r\n                    animationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.DELTA_OFFSET_INDEX), dataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_4);\r\n                }\r\n                else {\r\n                    shader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.START_OFFSET_INDEX), this._startOffsetData.x, this._startOffsetData.y, this._startOffsetData.z, this._startOffsetData.w);\r\n                    shader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.DELTA_OFFSET_INDEX), this._deltaOffsetData.x, this._deltaOffsetData.y, this._deltaOffsetData.z, this._deltaOffsetData.w);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    ParticleColorState.prototype.updateColorData = function () {\r\n        if (this._usesCycle) {\r\n            if (this._cycleDuration <= 0)\r\n                throw (new Error(\"the cycle duration must be greater than zero\"));\r\n            this._cycleData = new Vector3D_1.Vector3D(Math.PI * 2 / this._cycleDuration, this._cyclePhase * Math.PI / 180, 0, 0);\r\n        }\r\n        if (this._particleColorNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) {\r\n            if (this._usesCycle) {\r\n                if (this._usesMultiplier) {\r\n                    this._startMultiplierData = new Vector3D_1.Vector3D((this._startColor.redMultiplier + this._endColor.redMultiplier) / 2, (this._startColor.greenMultiplier + this._endColor.greenMultiplier) / 2, (this._startColor.blueMultiplier + this._endColor.blueMultiplier) / 2, (this._startColor.alphaMultiplier + this._endColor.alphaMultiplier) / 2);\r\n                    this._deltaMultiplierData = new Vector3D_1.Vector3D((this._endColor.redMultiplier - this._startColor.redMultiplier) / 2, (this._endColor.greenMultiplier - this._startColor.greenMultiplier) / 2, (this._endColor.blueMultiplier - this._startColor.blueMultiplier) / 2, (this._endColor.alphaMultiplier - this._startColor.alphaMultiplier) / 2);\r\n                }\r\n                if (this._usesOffset) {\r\n                    this._startOffsetData = new Vector3D_1.Vector3D((this._startColor.redOffset + this._endColor.redOffset) / (255 * 2), (this._startColor.greenOffset + this._endColor.greenOffset) / (255 * 2), (this._startColor.blueOffset + this._endColor.blueOffset) / (255 * 2), (this._startColor.alphaOffset + this._endColor.alphaOffset) / (255 * 2));\r\n                    this._deltaOffsetData = new Vector3D_1.Vector3D((this._endColor.redOffset - this._startColor.redOffset) / (255 * 2), (this._endColor.greenOffset - this._startColor.greenOffset) / (255 * 2), (this._endColor.blueOffset - this._startColor.blueOffset) / (255 * 2), (this._endColor.alphaOffset - this._startColor.alphaOffset) / (255 * 2));\r\n                }\r\n            }\r\n            else {\r\n                if (this._usesMultiplier) {\r\n                    this._startMultiplierData = new Vector3D_1.Vector3D(this._startColor.redMultiplier, this._startColor.greenMultiplier, this._startColor.blueMultiplier, this._startColor.alphaMultiplier);\r\n                    this._deltaMultiplierData = new Vector3D_1.Vector3D((this._endColor.redMultiplier - this._startColor.redMultiplier), (this._endColor.greenMultiplier - this._startColor.greenMultiplier), (this._endColor.blueMultiplier - this._startColor.blueMultiplier), (this._endColor.alphaMultiplier - this._startColor.alphaMultiplier));\r\n                }\r\n                if (this._usesOffset) {\r\n                    this._startOffsetData = new Vector3D_1.Vector3D(this._startColor.redOffset / 255, this._startColor.greenOffset / 255, this._startColor.blueOffset / 255, this._startColor.alphaOffset / 255);\r\n                    this._deltaOffsetData = new Vector3D_1.Vector3D((this._endColor.redOffset - this._startColor.redOffset) / 255, (this._endColor.greenOffset - this._startColor.greenOffset) / 255, (this._endColor.blueOffset - this._startColor.blueOffset) / 255, (this._endColor.alphaOffset - this._startColor.alphaOffset) / 255);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /** @private */\r\n    ParticleColorState.START_MULTIPLIER_INDEX = 0;\r\n    /** @private */\r\n    ParticleColorState.DELTA_MULTIPLIER_INDEX = 1;\r\n    /** @private */\r\n    ParticleColorState.START_OFFSET_INDEX = 2;\r\n    /** @private */\r\n    ParticleColorState.DELTA_OFFSET_INDEX = 3;\r\n    /** @private */\r\n    ParticleColorState.CYCLE_INDEX = 4;\r\n    return ParticleColorState;\r\n}(ParticleStateBase_1.ParticleStateBase));\r\nexports.ParticleColorState = ParticleColorState;\r\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\",\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\":undefined}],\"awayjs-renderergl/lib/animators/states/ParticleFollowState\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar MathConsts_1 = require(\"awayjs-core/lib/geom/MathConsts\");\r\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\r\nvar ContextGLVertexBufferFormat_1 = require(\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\");\r\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\r\n/**\r\n * ...\r\n */\r\nvar ParticleFollowState = (function (_super) {\r\n    __extends(ParticleFollowState, _super);\r\n    function ParticleFollowState(animator, particleFollowNode) {\r\n        _super.call(this, animator, particleFollowNode, true);\r\n        this._targetPos = new Vector3D_1.Vector3D();\r\n        this._targetEuler = new Vector3D_1.Vector3D();\r\n        //temporary vector3D for calculation\r\n        this._temp = new Vector3D_1.Vector3D();\r\n        this._particleFollowNode = particleFollowNode;\r\n        this._smooth = particleFollowNode._iSmooth;\r\n    }\r\n    Object.defineProperty(ParticleFollowState.prototype, \"followTarget\", {\r\n        get: function () {\r\n            return this._followTarget;\r\n        },\r\n        set: function (value) {\r\n            this._followTarget = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ParticleFollowState.prototype, \"smooth\", {\r\n        get: function () {\r\n            return this._smooth;\r\n        },\r\n        set: function (value) {\r\n            this._smooth = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleFollowState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\r\n        if (this._followTarget) {\r\n            if (this._particleFollowNode._iUsesPosition) {\r\n                this._targetPos.x = this._followTarget.transform.position.x / renderable.sourceEntity.scaleX;\r\n                this._targetPos.y = this._followTarget.transform.position.y / renderable.sourceEntity.scaleY;\r\n                this._targetPos.z = this._followTarget.transform.position.z / renderable.sourceEntity.scaleZ;\r\n            }\r\n            if (this._particleFollowNode._iUsesRotation) {\r\n                this._targetEuler.x = this._followTarget.rotationX;\r\n                this._targetEuler.y = this._followTarget.rotationY;\r\n                this._targetEuler.z = this._followTarget.rotationZ;\r\n                this._targetEuler.scaleBy(MathConsts_1.MathConsts.DEGREES_TO_RADIANS);\r\n            }\r\n        }\r\n        //initialization\r\n        if (!this._prePos)\r\n            this._prePos = this._targetPos.clone();\r\n        if (!this._preEuler)\r\n            this._preEuler = this._targetEuler.clone();\r\n        var currentTime = this._pTime / 1000;\r\n        var previousTime = animationElements.previousTime;\r\n        var deltaTime = currentTime - previousTime;\r\n        var needProcess = previousTime != currentTime;\r\n        if (this._particleFollowNode._iUsesPosition && this._particleFollowNode._iUsesRotation) {\r\n            if (needProcess)\r\n                this.processPositionAndRotation(currentTime, deltaTime, animationElements);\r\n            animationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleFollowState.FOLLOW_POSITION_INDEX), this._particleFollowNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_3);\r\n            animationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleFollowState.FOLLOW_ROTATION_INDEX), this._particleFollowNode._iDataOffset + 3, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_3);\r\n        }\r\n        else if (this._particleFollowNode._iUsesPosition) {\r\n            if (needProcess)\r\n                this.processPosition(currentTime, deltaTime, animationElements);\r\n            animationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleFollowState.FOLLOW_POSITION_INDEX), this._particleFollowNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_3);\r\n        }\r\n        else if (this._particleFollowNode._iUsesRotation) {\r\n            if (needProcess)\r\n                this.precessRotation(currentTime, deltaTime, animationElements);\r\n            animationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleFollowState.FOLLOW_ROTATION_INDEX), this._particleFollowNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_3);\r\n        }\r\n        this._prePos.copyFrom(this._targetPos);\r\n        this._targetEuler.copyFrom(this._targetEuler);\r\n        animationElements.previousTime = currentTime;\r\n    };\r\n    ParticleFollowState.prototype.processPosition = function (currentTime, deltaTime, animationElements) {\r\n        var data = animationElements.animationParticles;\r\n        var vertexData = animationElements.vertexData;\r\n        var changed = false;\r\n        var len = data.length;\r\n        var interpolatedPos;\r\n        var posVelocity;\r\n        if (this._smooth) {\r\n            posVelocity = this._prePos.subtract(this._targetPos);\r\n            posVelocity.scaleBy(1 / deltaTime);\r\n        }\r\n        else\r\n            interpolatedPos = this._targetPos;\r\n        for (var i = 0; i < len; i++) {\r\n            var k = (currentTime - data[i].startTime) / data[i].totalTime;\r\n            var t = (k - Math.floor(k)) * data[i].totalTime;\r\n            if (t - deltaTime <= 0) {\r\n                var inc = data[i].startVertexIndex * animationElements.totalLenOfOneVertex + this._particleFollowNode._iDataOffset;\r\n                if (this._smooth) {\r\n                    this._temp.copyFrom(posVelocity);\r\n                    this._temp.scaleBy(t);\r\n                    interpolatedPos = this._targetPos.add(this._temp);\r\n                }\r\n                if (vertexData[inc] != interpolatedPos.x || vertexData[inc + 1] != interpolatedPos.y || vertexData[inc + 2] != interpolatedPos.z) {\r\n                    changed = true;\r\n                    for (var j = 0; j < data[i].numVertices; j++) {\r\n                        vertexData[inc++] = interpolatedPos.x;\r\n                        vertexData[inc++] = interpolatedPos.y;\r\n                        vertexData[inc++] = interpolatedPos.z;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (changed)\r\n            animationElements.invalidateBuffer();\r\n    };\r\n    ParticleFollowState.prototype.precessRotation = function (currentTime, deltaTime, animationElements) {\r\n        var data = animationElements.animationParticles;\r\n        var vertexData = animationElements.vertexData;\r\n        var changed = false;\r\n        var len = data.length;\r\n        var interpolatedRotation;\r\n        var rotationVelocity;\r\n        if (this._smooth) {\r\n            rotationVelocity = this._preEuler.subtract(this._targetEuler);\r\n            rotationVelocity.scaleBy(1 / deltaTime);\r\n        }\r\n        else\r\n            interpolatedRotation = this._targetEuler;\r\n        for (var i = 0; i < len; i++) {\r\n            var k = (currentTime - data[i].startTime) / data[i].totalTime;\r\n            var t = (k - Math.floor(k)) * data[i].totalTime;\r\n            if (t - deltaTime <= 0) {\r\n                var inc = data[i].startVertexIndex * animationElements.totalLenOfOneVertex + this._particleFollowNode._iDataOffset;\r\n                if (this._smooth) {\r\n                    this._temp.copyFrom(rotationVelocity);\r\n                    this._temp.scaleBy(t);\r\n                    interpolatedRotation = this._targetEuler.add(this._temp);\r\n                }\r\n                if (vertexData[inc] != interpolatedRotation.x || vertexData[inc + 1] != interpolatedRotation.y || vertexData[inc + 2] != interpolatedRotation.z) {\r\n                    changed = true;\r\n                    for (var j = 0; j < data[i].numVertices; j++) {\r\n                        vertexData[inc++] = interpolatedRotation.x;\r\n                        vertexData[inc++] = interpolatedRotation.y;\r\n                        vertexData[inc++] = interpolatedRotation.z;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (changed)\r\n            animationElements.invalidateBuffer();\r\n    };\r\n    ParticleFollowState.prototype.processPositionAndRotation = function (currentTime, deltaTime, animationElements) {\r\n        var data = animationElements.animationParticles;\r\n        var vertexData = animationElements.vertexData;\r\n        var changed = false;\r\n        var len = data.length;\r\n        var interpolatedPos;\r\n        var interpolatedRotation;\r\n        var posVelocity;\r\n        var rotationVelocity;\r\n        if (this._smooth) {\r\n            posVelocity = this._prePos.subtract(this._targetPos);\r\n            posVelocity.scaleBy(1 / deltaTime);\r\n            rotationVelocity = this._preEuler.subtract(this._targetEuler);\r\n            rotationVelocity.scaleBy(1 / deltaTime);\r\n        }\r\n        else {\r\n            interpolatedPos = this._targetPos;\r\n            interpolatedRotation = this._targetEuler;\r\n        }\r\n        for (var i = 0; i < len; i++) {\r\n            var k = (currentTime - data[i].startTime) / data[i].totalTime;\r\n            var t = (k - Math.floor(k)) * data[i].totalTime;\r\n            if (t - deltaTime <= 0) {\r\n                var inc = data[i].startVertexIndex * animationElements.totalLenOfOneVertex + this._particleFollowNode._iDataOffset;\r\n                if (this._smooth) {\r\n                    this._temp.copyFrom(posVelocity);\r\n                    this._temp.scaleBy(t);\r\n                    interpolatedPos = this._targetPos.add(this._temp);\r\n                    this._temp.copyFrom(rotationVelocity);\r\n                    this._temp.scaleBy(t);\r\n                    interpolatedRotation = this._targetEuler.add(this._temp);\r\n                }\r\n                if (vertexData[inc] != interpolatedPos.x || vertexData[inc + 1] != interpolatedPos.y || vertexData[inc + 2] != interpolatedPos.z || vertexData[inc + 3] != interpolatedRotation.x || vertexData[inc + 4] != interpolatedRotation.y || vertexData[inc + 5] != interpolatedRotation.z) {\r\n                    changed = true;\r\n                    for (var j = 0; j < data[i].numVertices; j++) {\r\n                        vertexData[inc++] = interpolatedPos.x;\r\n                        vertexData[inc++] = interpolatedPos.y;\r\n                        vertexData[inc++] = interpolatedPos.z;\r\n                        vertexData[inc++] = interpolatedRotation.x;\r\n                        vertexData[inc++] = interpolatedRotation.y;\r\n                        vertexData[inc++] = interpolatedRotation.z;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (changed)\r\n            animationElements.invalidateBuffer();\r\n    };\r\n    /** @private */\r\n    ParticleFollowState.FOLLOW_POSITION_INDEX = 0;\r\n    /** @private */\r\n    ParticleFollowState.FOLLOW_ROTATION_INDEX = 1;\r\n    return ParticleFollowState;\r\n}(ParticleStateBase_1.ParticleStateBase));\r\nexports.ParticleFollowState = ParticleFollowState;\r\n},{\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\",\"awayjs-core/lib/geom/MathConsts\":undefined,\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\":undefined}],\"awayjs-renderergl/lib/animators/states/ParticleInitialColorState\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\r\nvar ContextGLVertexBufferFormat_1 = require(\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\");\r\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\r\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\r\n/**\r\n*\r\n*/\r\nvar ParticleInitialColorState = (function (_super) {\r\n    __extends(ParticleInitialColorState, _super);\r\n    function ParticleInitialColorState(animator, particleInitialColorNode) {\r\n        _super.call(this, animator, particleInitialColorNode);\r\n        this._particleInitialColorNode = particleInitialColorNode;\r\n        this._usesMultiplier = particleInitialColorNode._iUsesMultiplier;\r\n        this._usesOffset = particleInitialColorNode._iUsesOffset;\r\n        this._initialColor = particleInitialColorNode._iInitialColor;\r\n        this.updateColorData();\r\n    }\r\n    Object.defineProperty(ParticleInitialColorState.prototype, \"initialColor\", {\r\n        /**\r\n         * Defines the initial color transform of the state, when in global mode.\r\n         */\r\n        get: function () {\r\n            return this._initialColor;\r\n        },\r\n        set: function (value) {\r\n            this._initialColor = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleInitialColorState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\r\n        if (shader.usesFragmentAnimation) {\r\n            var index;\r\n            if (this._particleInitialColorNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_STATIC) {\r\n                var dataOffset = this._particleInitialColorNode._iDataOffset;\r\n                if (this._usesMultiplier) {\r\n                    animationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleInitialColorState.MULTIPLIER_INDEX), dataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_4);\r\n                    dataOffset += 4;\r\n                }\r\n                if (this._usesOffset)\r\n                    animationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleInitialColorState.OFFSET_INDEX), dataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_4);\r\n            }\r\n            else {\r\n                if (this._usesMultiplier)\r\n                    shader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleInitialColorState.MULTIPLIER_INDEX), this._multiplierData.x, this._multiplierData.y, this._multiplierData.z, this._multiplierData.w);\r\n                if (this._usesOffset)\r\n                    shader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleInitialColorState.OFFSET_INDEX), this._offsetData.x, this._offsetData.y, this._offsetData.z, this._offsetData.w);\r\n            }\r\n        }\r\n    };\r\n    ParticleInitialColorState.prototype.updateColorData = function () {\r\n        if (this._particleInitialColorNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) {\r\n            if (this._usesMultiplier)\r\n                this._multiplierData = new Vector3D_1.Vector3D(this._initialColor.redMultiplier, this._initialColor.greenMultiplier, this._initialColor.blueMultiplier, this._initialColor.alphaMultiplier);\r\n            if (this._usesOffset)\r\n                this._offsetData = new Vector3D_1.Vector3D(this._initialColor.redOffset / 255, this._initialColor.greenOffset / 255, this._initialColor.blueOffset / 255, this._initialColor.alphaOffset / 255);\r\n        }\r\n    };\r\n    /** @private */\r\n    ParticleInitialColorState.MULTIPLIER_INDEX = 0;\r\n    /** @private */\r\n    ParticleInitialColorState.OFFSET_INDEX = 1;\r\n    return ParticleInitialColorState;\r\n}(ParticleStateBase_1.ParticleStateBase));\r\nexports.ParticleInitialColorState = ParticleInitialColorState;\r\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\",\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\":undefined}],\"awayjs-renderergl/lib/animators/states/ParticleOrbitState\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Matrix3D_1 = require(\"awayjs-core/lib/geom/Matrix3D\");\r\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\r\nvar ContextGLVertexBufferFormat_1 = require(\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\");\r\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\r\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\r\n/**\r\n * ...\r\n */\r\nvar ParticleOrbitState = (function (_super) {\r\n    __extends(ParticleOrbitState, _super);\r\n    function ParticleOrbitState(animator, particleOrbitNode) {\r\n        _super.call(this, animator, particleOrbitNode);\r\n        this._particleOrbitNode = particleOrbitNode;\r\n        this._usesEulers = this._particleOrbitNode._iUsesEulers;\r\n        this._usesCycle = this._particleOrbitNode._iUsesCycle;\r\n        this._usesPhase = this._particleOrbitNode._iUsesPhase;\r\n        this._eulers = this._particleOrbitNode._iEulers;\r\n        this._radius = this._particleOrbitNode._iRadius;\r\n        this._cycleDuration = this._particleOrbitNode._iCycleDuration;\r\n        this._cyclePhase = this._particleOrbitNode._iCyclePhase;\r\n        this.updateOrbitData();\r\n    }\r\n    Object.defineProperty(ParticleOrbitState.prototype, \"radius\", {\r\n        /**\r\n         * Defines the radius of the orbit when in global mode. Defaults to 100.\r\n         */\r\n        get: function () {\r\n            return this._radius;\r\n        },\r\n        set: function (value) {\r\n            this._radius = value;\r\n            this.updateOrbitData();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ParticleOrbitState.prototype, \"cycleDuration\", {\r\n        /**\r\n         * Defines the duration of the orbit in seconds, used as a period independent of particle duration when in global mode. Defaults to 1.\r\n         */\r\n        get: function () {\r\n            return this._cycleDuration;\r\n        },\r\n        set: function (value) {\r\n            this._cycleDuration = value;\r\n            this.updateOrbitData();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ParticleOrbitState.prototype, \"cyclePhase\", {\r\n        /**\r\n         * Defines the phase of the orbit in degrees, used as the starting offset of the cycle when in global mode. Defaults to 0.\r\n         */\r\n        get: function () {\r\n            return this._cyclePhase;\r\n        },\r\n        set: function (value) {\r\n            this._cyclePhase = value;\r\n            this.updateOrbitData();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ParticleOrbitState.prototype, \"eulers\", {\r\n        /**\r\n         * Defines the euler rotation in degrees, applied to the orientation of the orbit when in global mode.\r\n         */\r\n        get: function () {\r\n            return this._eulers;\r\n        },\r\n        set: function (value) {\r\n            this._eulers = value;\r\n            this.updateOrbitData();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ParticleOrbitState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\r\n        var index = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleOrbitState.ORBIT_INDEX);\r\n        if (this._particleOrbitNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_STATIC) {\r\n            if (this._usesPhase)\r\n                animationElements.activateVertexBuffer(index, this._particleOrbitNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_4);\r\n            else\r\n                animationElements.activateVertexBuffer(index, this._particleOrbitNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_3);\r\n        }\r\n        else\r\n            shader.setVertexConst(index, this._orbitData.x, this._orbitData.y, this._orbitData.z, this._orbitData.w);\r\n        if (this._usesEulers)\r\n            shader.setVertexConstFromMatrix(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleOrbitState.EULERS_INDEX), this._eulersMatrix);\r\n    };\r\n    ParticleOrbitState.prototype.updateOrbitData = function () {\r\n        if (this._usesEulers) {\r\n            this._eulersMatrix = new Matrix3D_1.Matrix3D();\r\n            this._eulersMatrix.appendRotation(this._eulers.x, Vector3D_1.Vector3D.X_AXIS);\r\n            this._eulersMatrix.appendRotation(this._eulers.y, Vector3D_1.Vector3D.Y_AXIS);\r\n            this._eulersMatrix.appendRotation(this._eulers.z, Vector3D_1.Vector3D.Z_AXIS);\r\n        }\r\n        if (this._particleOrbitNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) {\r\n            this._orbitData = new Vector3D_1.Vector3D(this._radius, 0, this._radius * Math.PI * 2, this._cyclePhase * Math.PI / 180);\r\n            if (this._usesCycle) {\r\n                if (this._cycleDuration <= 0)\r\n                    throw (new Error(\"the cycle duration must be greater than zero\"));\r\n                this._orbitData.y = Math.PI * 2 / this._cycleDuration;\r\n            }\r\n            else\r\n                this._orbitData.y = Math.PI * 2;\r\n        }\r\n    };\r\n    /** @private */\r\n    ParticleOrbitState.ORBIT_INDEX = 0;\r\n    /** @private */\r\n    ParticleOrbitState.EULERS_INDEX = 1;\r\n    return ParticleOrbitState;\r\n}(ParticleStateBase_1.ParticleStateBase));\r\nexports.ParticleOrbitState = ParticleOrbitState;\r\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\",\"awayjs-core/lib/geom/Matrix3D\":undefined,\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\":undefined}],\"awayjs-renderergl/lib/animators/states/ParticleOscillatorState\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\r\nvar ContextGLVertexBufferFormat_1 = require(\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\");\r\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\r\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\r\n/**\r\n * ...\r\n */\r\nvar ParticleOscillatorState = (function (_super) {\r\n    __extends(ParticleOscillatorState, _super);\r\n    function ParticleOscillatorState(animator, particleOscillatorNode) {\r\n        _super.call(this, animator, particleOscillatorNode);\r\n        this._particleOscillatorNode = particleOscillatorNode;\r\n        this._oscillator = this._particleOscillatorNode._iOscillator;\r\n        this.updateOscillatorData();\r\n    }\r\n    Object.defineProperty(ParticleOscillatorState.prototype, \"oscillator\", {\r\n        /**\r\n         * Defines the default oscillator axis (x, y, z) and cycleDuration (w) of the state, used when in global mode.\r\n         */\r\n        get: function () {\r\n            return this._oscillator;\r\n        },\r\n        set: function (value) {\r\n            this._oscillator = value;\r\n            this.updateOscillatorData();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleOscillatorState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\r\n        var index = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleOscillatorState.OSCILLATOR_INDEX);\r\n        if (this._particleOscillatorNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_STATIC)\r\n            animationElements.activateVertexBuffer(index, this._particleOscillatorNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_4);\r\n        else\r\n            shader.setVertexConst(index, this._oscillatorData.x, this._oscillatorData.y, this._oscillatorData.z, this._oscillatorData.w);\r\n    };\r\n    ParticleOscillatorState.prototype.updateOscillatorData = function () {\r\n        if (this._particleOscillatorNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) {\r\n            if (this._oscillator.w <= 0)\r\n                throw (new Error(\"the cycle duration must greater than zero\"));\r\n            if (this._oscillatorData == null)\r\n                this._oscillatorData = new Vector3D_1.Vector3D();\r\n            this._oscillatorData.x = this._oscillator.x;\r\n            this._oscillatorData.y = this._oscillator.y;\r\n            this._oscillatorData.z = this._oscillator.z;\r\n            this._oscillatorData.w = Math.PI * 2 / this._oscillator.w;\r\n        }\r\n    };\r\n    /** @private */\r\n    ParticleOscillatorState.OSCILLATOR_INDEX = 0;\r\n    return ParticleOscillatorState;\r\n}(ParticleStateBase_1.ParticleStateBase));\r\nexports.ParticleOscillatorState = ParticleOscillatorState;\r\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\",\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\":undefined}],\"awayjs-renderergl/lib/animators/states/ParticlePositionState\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar ContextGLVertexBufferFormat_1 = require(\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\");\r\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\r\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\r\n/**\r\n * ...\r\n * @author ...\r\n */\r\nvar ParticlePositionState = (function (_super) {\r\n    __extends(ParticlePositionState, _super);\r\n    function ParticlePositionState(animator, particlePositionNode) {\r\n        _super.call(this, animator, particlePositionNode);\r\n        this._particlePositionNode = particlePositionNode;\r\n        this._position = this._particlePositionNode._iPosition;\r\n    }\r\n    Object.defineProperty(ParticlePositionState.prototype, \"position\", {\r\n        /**\r\n         * Defines the position of the particle when in global mode. Defaults to 0,0,0.\r\n         */\r\n        get: function () {\r\n            return this._position;\r\n        },\r\n        set: function (value) {\r\n            this._position = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     *\r\n     */\r\n    ParticlePositionState.prototype.getPositions = function () {\r\n        return this._pDynamicProperties;\r\n    };\r\n    ParticlePositionState.prototype.setPositions = function (value) {\r\n        this._pDynamicProperties = value;\r\n        this._pDynamicPropertiesDirty = new Object();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticlePositionState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\r\n        if (this._particlePositionNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_DYNAMIC && !this._pDynamicPropertiesDirty[animationElements._iUniqueId])\r\n            this._pUpdateDynamicProperties(animationElements);\r\n        var index = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticlePositionState.POSITION_INDEX);\r\n        if (this._particlePositionNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL)\r\n            shader.setVertexConst(index, this._position.x, this._position.y, this._position.z);\r\n        else\r\n            animationElements.activateVertexBuffer(index, this._particlePositionNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_3);\r\n    };\r\n    /** @private */\r\n    ParticlePositionState.POSITION_INDEX = 0;\r\n    return ParticlePositionState;\r\n}(ParticleStateBase_1.ParticleStateBase));\r\nexports.ParticlePositionState = ParticlePositionState;\r\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\",\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\":undefined}],\"awayjs-renderergl/lib/animators/states/ParticleRotateToHeadingState\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Matrix3D_1 = require(\"awayjs-core/lib/geom/Matrix3D\");\r\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\r\n/**\r\n * ...\r\n */\r\nvar ParticleRotateToHeadingState = (function (_super) {\r\n    __extends(ParticleRotateToHeadingState, _super);\r\n    function ParticleRotateToHeadingState(animator, particleNode) {\r\n        _super.call(this, animator, particleNode);\r\n        this._matrix = new Matrix3D_1.Matrix3D();\r\n    }\r\n    ParticleRotateToHeadingState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\r\n        if (this._pParticleAnimator.animationSet.hasBillboard) {\r\n            this._matrix.copyFrom(renderable.sourceEntity.sceneTransform);\r\n            this._matrix.append(camera.inverseSceneTransform);\r\n            shader.setVertexConstFromMatrix(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleRotateToHeadingState.MATRIX_INDEX), this._matrix);\r\n        }\r\n    };\r\n    /** @private */\r\n    ParticleRotateToHeadingState.MATRIX_INDEX = 0;\r\n    return ParticleRotateToHeadingState;\r\n}(ParticleStateBase_1.ParticleStateBase));\r\nexports.ParticleRotateToHeadingState = ParticleRotateToHeadingState;\r\n},{\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\",\"awayjs-core/lib/geom/Matrix3D\":undefined}],\"awayjs-renderergl/lib/animators/states/ParticleRotateToPositionState\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Matrix3D_1 = require(\"awayjs-core/lib/geom/Matrix3D\");\r\nvar ContextGLVertexBufferFormat_1 = require(\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\");\r\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\r\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\r\n/**\r\n * ...\r\n */\r\nvar ParticleRotateToPositionState = (function (_super) {\r\n    __extends(ParticleRotateToPositionState, _super);\r\n    function ParticleRotateToPositionState(animator, particleRotateToPositionNode) {\r\n        _super.call(this, animator, particleRotateToPositionNode);\r\n        this._matrix = new Matrix3D_1.Matrix3D();\r\n        this._particleRotateToPositionNode = particleRotateToPositionNode;\r\n        this._position = this._particleRotateToPositionNode._iPosition;\r\n    }\r\n    Object.defineProperty(ParticleRotateToPositionState.prototype, \"position\", {\r\n        /**\r\n         * Defines the position of the point the particle will rotate to face when in global mode. Defaults to 0,0,0.\r\n         */\r\n        get: function () {\r\n            return this._position;\r\n        },\r\n        set: function (value) {\r\n            this._position = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ParticleRotateToPositionState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\r\n        var index = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleRotateToPositionState.POSITION_INDEX);\r\n        if (this._pParticleAnimator.animationSet.hasBillboard) {\r\n            this._matrix.copyFrom(renderable.sourceEntity.sceneTransform);\r\n            this._matrix.append(camera.inverseSceneTransform);\r\n            shader.setVertexConstFromMatrix(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleRotateToPositionState.MATRIX_INDEX), this._matrix);\r\n        }\r\n        if (this._particleRotateToPositionNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) {\r\n            this._offset = renderable.sourceEntity.inverseSceneTransform.transformVector(this._position);\r\n            shader.setVertexConst(index, this._offset.x, this._offset.y, this._offset.z);\r\n        }\r\n        else\r\n            animationElements.activateVertexBuffer(index, this._particleRotateToPositionNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_3);\r\n    };\r\n    /** @private */\r\n    ParticleRotateToPositionState.MATRIX_INDEX = 0;\r\n    /** @private */\r\n    ParticleRotateToPositionState.POSITION_INDEX = 1;\r\n    return ParticleRotateToPositionState;\r\n}(ParticleStateBase_1.ParticleStateBase));\r\nexports.ParticleRotateToPositionState = ParticleRotateToPositionState;\r\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\",\"awayjs-core/lib/geom/Matrix3D\":undefined,\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\":undefined}],\"awayjs-renderergl/lib/animators/states/ParticleRotationalVelocityState\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\r\nvar ContextGLVertexBufferFormat_1 = require(\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\");\r\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\r\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\r\n/**\r\n * ...\r\n */\r\nvar ParticleRotationalVelocityState = (function (_super) {\r\n    __extends(ParticleRotationalVelocityState, _super);\r\n    function ParticleRotationalVelocityState(animator, particleRotationNode) {\r\n        _super.call(this, animator, particleRotationNode);\r\n        this._particleRotationalVelocityNode = particleRotationNode;\r\n        this._rotationalVelocity = this._particleRotationalVelocityNode._iRotationalVelocity;\r\n        this.updateRotationalVelocityData();\r\n    }\r\n    Object.defineProperty(ParticleRotationalVelocityState.prototype, \"rotationalVelocity\", {\r\n        /**\r\n         * Defines the default rotationalVelocity of the state, used when in global mode.\r\n         */\r\n        get: function () {\r\n            return this._rotationalVelocity;\r\n        },\r\n        set: function (value) {\r\n            this._rotationalVelocity = value;\r\n            this.updateRotationalVelocityData();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     *\r\n     */\r\n    ParticleRotationalVelocityState.prototype.getRotationalVelocities = function () {\r\n        return this._pDynamicProperties;\r\n    };\r\n    ParticleRotationalVelocityState.prototype.setRotationalVelocities = function (value) {\r\n        this._pDynamicProperties = value;\r\n        this._pDynamicPropertiesDirty = new Object();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ParticleRotationalVelocityState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\r\n        if (this._particleRotationalVelocityNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_DYNAMIC && !this._pDynamicPropertiesDirty[animationElements._iUniqueId])\r\n            this._pUpdateDynamicProperties(animationElements);\r\n        var index = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleRotationalVelocityState.ROTATIONALVELOCITY_INDEX);\r\n        if (this._particleRotationalVelocityNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL)\r\n            shader.setVertexConst(index, this._rotationalVelocityData.x, this._rotationalVelocityData.y, this._rotationalVelocityData.z, this._rotationalVelocityData.w);\r\n        else\r\n            animationElements.activateVertexBuffer(index, this._particleRotationalVelocityNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_4);\r\n    };\r\n    ParticleRotationalVelocityState.prototype.updateRotationalVelocityData = function () {\r\n        if (this._particleRotationalVelocityNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) {\r\n            if (this._rotationalVelocity.w <= 0)\r\n                throw (new Error(\"the cycle duration must greater than zero\"));\r\n            var rotation = this._rotationalVelocity.clone();\r\n            if (rotation.length <= 0)\r\n                rotation.z = 1; //set the default direction\r\n            else\r\n                rotation.normalize();\r\n            // w is used as angle/2 in agal\r\n            this._rotationalVelocityData = new Vector3D_1.Vector3D(rotation.x, rotation.y, rotation.z, Math.PI / rotation.w);\r\n        }\r\n    };\r\n    /** @private */\r\n    ParticleRotationalVelocityState.ROTATIONALVELOCITY_INDEX = 0;\r\n    return ParticleRotationalVelocityState;\r\n}(ParticleStateBase_1.ParticleStateBase));\r\nexports.ParticleRotationalVelocityState = ParticleRotationalVelocityState;\r\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\",\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\":undefined}],\"awayjs-renderergl/lib/animators/states/ParticleScaleState\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\r\nvar ContextGLVertexBufferFormat_1 = require(\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\");\r\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\r\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\r\n/**\r\n * ...\r\n */\r\nvar ParticleScaleState = (function (_super) {\r\n    __extends(ParticleScaleState, _super);\r\n    function ParticleScaleState(animator, particleScaleNode) {\r\n        _super.call(this, animator, particleScaleNode);\r\n        this._particleScaleNode = particleScaleNode;\r\n        this._usesCycle = this._particleScaleNode._iUsesCycle;\r\n        this._usesPhase = this._particleScaleNode._iUsesPhase;\r\n        this._minScale = this._particleScaleNode._iMinScale;\r\n        this._maxScale = this._particleScaleNode._iMaxScale;\r\n        this._cycleDuration = this._particleScaleNode._iCycleDuration;\r\n        this._cyclePhase = this._particleScaleNode._iCyclePhase;\r\n        this.updateScaleData();\r\n    }\r\n    Object.defineProperty(ParticleScaleState.prototype, \"minScale\", {\r\n        /**\r\n         * Defines the end scale of the state, when in global mode. Defaults to 1.\r\n         */\r\n        get: function () {\r\n            return this._minScale;\r\n        },\r\n        set: function (value) {\r\n            this._minScale = value;\r\n            this.updateScaleData();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ParticleScaleState.prototype, \"maxScale\", {\r\n        /**\r\n         * Defines the end scale of the state, when in global mode. Defaults to 1.\r\n         */\r\n        get: function () {\r\n            return this._maxScale;\r\n        },\r\n        set: function (value) {\r\n            this._maxScale = value;\r\n            this.updateScaleData();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ParticleScaleState.prototype, \"cycleDuration\", {\r\n        /**\r\n         * Defines the duration of the animation in seconds, used as a period independent of particle duration when in global mode. Defaults to 1.\r\n         */\r\n        get: function () {\r\n            return this._cycleDuration;\r\n        },\r\n        set: function (value) {\r\n            this._cycleDuration = value;\r\n            this.updateScaleData();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ParticleScaleState.prototype, \"cyclePhase\", {\r\n        /**\r\n         * Defines the phase of the cycle in degrees, used as the starting offset of the cycle when in global mode. Defaults to 0.\r\n         */\r\n        get: function () {\r\n            return this._cyclePhase;\r\n        },\r\n        set: function (value) {\r\n            this._cyclePhase = value;\r\n            this.updateScaleData();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ParticleScaleState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\r\n        var index = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleScaleState.SCALE_INDEX);\r\n        if (this._particleScaleNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_STATIC) {\r\n            if (this._usesCycle) {\r\n                if (this._usesPhase)\r\n                    animationElements.activateVertexBuffer(index, this._particleScaleNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_4);\r\n                else\r\n                    animationElements.activateVertexBuffer(index, this._particleScaleNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_3);\r\n            }\r\n            else\r\n                animationElements.activateVertexBuffer(index, this._particleScaleNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_2);\r\n        }\r\n        else\r\n            shader.setVertexConst(index, this._scaleData.x, this._scaleData.y, this._scaleData.z, this._scaleData.w);\r\n    };\r\n    ParticleScaleState.prototype.updateScaleData = function () {\r\n        if (this._particleScaleNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) {\r\n            if (this._usesCycle) {\r\n                if (this._cycleDuration <= 0)\r\n                    throw (new Error(\"the cycle duration must be greater than zero\"));\r\n                this._scaleData = new Vector3D_1.Vector3D((this._minScale + this._maxScale) / 2, Math.abs(this._minScale - this._maxScale) / 2, Math.PI * 2 / this._cycleDuration, this._cyclePhase * Math.PI / 180);\r\n            }\r\n            else\r\n                this._scaleData = new Vector3D_1.Vector3D(this._minScale, this._maxScale - this._minScale, 0, 0);\r\n        }\r\n    };\r\n    /** @private */\r\n    ParticleScaleState.SCALE_INDEX = 0;\r\n    return ParticleScaleState;\r\n}(ParticleStateBase_1.ParticleStateBase));\r\nexports.ParticleScaleState = ParticleScaleState;\r\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\",\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\":undefined}],\"awayjs-renderergl/lib/animators/states/ParticleSegmentedColorState\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\r\n/**\r\n *\r\n */\r\nvar ParticleSegmentedColorState = (function (_super) {\r\n    __extends(ParticleSegmentedColorState, _super);\r\n    function ParticleSegmentedColorState(animator, particleSegmentedColorNode) {\r\n        _super.call(this, animator, particleSegmentedColorNode);\r\n        this._usesMultiplier = particleSegmentedColorNode._iUsesMultiplier;\r\n        this._usesOffset = particleSegmentedColorNode._iUsesOffset;\r\n        this._startColor = particleSegmentedColorNode._iStartColor;\r\n        this._endColor = particleSegmentedColorNode._iEndColor;\r\n        this._segmentPoints = particleSegmentedColorNode._iSegmentPoints;\r\n        this._numSegmentPoint = particleSegmentedColorNode._iNumSegmentPoint;\r\n        this.updateColorData();\r\n    }\r\n    Object.defineProperty(ParticleSegmentedColorState.prototype, \"startColor\", {\r\n        /**\r\n         * Defines the start color transform of the state, when in global mode.\r\n         */\r\n        get: function () {\r\n            return this._startColor;\r\n        },\r\n        set: function (value) {\r\n            this._startColor = value;\r\n            this.updateColorData();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ParticleSegmentedColorState.prototype, \"endColor\", {\r\n        /**\r\n         * Defines the end color transform of the state, when in global mode.\r\n         */\r\n        get: function () {\r\n            return this._endColor;\r\n        },\r\n        set: function (value) {\r\n            this._endColor = value;\r\n            this.updateColorData();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ParticleSegmentedColorState.prototype, \"numSegmentPoint\", {\r\n        /**\r\n         * Defines the number of segments.\r\n         */\r\n        get: function () {\r\n            return this._numSegmentPoint;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ParticleSegmentedColorState.prototype, \"segmentPoints\", {\r\n        /**\r\n         * Defines the key points of color\r\n         */\r\n        get: function () {\r\n            return this._segmentPoints;\r\n        },\r\n        set: function (value) {\r\n            this._segmentPoints = value;\r\n            this.updateColorData();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ParticleSegmentedColorState.prototype, \"usesMultiplier\", {\r\n        get: function () {\r\n            return this._usesMultiplier;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ParticleSegmentedColorState.prototype, \"usesOffset\", {\r\n        get: function () {\r\n            return this._usesOffset;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ParticleSegmentedColorState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\r\n        if (shader.usesFragmentAnimation) {\r\n            if (this._numSegmentPoint > 0)\r\n                shader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleSegmentedColorState.TIME_DATA_INDEX), this._timeLifeData[0], this._timeLifeData[1], this._timeLifeData[2], this._timeLifeData[3]);\r\n            if (this._usesMultiplier)\r\n                shader.setVertexConstFromArray(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleSegmentedColorState.START_MULTIPLIER_INDEX), this._multiplierData);\r\n            if (this._usesOffset)\r\n                shader.setVertexConstFromArray(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleSegmentedColorState.START_OFFSET_INDEX), this._offsetData);\r\n        }\r\n    };\r\n    ParticleSegmentedColorState.prototype.updateColorData = function () {\r\n        this._timeLifeData = new Float32Array(4);\r\n        this._multiplierData = new Float32Array(4 * (this._numSegmentPoint + 1));\r\n        this._offsetData = new Float32Array(4 * (this._numSegmentPoint + 1));\r\n        //cut off the time data\r\n        var i;\r\n        var j = 0;\r\n        var count = this._numSegmentPoint > 3 ? 3 : this._numSegmentPoint;\r\n        for (i = 0; i < count; i++) {\r\n            if (i == 0)\r\n                this._timeLifeData[j++] = this._segmentPoints[i].life;\r\n            else\r\n                this._timeLifeData[j++] = this._segmentPoints[i].life - this._segmentPoints[i - 1].life;\r\n        }\r\n        i = count;\r\n        if (this._numSegmentPoint == 0)\r\n            this._timeLifeData[j++] = 1;\r\n        else\r\n            this._timeLifeData[j++] = 1 - this._segmentPoints[i - 1].life;\r\n        if (this._usesMultiplier) {\r\n            j = 0;\r\n            this._multiplierData[j++] = this._startColor.redMultiplier;\r\n            this._multiplierData[j++] = this._startColor.greenMultiplier;\r\n            this._multiplierData[j++] = this._startColor.blueMultiplier;\r\n            this._multiplierData[j++] = this._startColor.alphaMultiplier;\r\n            for (i = 0; i < this._numSegmentPoint; i++) {\r\n                if (i == 0) {\r\n                    this._multiplierData[j++] = (this._segmentPoints[i].color.redMultiplier - this._startColor.redMultiplier) / this._timeLifeData[i];\r\n                    this._multiplierData[j++] = (this._segmentPoints[i].color.greenMultiplier - this._startColor.greenMultiplier) / this._timeLifeData[i];\r\n                    this._multiplierData[j++] = (this._segmentPoints[i].color.blueMultiplier - this._startColor.blueMultiplier) / this._timeLifeData[i];\r\n                    this._multiplierData[j++] = (this._segmentPoints[i].color.alphaMultiplier - this._startColor.alphaMultiplier) / this._timeLifeData[i];\r\n                }\r\n                else {\r\n                    this._multiplierData[j++] = (this._segmentPoints[i].color.redMultiplier - this._segmentPoints[i - 1].color.redMultiplier) / this._timeLifeData[i];\r\n                    this._multiplierData[j++] = (this._segmentPoints[i].color.greenMultiplier - this._segmentPoints[i - 1].color.greenMultiplier) / this._timeLifeData[i];\r\n                    this._multiplierData[j++] = (this._segmentPoints[i].color.blueMultiplier - this._segmentPoints[i - 1].color.blueMultiplier) / this._timeLifeData[i];\r\n                    this._multiplierData[j++] = (this._segmentPoints[i].color.alphaMultiplier - this._segmentPoints[i - 1].color.alphaMultiplier) / this._timeLifeData[i];\r\n                }\r\n            }\r\n            i = this._numSegmentPoint;\r\n            if (this._numSegmentPoint == 0) {\r\n                this._multiplierData[j++] = this._endColor.redMultiplier - this._startColor.redMultiplier;\r\n                this._multiplierData[j++] = this._endColor.greenMultiplier - this._startColor.greenMultiplier;\r\n                this._multiplierData[j++] = this._endColor.blueMultiplier - this._startColor.blueMultiplier;\r\n                this._multiplierData[j++] = this._endColor.alphaMultiplier - this._startColor.alphaMultiplier;\r\n            }\r\n            else {\r\n                this._multiplierData[j++] = (this._endColor.redMultiplier - this._segmentPoints[i - 1].color.redMultiplier) / this._timeLifeData[i];\r\n                this._multiplierData[j++] = (this._endColor.greenMultiplier - this._segmentPoints[i - 1].color.greenMultiplier) / this._timeLifeData[i];\r\n                this._multiplierData[j++] = (this._endColor.blueMultiplier - this._segmentPoints[i - 1].color.blueMultiplier) / this._timeLifeData[i];\r\n                this._multiplierData[j++] = (this._endColor.alphaMultiplier - this._segmentPoints[i - 1].color.alphaMultiplier) / this._timeLifeData[i];\r\n            }\r\n        }\r\n        if (this._usesOffset) {\r\n            j = 0;\r\n            this._offsetData[j++] = this._startColor.redOffset / 255;\r\n            this._offsetData[j++] = this._startColor.greenOffset / 255;\r\n            this._offsetData[j++] = this._startColor.blueOffset / 255;\r\n            this._offsetData[j++] = this._startColor.alphaOffset / 255;\r\n            for (i = 0; i < this._numSegmentPoint; i++) {\r\n                if (i == 0) {\r\n                    this._offsetData[j++] = (this._segmentPoints[i].color.redOffset - this._startColor.redOffset) / this._timeLifeData[i] / 255;\r\n                    this._offsetData[j++] = (this._segmentPoints[i].color.greenOffset - this._startColor.greenOffset) / this._timeLifeData[i] / 255;\r\n                    this._offsetData[j++] = (this._segmentPoints[i].color.blueOffset - this._startColor.blueOffset) / this._timeLifeData[i] / 255;\r\n                    this._offsetData[j++] = (this._segmentPoints[i].color.alphaOffset - this._startColor.alphaOffset) / this._timeLifeData[i] / 255;\r\n                }\r\n                else {\r\n                    this._offsetData[j++] = (this._segmentPoints[i].color.redOffset - this._segmentPoints[i - 1].color.redOffset) / this._timeLifeData[i] / 255;\r\n                    this._offsetData[j++] = (this._segmentPoints[i].color.greenOffset - this._segmentPoints[i - 1].color.greenOffset) / this._timeLifeData[i] / 255;\r\n                    this._offsetData[j++] = (this._segmentPoints[i].color.blueOffset - this._segmentPoints[i - 1].color.blueOffset) / this._timeLifeData[i] / 255;\r\n                    this._offsetData[j++] = (this._segmentPoints[i].color.alphaOffset - this._segmentPoints[i - 1].color.alphaOffset) / this._timeLifeData[i] / 255;\r\n                }\r\n            }\r\n            i = this._numSegmentPoint;\r\n            if (this._numSegmentPoint == 0) {\r\n                this._offsetData[j++] = (this._endColor.redOffset - this._startColor.redOffset) / 255;\r\n                this._offsetData[j++] = (this._endColor.greenOffset - this._startColor.greenOffset) / 255;\r\n                this._offsetData[j++] = (this._endColor.blueOffset - this._startColor.blueOffset) / 255;\r\n                this._offsetData[j++] = (this._endColor.alphaOffset - this._startColor.alphaOffset) / 255;\r\n            }\r\n            else {\r\n                this._offsetData[i] = (this._endColor.redOffset - this._segmentPoints[i - 1].color.redOffset) / this._timeLifeData[i] / 255;\r\n                this._offsetData[j++] = (this._endColor.greenOffset - this._segmentPoints[i - 1].color.greenOffset) / this._timeLifeData[i] / 255;\r\n                this._offsetData[j++] = (this._endColor.blueOffset - this._segmentPoints[i - 1].color.blueOffset) / this._timeLifeData[i] / 255;\r\n                this._offsetData[j++] = (this._endColor.alphaOffset - this._segmentPoints[i - 1].color.alphaOffset) / this._timeLifeData[i] / 255;\r\n            }\r\n        }\r\n    };\r\n    /** @private */\r\n    ParticleSegmentedColorState.START_MULTIPLIER_INDEX = 0;\r\n    /** @private */\r\n    ParticleSegmentedColorState.START_OFFSET_INDEX = 1;\r\n    /** @private */\r\n    ParticleSegmentedColorState.TIME_DATA_INDEX = 2;\r\n    return ParticleSegmentedColorState;\r\n}(ParticleStateBase_1.ParticleStateBase));\r\nexports.ParticleSegmentedColorState = ParticleSegmentedColorState;\r\n},{\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\"}],\"awayjs-renderergl/lib/animators/states/ParticleSpriteSheetState\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar ContextGLVertexBufferFormat_1 = require(\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\");\r\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\r\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\r\n/**\r\n * ...\r\n */\r\nvar ParticleSpriteSheetState = (function (_super) {\r\n    __extends(ParticleSpriteSheetState, _super);\r\n    function ParticleSpriteSheetState(animator, particleSpriteSheetNode) {\r\n        _super.call(this, animator, particleSpriteSheetNode);\r\n        this._particleSpriteSheetNode = particleSpriteSheetNode;\r\n        this._usesCycle = this._particleSpriteSheetNode._iUsesCycle;\r\n        this._usesPhase = this._particleSpriteSheetNode._iUsesCycle;\r\n        this._totalFrames = this._particleSpriteSheetNode._iTotalFrames;\r\n        this._numColumns = this._particleSpriteSheetNode._iNumColumns;\r\n        this._numRows = this._particleSpriteSheetNode._iNumRows;\r\n        this._cycleDuration = this._particleSpriteSheetNode._iCycleDuration;\r\n        this._cyclePhase = this._particleSpriteSheetNode._iCyclePhase;\r\n        this.updateSpriteSheetData();\r\n    }\r\n    Object.defineProperty(ParticleSpriteSheetState.prototype, \"cyclePhase\", {\r\n        /**\r\n         * Defines the cycle phase, when in global mode. Defaults to zero.\r\n         */\r\n        get: function () {\r\n            return this._cyclePhase;\r\n        },\r\n        set: function (value) {\r\n            this._cyclePhase = value;\r\n            this.updateSpriteSheetData();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ParticleSpriteSheetState.prototype, \"cycleDuration\", {\r\n        /**\r\n         * Defines the cycle duration in seconds, when in global mode. Defaults to 1.\r\n         */\r\n        get: function () {\r\n            return this._cycleDuration;\r\n        },\r\n        set: function (value) {\r\n            this._cycleDuration = value;\r\n            this.updateSpriteSheetData();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ParticleSpriteSheetState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\r\n        if (!shader.usesUVTransform) {\r\n            shader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleSpriteSheetState.UV_INDEX_0), this._spriteSheetData[0], this._spriteSheetData[1], this._spriteSheetData[2], this._spriteSheetData[3]);\r\n            if (this._usesCycle) {\r\n                var index = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleSpriteSheetState.UV_INDEX_1);\r\n                if (this._particleSpriteSheetNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_STATIC) {\r\n                    if (this._usesPhase)\r\n                        animationElements.activateVertexBuffer(index, this._particleSpriteSheetNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_3);\r\n                    else\r\n                        animationElements.activateVertexBuffer(index, this._particleSpriteSheetNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_2);\r\n                }\r\n                else\r\n                    shader.setVertexConst(index, this._spriteSheetData[4], this._spriteSheetData[5]);\r\n            }\r\n        }\r\n    };\r\n    ParticleSpriteSheetState.prototype.updateSpriteSheetData = function () {\r\n        this._spriteSheetData = new Array(8);\r\n        var uTotal = this._totalFrames / this._numColumns;\r\n        this._spriteSheetData[0] = uTotal;\r\n        this._spriteSheetData[1] = 1 / this._numColumns;\r\n        this._spriteSheetData[2] = 1 / this._numRows;\r\n        if (this._usesCycle) {\r\n            if (this._cycleDuration <= 0)\r\n                throw (new Error(\"the cycle duration must be greater than zero\"));\r\n            this._spriteSheetData[4] = uTotal / this._cycleDuration;\r\n            this._spriteSheetData[5] = this._cycleDuration;\r\n            if (this._usesPhase)\r\n                this._spriteSheetData[6] = this._cyclePhase;\r\n        }\r\n    };\r\n    /** @private */\r\n    ParticleSpriteSheetState.UV_INDEX_0 = 0;\r\n    /** @private */\r\n    ParticleSpriteSheetState.UV_INDEX_1 = 1;\r\n    return ParticleSpriteSheetState;\r\n}(ParticleStateBase_1.ParticleStateBase));\r\nexports.ParticleSpriteSheetState = ParticleSpriteSheetState;\r\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\",\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\":undefined}],\"awayjs-renderergl/lib/animators/states/ParticleStateBase\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar AnimationStateBase_1 = require(\"../../animators/states/AnimationStateBase\");\r\n/**\r\n * ...\r\n */\r\nvar ParticleStateBase = (function (_super) {\r\n    __extends(ParticleStateBase, _super);\r\n    function ParticleStateBase(animator, particleNode, needUpdateTime) {\r\n        if (needUpdateTime === void 0) { needUpdateTime = false; }\r\n        _super.call(this, animator, particleNode);\r\n        this._pDynamicProperties = new Array();\r\n        this._pDynamicPropertiesDirty = new Object();\r\n        this._pParticleAnimator = animator;\r\n        this._particleNode = particleNode;\r\n        this._pNeedUpdateTime = needUpdateTime;\r\n    }\r\n    Object.defineProperty(ParticleStateBase.prototype, \"needUpdateTime\", {\r\n        get: function () {\r\n            return this._pNeedUpdateTime;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ParticleStateBase.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\r\n    };\r\n    ParticleStateBase.prototype._pUpdateDynamicProperties = function (animationElements) {\r\n        this._pDynamicPropertiesDirty[animationElements._iUniqueId] = true;\r\n        var animationParticles = animationElements.animationParticles;\r\n        var vertexData = animationElements.vertexData;\r\n        var totalLenOfOneVertex = animationElements.totalLenOfOneVertex;\r\n        var dataLength = this._particleNode.dataLength;\r\n        var dataOffset = this._particleNode._iDataOffset;\r\n        var vertexLength;\r\n        //\t\t\tvar particleOffset:number;\r\n        var startingOffset;\r\n        var vertexOffset;\r\n        var data;\r\n        var animationParticle;\r\n        //\t\t\tvar numParticles:number = _positions.length/dataLength;\r\n        var numParticles = this._pDynamicProperties.length;\r\n        var i = 0;\r\n        var j = 0;\r\n        var k = 0;\r\n        //loop through all particles\r\n        while (i < numParticles) {\r\n            //loop through each particle data for the current particle\r\n            while (j < numParticles && (animationParticle = animationParticles[j]).index == i) {\r\n                data = this._pDynamicProperties[i];\r\n                vertexLength = animationParticle.numVertices * totalLenOfOneVertex;\r\n                startingOffset = animationParticle.startVertexIndex * totalLenOfOneVertex + dataOffset;\r\n                //loop through each vertex in the particle data\r\n                for (k = 0; k < vertexLength; k += totalLenOfOneVertex) {\r\n                    vertexOffset = startingOffset + k;\r\n                    //\t\t\t\t\t\tparticleOffset = i * dataLength;\r\n                    //loop through all vertex data for the current particle data\r\n                    for (k = 0; k < vertexLength; k += totalLenOfOneVertex) {\r\n                        vertexOffset = startingOffset + k;\r\n                        vertexData[vertexOffset++] = data.x;\r\n                        vertexData[vertexOffset++] = data.y;\r\n                        vertexData[vertexOffset++] = data.z;\r\n                        if (dataLength == 4)\r\n                            vertexData[vertexOffset++] = data.w;\r\n                    }\r\n                }\r\n                j++;\r\n            }\r\n            i++;\r\n        }\r\n        animationElements.invalidateBuffer();\r\n    };\r\n    return ParticleStateBase;\r\n}(AnimationStateBase_1.AnimationStateBase));\r\nexports.ParticleStateBase = ParticleStateBase;\r\n},{\"../../animators/states/AnimationStateBase\":\"awayjs-renderergl/lib/animators/states/AnimationStateBase\"}],\"awayjs-renderergl/lib/animators/states/ParticleTimeState\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar ContextGLVertexBufferFormat_1 = require(\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\");\r\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\r\n/**\r\n * ...\r\n */\r\nvar ParticleTimeState = (function (_super) {\r\n    __extends(ParticleTimeState, _super);\r\n    function ParticleTimeState(animator, particleTimeNode) {\r\n        _super.call(this, animator, particleTimeNode, true);\r\n        this._particleTimeNode = particleTimeNode;\r\n    }\r\n    ParticleTimeState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\r\n        animationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleTimeState.TIME_STREAM_INDEX), this._particleTimeNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_4);\r\n        var particleTime = this._pTime / 1000;\r\n        shader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleTimeState.TIME_CONSTANT_INDEX), particleTime, particleTime, particleTime, particleTime);\r\n    };\r\n    /** @private */\r\n    ParticleTimeState.TIME_STREAM_INDEX = 0;\r\n    /** @private */\r\n    ParticleTimeState.TIME_CONSTANT_INDEX = 1;\r\n    return ParticleTimeState;\r\n}(ParticleStateBase_1.ParticleStateBase));\r\nexports.ParticleTimeState = ParticleTimeState;\r\n},{\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\",\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\":undefined}],\"awayjs-renderergl/lib/animators/states/ParticleUVState\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\r\n/**\r\n * ...\r\n */\r\nvar ParticleUVState = (function (_super) {\r\n    __extends(ParticleUVState, _super);\r\n    function ParticleUVState(animator, particleUVNode) {\r\n        _super.call(this, animator, particleUVNode);\r\n        this._particleUVNode = particleUVNode;\r\n    }\r\n    ParticleUVState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\r\n        if (!shader.usesUVTransform) {\r\n            var index = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleUVState.UV_INDEX);\r\n            var data = this._particleUVNode._iUvData;\r\n            shader.setVertexConst(index, data.x, data.y);\r\n        }\r\n    };\r\n    /** @private */\r\n    ParticleUVState.UV_INDEX = 0;\r\n    return ParticleUVState;\r\n}(ParticleStateBase_1.ParticleStateBase));\r\nexports.ParticleUVState = ParticleUVState;\r\n},{\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\"}],\"awayjs-renderergl/lib/animators/states/ParticleVelocityState\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar ContextGLVertexBufferFormat_1 = require(\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\");\r\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\r\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\r\n/**\r\n * ...\r\n */\r\nvar ParticleVelocityState = (function (_super) {\r\n    __extends(ParticleVelocityState, _super);\r\n    function ParticleVelocityState(animator, particleVelocityNode) {\r\n        _super.call(this, animator, particleVelocityNode);\r\n        this._particleVelocityNode = particleVelocityNode;\r\n        this._velocity = this._particleVelocityNode._iVelocity;\r\n    }\r\n    Object.defineProperty(ParticleVelocityState.prototype, \"velocity\", {\r\n        /**\r\n         * Defines the default velocity vector of the state, used when in global mode.\r\n         */\r\n        get: function () {\r\n            return this._velocity;\r\n        },\r\n        set: function (value) {\r\n            this._velocity = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     *\r\n     */\r\n    ParticleVelocityState.prototype.getVelocities = function () {\r\n        return this._pDynamicProperties;\r\n    };\r\n    ParticleVelocityState.prototype.setVelocities = function (value) {\r\n        this._pDynamicProperties = value;\r\n        this._pDynamicPropertiesDirty = new Object();\r\n    };\r\n    ParticleVelocityState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\r\n        if (this._particleVelocityNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_DYNAMIC && !this._pDynamicPropertiesDirty[animationElements._iUniqueId])\r\n            this._pUpdateDynamicProperties(animationElements);\r\n        var index = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleVelocityState.VELOCITY_INDEX);\r\n        if (this._particleVelocityNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL)\r\n            shader.setVertexConst(index, this._velocity.x, this._velocity.y, this._velocity.z);\r\n        else\r\n            animationElements.activateVertexBuffer(index, this._particleVelocityNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_3);\r\n    };\r\n    /** @private */\r\n    ParticleVelocityState.VELOCITY_INDEX = 0;\r\n    return ParticleVelocityState;\r\n}(ParticleStateBase_1.ParticleStateBase));\r\nexports.ParticleVelocityState = ParticleVelocityState;\r\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\",\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\":undefined}],\"awayjs-renderergl/lib/animators/states/SkeletonBinaryLERPState\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar JointPose_1 = require(\"../../animators/data/JointPose\");\r\nvar SkeletonPose_1 = require(\"../../animators/data/SkeletonPose\");\r\nvar AnimationStateBase_1 = require(\"../../animators/states/AnimationStateBase\");\r\n/**\r\n *\r\n */\r\nvar SkeletonBinaryLERPState = (function (_super) {\r\n    __extends(SkeletonBinaryLERPState, _super);\r\n    function SkeletonBinaryLERPState(animator, skeletonAnimationNode) {\r\n        _super.call(this, animator, skeletonAnimationNode);\r\n        this._blendWeight = 0;\r\n        this._skeletonPose = new SkeletonPose_1.SkeletonPose();\r\n        this._skeletonPoseDirty = true;\r\n        this._skeletonAnimationNode = skeletonAnimationNode;\r\n        this._inputA = animator.getAnimationState(this._skeletonAnimationNode.inputA);\r\n        this._inputB = animator.getAnimationState(this._skeletonAnimationNode.inputB);\r\n    }\r\n    Object.defineProperty(SkeletonBinaryLERPState.prototype, \"blendWeight\", {\r\n        /**\r\n         * Defines a fractional value between 0 and 1 representing the blending ratio between inputA (0) and inputB (1),\r\n         * used to produce the skeleton pose output.\r\n         *\r\n         * @see inputA\r\n         * @see inputB\r\n         */\r\n        get: function () {\r\n            return this._blendWeight;\r\n        },\r\n        set: function (value) {\r\n            this._blendWeight = value;\r\n            this._pPositionDeltaDirty = true;\r\n            this._skeletonPoseDirty = true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    SkeletonBinaryLERPState.prototype.phase = function (value) {\r\n        this._skeletonPoseDirty = true;\r\n        this._pPositionDeltaDirty = true;\r\n        this._inputA.phase(value);\r\n        this._inputB.phase(value);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    SkeletonBinaryLERPState.prototype._pUpdateTime = function (time) {\r\n        this._skeletonPoseDirty = true;\r\n        this._inputA.update(time);\r\n        this._inputB.update(time);\r\n        _super.prototype._pUpdateTime.call(this, time);\r\n    };\r\n    /**\r\n     * Returns the current skeleton pose of the animation in the clip based on the internal playhead position.\r\n     */\r\n    SkeletonBinaryLERPState.prototype.getSkeletonPose = function (skeleton) {\r\n        if (this._skeletonPoseDirty)\r\n            this.updateSkeletonPose(skeleton);\r\n        return this._skeletonPose;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    SkeletonBinaryLERPState.prototype._pUpdatePositionDelta = function () {\r\n        this._pPositionDeltaDirty = false;\r\n        var deltA = this._inputA.positionDelta;\r\n        var deltB = this._inputB.positionDelta;\r\n        this._pRootDelta.x = deltA.x + this._blendWeight * (deltB.x - deltA.x);\r\n        this._pRootDelta.y = deltA.y + this._blendWeight * (deltB.y - deltA.y);\r\n        this._pRootDelta.z = deltA.z + this._blendWeight * (deltB.z - deltA.z);\r\n    };\r\n    /**\r\n     * Updates the output skeleton pose of the node based on the blendWeight value between input nodes.\r\n     *\r\n     * @param skeleton The skeleton used by the animator requesting the ouput pose.\r\n     */\r\n    SkeletonBinaryLERPState.prototype.updateSkeletonPose = function (skeleton) {\r\n        this._skeletonPoseDirty = false;\r\n        var endPose;\r\n        var endPoses = this._skeletonPose.jointPoses;\r\n        var poses1 = this._inputA.getSkeletonPose(skeleton).jointPoses;\r\n        var poses2 = this._inputB.getSkeletonPose(skeleton).jointPoses;\r\n        var pose1, pose2;\r\n        var p1, p2;\r\n        var tr;\r\n        var numJoints = skeleton.numJoints;\r\n        // :s\r\n        if (endPoses.length != numJoints)\r\n            endPoses.length = numJoints;\r\n        for (var i = 0; i < numJoints; ++i) {\r\n            endPose = endPoses[i];\r\n            if (endPose == null)\r\n                endPose = endPoses[i] = new JointPose_1.JointPose();\r\n            pose1 = poses1[i];\r\n            pose2 = poses2[i];\r\n            p1 = pose1.translation;\r\n            p2 = pose2.translation;\r\n            endPose.orientation.lerp(pose1.orientation, pose2.orientation, this._blendWeight);\r\n            tr = endPose.translation;\r\n            tr.x = p1.x + this._blendWeight * (p2.x - p1.x);\r\n            tr.y = p1.y + this._blendWeight * (p2.y - p1.y);\r\n            tr.z = p1.z + this._blendWeight * (p2.z - p1.z);\r\n        }\r\n    };\r\n    return SkeletonBinaryLERPState;\r\n}(AnimationStateBase_1.AnimationStateBase));\r\nexports.SkeletonBinaryLERPState = SkeletonBinaryLERPState;\r\n},{\"../../animators/data/JointPose\":\"awayjs-renderergl/lib/animators/data/JointPose\",\"../../animators/data/SkeletonPose\":\"awayjs-renderergl/lib/animators/data/SkeletonPose\",\"../../animators/states/AnimationStateBase\":\"awayjs-renderergl/lib/animators/states/AnimationStateBase\"}],\"awayjs-renderergl/lib/animators/states/SkeletonClipState\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\r\nvar JointPose_1 = require(\"../../animators/data/JointPose\");\r\nvar SkeletonPose_1 = require(\"../../animators/data/SkeletonPose\");\r\nvar AnimationClipState_1 = require(\"../../animators/states/AnimationClipState\");\r\n/**\r\n *\r\n */\r\nvar SkeletonClipState = (function (_super) {\r\n    __extends(SkeletonClipState, _super);\r\n    function SkeletonClipState(animator, skeletonClipNode) {\r\n        _super.call(this, animator, skeletonClipNode);\r\n        this._rootPos = new Vector3D_1.Vector3D();\r\n        this._skeletonPose = new SkeletonPose_1.SkeletonPose();\r\n        this._skeletonPoseDirty = true;\r\n        this._skeletonClipNode = skeletonClipNode;\r\n        this._frames = this._skeletonClipNode.frames;\r\n    }\r\n    Object.defineProperty(SkeletonClipState.prototype, \"currentPose\", {\r\n        /**\r\n         * Returns the current skeleton pose frame of animation in the clip based on the internal playhead position.\r\n         */\r\n        get: function () {\r\n            if (this._pFramesDirty)\r\n                this._pUpdateFrames();\r\n            return this._currentPose;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SkeletonClipState.prototype, \"nextPose\", {\r\n        /**\r\n         * Returns the next skeleton pose frame of animation in the clip based on the internal playhead position.\r\n         */\r\n        get: function () {\r\n            if (this._pFramesDirty)\r\n                this._pUpdateFrames();\r\n            return this._nextPose;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns the current skeleton pose of the animation in the clip based on the internal playhead position.\r\n     */\r\n    SkeletonClipState.prototype.getSkeletonPose = function (skeleton) {\r\n        if (this._skeletonPoseDirty)\r\n            this.updateSkeletonPose(skeleton);\r\n        return this._skeletonPose;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    SkeletonClipState.prototype._pUpdateTime = function (time) {\r\n        this._skeletonPoseDirty = true;\r\n        _super.prototype._pUpdateTime.call(this, time);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    SkeletonClipState.prototype._pUpdateFrames = function () {\r\n        _super.prototype._pUpdateFrames.call(this);\r\n        this._currentPose = this._frames[this._pCurrentFrame];\r\n        if (this._skeletonClipNode.looping && this._pNextFrame >= this._skeletonClipNode.lastFrame) {\r\n            this._nextPose = this._frames[0];\r\n            this._pAnimator.dispatchCycleEvent();\r\n        }\r\n        else\r\n            this._nextPose = this._frames[this._pNextFrame];\r\n    };\r\n    /**\r\n     * Updates the output skeleton pose of the node based on the internal playhead position.\r\n     *\r\n     * @param skeleton The skeleton used by the animator requesting the ouput pose.\r\n     */\r\n    SkeletonClipState.prototype.updateSkeletonPose = function (skeleton) {\r\n        this._skeletonPoseDirty = false;\r\n        if (!this._skeletonClipNode.totalDuration)\r\n            return;\r\n        if (this._pFramesDirty)\r\n            this._pUpdateFrames();\r\n        var currentPose = this._currentPose.jointPoses;\r\n        var nextPose = this._nextPose.jointPoses;\r\n        var numJoints = skeleton.numJoints;\r\n        var p1, p2;\r\n        var pose1, pose2;\r\n        var endPoses = this._skeletonPose.jointPoses;\r\n        var endPose;\r\n        var tr;\r\n        // :s\r\n        if (endPoses.length != numJoints)\r\n            endPoses.length = numJoints;\r\n        if ((numJoints != currentPose.length) || (numJoints != nextPose.length))\r\n            throw new Error(\"joint counts don't match!\");\r\n        for (var i = 0; i < numJoints; ++i) {\r\n            endPose = endPoses[i];\r\n            if (endPose == null)\r\n                endPose = endPoses[i] = new JointPose_1.JointPose();\r\n            pose1 = currentPose[i];\r\n            pose2 = nextPose[i];\r\n            p1 = pose1.translation;\r\n            p2 = pose2.translation;\r\n            if (this._skeletonClipNode.highQuality)\r\n                endPose.orientation.slerp(pose1.orientation, pose2.orientation, this._pBlendWeight);\r\n            else\r\n                endPose.orientation.lerp(pose1.orientation, pose2.orientation, this._pBlendWeight);\r\n            if (i > 0) {\r\n                tr = endPose.translation;\r\n                tr.x = p1.x + this._pBlendWeight * (p2.x - p1.x);\r\n                tr.y = p1.y + this._pBlendWeight * (p2.y - p1.y);\r\n                tr.z = p1.z + this._pBlendWeight * (p2.z - p1.z);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    SkeletonClipState.prototype._pUpdatePositionDelta = function () {\r\n        this._pPositionDeltaDirty = false;\r\n        if (this._pFramesDirty)\r\n            this._pUpdateFrames();\r\n        var p1, p2, p3;\r\n        var totalDelta = this._skeletonClipNode.totalDelta;\r\n        // jumping back, need to reset position\r\n        if ((this._pTimeDir > 0 && this._pNextFrame < this._pOldFrame) || (this._pTimeDir < 0 && this._pNextFrame > this._pOldFrame)) {\r\n            this._rootPos.x -= totalDelta.x * this._pTimeDir;\r\n            this._rootPos.y -= totalDelta.y * this._pTimeDir;\r\n            this._rootPos.z -= totalDelta.z * this._pTimeDir;\r\n        }\r\n        var dx = this._rootPos.x;\r\n        var dy = this._rootPos.y;\r\n        var dz = this._rootPos.z;\r\n        if (this._skeletonClipNode.stitchFinalFrame && this._pNextFrame == this._skeletonClipNode.lastFrame) {\r\n            p1 = this._frames[0].jointPoses[0].translation;\r\n            p2 = this._frames[1].jointPoses[0].translation;\r\n            p3 = this._currentPose.jointPoses[0].translation;\r\n            this._rootPos.x = p3.x + p1.x + this._pBlendWeight * (p2.x - p1.x);\r\n            this._rootPos.y = p3.y + p1.y + this._pBlendWeight * (p2.y - p1.y);\r\n            this._rootPos.z = p3.z + p1.z + this._pBlendWeight * (p2.z - p1.z);\r\n        }\r\n        else {\r\n            p1 = this._currentPose.jointPoses[0].translation;\r\n            p2 = this._frames[this._pNextFrame].jointPoses[0].translation; //cover the instances where we wrap the pose but still want the final frame translation values\r\n            this._rootPos.x = p1.x + this._pBlendWeight * (p2.x - p1.x);\r\n            this._rootPos.y = p1.y + this._pBlendWeight * (p2.y - p1.y);\r\n            this._rootPos.z = p1.z + this._pBlendWeight * (p2.z - p1.z);\r\n        }\r\n        this._pRootDelta.x = this._rootPos.x - dx;\r\n        this._pRootDelta.y = this._rootPos.y - dy;\r\n        this._pRootDelta.z = this._rootPos.z - dz;\r\n        this._pOldFrame = this._pNextFrame;\r\n    };\r\n    return SkeletonClipState;\r\n}(AnimationClipState_1.AnimationClipState));\r\nexports.SkeletonClipState = SkeletonClipState;\r\n},{\"../../animators/data/JointPose\":\"awayjs-renderergl/lib/animators/data/JointPose\",\"../../animators/data/SkeletonPose\":\"awayjs-renderergl/lib/animators/data/SkeletonPose\",\"../../animators/states/AnimationClipState\":\"awayjs-renderergl/lib/animators/states/AnimationClipState\",\"awayjs-core/lib/geom/Vector3D\":undefined}],\"awayjs-renderergl/lib/animators/states/SkeletonDifferenceState\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Quaternion_1 = require(\"awayjs-core/lib/geom/Quaternion\");\r\nvar JointPose_1 = require(\"../../animators/data/JointPose\");\r\nvar SkeletonPose_1 = require(\"../../animators/data/SkeletonPose\");\r\nvar AnimationStateBase_1 = require(\"../../animators/states/AnimationStateBase\");\r\n/**\r\n *\r\n */\r\nvar SkeletonDifferenceState = (function (_super) {\r\n    __extends(SkeletonDifferenceState, _super);\r\n    function SkeletonDifferenceState(animator, skeletonAnimationNode) {\r\n        _super.call(this, animator, skeletonAnimationNode);\r\n        this._blendWeight = 0;\r\n        this._skeletonPose = new SkeletonPose_1.SkeletonPose();\r\n        this._skeletonPoseDirty = true;\r\n        this._skeletonAnimationNode = skeletonAnimationNode;\r\n        this._baseInput = animator.getAnimationState(this._skeletonAnimationNode.baseInput);\r\n        this._differenceInput = animator.getAnimationState(this._skeletonAnimationNode.differenceInput);\r\n    }\r\n    Object.defineProperty(SkeletonDifferenceState.prototype, \"blendWeight\", {\r\n        /**\r\n         * Defines a fractional value between 0 and 1 representing the blending ratio between the base input (0) and difference input (1),\r\n         * used to produce the skeleton pose output.\r\n         *\r\n         * @see #baseInput\r\n         * @see #differenceInput\r\n         */\r\n        get: function () {\r\n            return this._blendWeight;\r\n        },\r\n        set: function (value) {\r\n            this._blendWeight = value;\r\n            this._pPositionDeltaDirty = true;\r\n            this._skeletonPoseDirty = true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    SkeletonDifferenceState.prototype.phase = function (value) {\r\n        this._skeletonPoseDirty = true;\r\n        this._pPositionDeltaDirty = true;\r\n        this._baseInput.phase(value);\r\n        this._baseInput.phase(value);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    SkeletonDifferenceState.prototype._pUpdateTime = function (time) {\r\n        this._skeletonPoseDirty = true;\r\n        this._baseInput.update(time);\r\n        this._differenceInput.update(time);\r\n        _super.prototype._pUpdateTime.call(this, time);\r\n    };\r\n    /**\r\n     * Returns the current skeleton pose of the animation in the clip based on the internal playhead position.\r\n     */\r\n    SkeletonDifferenceState.prototype.getSkeletonPose = function (skeleton) {\r\n        if (this._skeletonPoseDirty)\r\n            this.updateSkeletonPose(skeleton);\r\n        return this._skeletonPose;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    SkeletonDifferenceState.prototype._pUpdatePositionDelta = function () {\r\n        this._pPositionDeltaDirty = false;\r\n        var deltA = this._baseInput.positionDelta;\r\n        var deltB = this._differenceInput.positionDelta;\r\n        this.positionDelta.x = deltA.x + this._blendWeight * deltB.x;\r\n        this.positionDelta.y = deltA.y + this._blendWeight * deltB.y;\r\n        this.positionDelta.z = deltA.z + this._blendWeight * deltB.z;\r\n    };\r\n    /**\r\n     * Updates the output skeleton pose of the node based on the blendWeight value between base input and difference input nodes.\r\n     *\r\n     * @param skeleton The skeleton used by the animator requesting the ouput pose.\r\n     */\r\n    SkeletonDifferenceState.prototype.updateSkeletonPose = function (skeleton) {\r\n        this._skeletonPoseDirty = false;\r\n        var endPose;\r\n        var endPoses = this._skeletonPose.jointPoses;\r\n        var basePoses = this._baseInput.getSkeletonPose(skeleton).jointPoses;\r\n        var diffPoses = this._differenceInput.getSkeletonPose(skeleton).jointPoses;\r\n        var base, diff;\r\n        var basePos, diffPos;\r\n        var tr;\r\n        var numJoints = skeleton.numJoints;\r\n        // :s\r\n        if (endPoses.length != numJoints)\r\n            endPoses.length = numJoints;\r\n        for (var i = 0; i < numJoints; ++i) {\r\n            endPose = endPoses[i];\r\n            if (endPose == null)\r\n                endPose = endPoses[i] = new JointPose_1.JointPose();\r\n            base = basePoses[i];\r\n            diff = diffPoses[i];\r\n            basePos = base.translation;\r\n            diffPos = diff.translation;\r\n            SkeletonDifferenceState._tempQuat.multiply(diff.orientation, base.orientation);\r\n            endPose.orientation.lerp(base.orientation, SkeletonDifferenceState._tempQuat, this._blendWeight);\r\n            tr = endPose.translation;\r\n            tr.x = basePos.x + this._blendWeight * diffPos.x;\r\n            tr.y = basePos.y + this._blendWeight * diffPos.y;\r\n            tr.z = basePos.z + this._blendWeight * diffPos.z;\r\n        }\r\n    };\r\n    SkeletonDifferenceState._tempQuat = new Quaternion_1.Quaternion();\r\n    return SkeletonDifferenceState;\r\n}(AnimationStateBase_1.AnimationStateBase));\r\nexports.SkeletonDifferenceState = SkeletonDifferenceState;\r\n},{\"../../animators/data/JointPose\":\"awayjs-renderergl/lib/animators/data/JointPose\",\"../../animators/data/SkeletonPose\":\"awayjs-renderergl/lib/animators/data/SkeletonPose\",\"../../animators/states/AnimationStateBase\":\"awayjs-renderergl/lib/animators/states/AnimationStateBase\",\"awayjs-core/lib/geom/Quaternion\":undefined}],\"awayjs-renderergl/lib/animators/states/SkeletonDirectionalState\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar JointPose_1 = require(\"../../animators/data/JointPose\");\r\nvar SkeletonPose_1 = require(\"../../animators/data/SkeletonPose\");\r\nvar AnimationStateBase_1 = require(\"../../animators/states/AnimationStateBase\");\r\n/**\r\n *\r\n */\r\nvar SkeletonDirectionalState = (function (_super) {\r\n    __extends(SkeletonDirectionalState, _super);\r\n    function SkeletonDirectionalState(animator, skeletonAnimationNode) {\r\n        _super.call(this, animator, skeletonAnimationNode);\r\n        this._skeletonPose = new SkeletonPose_1.SkeletonPose();\r\n        this._skeletonPoseDirty = true;\r\n        this._blendWeight = 0;\r\n        this._direction = 0;\r\n        this._blendDirty = true;\r\n        this._skeletonAnimationNode = skeletonAnimationNode;\r\n        this._forward = animator.getAnimationState(this._skeletonAnimationNode.forward);\r\n        this._backward = animator.getAnimationState(this._skeletonAnimationNode.backward);\r\n        this._left = animator.getAnimationState(this._skeletonAnimationNode.left);\r\n        this._right = animator.getAnimationState(this._skeletonAnimationNode.right);\r\n    }\r\n    Object.defineProperty(SkeletonDirectionalState.prototype, \"direction\", {\r\n        get: function () {\r\n            return this._direction;\r\n        },\r\n        /**\r\n         * Defines the direction in degrees of the aniamtion between the forwards (0), right(90) backwards (180) and left(270) input nodes,\r\n         * used to produce the skeleton pose output.\r\n         */\r\n        set: function (value) {\r\n            if (this._direction == value)\r\n                return;\r\n            this._direction = value;\r\n            this._blendDirty = true;\r\n            this._skeletonPoseDirty = true;\r\n            this._pPositionDeltaDirty = true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    SkeletonDirectionalState.prototype.phase = function (value) {\r\n        if (this._blendDirty)\r\n            this.updateBlend();\r\n        this._skeletonPoseDirty = true;\r\n        this._pPositionDeltaDirty = true;\r\n        this._inputA.phase(value);\r\n        this._inputB.phase(value);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    SkeletonDirectionalState.prototype._pUdateTime = function (time) {\r\n        if (this._blendDirty)\r\n            this.updateBlend();\r\n        this._skeletonPoseDirty = true;\r\n        this._inputA.update(time);\r\n        this._inputB.update(time);\r\n        _super.prototype._pUpdateTime.call(this, time);\r\n    };\r\n    /**\r\n     * Returns the current skeleton pose of the animation in the clip based on the internal playhead position.\r\n     */\r\n    SkeletonDirectionalState.prototype.getSkeletonPose = function (skeleton) {\r\n        if (this._skeletonPoseDirty)\r\n            this.updateSkeletonPose(skeleton);\r\n        return this._skeletonPose;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    SkeletonDirectionalState.prototype._pUpdatePositionDelta = function () {\r\n        this._pPositionDeltaDirty = false;\r\n        if (this._blendDirty)\r\n            this.updateBlend();\r\n        var deltA = this._inputA.positionDelta;\r\n        var deltB = this._inputB.positionDelta;\r\n        this.positionDelta.x = deltA.x + this._blendWeight * (deltB.x - deltA.x);\r\n        this.positionDelta.y = deltA.y + this._blendWeight * (deltB.y - deltA.y);\r\n        this.positionDelta.z = deltA.z + this._blendWeight * (deltB.z - deltA.z);\r\n    };\r\n    /**\r\n     * Updates the output skeleton pose of the node based on the direction value between forward, backwards, left and right input nodes.\r\n     *\r\n     * @param skeleton The skeleton used by the animator requesting the ouput pose.\r\n     */\r\n    SkeletonDirectionalState.prototype.updateSkeletonPose = function (skeleton) {\r\n        this._skeletonPoseDirty = false;\r\n        if (this._blendDirty)\r\n            this.updateBlend();\r\n        var endPose;\r\n        var endPoses = this._skeletonPose.jointPoses;\r\n        var poses1 = this._inputA.getSkeletonPose(skeleton).jointPoses;\r\n        var poses2 = this._inputB.getSkeletonPose(skeleton).jointPoses;\r\n        var pose1, pose2;\r\n        var p1, p2;\r\n        var tr;\r\n        var numJoints = skeleton.numJoints;\r\n        // :s\r\n        if (endPoses.length != numJoints)\r\n            endPoses.length = numJoints;\r\n        for (var i = 0; i < numJoints; ++i) {\r\n            endPose = endPoses[i];\r\n            if (endPose == null)\r\n                endPose = endPoses[i] = new JointPose_1.JointPose();\r\n            pose1 = poses1[i];\r\n            pose2 = poses2[i];\r\n            p1 = pose1.translation;\r\n            p2 = pose2.translation;\r\n            endPose.orientation.lerp(pose1.orientation, pose2.orientation, this._blendWeight);\r\n            tr = endPose.translation;\r\n            tr.x = p1.x + this._blendWeight * (p2.x - p1.x);\r\n            tr.y = p1.y + this._blendWeight * (p2.y - p1.y);\r\n            tr.z = p1.z + this._blendWeight * (p2.z - p1.z);\r\n        }\r\n    };\r\n    /**\r\n     * Updates the blend value for the animation output based on the direction value between forward, backwards, left and right input nodes.\r\n     *\r\n     * @private\r\n     */\r\n    SkeletonDirectionalState.prototype.updateBlend = function () {\r\n        this._blendDirty = false;\r\n        if (this._direction < 0 || this._direction > 360) {\r\n            this._direction %= 360;\r\n            if (this._direction < 0)\r\n                this._direction += 360;\r\n        }\r\n        if (this._direction < 90) {\r\n            this._inputA = this._forward;\r\n            this._inputB = this._right;\r\n            this._blendWeight = this._direction / 90;\r\n        }\r\n        else if (this._direction < 180) {\r\n            this._inputA = this._right;\r\n            this._inputB = this._backward;\r\n            this._blendWeight = (this._direction - 90) / 90;\r\n        }\r\n        else if (this._direction < 270) {\r\n            this._inputA = this._backward;\r\n            this._inputB = this._left;\r\n            this._blendWeight = (this._direction - 180) / 90;\r\n        }\r\n        else {\r\n            this._inputA = this._left;\r\n            this._inputB = this._forward;\r\n            this._blendWeight = (this._direction - 270) / 90;\r\n        }\r\n    };\r\n    return SkeletonDirectionalState;\r\n}(AnimationStateBase_1.AnimationStateBase));\r\nexports.SkeletonDirectionalState = SkeletonDirectionalState;\r\n},{\"../../animators/data/JointPose\":\"awayjs-renderergl/lib/animators/data/JointPose\",\"../../animators/data/SkeletonPose\":\"awayjs-renderergl/lib/animators/data/SkeletonPose\",\"../../animators/states/AnimationStateBase\":\"awayjs-renderergl/lib/animators/states/AnimationStateBase\"}],\"awayjs-renderergl/lib/animators/states/SkeletonNaryLERPState\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar JointPose_1 = require(\"../../animators/data/JointPose\");\r\nvar SkeletonPose_1 = require(\"../../animators/data/SkeletonPose\");\r\nvar AnimationStateBase_1 = require(\"../../animators/states/AnimationStateBase\");\r\n/**\r\n *\r\n */\r\nvar SkeletonNaryLERPState = (function (_super) {\r\n    __extends(SkeletonNaryLERPState, _super);\r\n    function SkeletonNaryLERPState(animator, skeletonAnimationNode) {\r\n        _super.call(this, animator, skeletonAnimationNode);\r\n        this._skeletonPose = new SkeletonPose_1.SkeletonPose();\r\n        this._skeletonPoseDirty = true;\r\n        this._blendWeights = new Array();\r\n        this._inputs = new Array();\r\n        this._skeletonAnimationNode = skeletonAnimationNode;\r\n        var i = this._skeletonAnimationNode.numInputs;\r\n        while (i--)\r\n            this._inputs[i] = animator.getAnimationState(this._skeletonAnimationNode._iInputs[i]);\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    SkeletonNaryLERPState.prototype.phase = function (value) {\r\n        this._skeletonPoseDirty = true;\r\n        this._pPositionDeltaDirty = true;\r\n        for (var j = 0; j < this._skeletonAnimationNode.numInputs; ++j) {\r\n            if (this._blendWeights[j])\r\n                this._inputs[j].update(value);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    SkeletonNaryLERPState.prototype._pUdateTime = function (time) {\r\n        for (var j = 0; j < this._skeletonAnimationNode.numInputs; ++j) {\r\n            if (this._blendWeights[j])\r\n                this._inputs[j].update(time);\r\n        }\r\n        _super.prototype._pUpdateTime.call(this, time);\r\n    };\r\n    /**\r\n     * Returns the current skeleton pose of the animation in the clip based on the internal playhead position.\r\n     */\r\n    SkeletonNaryLERPState.prototype.getSkeletonPose = function (skeleton) {\r\n        if (this._skeletonPoseDirty)\r\n            this.updateSkeletonPose(skeleton);\r\n        return this._skeletonPose;\r\n    };\r\n    /**\r\n     * Returns the blend weight of the skeleton aniamtion node that resides at the given input index.\r\n     *\r\n     * @param index The input index for which the skeleton animation node blend weight is requested.\r\n     */\r\n    SkeletonNaryLERPState.prototype.getBlendWeightAt = function (index) {\r\n        return this._blendWeights[index];\r\n    };\r\n    /**\r\n     * Sets the blend weight of the skeleton aniamtion node that resides at the given input index.\r\n     *\r\n     * @param index The input index on which the skeleton animation node blend weight is to be set.\r\n     * @param blendWeight The blend weight value to use for the given skeleton animation node index.\r\n     */\r\n    SkeletonNaryLERPState.prototype.setBlendWeightAt = function (index, blendWeight) {\r\n        this._blendWeights[index] = blendWeight;\r\n        this._pPositionDeltaDirty = true;\r\n        this._skeletonPoseDirty = true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    SkeletonNaryLERPState.prototype._pUpdatePositionDelta = function () {\r\n        this._pPositionDeltaDirty = false;\r\n        var delta;\r\n        var weight;\r\n        this.positionDelta.x = 0;\r\n        this.positionDelta.y = 0;\r\n        this.positionDelta.z = 0;\r\n        for (var j = 0; j < this._skeletonAnimationNode.numInputs; ++j) {\r\n            weight = this._blendWeights[j];\r\n            if (weight) {\r\n                delta = this._inputs[j].positionDelta;\r\n                this.positionDelta.x += weight * delta.x;\r\n                this.positionDelta.y += weight * delta.y;\r\n                this.positionDelta.z += weight * delta.z;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Updates the output skeleton pose of the node based on the blend weight values given to the input nodes.\r\n     *\r\n     * @param skeleton The skeleton used by the animator requesting the ouput pose.\r\n     */\r\n    SkeletonNaryLERPState.prototype.updateSkeletonPose = function (skeleton) {\r\n        this._skeletonPoseDirty = false;\r\n        var weight;\r\n        var endPoses = this._skeletonPose.jointPoses;\r\n        var poses;\r\n        var endPose, pose;\r\n        var endTr, tr;\r\n        var endQuat, q;\r\n        var firstPose;\r\n        var i;\r\n        var w0, x0, y0, z0;\r\n        var w1, x1, y1, z1;\r\n        var numJoints = skeleton.numJoints;\r\n        // :s\r\n        if (endPoses.length != numJoints)\r\n            endPoses.length = numJoints;\r\n        for (var j = 0; j < this._skeletonAnimationNode.numInputs; ++j) {\r\n            weight = this._blendWeights[j];\r\n            if (!weight)\r\n                continue;\r\n            poses = this._inputs[j].getSkeletonPose(skeleton).jointPoses;\r\n            if (!firstPose) {\r\n                firstPose = poses;\r\n                for (i = 0; i < numJoints; ++i) {\r\n                    endPose = endPoses[i];\r\n                    if (endPose == null)\r\n                        endPose = endPoses[i] = new JointPose_1.JointPose();\r\n                    pose = poses[i];\r\n                    q = pose.orientation;\r\n                    tr = pose.translation;\r\n                    endQuat = endPose.orientation;\r\n                    endQuat.x = weight * q.x;\r\n                    endQuat.y = weight * q.y;\r\n                    endQuat.z = weight * q.z;\r\n                    endQuat.w = weight * q.w;\r\n                    endTr = endPose.translation;\r\n                    endTr.x = weight * tr.x;\r\n                    endTr.y = weight * tr.y;\r\n                    endTr.z = weight * tr.z;\r\n                }\r\n            }\r\n            else {\r\n                for (i = 0; i < skeleton.numJoints; ++i) {\r\n                    endPose = endPoses[i];\r\n                    pose = poses[i];\r\n                    q = firstPose[i].orientation;\r\n                    x0 = q.x;\r\n                    y0 = q.y;\r\n                    z0 = q.z;\r\n                    w0 = q.w;\r\n                    q = pose.orientation;\r\n                    tr = pose.translation;\r\n                    x1 = q.x;\r\n                    y1 = q.y;\r\n                    z1 = q.z;\r\n                    w1 = q.w;\r\n                    // find shortest direction\r\n                    if (x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1 < 0) {\r\n                        x1 = -x1;\r\n                        y1 = -y1;\r\n                        z1 = -z1;\r\n                        w1 = -w1;\r\n                    }\r\n                    endQuat = endPose.orientation;\r\n                    endQuat.x += weight * x1;\r\n                    endQuat.y += weight * y1;\r\n                    endQuat.z += weight * z1;\r\n                    endQuat.w += weight * w1;\r\n                    endTr = endPose.translation;\r\n                    endTr.x += weight * tr.x;\r\n                    endTr.y += weight * tr.y;\r\n                    endTr.z += weight * tr.z;\r\n                }\r\n            }\r\n        }\r\n        for (i = 0; i < skeleton.numJoints; ++i)\r\n            endPoses[i].orientation.normalize();\r\n    };\r\n    return SkeletonNaryLERPState;\r\n}(AnimationStateBase_1.AnimationStateBase));\r\nexports.SkeletonNaryLERPState = SkeletonNaryLERPState;\r\n},{\"../../animators/data/JointPose\":\"awayjs-renderergl/lib/animators/data/JointPose\",\"../../animators/data/SkeletonPose\":\"awayjs-renderergl/lib/animators/data/SkeletonPose\",\"../../animators/states/AnimationStateBase\":\"awayjs-renderergl/lib/animators/states/AnimationStateBase\"}],\"awayjs-renderergl/lib/animators/states/VertexClipState\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar AnimationClipState_1 = require(\"../../animators/states/AnimationClipState\");\r\n/**\r\n *\r\n */\r\nvar VertexClipState = (function (_super) {\r\n    __extends(VertexClipState, _super);\r\n    function VertexClipState(animator, vertexClipNode) {\r\n        _super.call(this, animator, vertexClipNode);\r\n        this._vertexClipNode = vertexClipNode;\r\n        this._frames = this._vertexClipNode.frames;\r\n    }\r\n    Object.defineProperty(VertexClipState.prototype, \"currentGraphics\", {\r\n        /**\r\n         * @inheritDoc\r\n         */\r\n        get: function () {\r\n            if (this._pFramesDirty)\r\n                this._pUpdateFrames();\r\n            return this._currentGraphics;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(VertexClipState.prototype, \"nextGraphics\", {\r\n        /**\r\n         * @inheritDoc\r\n         */\r\n        get: function () {\r\n            if (this._pFramesDirty)\r\n                this._pUpdateFrames();\r\n            return this._nextGraphics;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    VertexClipState.prototype._pUpdateFrames = function () {\r\n        _super.prototype._pUpdateFrames.call(this);\r\n        this._currentGraphics = this._frames[this._pCurrentFrame];\r\n        if (this._vertexClipNode.looping && this._pNextFrame >= this._vertexClipNode.lastFrame) {\r\n            this._nextGraphics = this._frames[0];\r\n            this._pAnimator.dispatchCycleEvent();\r\n        }\r\n        else\r\n            this._nextGraphics = this._frames[this._pNextFrame];\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    VertexClipState.prototype._pUpdatePositionDelta = function () {\r\n        //TODO:implement positiondelta functionality for vertex animations\r\n    };\r\n    return VertexClipState;\r\n}(AnimationClipState_1.AnimationClipState));\r\nexports.VertexClipState = VertexClipState;\r\n},{\"../../animators/states/AnimationClipState\":\"awayjs-renderergl/lib/animators/states/AnimationClipState\"}],\"awayjs-renderergl/lib/animators/transitions/CrossfadeTransitionNode\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar SkeletonBinaryLERPNode_1 = require(\"../../animators/nodes/SkeletonBinaryLERPNode\");\r\nvar CrossfadeTransitionState_1 = require(\"../../animators/transitions/CrossfadeTransitionState\");\r\n/**\r\n * A skeleton animation node that uses two animation node inputs to blend a lineraly interpolated output of a skeleton pose.\r\n */\r\nvar CrossfadeTransitionNode = (function (_super) {\r\n    __extends(CrossfadeTransitionNode, _super);\r\n    /**\r\n     * Creates a new <code>CrossfadeTransitionNode</code> object.\r\n     */\r\n    function CrossfadeTransitionNode() {\r\n        _super.call(this);\r\n        this._pStateClass = CrossfadeTransitionState_1.CrossfadeTransitionState;\r\n    }\r\n    return CrossfadeTransitionNode;\r\n}(SkeletonBinaryLERPNode_1.SkeletonBinaryLERPNode));\r\nexports.CrossfadeTransitionNode = CrossfadeTransitionNode;\r\n},{\"../../animators/nodes/SkeletonBinaryLERPNode\":\"awayjs-renderergl/lib/animators/nodes/SkeletonBinaryLERPNode\",\"../../animators/transitions/CrossfadeTransitionState\":\"awayjs-renderergl/lib/animators/transitions/CrossfadeTransitionState\"}],\"awayjs-renderergl/lib/animators/transitions/CrossfadeTransitionState\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar SkeletonBinaryLERPState_1 = require(\"../../animators/states/SkeletonBinaryLERPState\");\r\nvar AnimationStateEvent_1 = require(\"../../animators/../events/AnimationStateEvent\");\r\n/**\r\n *\r\n */\r\nvar CrossfadeTransitionState = (function (_super) {\r\n    __extends(CrossfadeTransitionState, _super);\r\n    function CrossfadeTransitionState(animator, skeletonAnimationNode) {\r\n        _super.call(this, animator, skeletonAnimationNode);\r\n        this._crossfadeTransitionNode = skeletonAnimationNode;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CrossfadeTransitionState.prototype._pUpdateTime = function (time) {\r\n        this.blendWeight = Math.abs(time - this._crossfadeTransitionNode.startBlend) / (1000 * this._crossfadeTransitionNode.blendSpeed);\r\n        if (this.blendWeight >= 1) {\r\n            this.blendWeight = 1;\r\n            if (this._animationStateTransitionComplete == null)\r\n                this._animationStateTransitionComplete = new AnimationStateEvent_1.AnimationStateEvent(AnimationStateEvent_1.AnimationStateEvent.TRANSITION_COMPLETE, this._pAnimator, this, this._crossfadeTransitionNode);\r\n            this._crossfadeTransitionNode.dispatchEvent(this._animationStateTransitionComplete);\r\n        }\r\n        _super.prototype._pUpdateTime.call(this, time);\r\n    };\r\n    return CrossfadeTransitionState;\r\n}(SkeletonBinaryLERPState_1.SkeletonBinaryLERPState));\r\nexports.CrossfadeTransitionState = CrossfadeTransitionState;\r\n},{\"../../animators/../events/AnimationStateEvent\":\"awayjs-renderergl/lib/events/AnimationStateEvent\",\"../../animators/states/SkeletonBinaryLERPState\":\"awayjs-renderergl/lib/animators/states/SkeletonBinaryLERPState\"}],\"awayjs-renderergl/lib/animators/transitions/CrossfadeTransition\":[function(require,module,exports){\n\"use strict\";\r\nvar CrossfadeTransitionNode_1 = require(\"../../animators/transitions/CrossfadeTransitionNode\");\r\n/**\r\n *\r\n */\r\nvar CrossfadeTransition = (function () {\r\n    function CrossfadeTransition(blendSpeed) {\r\n        this.blendSpeed = 0.5;\r\n        this.blendSpeed = blendSpeed;\r\n    }\r\n    CrossfadeTransition.prototype.getAnimationNode = function (animator, startNode, endNode, startBlend) {\r\n        var crossFadeTransitionNode = new CrossfadeTransitionNode_1.CrossfadeTransitionNode();\r\n        crossFadeTransitionNode.inputA = startNode;\r\n        crossFadeTransitionNode.inputB = endNode;\r\n        crossFadeTransitionNode.blendSpeed = this.blendSpeed;\r\n        crossFadeTransitionNode.startBlend = startBlend;\r\n        return crossFadeTransitionNode;\r\n    };\r\n    return CrossfadeTransition;\r\n}());\r\nexports.CrossfadeTransition = CrossfadeTransition;\r\n},{\"../../animators/transitions/CrossfadeTransitionNode\":\"awayjs-renderergl/lib/animators/transitions/CrossfadeTransitionNode\"}],\"awayjs-renderergl/lib/animators/transitions/IAnimationTransition\":[function(require,module,exports){\n\"use strict\";\r\n},{}],\"awayjs-renderergl/lib/animators\":[function(require,module,exports){\n\"use strict\";\r\nvar AnimationElements_1 = require(\"./animators/data/AnimationElements\");\r\nexports.AnimationElements = AnimationElements_1.AnimationElements;\r\nvar AnimationRegisterData_1 = require(\"./animators/data/AnimationRegisterData\");\r\nexports.AnimationRegisterData = AnimationRegisterData_1.AnimationRegisterData;\r\nvar ColorSegmentPoint_1 = require(\"./animators/data/ColorSegmentPoint\");\r\nexports.ColorSegmentPoint = ColorSegmentPoint_1.ColorSegmentPoint;\r\nvar JointPose_1 = require(\"./animators/data/JointPose\");\r\nexports.JointPose = JointPose_1.JointPose;\r\nvar ParticleAnimationData_1 = require(\"./animators/data/ParticleAnimationData\");\r\nexports.ParticleAnimationData = ParticleAnimationData_1.ParticleAnimationData;\r\nvar ParticleProperties_1 = require(\"./animators/data/ParticleProperties\");\r\nexports.ParticleProperties = ParticleProperties_1.ParticleProperties;\r\nvar ParticlePropertiesMode_1 = require(\"./animators/data/ParticlePropertiesMode\");\r\nexports.ParticlePropertiesMode = ParticlePropertiesMode_1.ParticlePropertiesMode;\r\nvar Skeleton_1 = require(\"./animators/data/Skeleton\");\r\nexports.Skeleton = Skeleton_1.Skeleton;\r\nvar SkeletonJoint_1 = require(\"./animators/data/SkeletonJoint\");\r\nexports.SkeletonJoint = SkeletonJoint_1.SkeletonJoint;\r\nvar SkeletonPose_1 = require(\"./animators/data/SkeletonPose\");\r\nexports.SkeletonPose = SkeletonPose_1.SkeletonPose;\r\nvar VertexAnimationMode_1 = require(\"./animators/data/VertexAnimationMode\");\r\nexports.VertexAnimationMode = VertexAnimationMode_1.VertexAnimationMode;\r\nvar AnimationClipNodeBase_1 = require(\"./animators/nodes/AnimationClipNodeBase\");\r\nexports.AnimationClipNodeBase = AnimationClipNodeBase_1.AnimationClipNodeBase;\r\nvar ParticleAccelerationNode_1 = require(\"./animators/nodes/ParticleAccelerationNode\");\r\nexports.ParticleAccelerationNode = ParticleAccelerationNode_1.ParticleAccelerationNode;\r\nvar ParticleBezierCurveNode_1 = require(\"./animators/nodes/ParticleBezierCurveNode\");\r\nexports.ParticleBezierCurveNode = ParticleBezierCurveNode_1.ParticleBezierCurveNode;\r\nvar ParticleBillboardNode_1 = require(\"./animators/nodes/ParticleBillboardNode\");\r\nexports.ParticleBillboardNode = ParticleBillboardNode_1.ParticleBillboardNode;\r\nvar ParticleColorNode_1 = require(\"./animators/nodes/ParticleColorNode\");\r\nexports.ParticleColorNode = ParticleColorNode_1.ParticleColorNode;\r\nvar ParticleFollowNode_1 = require(\"./animators/nodes/ParticleFollowNode\");\r\nexports.ParticleFollowNode = ParticleFollowNode_1.ParticleFollowNode;\r\nvar ParticleInitialColorNode_1 = require(\"./animators/nodes/ParticleInitialColorNode\");\r\nexports.ParticleInitialColorNode = ParticleInitialColorNode_1.ParticleInitialColorNode;\r\nvar ParticleNodeBase_1 = require(\"./animators/nodes/ParticleNodeBase\");\r\nexports.ParticleNodeBase = ParticleNodeBase_1.ParticleNodeBase;\r\nvar ParticleOrbitNode_1 = require(\"./animators/nodes/ParticleOrbitNode\");\r\nexports.ParticleOrbitNode = ParticleOrbitNode_1.ParticleOrbitNode;\r\nvar ParticleOscillatorNode_1 = require(\"./animators/nodes/ParticleOscillatorNode\");\r\nexports.ParticleOscillatorNode = ParticleOscillatorNode_1.ParticleOscillatorNode;\r\nvar ParticlePositionNode_1 = require(\"./animators/nodes/ParticlePositionNode\");\r\nexports.ParticlePositionNode = ParticlePositionNode_1.ParticlePositionNode;\r\nvar ParticleRotateToHeadingNode_1 = require(\"./animators/nodes/ParticleRotateToHeadingNode\");\r\nexports.ParticleRotateToHeadingNode = ParticleRotateToHeadingNode_1.ParticleRotateToHeadingNode;\r\nvar ParticleRotateToPositionNode_1 = require(\"./animators/nodes/ParticleRotateToPositionNode\");\r\nexports.ParticleRotateToPositionNode = ParticleRotateToPositionNode_1.ParticleRotateToPositionNode;\r\nvar ParticleRotationalVelocityNode_1 = require(\"./animators/nodes/ParticleRotationalVelocityNode\");\r\nexports.ParticleRotationalVelocityNode = ParticleRotationalVelocityNode_1.ParticleRotationalVelocityNode;\r\nvar ParticleScaleNode_1 = require(\"./animators/nodes/ParticleScaleNode\");\r\nexports.ParticleScaleNode = ParticleScaleNode_1.ParticleScaleNode;\r\nvar ParticleSegmentedColorNode_1 = require(\"./animators/nodes/ParticleSegmentedColorNode\");\r\nexports.ParticleSegmentedColorNode = ParticleSegmentedColorNode_1.ParticleSegmentedColorNode;\r\nvar ParticleSpriteSheetNode_1 = require(\"./animators/nodes/ParticleSpriteSheetNode\");\r\nexports.ParticleSpriteSheetNode = ParticleSpriteSheetNode_1.ParticleSpriteSheetNode;\r\nvar ParticleTimeNode_1 = require(\"./animators/nodes/ParticleTimeNode\");\r\nexports.ParticleTimeNode = ParticleTimeNode_1.ParticleTimeNode;\r\nvar ParticleUVNode_1 = require(\"./animators/nodes/ParticleUVNode\");\r\nexports.ParticleUVNode = ParticleUVNode_1.ParticleUVNode;\r\nvar ParticleVelocityNode_1 = require(\"./animators/nodes/ParticleVelocityNode\");\r\nexports.ParticleVelocityNode = ParticleVelocityNode_1.ParticleVelocityNode;\r\nvar SkeletonBinaryLERPNode_1 = require(\"./animators/nodes/SkeletonBinaryLERPNode\");\r\nexports.SkeletonBinaryLERPNode = SkeletonBinaryLERPNode_1.SkeletonBinaryLERPNode;\r\nvar SkeletonClipNode_1 = require(\"./animators/nodes/SkeletonClipNode\");\r\nexports.SkeletonClipNode = SkeletonClipNode_1.SkeletonClipNode;\r\nvar SkeletonDifferenceNode_1 = require(\"./animators/nodes/SkeletonDifferenceNode\");\r\nexports.SkeletonDifferenceNode = SkeletonDifferenceNode_1.SkeletonDifferenceNode;\r\nvar SkeletonDirectionalNode_1 = require(\"./animators/nodes/SkeletonDirectionalNode\");\r\nexports.SkeletonDirectionalNode = SkeletonDirectionalNode_1.SkeletonDirectionalNode;\r\nvar SkeletonNaryLERPNode_1 = require(\"./animators/nodes/SkeletonNaryLERPNode\");\r\nexports.SkeletonNaryLERPNode = SkeletonNaryLERPNode_1.SkeletonNaryLERPNode;\r\nvar VertexClipNode_1 = require(\"./animators/nodes/VertexClipNode\");\r\nexports.VertexClipNode = VertexClipNode_1.VertexClipNode;\r\nvar AnimationClipState_1 = require(\"./animators/states/AnimationClipState\");\r\nexports.AnimationClipState = AnimationClipState_1.AnimationClipState;\r\nvar AnimationStateBase_1 = require(\"./animators/states/AnimationStateBase\");\r\nexports.AnimationStateBase = AnimationStateBase_1.AnimationStateBase;\r\nvar ParticleAccelerationState_1 = require(\"./animators/states/ParticleAccelerationState\");\r\nexports.ParticleAccelerationState = ParticleAccelerationState_1.ParticleAccelerationState;\r\nvar ParticleBezierCurveState_1 = require(\"./animators/states/ParticleBezierCurveState\");\r\nexports.ParticleBezierCurveState = ParticleBezierCurveState_1.ParticleBezierCurveState;\r\nvar ParticleBillboardState_1 = require(\"./animators/states/ParticleBillboardState\");\r\nexports.ParticleBillboardState = ParticleBillboardState_1.ParticleBillboardState;\r\nvar ParticleColorState_1 = require(\"./animators/states/ParticleColorState\");\r\nexports.ParticleColorState = ParticleColorState_1.ParticleColorState;\r\nvar ParticleFollowState_1 = require(\"./animators/states/ParticleFollowState\");\r\nexports.ParticleFollowState = ParticleFollowState_1.ParticleFollowState;\r\nvar ParticleInitialColorState_1 = require(\"./animators/states/ParticleInitialColorState\");\r\nexports.ParticleInitialColorState = ParticleInitialColorState_1.ParticleInitialColorState;\r\nvar ParticleStateBase_1 = require(\"./animators/states/ParticleStateBase\");\r\nexports.ParticleStateBase = ParticleStateBase_1.ParticleStateBase;\r\nvar ParticleOrbitState_1 = require(\"./animators/states/ParticleOrbitState\");\r\nexports.ParticleOrbitState = ParticleOrbitState_1.ParticleOrbitState;\r\nvar ParticleOscillatorState_1 = require(\"./animators/states/ParticleOscillatorState\");\r\nexports.ParticleOscillatorState = ParticleOscillatorState_1.ParticleOscillatorState;\r\nvar ParticlePositionState_1 = require(\"./animators/states/ParticlePositionState\");\r\nexports.ParticlePositionState = ParticlePositionState_1.ParticlePositionState;\r\nvar ParticleRotateToHeadingState_1 = require(\"./animators/states/ParticleRotateToHeadingState\");\r\nexports.ParticleRotateToHeadingState = ParticleRotateToHeadingState_1.ParticleRotateToHeadingState;\r\nvar ParticleRotateToPositionState_1 = require(\"./animators/states/ParticleRotateToPositionState\");\r\nexports.ParticleRotateToPositionState = ParticleRotateToPositionState_1.ParticleRotateToPositionState;\r\nvar ParticleRotationalVelocityState_1 = require(\"./animators/states/ParticleRotationalVelocityState\");\r\nexports.ParticleRotationalVelocityState = ParticleRotationalVelocityState_1.ParticleRotationalVelocityState;\r\nvar ParticleScaleState_1 = require(\"./animators/states/ParticleScaleState\");\r\nexports.ParticleScaleState = ParticleScaleState_1.ParticleScaleState;\r\nvar ParticleSegmentedColorState_1 = require(\"./animators/states/ParticleSegmentedColorState\");\r\nexports.ParticleSegmentedColorState = ParticleSegmentedColorState_1.ParticleSegmentedColorState;\r\nvar ParticleSpriteSheetState_1 = require(\"./animators/states/ParticleSpriteSheetState\");\r\nexports.ParticleSpriteSheetState = ParticleSpriteSheetState_1.ParticleSpriteSheetState;\r\nvar ParticleTimeState_1 = require(\"./animators/states/ParticleTimeState\");\r\nexports.ParticleTimeState = ParticleTimeState_1.ParticleTimeState;\r\nvar ParticleUVState_1 = require(\"./animators/states/ParticleUVState\");\r\nexports.ParticleUVState = ParticleUVState_1.ParticleUVState;\r\nvar ParticleVelocityState_1 = require(\"./animators/states/ParticleVelocityState\");\r\nexports.ParticleVelocityState = ParticleVelocityState_1.ParticleVelocityState;\r\nvar SkeletonBinaryLERPState_1 = require(\"./animators/states/SkeletonBinaryLERPState\");\r\nexports.SkeletonBinaryLERPState = SkeletonBinaryLERPState_1.SkeletonBinaryLERPState;\r\nvar SkeletonClipState_1 = require(\"./animators/states/SkeletonClipState\");\r\nexports.SkeletonClipState = SkeletonClipState_1.SkeletonClipState;\r\nvar SkeletonDifferenceState_1 = require(\"./animators/states/SkeletonDifferenceState\");\r\nexports.SkeletonDifferenceState = SkeletonDifferenceState_1.SkeletonDifferenceState;\r\nvar SkeletonDirectionalState_1 = require(\"./animators/states/SkeletonDirectionalState\");\r\nexports.SkeletonDirectionalState = SkeletonDirectionalState_1.SkeletonDirectionalState;\r\nvar SkeletonNaryLERPState_1 = require(\"./animators/states/SkeletonNaryLERPState\");\r\nexports.SkeletonNaryLERPState = SkeletonNaryLERPState_1.SkeletonNaryLERPState;\r\nvar VertexClipState_1 = require(\"./animators/states/VertexClipState\");\r\nexports.VertexClipState = VertexClipState_1.VertexClipState;\r\nvar CrossfadeTransition_1 = require(\"./animators/transitions/CrossfadeTransition\");\r\nexports.CrossfadeTransition = CrossfadeTransition_1.CrossfadeTransition;\r\nvar CrossfadeTransitionNode_1 = require(\"./animators/transitions/CrossfadeTransitionNode\");\r\nexports.CrossfadeTransitionNode = CrossfadeTransitionNode_1.CrossfadeTransitionNode;\r\nvar CrossfadeTransitionState_1 = require(\"./animators/transitions/CrossfadeTransitionState\");\r\nexports.CrossfadeTransitionState = CrossfadeTransitionState_1.CrossfadeTransitionState;\r\nvar AnimationSetBase_1 = require(\"./animators/AnimationSetBase\");\r\nexports.AnimationSetBase = AnimationSetBase_1.AnimationSetBase;\r\nvar AnimatorBase_1 = require(\"./animators/AnimatorBase\");\r\nexports.AnimatorBase = AnimatorBase_1.AnimatorBase;\r\nvar ParticleAnimationSet_1 = require(\"./animators/ParticleAnimationSet\");\r\nexports.ParticleAnimationSet = ParticleAnimationSet_1.ParticleAnimationSet;\r\nvar ParticleAnimator_1 = require(\"./animators/ParticleAnimator\");\r\nexports.ParticleAnimator = ParticleAnimator_1.ParticleAnimator;\r\nvar SkeletonAnimationSet_1 = require(\"./animators/SkeletonAnimationSet\");\r\nexports.SkeletonAnimationSet = SkeletonAnimationSet_1.SkeletonAnimationSet;\r\nvar SkeletonAnimator_1 = require(\"./animators/SkeletonAnimator\");\r\nexports.SkeletonAnimator = SkeletonAnimator_1.SkeletonAnimator;\r\nvar VertexAnimationSet_1 = require(\"./animators/VertexAnimationSet\");\r\nexports.VertexAnimationSet = VertexAnimationSet_1.VertexAnimationSet;\r\nvar VertexAnimator_1 = require(\"./animators/VertexAnimator\");\r\nexports.VertexAnimator = VertexAnimator_1.VertexAnimator;\r\n},{\"./animators/AnimationSetBase\":\"awayjs-renderergl/lib/animators/AnimationSetBase\",\"./animators/AnimatorBase\":\"awayjs-renderergl/lib/animators/AnimatorBase\",\"./animators/ParticleAnimationSet\":\"awayjs-renderergl/lib/animators/ParticleAnimationSet\",\"./animators/ParticleAnimator\":\"awayjs-renderergl/lib/animators/ParticleAnimator\",\"./animators/SkeletonAnimationSet\":\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\",\"./animators/SkeletonAnimator\":\"awayjs-renderergl/lib/animators/SkeletonAnimator\",\"./animators/VertexAnimationSet\":\"awayjs-renderergl/lib/animators/VertexAnimationSet\",\"./animators/VertexAnimator\":\"awayjs-renderergl/lib/animators/VertexAnimator\",\"./animators/data/AnimationElements\":\"awayjs-renderergl/lib/animators/data/AnimationElements\",\"./animators/data/AnimationRegisterData\":\"awayjs-renderergl/lib/animators/data/AnimationRegisterData\",\"./animators/data/ColorSegmentPoint\":\"awayjs-renderergl/lib/animators/data/ColorSegmentPoint\",\"./animators/data/JointPose\":\"awayjs-renderergl/lib/animators/data/JointPose\",\"./animators/data/ParticleAnimationData\":\"awayjs-renderergl/lib/animators/data/ParticleAnimationData\",\"./animators/data/ParticleProperties\":\"awayjs-renderergl/lib/animators/data/ParticleProperties\",\"./animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"./animators/data/Skeleton\":\"awayjs-renderergl/lib/animators/data/Skeleton\",\"./animators/data/SkeletonJoint\":\"awayjs-renderergl/lib/animators/data/SkeletonJoint\",\"./animators/data/SkeletonPose\":\"awayjs-renderergl/lib/animators/data/SkeletonPose\",\"./animators/data/VertexAnimationMode\":\"awayjs-renderergl/lib/animators/data/VertexAnimationMode\",\"./animators/nodes/AnimationClipNodeBase\":\"awayjs-renderergl/lib/animators/nodes/AnimationClipNodeBase\",\"./animators/nodes/ParticleAccelerationNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleAccelerationNode\",\"./animators/nodes/ParticleBezierCurveNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleBezierCurveNode\",\"./animators/nodes/ParticleBillboardNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleBillboardNode\",\"./animators/nodes/ParticleColorNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleColorNode\",\"./animators/nodes/ParticleFollowNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleFollowNode\",\"./animators/nodes/ParticleInitialColorNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleInitialColorNode\",\"./animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"./animators/nodes/ParticleOrbitNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleOrbitNode\",\"./animators/nodes/ParticleOscillatorNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleOscillatorNode\",\"./animators/nodes/ParticlePositionNode\":\"awayjs-renderergl/lib/animators/nodes/ParticlePositionNode\",\"./animators/nodes/ParticleRotateToHeadingNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleRotateToHeadingNode\",\"./animators/nodes/ParticleRotateToPositionNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleRotateToPositionNode\",\"./animators/nodes/ParticleRotationalVelocityNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleRotationalVelocityNode\",\"./animators/nodes/ParticleScaleNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleScaleNode\",\"./animators/nodes/ParticleSegmentedColorNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleSegmentedColorNode\",\"./animators/nodes/ParticleSpriteSheetNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleSpriteSheetNode\",\"./animators/nodes/ParticleTimeNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleTimeNode\",\"./animators/nodes/ParticleUVNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleUVNode\",\"./animators/nodes/ParticleVelocityNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleVelocityNode\",\"./animators/nodes/SkeletonBinaryLERPNode\":\"awayjs-renderergl/lib/animators/nodes/SkeletonBinaryLERPNode\",\"./animators/nodes/SkeletonClipNode\":\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\",\"./animators/nodes/SkeletonDifferenceNode\":\"awayjs-renderergl/lib/animators/nodes/SkeletonDifferenceNode\",\"./animators/nodes/SkeletonDirectionalNode\":\"awayjs-renderergl/lib/animators/nodes/SkeletonDirectionalNode\",\"./animators/nodes/SkeletonNaryLERPNode\":\"awayjs-renderergl/lib/animators/nodes/SkeletonNaryLERPNode\",\"./animators/nodes/VertexClipNode\":\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\",\"./animators/states/AnimationClipState\":\"awayjs-renderergl/lib/animators/states/AnimationClipState\",\"./animators/states/AnimationStateBase\":\"awayjs-renderergl/lib/animators/states/AnimationStateBase\",\"./animators/states/ParticleAccelerationState\":\"awayjs-renderergl/lib/animators/states/ParticleAccelerationState\",\"./animators/states/ParticleBezierCurveState\":\"awayjs-renderergl/lib/animators/states/ParticleBezierCurveState\",\"./animators/states/ParticleBillboardState\":\"awayjs-renderergl/lib/animators/states/ParticleBillboardState\",\"./animators/states/ParticleColorState\":\"awayjs-renderergl/lib/animators/states/ParticleColorState\",\"./animators/states/ParticleFollowState\":\"awayjs-renderergl/lib/animators/states/ParticleFollowState\",\"./animators/states/ParticleInitialColorState\":\"awayjs-renderergl/lib/animators/states/ParticleInitialColorState\",\"./animators/states/ParticleOrbitState\":\"awayjs-renderergl/lib/animators/states/ParticleOrbitState\",\"./animators/states/ParticleOscillatorState\":\"awayjs-renderergl/lib/animators/states/ParticleOscillatorState\",\"./animators/states/ParticlePositionState\":\"awayjs-renderergl/lib/animators/states/ParticlePositionState\",\"./animators/states/ParticleRotateToHeadingState\":\"awayjs-renderergl/lib/animators/states/ParticleRotateToHeadingState\",\"./animators/states/ParticleRotateToPositionState\":\"awayjs-renderergl/lib/animators/states/ParticleRotateToPositionState\",\"./animators/states/ParticleRotationalVelocityState\":\"awayjs-renderergl/lib/animators/states/ParticleRotationalVelocityState\",\"./animators/states/ParticleScaleState\":\"awayjs-renderergl/lib/animators/states/ParticleScaleState\",\"./animators/states/ParticleSegmentedColorState\":\"awayjs-renderergl/lib/animators/states/ParticleSegmentedColorState\",\"./animators/states/ParticleSpriteSheetState\":\"awayjs-renderergl/lib/animators/states/ParticleSpriteSheetState\",\"./animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\",\"./animators/states/ParticleTimeState\":\"awayjs-renderergl/lib/animators/states/ParticleTimeState\",\"./animators/states/ParticleUVState\":\"awayjs-renderergl/lib/animators/states/ParticleUVState\",\"./animators/states/ParticleVelocityState\":\"awayjs-renderergl/lib/animators/states/ParticleVelocityState\",\"./animators/states/SkeletonBinaryLERPState\":\"awayjs-renderergl/lib/animators/states/SkeletonBinaryLERPState\",\"./animators/states/SkeletonClipState\":\"awayjs-renderergl/lib/animators/states/SkeletonClipState\",\"./animators/states/SkeletonDifferenceState\":\"awayjs-renderergl/lib/animators/states/SkeletonDifferenceState\",\"./animators/states/SkeletonDirectionalState\":\"awayjs-renderergl/lib/animators/states/SkeletonDirectionalState\",\"./animators/states/SkeletonNaryLERPState\":\"awayjs-renderergl/lib/animators/states/SkeletonNaryLERPState\",\"./animators/states/VertexClipState\":\"awayjs-renderergl/lib/animators/states/VertexClipState\",\"./animators/transitions/CrossfadeTransition\":\"awayjs-renderergl/lib/animators/transitions/CrossfadeTransition\",\"./animators/transitions/CrossfadeTransitionNode\":\"awayjs-renderergl/lib/animators/transitions/CrossfadeTransitionNode\",\"./animators/transitions/CrossfadeTransitionState\":\"awayjs-renderergl/lib/animators/transitions/CrossfadeTransitionState\"}],\"awayjs-renderergl/lib/elements/GL_ElementsBase\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar AbstractionBase_1 = require(\"awayjs-core/lib/library/AbstractionBase\");\r\nvar AbstractMethodError_1 = require(\"awayjs-core/lib/errors/AbstractMethodError\");\r\nvar AssetEvent_1 = require(\"awayjs-core/lib/events/AssetEvent\");\r\nvar ElementsEvent_1 = require(\"awayjs-display/lib/events/ElementsEvent\");\r\nvar ElementsUtils_1 = require(\"awayjs-display/lib/utils/ElementsUtils\");\r\n/**\r\n *\r\n * @class away.pool.GL_ElementsBaseBase\r\n */\r\nvar GL_ElementsBase = (function (_super) {\r\n    __extends(GL_ElementsBase, _super);\r\n    function GL_ElementsBase(elements, stage) {\r\n        var _this = this;\r\n        _super.call(this, elements, stage);\r\n        this.usages = 0;\r\n        this._vertices = new Object();\r\n        this._verticesUpdated = new Object();\r\n        this._indexMappings = Array();\r\n        this._numIndices = 0;\r\n        this._elements = elements;\r\n        this._stage = stage;\r\n        this._onInvalidateIndicesDelegate = function (event) { return _this._onInvalidateIndices(event); };\r\n        this._onClearIndicesDelegate = function (event) { return _this._onClearIndices(event); };\r\n        this._onInvalidateVerticesDelegate = function (event) { return _this._onInvalidateVertices(event); };\r\n        this._onClearVerticesDelegate = function (event) { return _this._onClearVertices(event); };\r\n        this._elements.addEventListener(ElementsEvent_1.ElementsEvent.CLEAR_INDICES, this._onClearIndicesDelegate);\r\n        this._elements.addEventListener(ElementsEvent_1.ElementsEvent.INVALIDATE_INDICES, this._onInvalidateIndicesDelegate);\r\n        this._elements.addEventListener(ElementsEvent_1.ElementsEvent.CLEAR_VERTICES, this._onClearVerticesDelegate);\r\n        this._elements.addEventListener(ElementsEvent_1.ElementsEvent.INVALIDATE_VERTICES, this._onInvalidateVerticesDelegate);\r\n    }\r\n    Object.defineProperty(GL_ElementsBase.prototype, \"elementsType\", {\r\n        get: function () {\r\n            throw new AbstractMethodError_1.AbstractMethodError();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GL_ElementsBase.prototype, \"elementsClass\", {\r\n        get: function () {\r\n            throw new AbstractMethodError_1.AbstractMethodError();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GL_ElementsBase.prototype, \"elements\", {\r\n        get: function () {\r\n            return this._elements;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GL_ElementsBase.prototype, \"numIndices\", {\r\n        /**\r\n         *\r\n         */\r\n        get: function () {\r\n            return this._numIndices;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GL_ElementsBase.prototype, \"numVertices\", {\r\n        /**\r\n         *\r\n         */\r\n        get: function () {\r\n            return this._numVertices;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     *\r\n     */\r\n    GL_ElementsBase.prototype.getIndexMappings = function () {\r\n        if (!this._indicesUpdated)\r\n            this._updateIndices();\r\n        return this._indexMappings;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    GL_ElementsBase.prototype.getIndexBufferGL = function () {\r\n        if (!this._indicesUpdated)\r\n            this._updateIndices();\r\n        return this._indices;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    GL_ElementsBase.prototype.getVertexBufferGL = function (attributesView) {\r\n        //first check if indices need updating which may affect vertices\r\n        if (!this._indicesUpdated)\r\n            this._updateIndices();\r\n        var bufferId = attributesView.attributesBuffer.id;\r\n        if (!this._verticesUpdated[bufferId])\r\n            this._updateVertices(attributesView);\r\n        return this._vertices[bufferId];\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    GL_ElementsBase.prototype.activateVertexBufferVO = function (index, attributesView, dimensions, offset) {\r\n        if (dimensions === void 0) { dimensions = 0; }\r\n        if (offset === void 0) { offset = 0; }\r\n        this.getVertexBufferGL(attributesView).activate(index, attributesView.size, dimensions || attributesView.dimensions, attributesView.offset + offset, attributesView.unsigned);\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    GL_ElementsBase.prototype.onClear = function (event) {\r\n        _super.prototype.onClear.call(this, event);\r\n        this._elements.removeEventListener(ElementsEvent_1.ElementsEvent.CLEAR_INDICES, this._onClearIndicesDelegate);\r\n        this._elements.removeEventListener(ElementsEvent_1.ElementsEvent.INVALIDATE_INDICES, this._onInvalidateIndicesDelegate);\r\n        this._elements.removeEventListener(ElementsEvent_1.ElementsEvent.CLEAR_VERTICES, this._onClearVerticesDelegate);\r\n        this._elements.removeEventListener(ElementsEvent_1.ElementsEvent.INVALIDATE_VERTICES, this._onInvalidateVerticesDelegate);\r\n        this._elements = null;\r\n        if (this._overflow) {\r\n            this._overflow.onClear(event);\r\n            this._overflow = null;\r\n        }\r\n    };\r\n    GL_ElementsBase.prototype._setRenderState = function (renderable, shader, camera, viewProjection) {\r\n        if (!this._verticesUpdated)\r\n            this._updateIndices();\r\n        //TODO replace overflow system with something sensible\r\n        //this._render(renderable, camera, viewProjection);\r\n        //\r\n        // if (this._overflow)\r\n        // \tthis._overflow._iRender(renderable, camera, viewProjection);\r\n    };\r\n    GL_ElementsBase.prototype.draw = function (renderable, shader, camera, viewProjection, count, offset) {\r\n        throw new AbstractMethodError_1.AbstractMethodError();\r\n    };\r\n    /**\r\n     * //TODO\r\n     *\r\n     * @private\r\n     */\r\n    GL_ElementsBase.prototype._updateIndices = function (indexOffset) {\r\n        if (indexOffset === void 0) { indexOffset = 0; }\r\n        var indices = this._elements.indices;\r\n        if (indices) {\r\n            this._indices = this._stage.getAbstraction(ElementsUtils_1.ElementsUtils.getSubIndices(indices, this._elements.numVertices, this._indexMappings, indexOffset));\r\n            this._numIndices = this._indices._attributesBuffer.count * indices.dimensions;\r\n        }\r\n        else {\r\n            this._indices = null;\r\n            this._numIndices = 0;\r\n            this._indexMappings = Array();\r\n        }\r\n        indexOffset += this._numIndices;\r\n        //check if there is more to split\r\n        if (indices && indexOffset < indices.count * this._elements.indices.dimensions) {\r\n            if (!this._overflow)\r\n                this._overflow = this._pGetOverflowElements();\r\n            this._overflow._updateIndices(indexOffset);\r\n        }\r\n        else if (this._overflow) {\r\n            this._overflow.onClear(new AssetEvent_1.AssetEvent(AssetEvent_1.AssetEvent.CLEAR, this._elements));\r\n            this._overflow = null;\r\n        }\r\n        this._indicesUpdated = true;\r\n        //invalidate vertices if index mappings exist\r\n        if (this._indexMappings.length)\r\n            for (var key in this._verticesUpdated)\r\n                this._verticesUpdated[key] = false;\r\n    };\r\n    /**\r\n     * //TODO\r\n     *\r\n     * @param attributesView\r\n     * @private\r\n     */\r\n    GL_ElementsBase.prototype._updateVertices = function (attributesView) {\r\n        this._numVertices = this._elements.numVertices;\r\n        var bufferId = attributesView.attributesBuffer.id;\r\n        this._vertices[bufferId] = this._stage.getAbstraction(ElementsUtils_1.ElementsUtils.getSubVertices(attributesView.attributesBuffer, this._indexMappings));\r\n        this._verticesUpdated[bufferId] = true;\r\n    };\r\n    /**\r\n     * //TODO\r\n     *\r\n     * @param event\r\n     * @private\r\n     */\r\n    GL_ElementsBase.prototype._onInvalidateIndices = function (event) {\r\n        if (!event.attributesView)\r\n            return;\r\n        this._indicesUpdated = false;\r\n    };\r\n    /**\r\n     * //TODO\r\n     *\r\n     * @param event\r\n     * @private\r\n     */\r\n    GL_ElementsBase.prototype._onClearIndices = function (event) {\r\n        if (!event.attributesView)\r\n            return;\r\n        this._indices.onClear(new AssetEvent_1.AssetEvent(AssetEvent_1.AssetEvent.CLEAR, event.attributesView));\r\n        this._indices = null;\r\n    };\r\n    /**\r\n     * //TODO\r\n     *\r\n     * @param event\r\n     * @private\r\n     */\r\n    GL_ElementsBase.prototype._onInvalidateVertices = function (event) {\r\n        if (!event.attributesView)\r\n            return;\r\n        var bufferId = event.attributesView.attributesBuffer.id;\r\n        this._verticesUpdated[bufferId] = false;\r\n    };\r\n    /**\r\n     * //TODO\r\n     *\r\n     * @param event\r\n     * @private\r\n     */\r\n    GL_ElementsBase.prototype._onClearVertices = function (event) {\r\n        if (!event.attributesView)\r\n            return;\r\n        var bufferId = event.attributesView.attributesBuffer.id;\r\n        if (this._vertices[bufferId]) {\r\n            this._vertices[bufferId].onClear(new AssetEvent_1.AssetEvent(AssetEvent_1.AssetEvent.CLEAR, event.attributesView));\r\n            delete this._vertices[bufferId];\r\n            delete this._verticesUpdated[bufferId];\r\n        }\r\n    };\r\n    /**\r\n     * //TODO\r\n     *\r\n     * @param pool\r\n     * @param renderable\r\n     * @param level\r\n     * @param indexOffset\r\n     * @returns {away.pool.GL_GraphicRenderable}\r\n     * @protected\r\n     */\r\n    GL_ElementsBase.prototype._pGetOverflowElements = function () {\r\n        throw new AbstractMethodError_1.AbstractMethodError();\r\n    };\r\n    return GL_ElementsBase;\r\n}(AbstractionBase_1.AbstractionBase));\r\nexports.GL_ElementsBase = GL_ElementsBase;\r\n},{\"awayjs-core/lib/errors/AbstractMethodError\":undefined,\"awayjs-core/lib/events/AssetEvent\":undefined,\"awayjs-core/lib/library/AbstractionBase\":undefined,\"awayjs-display/lib/events/ElementsEvent\":undefined,\"awayjs-display/lib/utils/ElementsUtils\":undefined}],\"awayjs-renderergl/lib/elements/GL_LineElements\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Matrix3D_1 = require(\"awayjs-core/lib/geom/Matrix3D\");\r\nvar ContextGLDrawMode_1 = require(\"awayjs-stagegl/lib/base/ContextGLDrawMode\");\r\nvar ContextGLProgramType_1 = require(\"awayjs-stagegl/lib/base/ContextGLProgramType\");\r\nvar GL_ElementsBase_1 = require(\"../elements/GL_ElementsBase\");\r\n/**\r\n *\r\n * @class away.pool.GL_LineElements\r\n */\r\nvar GL_LineElements = (function (_super) {\r\n    __extends(GL_LineElements, _super);\r\n    function GL_LineElements(lineElements, stage) {\r\n        _super.call(this, lineElements, stage);\r\n        this._calcMatrix = new Matrix3D_1.Matrix3D();\r\n        this._thickness = 1.25;\r\n        this._lineElements = lineElements;\r\n    }\r\n    Object.defineProperty(GL_LineElements.prototype, \"elementsType\", {\r\n        get: function () {\r\n            return GL_LineElements.elementsType;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GL_LineElements.prototype, \"elementsClass\", {\r\n        get: function () {\r\n            return GL_LineElements;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    GL_LineElements._iIncludeDependencies = function (shader) {\r\n        shader.colorDependencies++;\r\n    };\r\n    GL_LineElements._iGetVertexCode = function (shader, registerCache, sharedRegisters) {\r\n        //get the projection coordinates\r\n        var position0 = (shader.globalPosDependencies > 0) ? sharedRegisters.globalPositionVertex : sharedRegisters.animatedPosition;\r\n        var position1 = registerCache.getFreeVertexAttribute();\r\n        var thickness = registerCache.getFreeVertexAttribute();\r\n        //reserving vertex constants for projection matrix\r\n        var viewMatrixReg = registerCache.getFreeVertexConstant();\r\n        registerCache.getFreeVertexConstant();\r\n        registerCache.getFreeVertexConstant();\r\n        registerCache.getFreeVertexConstant();\r\n        shader.viewMatrixIndex = viewMatrixReg.index * 4;\r\n        registerCache.getFreeVertexConstant(); // not used\r\n        var constOne = registerCache.getFreeVertexConstant();\r\n        var constNegOne = registerCache.getFreeVertexConstant();\r\n        var misc = registerCache.getFreeVertexConstant();\r\n        var sceneMatrixReg = registerCache.getFreeVertexConstant();\r\n        registerCache.getFreeVertexConstant();\r\n        registerCache.getFreeVertexConstant();\r\n        registerCache.getFreeVertexConstant();\r\n        shader.sceneMatrixIndex = sceneMatrixReg.index * 4;\r\n        var q0 = registerCache.getFreeVertexVectorTemp();\r\n        registerCache.addVertexTempUsages(q0, 1);\r\n        var q1 = registerCache.getFreeVertexVectorTemp();\r\n        registerCache.addVertexTempUsages(q1, 1);\r\n        var l = registerCache.getFreeVertexVectorTemp();\r\n        registerCache.addVertexTempUsages(l, 1);\r\n        var behind = registerCache.getFreeVertexVectorTemp();\r\n        registerCache.addVertexTempUsages(behind, 1);\r\n        var qclipped = registerCache.getFreeVertexVectorTemp();\r\n        registerCache.addVertexTempUsages(qclipped, 1);\r\n        var offset = registerCache.getFreeVertexVectorTemp();\r\n        registerCache.addVertexTempUsages(offset, 1);\r\n        return \"m44 \" + q0 + \", \" + position0 + \", \" + sceneMatrixReg + \"\t\t\t\\n\" +\r\n            \"m44 \" + q1 + \", \" + position1 + \", \" + sceneMatrixReg + \"\t\t\t\\n\" +\r\n            \"sub \" + l + \", \" + q1 + \", \" + q0 + \" \t\t\t\\n\" +\r\n            // test if behind camera near plane\r\n            // if 0 - Q0.z < Camera.near then the point needs to be clipped\r\n            \"slt \" + behind + \".x, \" + q0 + \".z, \" + misc + \".z\t\t\t\\n\" +\r\n            \"sub \" + behind + \".y, \" + constOne + \".x, \" + behind + \".x\t\t\t\\n\" +\r\n            // p = point on the plane (0,0,-near)\r\n            // n = plane normal (0,0,-1)\r\n            // D = Q1 - Q0\r\n            // t = ( dot( n, ( p - Q0 ) ) / ( dot( n, d )\r\n            // solve for t where line crosses Camera.near\r\n            \"add \" + offset + \".x, \" + q0 + \".z, \" + misc + \".z\t\t\t\\n\" +\r\n            \"sub \" + offset + \".y, \" + q0 + \".z, \" + q1 + \".z\t\t\t\\n\" +\r\n            // fix divide by zero for horizontal lines\r\n            \"seq \" + offset + \".z, \" + offset + \".y \" + constNegOne + \".x\t\t\t\\n\" +\r\n            \"add \" + offset + \".y, \" + offset + \".y, \" + offset + \".z\t\t\t\\n\" +\r\n            \"div \" + offset + \".z, \" + offset + \".x, \" + offset + \".y\t\t\t\\n\" +\r\n            \"mul \" + offset + \".xyz, \" + offset + \".zzz, \" + l + \".xyz\t\\n\" +\r\n            \"add \" + qclipped + \".xyz, \" + q0 + \".xyz, \" + offset + \".xyz\t\\n\" +\r\n            \"mov \" + qclipped + \".w, \" + constOne + \".x\t\t\t\\n\" +\r\n            // If necessary, replace Q0 with new Qclipped\r\n            \"mul \" + q0 + \", \" + q0 + \", \" + behind + \".yyyy\t\t\t\\n\" +\r\n            \"mul \" + qclipped + \", \" + qclipped + \", \" + behind + \".xxxx\t\t\t\\n\" +\r\n            \"add \" + q0 + \", \" + q0 + \", \" + qclipped + \"\t\t\t\t\\n\" +\r\n            // calculate side vector for line\r\n            \"nrm \" + l + \".xyz, \" + l + \".xyz\t\t\t\\n\" +\r\n            \"nrm \" + behind + \".xyz, \" + q0 + \".xyz\t\t\t\\n\" +\r\n            \"mov \" + behind + \".w, \" + constOne + \".x\t\t\t\t\\n\" +\r\n            \"crs \" + qclipped + \".xyz, \" + l + \", \" + behind + \"\t\t\t\\n\" +\r\n            \"nrm \" + qclipped + \".xyz, \" + qclipped + \".xyz\t\t\t\\n\" +\r\n            // face the side vector properly for the given point\r\n            \"mul \" + qclipped + \".xyz, \" + qclipped + \".xyz, \" + thickness + \".xxx\t\\n\" +\r\n            \"mov \" + qclipped + \".w, \" + constOne + \".x\t\t\t\\n\" +\r\n            // calculate the amount required to move at the point's distance to correspond to the line's pixel width\r\n            // scale the side vector by that amount\r\n            \"dp3 \" + offset + \".x, \" + q0 + \", \" + constNegOne + \"\t\t\t\\n\" +\r\n            \"mul \" + offset + \".x, \" + offset + \".x, \" + misc + \".x\t\t\t\\n\" +\r\n            \"mul \" + qclipped + \".xyz, \" + qclipped + \".xyz, \" + offset + \".xxx\t\\n\" +\r\n            // add scaled side vector to Q0 and transform to clip space\r\n            \"add \" + q0 + \".xyz, \" + q0 + \".xyz, \" + qclipped + \".xyz\t\\n\" +\r\n            \"m44 op, \" + q0 + \", \" + viewMatrixReg + \"\t\t\t\\n\"; // transform Q0 to clip space\r\n    };\r\n    GL_LineElements._iGetFragmentCode = function (shader, registerCache, sharedRegisters) {\r\n        return \"\";\r\n    };\r\n    GL_LineElements.prototype.onClear = function (event) {\r\n        _super.prototype.onClear.call(this, event);\r\n        this._lineElements = null;\r\n    };\r\n    GL_LineElements.prototype._setRenderState = function (renderable, shader, camera, viewProjection) {\r\n        _super.prototype._setRenderState.call(this, renderable, shader, camera, viewProjection);\r\n        if (shader.colorBufferIndex >= 0)\r\n            this.activateVertexBufferVO(shader.colorBufferIndex, this._lineElements.colors);\r\n        this.activateVertexBufferVO(0, this._lineElements.positions, 3);\r\n        this.activateVertexBufferVO(2, this._lineElements.positions, 3, 12);\r\n        this.activateVertexBufferVO(3, this._lineElements.thickness);\r\n        shader.vertexConstantData[4 + 16] = 1;\r\n        shader.vertexConstantData[5 + 16] = 1;\r\n        shader.vertexConstantData[6 + 16] = 1;\r\n        shader.vertexConstantData[7 + 16] = 1;\r\n        shader.vertexConstantData[10 + 16] = -1;\r\n        shader.vertexConstantData[12 + 16] = this._thickness / ((this._stage.scissorRect) ? Math.min(this._stage.scissorRect.width, this._stage.scissorRect.height) : Math.min(this._stage.width, this._stage.height));\r\n        shader.vertexConstantData[13 + 16] = 1 / 255;\r\n        shader.vertexConstantData[14 + 16] = camera.projection.near;\r\n        var context = this._stage.context;\r\n    };\r\n    GL_LineElements.prototype.draw = function (renderable, shader, camera, viewProjection, count, offset) {\r\n        var context = this._stage.context;\r\n        // projection matrix\r\n        camera.projection.matrix.copyRawDataTo(shader.vertexConstantData, shader.viewMatrixIndex, true);\r\n        this._calcMatrix.copyFrom(renderable.sourceEntity.sceneTransform);\r\n        this._calcMatrix.append(camera.inverseSceneTransform);\r\n        this._calcMatrix.copyRawDataTo(shader.vertexConstantData, shader.sceneMatrixIndex, true);\r\n        context.setProgramConstantsFromArray(ContextGLProgramType_1.ContextGLProgramType.VERTEX, shader.vertexConstantData);\r\n        if (this._indices)\r\n            this.getIndexBufferGL().draw(ContextGLDrawMode_1.ContextGLDrawMode.TRIANGLES, 0, this.numIndices);\r\n        else\r\n            this._stage.context.drawVertices(ContextGLDrawMode_1.ContextGLDrawMode.TRIANGLES, offset, count || this.numVertices);\r\n    };\r\n    /**\r\n     * //TODO\r\n     *\r\n     * @param pool\r\n     * @param renderable\r\n     * @param level\r\n     * @param indexOffset\r\n     * @returns {away.pool.LineSubSpriteRenderable}\r\n     * @protected\r\n     */\r\n    GL_LineElements.prototype._pGetOverflowElements = function () {\r\n        return new GL_LineElements(this._lineElements, this._stage);\r\n    };\r\n    GL_LineElements.elementsType = \"[elements Line]\";\r\n    return GL_LineElements;\r\n}(GL_ElementsBase_1.GL_ElementsBase));\r\nexports.GL_LineElements = GL_LineElements;\r\n},{\"../elements/GL_ElementsBase\":\"awayjs-renderergl/lib/elements/GL_ElementsBase\",\"awayjs-core/lib/geom/Matrix3D\":undefined,\"awayjs-stagegl/lib/base/ContextGLDrawMode\":undefined,\"awayjs-stagegl/lib/base/ContextGLProgramType\":undefined}],\"awayjs-renderergl/lib/elements/GL_SkyboxElements\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Matrix3D_1 = require(\"awayjs-core/lib/geom/Matrix3D\");\r\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\r\nvar ContextGLDrawMode_1 = require(\"awayjs-stagegl/lib/base/ContextGLDrawMode\");\r\nvar ContextGLProgramType_1 = require(\"awayjs-stagegl/lib/base/ContextGLProgramType\");\r\nvar GL_TriangleElements_1 = require(\"../elements/GL_TriangleElements\");\r\n/**\r\n *\r\n * @class away.pool.GL_SkyboxElements\r\n */\r\nvar GL_SkyboxElements = (function (_super) {\r\n    __extends(GL_SkyboxElements, _super);\r\n    function GL_SkyboxElements() {\r\n        _super.apply(this, arguments);\r\n        this._skyboxProjection = new Matrix3D_1.Matrix3D();\r\n    }\r\n    Object.defineProperty(GL_SkyboxElements.prototype, \"elementsType\", {\r\n        get: function () {\r\n            return GL_SkyboxElements.elementsType;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GL_SkyboxElements.prototype, \"elementsClass\", {\r\n        get: function () {\r\n            return GL_SkyboxElements;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    GL_SkyboxElements._iIncludeDependencies = function (shader) {\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    GL_SkyboxElements._iGetVertexCode = function (shader, registerCache, sharedRegisters) {\r\n        var code = \"\";\r\n        //get the projection coordinates\r\n        var position = (shader.globalPosDependencies > 0) ? sharedRegisters.globalPositionVertex : sharedRegisters.animatedPosition;\r\n        //reserving vertex constants for projection matrix\r\n        var viewMatrixReg = registerCache.getFreeVertexConstant();\r\n        registerCache.getFreeVertexConstant();\r\n        registerCache.getFreeVertexConstant();\r\n        registerCache.getFreeVertexConstant();\r\n        shader.viewMatrixIndex = viewMatrixReg.index * 4;\r\n        var scenePosition = registerCache.getFreeVertexConstant();\r\n        shader.scenePositionIndex = scenePosition.index * 4;\r\n        var skyboxScale = registerCache.getFreeVertexConstant();\r\n        var temp = registerCache.getFreeVertexVectorTemp();\r\n        code += \"mul \" + temp + \", \" + position + \", \" + skyboxScale + \"\\n\" +\r\n            \"add \" + temp + \", \" + temp + \", \" + scenePosition + \"\\n\";\r\n        if (shader.projectionDependencies > 0) {\r\n            sharedRegisters.projectionFragment = registerCache.getFreeVarying();\r\n            code += \"m44 \" + temp + \", \" + temp + \", \" + viewMatrixReg + \"\\n\" +\r\n                \"mov \" + sharedRegisters.projectionFragment + \", \" + temp + \"\\n\" +\r\n                \"mov op, \" + temp + \"\\n\";\r\n        }\r\n        else {\r\n            code += \"m44 op, \" + temp + \", \" + viewMatrixReg + \"\\n\";\r\n        }\r\n        return code;\r\n    };\r\n    GL_SkyboxElements._iGetFragmentCode = function (shader, registerCache, sharedRegisters) {\r\n        return \"\";\r\n    };\r\n    GL_SkyboxElements.prototype.draw = function (renderable, shader, camera, viewProjection, count, offset) {\r\n        var index = shader.scenePositionIndex;\r\n        var pos = camera.scenePosition;\r\n        shader.vertexConstantData[index++] = 2 * pos.x;\r\n        shader.vertexConstantData[index++] = 2 * pos.y;\r\n        shader.vertexConstantData[index++] = 2 * pos.z;\r\n        shader.vertexConstantData[index++] = 1;\r\n        shader.vertexConstantData[index++] = shader.vertexConstantData[index++] = shader.vertexConstantData[index++] = camera.projection.far / Math.sqrt(3);\r\n        shader.vertexConstantData[index] = 1;\r\n        var near = new Vector3D_1.Vector3D();\r\n        this._skyboxProjection.copyFrom(viewProjection);\r\n        this._skyboxProjection.copyRowTo(2, near);\r\n        var camPos = camera.scenePosition;\r\n        var cx = near.x;\r\n        var cy = near.y;\r\n        var cz = near.z;\r\n        var cw = -(near.x * camPos.x + near.y * camPos.y + near.z * camPos.z + Math.sqrt(cx * cx + cy * cy + cz * cz));\r\n        var signX = cx >= 0 ? 1 : -1;\r\n        var signY = cy >= 0 ? 1 : -1;\r\n        var p = new Vector3D_1.Vector3D(signX, signY, 1, 1);\r\n        var inverse = this._skyboxProjection.clone();\r\n        inverse.invert();\r\n        var q = inverse.transformVector(p);\r\n        this._skyboxProjection.copyRowTo(3, p);\r\n        var a = (q.x * p.x + q.y * p.y + q.z * p.z + q.w * p.w) / (cx * q.x + cy * q.y + cz * q.z + cw * q.w);\r\n        this._skyboxProjection.copyRowFrom(2, new Vector3D_1.Vector3D(cx * a, cy * a, cz * a, cw * a));\r\n        //set constants\r\n        if (shader.sceneMatrixIndex >= 0) {\r\n            renderable.renderSceneTransform.copyRawDataTo(shader.vertexConstantData, shader.sceneMatrixIndex, true);\r\n            this._skyboxProjection.copyRawDataTo(shader.vertexConstantData, shader.viewMatrixIndex, true);\r\n        }\r\n        else {\r\n            this._skyboxProjection.copyRawDataTo(shader.vertexConstantData, shader.viewMatrixIndex, true);\r\n        }\r\n        var context = this._stage.context;\r\n        context.setProgramConstantsFromArray(ContextGLProgramType_1.ContextGLProgramType.VERTEX, shader.vertexConstantData);\r\n        context.setProgramConstantsFromArray(ContextGLProgramType_1.ContextGLProgramType.FRAGMENT, shader.fragmentConstantData);\r\n        if (this._indices)\r\n            this.getIndexBufferGL().draw(ContextGLDrawMode_1.ContextGLDrawMode.TRIANGLES, 0, this.numIndices);\r\n        else\r\n            this._stage.context.drawVertices(ContextGLDrawMode_1.ContextGLDrawMode.TRIANGLES, offset, count || this.numVertices);\r\n    };\r\n    GL_SkyboxElements.elementsType = \"[elements Skybox]\";\r\n    return GL_SkyboxElements;\r\n}(GL_TriangleElements_1.GL_TriangleElements));\r\nexports.GL_SkyboxElements = GL_SkyboxElements;\r\n},{\"../elements/GL_TriangleElements\":\"awayjs-renderergl/lib/elements/GL_TriangleElements\",\"awayjs-core/lib/geom/Matrix3D\":undefined,\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-stagegl/lib/base/ContextGLDrawMode\":undefined,\"awayjs-stagegl/lib/base/ContextGLProgramType\":undefined}],\"awayjs-renderergl/lib/elements/GL_TriangleElements\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Matrix3DUtils_1 = require(\"awayjs-core/lib/geom/Matrix3DUtils\");\r\nvar ContextGLDrawMode_1 = require(\"awayjs-stagegl/lib/base/ContextGLDrawMode\");\r\nvar ContextGLProgramType_1 = require(\"awayjs-stagegl/lib/base/ContextGLProgramType\");\r\nvar GL_ElementsBase_1 = require(\"../elements/GL_ElementsBase\");\r\n/**\r\n *\r\n * @class away.pool.GL_TriangleElements\r\n */\r\nvar GL_TriangleElements = (function (_super) {\r\n    __extends(GL_TriangleElements, _super);\r\n    function GL_TriangleElements(triangleElements, stage) {\r\n        _super.call(this, triangleElements, stage);\r\n        this._triangleElements = triangleElements;\r\n    }\r\n    Object.defineProperty(GL_TriangleElements.prototype, \"elementsType\", {\r\n        get: function () {\r\n            return GL_TriangleElements.elementsType;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GL_TriangleElements.prototype, \"elementsClass\", {\r\n        get: function () {\r\n            return GL_TriangleElements;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    GL_TriangleElements._iIncludeDependencies = function (shader) {\r\n    };\r\n    GL_TriangleElements._iGetVertexCode = function (shader, registerCache, sharedRegisters) {\r\n        var code = \"\";\r\n        //get the projection coordinates\r\n        var position = (shader.globalPosDependencies > 0) ? sharedRegisters.globalPositionVertex : sharedRegisters.animatedPosition;\r\n        //reserving vertex constants for projection matrix\r\n        var viewMatrixReg = registerCache.getFreeVertexConstant();\r\n        registerCache.getFreeVertexConstant();\r\n        registerCache.getFreeVertexConstant();\r\n        registerCache.getFreeVertexConstant();\r\n        shader.viewMatrixIndex = viewMatrixReg.index * 4;\r\n        if (shader.projectionDependencies > 0) {\r\n            sharedRegisters.projectionFragment = registerCache.getFreeVarying();\r\n            var temp = registerCache.getFreeVertexVectorTemp();\r\n            code += \"m44 \" + temp + \", \" + position + \", \" + viewMatrixReg + \"\\n\" +\r\n                \"mov \" + sharedRegisters.projectionFragment + \", \" + temp + \"\\n\" +\r\n                \"mov op, \" + temp + \"\\n\";\r\n        }\r\n        else {\r\n            code += \"m44 op, \" + position + \", \" + viewMatrixReg + \"\\n\";\r\n        }\r\n        return code;\r\n    };\r\n    GL_TriangleElements._iGetFragmentCode = function (shader, registerCache, sharedRegisters) {\r\n        return \"\";\r\n    };\r\n    GL_TriangleElements.prototype.onClear = function (event) {\r\n        _super.prototype.onClear.call(this, event);\r\n        this._triangleElements = null;\r\n    };\r\n    GL_TriangleElements.prototype._setRenderState = function (renderable, shader, camera, viewProjection) {\r\n        _super.prototype._setRenderState.call(this, renderable, shader, camera, viewProjection);\r\n        //set buffers\r\n        //TODO: find a better way to update a concatenated buffer when autoderiving\r\n        if (shader.normalIndex >= 0 && this._triangleElements.autoDeriveNormals)\r\n            this._triangleElements.normals;\r\n        if (shader.tangentIndex >= 0 && this._triangleElements.autoDeriveTangents)\r\n            this._triangleElements.tangents;\r\n        if (shader.curvesIndex >= 0)\r\n            this.activateVertexBufferVO(shader.curvesIndex, this._triangleElements.getCustomAtributes(\"curves\"));\r\n        if (shader.uvIndex >= 0)\r\n            this.activateVertexBufferVO(shader.uvIndex, this._triangleElements.uvs || this._triangleElements.positions);\r\n        if (shader.secondaryUVIndex >= 0)\r\n            this.activateVertexBufferVO(shader.secondaryUVIndex, this._triangleElements.getCustomAtributes(\"secondaryUVs\") || this._triangleElements.uvs || this._triangleElements.positions);\r\n        if (shader.normalIndex >= 0)\r\n            this.activateVertexBufferVO(shader.normalIndex, this._triangleElements.normals);\r\n        if (shader.tangentIndex >= 0)\r\n            this.activateVertexBufferVO(shader.tangentIndex, this._triangleElements.tangents);\r\n        if (shader.jointIndexIndex >= 0)\r\n            this.activateVertexBufferVO(shader.jointIndexIndex, this._triangleElements.jointIndices);\r\n        if (shader.jointWeightIndex >= 0)\r\n            this.activateVertexBufferVO(shader.jointIndexIndex, this._triangleElements.jointWeights);\r\n        this.activateVertexBufferVO(0, this._triangleElements.positions);\r\n    };\r\n    GL_TriangleElements.prototype.draw = function (renderable, shader, camera, viewProjection, count, offset) {\r\n        //set constants\r\n        if (shader.sceneMatrixIndex >= 0) {\r\n            renderable.renderSceneTransform.copyRawDataTo(shader.vertexConstantData, shader.sceneMatrixIndex, true);\r\n            viewProjection.copyRawDataTo(shader.vertexConstantData, shader.viewMatrixIndex, true);\r\n        }\r\n        else {\r\n            var matrix3D = Matrix3DUtils_1.Matrix3DUtils.CALCULATION_MATRIX;\r\n            matrix3D.copyFrom(renderable.renderSceneTransform);\r\n            matrix3D.append(viewProjection);\r\n            matrix3D.copyRawDataTo(shader.vertexConstantData, shader.viewMatrixIndex, true);\r\n        }\r\n        var context = this._stage.context;\r\n        context.setProgramConstantsFromArray(ContextGLProgramType_1.ContextGLProgramType.VERTEX, shader.vertexConstantData);\r\n        context.setProgramConstantsFromArray(ContextGLProgramType_1.ContextGLProgramType.FRAGMENT, shader.fragmentConstantData);\r\n        if (this._indices)\r\n            this.getIndexBufferGL().draw(ContextGLDrawMode_1.ContextGLDrawMode.TRIANGLES, 0, this.numIndices);\r\n        else\r\n            this._stage.context.drawVertices(ContextGLDrawMode_1.ContextGLDrawMode.TRIANGLES, offset, count || this.numVertices);\r\n    };\r\n    /**\r\n     * //TODO\r\n     *\r\n     * @param pool\r\n     * @param renderable\r\n     * @param level\r\n     * @param indexOffset\r\n     * @returns {away.pool.GL_GraphicRenderable}\r\n     * @protected\r\n     */\r\n    GL_TriangleElements.prototype._pGetOverflowElements = function () {\r\n        return new GL_TriangleElements(this._triangleElements, this._stage);\r\n    };\r\n    GL_TriangleElements.elementsType = \"[elements Triangle]\";\r\n    return GL_TriangleElements;\r\n}(GL_ElementsBase_1.GL_ElementsBase));\r\nexports.GL_TriangleElements = GL_TriangleElements;\r\n},{\"../elements/GL_ElementsBase\":\"awayjs-renderergl/lib/elements/GL_ElementsBase\",\"awayjs-core/lib/geom/Matrix3DUtils\":undefined,\"awayjs-stagegl/lib/base/ContextGLDrawMode\":undefined,\"awayjs-stagegl/lib/base/ContextGLProgramType\":undefined}],\"awayjs-renderergl/lib/elements/IElementsClassGL\":[function(require,module,exports){\n\"use strict\";\r\n},{}],\"awayjs-renderergl/lib/elements\":[function(require,module,exports){\n\"use strict\";\r\nvar GL_ElementsBase_1 = require(\"./elements/GL_ElementsBase\");\r\nexports.GL_ElementsBase = GL_ElementsBase_1.GL_ElementsBase;\r\nvar GL_LineElements_1 = require(\"./elements/GL_LineElements\");\r\nexports.GL_LineElements = GL_LineElements_1.GL_LineElements;\r\nvar GL_SkyboxElements_1 = require(\"./elements/GL_SkyboxElements\");\r\nexports.GL_SkyboxElements = GL_SkyboxElements_1.GL_SkyboxElements;\r\nvar GL_TriangleElements_1 = require(\"./elements/GL_TriangleElements\");\r\nexports.GL_TriangleElements = GL_TriangleElements_1.GL_TriangleElements;\r\n},{\"./elements/GL_ElementsBase\":\"awayjs-renderergl/lib/elements/GL_ElementsBase\",\"./elements/GL_LineElements\":\"awayjs-renderergl/lib/elements/GL_LineElements\",\"./elements/GL_SkyboxElements\":\"awayjs-renderergl/lib/elements/GL_SkyboxElements\",\"./elements/GL_TriangleElements\":\"awayjs-renderergl/lib/elements/GL_TriangleElements\"}],\"awayjs-renderergl/lib/errors/AnimationSetError\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar ErrorBase_1 = require(\"awayjs-core/lib/errors/ErrorBase\");\r\nvar AnimationSetError = (function (_super) {\r\n    __extends(AnimationSetError, _super);\r\n    function AnimationSetError(message) {\r\n        _super.call(this, message);\r\n    }\r\n    return AnimationSetError;\r\n}(ErrorBase_1.ErrorBase));\r\nexports.AnimationSetError = AnimationSetError;\r\n},{\"awayjs-core/lib/errors/ErrorBase\":undefined}],\"awayjs-renderergl/lib/errors\":[function(require,module,exports){\n\"use strict\";\r\nvar AnimationSetError_1 = require(\"./errors/AnimationSetError\");\r\nexports.AnimationSetError = AnimationSetError_1.AnimationSetError;\r\n},{\"./errors/AnimationSetError\":\"awayjs-renderergl/lib/errors/AnimationSetError\"}],\"awayjs-renderergl/lib/events/AnimationStateEvent\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar EventBase_1 = require(\"awayjs-core/lib/events/EventBase\");\r\n/**\r\n * Dispatched to notify changes in an animation state's state.\r\n */\r\nvar AnimationStateEvent = (function (_super) {\r\n    __extends(AnimationStateEvent, _super);\r\n    /**\r\n     * Create a new <code>AnimatonStateEvent</code>\r\n     *\r\n     * @param type The event type.\r\n     * @param animator The animation state object that is the subject of this event.\r\n     * @param animationNode The animation node inside the animation state from which the event originated.\r\n     */\r\n    function AnimationStateEvent(type, animator, animationState, animationNode) {\r\n        _super.call(this, type);\r\n        this._animator = animator;\r\n        this._animationState = animationState;\r\n        this._animationNode = animationNode;\r\n    }\r\n    Object.defineProperty(AnimationStateEvent.prototype, \"animator\", {\r\n        /**\r\n         * The animator object that is the subject of this event.\r\n         */\r\n        get: function () {\r\n            return this._animator;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AnimationStateEvent.prototype, \"animationState\", {\r\n        /**\r\n         * The animation state object that is the subject of this event.\r\n         */\r\n        get: function () {\r\n            return this._animationState;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AnimationStateEvent.prototype, \"animationNode\", {\r\n        /**\r\n         * The animation node inside the animation state from which the event originated.\r\n         */\r\n        get: function () {\r\n            return this._animationNode;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Clones the event.\r\n     *\r\n     * @return An exact duplicate of the current object.\r\n     */\r\n    AnimationStateEvent.prototype.clone = function () {\r\n        return new AnimationStateEvent(this.type, this._animator, this._animationState, this._animationNode);\r\n    };\r\n    /**\r\n     * Dispatched when a non-looping clip node inside an animation state reaches the end of its timeline.\r\n     */\r\n    AnimationStateEvent.PLAYBACK_COMPLETE = \"playbackComplete\";\r\n    AnimationStateEvent.TRANSITION_COMPLETE = \"transitionComplete\";\r\n    return AnimationStateEvent;\r\n}(EventBase_1.EventBase));\r\nexports.AnimationStateEvent = AnimationStateEvent;\r\n},{\"awayjs-core/lib/events/EventBase\":undefined}],\"awayjs-renderergl/lib/events/AnimatorEvent\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar EventBase_1 = require(\"awayjs-core/lib/events/EventBase\");\r\n/**\r\n * Dispatched to notify changes in an animator's state.\r\n */\r\nvar AnimatorEvent = (function (_super) {\r\n    __extends(AnimatorEvent, _super);\r\n    /**\r\n     * Create a new <code>AnimatorEvent</code> object.\r\n     *\r\n     * @param type The event type.\r\n     * @param animator The animator object that is the subject of this event.\r\n     */\r\n    function AnimatorEvent(type, animator) {\r\n        _super.call(this, type);\r\n        this._animator = animator;\r\n    }\r\n    Object.defineProperty(AnimatorEvent.prototype, \"animator\", {\r\n        get: function () {\r\n            return this._animator;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Clones the event.\r\n     *\r\n     * @return An exact duplicate of the current event object.\r\n     */\r\n    AnimatorEvent.prototype.clone = function () {\r\n        return new AnimatorEvent(this.type, this._animator);\r\n    };\r\n    /**\r\n     * Defines the value of the type property of a start event object.\r\n     */\r\n    AnimatorEvent.START = \"animatorStart\";\r\n    /**\r\n     * Defines the value of the type property of a stop event object.\r\n     */\r\n    AnimatorEvent.STOP = \"animatorStop\";\r\n    /**\r\n     * Defines the value of the type property of a cycle complete event object.\r\n     */\r\n    AnimatorEvent.CYCLE_COMPLETE = \"animatorCycleComplete\";\r\n    return AnimatorEvent;\r\n}(EventBase_1.EventBase));\r\nexports.AnimatorEvent = AnimatorEvent;\r\n},{\"awayjs-core/lib/events/EventBase\":undefined}],\"awayjs-renderergl/lib/events/PassEvent\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar EventBase_1 = require(\"awayjs-core/lib/events/EventBase\");\r\nvar PassEvent = (function (_super) {\r\n    __extends(PassEvent, _super);\r\n    function PassEvent(type, pass) {\r\n        _super.call(this, type);\r\n        this._pass = pass;\r\n    }\r\n    Object.defineProperty(PassEvent.prototype, \"pass\", {\r\n        /**\r\n         *\r\n         */\r\n        get: function () {\r\n            return this._pass;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     *\r\n     */\r\n    PassEvent.prototype.clone = function () {\r\n        return new PassEvent(this.type, this._pass);\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    PassEvent.INVALIDATE = \"invalidatePass\";\r\n    return PassEvent;\r\n}(EventBase_1.EventBase));\r\nexports.PassEvent = PassEvent;\r\n},{\"awayjs-core/lib/events/EventBase\":undefined}],\"awayjs-renderergl/lib/events/RTTEvent\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar EventBase_1 = require(\"awayjs-core/lib/events/EventBase\");\r\nvar RTTEvent = (function (_super) {\r\n    __extends(RTTEvent, _super);\r\n    function RTTEvent(type, rttManager) {\r\n        _super.call(this, type);\r\n        this._rttManager = rttManager;\r\n    }\r\n    Object.defineProperty(RTTEvent.prototype, \"rttManager\", {\r\n        /**\r\n         *\r\n         */\r\n        get: function () {\r\n            return this._rttManager;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     *\r\n     */\r\n    RTTEvent.prototype.clone = function () {\r\n        return new RTTEvent(this.type, this._rttManager);\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    RTTEvent.RESIZE = \"rttManagerResize\";\r\n    return RTTEvent;\r\n}(EventBase_1.EventBase));\r\nexports.RTTEvent = RTTEvent;\r\n},{\"awayjs-core/lib/events/EventBase\":undefined}],\"awayjs-renderergl/lib/events/ShadingMethodEvent\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar EventBase_1 = require(\"awayjs-core/lib/events/EventBase\");\r\nvar ShadingMethodEvent = (function (_super) {\r\n    __extends(ShadingMethodEvent, _super);\r\n    function ShadingMethodEvent(type) {\r\n        _super.call(this, type);\r\n    }\r\n    ShadingMethodEvent.SHADER_INVALIDATED = \"ShaderInvalidated\";\r\n    return ShadingMethodEvent;\r\n}(EventBase_1.EventBase));\r\nexports.ShadingMethodEvent = ShadingMethodEvent;\r\n},{\"awayjs-core/lib/events/EventBase\":undefined}],\"awayjs-renderergl/lib/events\":[function(require,module,exports){\n\"use strict\";\r\nvar AnimationStateEvent_1 = require(\"./events/AnimationStateEvent\");\r\nexports.AnimationStateEvent = AnimationStateEvent_1.AnimationStateEvent;\r\nvar AnimatorEvent_1 = require(\"./events/AnimatorEvent\");\r\nexports.AnimatorEvent = AnimatorEvent_1.AnimatorEvent;\r\nvar PassEvent_1 = require(\"./events/PassEvent\");\r\nexports.PassEvent = PassEvent_1.PassEvent;\r\nvar RTTEvent_1 = require(\"./events/RTTEvent\");\r\nexports.RTTEvent = RTTEvent_1.RTTEvent;\r\nvar ShadingMethodEvent_1 = require(\"./events/ShadingMethodEvent\");\r\nexports.ShadingMethodEvent = ShadingMethodEvent_1.ShadingMethodEvent;\r\n},{\"./events/AnimationStateEvent\":\"awayjs-renderergl/lib/events/AnimationStateEvent\",\"./events/AnimatorEvent\":\"awayjs-renderergl/lib/events/AnimatorEvent\",\"./events/PassEvent\":\"awayjs-renderergl/lib/events/PassEvent\",\"./events/RTTEvent\":\"awayjs-renderergl/lib/events/RTTEvent\",\"./events/ShadingMethodEvent\":\"awayjs-renderergl/lib/events/ShadingMethodEvent\"}],\"awayjs-renderergl/lib/filters/BlurFilter3D\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Filter3DHBlurTask_1 = require(\"../filters/tasks/Filter3DHBlurTask\");\r\nvar Filter3DVBlurTask_1 = require(\"../filters/tasks/Filter3DVBlurTask\");\r\nvar Filter3DBase_1 = require(\"../filters/Filter3DBase\");\r\nvar BlurFilter3D = (function (_super) {\r\n    __extends(BlurFilter3D, _super);\r\n    /**\r\n     * Creates a new BlurFilter3D object\r\n     * @param blurX The amount of horizontal blur to apply\r\n     * @param blurY The amount of vertical blur to apply\r\n     * @param stepSize The distance between samples. Set to -1 to autodetect with acceptable quality.\r\n     */\r\n    function BlurFilter3D(blurX, blurY, stepSize) {\r\n        if (blurX === void 0) { blurX = 3; }\r\n        if (blurY === void 0) { blurY = 3; }\r\n        if (stepSize === void 0) { stepSize = -1; }\r\n        _super.call(this);\r\n        this._hBlurTask = new Filter3DHBlurTask_1.Filter3DHBlurTask(blurX, stepSize);\r\n        this._vBlurTask = new Filter3DVBlurTask_1.Filter3DVBlurTask(blurY, stepSize);\r\n        this.addTask(this._hBlurTask);\r\n        this.addTask(this._vBlurTask);\r\n    }\r\n    Object.defineProperty(BlurFilter3D.prototype, \"blurX\", {\r\n        get: function () {\r\n            return this._hBlurTask.amount;\r\n        },\r\n        set: function (value) {\r\n            this._hBlurTask.amount = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BlurFilter3D.prototype, \"blurY\", {\r\n        get: function () {\r\n            return this._vBlurTask.amount;\r\n        },\r\n        set: function (value) {\r\n            this._vBlurTask.amount = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BlurFilter3D.prototype, \"stepSize\", {\r\n        /**\r\n         * The distance between two blur samples. Set to -1 to autodetect with acceptable quality (default value).\r\n         * Higher values provide better performance at the cost of reduces quality.\r\n         */\r\n        get: function () {\r\n            return this._hBlurTask.stepSize;\r\n        },\r\n        set: function (value) {\r\n            this._hBlurTask.stepSize = value;\r\n            this._vBlurTask.stepSize = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    BlurFilter3D.prototype.setRenderTargets = function (mainTarget, stage) {\r\n        this._hBlurTask.target = this._vBlurTask.getMainInputTexture(stage);\r\n        _super.prototype.setRenderTargets.call(this, mainTarget, stage);\r\n    };\r\n    return BlurFilter3D;\r\n}(Filter3DBase_1.Filter3DBase));\r\nexports.BlurFilter3D = BlurFilter3D;\r\n},{\"../filters/Filter3DBase\":\"awayjs-renderergl/lib/filters/Filter3DBase\",\"../filters/tasks/Filter3DHBlurTask\":\"awayjs-renderergl/lib/filters/tasks/Filter3DHBlurTask\",\"../filters/tasks/Filter3DVBlurTask\":\"awayjs-renderergl/lib/filters/tasks/Filter3DVBlurTask\"}],\"awayjs-renderergl/lib/filters/CompositeFilter3D\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Filter3DCompositeTask_1 = require(\"../filters/tasks/Filter3DCompositeTask\");\r\nvar Filter3DBase_1 = require(\"../filters/Filter3DBase\");\r\nvar CompositeFilter3D = (function (_super) {\r\n    __extends(CompositeFilter3D, _super);\r\n    /**\r\n     * Creates a new CompositeFilter3D object\r\n     * @param blurX The amount of horizontal blur to apply\r\n     * @param blurY The amount of vertical blur to apply\r\n     * @param stepSize The distance between samples. Set to -1 to autodetect with acceptable quality.\r\n     */\r\n    function CompositeFilter3D(blendMode, exposure) {\r\n        if (exposure === void 0) { exposure = 1; }\r\n        _super.call(this);\r\n        this._compositeTask = new Filter3DCompositeTask_1.Filter3DCompositeTask(blendMode, exposure);\r\n        this.addTask(this._compositeTask);\r\n    }\r\n    Object.defineProperty(CompositeFilter3D.prototype, \"exposure\", {\r\n        get: function () {\r\n            return this._compositeTask.exposure;\r\n        },\r\n        set: function (value) {\r\n            this._compositeTask.exposure = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CompositeFilter3D.prototype, \"overlayTexture\", {\r\n        get: function () {\r\n            return this._compositeTask.overlayTexture;\r\n        },\r\n        set: function (value) {\r\n            this._compositeTask.overlayTexture = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return CompositeFilter3D;\r\n}(Filter3DBase_1.Filter3DBase));\r\nexports.CompositeFilter3D = CompositeFilter3D;\r\n},{\"../filters/Filter3DBase\":\"awayjs-renderergl/lib/filters/Filter3DBase\",\"../filters/tasks/Filter3DCompositeTask\":\"awayjs-renderergl/lib/filters/tasks/Filter3DCompositeTask\"}],\"awayjs-renderergl/lib/filters/FXAAFilter3D\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Filter3DFXAATask_1 = require(\"../filters/tasks/Filter3DFXAATask\");\r\nvar Filter3DBase_1 = require(\"../filters/Filter3DBase\");\r\nvar FXAAFilter3D = (function (_super) {\r\n    __extends(FXAAFilter3D, _super);\r\n    /**\r\n     * Creates a new FXAAFilter3D object\r\n     * @param amount\r\n     * @param stepSize The distance between samples. Set to -1 to autodetect with acceptable quality.\r\n     */\r\n    function FXAAFilter3D(amount, stepSize) {\r\n        if (stepSize === void 0) { stepSize = -1; }\r\n        _super.call(this);\r\n        this._fxaaTask = new Filter3DFXAATask_1.Filter3DFXAATask(amount, stepSize);\r\n        this.addTask(this._fxaaTask);\r\n    }\r\n    Object.defineProperty(FXAAFilter3D.prototype, \"amount\", {\r\n        get: function () {\r\n            return this._fxaaTask.amount;\r\n        },\r\n        set: function (value) {\r\n            this._fxaaTask.amount = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FXAAFilter3D.prototype, \"stepSize\", {\r\n        get: function () {\r\n            return this._fxaaTask.stepSize;\r\n        },\r\n        set: function (value) {\r\n            this._fxaaTask.stepSize = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return FXAAFilter3D;\r\n}(Filter3DBase_1.Filter3DBase));\r\nexports.FXAAFilter3D = FXAAFilter3D;\r\n},{\"../filters/Filter3DBase\":\"awayjs-renderergl/lib/filters/Filter3DBase\",\"../filters/tasks/Filter3DFXAATask\":\"awayjs-renderergl/lib/filters/tasks/Filter3DFXAATask\"}],\"awayjs-renderergl/lib/filters/Filter3DBase\":[function(require,module,exports){\n\"use strict\";\r\nvar Filter3DBase = (function () {\r\n    function Filter3DBase() {\r\n        this._tasks = new Array();\r\n    }\r\n    Object.defineProperty(Filter3DBase.prototype, \"requireDepthRender\", {\r\n        get: function () {\r\n            return this._requireDepthRender;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Filter3DBase.prototype.addTask = function (filter) {\r\n        this._tasks.push(filter);\r\n        if (this._requireDepthRender == null)\r\n            this._requireDepthRender = filter.requireDepthRender;\r\n    };\r\n    Object.defineProperty(Filter3DBase.prototype, \"tasks\", {\r\n        get: function () {\r\n            return this._tasks;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Filter3DBase.prototype.getMainInputTexture = function (stage) {\r\n        return this._tasks[0].getMainInputTexture(stage);\r\n    };\r\n    Object.defineProperty(Filter3DBase.prototype, \"textureWidth\", {\r\n        get: function () {\r\n            return this._textureWidth;\r\n        },\r\n        set: function (value) {\r\n            this._textureWidth = value;\r\n            for (var i = 0; i < this._tasks.length; ++i)\r\n                this._tasks[i].textureWidth = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Filter3DBase.prototype, \"rttManager\", {\r\n        get: function () {\r\n            return this._rttManager;\r\n        },\r\n        set: function (value) {\r\n            this._rttManager = value;\r\n            for (var i = 0; i < this._tasks.length; ++i)\r\n                this._tasks[i].rttManager = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Filter3DBase.prototype, \"textureHeight\", {\r\n        get: function () {\r\n            return this._textureHeight;\r\n        },\r\n        set: function (value) {\r\n            this._textureHeight = value;\r\n            for (var i = 0; i < this._tasks.length; ++i)\r\n                this._tasks[i].textureHeight = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    // link up the filters correctly with the next filter\r\n    Filter3DBase.prototype.setRenderTargets = function (mainTarget, stage) {\r\n        this._tasks[this._tasks.length - 1].target = mainTarget;\r\n    };\r\n    Filter3DBase.prototype.dispose = function () {\r\n        for (var i = 0; i < this._tasks.length; ++i)\r\n            this._tasks[i].dispose();\r\n    };\r\n    Filter3DBase.prototype.update = function (stage, camera) {\r\n    };\r\n    return Filter3DBase;\r\n}());\r\nexports.Filter3DBase = Filter3DBase;\r\n},{}],\"awayjs-renderergl/lib/filters/tasks/Filter3DCompositeTask\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar ContextGLProgramType_1 = require(\"awayjs-stagegl/lib/base/ContextGLProgramType\");\r\nvar Filter3DTaskBase_1 = require(\"../../filters/tasks/Filter3DTaskBase\");\r\nvar Filter3DCompositeTask = (function (_super) {\r\n    __extends(Filter3DCompositeTask, _super);\r\n    function Filter3DCompositeTask(blendMode, exposure) {\r\n        if (exposure === void 0) { exposure = 1; }\r\n        _super.call(this);\r\n        this._data = new Float32Array([exposure, 0.5, 2.0, -1, 0.0, 0.0, 0.0, 0.0]);\r\n        this._blendMode = blendMode;\r\n    }\r\n    Object.defineProperty(Filter3DCompositeTask.prototype, \"overlayTexture\", {\r\n        get: function () {\r\n            return this._overlayTexture;\r\n        },\r\n        set: function (value) {\r\n            this._overlayTexture = value;\r\n            this._overlayWidth = this._overlayTexture.width;\r\n            this._overlayHeight = this._overlayTexture.height;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Filter3DCompositeTask.prototype, \"exposure\", {\r\n        get: function () {\r\n            return this._data[0];\r\n        },\r\n        set: function (value) {\r\n            this._data[0] = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Filter3DCompositeTask.prototype.getFragmentCode = function () {\r\n        var temp1 = this._registerCache.getFreeFragmentVectorTemp();\r\n        this._registerCache.addFragmentTempUsages(temp1, 1);\r\n        var temp2 = this._registerCache.getFreeFragmentVectorTemp();\r\n        this._registerCache.addFragmentTempUsages(temp2, 1);\r\n        var temp3 = this._registerCache.getFreeFragmentVectorTemp();\r\n        this._registerCache.addFragmentTempUsages(temp3, 1);\r\n        var temp4 = this._registerCache.getFreeFragmentVectorTemp();\r\n        this._registerCache.addFragmentTempUsages(temp4, 1);\r\n        var inputTexture = this._registerCache.getFreeTextureReg();\r\n        this._inputTextureIndex = inputTexture.index;\r\n        var overlayTexture = this._registerCache.getFreeTextureReg();\r\n        this._overlayTextureIndex = overlayTexture.index;\r\n        var exposure = this._registerCache.getFreeFragmentConstant();\r\n        this._exposureIndex = exposure.index * 4;\r\n        var scaling = this._registerCache.getFreeFragmentConstant();\r\n        this._scalingIndex = scaling.index * 4;\r\n        var code;\r\n        code = \"tex \" + temp1 + \", \" + this._uvVarying + \", \" + inputTexture + \" <2d,linear,clamp>\\n\" +\r\n            \"mul \" + temp2 + \", \" + this._uvVarying + \", \" + scaling + \".zw\\n\" +\r\n            \"add \" + temp2 + \", \" + temp2 + \", \" + scaling + \".xy\\n\" +\r\n            \"tex \" + temp2 + \", \" + temp2 + \", \" + overlayTexture + \" <2d,linear,clamp>\\n\" +\r\n            \"mul \" + temp2 + \", \" + temp2 + \", \" + exposure + \".xxx\\n\" +\r\n            \"add \" + temp2 + \", \" + temp2 + \", \" + exposure + \".xxx\\n\";\r\n        switch (this._blendMode) {\r\n            case \"multiply\":\r\n                code += \"mul oc, \" + temp1 + \", \" + temp2 + \"\\n\";\r\n                break;\r\n            case \"add\":\r\n                code += \"add oc, \" + temp1 + \", \" + temp2 + \"\\n\";\r\n                break;\r\n            case \"subtract\":\r\n                code += \"sub oc, \" + temp1 + \", \" + temp2 + \"\\n\";\r\n                break;\r\n            case \"overlay\":\r\n                code += \"sge \" + temp3 + \", \" + temp1 + \", \" + exposure + \".yyy\\n\"; // t2 = (blend >= 0.5)? 1 : 0\r\n                code += \"sub \" + temp1 + \", \" + temp3 + \", \" + temp1 + \"\\n\"; // base = (1 : 0 - base)\r\n                code += \"sub \" + temp2 + \", \" + temp2 + \", \" + temp3 + \"\\n\"; // blend = (blend - 1 : 0)\r\n                code += \"mul \" + temp2 + \", \" + temp2 + \", \" + temp1 + \"\\n\"; // blend = blend * base\r\n                code += \"sub \" + temp4 + \", \" + temp3 + \", \" + exposure + \".yyy\\n\"; // t3 = (blend >= 0.5)? 0.5 : -0.5\r\n                code += \"div \" + temp2 + \", \" + temp2 + \", \" + temp4 + \"\\n\"; // blend = blend / ( 0.5 : -0.5)\r\n                code += \"add oc, \" + temp2 + \", \" + temp3 + \"\\n\";\r\n                break;\r\n            case \"normal\":\r\n                // for debugging purposes\r\n                code += \"mov oc, \" + temp1 + \"\\n\";\r\n                break;\r\n            default:\r\n                throw new Error(\"Unknown blend mode\");\r\n        }\r\n        return code;\r\n    };\r\n    Filter3DCompositeTask.prototype.activate = function (stage, camera3D, depthTexture) {\r\n        this._data[4] = -0.5 * (this._scaledTextureWidth - this._overlayWidth) / this._overlayWidth;\r\n        this._data[5] = -0.5 * (this._scaledTextureHeight - this._overlayHeight) / this._overlayHeight;\r\n        this._data[6] = this._scaledTextureWidth / this._overlayWidth;\r\n        this._data[7] = this._scaledTextureHeight / this._overlayHeight;\r\n        var context = stage.context;\r\n        context.setProgramConstantsFromArray(ContextGLProgramType_1.ContextGLProgramType.FRAGMENT, this._data);\r\n        stage.getAbstraction(this._overlayTexture).activate(this._overlayTextureIndex, false);\r\n    };\r\n    Filter3DCompositeTask.prototype.deactivate = function (stage) {\r\n        stage.context.setTextureAt(1, null);\r\n    };\r\n    return Filter3DCompositeTask;\r\n}(Filter3DTaskBase_1.Filter3DTaskBase));\r\nexports.Filter3DCompositeTask = Filter3DCompositeTask;\r\n},{\"../../filters/tasks/Filter3DTaskBase\":\"awayjs-renderergl/lib/filters/tasks/Filter3DTaskBase\",\"awayjs-stagegl/lib/base/ContextGLProgramType\":undefined}],\"awayjs-renderergl/lib/filters/tasks/Filter3DFXAATask\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar ContextGLProgramType_1 = require(\"awayjs-stagegl/lib/base/ContextGLProgramType\");\r\nvar Filter3DTaskBase_1 = require(\"../../filters/tasks/Filter3DTaskBase\");\r\nvar Filter3DFXAATask = (function (_super) {\r\n    __extends(Filter3DFXAATask, _super);\r\n    /**\r\n     *\r\n     * @param amount\r\n     * @param stepSize The distance between samples. Set to -1 to autodetect with acceptable quality.\r\n     */\r\n    function Filter3DFXAATask(amount, stepSize) {\r\n        if (amount === void 0) { amount = 1; }\r\n        if (stepSize === void 0) { stepSize = -1; }\r\n        _super.call(this);\r\n        this._stepSize = 1;\r\n        this._data = new Float32Array(20);\r\n        //luma\r\n        this._data.set([0.299, 0.587, 0.114, 0], 0); //0.212, 0.716, 0.072\r\n        //helpers\r\n        this._data.set([0.25, 0.5, 0.75, 1], 4);\r\n        //settings (screen x, screen y, ...)\r\n        this._data.set([1 / 1024, 1 / 1024, -1, 1], 8);\r\n        //deltas\r\n        this._data.set([1 / 128, 1 / 8, 8, 0], 12);\r\n        //deltas\r\n        this._data.set([1.0 / 3.0 - 0.5, 2.0 / 3.0 - 0.5, 0.0 / 3.0 - 0.5, 3.0 / 3.0 - 0.5], 16);\r\n        this.amount = amount;\r\n        this.stepSize = stepSize;\r\n    }\r\n    Object.defineProperty(Filter3DFXAATask.prototype, \"amount\", {\r\n        get: function () {\r\n            return this._amount;\r\n        },\r\n        set: function (value) {\r\n            if (this._amount == value)\r\n                return;\r\n            this._amount = value;\r\n            this.invalidateProgram();\r\n            this.updateBlurData();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Filter3DFXAATask.prototype, \"stepSize\", {\r\n        get: function () {\r\n            return this._stepSize;\r\n        },\r\n        set: function (value) {\r\n            if (this._stepSize == value)\r\n                return;\r\n            this._stepSize = value;\r\n            this.calculateStepSize();\r\n            this.invalidateProgram();\r\n            this.updateBlurData();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Filter3DFXAATask.prototype.getFragmentCode = function () {\r\n        var lum = \"fc0\"; //\t0.299, 0.587, 0.114\r\n        var _0 = \"fc0.w\";\r\n        var _025 = \"fc1.x\";\r\n        var _05 = \"fc1.y\";\r\n        var _075 = \"fc1.z\";\r\n        var _1 = \"fc1.w\";\r\n        var pix = \"fc2.xy\";\r\n        var dx = \"fc2.x\"; // 1/1024\r\n        var dy = \"fc2.y\"; // 1/1024\r\n        var mOne = \"fc2.z\"; // -1.0\r\n        var mul = \"fc2.w\"; // 1.0  -- one for now\r\n        var fxaaReduceMin = \"fc3.x\"; //1/128\r\n        var fxaaReduceMul = \"fc3.y\"; //1/8\r\n        var fxaaSpanMax = \"fc3.z\"; //8\r\n        var delta1 = \"fc4.x\"; //1.0/3.0 - 0.5\r\n        var delta2 = \"fc4.y\"; //2.0/3.0 - 0.5\r\n        var delta3 = \"fc4.z\"; //0.0/3.0 - 0.5\r\n        var delta4 = \"fc4.w\"; //3.0/3.0 - 0.5\r\n        var uv_in = \"v0\";\r\n        var uv = \"ft0.xy\";\r\n        var uvx = \"ft0.x\";\r\n        var uvy = \"ft0.y\";\r\n        var TL = \"ft2.x\";\r\n        var TR = \"ft2.y\";\r\n        var BL = \"ft2.z\";\r\n        var BR = \"ft2.w\";\r\n        var M = \"ft3.x\";\r\n        var tempf1 = \"ft3.y\";\r\n        var tempf2 = \"ft3.z\";\r\n        var tempf3 = \"ft3.w\";\r\n        var tex = \"ft1\";\r\n        var dir = \"ft4\";\r\n        var dirx = \"ft4.x\";\r\n        var diry = \"ft4.y\";\r\n        var dirxy = \"ft4.xy\";\r\n        var dirReduce = \"ft5.x\";\r\n        var inverseDirAdjustment = \"ft5.y\";\r\n        var result1 = \"ft6\";\r\n        var result2 = \"ft7\";\r\n        var lumaMin = \"ft5.x\";\r\n        var lumaMax = \"ft5.y\";\r\n        var sample = \"fs0\";\r\n        var temp = tex;\r\n        var tempxy = temp + \".xy\";\r\n        var code = new Array();\r\n        //lumas\r\n        code.push(\"tex\", tex, uv_in, sample, \"<2d wrap linear>\", \"\\n\");\r\n        code.push(\"dp3\", M, tex, lum, \"\\n\");\r\n        code.push(\"mov\", uv, uv_in, \"\\n\");\r\n        code.push(\"sub\", uv, uv, pix, \"\\n\");\r\n        code.push(\"tex\", tex, uv, sample, \"<2d wrap linear>\", \"\\n\");\r\n        code.push(\"dp3\", TL, tex, lum, \"\\n\");\r\n        code.push(\"mov\", uv, uv_in, \"\\n\");\r\n        code.push(\"add\", uv, uv, pix, \"\\n\");\r\n        code.push(\"tex\", tex, uv, sample, \"<2d wrap linear>\", \"\\n\");\r\n        code.push(\"dp3\", BR, tex, lum, \"\\n\");\r\n        code.push(\"mov\", uv, uv_in, \"\\n\");\r\n        code.push(\"sub\", uvy, uvy, dy, \"\\n\");\r\n        code.push(\"add\", uvx, uvx, dx, \"\\n\");\r\n        code.push(\"tex\", tex, uv, sample, \"<2d wrap linear>\", \"\\n\");\r\n        code.push(\"dp3\", TR, tex, lum, \"\\n\");\r\n        code.push(\"mov\", uv, uv_in, \"\\n\");\r\n        code.push(\"add\", uvy, uvy, dy, \"\\n\");\r\n        code.push(\"sub\", uvx, uvx, dx, \"\\n\");\r\n        code.push(\"tex\", tex, uv, sample, \"<2d wrap linear>\", \"\\n\");\r\n        code.push(\"dp3\", BL, tex, lum, \"\\n\");\r\n        //dir\r\n        code.push(\"add\", tempf1, TL, TR, \"\\n\");\r\n        code.push(\"add\", tempf2, BL, BR, \"\\n\");\r\n        code.push(\"sub\", dirx, tempf1, tempf2, \"\\n\");\r\n        code.push(\"neg\", dirx, dirx, \"\\n\");\r\n        code.push(\"add\", tempf1, TL, BL, \"\\n\");\r\n        code.push(\"add\", tempf2, TR, BR, \"\\n\");\r\n        code.push(\"sub\", diry, tempf1, tempf2, \"\\n\");\r\n        code.push(\"add\", tempf1, tempf1, tempf2, \"\\n\");\r\n        code.push(\"mul\", tempf1, tempf1, fxaaReduceMul, \"\\n\");\r\n        code.push(\"mul\", tempf1, tempf1, _025, \"\\n\");\r\n        code.push(\"max\", dirReduce, tempf1, fxaaReduceMin, \"\\n\");\r\n        code.push(\"abs\", tempf1, dirx, \"\\n\");\r\n        code.push(\"abs\", tempf2, diry, \"\\n\");\r\n        code.push(\"min\", tempf1, tempf1, tempf2, \"\\n\");\r\n        code.push(\"add\", tempf1, tempf1, dirReduce, \"\\n\");\r\n        code.push(\"rcp\", inverseDirAdjustment, tempf1, \"\\n\");\r\n        code.push(\"mul\", tempf1, dirx, inverseDirAdjustment, \"\\n\");\r\n        code.push(\"mov\", tempf2, fxaaSpanMax, \"\\n\");\r\n        code.push(\"neg\", tempf2, tempf2, \"\\n\");\r\n        code.push(\"max\", tempf1, tempf1, tempf2, \"\\n\");\r\n        code.push(\"min\", tempf1, fxaaSpanMax, tempf1, \"\\n\");\r\n        code.push(\"mul\", dirx, tempf1, dx, \"\\n\");\r\n        code.push(\"mul\", tempf1, diry, inverseDirAdjustment, \"\\n\");\r\n        code.push(\"mov\", tempf2, fxaaSpanMax, \"\\n\");\r\n        code.push(\"neg\", tempf2, tempf2, \"\\n\");\r\n        code.push(\"max\", tempf1, tempf1, tempf2, \"\\n\");\r\n        code.push(\"min\", tempf1, fxaaSpanMax, tempf1, \"\\n\");\r\n        code.push(\"mul\", diry, tempf1, dy, \"\\n\");\r\n        code.push(\"mul\", tempxy, dirxy, delta1, \"\\n\");\r\n        code.push(\"add\", uv, uv_in, tempxy, \"\\n\");\r\n        code.push(\"tex\", result1, uv, sample, \"<2d wrap linear>\", \"\\n\");\r\n        code.push(\"mul\", tempxy, dirxy, delta2, \"\\n\");\r\n        code.push(\"add\", uv, uv_in, tempxy, \"\\n\");\r\n        code.push(\"tex\", tex, uv, sample, \"<2d wrap linear>\", \"\\n\");\r\n        code.push(\"add\", result1, result1, tex, \"\\n\");\r\n        code.push(\"mul\", result1, result1, _05, \"\\n\");\r\n        code.push(\"mul\", tempxy, dirxy, delta3, \"\\n\");\r\n        code.push(\"add\", uv, uv_in, tempxy, \"\\n\");\r\n        code.push(\"tex\", result2, uv, sample, \"<2d wrap linear>\", \"\\n\");\r\n        code.push(\"mul\", tempxy, dirxy, delta4, \"\\n\");\r\n        code.push(\"add\", uv, uv_in, tempxy, \"\\n\");\r\n        code.push(\"tex\", tex, uv, sample, \"<2d wrap linear>\", \"\\n\");\r\n        code.push(\"add\", result2, result2, tex, \"\\n\");\r\n        code.push(\"mul\", result2, result2, _025, \"\\n\");\r\n        code.push(\"mul\", tex, result1, _05, \"\\n\");\r\n        code.push(\"add\", result2, result2, tex, \"\\n\");\r\n        code.push(\"min\", tempf1, BL, BR, \"\\n\");\r\n        code.push(\"min\", tempf2, TL, TR, \"\\n\");\r\n        code.push(\"min\", tempf1, tempf1, tempf2, \"\\n\");\r\n        code.push(\"min\", lumaMin, tempf1, M, \"\\n\");\r\n        code.push(\"max\", tempf1, BL, BR, \"\\n\");\r\n        code.push(\"max\", tempf2, TL, TR, \"\\n\");\r\n        code.push(\"max\", tempf1, tempf1, tempf2, \"\\n\");\r\n        code.push(\"max\", lumaMax, tempf1, M, \"\\n\");\r\n        code.push(\"dp3\", tempf1, lum, result2, \"\\n\");\r\n        code.push(\"slt\", tempf2, tempf1, lumaMin, \"\\n\");\r\n        code.push(\"sge\", tempf3, tempf1, lumaMax, \"\\n\");\r\n        code.push(\"mul\", tempf2, tempf2, tempf3, \"\\n\");\r\n        code.push(\"mul\", result1, result1, tempf2, \"\\n\");\r\n        code.push(\"sub\", tempf2, _1, tempf2, \"\\n\");\r\n        code.push(\"mul\", result2, result2, tempf2, \"\\n\");\r\n        code.push(\"add\", \"oc\", result1, result2, \"\\n\");\r\n        //this._data[2] = 1/numSamples;\r\n        return code.join(\" \");\r\n    };\r\n    Filter3DFXAATask.prototype.activate = function (stage, camera3D, depthTexture) {\r\n        stage.context.setProgramConstantsFromArray(ContextGLProgramType_1.ContextGLProgramType.FRAGMENT, this._data);\r\n    };\r\n    Filter3DFXAATask.prototype.updateTextures = function (stage) {\r\n        _super.prototype.updateTextures.call(this, stage);\r\n        this.updateBlurData();\r\n    };\r\n    Filter3DFXAATask.prototype.updateBlurData = function () {\r\n        // todo: must be normalized using view size ratio instead of texture\r\n        if (this._rttManager) {\r\n            this._data[8] = 1 / this._textureWidth;\r\n            this._data[9] = 1 / this._textureHeight;\r\n        }\r\n    };\r\n    Filter3DFXAATask.prototype.calculateStepSize = function () {\r\n        this._realStepSize = 1; //this._stepSize > 0? this._stepSize : this._amount > Filter3DVBlurTask.MAX_AUTO_SAMPLES? this._amount/Filter3DVBlurTask.MAX_AUTO_SAMPLES : 1;\r\n    };\r\n    //TODO - remove blur variables and create setters/getters for FXAA\r\n    Filter3DFXAATask.MAX_AUTO_SAMPLES = 15;\r\n    return Filter3DFXAATask;\r\n}(Filter3DTaskBase_1.Filter3DTaskBase));\r\nexports.Filter3DFXAATask = Filter3DFXAATask;\r\n},{\"../../filters/tasks/Filter3DTaskBase\":\"awayjs-renderergl/lib/filters/tasks/Filter3DTaskBase\",\"awayjs-stagegl/lib/base/ContextGLProgramType\":undefined}],\"awayjs-renderergl/lib/filters/tasks/Filter3DHBlurTask\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar ContextGLProgramType_1 = require(\"awayjs-stagegl/lib/base/ContextGLProgramType\");\r\nvar Filter3DTaskBase_1 = require(\"../../filters/tasks/Filter3DTaskBase\");\r\nvar Filter3DHBlurTask = (function (_super) {\r\n    __extends(Filter3DHBlurTask, _super);\r\n    /**\r\n     * Creates a new Filter3DHDepthOfFFieldTask\r\n     * @param amount The maximum amount of blur to apply in pixels at the most out-of-focus areas\r\n     * @param stepSize The distance between samples. Set to -1 to autodetect with acceptable quality.\r\n     */\r\n    function Filter3DHBlurTask(amount, stepSize) {\r\n        if (stepSize === void 0) { stepSize = -1; }\r\n        _super.call(this);\r\n        this._stepSize = 1;\r\n        this._amount = amount;\r\n        this._data = new Float32Array([0, 0, 0, 1]);\r\n        this.stepSize = stepSize;\r\n    }\r\n    Object.defineProperty(Filter3DHBlurTask.prototype, \"amount\", {\r\n        get: function () {\r\n            return this._amount;\r\n        },\r\n        set: function (value) {\r\n            if (this._amount == value)\r\n                return;\r\n            this._amount = value;\r\n            this.invalidateProgram();\r\n            this.updateBlurData();\r\n            this.calculateStepSize();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Filter3DHBlurTask.prototype, \"stepSize\", {\r\n        get: function () {\r\n            return this._stepSize;\r\n        },\r\n        set: function (value) {\r\n            if (this._stepSize == value)\r\n                return;\r\n            this._stepSize = value;\r\n            this.calculateStepSize();\r\n            this.invalidateProgram();\r\n            this.updateBlurData();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Filter3DHBlurTask.prototype.getFragmentCode = function () {\r\n        var code;\r\n        var numSamples = 1;\r\n        code = \"mov ft0, v0\t\\n\" +\r\n            \"sub ft0.x, v0.x, fc0.x\\n\";\r\n        code += \"tex ft1, ft0, fs0 <2d,linear,clamp>\\n\";\r\n        for (var x = this._realStepSize; x <= this._amount; x += this._realStepSize) {\r\n            code += \"add ft0.x, ft0.x, fc0.y\\n\" +\r\n                \"tex ft2, ft0, fs0 <2d,linear,clamp>\\n\" +\r\n                \"add ft1, ft1, ft2\\n\";\r\n            ++numSamples;\r\n        }\r\n        code += \"mul oc, ft1, fc0.z\\n\";\r\n        this._data[2] = 1 / numSamples;\r\n        return code;\r\n    };\r\n    Filter3DHBlurTask.prototype.activate = function (stage, camera3D, depthTexture) {\r\n        stage.context.setProgramConstantsFromArray(ContextGLProgramType_1.ContextGLProgramType.FRAGMENT, this._data);\r\n    };\r\n    Filter3DHBlurTask.prototype.updateTextures = function (stage) {\r\n        _super.prototype.updateTextures.call(this, stage);\r\n        this.updateBlurData();\r\n    };\r\n    Filter3DHBlurTask.prototype.updateBlurData = function () {\r\n        // todo: must be normalized using view size ratio instead of texture\r\n        var invW = 1 / this._textureWidth;\r\n        this._data[0] = this._amount * .5 * invW;\r\n        this._data[1] = this._realStepSize * invW;\r\n    };\r\n    Filter3DHBlurTask.prototype.calculateStepSize = function () {\r\n        this._realStepSize = this._stepSize > 0 ? this._stepSize : this._amount > Filter3DHBlurTask.MAX_AUTO_SAMPLES ? this._amount / Filter3DHBlurTask.MAX_AUTO_SAMPLES : 1;\r\n    };\r\n    Filter3DHBlurTask.MAX_AUTO_SAMPLES = 15;\r\n    return Filter3DHBlurTask;\r\n}(Filter3DTaskBase_1.Filter3DTaskBase));\r\nexports.Filter3DHBlurTask = Filter3DHBlurTask;\r\n},{\"../../filters/tasks/Filter3DTaskBase\":\"awayjs-renderergl/lib/filters/tasks/Filter3DTaskBase\",\"awayjs-stagegl/lib/base/ContextGLProgramType\":undefined}],\"awayjs-renderergl/lib/filters/tasks/Filter3DTaskBase\":[function(require,module,exports){\n\"use strict\";\r\nvar Image2D_1 = require(\"awayjs-core/lib/image/Image2D\");\r\nvar AbstractMethodError_1 = require(\"awayjs-core/lib/errors/AbstractMethodError\");\r\nvar AGALMiniAssembler_1 = require(\"awayjs-stagegl/lib/aglsl/assembler/AGALMiniAssembler\");\r\nvar ShaderRegisterCache_1 = require(\"../../shaders/ShaderRegisterCache\");\r\nvar Filter3DTaskBase = (function () {\r\n    function Filter3DTaskBase(requireDepthRender) {\r\n        if (requireDepthRender === void 0) { requireDepthRender = false; }\r\n        this._scaledTextureWidth = -1;\r\n        this._scaledTextureHeight = -1;\r\n        this._textureWidth = -1;\r\n        this._textureHeight = -1;\r\n        this._textureDimensionsInvalid = true;\r\n        this._program3DInvalid = true;\r\n        this._textureScale = 0;\r\n        this._requireDepthRender = requireDepthRender;\r\n        this._registerCache = new ShaderRegisterCache_1.ShaderRegisterCache(\"baseline\");\r\n    }\r\n    ;\r\n    Object.defineProperty(Filter3DTaskBase.prototype, \"textureScale\", {\r\n        /**\r\n         * The texture scale for the input of this texture. This will define the output of the previous entry in the chain\r\n         */\r\n        get: function () {\r\n            return this._textureScale;\r\n        },\r\n        set: function (value) {\r\n            if (this._textureScale == value)\r\n                return;\r\n            this._textureScale = value;\r\n            this._scaledTextureWidth = this._textureWidth >> this._textureScale;\r\n            this._scaledTextureHeight = this._textureHeight >> this._textureScale;\r\n            this._textureDimensionsInvalid = true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Filter3DTaskBase.prototype, \"target\", {\r\n        get: function () {\r\n            return this._target;\r\n        },\r\n        set: function (value) {\r\n            this._target = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Filter3DTaskBase.prototype, \"rttManager\", {\r\n        get: function () {\r\n            return this._rttManager;\r\n        },\r\n        set: function (value) {\r\n            if (this._rttManager == value)\r\n                return;\r\n            this._rttManager = value;\r\n            this._textureDimensionsInvalid = true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Filter3DTaskBase.prototype, \"textureWidth\", {\r\n        get: function () {\r\n            return this._textureWidth;\r\n        },\r\n        set: function (value) {\r\n            if (this._textureWidth == value)\r\n                return;\r\n            this._textureWidth = value;\r\n            this._scaledTextureWidth = this._textureWidth >> this._textureScale;\r\n            this._textureDimensionsInvalid = true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Filter3DTaskBase.prototype, \"textureHeight\", {\r\n        get: function () {\r\n            return this._textureHeight;\r\n        },\r\n        set: function (value) {\r\n            if (this._textureHeight == value)\r\n                return;\r\n            this._textureHeight = value;\r\n            this._scaledTextureHeight = this._textureHeight >> this._textureScale;\r\n            this._textureDimensionsInvalid = true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Filter3DTaskBase.prototype.getMainInputTexture = function (stage) {\r\n        if (this._textureDimensionsInvalid)\r\n            this.updateTextures(stage);\r\n        return this._mainInputTexture;\r\n    };\r\n    Filter3DTaskBase.prototype.dispose = function () {\r\n        if (this._mainInputTexture)\r\n            this._mainInputTexture.dispose();\r\n        if (this._program3D)\r\n            this._program3D.dispose();\r\n    };\r\n    Filter3DTaskBase.prototype.invalidateProgram = function () {\r\n        this._program3DInvalid = true;\r\n    };\r\n    Filter3DTaskBase.prototype.updateProgram = function (stage) {\r\n        if (this._program3D)\r\n            this._program3D.dispose();\r\n        this._program3D = stage.context.createProgram();\r\n        this._registerCache.reset();\r\n        var vertexByteCode = (new AGALMiniAssembler_1.AGALMiniAssembler().assemble(\"part vertex 1\\n\" + this.getVertexCode() + \"endpart\"))['vertex'].data;\r\n        var fragmentByteCode = (new AGALMiniAssembler_1.AGALMiniAssembler().assemble(\"part fragment 1\\n\" + this.getFragmentCode() + \"endpart\"))['fragment'].data;\r\n        this._program3D.upload(vertexByteCode, fragmentByteCode);\r\n        this._program3DInvalid = false;\r\n    };\r\n    Filter3DTaskBase.prototype.getVertexCode = function () {\r\n        var position = this._registerCache.getFreeVertexAttribute();\r\n        this._positionIndex = position.index;\r\n        var uv = this._registerCache.getFreeVertexAttribute();\r\n        this._uvIndex = uv.index;\r\n        this._uvVarying = this._registerCache.getFreeVarying();\r\n        var code;\r\n        code = \"mov op, \" + position + \"\\n\" +\r\n            \"mov \" + this._uvVarying + \", \" + uv + \"\\n\";\r\n        return code;\r\n    };\r\n    Filter3DTaskBase.prototype.getFragmentCode = function () {\r\n        throw new AbstractMethodError_1.AbstractMethodError();\r\n    };\r\n    Filter3DTaskBase.prototype.updateTextures = function (stage) {\r\n        if (this._mainInputTexture)\r\n            this._mainInputTexture.dispose();\r\n        this._mainInputTexture = new Image2D_1.Image2D(this._scaledTextureWidth, this._scaledTextureHeight);\r\n        this._textureDimensionsInvalid = false;\r\n    };\r\n    Filter3DTaskBase.prototype.getProgram = function (stage) {\r\n        if (this._program3DInvalid)\r\n            this.updateProgram(stage);\r\n        return this._program3D;\r\n    };\r\n    Filter3DTaskBase.prototype.activate = function (stage, camera, depthTexture) {\r\n    };\r\n    Filter3DTaskBase.prototype.deactivate = function (stage) {\r\n    };\r\n    Object.defineProperty(Filter3DTaskBase.prototype, \"requireDepthRender\", {\r\n        get: function () {\r\n            return this._requireDepthRender;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Filter3DTaskBase;\r\n}());\r\nexports.Filter3DTaskBase = Filter3DTaskBase;\r\n},{\"../../shaders/ShaderRegisterCache\":\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\",\"awayjs-core/lib/errors/AbstractMethodError\":undefined,\"awayjs-core/lib/image/Image2D\":undefined,\"awayjs-stagegl/lib/aglsl/assembler/AGALMiniAssembler\":undefined}],\"awayjs-renderergl/lib/filters/tasks/Filter3DVBlurTask\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar ContextGLProgramType_1 = require(\"awayjs-stagegl/lib/base/ContextGLProgramType\");\r\nvar Filter3DTaskBase_1 = require(\"../../filters/tasks/Filter3DTaskBase\");\r\nvar Filter3DVBlurTask = (function (_super) {\r\n    __extends(Filter3DVBlurTask, _super);\r\n    /**\r\n     *\r\n     * @param amount\r\n     * @param stepSize The distance between samples. Set to -1 to autodetect with acceptable quality.\r\n     */\r\n    function Filter3DVBlurTask(amount, stepSize) {\r\n        if (stepSize === void 0) { stepSize = -1; }\r\n        _super.call(this);\r\n        this._stepSize = 1;\r\n        this._amount = amount;\r\n        this._data = new Float32Array([0, 0, 0, 1]);\r\n        this.stepSize = stepSize;\r\n    }\r\n    Object.defineProperty(Filter3DVBlurTask.prototype, \"amount\", {\r\n        get: function () {\r\n            return this._amount;\r\n        },\r\n        set: function (value) {\r\n            if (this._amount == value)\r\n                return;\r\n            this._amount = value;\r\n            this.invalidateProgram();\r\n            this.updateBlurData();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Filter3DVBlurTask.prototype, \"stepSize\", {\r\n        get: function () {\r\n            return this._stepSize;\r\n        },\r\n        set: function (value) {\r\n            if (this._stepSize == value)\r\n                return;\r\n            this._stepSize = value;\r\n            this.calculateStepSize();\r\n            this.invalidateProgram();\r\n            this.updateBlurData();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Filter3DVBlurTask.prototype.getFragmentCode = function () {\r\n        var code;\r\n        var numSamples = 1;\r\n        code = \"mov ft0, v0\t\\n\" +\r\n            \"sub ft0.y, v0.y, fc0.x\\n\";\r\n        code += \"tex ft1, ft0, fs0 <2d,linear,clamp>\\n\";\r\n        for (var x = this._realStepSize; x <= this._amount; x += this._realStepSize) {\r\n            code += \"add ft0.y, ft0.y, fc0.y\\n\";\r\n            code += \"tex ft2, ft0, fs0 <2d,linear,clamp>\\n\" +\r\n                \"add ft1, ft1, ft2\\n\";\r\n            ++numSamples;\r\n        }\r\n        code += \"mul oc, ft1, fc0.z\\n\";\r\n        this._data[2] = 1 / numSamples;\r\n        return code;\r\n    };\r\n    Filter3DVBlurTask.prototype.activate = function (stage, camera3D, depthTexture) {\r\n        stage.context.setProgramConstantsFromArray(ContextGLProgramType_1.ContextGLProgramType.FRAGMENT, this._data);\r\n    };\r\n    Filter3DVBlurTask.prototype.updateTextures = function (stage) {\r\n        _super.prototype.updateTextures.call(this, stage);\r\n        this.updateBlurData();\r\n    };\r\n    Filter3DVBlurTask.prototype.updateBlurData = function () {\r\n        // todo: must be normalized using view size ratio instead of texture\r\n        var invH = 1 / this._textureHeight;\r\n        this._data[0] = this._amount * .5 * invH;\r\n        this._data[1] = this._realStepSize * invH;\r\n    };\r\n    Filter3DVBlurTask.prototype.calculateStepSize = function () {\r\n        this._realStepSize = this._stepSize > 0 ? this._stepSize : this._amount > Filter3DVBlurTask.MAX_AUTO_SAMPLES ? this._amount / Filter3DVBlurTask.MAX_AUTO_SAMPLES : 1;\r\n    };\r\n    Filter3DVBlurTask.MAX_AUTO_SAMPLES = 15;\r\n    return Filter3DVBlurTask;\r\n}(Filter3DTaskBase_1.Filter3DTaskBase));\r\nexports.Filter3DVBlurTask = Filter3DVBlurTask;\r\n},{\"../../filters/tasks/Filter3DTaskBase\":\"awayjs-renderergl/lib/filters/tasks/Filter3DTaskBase\",\"awayjs-stagegl/lib/base/ContextGLProgramType\":undefined}],\"awayjs-renderergl/lib/filters\":[function(require,module,exports){\n\"use strict\";\r\nvar Filter3DCompositeTask_1 = require(\"./filters/tasks/Filter3DCompositeTask\");\r\nexports.Filter3DCompositeTask = Filter3DCompositeTask_1.Filter3DCompositeTask;\r\nvar Filter3DFXAATask_1 = require(\"./filters/tasks/Filter3DFXAATask\");\r\nexports.Filter3DFXAATask = Filter3DFXAATask_1.Filter3DFXAATask;\r\nvar Filter3DHBlurTask_1 = require(\"./filters/tasks/Filter3DHBlurTask\");\r\nexports.Filter3DHBlurTask = Filter3DHBlurTask_1.Filter3DHBlurTask;\r\nvar Filter3DTaskBase_1 = require(\"./filters/tasks/Filter3DTaskBase\");\r\nexports.Filter3DTaskBase = Filter3DTaskBase_1.Filter3DTaskBase;\r\nvar Filter3DVBlurTask_1 = require(\"./filters/tasks/Filter3DVBlurTask\");\r\nexports.Filter3DVBlurTask = Filter3DVBlurTask_1.Filter3DVBlurTask;\r\nvar BlurFilter3D_1 = require(\"./filters/BlurFilter3D\");\r\nexports.BlurFilter3D = BlurFilter3D_1.BlurFilter3D;\r\nvar CompositeFilter3D_1 = require(\"./filters/CompositeFilter3D\");\r\nexports.CompositeFilter3D = CompositeFilter3D_1.CompositeFilter3D;\r\nvar Filter3DBase_1 = require(\"./filters/Filter3DBase\");\r\nexports.Filter3DBase = Filter3DBase_1.Filter3DBase;\r\nvar FXAAFilter3D_1 = require(\"./filters/FXAAFilter3D\");\r\nexports.FXAAFilter3D = FXAAFilter3D_1.FXAAFilter3D;\r\n},{\"./filters/BlurFilter3D\":\"awayjs-renderergl/lib/filters/BlurFilter3D\",\"./filters/CompositeFilter3D\":\"awayjs-renderergl/lib/filters/CompositeFilter3D\",\"./filters/FXAAFilter3D\":\"awayjs-renderergl/lib/filters/FXAAFilter3D\",\"./filters/Filter3DBase\":\"awayjs-renderergl/lib/filters/Filter3DBase\",\"./filters/tasks/Filter3DCompositeTask\":\"awayjs-renderergl/lib/filters/tasks/Filter3DCompositeTask\",\"./filters/tasks/Filter3DFXAATask\":\"awayjs-renderergl/lib/filters/tasks/Filter3DFXAATask\",\"./filters/tasks/Filter3DHBlurTask\":\"awayjs-renderergl/lib/filters/tasks/Filter3DHBlurTask\",\"./filters/tasks/Filter3DTaskBase\":\"awayjs-renderergl/lib/filters/tasks/Filter3DTaskBase\",\"./filters/tasks/Filter3DVBlurTask\":\"awayjs-renderergl/lib/filters/tasks/Filter3DVBlurTask\"}],\"awayjs-renderergl/lib/managers/RTTBufferManager\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Rectangle_1 = require(\"awayjs-core/lib/geom/Rectangle\");\r\nvar EventDispatcher_1 = require(\"awayjs-core/lib/events/EventDispatcher\");\r\nvar ImageUtils_1 = require(\"awayjs-core/lib/utils/ImageUtils\");\r\nvar RTTEvent_1 = require(\"../events/RTTEvent\");\r\nvar RTTBufferManager = (function (_super) {\r\n    __extends(RTTBufferManager, _super);\r\n    function RTTBufferManager(stage) {\r\n        _super.call(this);\r\n        this._viewWidth = -1;\r\n        this._viewHeight = -1;\r\n        this._textureWidth = -1;\r\n        this._textureHeight = -1;\r\n        this._buffersInvalid = true;\r\n        this._renderToTextureRect = new Rectangle_1.Rectangle();\r\n        this._stage = stage;\r\n    }\r\n    RTTBufferManager.getInstance = function (stage) {\r\n        if (!stage)\r\n            throw new Error(\"stage key cannot be null!\");\r\n        if (RTTBufferManager._instances == null)\r\n            RTTBufferManager._instances = new Array();\r\n        var rttBufferManager = RTTBufferManager.getRTTBufferManagerFromStage(stage);\r\n        if (rttBufferManager == null) {\r\n            rttBufferManager = new RTTBufferManager(stage);\r\n            var vo = new RTTBufferManagerVO();\r\n            vo.stage3d = stage;\r\n            vo.rttbfm = rttBufferManager;\r\n            RTTBufferManager._instances.push(vo);\r\n        }\r\n        return rttBufferManager;\r\n    };\r\n    RTTBufferManager.getRTTBufferManagerFromStage = function (stage) {\r\n        var l = RTTBufferManager._instances.length;\r\n        var r;\r\n        for (var c = 0; c < l; c++) {\r\n            r = RTTBufferManager._instances[c];\r\n            if (r.stage3d === stage)\r\n                return r.rttbfm;\r\n        }\r\n        return null;\r\n    };\r\n    RTTBufferManager.deleteRTTBufferManager = function (stage) {\r\n        var l = RTTBufferManager._instances.length;\r\n        var r;\r\n        for (var c = 0; c < l; c++) {\r\n            r = RTTBufferManager._instances[c];\r\n            if (r.stage3d === stage) {\r\n                RTTBufferManager._instances.splice(c, 1);\r\n                return;\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(RTTBufferManager.prototype, \"textureRatioX\", {\r\n        get: function () {\r\n            if (this._buffersInvalid)\r\n                this.updateRTTBuffers();\r\n            return this._textureRatioX;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RTTBufferManager.prototype, \"textureRatioY\", {\r\n        get: function () {\r\n            if (this._buffersInvalid)\r\n                this.updateRTTBuffers();\r\n            return this._textureRatioY;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RTTBufferManager.prototype, \"viewWidth\", {\r\n        get: function () {\r\n            return this._viewWidth;\r\n        },\r\n        set: function (value) {\r\n            if (value == this._viewWidth)\r\n                return;\r\n            this._viewWidth = value;\r\n            this._buffersInvalid = true;\r\n            this._textureWidth = ImageUtils_1.ImageUtils.getBestPowerOf2(this._viewWidth);\r\n            if (this._textureWidth > this._viewWidth) {\r\n                this._renderToTextureRect.x = Math.floor((this._textureWidth - this._viewWidth) * .5);\r\n                this._renderToTextureRect.width = this._viewWidth;\r\n            }\r\n            else {\r\n                this._renderToTextureRect.x = 0;\r\n                this._renderToTextureRect.width = this._textureWidth;\r\n            }\r\n            this.dispatchEvent(new RTTEvent_1.RTTEvent(RTTEvent_1.RTTEvent.RESIZE, this));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RTTBufferManager.prototype, \"viewHeight\", {\r\n        get: function () {\r\n            return this._viewHeight;\r\n        },\r\n        set: function (value) {\r\n            if (value == this._viewHeight)\r\n                return;\r\n            this._viewHeight = value;\r\n            this._buffersInvalid = true;\r\n            this._textureHeight = ImageUtils_1.ImageUtils.getBestPowerOf2(this._viewHeight);\r\n            if (this._textureHeight > this._viewHeight) {\r\n                this._renderToTextureRect.y = Math.floor((this._textureHeight - this._viewHeight) * .5);\r\n                this._renderToTextureRect.height = this._viewHeight;\r\n            }\r\n            else {\r\n                this._renderToTextureRect.y = 0;\r\n                this._renderToTextureRect.height = this._textureHeight;\r\n            }\r\n            this.dispatchEvent(new RTTEvent_1.RTTEvent(RTTEvent_1.RTTEvent.RESIZE, this));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RTTBufferManager.prototype, \"renderToTextureVertexBuffer\", {\r\n        get: function () {\r\n            if (this._buffersInvalid)\r\n                this.updateRTTBuffers();\r\n            return this._renderToTextureVertexBuffer;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RTTBufferManager.prototype, \"renderToScreenVertexBuffer\", {\r\n        get: function () {\r\n            if (this._buffersInvalid)\r\n                this.updateRTTBuffers();\r\n            return this._renderToScreenVertexBuffer;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RTTBufferManager.prototype, \"indexBuffer\", {\r\n        get: function () {\r\n            return this._indexBuffer;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RTTBufferManager.prototype, \"renderToTextureRect\", {\r\n        get: function () {\r\n            if (this._buffersInvalid)\r\n                this.updateRTTBuffers();\r\n            return this._renderToTextureRect;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RTTBufferManager.prototype, \"textureWidth\", {\r\n        get: function () {\r\n            return this._textureWidth;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RTTBufferManager.prototype, \"textureHeight\", {\r\n        get: function () {\r\n            return this._textureHeight;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    RTTBufferManager.prototype.dispose = function () {\r\n        RTTBufferManager.deleteRTTBufferManager(this._stage);\r\n        if (this._indexBuffer) {\r\n            this._indexBuffer.dispose();\r\n            this._renderToScreenVertexBuffer.dispose();\r\n            this._renderToTextureVertexBuffer.dispose();\r\n            this._renderToScreenVertexBuffer = null;\r\n            this._renderToTextureVertexBuffer = null;\r\n            this._indexBuffer = null;\r\n        }\r\n    };\r\n    // todo: place all this in a separate model, since it's used all over the place\r\n    // maybe it even has a place in the core (together with screenRect etc)?\r\n    // needs to be stored per view of course\r\n    RTTBufferManager.prototype.updateRTTBuffers = function () {\r\n        var context = this._stage.context;\r\n        var textureVerts;\r\n        var screenVerts;\r\n        var x;\r\n        var y;\r\n        if (this._renderToTextureVertexBuffer == null)\r\n            this._renderToTextureVertexBuffer = context.createVertexBuffer(4, 20);\r\n        if (this._renderToScreenVertexBuffer == null)\r\n            this._renderToScreenVertexBuffer = context.createVertexBuffer(4, 20);\r\n        if (!this._indexBuffer) {\r\n            this._indexBuffer = context.createIndexBuffer(6);\r\n            this._indexBuffer.uploadFromArray([2, 1, 0, 3, 2, 0], 0, 6);\r\n        }\r\n        this._textureRatioX = x = Math.min(this._viewWidth / this._textureWidth, 1);\r\n        this._textureRatioY = y = Math.min(this._viewHeight / this._textureHeight, 1);\r\n        var u1 = (1 - x) * .5;\r\n        var u2 = (x + 1) * .5;\r\n        var v1 = (1 - y) * .5;\r\n        var v2 = (y + 1) * .5;\r\n        // last element contains indices for data per vertex that can be passed to the vertex shader if necessary (ie: frustum corners for deferred rendering)\r\n        textureVerts = [-x, -y, u1, v1, 0, x, -y, u2, v1, 1, x, y, u2, v2, 2, -x, y, u1, v2, 3];\r\n        screenVerts = [-1, -1, u1, v1, 0, 1, -1, u2, v1, 1, 1, 1, u2, v2, 2, -1, 1, u1, v2, 3];\r\n        this._renderToTextureVertexBuffer.uploadFromArray(textureVerts, 0, 4);\r\n        this._renderToScreenVertexBuffer.uploadFromArray(screenVerts, 0, 4);\r\n        this._buffersInvalid = false;\r\n    };\r\n    return RTTBufferManager;\r\n}(EventDispatcher_1.EventDispatcher));\r\nexports.RTTBufferManager = RTTBufferManager;\r\nvar RTTBufferManagerVO = (function () {\r\n    function RTTBufferManagerVO() {\r\n    }\r\n    return RTTBufferManagerVO;\r\n}());\r\n},{\"../events/RTTEvent\":\"awayjs-renderergl/lib/events/RTTEvent\",\"awayjs-core/lib/events/EventDispatcher\":undefined,\"awayjs-core/lib/geom/Rectangle\":undefined,\"awayjs-core/lib/utils/ImageUtils\":undefined}],\"awayjs-renderergl/lib/managers\":[function(require,module,exports){\n\"use strict\";\r\nvar RTTBufferManager_1 = require(\"./managers/RTTBufferManager\");\r\nexports.RTTBufferManager = RTTBufferManager_1.RTTBufferManager;\r\n},{\"./managers/RTTBufferManager\":\"awayjs-renderergl/lib/managers/RTTBufferManager\"}],\"awayjs-renderergl/lib/renderables/GL_BillboardRenderable\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar AttributesBuffer_1 = require(\"awayjs-core/lib/attributes/AttributesBuffer\");\r\nvar TriangleElements_1 = require(\"awayjs-display/lib/graphics/TriangleElements\");\r\nvar DefaultMaterialManager_1 = require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\r\nvar GL_RenderableBase_1 = require(\"../renderables/GL_RenderableBase\");\r\n/**\r\n * @class away.pool.RenderableListItem\r\n */\r\nvar GL_BillboardRenderable = (function (_super) {\r\n    __extends(GL_BillboardRenderable, _super);\r\n    /**\r\n     * //TODO\r\n     *\r\n     * @param pool\r\n     * @param billboard\r\n     */\r\n    function GL_BillboardRenderable(billboard, renderer) {\r\n        _super.call(this, billboard, renderer);\r\n        this._billboard = billboard;\r\n    }\r\n    GL_BillboardRenderable.prototype.onClear = function (event) {\r\n        _super.prototype.onClear.call(this, event);\r\n        this._billboard = null;\r\n    };\r\n    /**\r\n     * //TODO\r\n     *\r\n     * @returns {away.base.TriangleElements}\r\n     */\r\n    GL_BillboardRenderable.prototype._pGetElements = function () {\r\n        var texture = this._billboard.material.getTextureAt(0);\r\n        var id = -1;\r\n        if (texture)\r\n            id = ((this.renderable.style ? this.renderable.style.getSamplerAt(texture) || texture.getSamplerAt(0) : texture.getSamplerAt(0)) || DefaultMaterialManager_1.DefaultMaterialManager.getDefaultSampler()).id;\r\n        this._id = id;\r\n        var elements = GL_BillboardRenderable._samplerElements[id];\r\n        var width = this._billboard.billboardWidth;\r\n        var height = this._billboard.billboardHeight;\r\n        var billboardRect = this._billboard.billboardRect;\r\n        if (!elements) {\r\n            elements = GL_BillboardRenderable._samplerElements[id] = new TriangleElements_1.TriangleElements(new AttributesBuffer_1.AttributesBuffer(11, 4));\r\n            elements.autoDeriveNormals = false;\r\n            elements.autoDeriveTangents = false;\r\n            elements.setIndices(Array(0, 1, 2, 0, 2, 3));\r\n            elements.setPositions(Array(-billboardRect.x, -billboardRect.y, 0, width - billboardRect.x, -billboardRect.y, 0, width - billboardRect.x, height - billboardRect.y, 0, -billboardRect.x, height - billboardRect.y, 0));\r\n            elements.setNormals(Array(1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0));\r\n            elements.setTangents(Array(0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1));\r\n            elements.setUVs(Array(0, 0, 1, 0, 1, 1, 0, 1));\r\n        }\r\n        else {\r\n            elements.setPositions(Array(-billboardRect.x, -billboardRect.y, 0, width - billboardRect.x, -billboardRect.y, 0, width - billboardRect.x, height - billboardRect.y, 0, -billboardRect.x, height - billboardRect.y, 0));\r\n        }\r\n        return this._stage.getAbstraction(elements);\r\n    };\r\n    GL_BillboardRenderable.prototype._pGetSurface = function () {\r\n        return this._renderer.getSurfacePool(this.elementsGL).getAbstraction(this._billboard.material || DefaultMaterialManager_1.DefaultMaterialManager.getDefaultMaterial(this.renderable));\r\n    };\r\n    GL_BillboardRenderable._samplerElements = new Object();\r\n    return GL_BillboardRenderable;\r\n}(GL_RenderableBase_1.GL_RenderableBase));\r\nexports.GL_BillboardRenderable = GL_BillboardRenderable;\r\n},{\"../renderables/GL_RenderableBase\":\"awayjs-renderergl/lib/renderables/GL_RenderableBase\",\"awayjs-core/lib/attributes/AttributesBuffer\":undefined,\"awayjs-display/lib/graphics/TriangleElements\":undefined,\"awayjs-display/lib/managers/DefaultMaterialManager\":undefined}],\"awayjs-renderergl/lib/renderables/GL_GraphicRenderable\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar DefaultMaterialManager_1 = require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\r\nvar GL_RenderableBase_1 = require(\"../renderables/GL_RenderableBase\");\r\n/**\r\n * @class away.pool.GL_GraphicRenderable\r\n */\r\nvar GL_GraphicRenderable = (function (_super) {\r\n    __extends(GL_GraphicRenderable, _super);\r\n    /**\r\n     * //TODO\r\n     *\r\n     * @param pool\r\n     * @param graphic\r\n     * @param level\r\n     * @param indexOffset\r\n     */\r\n    function GL_GraphicRenderable(graphic, renderer) {\r\n        _super.call(this, graphic, renderer);\r\n        this.graphic = graphic;\r\n    }\r\n    GL_GraphicRenderable.prototype.onClear = function (event) {\r\n        _super.prototype.onClear.call(this, event);\r\n        this.graphic = null;\r\n    };\r\n    /**\r\n     *\r\n     * @returns {ElementsBase}\r\n     * @protected\r\n     */\r\n    GL_GraphicRenderable.prototype._pGetElements = function () {\r\n        this._offset = this.graphic.offset;\r\n        this._count = this.graphic.count;\r\n        return this._stage.getAbstraction((this.renderable.animator) ? this.renderable.animator.getRenderableElements(this, this.graphic.elements) : this.graphic.elements);\r\n    };\r\n    GL_GraphicRenderable.prototype._pGetSurface = function () {\r\n        return this._renderer.getSurfacePool(this.elementsGL).getAbstraction(this.graphic.material || DefaultMaterialManager_1.DefaultMaterialManager.getDefaultMaterial(this.renderable));\r\n    };\r\n    return GL_GraphicRenderable;\r\n}(GL_RenderableBase_1.GL_RenderableBase));\r\nexports.GL_GraphicRenderable = GL_GraphicRenderable;\r\n},{\"../renderables/GL_RenderableBase\":\"awayjs-renderergl/lib/renderables/GL_RenderableBase\",\"awayjs-display/lib/managers/DefaultMaterialManager\":undefined}],\"awayjs-renderergl/lib/renderables/GL_LineSegmentRenderable\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar LineElements_1 = require(\"awayjs-display/lib/graphics/LineElements\");\r\nvar DefaultMaterialManager_1 = require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\r\nvar GL_RenderableBase_1 = require(\"../renderables/GL_RenderableBase\");\r\n/**\r\n * @class away.pool.GL_LineSegmentRenderable\r\n */\r\nvar GL_LineSegmentRenderable = (function (_super) {\r\n    __extends(GL_LineSegmentRenderable, _super);\r\n    /**\r\n     * //TODO\r\n     *\r\n     * @param pool\r\n     * @param graphic\r\n     * @param level\r\n     * @param dataOffset\r\n     */\r\n    function GL_LineSegmentRenderable(lineSegment, renderer) {\r\n        _super.call(this, lineSegment, renderer);\r\n        this._lineSegment = lineSegment;\r\n    }\r\n    GL_LineSegmentRenderable.prototype.onClear = function (event) {\r\n        _super.prototype.onClear.call(this, event);\r\n        this._lineSegment = null;\r\n    };\r\n    /**\r\n     * //TODO\r\n     *\r\n     * @returns {base.LineElements}\r\n     * @protected\r\n     */\r\n    GL_LineSegmentRenderable.prototype._pGetElements = function () {\r\n        var elements = GL_LineSegmentRenderable._lineGraphics[this._lineSegment.id] || (GL_LineSegmentRenderable._lineGraphics[this._lineSegment.id] = new LineElements_1.LineElements());\r\n        var start = this._lineSegment.startPostion;\r\n        var end = this._lineSegment.endPosition;\r\n        var positions = new Float32Array(6);\r\n        var thickness = new Float32Array(1);\r\n        positions[0] = start.x;\r\n        positions[1] = start.y;\r\n        positions[2] = start.z;\r\n        positions[3] = end.x;\r\n        positions[4] = end.y;\r\n        positions[5] = end.z;\r\n        thickness[0] = this._lineSegment.thickness;\r\n        elements.setPositions(positions);\r\n        elements.setThickness(thickness);\r\n        return this._stage.getAbstraction(elements);\r\n    };\r\n    GL_LineSegmentRenderable.prototype._pGetSurface = function () {\r\n        return this._renderer.getSurfacePool(this.elementsGL).getAbstraction(this._lineSegment.material || DefaultMaterialManager_1.DefaultMaterialManager.getDefaultMaterial(this.renderable));\r\n    };\r\n    /**\r\n     * //TODO\r\n     *\r\n     * @param pool\r\n     * @param renderable\r\n     * @param level\r\n     * @param indexOffset\r\n     * @returns {away.pool.LineSubSpriteRenderable}\r\n     * @private\r\n     */\r\n    GL_LineSegmentRenderable.prototype._pGetOverflowRenderable = function (indexOffset) {\r\n        return new GL_LineSegmentRenderable(this.renderable, this._renderer);\r\n    };\r\n    GL_LineSegmentRenderable._lineGraphics = new Object();\r\n    return GL_LineSegmentRenderable;\r\n}(GL_RenderableBase_1.GL_RenderableBase));\r\nexports.GL_LineSegmentRenderable = GL_LineSegmentRenderable;\r\n},{\"../renderables/GL_RenderableBase\":\"awayjs-renderergl/lib/renderables/GL_RenderableBase\",\"awayjs-display/lib/graphics/LineElements\":undefined,\"awayjs-display/lib/managers/DefaultMaterialManager\":undefined}],\"awayjs-renderergl/lib/renderables/GL_RenderableBase\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar AbstractMethodError_1 = require(\"awayjs-core/lib/errors/AbstractMethodError\");\r\nvar AssetEvent_1 = require(\"awayjs-core/lib/events/AssetEvent\");\r\nvar AbstractionBase_1 = require(\"awayjs-core/lib/library/AbstractionBase\");\r\nvar RenderableEvent_1 = require(\"awayjs-display/lib/events/RenderableEvent\");\r\n/**\r\n * @class RenderableListItem\r\n */\r\nvar GL_RenderableBase = (function (_super) {\r\n    __extends(GL_RenderableBase, _super);\r\n    /**\r\n     *\r\n     * @param renderable\r\n     * @param sourceEntity\r\n     * @param surface\r\n     * @param renderer\r\n     */\r\n    function GL_RenderableBase(renderable, renderer) {\r\n        var _this = this;\r\n        _super.call(this, renderable, renderer);\r\n        this._count = 0;\r\n        this._offset = 0;\r\n        this._elementsDirty = true;\r\n        this._surfaceDirty = true;\r\n        this.images = new Array();\r\n        this.samplers = new Array();\r\n        this._onInvalidateSurfaceDelegate = function (event) { return _this._onInvalidateSurface(event); };\r\n        this._onInvalidateElementsDelegate = function (event) { return _this.onInvalidateElements(event); };\r\n        //store a reference to the pool for later disposal\r\n        this._renderer = renderer;\r\n        this._stage = renderer.stage;\r\n        this.renderable = renderable;\r\n        this.renderable.addEventListener(RenderableEvent_1.RenderableEvent.INVALIDATE_SURFACE, this._onInvalidateSurfaceDelegate);\r\n        this.renderable.addEventListener(RenderableEvent_1.RenderableEvent.INVALIDATE_ELEMENTS, this._onInvalidateElementsDelegate);\r\n    }\r\n    Object.defineProperty(GL_RenderableBase.prototype, \"elementsGL\", {\r\n        get: function () {\r\n            if (this._elementsDirty)\r\n                this._updateElements();\r\n            return this._elementsGL;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GL_RenderableBase.prototype, \"surfaceGL\", {\r\n        get: function () {\r\n            if (this._surfaceDirty)\r\n                this._updateSurface();\r\n            return this._surfaceGL;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    GL_RenderableBase.prototype.onClear = function (event) {\r\n        _super.prototype.onClear.call(this, event);\r\n        this.next = null;\r\n        this.masksConfig = null;\r\n        this.renderSceneTransform = null;\r\n        this._renderer = null;\r\n        this._stage = null;\r\n        this.sourceEntity = null;\r\n        this.renderable.removeEventListener(RenderableEvent_1.RenderableEvent.INVALIDATE_SURFACE, this._onInvalidateSurfaceDelegate);\r\n        this.renderable.removeEventListener(RenderableEvent_1.RenderableEvent.INVALIDATE_ELEMENTS, this._onInvalidateElementsDelegate);\r\n        this.renderable = null;\r\n        this._surfaceGL.usages--;\r\n        if (!this._surfaceGL.usages)\r\n            this._surfaceGL.onClear(new AssetEvent_1.AssetEvent(AssetEvent_1.AssetEvent.CLEAR, this._surfaceGL.surface));\r\n        this._surfaceGL = null;\r\n        this._elementsGL = null;\r\n    };\r\n    GL_RenderableBase.prototype.onInvalidateElements = function (event) {\r\n        this._elementsDirty = true;\r\n    };\r\n    GL_RenderableBase.prototype._onInvalidateSurface = function (event) {\r\n        this._surfaceDirty = true;\r\n    };\r\n    GL_RenderableBase.prototype._pGetElements = function () {\r\n        throw new AbstractMethodError_1.AbstractMethodError();\r\n    };\r\n    GL_RenderableBase.prototype._pGetSurface = function () {\r\n        throw new AbstractMethodError_1.AbstractMethodError();\r\n    };\r\n    /**\r\n     * Renders an object to the current render target.\r\n     *\r\n     * @private\r\n     */\r\n    GL_RenderableBase.prototype._iRender = function (pass, camera, viewProjection) {\r\n        this._setRenderState(pass, camera, viewProjection);\r\n        this._elementsGL.draw(this, pass.shader, camera, viewProjection, this._count, this._offset);\r\n    };\r\n    GL_RenderableBase.prototype._setRenderState = function (pass, camera, viewProjection) {\r\n        if (this._elementsDirty)\r\n            this._updateElements();\r\n        pass._setRenderState(this, camera, viewProjection);\r\n        if (pass.shader.activeElements != this._elementsGL) {\r\n            pass.shader.activeElements = this._elementsGL;\r\n            this._elementsGL._setRenderState(this, pass.shader, camera, viewProjection);\r\n        }\r\n    };\r\n    /**\r\n     * //TODO\r\n     *\r\n     * @private\r\n     */\r\n    GL_RenderableBase.prototype._updateElements = function () {\r\n        this._elementsGL = this._pGetElements();\r\n        this._elementsDirty = false;\r\n    };\r\n    GL_RenderableBase.prototype._updateSurface = function () {\r\n        var surfaceGL = this._pGetSurface();\r\n        if (this._surfaceGL != surfaceGL) {\r\n            if (this._surfaceGL) {\r\n                this._surfaceGL.usages--;\r\n                //dispose current surfaceGL object\r\n                if (!this._surfaceGL.usages)\r\n                    this._surfaceGL.onClear(new AssetEvent_1.AssetEvent(AssetEvent_1.AssetEvent.CLEAR, this._surfaceGL.surface));\r\n            }\r\n            this._surfaceGL = surfaceGL;\r\n            this._surfaceGL.usages++;\r\n        }\r\n        //create a cache of image & sampler objects for the renderable\r\n        var numImages = surfaceGL.numImages;\r\n        this.images.length = numImages;\r\n        this.samplers.length = numImages;\r\n        this.uvMatrix = this.renderable.style ? this.renderable.style.uvMatrix : this._surfaceGL.surface.style ? this._surfaceGL.surface.style.uvMatrix : null;\r\n        var numTextures = this._surfaceGL.surface.getNumTextures();\r\n        var texture;\r\n        var numImages;\r\n        var image;\r\n        var sampler;\r\n        var index;\r\n        for (var i = 0; i < numTextures; i++) {\r\n            texture = this._surfaceGL.surface.getTextureAt(i);\r\n            numImages = texture.getNumImages();\r\n            for (var j = 0; j < numImages; j++) {\r\n                index = surfaceGL.getImageIndex(texture, j);\r\n                image = this.renderable.style ? this.renderable.style.getImageAt(texture, j) : null;\r\n                this.images[index] = image ? this._stage.getAbstraction(image) : null;\r\n                sampler = this.renderable.style ? this.renderable.style.getSamplerAt(texture, j) : null;\r\n                this.samplers[index] = sampler ? this._stage.getAbstraction(sampler) : null;\r\n            }\r\n        }\r\n        this._surfaceDirty = false;\r\n    };\r\n    return GL_RenderableBase;\r\n}(AbstractionBase_1.AbstractionBase));\r\nexports.GL_RenderableBase = GL_RenderableBase;\r\n},{\"awayjs-core/lib/errors/AbstractMethodError\":undefined,\"awayjs-core/lib/events/AssetEvent\":undefined,\"awayjs-core/lib/library/AbstractionBase\":undefined,\"awayjs-display/lib/events/RenderableEvent\":undefined}],\"awayjs-renderergl/lib/renderables/GL_SkyboxRenderable\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar AttributesBuffer_1 = require(\"awayjs-core/lib/attributes/AttributesBuffer\");\r\nvar TriangleElements_1 = require(\"awayjs-display/lib/graphics/TriangleElements\");\r\nvar GL_RenderableBase_1 = require(\"../renderables/GL_RenderableBase\");\r\nvar GL_SkyboxElements_1 = require(\"../elements/GL_SkyboxElements\");\r\n/**\r\n * @class away.pool.GL_SkyboxRenderable\r\n */\r\nvar GL_SkyboxRenderable = (function (_super) {\r\n    __extends(GL_SkyboxRenderable, _super);\r\n    /**\r\n     * //TODO\r\n     *\r\n     * @param pool\r\n     * @param skybox\r\n     */\r\n    function GL_SkyboxRenderable(skybox, renderer) {\r\n        _super.call(this, skybox, renderer);\r\n        this._skybox = skybox;\r\n    }\r\n    /**\r\n     * //TODO\r\n     *\r\n     * @returns {away.base.TriangleElements}\r\n     * @private\r\n     */\r\n    GL_SkyboxRenderable.prototype._pGetElements = function () {\r\n        var elementsGL = GL_SkyboxRenderable._elementsGL;\r\n        if (!elementsGL) {\r\n            var elements = new TriangleElements_1.TriangleElements(new AttributesBuffer_1.AttributesBuffer(11, 4));\r\n            elements.autoDeriveNormals = false;\r\n            elements.autoDeriveTangents = false;\r\n            elements.setIndices(Array(0, 1, 2, 2, 3, 0, 6, 5, 4, 4, 7, 6, 2, 6, 7, 7, 3, 2, 4, 5, 1, 1, 0, 4, 4, 0, 3, 3, 7, 4, 2, 1, 5, 5, 6, 2));\r\n            elements.setPositions(Array(-1, 1, -1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1));\r\n            elementsGL = GL_SkyboxRenderable._elementsGL = new GL_SkyboxElements_1.GL_SkyboxElements(elements, this._stage);\r\n        }\r\n        return elementsGL;\r\n    };\r\n    GL_SkyboxRenderable.prototype._pGetSurface = function () {\r\n        return this._renderer.getSurfacePool(this.elementsGL).getAbstraction(this._skybox);\r\n    };\r\n    GL_SkyboxRenderable._iIncludeDependencies = function (shader) {\r\n    };\r\n    return GL_SkyboxRenderable;\r\n}(GL_RenderableBase_1.GL_RenderableBase));\r\nexports.GL_SkyboxRenderable = GL_SkyboxRenderable;\r\n},{\"../elements/GL_SkyboxElements\":\"awayjs-renderergl/lib/elements/GL_SkyboxElements\",\"../renderables/GL_RenderableBase\":\"awayjs-renderergl/lib/renderables/GL_RenderableBase\",\"awayjs-core/lib/attributes/AttributesBuffer\":undefined,\"awayjs-display/lib/graphics/TriangleElements\":undefined}],\"awayjs-renderergl/lib/renderables\":[function(require,module,exports){\n\"use strict\";\r\nvar GL_BillboardRenderable_1 = require(\"./renderables/GL_BillboardRenderable\");\r\nexports.GL_BillboardRenderable = GL_BillboardRenderable_1.GL_BillboardRenderable;\r\nvar GL_GraphicRenderable_1 = require(\"./renderables/GL_GraphicRenderable\");\r\nexports.GL_GraphicRenderable = GL_GraphicRenderable_1.GL_GraphicRenderable;\r\nvar GL_LineSegmentRenderable_1 = require(\"./renderables/GL_LineSegmentRenderable\");\r\nexports.GL_LineSegmentRenderable = GL_LineSegmentRenderable_1.GL_LineSegmentRenderable;\r\nvar GL_RenderableBase_1 = require(\"./renderables/GL_RenderableBase\");\r\nexports.GL_RenderableBase = GL_RenderableBase_1.GL_RenderableBase;\r\nvar GL_SkyboxRenderable_1 = require(\"./renderables/GL_SkyboxRenderable\");\r\nexports.GL_SkyboxRenderable = GL_SkyboxRenderable_1.GL_SkyboxRenderable;\r\n},{\"./renderables/GL_BillboardRenderable\":\"awayjs-renderergl/lib/renderables/GL_BillboardRenderable\",\"./renderables/GL_GraphicRenderable\":\"awayjs-renderergl/lib/renderables/GL_GraphicRenderable\",\"./renderables/GL_LineSegmentRenderable\":\"awayjs-renderergl/lib/renderables/GL_LineSegmentRenderable\",\"./renderables/GL_RenderableBase\":\"awayjs-renderergl/lib/renderables/GL_RenderableBase\",\"./renderables/GL_SkyboxRenderable\":\"awayjs-renderergl/lib/renderables/GL_SkyboxRenderable\"}],\"awayjs-renderergl/lib/shaders/LightingShader\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar LightSources_1 = require(\"awayjs-display/lib/materials/LightSources\");\r\nvar ContextGLProfile_1 = require(\"awayjs-stagegl/lib/base/ContextGLProfile\");\r\nvar ShaderBase_1 = require(\"../shaders/ShaderBase\");\r\nvar LightingCompiler_1 = require(\"../shaders/compilers/LightingCompiler\");\r\n/**\r\n * ShaderBase keeps track of the number of dependencies for \"named registers\" used across a pass.\r\n * Named registers are that are not necessarily limited to a single method. They are created by the compiler and\r\n * passed on to methods. The compiler uses the results to reserve usages through RegisterPool, which can be removed\r\n * each time a method has been compiled into the shader.\r\n *\r\n * @see RegisterPool.addUsage\r\n */\r\nvar LightingShader = (function (_super) {\r\n    __extends(LightingShader, _super);\r\n    /**\r\n     * Creates a new MethodCompilerVO object.\r\n     */\r\n    function LightingShader(elementsClass, lightingPass, stage) {\r\n        _super.call(this, elementsClass, lightingPass, stage);\r\n        this._includeCasters = true;\r\n        this._lightingPass = lightingPass;\r\n    }\r\n    LightingShader.prototype._iIncludeDependencies = function () {\r\n        this.numPointLights = this._lightingPass.numPointLights;\r\n        this.numDirectionalLights = this._lightingPass.numDirectionalLights;\r\n        this.numLightProbes = this._lightingPass.numLightProbes;\r\n        var numAllLights = this._lightingPass.numPointLights + this._lightingPass.numDirectionalLights;\r\n        var numLightProbes = this._lightingPass.numLightProbes;\r\n        var diffuseLightSources = this._lightingPass._iUsesDiffuse(this) ? this._lightingPass.diffuseLightSources : 0x00;\r\n        var specularLightSources = this._lightingPass._iUsesSpecular(this) ? this._lightingPass.specularLightSources : 0x00;\r\n        var combinedLightSources = diffuseLightSources | specularLightSources;\r\n        this.usesLightFallOff = this._lightingPass.enableLightFallOff && this.profile != ContextGLProfile_1.ContextGLProfile.BASELINE_CONSTRAINED;\r\n        this.usesCommonData = this.usesLightFallOff;\r\n        this.numLights = numAllLights + numLightProbes;\r\n        this.usesLights = numAllLights > 0 && (combinedLightSources & LightSources_1.LightSources.LIGHTS) != 0;\r\n        this.usesProbes = numLightProbes > 0 && (combinedLightSources & LightSources_1.LightSources.PROBES) != 0;\r\n        this.usesLightsForSpecular = numAllLights > 0 && (specularLightSources & LightSources_1.LightSources.LIGHTS) != 0;\r\n        this.usesProbesForSpecular = numLightProbes > 0 && (specularLightSources & LightSources_1.LightSources.PROBES) != 0;\r\n        this.usesLightsForDiffuse = numAllLights > 0 && (diffuseLightSources & LightSources_1.LightSources.LIGHTS) != 0;\r\n        this.usesProbesForDiffuse = numLightProbes > 0 && (diffuseLightSources & LightSources_1.LightSources.PROBES) != 0;\r\n        this.usesShadows = this._lightingPass._iUsesShadows(this);\r\n        //IMPORTANT this must occur after shader lighting initialisation above\r\n        _super.prototype._iIncludeDependencies.call(this);\r\n    };\r\n    /**\r\n     * Factory method to create a concrete compiler object for this object\r\n     *\r\n     * @param materialPassVO\r\n     * @returns {away.materials.LightingCompiler}\r\n     */\r\n    LightingShader.prototype.createCompiler = function (elementsClass, pass) {\r\n        return new LightingCompiler_1.LightingCompiler(elementsClass, pass, this);\r\n    };\r\n    /**\r\n     *\r\n     *\r\n     * @param renderable\r\n     * @param stage\r\n     * @param camera\r\n     */\r\n    LightingShader.prototype._setRenderState = function (renderable, camera, viewProjection) {\r\n        _super.prototype._setRenderState.call(this, renderable, camera, viewProjection);\r\n        if (this._lightingPass.lightPicker)\r\n            this._lightingPass.lightPicker.collectLights(renderable.sourceEntity);\r\n        if (this.usesLights)\r\n            this.updateLights();\r\n        if (this.usesProbes)\r\n            this.updateProbes();\r\n    };\r\n    /**\r\n     * Updates constant data render state used by the lights. This method is optional for subclasses to implement.\r\n     */\r\n    LightingShader.prototype.updateLights = function () {\r\n        var dirLight;\r\n        var pointLight;\r\n        var i = 0;\r\n        var k = 0;\r\n        var len;\r\n        var dirPos;\r\n        var total = 0;\r\n        var numLightTypes = this.usesShadows ? 2 : 1;\r\n        var l;\r\n        var offset;\r\n        this.ambientR = this.ambientG = this.ambientB = 0;\r\n        l = this.lightVertexConstantIndex;\r\n        k = this.lightFragmentConstantIndex;\r\n        var cast = 0;\r\n        var dirLights = this._lightingPass.lightPicker.directionalLights;\r\n        offset = this._lightingPass.directionalLightsOffset;\r\n        len = this._lightingPass.lightPicker.directionalLights.length;\r\n        if (offset > len) {\r\n            cast = 1;\r\n            offset -= len;\r\n        }\r\n        for (; cast < numLightTypes; ++cast) {\r\n            if (cast)\r\n                dirLights = this._lightingPass.lightPicker.castingDirectionalLights;\r\n            len = dirLights.length;\r\n            if (len > this.numDirectionalLights)\r\n                len = this.numDirectionalLights;\r\n            for (i = 0; i < len; ++i) {\r\n                dirLight = dirLights[offset + i];\r\n                dirPos = dirLight.sceneDirection;\r\n                this.ambientR += dirLight._iAmbientR;\r\n                this.ambientG += dirLight._iAmbientG;\r\n                this.ambientB += dirLight._iAmbientB;\r\n                if (this.usesTangentSpace) {\r\n                    var x = -dirPos.x;\r\n                    var y = -dirPos.y;\r\n                    var z = -dirPos.z;\r\n                    this.vertexConstantData[l++] = this._pInverseSceneMatrix[0] * x + this._pInverseSceneMatrix[4] * y + this._pInverseSceneMatrix[8] * z;\r\n                    this.vertexConstantData[l++] = this._pInverseSceneMatrix[1] * x + this._pInverseSceneMatrix[5] * y + this._pInverseSceneMatrix[9] * z;\r\n                    this.vertexConstantData[l++] = this._pInverseSceneMatrix[2] * x + this._pInverseSceneMatrix[6] * y + this._pInverseSceneMatrix[10] * z;\r\n                    this.vertexConstantData[l++] = 1;\r\n                }\r\n                else {\r\n                    this.fragmentConstantData[k++] = -dirPos.x;\r\n                    this.fragmentConstantData[k++] = -dirPos.y;\r\n                    this.fragmentConstantData[k++] = -dirPos.z;\r\n                    this.fragmentConstantData[k++] = 1;\r\n                }\r\n                this.fragmentConstantData[k++] = dirLight._iDiffuseR;\r\n                this.fragmentConstantData[k++] = dirLight._iDiffuseG;\r\n                this.fragmentConstantData[k++] = dirLight._iDiffuseB;\r\n                this.fragmentConstantData[k++] = 1;\r\n                this.fragmentConstantData[k++] = dirLight._iSpecularR;\r\n                this.fragmentConstantData[k++] = dirLight._iSpecularG;\r\n                this.fragmentConstantData[k++] = dirLight._iSpecularB;\r\n                this.fragmentConstantData[k++] = 1;\r\n                if (++total == this.numDirectionalLights) {\r\n                    // break loop\r\n                    i = len;\r\n                    cast = numLightTypes;\r\n                }\r\n            }\r\n        }\r\n        // more directional supported than currently picked, need to clamp all to 0\r\n        if (this.numDirectionalLights > total) {\r\n            i = k + (this.numDirectionalLights - total) * 12;\r\n            while (k < i)\r\n                this.fragmentConstantData[k++] = 0;\r\n        }\r\n        total = 0;\r\n        var pointLights = this._lightingPass.lightPicker.pointLights;\r\n        offset = this._lightingPass.pointLightsOffset;\r\n        len = this._lightingPass.lightPicker.pointLights.length;\r\n        if (offset > len) {\r\n            cast = 1;\r\n            offset -= len;\r\n        }\r\n        else {\r\n            cast = 0;\r\n        }\r\n        for (; cast < numLightTypes; ++cast) {\r\n            if (cast)\r\n                pointLights = this._lightingPass.lightPicker.castingPointLights;\r\n            len = pointLights.length;\r\n            for (i = 0; i < len; ++i) {\r\n                pointLight = pointLights[offset + i];\r\n                dirPos = pointLight.scenePosition;\r\n                this.ambientR += pointLight._iAmbientR;\r\n                this.ambientG += pointLight._iAmbientG;\r\n                this.ambientB += pointLight._iAmbientB;\r\n                if (this.usesTangentSpace) {\r\n                    x = dirPos.x;\r\n                    y = dirPos.y;\r\n                    z = dirPos.z;\r\n                    this.vertexConstantData[l++] = this._pInverseSceneMatrix[0] * x + this._pInverseSceneMatrix[4] * y + this._pInverseSceneMatrix[8] * z + this._pInverseSceneMatrix[12];\r\n                    this.vertexConstantData[l++] = this._pInverseSceneMatrix[1] * x + this._pInverseSceneMatrix[5] * y + this._pInverseSceneMatrix[9] * z + this._pInverseSceneMatrix[13];\r\n                    this.vertexConstantData[l++] = this._pInverseSceneMatrix[2] * x + this._pInverseSceneMatrix[6] * y + this._pInverseSceneMatrix[10] * z + this._pInverseSceneMatrix[14];\r\n                    this.vertexConstantData[l++] = 1;\r\n                }\r\n                else if (!this.usesGlobalPosFragment) {\r\n                    this.vertexConstantData[l++] = dirPos.x;\r\n                    this.vertexConstantData[l++] = dirPos.y;\r\n                    this.vertexConstantData[l++] = dirPos.z;\r\n                    this.vertexConstantData[l++] = 1;\r\n                }\r\n                else {\r\n                    this.fragmentConstantData[k++] = dirPos.x;\r\n                    this.fragmentConstantData[k++] = dirPos.y;\r\n                    this.fragmentConstantData[k++] = dirPos.z;\r\n                    this.fragmentConstantData[k++] = 1;\r\n                }\r\n                this.fragmentConstantData[k++] = pointLight._iDiffuseR;\r\n                this.fragmentConstantData[k++] = pointLight._iDiffuseG;\r\n                this.fragmentConstantData[k++] = pointLight._iDiffuseB;\r\n                var radius = pointLight._pRadius;\r\n                this.fragmentConstantData[k++] = radius * radius;\r\n                this.fragmentConstantData[k++] = pointLight._iSpecularR;\r\n                this.fragmentConstantData[k++] = pointLight._iSpecularG;\r\n                this.fragmentConstantData[k++] = pointLight._iSpecularB;\r\n                this.fragmentConstantData[k++] = pointLight._pFallOffFactor;\r\n                if (++total == this.numPointLights) {\r\n                    // break loop\r\n                    i = len;\r\n                    cast = numLightTypes;\r\n                }\r\n            }\r\n        }\r\n        // more directional supported than currently picked, need to clamp all to 0\r\n        if (this.numPointLights > total) {\r\n            i = k + (total - this.numPointLights) * 12;\r\n            for (; k < i; ++k)\r\n                this.fragmentConstantData[k] = 0;\r\n        }\r\n    };\r\n    /**\r\n     * Updates constant data render state used by the light probes. This method is optional for subclasses to implement.\r\n     */\r\n    LightingShader.prototype.updateProbes = function () {\r\n        var probe;\r\n        var lightProbes = this._lightingPass.lightPicker.lightProbes;\r\n        var weights = this._lightingPass.lightPicker.lightProbeWeights;\r\n        var len = lightProbes.length - this._lightingPass.lightProbesOffset;\r\n        var addDiff = this.usesProbesForDiffuse;\r\n        var addSpec = this.usesProbesForSpecular;\r\n        if (!(addDiff || addSpec))\r\n            return;\r\n        if (len > this.numLightProbes)\r\n            len = this.numLightProbes;\r\n        for (var i = 0; i < len; ++i) {\r\n            probe = lightProbes[this._lightingPass.lightProbesOffset + i];\r\n            if (addDiff)\r\n                this._stage.getAbstraction(probe.diffuseMap).activate(this.lightProbeDiffuseIndices[i], probe.diffuseSampler.mipmap);\r\n            if (addSpec)\r\n                this._stage.getAbstraction(probe.specularMap).activate(this.lightProbeSpecularIndices[i], probe.diffuseSampler.mipmap);\r\n        }\r\n        for (i = 0; i < len; ++i)\r\n            this.fragmentConstantData[this.probeWeightsIndex + i] = weights[this._lightingPass.lightProbesOffset + i];\r\n    };\r\n    return LightingShader;\r\n}(ShaderBase_1.ShaderBase));\r\nexports.LightingShader = LightingShader;\r\n},{\"../shaders/ShaderBase\":\"awayjs-renderergl/lib/shaders/ShaderBase\",\"../shaders/compilers/LightingCompiler\":\"awayjs-renderergl/lib/shaders/compilers/LightingCompiler\",\"awayjs-display/lib/materials/LightSources\":undefined,\"awayjs-stagegl/lib/base/ContextGLProfile\":undefined}],\"awayjs-renderergl/lib/shaders/RegisterPool\":[function(require,module,exports){\n\"use strict\";\r\nvar ShaderRegisterElement_1 = require(\"../shaders/ShaderRegisterElement\");\r\n/**\r\n * RegisterPool is used by the shader compilers process to keep track of which registers of a certain type are\r\n * currently used and should not be allowed to be written to. Either entire registers can be requested and locked,\r\n * or single components (x, y, z, w) of a single register.\r\n * It is used by ShaderRegisterCache to track usages of individual register types.\r\n *\r\n * @see away.materials.ShaderRegisterCache\r\n */\r\nvar RegisterPool = (function () {\r\n    /**\r\n     * Creates a new RegisterPool object.\r\n     * @param regName The base name of the register type (\"ft\" for fragment temporaries, \"vc\" for vertex constants, etc)\r\n     * @param regCount The amount of available registers of this type.\r\n     * @param persistent Whether or not registers, once reserved, can be freed again. For example, temporaries are not persistent, but constants are.\r\n     */\r\n    function RegisterPool(regName, regCount, persistent) {\r\n        if (persistent === void 0) { persistent = true; }\r\n        this._regName = regName;\r\n        this._regCount = regCount;\r\n        this._persistent = persistent;\r\n        this.initRegisters(regName, regCount);\r\n    }\r\n    /**\r\n     * Retrieve an entire vector register that's still available.\r\n     */\r\n    RegisterPool.prototype.requestFreeVectorReg = function () {\r\n        for (var i = 0; i < this._regCount; ++i) {\r\n            if (!this.isRegisterUsed(i)) {\r\n                if (this._persistent)\r\n                    this._usedVectorCount[i]++;\r\n                return this._vectorRegisters[i];\r\n            }\r\n        }\r\n        throw new Error(\"Register overflow!\");\r\n    };\r\n    /**\r\n     * Retrieve a single vector component that's still available.\r\n     */\r\n    RegisterPool.prototype.requestFreeRegComponent = function () {\r\n        for (var i = 0; i < this._regCount; ++i) {\r\n            if (this._usedVectorCount[i] > 0)\r\n                continue;\r\n            for (var j = 0; j < 4; ++j) {\r\n                if (this._usedSingleCount[j][i] == 0) {\r\n                    if (this._persistent)\r\n                        this._usedSingleCount[j][i]++;\r\n                    return this._registerComponents[j][i];\r\n                }\r\n            }\r\n        }\r\n        throw new Error(\"Register overflow!\");\r\n    };\r\n    /**\r\n     * Marks a register as used, so it cannot be retrieved. The register won't be able to be used until removeUsage\r\n     * has been called usageCount times again.\r\n     * @param register The register to mark as used.\r\n     * @param usageCount The amount of usages to add.\r\n     */\r\n    RegisterPool.prototype.addUsage = function (register, usageCount) {\r\n        if (register._component > -1)\r\n            this._usedSingleCount[register._component][register.index] += usageCount;\r\n        else\r\n            this._usedVectorCount[register.index] += usageCount;\r\n    };\r\n    /**\r\n     * Removes a usage from a register. When usages reach 0, the register is freed again.\r\n     * @param register The register for which to remove a usage.\r\n     */\r\n    RegisterPool.prototype.removeUsage = function (register) {\r\n        if (register._component > -1) {\r\n            if (--this._usedSingleCount[register._component][register.index] < 0)\r\n                throw new Error(\"More usages removed than exist!\");\r\n        }\r\n        else {\r\n            if (--this._usedVectorCount[register.index] < 0)\r\n                throw new Error(\"More usages removed than exist!\");\r\n        }\r\n    };\r\n    /**\r\n     * Disposes any resources used by the current RegisterPool object.\r\n     */\r\n    RegisterPool.prototype.dispose = function () {\r\n        this._vectorRegisters = null;\r\n        this._registerComponents = null;\r\n        this._usedSingleCount = null;\r\n        this._usedVectorCount = null;\r\n    };\r\n    /**\r\n     * Indicates whether or not any registers are in use.\r\n     */\r\n    RegisterPool.prototype.hasRegisteredRegs = function () {\r\n        for (var i = 0; i < this._regCount; ++i)\r\n            if (this.isRegisterUsed(i))\r\n                return true;\r\n        return false;\r\n    };\r\n    /**\r\n     * Initializes all registers.\r\n     */\r\n    RegisterPool.prototype.initRegisters = function (regName, regCount) {\r\n        var hash = RegisterPool._initPool(regName, regCount);\r\n        this._vectorRegisters = RegisterPool._regPool[hash];\r\n        this._registerComponents = RegisterPool._regCompsPool[hash];\r\n        this._usedVectorCount = this._initArray(Array(regCount), 0);\r\n        this._usedSingleCount = new Array(4);\r\n        this._usedSingleCount[0] = this._initArray(new Array(regCount), 0);\r\n        this._usedSingleCount[1] = this._initArray(new Array(regCount), 0);\r\n        this._usedSingleCount[2] = this._initArray(new Array(regCount), 0);\r\n        this._usedSingleCount[3] = this._initArray(new Array(regCount), 0);\r\n    };\r\n    RegisterPool._initPool = function (regName, regCount) {\r\n        var hash = regName + regCount;\r\n        if (RegisterPool._regPool[hash] != undefined)\r\n            return hash;\r\n        var vectorRegisters = new Array(regCount);\r\n        RegisterPool._regPool[hash] = vectorRegisters;\r\n        var registerComponents = [\r\n            [],\r\n            [],\r\n            [],\r\n            []\r\n        ];\r\n        RegisterPool._regCompsPool[hash] = registerComponents;\r\n        for (var i = 0; i < regCount; ++i) {\r\n            vectorRegisters[i] = new ShaderRegisterElement_1.ShaderRegisterElement(regName, i);\r\n            for (var j = 0; j < 4; ++j)\r\n                registerComponents[j][i] = new ShaderRegisterElement_1.ShaderRegisterElement(regName, i, j);\r\n        }\r\n        return hash;\r\n    };\r\n    /**\r\n     * Check if the temp register is either used for single or vector use\r\n     */\r\n    RegisterPool.prototype.isRegisterUsed = function (index) {\r\n        if (this._usedVectorCount[index] > 0)\r\n            return true;\r\n        for (var i = 0; i < 4; ++i)\r\n            if (this._usedSingleCount[i][index] > 0)\r\n                return true;\r\n        return false;\r\n    };\r\n    RegisterPool.prototype._initArray = function (a, val) {\r\n        var l = a.length;\r\n        for (var c = 0; c < l; c++)\r\n            a[c] = val;\r\n        return a;\r\n    };\r\n    RegisterPool._regPool = new Object();\r\n    RegisterPool._regCompsPool = new Object();\r\n    return RegisterPool;\r\n}());\r\nexports.RegisterPool = RegisterPool;\r\n},{\"../shaders/ShaderRegisterElement\":\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\"}],\"awayjs-renderergl/lib/shaders/ShaderBase\":[function(require,module,exports){\n\"use strict\";\r\nvar BlendMode_1 = require(\"awayjs-core/lib/image/BlendMode\");\r\nvar ArgumentError_1 = require(\"awayjs-core/lib/errors/ArgumentError\");\r\nvar ContextGLBlendFactor_1 = require(\"awayjs-stagegl/lib/base/ContextGLBlendFactor\");\r\nvar ContextGLCompareMode_1 = require(\"awayjs-stagegl/lib/base/ContextGLCompareMode\");\r\nvar ContextGLTriangleFace_1 = require(\"awayjs-stagegl/lib/base/ContextGLTriangleFace\");\r\nvar CompilerBase_1 = require(\"../shaders/compilers/CompilerBase\");\r\n/**\r\n * ShaderBase keeps track of the number of dependencies for \"named registers\" used across a pass.\r\n * Named registers are that are not necessarily limited to a single method. They are created by the compiler and\r\n * passed on to methods. The compiler uses the results to reserve usages through RegisterPool, which can be removed\r\n * each time a method has been compiled into the shader.\r\n *\r\n * @see RegisterPool.addUsage\r\n */\r\nvar ShaderBase = (function () {\r\n    /**\r\n     * Creates a new MethodCompilerVO object.\r\n     */\r\n    function ShaderBase(elementsClass, pass, stage) {\r\n        this._abstractionPool = new Object();\r\n        this._blendFactorSource = ContextGLBlendFactor_1.ContextGLBlendFactor.ONE;\r\n        this._blendFactorDest = ContextGLBlendFactor_1.ContextGLBlendFactor.ZERO;\r\n        this._invalidProgram = true;\r\n        this._animationVertexCode = \"\";\r\n        this._animationFragmentCode = \"\";\r\n        this.usesBlending = false;\r\n        this.useImageRect = false;\r\n        this.usesCurves = false;\r\n        /**\r\n         * The depth compare mode used to render the renderables using this material.\r\n         *\r\n         * @see away.stagegl.ContextGLCompareMode\r\n         */\r\n        this.depthCompareMode = ContextGLCompareMode_1.ContextGLCompareMode.LESS;\r\n        /**\r\n         * Indicate whether the shader should write to the depth buffer or not. Ignored when blending is enabled.\r\n         */\r\n        this.writeDepth = true;\r\n        this._defaultCulling = ContextGLTriangleFace_1.ContextGLTriangleFace.BACK;\r\n        this._pInverseSceneMatrix = new Float32Array(16);\r\n        //set ambient values to default\r\n        this.ambientR = 0xFF;\r\n        this.ambientG = 0xFF;\r\n        this.ambientB = 0xFF;\r\n        /**\r\n         * Indicates whether there are any dependencies on the world-space position vector.\r\n         */\r\n        this.usesGlobalPosFragment = false;\r\n        /**\r\n         * Indicates whether there are any dependencies on the local position vector.\r\n         */\r\n        this.usesPositionFragment = false;\r\n        /**\r\n         *\r\n         */\r\n        this.imageIndices = new Array();\r\n        this._elementsClass = elementsClass;\r\n        this._pass = pass;\r\n        this._stage = stage;\r\n        this.profile = this._stage.profile;\r\n    }\r\n    Object.defineProperty(ShaderBase.prototype, \"programData\", {\r\n        get: function () {\r\n            if (this._invalidProgram)\r\n                this._updateProgram();\r\n            return this._programData;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ShaderBase.prototype, \"usesAnimation\", {\r\n        get: function () {\r\n            return this._usesAnimation;\r\n        },\r\n        set: function (value) {\r\n            if (this._usesAnimation == value)\r\n                return;\r\n            this._usesAnimation = value;\r\n            this.invalidateProgram();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ShaderBase.prototype, \"numUsedVertexConstants\", {\r\n        get: function () {\r\n            if (this._invalidProgram)\r\n                this._updateProgram();\r\n            return this._numUsedVertexConstants;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ShaderBase.prototype, \"numUsedFragmentConstants\", {\r\n        get: function () {\r\n            if (this._invalidProgram)\r\n                this._updateProgram();\r\n            return this._numUsedFragmentConstants;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ShaderBase.prototype, \"numUsedStreams\", {\r\n        /**\r\n         * The amount of used vertex streams in the vertex code. Used by the animation code generation to know from which index on streams are available.\r\n         */\r\n        get: function () {\r\n            if (this._invalidProgram)\r\n                this._updateProgram();\r\n            return this._numUsedStreams;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ShaderBase.prototype, \"numUsedTextures\", {\r\n        /**\r\n         *\r\n         */\r\n        get: function () {\r\n            if (this._invalidProgram)\r\n                this._updateProgram();\r\n            return this._numUsedTextures;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ShaderBase.prototype.getAbstraction = function (texture) {\r\n        return (this._abstractionPool[texture.id] || (this._abstractionPool[texture.id] = new ShaderBase._abstractionClassPool[texture.assetType](texture, this)));\r\n    };\r\n    /**\r\n     *\r\n     * @param image\r\n     */\r\n    ShaderBase.prototype.clearAbstraction = function (texture) {\r\n        this._abstractionPool[texture.id] = null;\r\n    };\r\n    /**\r\n     *\r\n     * @param imageObjectClass\r\n     */\r\n    ShaderBase.registerAbstraction = function (gl_assetClass, assetClass) {\r\n        ShaderBase._abstractionClassPool[assetClass.assetType] = gl_assetClass;\r\n    };\r\n    ShaderBase.prototype.getImageIndex = function (texture, index) {\r\n        if (index === void 0) { index = 0; }\r\n        return this._pass.getImageIndex(texture, index);\r\n    };\r\n    ShaderBase.prototype._iIncludeDependencies = function () {\r\n        this._pass._iIncludeDependencies(this);\r\n    };\r\n    /**\r\n     * Factory method to create a concrete compiler object for this object\r\n     *\r\n     * @param elementsClass\r\n     * @param pass\r\n     * @param stage\r\n     * @returns {CompilerBase}\r\n     */\r\n    ShaderBase.prototype.createCompiler = function (elementsClass, pass) {\r\n        return new CompilerBase_1.CompilerBase(elementsClass, pass, this);\r\n    };\r\n    /**\r\n     * Clears dependency counts for all registers. Called when recompiling a pass.\r\n     */\r\n    ShaderBase.prototype.reset = function () {\r\n        this.projectionDependencies = 0;\r\n        this.normalDependencies = 0;\r\n        this.colorDependencies = 0;\r\n        this.viewDirDependencies = 0;\r\n        this.uvDependencies = 0;\r\n        this.secondaryUVDependencies = 0;\r\n        this.globalPosDependencies = 0;\r\n        this.tangentDependencies = 0;\r\n        this.usesCommonData = false;\r\n        this.usesGlobalPosFragment = false;\r\n        this.usesPositionFragment = false;\r\n        this.usesFragmentAnimation = false;\r\n        this.usesTangentSpace = false;\r\n        this.outputsNormals = false;\r\n        this.outputsTangentNormals = false;\r\n    };\r\n    ShaderBase.prototype.pInitRegisterIndices = function () {\r\n        this.commonsDataIndex = -1;\r\n        this.cameraPositionIndex = -1;\r\n        this.curvesIndex = -1;\r\n        this.uvIndex = -1;\r\n        this.uvMatrixIndex = -1;\r\n        this.colorTransformIndex = -1;\r\n        this.secondaryUVIndex = -1;\r\n        this.normalIndex = -1;\r\n        this.colorBufferIndex = -1;\r\n        this.tangentIndex = -1;\r\n        this.sceneMatrixIndex = -1;\r\n        this.sceneNormalMatrixIndex = -1;\r\n        this.jointIndexIndex = -1;\r\n        this.jointWeightIndex = -1;\r\n        this.imageIndices.length = 0;\r\n    };\r\n    /**\r\n     * Initializes the unchanging constant data for this shader object.\r\n     */\r\n    ShaderBase.prototype.initConstantData = function (registerCache) {\r\n        //Updates the amount of used register indices.\r\n        this._numUsedVertexConstants = registerCache.numUsedVertexConstants;\r\n        this._numUsedFragmentConstants = registerCache.numUsedFragmentConstants;\r\n        this._numUsedStreams = registerCache.numUsedStreams;\r\n        this._numUsedTextures = registerCache.numUsedTextures;\r\n        this.vertexConstantData = new Float32Array(registerCache.numUsedVertexConstants * 4);\r\n        this.fragmentConstantData = new Float32Array(registerCache.numUsedFragmentConstants * 4);\r\n        //Initializes commonly required constant values.\r\n        if (this.commonsDataIndex >= 0) {\r\n            this.fragmentConstantData[this.commonsDataIndex] = .5;\r\n            this.fragmentConstantData[this.commonsDataIndex + 1] = 0;\r\n            this.fragmentConstantData[this.commonsDataIndex + 2] = 1 / 255;\r\n            this.fragmentConstantData[this.commonsDataIndex + 3] = 1;\r\n        }\r\n        //Initializes the default UV transformation matrix.\r\n        if (this.uvMatrixIndex >= 0) {\r\n            this.vertexConstantData[this.uvMatrixIndex] = 1;\r\n            this.vertexConstantData[this.uvMatrixIndex + 1] = 0;\r\n            this.vertexConstantData[this.uvMatrixIndex + 2] = 0;\r\n            this.vertexConstantData[this.uvMatrixIndex + 3] = 0;\r\n            this.vertexConstantData[this.uvMatrixIndex + 4] = 0;\r\n            this.vertexConstantData[this.uvMatrixIndex + 5] = 1;\r\n            this.vertexConstantData[this.uvMatrixIndex + 6] = 0;\r\n            this.vertexConstantData[this.uvMatrixIndex + 7] = 0;\r\n        }\r\n        //Initializes the default colorTransform.\r\n        if (this.colorTransformIndex >= 0) {\r\n            this.fragmentConstantData[this.colorTransformIndex] = 1;\r\n            this.fragmentConstantData[this.colorTransformIndex + 1] = 1;\r\n            this.fragmentConstantData[this.colorTransformIndex + 2] = 1;\r\n            this.fragmentConstantData[this.colorTransformIndex + 3] = 1;\r\n            this.fragmentConstantData[this.colorTransformIndex + 4] = 0;\r\n            this.fragmentConstantData[this.colorTransformIndex + 5] = 0;\r\n            this.fragmentConstantData[this.colorTransformIndex + 6] = 0;\r\n            this.fragmentConstantData[this.colorTransformIndex + 7] = 0;\r\n        }\r\n        if (this.cameraPositionIndex >= 0)\r\n            this.vertexConstantData[this.cameraPositionIndex + 3] = 1;\r\n        // init constant data in pass\r\n        this._pass._iInitConstantData(this);\r\n        //init constant data in animation\r\n        if (this.usesAnimation)\r\n            this._pass.animationSet.doneAGALCode(this);\r\n    };\r\n    /**\r\n     * The blend mode to use when drawing this renderable. The following blend modes are supported:\r\n     * <ul>\r\n     * <li>BlendMode.NORMAL: No blending, unless the material inherently needs it</li>\r\n     * <li>BlendMode.LAYER: Force blending. This will draw the object the same as NORMAL, but without writing depth writes.</li>\r\n     * <li>BlendMode.MULTIPLY</li>\r\n     * <li>BlendMode.ADD</li>\r\n     * <li>BlendMode.ALPHA</li>\r\n     * </ul>\r\n     */\r\n    ShaderBase.prototype.setBlendMode = function (value) {\r\n        switch (value) {\r\n            case BlendMode_1.BlendMode.NORMAL:\r\n                this._blendFactorSource = ContextGLBlendFactor_1.ContextGLBlendFactor.ONE;\r\n                this._blendFactorDest = ContextGLBlendFactor_1.ContextGLBlendFactor.ZERO;\r\n                this.usesBlending = false;\r\n                break;\r\n            case BlendMode_1.BlendMode.LAYER:\r\n                this._blendFactorSource = ContextGLBlendFactor_1.ContextGLBlendFactor.SOURCE_ALPHA;\r\n                this._blendFactorDest = ContextGLBlendFactor_1.ContextGLBlendFactor.ONE_MINUS_SOURCE_ALPHA;\r\n                this.usesBlending = true;\r\n                break;\r\n            case BlendMode_1.BlendMode.MULTIPLY:\r\n                this._blendFactorSource = ContextGLBlendFactor_1.ContextGLBlendFactor.ZERO;\r\n                this._blendFactorDest = ContextGLBlendFactor_1.ContextGLBlendFactor.SOURCE_COLOR;\r\n                this.usesBlending = true;\r\n                break;\r\n            case BlendMode_1.BlendMode.ADD:\r\n                this._blendFactorSource = ContextGLBlendFactor_1.ContextGLBlendFactor.SOURCE_ALPHA;\r\n                this._blendFactorDest = ContextGLBlendFactor_1.ContextGLBlendFactor.ONE;\r\n                this.usesBlending = true;\r\n                break;\r\n            case BlendMode_1.BlendMode.ALPHA:\r\n                this._blendFactorSource = ContextGLBlendFactor_1.ContextGLBlendFactor.ZERO;\r\n                this._blendFactorDest = ContextGLBlendFactor_1.ContextGLBlendFactor.SOURCE_ALPHA;\r\n                this.usesBlending = true;\r\n                break;\r\n            default:\r\n                throw new ArgumentError_1.ArgumentError(\"Unsupported blend mode!\");\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ShaderBase.prototype._iActivate = function (camera) {\r\n        this._stage.context.setCulling(this.useBothSides ? ContextGLTriangleFace_1.ContextGLTriangleFace.NONE : this._defaultCulling, camera.projection.coordinateSystem);\r\n        if (!this.usesTangentSpace && this.cameraPositionIndex >= 0) {\r\n            var pos = camera.scenePosition;\r\n            this.vertexConstantData[this.cameraPositionIndex] = pos.x;\r\n            this.vertexConstantData[this.cameraPositionIndex + 1] = pos.y;\r\n            this.vertexConstantData[this.cameraPositionIndex + 2] = pos.z;\r\n        }\r\n        this._stage.context.setDepthTest((this.writeDepth && !this.usesBlending), this.depthCompareMode);\r\n        if (this.usesBlending)\r\n            this._stage.context.setBlendFactors(this._blendFactorSource, this._blendFactorDest);\r\n        this.activeElements = null;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ShaderBase.prototype._iDeactivate = function () {\r\n        //For the love of god don't remove this if you want your multi-material shadows to not flicker like shit\r\n        this._stage.context.setDepthTest(true, ContextGLCompareMode_1.ContextGLCompareMode.LESS);\r\n        this.activeElements = null;\r\n    };\r\n    /**\r\n     *\r\n     *\r\n     * @param renderable\r\n     * @param stage\r\n     * @param camera\r\n     */\r\n    ShaderBase.prototype._setRenderState = function (renderable, camera, viewProjection) {\r\n        if (renderable.renderable.animator)\r\n            renderable.renderable.animator.setRenderState(this, renderable, this._stage, camera);\r\n        if (this.usesUVTransform) {\r\n            var uvMatrix = renderable.uvMatrix;\r\n            if (uvMatrix) {\r\n                //transpose\r\n                var rawData = uvMatrix.rawData;\r\n                this.vertexConstantData[this.uvMatrixIndex] = rawData[0];\r\n                this.vertexConstantData[this.uvMatrixIndex + 1] = rawData[2];\r\n                this.vertexConstantData[this.uvMatrixIndex + 3] = rawData[4];\r\n                this.vertexConstantData[this.uvMatrixIndex + 4] = rawData[1];\r\n                this.vertexConstantData[this.uvMatrixIndex + 5] = rawData[3];\r\n                this.vertexConstantData[this.uvMatrixIndex + 7] = rawData[5];\r\n            }\r\n            else {\r\n                this.vertexConstantData[this.uvMatrixIndex] = 1;\r\n                this.vertexConstantData[this.uvMatrixIndex + 1] = 0;\r\n                this.vertexConstantData[this.uvMatrixIndex + 3] = 0;\r\n                this.vertexConstantData[this.uvMatrixIndex + 4] = 0;\r\n                this.vertexConstantData[this.uvMatrixIndex + 5] = 1;\r\n                this.vertexConstantData[this.uvMatrixIndex + 7] = 0;\r\n            }\r\n        }\r\n        if (this.usesColorTransform) {\r\n            var colorTransform = renderable.sourceEntity._iAssignedColorTransform();\r\n            if (colorTransform) {\r\n                //TODO: AWDParser to write normalised color offsets\r\n                this.fragmentConstantData[this.colorTransformIndex] = colorTransform.rawData[0];\r\n                this.fragmentConstantData[this.colorTransformIndex + 1] = colorTransform.rawData[1];\r\n                this.fragmentConstantData[this.colorTransformIndex + 2] = colorTransform.rawData[2];\r\n                this.fragmentConstantData[this.colorTransformIndex + 3] = colorTransform.rawData[3];\r\n                this.fragmentConstantData[this.colorTransformIndex + 4] = colorTransform.rawData[4] / 255;\r\n                this.fragmentConstantData[this.colorTransformIndex + 5] = colorTransform.rawData[5] / 255;\r\n                this.fragmentConstantData[this.colorTransformIndex + 6] = colorTransform.rawData[6] / 255;\r\n                this.fragmentConstantData[this.colorTransformIndex + 7] = colorTransform.rawData[7] / 255;\r\n            }\r\n            else {\r\n                this.fragmentConstantData[this.colorTransformIndex] = 1;\r\n                this.fragmentConstantData[this.colorTransformIndex + 1] = 1;\r\n                this.fragmentConstantData[this.colorTransformIndex + 2] = 1;\r\n                this.fragmentConstantData[this.colorTransformIndex + 3] = 1;\r\n                this.fragmentConstantData[this.colorTransformIndex + 4] = 0;\r\n                this.fragmentConstantData[this.colorTransformIndex + 5] = 0;\r\n                this.fragmentConstantData[this.colorTransformIndex + 6] = 0;\r\n                this.fragmentConstantData[this.colorTransformIndex + 7] = 0;\r\n            }\r\n        }\r\n        if (this.sceneNormalMatrixIndex >= 0)\r\n            renderable.sourceEntity.inverseSceneTransform.copyRawDataTo(this.vertexConstantData, this.sceneNormalMatrixIndex, false);\r\n        if (this.usesTangentSpace && this.cameraPositionIndex >= 0) {\r\n            renderable.sourceEntity.inverseSceneTransform.copyRawDataTo(this._pInverseSceneMatrix);\r\n            var pos = camera.scenePosition;\r\n            var x = pos.x;\r\n            var y = pos.y;\r\n            var z = pos.z;\r\n            this.vertexConstantData[this.cameraPositionIndex] = this._pInverseSceneMatrix[0] * x + this._pInverseSceneMatrix[4] * y + this._pInverseSceneMatrix[8] * z + this._pInverseSceneMatrix[12];\r\n            this.vertexConstantData[this.cameraPositionIndex + 1] = this._pInverseSceneMatrix[1] * x + this._pInverseSceneMatrix[5] * y + this._pInverseSceneMatrix[9] * z + this._pInverseSceneMatrix[13];\r\n            this.vertexConstantData[this.cameraPositionIndex + 2] = this._pInverseSceneMatrix[2] * x + this._pInverseSceneMatrix[6] * y + this._pInverseSceneMatrix[10] * z + this._pInverseSceneMatrix[14];\r\n        }\r\n    };\r\n    ShaderBase.prototype.invalidateProgram = function () {\r\n        this._invalidProgram = true;\r\n    };\r\n    ShaderBase.prototype.dispose = function () {\r\n        this._programData.dispose();\r\n        this._programData = null;\r\n    };\r\n    ShaderBase.prototype._updateProgram = function () {\r\n        this._invalidProgram = false;\r\n        var compiler = this.createCompiler(this._elementsClass, this._pass);\r\n        compiler.compile();\r\n        this._calcAnimationCode(compiler._pRegisterCache, compiler.shadedTarget, compiler._pSharedRegisters);\r\n        //initialise the required shader constants\r\n        this.initConstantData(compiler._pRegisterCache);\r\n        var programData = this._stage.getProgramData(this._animationVertexCode + compiler.vertexCode, compiler.fragmentCode + this._animationFragmentCode + compiler.postAnimationFragmentCode);\r\n        //check program data hasn't changed, keep count of program usages\r\n        if (this._programData != programData) {\r\n            if (this._programData)\r\n                this._programData.dispose();\r\n            this._programData = programData;\r\n            programData.usages++;\r\n        }\r\n    };\r\n    ShaderBase.prototype._calcAnimationCode = function (registerCache, shadedTarget, sharedRegisters) {\r\n        //reset code\r\n        this._animationVertexCode = \"\";\r\n        this._animationFragmentCode = \"\";\r\n        //check to see if GPU animation is used\r\n        if (this.usesAnimation) {\r\n            var animationSet = this._pass.animationSet;\r\n            this._animationVertexCode += animationSet.getAGALVertexCode(this, registerCache, sharedRegisters);\r\n            if (this.uvDependencies > 0 && !this.usesUVTransform)\r\n                this._animationVertexCode += animationSet.getAGALUVCode(this, registerCache, sharedRegisters);\r\n            if (this.usesFragmentAnimation)\r\n                this._animationFragmentCode += animationSet.getAGALFragmentCode(this, registerCache, shadedTarget);\r\n        }\r\n        else {\r\n            // simply write attributes to targets, do not animate them\r\n            // projection will pick up on targets[0] to do the projection\r\n            var len = sharedRegisters.animatableAttributes.length;\r\n            for (var i = 0; i < len; ++i)\r\n                this._animationVertexCode += \"mov \" + sharedRegisters.animationTargetRegisters[i] + \", \" + sharedRegisters.animatableAttributes[i] + \"\\n\";\r\n            if (this.uvDependencies > 0 && !this.usesUVTransform)\r\n                this._animationVertexCode += \"mov \" + sharedRegisters.uvTarget + \",\" + sharedRegisters.uvSource + \"\\n\";\r\n        }\r\n    };\r\n    ShaderBase.prototype.setVertexConst = function (index, x, y, z, w) {\r\n        if (x === void 0) { x = 0; }\r\n        if (y === void 0) { y = 0; }\r\n        if (z === void 0) { z = 0; }\r\n        if (w === void 0) { w = 0; }\r\n        index *= 4;\r\n        this.vertexConstantData[index++] = x;\r\n        this.vertexConstantData[index++] = y;\r\n        this.vertexConstantData[index++] = z;\r\n        this.vertexConstantData[index] = w;\r\n    };\r\n    ShaderBase.prototype.setVertexConstFromArray = function (index, data) {\r\n        index *= 4;\r\n        for (var i = 0; i < data.length; i++)\r\n            this.vertexConstantData[index++] = data[i];\r\n    };\r\n    ShaderBase.prototype.setVertexConstFromMatrix = function (index, matrix) {\r\n        index *= 4;\r\n        var rawData = matrix.rawData;\r\n        this.vertexConstantData[index++] = rawData[0];\r\n        this.vertexConstantData[index++] = rawData[4];\r\n        this.vertexConstantData[index++] = rawData[8];\r\n        this.vertexConstantData[index++] = rawData[12];\r\n        this.vertexConstantData[index++] = rawData[1];\r\n        this.vertexConstantData[index++] = rawData[5];\r\n        this.vertexConstantData[index++] = rawData[9];\r\n        this.vertexConstantData[index++] = rawData[13];\r\n        this.vertexConstantData[index++] = rawData[2];\r\n        this.vertexConstantData[index++] = rawData[6];\r\n        this.vertexConstantData[index++] = rawData[10];\r\n        this.vertexConstantData[index++] = rawData[14];\r\n        this.vertexConstantData[index++] = rawData[3];\r\n        this.vertexConstantData[index++] = rawData[7];\r\n        this.vertexConstantData[index++] = rawData[11];\r\n        this.vertexConstantData[index] = rawData[15];\r\n    };\r\n    ShaderBase.prototype.setFragmentConst = function (index, x, y, z, w) {\r\n        if (x === void 0) { x = 0; }\r\n        if (y === void 0) { y = 0; }\r\n        if (z === void 0) { z = 0; }\r\n        if (w === void 0) { w = 0; }\r\n        index *= 4;\r\n        this.fragmentConstantData[index++] = x;\r\n        this.fragmentConstantData[index++] = y;\r\n        this.fragmentConstantData[index++] = z;\r\n        this.fragmentConstantData[index] = w;\r\n    };\r\n    ShaderBase._abstractionClassPool = new Object();\r\n    return ShaderBase;\r\n}());\r\nexports.ShaderBase = ShaderBase;\r\n},{\"../shaders/compilers/CompilerBase\":\"awayjs-renderergl/lib/shaders/compilers/CompilerBase\",\"awayjs-core/lib/errors/ArgumentError\":undefined,\"awayjs-core/lib/image/BlendMode\":undefined,\"awayjs-stagegl/lib/base/ContextGLBlendFactor\":undefined,\"awayjs-stagegl/lib/base/ContextGLCompareMode\":undefined,\"awayjs-stagegl/lib/base/ContextGLTriangleFace\":undefined}],\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\":[function(require,module,exports){\n\"use strict\";\r\nvar RegisterPool_1 = require(\"../shaders/RegisterPool\");\r\nvar ShaderRegisterElement_1 = require(\"../shaders/ShaderRegisterElement\");\r\n/**\r\n * ShaderRegister Cache provides the usage management system for all registers during shading compilers.\r\n */\r\nvar ShaderRegisterCache = (function () {\r\n    /**\r\n     * Create a new ShaderRegisterCache object.\r\n     *\r\n     * @param profile The compatibility profile used by the renderer.\r\n     */\r\n    function ShaderRegisterCache(profile) {\r\n        this._numUsedVertexConstants = 0;\r\n        this._numUsedFragmentConstants = 0;\r\n        this._numUsedStreams = 0;\r\n        this._numUsedTextures = 0;\r\n        this._numUsedVaryings = 0;\r\n        this._profile = profile;\r\n        this.reset();\r\n    }\r\n    /**\r\n     * Resets all registers.\r\n     */\r\n    ShaderRegisterCache.prototype.reset = function () {\r\n        this._fragmentTempCache = new RegisterPool_1.RegisterPool(\"ft\", 8, false);\r\n        this._vertexTempCache = new RegisterPool_1.RegisterPool(\"vt\", 8, false);\r\n        this._varyingCache = new RegisterPool_1.RegisterPool(\"v\", 8);\r\n        this._textureCache = new RegisterPool_1.RegisterPool(\"fs\", 8);\r\n        this._vertexAttributesCache = new RegisterPool_1.RegisterPool(\"va\", 8);\r\n        this._fragmentConstantsCache = new RegisterPool_1.RegisterPool(\"fc\", 28);\r\n        this._vertexConstantsCache = new RegisterPool_1.RegisterPool(\"vc\", 128);\r\n        this._fragmentOutputRegister = new ShaderRegisterElement_1.ShaderRegisterElement(\"oc\", -1);\r\n        this._vertexOutputRegister = new ShaderRegisterElement_1.ShaderRegisterElement(\"op\", -1);\r\n        this._numUsedVertexConstants = 0;\r\n        this._numUsedStreams = 0;\r\n        this._numUsedTextures = 0;\r\n        this._numUsedVaryings = 0;\r\n        this._numUsedFragmentConstants = 0;\r\n    };\r\n    /**\r\n     * Disposes all resources used.\r\n     */\r\n    ShaderRegisterCache.prototype.dispose = function () {\r\n        this._fragmentTempCache.dispose();\r\n        this._vertexTempCache.dispose();\r\n        this._varyingCache.dispose();\r\n        this._fragmentConstantsCache.dispose();\r\n        this._vertexAttributesCache.dispose();\r\n        this._fragmentTempCache = null;\r\n        this._vertexTempCache = null;\r\n        this._varyingCache = null;\r\n        this._fragmentConstantsCache = null;\r\n        this._vertexAttributesCache = null;\r\n        this._fragmentOutputRegister = null;\r\n        this._vertexOutputRegister = null;\r\n    };\r\n    /**\r\n     * Marks a fragment temporary register as used, so it cannot be retrieved. The register won't be able to be used until removeUsage\r\n     * has been called usageCount times again.\r\n     * @param register The register to mark as used.\r\n     * @param usageCount The amount of usages to add.\r\n     */\r\n    ShaderRegisterCache.prototype.addFragmentTempUsages = function (register, usageCount) {\r\n        this._fragmentTempCache.addUsage(register, usageCount);\r\n    };\r\n    /**\r\n     * Removes a usage from a fragment temporary register. When usages reach 0, the register is freed again.\r\n     * @param register The register for which to remove a usage.\r\n     */\r\n    ShaderRegisterCache.prototype.removeFragmentTempUsage = function (register) {\r\n        this._fragmentTempCache.removeUsage(register);\r\n    };\r\n    /**\r\n     * Marks a vertex temporary register as used, so it cannot be retrieved. The register won't be able to be used\r\n     * until removeUsage has been called usageCount times again.\r\n     * @param register The register to mark as used.\r\n     * @param usageCount The amount of usages to add.\r\n     */\r\n    ShaderRegisterCache.prototype.addVertexTempUsages = function (register, usageCount) {\r\n        this._vertexTempCache.addUsage(register, usageCount);\r\n    };\r\n    /**\r\n     * Removes a usage from a vertex temporary register. When usages reach 0, the register is freed again.\r\n     * @param register The register for which to remove a usage.\r\n     */\r\n    ShaderRegisterCache.prototype.removeVertexTempUsage = function (register) {\r\n        this._vertexTempCache.removeUsage(register);\r\n    };\r\n    /**\r\n     * Retrieve an entire fragment temporary register that's still available. The register won't be able to be used until removeUsage\r\n     * has been called usageCount times again.\r\n     */\r\n    ShaderRegisterCache.prototype.getFreeFragmentVectorTemp = function () {\r\n        return this._fragmentTempCache.requestFreeVectorReg();\r\n    };\r\n    /**\r\n     * Retrieve a single component from a fragment temporary register that's still available.\r\n     */\r\n    ShaderRegisterCache.prototype.getFreeFragmentSingleTemp = function () {\r\n        return this._fragmentTempCache.requestFreeRegComponent();\r\n    };\r\n    /**\r\n     * Retrieve an available varying register\r\n     */\r\n    ShaderRegisterCache.prototype.getFreeVarying = function () {\r\n        ++this._numUsedVaryings;\r\n        return this._varyingCache.requestFreeVectorReg();\r\n    };\r\n    /**\r\n     * Retrieve an available fragment constant register\r\n     */\r\n    ShaderRegisterCache.prototype.getFreeFragmentConstant = function () {\r\n        ++this._numUsedFragmentConstants;\r\n        return this._fragmentConstantsCache.requestFreeVectorReg();\r\n    };\r\n    /**\r\n     * Retrieve an available vertex constant register\r\n     */\r\n    ShaderRegisterCache.prototype.getFreeVertexConstant = function () {\r\n        ++this._numUsedVertexConstants;\r\n        return this._vertexConstantsCache.requestFreeVectorReg();\r\n    };\r\n    /**\r\n     * Retrieve an entire vertex temporary register that's still available.\r\n     */\r\n    ShaderRegisterCache.prototype.getFreeVertexVectorTemp = function () {\r\n        return this._vertexTempCache.requestFreeVectorReg();\r\n    };\r\n    /**\r\n     * Retrieve a single component from a vertex temporary register that's still available.\r\n     */\r\n    ShaderRegisterCache.prototype.getFreeVertexSingleTemp = function () {\r\n        return this._vertexTempCache.requestFreeRegComponent();\r\n    };\r\n    /**\r\n     * Retrieve an available vertex attribute register\r\n     */\r\n    ShaderRegisterCache.prototype.getFreeVertexAttribute = function () {\r\n        ++this._numUsedStreams;\r\n        return this._vertexAttributesCache.requestFreeVectorReg();\r\n    };\r\n    /**\r\n     * Retrieve an available texture register\r\n     */\r\n    ShaderRegisterCache.prototype.getFreeTextureReg = function () {\r\n        ++this._numUsedTextures;\r\n        return this._textureCache.requestFreeVectorReg();\r\n    };\r\n    Object.defineProperty(ShaderRegisterCache.prototype, \"fragmentOutputRegister\", {\r\n        /**\r\n         * The fragment output register.\r\n         */\r\n        get: function () {\r\n            return this._fragmentOutputRegister;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ShaderRegisterCache.prototype, \"numUsedVertexConstants\", {\r\n        /**\r\n         * The amount of used vertex constant registers.\r\n         */\r\n        get: function () {\r\n            return this._numUsedVertexConstants;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ShaderRegisterCache.prototype, \"numUsedFragmentConstants\", {\r\n        /**\r\n         * The amount of used fragment constant registers.\r\n         */\r\n        get: function () {\r\n            return this._numUsedFragmentConstants;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ShaderRegisterCache.prototype, \"numUsedStreams\", {\r\n        /**\r\n         * The amount of used vertex streams.\r\n         */\r\n        get: function () {\r\n            return this._numUsedStreams;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ShaderRegisterCache.prototype, \"numUsedTextures\", {\r\n        /**\r\n         * The amount of used texture slots.\r\n         */\r\n        get: function () {\r\n            return this._numUsedTextures;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ShaderRegisterCache.prototype, \"numUsedVaryings\", {\r\n        /**\r\n         * The amount of used varying registers.\r\n         */\r\n        get: function () {\r\n            return this._numUsedVaryings;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return ShaderRegisterCache;\r\n}());\r\nexports.ShaderRegisterCache = ShaderRegisterCache;\r\n},{\"../shaders/RegisterPool\":\"awayjs-renderergl/lib/shaders/RegisterPool\",\"../shaders/ShaderRegisterElement\":\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\"}],\"awayjs-renderergl/lib/shaders/ShaderRegisterData\":[function(require,module,exports){\n\"use strict\";\r\n/**\r\n * ShaderRegisterData contains the \"named\" registers, generated by the compiler and to be passed on to the methods.\r\n */\r\nvar ShaderRegisterData = (function () {\r\n    function ShaderRegisterData() {\r\n        this.textures = new Array();\r\n        this.animatableAttributes = new Array();\r\n        this.animationTargetRegisters = new Array();\r\n    }\r\n    return ShaderRegisterData;\r\n}());\r\nexports.ShaderRegisterData = ShaderRegisterData;\r\n},{}],\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\":[function(require,module,exports){\n\"use strict\";\r\n/**\r\n * A single register element (an entire register or a single register's component) used by the RegisterPool.\r\n */\r\nvar ShaderRegisterElement = (function () {\r\n    /**\r\n     * Creates a new ShaderRegisterElement object.\r\n     *\r\n     * @param regName The name of the register.\r\n     * @param index The index of the register.\r\n     * @param component The register's component, if not the entire register is represented.\r\n     */\r\n    function ShaderRegisterElement(regName, index, component) {\r\n        if (component === void 0) { component = -1; }\r\n        this._component = component;\r\n        this._regName = regName;\r\n        this._index = index;\r\n        this._toStr = this._regName;\r\n        if (this._index >= 0)\r\n            this._toStr += this._index;\r\n        if (component > -1)\r\n            this._toStr += \".\" + ShaderRegisterElement.COMPONENTS[component];\r\n    }\r\n    /**\r\n     * Converts the register or the components AGAL string representation.\r\n     */\r\n    ShaderRegisterElement.prototype.toString = function () {\r\n        return this._toStr;\r\n    };\r\n    Object.defineProperty(ShaderRegisterElement.prototype, \"regName\", {\r\n        /**\r\n         * The register's name.\r\n         */\r\n        get: function () {\r\n            return this._regName;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ShaderRegisterElement.prototype, \"index\", {\r\n        /**\r\n         * The register's index.\r\n         */\r\n        get: function () {\r\n            return this._index;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ShaderRegisterElement.COMPONENTS = [\"x\", \"y\", \"z\", \"w\"];\r\n    return ShaderRegisterElement;\r\n}());\r\nexports.ShaderRegisterElement = ShaderRegisterElement;\r\n},{}],\"awayjs-renderergl/lib/shaders/compilers/CompilerBase\":[function(require,module,exports){\n\"use strict\";\r\nvar ShaderRegisterCache_1 = require(\"../../shaders/ShaderRegisterCache\");\r\nvar ShaderRegisterData_1 = require(\"../../shaders/ShaderRegisterData\");\r\n/**\r\n * CompilerBase is an abstract base class for shader compilers that use modular shader methods to assemble a\r\n * material. Concrete subclasses are used by the default materials.\r\n *\r\n * @see away.materials.ShadingMethodBase\r\n */\r\nvar CompilerBase = (function () {\r\n    /**\r\n     * Creates a new CompilerBase object.\r\n     * @param profile The compatibility profile of the renderer.\r\n     */\r\n    function CompilerBase(elementsClass, pass, shader) {\r\n        this._pVertexCode = ''; // Changed to emtpy string- AwayTS\r\n        this._pFragmentCode = ''; // Changed to emtpy string - AwayTS\r\n        this._pPostAnimationFragmentCode = ''; // Changed to emtpy string - AwayTS\r\n        this._pElementsClass = elementsClass;\r\n        this._pRenderPass = pass;\r\n        this._pShader = shader;\r\n        this._pSharedRegisters = new ShaderRegisterData_1.ShaderRegisterData();\r\n        this._pRegisterCache = new ShaderRegisterCache_1.ShaderRegisterCache(shader.profile);\r\n    }\r\n    /**\r\n     * Compiles the code after all setup on the compiler has finished.\r\n     */\r\n    CompilerBase.prototype.compile = function () {\r\n        this._pShader.reset();\r\n        this._pShader._iIncludeDependencies();\r\n        this.pInitRegisterIndices();\r\n        this.pCompileDependencies();\r\n        //compile custom vertex & fragment codes\r\n        this._pVertexCode += this._pRenderPass._iGetVertexCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\r\n        this._pPostAnimationFragmentCode += this._pRenderPass._iGetFragmentCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\r\n        if (this._pShader.usesColorTransform)\r\n            this.compileColorTransformCode();\r\n        else\r\n            this._pShader.colorTransformIndex = -1;\r\n        //assign the final output color to the output register\r\n        this._pPostAnimationFragmentCode += \"mov \" + this._pRegisterCache.fragmentOutputRegister + \", \" + this._pSharedRegisters.shadedTarget + \"\\n\";\r\n        this._pRegisterCache.removeFragmentTempUsage(this._pSharedRegisters.shadedTarget);\r\n    };\r\n    /**\r\n     * Calculate the transformed colours\r\n     */\r\n    CompilerBase.prototype.compileColorTransformCode = function () {\r\n        // rm, gm, bm, am - multiplier\r\n        // ro, go, bo, ao - offset\r\n        var ct1 = this._pRegisterCache.getFreeFragmentConstant();\r\n        var ct2 = this._pRegisterCache.getFreeFragmentConstant();\r\n        this._pShader.colorTransformIndex = ct1.index * 4;\r\n        this._pPostAnimationFragmentCode += \"mul \" + this._pSharedRegisters.shadedTarget + \", \" + this._pSharedRegisters.shadedTarget + \", \" + ct1 + \"\\n\";\r\n        this._pPostAnimationFragmentCode += \"add \" + this._pSharedRegisters.shadedTarget + \", \" + this._pSharedRegisters.shadedTarget + \", \" + ct2 + \"\\n\";\r\n    };\r\n    /**\r\n     * Compile the code for the methods.\r\n     */\r\n    CompilerBase.prototype.pCompileDependencies = function () {\r\n        this._pSharedRegisters.shadedTarget = this._pRegisterCache.getFreeFragmentVectorTemp();\r\n        this._pRegisterCache.addFragmentTempUsages(this._pSharedRegisters.shadedTarget, 1);\r\n        //compile the world-space position if required\r\n        if (this._pShader.globalPosDependencies > 0)\r\n            this.compileGlobalPositionCode();\r\n        //compile the local-space position if required\r\n        if (this._pShader.usesPositionFragment)\r\n            this.compilePositionCode();\r\n        if (this._pShader.usesCurves)\r\n            this.compileCurvesCode();\r\n        //Calculate the (possibly animated) UV coordinates.\r\n        if (this._pShader.uvDependencies > 0)\r\n            this.compileUVCode();\r\n        if (this._pShader.secondaryUVDependencies > 0)\r\n            this.compileSecondaryUVCode();\r\n        if (this._pShader.normalDependencies > 0)\r\n            this.compileNormalCode();\r\n        if (this._pShader.viewDirDependencies > 0)\r\n            this.compileViewDirCode();\r\n        //collect code from material\r\n        this._pVertexCode += this._pElementsClass._iGetVertexCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\r\n        this._pFragmentCode += this._pElementsClass._iGetFragmentCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\r\n        //collect code from pass\r\n        this._pVertexCode += this._pRenderPass._iGetPreLightingVertexCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\r\n        this._pFragmentCode += this._pRenderPass._iGetPreLightingFragmentCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\r\n    };\r\n    CompilerBase.prototype.compileGlobalPositionCode = function () {\r\n        this._pRegisterCache.addVertexTempUsages(this._pSharedRegisters.globalPositionVertex = this._pRegisterCache.getFreeVertexVectorTemp(), this._pShader.globalPosDependencies);\r\n        var sceneMatrixReg = this._pRegisterCache.getFreeVertexConstant();\r\n        this._pRegisterCache.getFreeVertexConstant();\r\n        this._pRegisterCache.getFreeVertexConstant();\r\n        this._pRegisterCache.getFreeVertexConstant();\r\n        this._pShader.sceneMatrixIndex = sceneMatrixReg.index * 4;\r\n        this._pVertexCode += \"m44 \" + this._pSharedRegisters.globalPositionVertex + \", \" + this._pSharedRegisters.animatedPosition + \", \" + sceneMatrixReg + \"\\n\";\r\n        if (this._pShader.usesGlobalPosFragment) {\r\n            this._pSharedRegisters.globalPositionVarying = this._pRegisterCache.getFreeVarying();\r\n            this._pVertexCode += \"mov \" + this._pSharedRegisters.globalPositionVarying + \", \" + this._pSharedRegisters.globalPositionVertex + \"\\n\";\r\n        }\r\n    };\r\n    CompilerBase.prototype.compilePositionCode = function () {\r\n        this._pSharedRegisters.positionVarying = this._pRegisterCache.getFreeVarying();\r\n        this._pVertexCode += \"mov \" + this._pSharedRegisters.positionVarying + \", \" + this._pSharedRegisters.animatedPosition + \"\\n\";\r\n    };\r\n    CompilerBase.prototype.compileCurvesCode = function () {\r\n        this._pSharedRegisters.curvesInput = this._pRegisterCache.getFreeVertexAttribute();\r\n        this._pShader.curvesIndex = this._pSharedRegisters.curvesInput.index;\r\n        this._pSharedRegisters.curvesVarying = this._pRegisterCache.getFreeVarying();\r\n        this._pVertexCode += \"mov \" + this._pSharedRegisters.curvesVarying + \", \" + this._pSharedRegisters.curvesInput + \"\\n\";\r\n        var temp = this._pRegisterCache.getFreeFragmentSingleTemp();\r\n        this._pFragmentCode += \"mul \" + temp + \", \" + this._pSharedRegisters.curvesVarying + \".y, \" + this._pSharedRegisters.curvesVarying + \".y\\n\" +\r\n            \"sub \" + temp + \", \" + temp + \", \" + this._pSharedRegisters.curvesVarying + \".z\\n\" +\r\n            \"mul \" + temp + \", \" + temp + \", \" + this._pSharedRegisters.curvesVarying + \".x\\n\" +\r\n            \"kil \" + temp + \"\\n\";\r\n    };\r\n    /**\r\n     * Calculate the (possibly animated) UV coordinates.\r\n     */\r\n    CompilerBase.prototype.compileUVCode = function () {\r\n        var uvAttributeReg = this._pRegisterCache.getFreeVertexAttribute();\r\n        this._pShader.uvIndex = uvAttributeReg.index;\r\n        var varying = this._pSharedRegisters.uvVarying = this._pRegisterCache.getFreeVarying();\r\n        if (this._pShader.usesUVTransform) {\r\n            // a, b, 0, tx\r\n            // c, d, 0, ty\r\n            var uvTransform1 = this._pRegisterCache.getFreeVertexConstant();\r\n            var uvTransform2 = this._pRegisterCache.getFreeVertexConstant();\r\n            this._pShader.uvMatrixIndex = uvTransform1.index * 4;\r\n            this._pVertexCode += \"dp4 \" + varying + \".x, \" + uvAttributeReg + \", \" + uvTransform1 + \"\\n\" +\r\n                \"dp4 \" + varying + \".y, \" + uvAttributeReg + \", \" + uvTransform2 + \"\\n\" +\r\n                \"mov \" + varying + \".zw, \" + uvAttributeReg + \".zw \\n\";\r\n        }\r\n        else {\r\n            this._pShader.uvMatrixIndex = -1;\r\n            this._pSharedRegisters.uvTarget = varying;\r\n            this._pSharedRegisters.uvSource = uvAttributeReg;\r\n        }\r\n    };\r\n    /**\r\n     * Provide the secondary UV coordinates.\r\n     */\r\n    CompilerBase.prototype.compileSecondaryUVCode = function () {\r\n        var uvAttributeReg = this._pRegisterCache.getFreeVertexAttribute();\r\n        this._pShader.secondaryUVIndex = uvAttributeReg.index;\r\n        this._pSharedRegisters.secondaryUVVarying = this._pRegisterCache.getFreeVarying();\r\n        this._pVertexCode += \"mov \" + this._pSharedRegisters.secondaryUVVarying + \", \" + uvAttributeReg + \"\\n\";\r\n    };\r\n    /**\r\n     * Calculate the view direction.\r\n     */\r\n    CompilerBase.prototype.compileViewDirCode = function () {\r\n        var cameraPositionReg = this._pRegisterCache.getFreeVertexConstant();\r\n        this._pSharedRegisters.viewDirVarying = this._pRegisterCache.getFreeVarying();\r\n        this._pSharedRegisters.viewDirFragment = this._pRegisterCache.getFreeFragmentVectorTemp();\r\n        this._pRegisterCache.addFragmentTempUsages(this._pSharedRegisters.viewDirFragment, this._pShader.viewDirDependencies);\r\n        this._pShader.cameraPositionIndex = cameraPositionReg.index * 4;\r\n        if (this._pShader.usesTangentSpace) {\r\n            var temp = this._pRegisterCache.getFreeVertexVectorTemp();\r\n            this._pVertexCode += \"sub \" + temp + \", \" + cameraPositionReg + \", \" + this._pSharedRegisters.animatedPosition + \"\\n\" +\r\n                \"m33 \" + this._pSharedRegisters.viewDirVarying + \".xyz, \" + temp + \", \" + this._pSharedRegisters.animatedTangent + \"\\n\" +\r\n                \"mov \" + this._pSharedRegisters.viewDirVarying + \".w, \" + this._pSharedRegisters.animatedPosition + \".w\\n\";\r\n        }\r\n        else {\r\n            this._pVertexCode += \"sub \" + this._pSharedRegisters.viewDirVarying + \", \" + cameraPositionReg + \", \" + this._pSharedRegisters.globalPositionVertex + \"\\n\";\r\n            this._pRegisterCache.removeVertexTempUsage(this._pSharedRegisters.globalPositionVertex);\r\n        }\r\n        //TODO is this required in all cases? (re: distancemappass)\r\n        this._pFragmentCode += \"nrm \" + this._pSharedRegisters.viewDirFragment + \".xyz, \" + this._pSharedRegisters.viewDirVarying + \"\\n\" +\r\n            \"mov \" + this._pSharedRegisters.viewDirFragment + \".w,   \" + this._pSharedRegisters.viewDirVarying + \".w\\n\";\r\n    };\r\n    /**\r\n     * Calculate the normal.\r\n     */\r\n    CompilerBase.prototype.compileNormalCode = function () {\r\n        this._pSharedRegisters.normalFragment = this._pRegisterCache.getFreeFragmentVectorTemp();\r\n        this._pRegisterCache.addFragmentTempUsages(this._pSharedRegisters.normalFragment, this._pShader.normalDependencies);\r\n        //simple normal aquisition if no tangent space is being used\r\n        if (this._pShader.outputsNormals && !this._pShader.outputsTangentNormals) {\r\n            this._pVertexCode += this._pRenderPass._iGetNormalVertexCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\r\n            this._pFragmentCode += this._pRenderPass._iGetNormalFragmentCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\r\n            return;\r\n        }\r\n        var normalMatrix;\r\n        if (!this._pShader.outputsNormals || !this._pShader.usesTangentSpace) {\r\n            normalMatrix = new Array(3);\r\n            normalMatrix[0] = this._pRegisterCache.getFreeVertexConstant();\r\n            normalMatrix[1] = this._pRegisterCache.getFreeVertexConstant();\r\n            normalMatrix[2] = this._pRegisterCache.getFreeVertexConstant();\r\n            this._pRegisterCache.getFreeVertexConstant();\r\n            this._pShader.sceneNormalMatrixIndex = normalMatrix[0].index * 4;\r\n            this._pSharedRegisters.normalVarying = this._pRegisterCache.getFreeVarying();\r\n        }\r\n        if (this._pShader.outputsNormals) {\r\n            if (this._pShader.usesTangentSpace) {\r\n                // normalize normal + tangent vector and generate (approximated) bitangent used in m33 operation for view\r\n                this._pVertexCode += \"nrm \" + this._pSharedRegisters.animatedNormal + \".xyz, \" + this._pSharedRegisters.animatedNormal + \"\\n\" +\r\n                    \"nrm \" + this._pSharedRegisters.animatedTangent + \".xyz, \" + this._pSharedRegisters.animatedTangent + \"\\n\" +\r\n                    \"crs \" + this._pSharedRegisters.bitangent + \".xyz, \" + this._pSharedRegisters.animatedNormal + \", \" + this._pSharedRegisters.animatedTangent + \"\\n\";\r\n                this._pFragmentCode += this._pRenderPass._iGetNormalFragmentCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\r\n            }\r\n            else {\r\n                //Compiles the vertex shader code for tangent-space normal maps.\r\n                this._pSharedRegisters.tangentVarying = this._pRegisterCache.getFreeVarying();\r\n                this._pSharedRegisters.bitangentVarying = this._pRegisterCache.getFreeVarying();\r\n                var temp = this._pRegisterCache.getFreeVertexVectorTemp();\r\n                this._pVertexCode += \"m33 \" + temp + \".xyz, \" + this._pSharedRegisters.animatedNormal + \", \" + normalMatrix[0] + \"\\n\" +\r\n                    \"nrm \" + this._pSharedRegisters.animatedNormal + \".xyz, \" + temp + \"\\n\" +\r\n                    \"m33 \" + temp + \".xyz, \" + this._pSharedRegisters.animatedTangent + \", \" + normalMatrix[0] + \"\\n\" +\r\n                    \"nrm \" + this._pSharedRegisters.animatedTangent + \".xyz, \" + temp + \"\\n\" +\r\n                    \"mov \" + this._pSharedRegisters.tangentVarying + \".x, \" + this._pSharedRegisters.animatedTangent + \".x  \\n\" +\r\n                    \"mov \" + this._pSharedRegisters.tangentVarying + \".z, \" + this._pSharedRegisters.animatedNormal + \".x  \\n\" +\r\n                    \"mov \" + this._pSharedRegisters.tangentVarying + \".w, \" + this._pSharedRegisters.normalInput + \".w  \\n\" +\r\n                    \"mov \" + this._pSharedRegisters.bitangentVarying + \".x, \" + this._pSharedRegisters.animatedTangent + \".y  \\n\" +\r\n                    \"mov \" + this._pSharedRegisters.bitangentVarying + \".z, \" + this._pSharedRegisters.animatedNormal + \".y  \\n\" +\r\n                    \"mov \" + this._pSharedRegisters.bitangentVarying + \".w, \" + this._pSharedRegisters.normalInput + \".w  \\n\" +\r\n                    \"mov \" + this._pSharedRegisters.normalVarying + \".x, \" + this._pSharedRegisters.animatedTangent + \".z  \\n\" +\r\n                    \"mov \" + this._pSharedRegisters.normalVarying + \".z, \" + this._pSharedRegisters.animatedNormal + \".z  \\n\" +\r\n                    \"mov \" + this._pSharedRegisters.normalVarying + \".w, \" + this._pSharedRegisters.normalInput + \".w  \\n\" +\r\n                    \"crs \" + temp + \".xyz, \" + this._pSharedRegisters.animatedNormal + \", \" + this._pSharedRegisters.animatedTangent + \"\\n\" +\r\n                    \"mov \" + this._pSharedRegisters.tangentVarying + \".y, \" + temp + \".x    \\n\" +\r\n                    \"mov \" + this._pSharedRegisters.bitangentVarying + \".y, \" + temp + \".y  \\n\" +\r\n                    \"mov \" + this._pSharedRegisters.normalVarying + \".y, \" + temp + \".z    \\n\";\r\n                this._pRegisterCache.removeVertexTempUsage(this._pSharedRegisters.animatedTangent);\r\n                //Compiles the fragment shader code for tangent-space normal maps.\r\n                var t;\r\n                var b;\r\n                var n;\r\n                t = this._pRegisterCache.getFreeFragmentVectorTemp();\r\n                this._pRegisterCache.addFragmentTempUsages(t, 1);\r\n                b = this._pRegisterCache.getFreeFragmentVectorTemp();\r\n                this._pRegisterCache.addFragmentTempUsages(b, 1);\r\n                n = this._pRegisterCache.getFreeFragmentVectorTemp();\r\n                this._pRegisterCache.addFragmentTempUsages(n, 1);\r\n                this._pFragmentCode += \"nrm \" + t + \".xyz, \" + this._pSharedRegisters.tangentVarying + \"\\n\" +\r\n                    \"mov \" + t + \".w, \" + this._pSharedRegisters.tangentVarying + \".w\t\\n\" +\r\n                    \"nrm \" + b + \".xyz, \" + this._pSharedRegisters.bitangentVarying + \"\\n\" +\r\n                    \"nrm \" + n + \".xyz, \" + this._pSharedRegisters.normalVarying + \"\\n\";\r\n                //compile custom fragment code for normal calcs\r\n                this._pFragmentCode += this._pRenderPass._iGetNormalFragmentCode(this._pShader, this._pRegisterCache, this._pSharedRegisters) +\r\n                    \"m33 \" + this._pSharedRegisters.normalFragment + \".xyz, \" + this._pSharedRegisters.normalFragment + \", \" + t + \"\\n\" +\r\n                    \"mov \" + this._pSharedRegisters.normalFragment + \".w, \" + this._pSharedRegisters.normalVarying + \".w\\n\";\r\n                this._pRegisterCache.removeFragmentTempUsage(b);\r\n                this._pRegisterCache.removeFragmentTempUsage(t);\r\n                this._pRegisterCache.removeFragmentTempUsage(n);\r\n            }\r\n        }\r\n        else {\r\n            // no output, world space is enough\r\n            this._pVertexCode += \"m33 \" + this._pSharedRegisters.normalVarying + \".xyz, \" + this._pSharedRegisters.animatedNormal + \", \" + normalMatrix[0] + \"\\n\" +\r\n                \"mov \" + this._pSharedRegisters.normalVarying + \".w, \" + this._pSharedRegisters.animatedNormal + \".w\\n\";\r\n            this._pFragmentCode += \"nrm \" + this._pSharedRegisters.normalFragment + \".xyz, \" + this._pSharedRegisters.normalVarying + \"\\n\" +\r\n                \"mov \" + this._pSharedRegisters.normalFragment + \".w, \" + this._pSharedRegisters.normalVarying + \".w\\n\";\r\n            if (this._pShader.tangentDependencies > 0) {\r\n                this._pSharedRegisters.tangentVarying = this._pRegisterCache.getFreeVarying();\r\n                this._pVertexCode += \"m33 \" + this._pSharedRegisters.tangentVarying + \".xyz, \" + this._pSharedRegisters.animatedTangent + \", \" + normalMatrix[0] + \"\\n\" +\r\n                    \"mov \" + this._pSharedRegisters.tangentVarying + \".w, \" + this._pSharedRegisters.animatedTangent + \".w\\n\";\r\n            }\r\n        }\r\n        if (!this._pShader.usesTangentSpace)\r\n            this._pRegisterCache.removeVertexTempUsage(this._pSharedRegisters.animatedNormal);\r\n    };\r\n    /**\r\n     * Reset all the indices to \"unused\".\r\n     */\r\n    CompilerBase.prototype.pInitRegisterIndices = function () {\r\n        this._pShader.pInitRegisterIndices();\r\n        this._pSharedRegisters.animatedPosition = this._pRegisterCache.getFreeVertexVectorTemp();\r\n        this._pRegisterCache.addVertexTempUsages(this._pSharedRegisters.animatedPosition, 1);\r\n        this._pSharedRegisters.animatableAttributes.push(this._pRegisterCache.getFreeVertexAttribute());\r\n        this._pSharedRegisters.animationTargetRegisters.push(this._pSharedRegisters.animatedPosition);\r\n        this._pVertexCode = \"\";\r\n        this._pFragmentCode = \"\";\r\n        this._pPostAnimationFragmentCode = \"\";\r\n        //create commonly shared constant registers\r\n        if (this._pShader.usesCommonData || this._pShader.normalDependencies > 0) {\r\n            this._pSharedRegisters.commons = this._pRegisterCache.getFreeFragmentConstant();\r\n            this._pShader.commonsDataIndex = this._pSharedRegisters.commons.index * 4;\r\n        }\r\n        //Creates the registers to contain the tangent data.\r\n        //Needs to be created FIRST and in this order (for when using tangent space)\r\n        if (this._pShader.tangentDependencies > 0 || this._pShader.outputsNormals) {\r\n            this._pSharedRegisters.tangentInput = this._pRegisterCache.getFreeVertexAttribute();\r\n            this._pShader.tangentIndex = this._pSharedRegisters.tangentInput.index;\r\n            this._pSharedRegisters.animatedTangent = this._pRegisterCache.getFreeVertexVectorTemp();\r\n            this._pRegisterCache.addVertexTempUsages(this._pSharedRegisters.animatedTangent, 1);\r\n            if (this._pShader.usesTangentSpace) {\r\n                this._pSharedRegisters.bitangent = this._pRegisterCache.getFreeVertexVectorTemp();\r\n                this._pRegisterCache.addVertexTempUsages(this._pSharedRegisters.bitangent, 1);\r\n            }\r\n            this._pSharedRegisters.animatableAttributes.push(this._pSharedRegisters.tangentInput);\r\n            this._pSharedRegisters.animationTargetRegisters.push(this._pSharedRegisters.animatedTangent);\r\n        }\r\n        if (this._pShader.normalDependencies > 0) {\r\n            this._pSharedRegisters.normalInput = this._pRegisterCache.getFreeVertexAttribute();\r\n            this._pShader.normalIndex = this._pSharedRegisters.normalInput.index;\r\n            this._pSharedRegisters.animatedNormal = this._pRegisterCache.getFreeVertexVectorTemp();\r\n            this._pRegisterCache.addVertexTempUsages(this._pSharedRegisters.animatedNormal, 1);\r\n            this._pSharedRegisters.animatableAttributes.push(this._pSharedRegisters.normalInput);\r\n            this._pSharedRegisters.animationTargetRegisters.push(this._pSharedRegisters.animatedNormal);\r\n        }\r\n        if (this._pShader.colorDependencies > 0) {\r\n            this._pSharedRegisters.colorInput = this._pRegisterCache.getFreeVertexAttribute();\r\n            this._pShader.colorBufferIndex = this._pSharedRegisters.colorInput.index;\r\n            this._pSharedRegisters.colorVarying = this._pRegisterCache.getFreeVarying();\r\n            this._pVertexCode += \"mov \" + this._pSharedRegisters.colorVarying + \", \" + this._pSharedRegisters.colorInput + \"\\n\";\r\n        }\r\n    };\r\n    /**\r\n     * Disposes all resources used by the compiler.\r\n     */\r\n    CompilerBase.prototype.dispose = function () {\r\n        this._pRegisterCache.dispose();\r\n        this._pRegisterCache = null;\r\n        this._pSharedRegisters = null;\r\n    };\r\n    Object.defineProperty(CompilerBase.prototype, \"vertexCode\", {\r\n        /**\r\n         * The generated vertex code.\r\n         */\r\n        get: function () {\r\n            return this._pVertexCode;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CompilerBase.prototype, \"fragmentCode\", {\r\n        /**\r\n         * The generated fragment code.\r\n         */\r\n        get: function () {\r\n            return this._pFragmentCode;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CompilerBase.prototype, \"postAnimationFragmentCode\", {\r\n        /**\r\n         * The generated fragment code.\r\n         */\r\n        get: function () {\r\n            return this._pPostAnimationFragmentCode;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CompilerBase.prototype, \"shadedTarget\", {\r\n        /**\r\n         * The register containing the final shaded colour.\r\n         */\r\n        get: function () {\r\n            return this._pSharedRegisters.shadedTarget;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return CompilerBase;\r\n}());\r\nexports.CompilerBase = CompilerBase;\r\n},{\"../../shaders/ShaderRegisterCache\":\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\",\"../../shaders/ShaderRegisterData\":\"awayjs-renderergl/lib/shaders/ShaderRegisterData\"}],\"awayjs-renderergl/lib/shaders/compilers/LightingCompiler\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar CompilerBase_1 = require(\"../../shaders/compilers/CompilerBase\");\r\n/**\r\n * CompilerBase is an abstract base class for shader compilers that use modular shader methods to assemble a\r\n * material. Concrete subclasses are used by the default materials.\r\n *\r\n * @see away.materials.ShadingMethodBase\r\n */\r\nvar LightingCompiler = (function (_super) {\r\n    __extends(LightingCompiler, _super);\r\n    /**\r\n     * Creates a new CompilerBase object.\r\n     * @param profile The compatibility profile of the renderer.\r\n     */\r\n    function LightingCompiler(elementsClass, lightingPass, shaderLightingObject) {\r\n        _super.call(this, elementsClass, lightingPass, shaderLightingObject);\r\n        this._shaderLightingObject = shaderLightingObject;\r\n        this._lightingPass = lightingPass;\r\n    }\r\n    /**\r\n     * Compile the code for the methods.\r\n     */\r\n    LightingCompiler.prototype.pCompileDependencies = function () {\r\n        _super.prototype.pCompileDependencies.call(this);\r\n        //compile the lighting code\r\n        if (this._shaderLightingObject.usesShadows)\r\n            this.pCompileShadowCode();\r\n        if (this._shaderLightingObject.usesLights) {\r\n            this.initLightRegisters();\r\n            this.compileLightCode();\r\n        }\r\n        if (this._shaderLightingObject.usesProbes)\r\n            this.compileLightProbeCode();\r\n        this._pVertexCode += this._lightingPass._iGetPostLightingVertexCode(this._shaderLightingObject, this._pRegisterCache, this._pSharedRegisters);\r\n        this._pFragmentCode += this._lightingPass._iGetPostLightingFragmentCode(this._shaderLightingObject, this._pRegisterCache, this._pSharedRegisters);\r\n    };\r\n    /**\r\n     * Provides the code to provide shadow mapping.\r\n     */\r\n    LightingCompiler.prototype.pCompileShadowCode = function () {\r\n        if (this._shaderLightingObject.normalDependencies > 0) {\r\n            this._pSharedRegisters.shadowTarget = this._pSharedRegisters.normalFragment;\r\n        }\r\n        else {\r\n            this._pSharedRegisters.shadowTarget = this._pRegisterCache.getFreeFragmentVectorTemp();\r\n            this._pRegisterCache.addFragmentTempUsages(this._pSharedRegisters.shadowTarget, 1);\r\n        }\r\n    };\r\n    /**\r\n     * Initializes constant registers to contain light data.\r\n     */\r\n    LightingCompiler.prototype.initLightRegisters = function () {\r\n        // init these first so we're sure they're in sequence\r\n        var i, len;\r\n        if (this._dirLightVertexConstants) {\r\n            len = this._dirLightVertexConstants.length;\r\n            for (i = 0; i < len; ++i) {\r\n                this._dirLightVertexConstants[i] = this._pRegisterCache.getFreeVertexConstant();\r\n                if (this._shaderLightingObject.lightVertexConstantIndex == -1)\r\n                    this._shaderLightingObject.lightVertexConstantIndex = this._dirLightVertexConstants[i].index * 4;\r\n            }\r\n        }\r\n        if (this._pointLightVertexConstants) {\r\n            len = this._pointLightVertexConstants.length;\r\n            for (i = 0; i < len; ++i) {\r\n                this._pointLightVertexConstants[i] = this._pRegisterCache.getFreeVertexConstant();\r\n                if (this._shaderLightingObject.lightVertexConstantIndex == -1)\r\n                    this._shaderLightingObject.lightVertexConstantIndex = this._pointLightVertexConstants[i].index * 4;\r\n            }\r\n        }\r\n        len = this._dirLightFragmentConstants.length;\r\n        for (i = 0; i < len; ++i) {\r\n            this._dirLightFragmentConstants[i] = this._pRegisterCache.getFreeFragmentConstant();\r\n            if (this._shaderLightingObject.lightFragmentConstantIndex == -1)\r\n                this._shaderLightingObject.lightFragmentConstantIndex = this._dirLightFragmentConstants[i].index * 4;\r\n        }\r\n        len = this._pointLightFragmentConstants.length;\r\n        for (i = 0; i < len; ++i) {\r\n            this._pointLightFragmentConstants[i] = this._pRegisterCache.getFreeFragmentConstant();\r\n            if (this._shaderLightingObject.lightFragmentConstantIndex == -1)\r\n                this._shaderLightingObject.lightFragmentConstantIndex = this._pointLightFragmentConstants[i].index * 4;\r\n        }\r\n    };\r\n    /**\r\n     * Compiles the shading code for directional and point lights.\r\n     */\r\n    LightingCompiler.prototype.compileLightCode = function () {\r\n        var diffuseColorReg;\r\n        var specularColorReg;\r\n        var lightPosReg;\r\n        var lightDirReg;\r\n        var vertexRegIndex = 0;\r\n        var fragmentRegIndex = 0;\r\n        var addSpec = this._shaderLightingObject.usesLightsForSpecular;\r\n        var addDiff = this._shaderLightingObject.usesLightsForDiffuse;\r\n        //compile the shading code for directional lights.\r\n        for (var i = 0; i < this._shaderLightingObject.numDirectionalLights; ++i) {\r\n            if (this._shaderLightingObject.usesTangentSpace) {\r\n                lightDirReg = this._dirLightVertexConstants[vertexRegIndex++];\r\n                var lightVarying = this._pRegisterCache.getFreeVarying();\r\n                this._pVertexCode += \"m33 \" + lightVarying + \".xyz, \" + lightDirReg + \", \" + this._pSharedRegisters.animatedTangent + \"\\n\" +\r\n                    \"mov \" + lightVarying + \".w, \" + lightDirReg + \".w\\n\";\r\n                lightDirReg = this._pRegisterCache.getFreeFragmentVectorTemp();\r\n                this._pRegisterCache.addVertexTempUsages(lightDirReg, 1);\r\n                this._pFragmentCode += \"nrm \" + lightDirReg + \".xyz, \" + lightVarying + \"\\n\" +\r\n                    \"mov \" + lightDirReg + \".w, \" + lightVarying + \".w\\n\";\r\n            }\r\n            else {\r\n                lightDirReg = this._dirLightFragmentConstants[fragmentRegIndex++];\r\n            }\r\n            diffuseColorReg = this._dirLightFragmentConstants[fragmentRegIndex++];\r\n            specularColorReg = this._dirLightFragmentConstants[fragmentRegIndex++];\r\n            if (addDiff)\r\n                this._pFragmentCode += this._lightingPass._iGetPerLightDiffuseFragmentCode(this._shaderLightingObject, lightDirReg, diffuseColorReg, this._pRegisterCache, this._pSharedRegisters);\r\n            if (addSpec)\r\n                this._pFragmentCode += this._lightingPass._iGetPerLightSpecularFragmentCode(this._shaderLightingObject, lightDirReg, specularColorReg, this._pRegisterCache, this._pSharedRegisters);\r\n            if (this._shaderLightingObject.usesTangentSpace)\r\n                this._pRegisterCache.removeVertexTempUsage(lightDirReg);\r\n        }\r\n        vertexRegIndex = 0;\r\n        fragmentRegIndex = 0;\r\n        //compile the shading code for point lights\r\n        for (var i = 0; i < this._shaderLightingObject.numPointLights; ++i) {\r\n            if (this._shaderLightingObject.usesTangentSpace || !this._shaderLightingObject.usesGlobalPosFragment)\r\n                lightPosReg = this._pointLightVertexConstants[vertexRegIndex++];\r\n            else\r\n                lightPosReg = this._pointLightFragmentConstants[fragmentRegIndex++];\r\n            diffuseColorReg = this._pointLightFragmentConstants[fragmentRegIndex++];\r\n            specularColorReg = this._pointLightFragmentConstants[fragmentRegIndex++];\r\n            lightDirReg = this._pRegisterCache.getFreeFragmentVectorTemp();\r\n            this._pRegisterCache.addFragmentTempUsages(lightDirReg, 1);\r\n            var lightVarying;\r\n            if (this._shaderLightingObject.usesTangentSpace) {\r\n                lightVarying = this._pRegisterCache.getFreeVarying();\r\n                var temp = this._pRegisterCache.getFreeVertexVectorTemp();\r\n                this._pVertexCode += \"sub \" + temp + \", \" + lightPosReg + \", \" + this._pSharedRegisters.animatedPosition + \"\\n\" +\r\n                    \"m33 \" + lightVarying + \".xyz, \" + temp + \", \" + this._pSharedRegisters.animatedTangent + \"\\n\" +\r\n                    \"mov \" + lightVarying + \".w, \" + this._pSharedRegisters.animatedPosition + \".w\\n\";\r\n            }\r\n            else if (!this._shaderLightingObject.usesGlobalPosFragment) {\r\n                lightVarying = this._pRegisterCache.getFreeVarying();\r\n                this._pVertexCode += \"sub \" + lightVarying + \", \" + lightPosReg + \", \" + this._pSharedRegisters.globalPositionVertex + \"\\n\";\r\n            }\r\n            else {\r\n                lightVarying = lightDirReg;\r\n                this._pFragmentCode += \"sub \" + lightDirReg + \", \" + lightPosReg + \", \" + this._pSharedRegisters.globalPositionVarying + \"\\n\";\r\n            }\r\n            if (this._shaderLightingObject.usesLightFallOff) {\r\n                // calculate attenuation\r\n                this._pFragmentCode +=\r\n                    \"dp3 \" + lightDirReg + \".w, \" + lightVarying + \", \" + lightVarying + \"\\n\" +\r\n                        \"sub \" + lightDirReg + \".w, \" + lightDirReg + \".w, \" + diffuseColorReg + \".w\\n\" +\r\n                        \"mul \" + lightDirReg + \".w, \" + lightDirReg + \".w, \" + specularColorReg + \".w\\n\" +\r\n                        \"sat \" + lightDirReg + \".w, \" + lightDirReg + \".w\\n\" +\r\n                        \"sub \" + lightDirReg + \".w, \" + this._pSharedRegisters.commons + \".w, \" + lightDirReg + \".w\\n\" +\r\n                        \"nrm \" + lightDirReg + \".xyz, \" + lightVarying + \"\\n\";\r\n            }\r\n            else {\r\n                this._pFragmentCode += \"nrm \" + lightDirReg + \".xyz, \" + lightVarying + \"\\n\" +\r\n                    \"mov \" + lightDirReg + \".w, \" + lightVarying + \".w\\n\";\r\n            }\r\n            if (this._shaderLightingObject.lightFragmentConstantIndex == -1)\r\n                this._shaderLightingObject.lightFragmentConstantIndex = lightPosReg.index * 4;\r\n            if (addDiff)\r\n                this._pFragmentCode += this._lightingPass._iGetPerLightDiffuseFragmentCode(this._shaderLightingObject, lightDirReg, diffuseColorReg, this._pRegisterCache, this._pSharedRegisters);\r\n            if (addSpec)\r\n                this._pFragmentCode += this._lightingPass._iGetPerLightSpecularFragmentCode(this._shaderLightingObject, lightDirReg, specularColorReg, this._pRegisterCache, this._pSharedRegisters);\r\n            this._pRegisterCache.removeFragmentTempUsage(lightDirReg);\r\n        }\r\n    };\r\n    /**\r\n     * Compiles shading code for light probes.\r\n     */\r\n    LightingCompiler.prototype.compileLightProbeCode = function () {\r\n        var weightReg;\r\n        var weightComponents = [\".x\", \".y\", \".z\", \".w\"];\r\n        var weightRegisters = new Array();\r\n        var i;\r\n        var texReg;\r\n        var addSpec = this._shaderLightingObject.usesProbesForSpecular;\r\n        var addDiff = this._shaderLightingObject.usesProbesForDiffuse;\r\n        if (addDiff)\r\n            this._shaderLightingObject.lightProbeDiffuseIndices = new Array();\r\n        if (addSpec)\r\n            this._shaderLightingObject.lightProbeSpecularIndices = new Array();\r\n        for (i = 0; i < this._pNumProbeRegisters; ++i) {\r\n            weightRegisters[i] = this._pRegisterCache.getFreeFragmentConstant();\r\n            if (i == 0)\r\n                this._shaderLightingObject.probeWeightsIndex = weightRegisters[i].index * 4;\r\n        }\r\n        for (i = 0; i < this._shaderLightingObject.numLightProbes; ++i) {\r\n            weightReg = weightRegisters[Math.floor(i / 4)].toString() + weightComponents[i % 4];\r\n            if (addDiff) {\r\n                texReg = this._pRegisterCache.getFreeTextureReg();\r\n                this._shaderLightingObject.lightProbeDiffuseIndices[i] = texReg.index;\r\n                this._pFragmentCode += this._lightingPass._iGetPerProbeDiffuseFragmentCode(this._shaderLightingObject, texReg, weightReg, this._pRegisterCache, this._pSharedRegisters);\r\n            }\r\n            if (addSpec) {\r\n                texReg = this._pRegisterCache.getFreeTextureReg();\r\n                this._shaderLightingObject.lightProbeSpecularIndices[i] = texReg.index;\r\n                this._pFragmentCode += this._lightingPass._iGetPerProbeSpecularFragmentCode(this._shaderLightingObject, texReg, weightReg, this._pRegisterCache, this._pSharedRegisters);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Reset all the indices to \"unused\".\r\n     */\r\n    LightingCompiler.prototype.pInitRegisterIndices = function () {\r\n        _super.prototype.pInitRegisterIndices.call(this);\r\n        this._shaderLightingObject.lightVertexConstantIndex = -1;\r\n        this._shaderLightingObject.lightFragmentConstantIndex = -1;\r\n        this._shaderLightingObject.probeWeightsIndex = -1;\r\n        this._pNumProbeRegisters = Math.ceil(this._shaderLightingObject.numLightProbes / 4);\r\n        //init light data\r\n        if (this._shaderLightingObject.usesTangentSpace || !this._shaderLightingObject.usesGlobalPosFragment) {\r\n            this._pointLightVertexConstants = new Array(this._shaderLightingObject.numPointLights);\r\n            this._pointLightFragmentConstants = new Array(this._shaderLightingObject.numPointLights * 2);\r\n        }\r\n        else {\r\n            this._pointLightFragmentConstants = new Array(this._shaderLightingObject.numPointLights * 3);\r\n        }\r\n        if (this._shaderLightingObject.usesTangentSpace) {\r\n            this._dirLightVertexConstants = new Array(this._shaderLightingObject.numDirectionalLights);\r\n            this._dirLightFragmentConstants = new Array(this._shaderLightingObject.numDirectionalLights * 2);\r\n        }\r\n        else {\r\n            this._dirLightFragmentConstants = new Array(this._shaderLightingObject.numDirectionalLights * 3);\r\n        }\r\n    };\r\n    return LightingCompiler;\r\n}(CompilerBase_1.CompilerBase));\r\nexports.LightingCompiler = LightingCompiler;\r\n},{\"../../shaders/compilers/CompilerBase\":\"awayjs-renderergl/lib/shaders/compilers/CompilerBase\"}],\"awayjs-renderergl/lib/shaders\":[function(require,module,exports){\n\"use strict\";\r\nvar CompilerBase_1 = require(\"./shaders/compilers/CompilerBase\");\r\nexports.CompilerBase = CompilerBase_1.CompilerBase;\r\nvar LightingCompiler_1 = require(\"./shaders/compilers/LightingCompiler\");\r\nexports.LightingCompiler = LightingCompiler_1.LightingCompiler;\r\nvar LightingShader_1 = require(\"./shaders/LightingShader\");\r\nexports.LightingShader = LightingShader_1.LightingShader;\r\nvar RegisterPool_1 = require(\"./shaders/RegisterPool\");\r\nexports.RegisterPool = RegisterPool_1.RegisterPool;\r\nvar ShaderBase_1 = require(\"./shaders/ShaderBase\");\r\nexports.ShaderBase = ShaderBase_1.ShaderBase;\r\nvar ShaderRegisterCache_1 = require(\"./shaders/ShaderRegisterCache\");\r\nexports.ShaderRegisterCache = ShaderRegisterCache_1.ShaderRegisterCache;\r\nvar ShaderRegisterData_1 = require(\"./shaders/ShaderRegisterData\");\r\nexports.ShaderRegisterData = ShaderRegisterData_1.ShaderRegisterData;\r\nvar ShaderRegisterElement_1 = require(\"./shaders/ShaderRegisterElement\");\r\nexports.ShaderRegisterElement = ShaderRegisterElement_1.ShaderRegisterElement;\r\n},{\"./shaders/LightingShader\":\"awayjs-renderergl/lib/shaders/LightingShader\",\"./shaders/RegisterPool\":\"awayjs-renderergl/lib/shaders/RegisterPool\",\"./shaders/ShaderBase\":\"awayjs-renderergl/lib/shaders/ShaderBase\",\"./shaders/ShaderRegisterCache\":\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\",\"./shaders/ShaderRegisterData\":\"awayjs-renderergl/lib/shaders/ShaderRegisterData\",\"./shaders/ShaderRegisterElement\":\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\",\"./shaders/compilers/CompilerBase\":\"awayjs-renderergl/lib/shaders/compilers/CompilerBase\",\"./shaders/compilers/LightingCompiler\":\"awayjs-renderergl/lib/shaders/compilers/LightingCompiler\"}],\"awayjs-renderergl/lib/sort/IEntitySorter\":[function(require,module,exports){\n\"use strict\";\r\n},{}],\"awayjs-renderergl/lib/sort/RenderableMergeSort\":[function(require,module,exports){\n\"use strict\";\r\n/**\r\n * @class away.sort.RenderableMergeSort\r\n */\r\nvar RenderableMergeSort = (function () {\r\n    function RenderableMergeSort() {\r\n    }\r\n    RenderableMergeSort.prototype.sortBlendedRenderables = function (head) {\r\n        var headB;\r\n        var fast;\r\n        var slow;\r\n        if (!head || !head.next) {\r\n            return head;\r\n        }\r\n        // split in two sublists\r\n        slow = head;\r\n        fast = head.next;\r\n        while (fast) {\r\n            fast = fast.next;\r\n            if (fast) {\r\n                slow = slow.next;\r\n                fast = fast.next;\r\n            }\r\n        }\r\n        headB = slow.next;\r\n        slow.next = null;\r\n        // recurse\r\n        head = this.sortBlendedRenderables(head);\r\n        headB = this.sortBlendedRenderables(headB);\r\n        // merge sublists while respecting order\r\n        var result;\r\n        var curr;\r\n        var l;\r\n        if (!head)\r\n            return headB;\r\n        if (!headB)\r\n            return head;\r\n        while (head && headB) {\r\n            if (head.zIndex < headB.zIndex) {\r\n                l = head;\r\n                head = head.next;\r\n            }\r\n            else {\r\n                l = headB;\r\n                headB = headB.next;\r\n            }\r\n            if (!result)\r\n                result = l;\r\n            else\r\n                curr.next = l;\r\n            curr = l;\r\n        }\r\n        if (head)\r\n            curr.next = head;\r\n        else if (headB)\r\n            curr.next = headB;\r\n        return result;\r\n    };\r\n    RenderableMergeSort.prototype.sortOpaqueRenderables = function (head) {\r\n        var headB;\r\n        var fast, slow;\r\n        if (!head || !head.next) {\r\n            return head;\r\n        }\r\n        // split in two sublists\r\n        slow = head;\r\n        fast = head.next;\r\n        while (fast) {\r\n            fast = fast.next;\r\n            if (fast) {\r\n                slow = slow.next;\r\n                fast = fast.next;\r\n            }\r\n        }\r\n        headB = slow.next;\r\n        slow.next = null;\r\n        // recurse\r\n        head = this.sortOpaqueRenderables(head);\r\n        headB = this.sortOpaqueRenderables(headB);\r\n        // merge sublists while respecting order\r\n        var result;\r\n        var curr;\r\n        var l;\r\n        var cmp = 0;\r\n        if (!head)\r\n            return headB;\r\n        if (!headB)\r\n            return head;\r\n        while (head && headB && head != null && headB != null) {\r\n            // first sort per render order id (reduces program3D switches),\r\n            // then on render object id (reduces setting props),\r\n            // then on zIndex (reduces overdraw)\r\n            var aid = head.renderOrderId;\r\n            var bid = headB.renderOrderId;\r\n            if (aid == bid) {\r\n                var ma = head.surfaceID;\r\n                var mb = headB.surfaceID;\r\n                if (ma == mb) {\r\n                    if (head.zIndex < headB.zIndex)\r\n                        cmp = 1;\r\n                    else\r\n                        cmp = -1;\r\n                }\r\n                else if (ma > mb) {\r\n                    cmp = 1;\r\n                }\r\n                else {\r\n                    cmp = -1;\r\n                }\r\n            }\r\n            else if (aid > bid) {\r\n                cmp = 1;\r\n            }\r\n            else {\r\n                cmp = -1;\r\n            }\r\n            if (cmp < 0) {\r\n                l = head;\r\n                head = head.next;\r\n            }\r\n            else {\r\n                l = headB;\r\n                headB = headB.next;\r\n            }\r\n            if (!result) {\r\n                result = l;\r\n                curr = l;\r\n            }\r\n            else {\r\n                curr.next = l;\r\n                curr = l;\r\n            }\r\n        }\r\n        if (head)\r\n            curr.next = head;\r\n        else if (headB)\r\n            curr.next = headB;\r\n        return result;\r\n    };\r\n    return RenderableMergeSort;\r\n}());\r\nexports.RenderableMergeSort = RenderableMergeSort;\r\n},{}],\"awayjs-renderergl/lib/sort/RenderableNullSort\":[function(require,module,exports){\n\"use strict\";\r\n/**\r\n * @class away.sort.NullSort\r\n */\r\nvar RenderableNullSort = (function () {\r\n    function RenderableNullSort() {\r\n    }\r\n    RenderableNullSort.prototype.sortBlendedRenderables = function (head) {\r\n        return head;\r\n    };\r\n    RenderableNullSort.prototype.sortOpaqueRenderables = function (head) {\r\n        return head;\r\n    };\r\n    return RenderableNullSort;\r\n}());\r\nexports.RenderableNullSort = RenderableNullSort;\r\n},{}],\"awayjs-renderergl/lib/sort\":[function(require,module,exports){\n\"use strict\";\r\nvar RenderableMergeSort_1 = require(\"./sort/RenderableMergeSort\");\r\nexports.RenderableMergeSort = RenderableMergeSort_1.RenderableMergeSort;\r\nvar RenderableNullSort_1 = require(\"./sort/RenderableNullSort\");\r\nexports.RenderableNullSort = RenderableNullSort_1.RenderableNullSort;\r\n},{\"./sort/RenderableMergeSort\":\"awayjs-renderergl/lib/sort/RenderableMergeSort\",\"./sort/RenderableNullSort\":\"awayjs-renderergl/lib/sort/RenderableNullSort\"}],\"awayjs-renderergl/lib/surfaces/GL_BasicMaterialSurface\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar BlendMode_1 = require(\"awayjs-core/lib/image/BlendMode\");\r\nvar BasicMaterialPass_1 = require(\"../surfaces/passes/BasicMaterialPass\");\r\nvar GL_SurfaceBase_1 = require(\"../surfaces/GL_SurfaceBase\");\r\n/**\r\n * RenderMaterialObject forms an abstract base class for the default shaded materials provided by Stage,\r\n * using material methods to define their appearance.\r\n */\r\nvar GL_BasicMaterialSurface = (function (_super) {\r\n    __extends(GL_BasicMaterialSurface, _super);\r\n    function GL_BasicMaterialSurface(material, elementsClass, renderPool) {\r\n        _super.call(this, material, elementsClass, renderPool);\r\n        this._material = material;\r\n        this._pAddPass(this._pass = new BasicMaterialPass_1.BasicMaterialPass(this, material, elementsClass, this._stage));\r\n    }\r\n    GL_BasicMaterialSurface.prototype.onClear = function (event) {\r\n        _super.prototype.onClear.call(this, event);\r\n        this._material = null;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    GL_BasicMaterialSurface.prototype._pUpdateRender = function () {\r\n        _super.prototype._pUpdateRender.call(this);\r\n        this._pRequiresBlending = (this._material.blendMode != BlendMode_1.BlendMode.NORMAL || this._material.alphaBlending || (this._material.colorTransform && this._material.colorTransform.alphaMultiplier < 1));\r\n        this._pass.preserveAlpha = this._material.preserveAlpha; //this._pRequiresBlending;\r\n        this._pass.shader.setBlendMode((this._surface.blendMode == BlendMode_1.BlendMode.NORMAL && this._pRequiresBlending) ? BlendMode_1.BlendMode.LAYER : this._material.blendMode);\r\n        //this._pass.forceSeparateMVP = false;\r\n    };\r\n    return GL_BasicMaterialSurface;\r\n}(GL_SurfaceBase_1.GL_SurfaceBase));\r\nexports.GL_BasicMaterialSurface = GL_BasicMaterialSurface;\r\n},{\"../surfaces/GL_SurfaceBase\":\"awayjs-renderergl/lib/surfaces/GL_SurfaceBase\",\"../surfaces/passes/BasicMaterialPass\":\"awayjs-renderergl/lib/surfaces/passes/BasicMaterialPass\",\"awayjs-core/lib/image/BlendMode\":undefined}],\"awayjs-renderergl/lib/surfaces/GL_DepthSurface\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar GL_SurfacePassBase_1 = require(\"../surfaces/GL_SurfacePassBase\");\r\nvar ShaderBase_1 = require(\"../shaders/ShaderBase\");\r\n/**\r\n * GL_DepthSurface forms an abstract base class for the default shaded materials provided by Stage,\r\n * using material methods to define their appearance.\r\n */\r\nvar GL_DepthSurface = (function (_super) {\r\n    __extends(GL_DepthSurface, _super);\r\n    /**\r\n     *\r\n     * @param pool\r\n     * @param surface\r\n     * @param elementsClass\r\n     * @param stage\r\n     */\r\n    function GL_DepthSurface(surface, elementsClass, renderPool) {\r\n        _super.call(this, surface, elementsClass, renderPool);\r\n        this._shader = new ShaderBase_1.ShaderBase(elementsClass, this, this._stage);\r\n        this._pAddPass(this);\r\n    }\r\n    GL_DepthSurface.prototype.invalidate = function () {\r\n        _super.prototype.invalidate.call(this);\r\n        this._textureVO = this._surface.getTextureAt(0) ? this._shader.getAbstraction(this._surface.getTextureAt(0)) : null;\r\n    };\r\n    GL_DepthSurface.prototype._iIncludeDependencies = function (shader) {\r\n        _super.prototype._iIncludeDependencies.call(this, shader);\r\n        shader.projectionDependencies++;\r\n        if (shader.alphaThreshold > 0)\r\n            shader.uvDependencies++;\r\n    };\r\n    GL_DepthSurface.prototype._iInitConstantData = function (shader) {\r\n        _super.prototype._iInitConstantData.call(this, shader);\r\n        var index = this._fragmentConstantsIndex;\r\n        var data = shader.fragmentConstantData;\r\n        data[index] = 1.0;\r\n        data[index + 1] = 255.0;\r\n        data[index + 2] = 65025.0;\r\n        data[index + 3] = 16581375.0;\r\n        data[index + 4] = 1.0 / 255.0;\r\n        data[index + 5] = 1.0 / 255.0;\r\n        data[index + 6] = 1.0 / 255.0;\r\n        data[index + 7] = 0.0;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    GL_DepthSurface.prototype._iGetFragmentCode = function (shader, registerCache, sharedRegisters) {\r\n        var code = \"\";\r\n        var targetReg = sharedRegisters.shadedTarget;\r\n        var dataReg1 = registerCache.getFreeFragmentConstant();\r\n        var dataReg2 = registerCache.getFreeFragmentConstant();\r\n        this._fragmentConstantsIndex = dataReg1.index * 4;\r\n        var temp1 = registerCache.getFreeFragmentVectorTemp();\r\n        registerCache.addFragmentTempUsages(temp1, 1);\r\n        var temp2 = registerCache.getFreeFragmentVectorTemp();\r\n        registerCache.addFragmentTempUsages(temp2, 1);\r\n        code += \"div \" + temp1 + \", \" + sharedRegisters.projectionFragment + \", \" + sharedRegisters.projectionFragment + \".w\\n\" +\r\n            \"mul \" + temp1 + \", \" + dataReg1 + \", \" + temp1 + \".z\\n\" +\r\n            \"frc \" + temp1 + \", \" + temp1 + \"\\n\" +\r\n            \"mul \" + temp2 + \", \" + temp1 + \".yzww, \" + dataReg2 + \"\\n\";\r\n        //codeF += \"mov ft1.w, fc1.w\t\\n\" +\r\n        //    \"mov ft0.w, fc0.x\t\\n\";\r\n        if (this._textureVO && shader.alphaThreshold > 0) {\r\n            var albedo = registerCache.getFreeFragmentVectorTemp();\r\n            code += this._textureVO._iGetFragmentCode(albedo, registerCache, sharedRegisters, sharedRegisters.uvVarying);\r\n            var cutOffReg = registerCache.getFreeFragmentConstant();\r\n            code += \"sub \" + albedo + \".w, \" + albedo + \".w, \" + cutOffReg + \".x\\n\" +\r\n                \"kil \" + albedo + \".w\\n\";\r\n        }\r\n        code += \"sub \" + targetReg + \", \" + temp1 + \", \" + temp2 + \"\\n\";\r\n        registerCache.removeFragmentTempUsage(temp1);\r\n        registerCache.removeFragmentTempUsage(temp2);\r\n        return code;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    GL_DepthSurface.prototype._iActivate = function (camera) {\r\n        _super.prototype._iActivate.call(this, camera);\r\n        if (this._textureVO && this._shader.alphaThreshold > 0) {\r\n            this._textureVO.activate(this);\r\n            this._shader.fragmentConstantData[this._fragmentConstantsIndex + 8] = this._shader.alphaThreshold;\r\n        }\r\n    };\r\n    return GL_DepthSurface;\r\n}(GL_SurfacePassBase_1.GL_SurfacePassBase));\r\nexports.GL_DepthSurface = GL_DepthSurface;\r\n},{\"../shaders/ShaderBase\":\"awayjs-renderergl/lib/shaders/ShaderBase\",\"../surfaces/GL_SurfacePassBase\":\"awayjs-renderergl/lib/surfaces/GL_SurfacePassBase\"}],\"awayjs-renderergl/lib/surfaces/GL_DistanceSurface\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar GL_SurfacePassBase_1 = require(\"../surfaces/GL_SurfacePassBase\");\r\nvar ShaderBase_1 = require(\"../shaders/ShaderBase\");\r\n/**\r\n * DistanceRender is a pass that writes distance values to a depth map as a 32-bit value exploded over the 4 texture channels.\r\n * This is used to render omnidirectional shadow maps.\r\n */\r\nvar GL_DistanceSurface = (function (_super) {\r\n    __extends(GL_DistanceSurface, _super);\r\n    /**\r\n     * Creates a new DistanceRender object.\r\n     *\r\n     * @param material The material to which this pass belongs.\r\n     */\r\n    function GL_DistanceSurface(surface, elementsClass, renderPool) {\r\n        _super.call(this, surface, elementsClass, renderPool);\r\n        this._shader = new ShaderBase_1.ShaderBase(elementsClass, this, this._stage);\r\n        this._pAddPass(this);\r\n    }\r\n    GL_DistanceSurface.prototype.invalidate = function () {\r\n        _super.prototype.invalidate.call(this);\r\n        this._textureVO = this._surface.getTextureAt(0) ? this._shader.getAbstraction(this._surface.getTextureAt(0)) : null;\r\n    };\r\n    /**\r\n     * Initializes the unchanging constant data for this material.\r\n     */\r\n    GL_DistanceSurface.prototype._iInitConstantData = function (shader) {\r\n        _super.prototype._iInitConstantData.call(this, shader);\r\n        var index = this._fragmentConstantsIndex;\r\n        var data = shader.fragmentConstantData;\r\n        data[index + 4] = 1.0 / 255.0;\r\n        data[index + 5] = 1.0 / 255.0;\r\n        data[index + 6] = 1.0 / 255.0;\r\n        data[index + 7] = 0.0;\r\n    };\r\n    GL_DistanceSurface.prototype._iIncludeDependencies = function (shader) {\r\n        _super.prototype._iIncludeDependencies.call(this, shader);\r\n        shader.projectionDependencies++;\r\n        shader.viewDirDependencies++;\r\n        if (shader.alphaThreshold > 0)\r\n            shader.uvDependencies++;\r\n        if (shader.viewDirDependencies > 0)\r\n            shader.globalPosDependencies++;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    GL_DistanceSurface.prototype._iGetFragmentCode = function (shader, registerCache, sharedRegisters) {\r\n        var code;\r\n        var targetReg = sharedRegisters.shadedTarget;\r\n        var dataReg1 = registerCache.getFreeFragmentConstant();\r\n        var dataReg2 = registerCache.getFreeFragmentConstant();\r\n        this._fragmentConstantsIndex = dataReg1.index * 4;\r\n        var temp1 = registerCache.getFreeFragmentVectorTemp();\r\n        registerCache.addFragmentTempUsages(temp1, 1);\r\n        var temp2 = registerCache.getFreeFragmentVectorTemp();\r\n        registerCache.addFragmentTempUsages(temp2, 1);\r\n        // squared distance to view\r\n        code = \"dp3 \" + temp1 + \".z, \" + sharedRegisters.viewDirVarying + \".xyz, \" + sharedRegisters.viewDirVarying + \".xyz\\n\" +\r\n            \"mul \" + temp1 + \", \" + dataReg1 + \", \" + temp1 + \".z\\n\" +\r\n            \"frc \" + temp1 + \", \" + temp1 + \"\\n\" +\r\n            \"mul \" + temp2 + \", \" + temp1 + \".yzww, \" + dataReg2 + \"\\n\";\r\n        if (this._textureVO && shader.alphaThreshold > 0) {\r\n            var albedo = registerCache.getFreeFragmentVectorTemp();\r\n            code += this._textureVO._iGetFragmentCode(albedo, registerCache, sharedRegisters, sharedRegisters.uvVarying);\r\n            var cutOffReg = registerCache.getFreeFragmentConstant();\r\n            code += \"sub \" + albedo + \".w, \" + albedo + \".w, \" + cutOffReg + \".x\\n\" +\r\n                \"kil \" + albedo + \".w\\n\";\r\n        }\r\n        code += \"sub \" + targetReg + \", \" + temp1 + \", \" + temp2 + \"\\n\";\r\n        return code;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    GL_DistanceSurface.prototype._iActivate = function (camera) {\r\n        _super.prototype._iActivate.call(this, camera);\r\n        var f = camera.projection.far;\r\n        f = 1 / (2 * f * f);\r\n        // sqrt(f*f+f*f) is largest possible distance for any frustum, so we need to divide by it. Rarely a tight fit, but with 32 bits precision, it's enough.\r\n        var index = this._fragmentConstantsIndex;\r\n        var data = this._shader.fragmentConstantData;\r\n        data[index] = 1.0 * f;\r\n        data[index + 1] = 255.0 * f;\r\n        data[index + 2] = 65025.0 * f;\r\n        data[index + 3] = 16581375.0 * f;\r\n        if (this._textureVO && this._shader.alphaThreshold > 0) {\r\n            this._textureVO.activate(this);\r\n            data[index + 8] = this._shader.alphaThreshold;\r\n        }\r\n    };\r\n    return GL_DistanceSurface;\r\n}(GL_SurfacePassBase_1.GL_SurfacePassBase));\r\nexports.GL_DistanceSurface = GL_DistanceSurface;\r\n},{\"../shaders/ShaderBase\":\"awayjs-renderergl/lib/shaders/ShaderBase\",\"../surfaces/GL_SurfacePassBase\":\"awayjs-renderergl/lib/surfaces/GL_SurfacePassBase\"}],\"awayjs-renderergl/lib/surfaces/GL_SkyboxSurface\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar AssetEvent_1 = require(\"awayjs-core/lib/events/AssetEvent\");\r\nvar BlendMode_1 = require(\"awayjs-core/lib/image/BlendMode\");\r\nvar ContextGLCompareMode_1 = require(\"awayjs-stagegl/lib/base/ContextGLCompareMode\");\r\nvar GL_SurfacePassBase_1 = require(\"../surfaces/GL_SurfacePassBase\");\r\nvar ShaderBase_1 = require(\"../shaders/ShaderBase\");\r\n/**\r\n * GL_SkyboxSurface forms an abstract base class for the default shaded materials provided by Stage,\r\n * using material methods to define their appearance.\r\n */\r\nvar GL_SkyboxSurface = (function (_super) {\r\n    __extends(GL_SkyboxSurface, _super);\r\n    function GL_SkyboxSurface(skybox, elementsClass, renderPool) {\r\n        _super.call(this, skybox, elementsClass, renderPool);\r\n        this._skybox = skybox;\r\n        this._shader = new ShaderBase_1.ShaderBase(elementsClass, this, this._stage);\r\n        this._texture = this._shader.getAbstraction(this._skybox.texture);\r\n        this._pAddPass(this);\r\n    }\r\n    GL_SkyboxSurface.prototype.onClear = function (event) {\r\n        _super.prototype.onClear.call(this, event);\r\n        this._texture.onClear(new AssetEvent_1.AssetEvent(AssetEvent_1.AssetEvent.CLEAR, this._skybox.texture));\r\n        this._texture = null;\r\n        this._skybox = null;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    GL_SkyboxSurface.prototype._pUpdateRender = function () {\r\n        _super.prototype._pUpdateRender.call(this);\r\n        this._pRequiresBlending = (this._surface.blendMode != BlendMode_1.BlendMode.NORMAL);\r\n        this.shader.setBlendMode((this._surface.blendMode == BlendMode_1.BlendMode.NORMAL && this._pRequiresBlending) ? BlendMode_1.BlendMode.LAYER : this._surface.blendMode);\r\n    };\r\n    GL_SkyboxSurface.prototype._iIncludeDependencies = function (shader) {\r\n        _super.prototype._iIncludeDependencies.call(this, shader);\r\n        shader.usesPositionFragment = true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    GL_SkyboxSurface.prototype._iGetFragmentCode = function (shader, registerCache, sharedRegisters) {\r\n        return this._texture._iGetFragmentCode(sharedRegisters.shadedTarget, registerCache, sharedRegisters, sharedRegisters.positionVarying);\r\n    };\r\n    GL_SkyboxSurface.prototype._setRenderState = function (renderable, camera, viewProjection) {\r\n        _super.prototype._setRenderState.call(this, renderable, camera, viewProjection);\r\n        this._texture._setRenderState(renderable);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    GL_SkyboxSurface.prototype._iActivate = function (camera) {\r\n        _super.prototype._iActivate.call(this, camera);\r\n        this._stage.context.setDepthTest(false, ContextGLCompareMode_1.ContextGLCompareMode.LESS);\r\n        this._texture.activate(this);\r\n    };\r\n    return GL_SkyboxSurface;\r\n}(GL_SurfacePassBase_1.GL_SurfacePassBase));\r\nexports.GL_SkyboxSurface = GL_SkyboxSurface;\r\n},{\"../shaders/ShaderBase\":\"awayjs-renderergl/lib/shaders/ShaderBase\",\"../surfaces/GL_SurfacePassBase\":\"awayjs-renderergl/lib/surfaces/GL_SurfacePassBase\",\"awayjs-core/lib/events/AssetEvent\":undefined,\"awayjs-core/lib/image/BlendMode\":undefined,\"awayjs-stagegl/lib/base/ContextGLCompareMode\":undefined}],\"awayjs-renderergl/lib/surfaces/GL_SurfaceBase\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar AbstractionBase_1 = require(\"awayjs-core/lib/library/AbstractionBase\");\r\nvar SurfaceEvent_1 = require(\"awayjs-display/lib/events/SurfaceEvent\");\r\nvar MaterialBase_1 = require(\"awayjs-display/lib/materials/MaterialBase\");\r\nvar DefaultMaterialManager_1 = require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\r\nvar PassEvent_1 = require(\"../events/PassEvent\");\r\n/**\r\n *\r\n * @class away.pool.Passes\r\n */\r\nvar GL_SurfaceBase = (function (_super) {\r\n    __extends(GL_SurfaceBase, _super);\r\n    function GL_SurfaceBase(surface, elementsClass, renderPool) {\r\n        var _this = this;\r\n        _super.call(this, surface, renderPool);\r\n        this.usages = 0;\r\n        this._forceSeparateMVP = false;\r\n        this._usesAnimation = true;\r\n        this._invalidAnimation = true;\r\n        this._invalidRender = true;\r\n        this._invalidImages = true;\r\n        this._passes = new Array();\r\n        this._imageIndices = new Object();\r\n        this._pRequiresBlending = false;\r\n        this.images = new Array();\r\n        this.samplers = new Array();\r\n        this._onInvalidateAnimationDelegate = function (event) { return _this.onInvalidateAnimation(event); };\r\n        this._onInvalidatePassesDelegate = function (event) { return _this.onInvalidatePasses(event); };\r\n        this.surfaceID = surface.id;\r\n        this._surface = surface;\r\n        this._elementsClass = elementsClass;\r\n        this._stage = renderPool.stage;\r\n        this._surface.addEventListener(SurfaceEvent_1.SurfaceEvent.INVALIDATE_ANIMATION, this._onInvalidateAnimationDelegate);\r\n        this._surface.addEventListener(SurfaceEvent_1.SurfaceEvent.INVALIDATE_PASSES, this._onInvalidatePassesDelegate);\r\n        this._onPassInvalidateDelegate = function (event) { return _this.onPassInvalidate(event); };\r\n    }\r\n    Object.defineProperty(GL_SurfaceBase.prototype, \"requiresBlending\", {\r\n        /**\r\n         * Indicates whether or not the renderable requires alpha blending during rendering.\r\n         */\r\n        get: function () {\r\n            return this._pRequiresBlending;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GL_SurfaceBase.prototype, \"renderOrderId\", {\r\n        get: function () {\r\n            if (this._invalidAnimation)\r\n                this._updateAnimation();\r\n            return this._renderOrderId;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GL_SurfaceBase.prototype, \"passes\", {\r\n        get: function () {\r\n            if (this._invalidAnimation)\r\n                this._updateAnimation();\r\n            return this._passes;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GL_SurfaceBase.prototype, \"surface\", {\r\n        get: function () {\r\n            return this._surface;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GL_SurfaceBase.prototype, \"numImages\", {\r\n        get: function () {\r\n            if (this._invalidImages)\r\n                this._updateImages();\r\n            return this._numImages;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    GL_SurfaceBase.prototype._iIncludeDependencies = function (shader) {\r\n        this._elementsClass._iIncludeDependencies(shader);\r\n        shader.alphaThreshold = this._surface.alphaThreshold;\r\n        shader.useImageRect = this._surface.imageRect;\r\n        shader.usesCurves = this._surface.curves;\r\n        if (this._surface instanceof MaterialBase_1.MaterialBase) {\r\n            var material = this._surface;\r\n            shader.useAlphaPremultiplied = material.alphaPremultiplied;\r\n            shader.useBothSides = material.bothSides;\r\n            shader.usesUVTransform = material.animateUVs;\r\n            shader.usesColorTransform = material.useColorTransform;\r\n        }\r\n    };\r\n    GL_SurfaceBase.prototype.getImageIndex = function (texture, index) {\r\n        if (index === void 0) { index = 0; }\r\n        if (this._invalidImages)\r\n            this._updateImages();\r\n        return this._imageIndices[texture.id][index];\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    GL_SurfaceBase.prototype.onClear = function (event) {\r\n        _super.prototype.onClear.call(this, event);\r\n        this._surface = null;\r\n        this._elementsClass = null;\r\n        this._stage = null;\r\n        var len = this._passes.length;\r\n        for (var i = 0; i < len; i++) {\r\n            this._passes[i].removeEventListener(PassEvent_1.PassEvent.INVALIDATE, this._onPassInvalidateDelegate);\r\n            this._passes[i].dispose();\r\n        }\r\n        this._passes = null;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    GL_SurfaceBase.prototype.onInvalidate = function (event) {\r\n        _super.prototype.onInvalidate.call(this, event);\r\n        this._invalidRender = true;\r\n        this._invalidAnimation = true;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    GL_SurfaceBase.prototype.onInvalidatePasses = function (event) {\r\n        var len = this._passes.length;\r\n        for (var i = 0; i < len; i++)\r\n            this._passes[i].invalidate();\r\n        this._invalidAnimation = true;\r\n        this._invalidImages = true;\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    GL_SurfaceBase.prototype.onInvalidateAnimation = function (event) {\r\n        this._invalidAnimation = true;\r\n    };\r\n    /**\r\n     *\r\n     * @param surface\r\n     */\r\n    GL_SurfaceBase.prototype._updateAnimation = function () {\r\n        if (this._invalidRender)\r\n            this._pUpdateRender();\r\n        this._invalidAnimation = false;\r\n        var usesAnimation = this._getEnabledGPUAnimation();\r\n        var renderOrderId = 0;\r\n        var mult = 1;\r\n        var shader;\r\n        var len = this._passes.length;\r\n        for (var i = 0; i < len; i++) {\r\n            shader = this._passes[i].shader;\r\n            shader.usesAnimation = usesAnimation;\r\n            renderOrderId += shader.programData.id * mult;\r\n            mult *= 1000;\r\n        }\r\n        if (this._usesAnimation != usesAnimation) {\r\n            this._usesAnimation = usesAnimation;\r\n            var renderables = this._surface.iOwners;\r\n            var numOwners = renderables.length;\r\n            for (var j = 0; j < numOwners; j++)\r\n                renderables[j].invalidateElements();\r\n        }\r\n        this._renderOrderId = renderOrderId;\r\n    };\r\n    GL_SurfaceBase.prototype._updateImages = function () {\r\n        this._invalidImages = false;\r\n        var numTextures = this._surface.getNumTextures();\r\n        var texture;\r\n        var numImages;\r\n        var images;\r\n        var image;\r\n        var sampler;\r\n        var index = 0;\r\n        for (var i = 0; i < numTextures; i++) {\r\n            texture = this._surface.getTextureAt(i);\r\n            numImages = texture.getNumImages();\r\n            images = this._imageIndices[texture.id] = new Array();\r\n            for (var j = 0; j < numImages; j++) {\r\n                image = texture.getImageAt(j) || (this._surface.style ? this._surface.style.getImageAt(texture, j) : null) || DefaultMaterialManager_1.DefaultMaterialManager.getDefaultImage2D();\r\n                this.images[index] = this._stage.getAbstraction(image);\r\n                sampler = texture.getSamplerAt(j) || (this._surface.style ? this._surface.style.getSamplerAt(texture, j) : null) || DefaultMaterialManager_1.DefaultMaterialManager.getDefaultSampler();\r\n                this.samplers[index] = this._stage.getAbstraction(sampler);\r\n                images[j] = index++;\r\n            }\r\n        }\r\n        this._numImages = index;\r\n    };\r\n    /**\r\n     * Performs any processing that needs to occur before any of its passes are used.\r\n     *\r\n     * @private\r\n     */\r\n    GL_SurfaceBase.prototype._pUpdateRender = function () {\r\n        this._invalidRender = false;\r\n        //overrride to update shader object properties\r\n    };\r\n    /**\r\n     * Removes a pass from the surface.\r\n     * @param pass The pass to be removed.\r\n     */\r\n    GL_SurfaceBase.prototype._pRemovePass = function (pass) {\r\n        pass.removeEventListener(PassEvent_1.PassEvent.INVALIDATE, this._onPassInvalidateDelegate);\r\n        this._passes.splice(this._passes.indexOf(pass), 1);\r\n    };\r\n    /**\r\n     * Removes all passes from the surface\r\n     */\r\n    GL_SurfaceBase.prototype._pClearPasses = function () {\r\n        var len = this._passes.length;\r\n        for (var i = 0; i < len; ++i)\r\n            this._passes[i].removeEventListener(PassEvent_1.PassEvent.INVALIDATE, this._onPassInvalidateDelegate);\r\n        this._passes.length = 0;\r\n    };\r\n    /**\r\n     * Adds a pass to the surface\r\n     * @param pass\r\n     */\r\n    GL_SurfaceBase.prototype._pAddPass = function (pass) {\r\n        this._passes.push(pass);\r\n        pass.addEventListener(PassEvent_1.PassEvent.INVALIDATE, this._onPassInvalidateDelegate);\r\n    };\r\n    /**\r\n     * Listener for when a pass's shader code changes. It recalculates the render order id.\r\n     */\r\n    GL_SurfaceBase.prototype.onPassInvalidate = function (event) {\r\n        this._invalidAnimation = true;\r\n    };\r\n    /**\r\n     * test if animation will be able to run on gpu BEFORE compiling materials\r\n     * test if the shader objects supports animating the animation set in the vertex shader\r\n     * if any object using this material fails to support accelerated animations for any of the shader objects,\r\n     * we should do everything on cpu (otherwise we have the cost of both gpu + cpu animations)\r\n     */\r\n    GL_SurfaceBase.prototype._getEnabledGPUAnimation = function () {\r\n        if (this._surface.animationSet) {\r\n            this._surface.animationSet.resetGPUCompatibility();\r\n            var renderables = this._surface.iOwners;\r\n            var numOwners = renderables.length;\r\n            var len = this._passes.length;\r\n            var shader;\r\n            for (var i = 0; i < len; i++) {\r\n                shader = this._passes[i].shader;\r\n                shader.usesAnimation = false;\r\n                for (var j = 0; j < numOwners; j++)\r\n                    if (renderables[j].animator)\r\n                        renderables[j].animator.testGPUCompatibility(shader);\r\n            }\r\n            return !this._surface.animationSet.usesCPU;\r\n        }\r\n        return false;\r\n    };\r\n    return GL_SurfaceBase;\r\n}(AbstractionBase_1.AbstractionBase));\r\nexports.GL_SurfaceBase = GL_SurfaceBase;\r\n},{\"../events/PassEvent\":\"awayjs-renderergl/lib/events/PassEvent\",\"awayjs-core/lib/library/AbstractionBase\":undefined,\"awayjs-display/lib/events/SurfaceEvent\":undefined,\"awayjs-display/lib/managers/DefaultMaterialManager\":undefined,\"awayjs-display/lib/materials/MaterialBase\":undefined}],\"awayjs-renderergl/lib/surfaces/GL_SurfacePassBase\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar PassEvent_1 = require(\"../events/PassEvent\");\r\nvar GL_SurfaceBase_1 = require(\"../surfaces/GL_SurfaceBase\");\r\n/**\r\n * GL_SurfacePassBase provides an abstract base class for material shader passes. A material pass constitutes at least\r\n * a render call per required renderable.\r\n */\r\nvar GL_SurfacePassBase = (function (_super) {\r\n    __extends(GL_SurfacePassBase, _super);\r\n    function GL_SurfacePassBase() {\r\n        _super.apply(this, arguments);\r\n    }\r\n    Object.defineProperty(GL_SurfacePassBase.prototype, \"shader\", {\r\n        get: function () {\r\n            return this._shader;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GL_SurfacePassBase.prototype, \"animationSet\", {\r\n        get: function () {\r\n            return this._surface.animationSet;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Marks the shader program as invalid, so it will be recompiled before the next render.\r\n     */\r\n    GL_SurfacePassBase.prototype.invalidate = function () {\r\n        this._shader.invalidateProgram();\r\n        this.dispatchEvent(new PassEvent_1.PassEvent(PassEvent_1.PassEvent.INVALIDATE, this));\r\n    };\r\n    GL_SurfacePassBase.prototype.dispose = function () {\r\n        if (this._shader) {\r\n            this._shader.dispose();\r\n            this._shader = null;\r\n        }\r\n    };\r\n    /**\r\n     * Renders the current pass. Before calling pass, activatePass needs to be called with the same index.\r\n     * @param pass The pass used to render the renderable.\r\n     * @param renderable The IRenderable object to draw.\r\n     * @param stage The Stage object used for rendering.\r\n     * @param entityCollector The EntityCollector object that contains the visible scene data.\r\n     * @param viewProjection The view-projection matrix used to project to the screen. This is not the same as\r\n     * camera.viewProjection as it includes the scaling factors when rendering to textures.\r\n     *\r\n     * @internal\r\n     */\r\n    GL_SurfacePassBase.prototype._setRenderState = function (renderable, camera, viewProjection) {\r\n        this._shader._setRenderState(renderable, camera, viewProjection);\r\n    };\r\n    /**\r\n     * Sets the render state for the pass that is independent of the rendered object. This needs to be called before\r\n     * calling pass. Before activating a pass, the previously used pass needs to be deactivated.\r\n     * @param stage The Stage object which is currently used for rendering.\r\n     * @param camera The camera from which the scene is viewed.\r\n     * @private\r\n     */\r\n    GL_SurfacePassBase.prototype._iActivate = function (camera) {\r\n        this._shader._iActivate(camera);\r\n    };\r\n    /**\r\n     * Clears the render state for the pass. This needs to be called before activating another pass.\r\n     * @param stage The Stage used for rendering\r\n     *\r\n     * @private\r\n     */\r\n    GL_SurfacePassBase.prototype._iDeactivate = function () {\r\n        this._shader._iDeactivate();\r\n    };\r\n    GL_SurfacePassBase.prototype._iInitConstantData = function (shader) {\r\n    };\r\n    GL_SurfacePassBase.prototype._iGetPreLightingVertexCode = function (shader, registerCache, sharedRegisters) {\r\n        return \"\";\r\n    };\r\n    GL_SurfacePassBase.prototype._iGetPreLightingFragmentCode = function (shader, registerCache, sharedRegisters) {\r\n        return \"\";\r\n    };\r\n    GL_SurfacePassBase.prototype._iGetVertexCode = function (shader, registerCache, sharedRegisters) {\r\n        return \"\";\r\n    };\r\n    GL_SurfacePassBase.prototype._iGetFragmentCode = function (shader, registerCache, sharedRegisters) {\r\n        return \"\";\r\n    };\r\n    GL_SurfacePassBase.prototype._iGetNormalVertexCode = function (shader, registerCache, sharedRegisters) {\r\n        return \"\";\r\n    };\r\n    GL_SurfacePassBase.prototype._iGetNormalFragmentCode = function (shader, registerCache, sharedRegisters) {\r\n        return \"\";\r\n    };\r\n    return GL_SurfacePassBase;\r\n}(GL_SurfaceBase_1.GL_SurfaceBase));\r\nexports.GL_SurfacePassBase = GL_SurfacePassBase;\r\n},{\"../events/PassEvent\":\"awayjs-renderergl/lib/events/PassEvent\",\"../surfaces/GL_SurfaceBase\":\"awayjs-renderergl/lib/surfaces/GL_SurfaceBase\"}],\"awayjs-renderergl/lib/surfaces/ISurfaceClassGL\":[function(require,module,exports){\n\"use strict\";\r\n},{}],\"awayjs-renderergl/lib/surfaces/SurfacePool\":[function(require,module,exports){\n\"use strict\";\r\n/**\r\n * @class away.pool.SurfacePool\r\n */\r\nvar SurfacePool = (function () {\r\n    /**\r\n     * //TODO\r\n     *\r\n     * @param surfaceClassGL\r\n     */\r\n    function SurfacePool(elementsClass, stage, surfaceClassGL) {\r\n        if (surfaceClassGL === void 0) { surfaceClassGL = null; }\r\n        this._abstractionPool = new Object();\r\n        this._elementsClass = elementsClass;\r\n        this._stage = stage;\r\n        this._surfaceClassGL = surfaceClassGL;\r\n    }\r\n    Object.defineProperty(SurfacePool.prototype, \"stage\", {\r\n        get: function () {\r\n            return this._stage;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * //TODO\r\n     *\r\n     * @param elementsOwner\r\n     * @returns IElements\r\n     */\r\n    SurfacePool.prototype.getAbstraction = function (surface) {\r\n        return (this._abstractionPool[surface.id] || (this._abstractionPool[surface.id] = new (this._surfaceClassGL || SurfacePool._abstractionClassPool[surface.assetType])(surface, this._elementsClass, this)));\r\n    };\r\n    /**\r\n     * //TODO\r\n     *\r\n     * @param elementsOwner\r\n     */\r\n    SurfacePool.prototype.clearAbstraction = function (surface) {\r\n        delete this._abstractionPool[surface.id];\r\n    };\r\n    /**\r\n     *\r\n     * @param imageObjectClass\r\n     */\r\n    SurfacePool.registerAbstraction = function (surfaceClassGL, assetClass) {\r\n        SurfacePool._abstractionClassPool[assetClass.assetType] = surfaceClassGL;\r\n    };\r\n    SurfacePool._abstractionClassPool = new Object();\r\n    return SurfacePool;\r\n}());\r\nexports.SurfacePool = SurfacePool;\r\n},{}],\"awayjs-renderergl/lib/surfaces/passes/BasicMaterialPass\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar AssetEvent_1 = require(\"awayjs-core/lib/events/AssetEvent\");\r\nvar ShaderBase_1 = require(\"../../shaders/ShaderBase\");\r\nvar PassBase_1 = require(\"../../surfaces/passes/PassBase\");\r\n/**\r\n * BasicMaterialPass forms an abstract base class for the default shaded materials provided by Stage,\r\n * using material methods to define their appearance.\r\n */\r\nvar BasicMaterialPass = (function (_super) {\r\n    __extends(BasicMaterialPass, _super);\r\n    function BasicMaterialPass(render, surface, elementsClass, stage) {\r\n        _super.call(this, render, surface, elementsClass, stage);\r\n        this._diffuseR = 1;\r\n        this._diffuseG = 1;\r\n        this._diffuseB = 1;\r\n        this._diffuseA = 1;\r\n        this._shader = new ShaderBase_1.ShaderBase(elementsClass, this, this._stage);\r\n        this.invalidate();\r\n    }\r\n    BasicMaterialPass.prototype._iIncludeDependencies = function (shader) {\r\n        _super.prototype._iIncludeDependencies.call(this, shader);\r\n        if (this._textureVO != null)\r\n            shader.uvDependencies++;\r\n    };\r\n    BasicMaterialPass.prototype.invalidate = function () {\r\n        _super.prototype.invalidate.call(this);\r\n        this._textureVO = this._surface.getTextureAt(0) ? this._shader.getAbstraction(this._surface.getTextureAt(0)) : null;\r\n    };\r\n    BasicMaterialPass.prototype.dispose = function () {\r\n        if (this._textureVO) {\r\n            this._textureVO.onClear(new AssetEvent_1.AssetEvent(AssetEvent_1.AssetEvent.CLEAR, this._surface.getTextureAt(0)));\r\n            this._textureVO = null;\r\n        }\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    BasicMaterialPass.prototype._iGetFragmentCode = function (shader, regCache, sharedReg) {\r\n        var code = \"\";\r\n        var alphaReg;\r\n        if (this.preserveAlpha) {\r\n            alphaReg = regCache.getFreeFragmentSingleTemp();\r\n            regCache.addFragmentTempUsages(alphaReg, 1);\r\n            code += \"mov \" + alphaReg + \", \" + sharedReg.shadedTarget + \".w\\n\";\r\n        }\r\n        var targetReg = sharedReg.shadedTarget;\r\n        if (this._textureVO != null) {\r\n            code += this._textureVO._iGetFragmentCode(targetReg, regCache, sharedReg, sharedReg.uvVarying);\r\n            if (shader.alphaThreshold > 0) {\r\n                var cutOffReg = regCache.getFreeFragmentConstant();\r\n                this._fragmentConstantsIndex = cutOffReg.index * 4;\r\n                code += \"sub \" + targetReg + \".w, \" + targetReg + \".w, \" + cutOffReg + \".x\\n\" + \"kil \" + targetReg + \".w\\n\" + \"add \" + targetReg + \".w, \" + targetReg + \".w, \" + cutOffReg + \".x\\n\";\r\n            }\r\n        }\r\n        else if (shader.colorBufferIndex != -1) {\r\n            code += \"mov \" + targetReg + \", \" + sharedReg.colorVarying + \"\\n\";\r\n        }\r\n        else {\r\n            var diffuseInputReg = regCache.getFreeFragmentConstant();\r\n            this._fragmentConstantsIndex = diffuseInputReg.index * 4;\r\n            code += \"mov \" + targetReg + \", \" + diffuseInputReg + \"\\n\";\r\n        }\r\n        if (this.preserveAlpha) {\r\n            code += \"mul \" + sharedReg.shadedTarget + \".w, \" + sharedReg.shadedTarget + \".w, \" + alphaReg + \"\\n\";\r\n            regCache.removeFragmentTempUsage(alphaReg);\r\n        }\r\n        return code;\r\n    };\r\n    BasicMaterialPass.prototype._setRenderState = function (renderable, camera, viewProjection) {\r\n        _super.prototype._setRenderState.call(this, renderable, camera, viewProjection);\r\n        if (this._textureVO != null)\r\n            this._textureVO._setRenderState(renderable);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    BasicMaterialPass.prototype._iActivate = function (camera) {\r\n        _super.prototype._iActivate.call(this, camera);\r\n        if (this._textureVO != null) {\r\n            this._textureVO.activate(this._render);\r\n            if (this._shader.alphaThreshold > 0)\r\n                this._shader.fragmentConstantData[this._fragmentConstantsIndex] = this._shader.alphaThreshold;\r\n        }\r\n        else if (this._shader.colorBufferIndex == -1) {\r\n            var index = this._fragmentConstantsIndex;\r\n            var data = this._shader.fragmentConstantData;\r\n            data[index] = this._diffuseR;\r\n            data[index + 1] = this._diffuseG;\r\n            data[index + 2] = this._diffuseB;\r\n            data[index + 3] = this._diffuseA;\r\n        }\r\n    };\r\n    return BasicMaterialPass;\r\n}(PassBase_1.PassBase));\r\nexports.BasicMaterialPass = BasicMaterialPass;\r\n},{\"../../shaders/ShaderBase\":\"awayjs-renderergl/lib/shaders/ShaderBase\",\"../../surfaces/passes/PassBase\":\"awayjs-renderergl/lib/surfaces/passes/PassBase\",\"awayjs-core/lib/events/AssetEvent\":undefined}],\"awayjs-renderergl/lib/surfaces/passes/ILightingPass\":[function(require,module,exports){\n\"use strict\";\r\n},{}],\"awayjs-renderergl/lib/surfaces/passes/IPass\":[function(require,module,exports){\n\"use strict\";\r\n},{}],\"awayjs-renderergl/lib/surfaces/passes/PassBase\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar EventDispatcher_1 = require(\"awayjs-core/lib/events/EventDispatcher\");\r\nvar PassEvent_1 = require(\"../../events/PassEvent\");\r\n/**\r\n * PassBase provides an abstract base class for material shader passes. A material pass constitutes at least\r\n * a render call per required renderable.\r\n */\r\nvar PassBase = (function (_super) {\r\n    __extends(PassBase, _super);\r\n    /**\r\n     * Creates a new PassBase object.\r\n     */\r\n    function PassBase(render, surface, elementsClass, stage) {\r\n        _super.call(this);\r\n        this._preserveAlpha = true;\r\n        this._forceSeparateMVP = false;\r\n        this._render = render;\r\n        this._surface = surface;\r\n        this._elementsClass = elementsClass;\r\n        this._stage = stage;\r\n    }\r\n    Object.defineProperty(PassBase.prototype, \"shader\", {\r\n        get: function () {\r\n            return this._shader;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PassBase.prototype, \"animationSet\", {\r\n        get: function () {\r\n            return this._surface.animationSet;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PassBase.prototype, \"preserveAlpha\", {\r\n        /**\r\n         * Indicates whether the output alpha value should remain unchanged compared to the material's original alpha.\r\n         */\r\n        get: function () {\r\n            return this._preserveAlpha;\r\n        },\r\n        set: function (value) {\r\n            if (this._preserveAlpha == value)\r\n                return;\r\n            this._preserveAlpha = value;\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PassBase.prototype, \"forceSeparateMVP\", {\r\n        /**\r\n         * Indicates whether the screen projection should be calculated by forcing a separate scene matrix and\r\n         * view-projection matrix. This is used to prevent rounding errors when using multiple passes with different\r\n         * projection code.\r\n         */\r\n        get: function () {\r\n            return this._forceSeparateMVP;\r\n        },\r\n        set: function (value) {\r\n            if (this._forceSeparateMVP == value)\r\n                return;\r\n            this._forceSeparateMVP = value;\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    PassBase.prototype.getImageIndex = function (texture, index) {\r\n        if (index === void 0) { index = 0; }\r\n        return this._render.getImageIndex(texture, index);\r\n    };\r\n    /**\r\n     * Marks the shader program as invalid, so it will be recompiled before the next render.\r\n     */\r\n    PassBase.prototype.invalidate = function () {\r\n        this._shader.invalidateProgram();\r\n        this.dispatchEvent(new PassEvent_1.PassEvent(PassEvent_1.PassEvent.INVALIDATE, this));\r\n    };\r\n    /**\r\n     * Cleans up any resources used by the current object.\r\n     * @param deep Indicates whether other resources should be cleaned up, that could potentially be shared across different instances.\r\n     */\r\n    PassBase.prototype.dispose = function () {\r\n        this._render = null;\r\n        this._surface = null;\r\n        this._elementsClass = null;\r\n        this._stage = null;\r\n        if (this._shader) {\r\n            this._shader.dispose();\r\n            this._shader = null;\r\n        }\r\n    };\r\n    /**\r\n     * Renders the current pass. Before calling pass, activatePass needs to be called with the same index.\r\n     * @param pass The pass used to render the renderable.\r\n     * @param renderable The IRenderable object to draw.\r\n     * @param stage The Stage object used for rendering.\r\n     * @param entityCollector The EntityCollector object that contains the visible scene data.\r\n     * @param viewProjection The view-projection matrix used to project to the screen. This is not the same as\r\n     * camera.viewProjection as it includes the scaling factors when rendering to textures.\r\n     *\r\n     * @internal\r\n     */\r\n    PassBase.prototype._setRenderState = function (renderable, camera, viewProjection) {\r\n        this._shader._setRenderState(renderable, camera, viewProjection);\r\n    };\r\n    /**\r\n     * Sets the render state for the pass that is independent of the rendered object. This needs to be called before\r\n     * calling pass. Before activating a pass, the previously used pass needs to be deactivated.\r\n     * @param stage The Stage object which is currently used for rendering.\r\n     * @param camera The camera from which the scene is viewed.\r\n     * @private\r\n     */\r\n    PassBase.prototype._iActivate = function (camera) {\r\n        this._shader._iActivate(camera);\r\n    };\r\n    /**\r\n     * Clears the render state for the pass. This needs to be called before activating another pass.\r\n     * @param stage The Stage used for rendering\r\n     *\r\n     * @private\r\n     */\r\n    PassBase.prototype._iDeactivate = function () {\r\n        this._shader._iDeactivate();\r\n    };\r\n    PassBase.prototype._iIncludeDependencies = function (shader) {\r\n        this._render._iIncludeDependencies(shader);\r\n        if (this._forceSeparateMVP)\r\n            shader.globalPosDependencies++;\r\n    };\r\n    PassBase.prototype._iInitConstantData = function (shader) {\r\n    };\r\n    PassBase.prototype._iGetPreLightingVertexCode = function (shader, registerCache, sharedRegisters) {\r\n        return \"\";\r\n    };\r\n    PassBase.prototype._iGetPreLightingFragmentCode = function (shader, registerCache, sharedRegisters) {\r\n        return \"\";\r\n    };\r\n    PassBase.prototype._iGetVertexCode = function (shader, registerCache, sharedRegisters) {\r\n        return \"\";\r\n    };\r\n    PassBase.prototype._iGetFragmentCode = function (shader, registerCache, sharedRegisters) {\r\n        return \"\";\r\n    };\r\n    PassBase.prototype._iGetNormalVertexCode = function (shader, registerCache, sharedRegisters) {\r\n        return \"\";\r\n    };\r\n    PassBase.prototype._iGetNormalFragmentCode = function (shader, registerCache, sharedRegisters) {\r\n        return \"\";\r\n    };\r\n    return PassBase;\r\n}(EventDispatcher_1.EventDispatcher));\r\nexports.PassBase = PassBase;\r\n},{\"../../events/PassEvent\":\"awayjs-renderergl/lib/events/PassEvent\",\"awayjs-core/lib/events/EventDispatcher\":undefined}],\"awayjs-renderergl/lib/surfaces\":[function(require,module,exports){\n\"use strict\";\r\nvar BasicMaterialPass_1 = require(\"./surfaces/passes/BasicMaterialPass\");\r\nexports.BasicMaterialPass = BasicMaterialPass_1.BasicMaterialPass;\r\nvar PassBase_1 = require(\"./surfaces/passes/PassBase\");\r\nexports.PassBase = PassBase_1.PassBase;\r\nvar GL_BasicMaterialSurface_1 = require(\"./surfaces/GL_BasicMaterialSurface\");\r\nexports.GL_BasicMaterialSurface = GL_BasicMaterialSurface_1.GL_BasicMaterialSurface;\r\nvar GL_DepthSurface_1 = require(\"./surfaces/GL_DepthSurface\");\r\nexports.GL_DepthSurface = GL_DepthSurface_1.GL_DepthSurface;\r\nvar GL_DistanceSurface_1 = require(\"./surfaces/GL_DistanceSurface\");\r\nexports.GL_DistanceSurface = GL_DistanceSurface_1.GL_DistanceSurface;\r\nvar GL_SkyboxSurface_1 = require(\"./surfaces/GL_SkyboxSurface\");\r\nexports.GL_SkyboxSurface = GL_SkyboxSurface_1.GL_SkyboxSurface;\r\nvar GL_SurfaceBase_1 = require(\"./surfaces/GL_SurfaceBase\");\r\nexports.GL_SurfaceBase = GL_SurfaceBase_1.GL_SurfaceBase;\r\nvar GL_SurfacePassBase_1 = require(\"./surfaces/GL_SurfacePassBase\");\r\nexports.GL_SurfacePassBase = GL_SurfacePassBase_1.GL_SurfacePassBase;\r\nvar SurfacePool_1 = require(\"./surfaces/SurfacePool\");\r\nexports.SurfacePool = SurfacePool_1.SurfacePool;\r\n},{\"./surfaces/GL_BasicMaterialSurface\":\"awayjs-renderergl/lib/surfaces/GL_BasicMaterialSurface\",\"./surfaces/GL_DepthSurface\":\"awayjs-renderergl/lib/surfaces/GL_DepthSurface\",\"./surfaces/GL_DistanceSurface\":\"awayjs-renderergl/lib/surfaces/GL_DistanceSurface\",\"./surfaces/GL_SkyboxSurface\":\"awayjs-renderergl/lib/surfaces/GL_SkyboxSurface\",\"./surfaces/GL_SurfaceBase\":\"awayjs-renderergl/lib/surfaces/GL_SurfaceBase\",\"./surfaces/GL_SurfacePassBase\":\"awayjs-renderergl/lib/surfaces/GL_SurfacePassBase\",\"./surfaces/SurfacePool\":\"awayjs-renderergl/lib/surfaces/SurfacePool\",\"./surfaces/passes/BasicMaterialPass\":\"awayjs-renderergl/lib/surfaces/passes/BasicMaterialPass\",\"./surfaces/passes/PassBase\":\"awayjs-renderergl/lib/surfaces/passes/PassBase\"}],\"awayjs-renderergl/lib/textures/GL_Single2DTexture\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar MappingMode_1 = require(\"awayjs-display/lib/textures/MappingMode\");\r\nvar GL_TextureBase_1 = require(\"../textures/GL_TextureBase\");\r\n/**\r\n *\r\n * @class away.pool.GL_Single2DTexture\r\n */\r\nvar GL_Single2DTexture = (function (_super) {\r\n    __extends(GL_Single2DTexture, _super);\r\n    function GL_Single2DTexture(single2DTexture, shader) {\r\n        _super.call(this, single2DTexture, shader);\r\n        this._single2DTexture = single2DTexture;\r\n    }\r\n    GL_Single2DTexture.prototype.onClear = function (event) {\r\n        _super.prototype.onClear.call(this, event);\r\n        this._single2DTexture = null;\r\n    };\r\n    /**\r\n     *\r\n     * @param shader\r\n     * @param regCache\r\n     * @param targetReg The register in which to store the sampled colour.\r\n     * @param uvReg The uv coordinate vector with which to sample the texture map.\r\n     * @returns {string}\r\n     * @private\r\n     */\r\n    GL_Single2DTexture.prototype._iGetFragmentCode = function (targetReg, regCache, sharedReg, inputReg) {\r\n        var code = \"\";\r\n        var wrap = \"wrap\";\r\n        var format = \"\"; //this.getFormatString(this._single2DTexture.image2D);\r\n        var filter = \"linear,miplinear\";\r\n        var temp;\r\n        //modify depending on mapping mode\r\n        if (this._single2DTexture.mappingMode == MappingMode_1.MappingMode.RADIAL_GRADIENT) {\r\n            temp = regCache.getFreeFragmentVectorTemp();\r\n            code += \"mul \" + temp + \".xy, \" + inputReg + \", \" + inputReg + \"\\n\";\r\n            code += \"mul \" + temp + \".xy, \" + inputReg + \", \" + inputReg + \"\\n\";\r\n            code += \"add \" + temp + \".x, \" + temp + \".x, \" + temp + \".y\\n\";\r\n            code += \"sub \" + temp + \".y, \" + temp + \".y, \" + temp + \".y\\n\";\r\n            code += \"sqt \" + temp + \".x, \" + temp + \".x, \" + temp + \".x\\n\";\r\n            inputReg = temp;\r\n        }\r\n        //handles texture atlasing\r\n        if (this._shader.useImageRect) {\r\n            var samplerReg = regCache.getFreeFragmentConstant();\r\n            this._samplerIndex = samplerReg.index * 4;\r\n            temp = regCache.getFreeFragmentVectorTemp();\r\n            code += \"mul \" + temp + \", \" + inputReg + \", \" + samplerReg + \".xy\\n\";\r\n            code += \"add \" + temp + \", \" + temp + \", \" + samplerReg + \".zw\\n\";\r\n            inputReg = temp;\r\n        }\r\n        this._imageIndex = this._shader.getImageIndex(this._single2DTexture, 0);\r\n        var textureReg = this.getTextureReg(this._imageIndex, regCache, sharedReg);\r\n        this._textureIndex = textureReg.index;\r\n        code += \"tex \" + targetReg + \", \" + inputReg + \", \" + textureReg + \" <2d,\" + filter + \",\" + format + wrap + \">\\n\";\r\n        return code;\r\n    };\r\n    GL_Single2DTexture.prototype.activate = function (render) {\r\n        var sampler = render.samplers[this._imageIndex];\r\n        sampler.activate(this._textureIndex);\r\n        var image = render.images[this._imageIndex];\r\n        image.activate(this._textureIndex, sampler._sampler.mipmap);\r\n        if (this._shader.useImageRect) {\r\n            var index = this._samplerIndex;\r\n            var data = this._shader.fragmentConstantData;\r\n            if (!sampler._sampler.imageRect) {\r\n                data[index] = 1;\r\n                data[index + 1] = 1;\r\n                data[index + 2] = 0;\r\n                data[index + 3] = 0;\r\n            }\r\n            else {\r\n                data[index] = sampler._sampler.imageRect.width;\r\n                data[index + 1] = sampler._sampler.imageRect.height;\r\n                data[index + 2] = sampler._sampler.imageRect.x;\r\n                data[index + 3] = sampler._sampler.imageRect.y;\r\n            }\r\n        }\r\n    };\r\n    GL_Single2DTexture.prototype._setRenderState = function (renderable) {\r\n        var sampler = renderable.samplers[this._imageIndex];\r\n        if (sampler)\r\n            sampler.activate(this._textureIndex);\r\n        var image = renderable.images[this._imageIndex];\r\n        if (image)\r\n            image.activate(this._textureIndex, sampler._sampler.mipmap);\r\n        if (this._shader.useImageRect && sampler) {\r\n            var index = this._samplerIndex;\r\n            var data = this._shader.fragmentConstantData;\r\n            if (!sampler._sampler.imageRect) {\r\n                data[index] = 1;\r\n                data[index + 1] = 1;\r\n                data[index + 2] = 0;\r\n                data[index + 3] = 0;\r\n            }\r\n            else {\r\n                data[index] = sampler._sampler.imageRect.width;\r\n                data[index + 1] = sampler._sampler.imageRect.height;\r\n                data[index + 2] = sampler._sampler.imageRect.x;\r\n                data[index + 3] = sampler._sampler.imageRect.y;\r\n            }\r\n        }\r\n    };\r\n    return GL_Single2DTexture;\r\n}(GL_TextureBase_1.GL_TextureBase));\r\nexports.GL_Single2DTexture = GL_Single2DTexture;\r\n},{\"../textures/GL_TextureBase\":\"awayjs-renderergl/lib/textures/GL_TextureBase\",\"awayjs-display/lib/textures/MappingMode\":undefined}],\"awayjs-renderergl/lib/textures/GL_SingleCubeTexture\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar GL_TextureBase_1 = require(\"../textures/GL_TextureBase\");\r\n/**\r\n *\r\n * @class away.pool.TextureDataBase\r\n */\r\nvar GL_SingleCubeTexture = (function (_super) {\r\n    __extends(GL_SingleCubeTexture, _super);\r\n    function GL_SingleCubeTexture(singleCubeTexture, shader) {\r\n        _super.call(this, singleCubeTexture, shader);\r\n        this._singleCubeTexture = singleCubeTexture;\r\n    }\r\n    GL_SingleCubeTexture.prototype.onClear = function (event) {\r\n        _super.prototype.onClear.call(this, event);\r\n        this._singleCubeTexture = null;\r\n    };\r\n    GL_SingleCubeTexture.prototype._iIncludeDependencies = function (includeInput) {\r\n        if (includeInput === void 0) { includeInput = true; }\r\n        if (includeInput)\r\n            this._shader.usesPositionFragment = true;\r\n    };\r\n    /**\r\n     *\r\n     * @param shader\r\n     * @param regCache\r\n     * @param targetReg The register in which to store the sampled colour.\r\n     * @param uvReg The direction vector with which to sample the cube map.\r\n     * @returns {string}\r\n     * @private\r\n     */\r\n    GL_SingleCubeTexture.prototype._iGetFragmentCode = function (targetReg, regCache, sharedReg, inputReg) {\r\n        var format = \"\"; //this.getFormatString(this._singleCubeTexture.imageCube);\r\n        var filter = \"linear,miplinear\";\r\n        this._imageIndex = this._shader.getImageIndex(this._singleCubeTexture, 0);\r\n        var textureReg = this.getTextureReg(this._imageIndex, regCache, sharedReg);\r\n        this._textureIndex = textureReg.index;\r\n        return \"tex \" + targetReg + \", \" + inputReg + \", \" + textureReg + \" <cube,\" + format + filter + \">\\n\";\r\n    };\r\n    GL_SingleCubeTexture.prototype.activate = function (render) {\r\n        var sampler = render.samplers[this._imageIndex];\r\n        if (sampler)\r\n            sampler.activate(this._textureIndex);\r\n        if (render.images[this._imageIndex])\r\n            render.images[this._imageIndex].activate(this._textureIndex, sampler._sampler.mipmap);\r\n    };\r\n    GL_SingleCubeTexture.prototype._setRenderState = function (renderable) {\r\n        var sampler = renderable.samplers[this._imageIndex];\r\n        if (sampler)\r\n            sampler.activate(this._textureIndex);\r\n        if (renderable.images[this._imageIndex] && sampler)\r\n            renderable.images[this._imageIndex].activate(this._textureIndex, sampler._sampler.mipmap);\r\n    };\r\n    return GL_SingleCubeTexture;\r\n}(GL_TextureBase_1.GL_TextureBase));\r\nexports.GL_SingleCubeTexture = GL_SingleCubeTexture;\r\n},{\"../textures/GL_TextureBase\":\"awayjs-renderergl/lib/textures/GL_TextureBase\"}],\"awayjs-renderergl/lib/textures/GL_TextureBase\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar AbstractMethodError_1 = require(\"awayjs-core/lib/errors/AbstractMethodError\");\r\nvar AbstractionBase_1 = require(\"awayjs-core/lib/library/AbstractionBase\");\r\nvar ContextGLTextureFormat_1 = require(\"awayjs-stagegl/lib/base/ContextGLTextureFormat\");\r\n/**\r\n *\r\n * @class away.pool.GL_TextureBaseBase\r\n */\r\nvar GL_TextureBase = (function (_super) {\r\n    __extends(GL_TextureBase, _super);\r\n    function GL_TextureBase(texture, shader) {\r\n        _super.call(this, texture, shader);\r\n        this._texture = texture;\r\n        this._shader = shader;\r\n        this._stage = shader._stage;\r\n    }\r\n    /**\r\n     *\r\n     */\r\n    GL_TextureBase.prototype.onClear = function (event) {\r\n        _super.prototype.onClear.call(this, event);\r\n        this._texture = null;\r\n        this._shader = null;\r\n        this._stage = null;\r\n    };\r\n    GL_TextureBase.prototype._iGetFragmentCode = function (targetReg, regCache, sharedReg, inputReg) {\r\n        if (inputReg === void 0) { inputReg = null; }\r\n        throw new AbstractMethodError_1.AbstractMethodError();\r\n    };\r\n    GL_TextureBase.prototype._setRenderState = function (renderable) {\r\n        //overidden for state logic\r\n    };\r\n    GL_TextureBase.prototype.activate = function (render) {\r\n        //overridden for activation logic\r\n    };\r\n    GL_TextureBase.prototype.getTextureReg = function (imageIndex, regCache, sharedReg) {\r\n        var index = this._shader.imageIndices.indexOf(imageIndex); //todo: collapse the index based on duplicate image objects to save registrations\r\n        if (index == -1) {\r\n            var textureReg = regCache.getFreeTextureReg();\r\n            sharedReg.textures.push(textureReg);\r\n            this._shader.imageIndices.push(imageIndex);\r\n            return textureReg;\r\n        }\r\n        return sharedReg.textures[index];\r\n    };\r\n    GL_TextureBase.prototype.getFormatString = function (image) {\r\n        switch (image.format) {\r\n            case ContextGLTextureFormat_1.ContextGLTextureFormat.COMPRESSED:\r\n                return \"dxt1,\";\r\n            case ContextGLTextureFormat_1.ContextGLTextureFormat.COMPRESSED_ALPHA:\r\n                return \"dxt5,\";\r\n            default:\r\n                return \"\";\r\n        }\r\n    };\r\n    return GL_TextureBase;\r\n}(AbstractionBase_1.AbstractionBase));\r\nexports.GL_TextureBase = GL_TextureBase;\r\n},{\"awayjs-core/lib/errors/AbstractMethodError\":undefined,\"awayjs-core/lib/library/AbstractionBase\":undefined,\"awayjs-stagegl/lib/base/ContextGLTextureFormat\":undefined}],\"awayjs-renderergl/lib/textures\":[function(require,module,exports){\n\"use strict\";\r\nvar GL_Single2DTexture_1 = require(\"./textures/GL_Single2DTexture\");\r\nexports.GL_Single2DTexture = GL_Single2DTexture_1.GL_Single2DTexture;\r\nvar GL_SingleCubeTexture_1 = require(\"./textures/GL_SingleCubeTexture\");\r\nexports.GL_SingleCubeTexture = GL_SingleCubeTexture_1.GL_SingleCubeTexture;\r\nvar GL_TextureBase_1 = require(\"./textures/GL_TextureBase\");\r\nexports.GL_TextureBase = GL_TextureBase_1.GL_TextureBase;\r\n},{\"./textures/GL_Single2DTexture\":\"awayjs-renderergl/lib/textures/GL_Single2DTexture\",\"./textures/GL_SingleCubeTexture\":\"awayjs-renderergl/lib/textures/GL_SingleCubeTexture\",\"./textures/GL_TextureBase\":\"awayjs-renderergl/lib/textures/GL_TextureBase\"}],\"awayjs-renderergl/lib/tools/commands/Merge\":[function(require,module,exports){\n\"use strict\";\r\nvar AttributesBuffer_1 = require(\"awayjs-core/lib/attributes/AttributesBuffer\");\r\nvar Matrix3DUtils_1 = require(\"awayjs-core/lib/geom/Matrix3DUtils\");\r\nvar TriangleElements_1 = require(\"awayjs-display/lib/graphics/TriangleElements\");\r\nvar Sprite_1 = require(\"awayjs-display/lib/display/Sprite\");\r\n/**\r\n *  Class Merge merges two or more static sprites into one.<code>Merge</code>\r\n */\r\nvar Merge = (function () {\r\n    /**\r\n     * @param    keepMaterial    [optional]    Determines if the merged object uses the recevier sprite material information or keeps its source material(s). Defaults to false.\r\n     * If false and receiver object has multiple materials, the last material found in receiver subsprites is applied to the merged subsprite(es).\r\n     * @param    disposeSources  [optional]    Determines if the sprite and geometry source(s) used for the merging are disposed. Defaults to false.\r\n     * If true, only receiver geometry and resulting sprite are kept in  memory.\r\n     * @param    objectSpace     [optional]    Determines if source sprite(es) is/are merged using objectSpace or worldspace. Defaults to false.\r\n     */\r\n    function Merge(keepMaterial, disposeSources, objectSpace) {\r\n        if (keepMaterial === void 0) { keepMaterial = false; }\r\n        if (disposeSources === void 0) { disposeSources = false; }\r\n        if (objectSpace === void 0) { objectSpace = false; }\r\n        this._keepMaterial = keepMaterial;\r\n        this._disposeSources = disposeSources;\r\n        this._objectSpace = objectSpace;\r\n    }\r\n    Object.defineProperty(Merge.prototype, \"disposeSources\", {\r\n        get: function () {\r\n            return this._disposeSources;\r\n        },\r\n        /**\r\n         * Determines if the sprite and geometry source(s) used for the merging are disposed. Defaults to false.\r\n         */\r\n        set: function (b) {\r\n            this._disposeSources = b;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Merge.prototype, \"keepMaterial\", {\r\n        get: function () {\r\n            return this._keepMaterial;\r\n        },\r\n        /**\r\n         * Determines if the material source(s) used for the merging are disposed. Defaults to false.\r\n         */\r\n        set: function (b) {\r\n            this._keepMaterial = b;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Merge.prototype, \"objectSpace\", {\r\n        get: function () {\r\n            return this._objectSpace;\r\n        },\r\n        /**\r\n         * Determines if source sprite(es) is/are merged using objectSpace or worldspace. Defaults to false.\r\n         */\r\n        set: function (b) {\r\n            this._objectSpace = b;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Merges all the children of a container into a single Sprite. If no Sprite object is found, method returns the receiver without modification.\r\n     *\r\n     * @param    receiver           The Sprite to receive the merged contents of the container.\r\n     * @param    objectContainer    The DisplayObjectContainer holding the sprites to be mergd.\r\n     *\r\n     * @return The merged Sprite instance.\r\n     */\r\n    Merge.prototype.applyToContainer = function (receiver, objectContainer) {\r\n        this.reset();\r\n        //collect container sprites\r\n        this.parseContainer(receiver, objectContainer);\r\n        //collect receiver\r\n        this.collect(receiver, false);\r\n        //merge to receiver\r\n        this.merge(receiver, this._disposeSources);\r\n    };\r\n    /**\r\n     * Merges all the sprites found in the Array&lt;Sprite&gt; into a single Sprite.\r\n     *\r\n     * @param    receiver    The Sprite to receive the merged contents of the sprites.\r\n     * @param    sprites      A series of Sprites to be merged with the reciever sprite.\r\n     */\r\n    Merge.prototype.applyToSprites = function (receiver, sprites) {\r\n        this.reset();\r\n        if (!sprites.length)\r\n            return;\r\n        //collect sprites in vector\r\n        for (var i = 0; i < sprites.length; i++)\r\n            if (sprites[i] != receiver)\r\n                this.collect(sprites[i], this._disposeSources);\r\n        //collect receiver\r\n        this.collect(receiver, false);\r\n        //merge to receiver\r\n        this.merge(receiver, this._disposeSources);\r\n    };\r\n    /**\r\n     *  Merges 2 sprites into one. It is recommand to use apply when 2 sprites are to be merged. If more need to be merged, use either applyToSprites or applyToContainer methods.\r\n     *\r\n     * @param    receiver    The Sprite to receive the merged contents of both sprites.\r\n     * @param    sprite        The Sprite to be merged with the receiver sprite\r\n     */\r\n    Merge.prototype.apply = function (receiver, sprite) {\r\n        this.reset();\r\n        //collect sprite\r\n        this.collect(sprite, this._disposeSources);\r\n        //collect receiver\r\n        this.collect(receiver, false);\r\n        //merge to receiver\r\n        this.merge(receiver, this._disposeSources);\r\n    };\r\n    Merge.prototype.reset = function () {\r\n        this._toDispose = new Array();\r\n        this._graphicVOs = new Array();\r\n    };\r\n    Merge.prototype.merge = function (destSprite, dispose) {\r\n        var i;\r\n        //var oldGraphics:Graphics;\r\n        var destGraphics;\r\n        var useSubMaterials;\r\n        //oldGraphics = destSprite.graphics.clone();\r\n        destGraphics = destSprite.graphics;\r\n        // Only apply materials directly to sub-sprites if necessary,\r\n        // i.e. if there is more than one material available.\r\n        useSubMaterials = (this._graphicVOs.length > 1);\r\n        for (i = 0; i < this._graphicVOs.length; i++) {\r\n            var elements = new TriangleElements_1.TriangleElements(new AttributesBuffer_1.AttributesBuffer());\r\n            elements.autoDeriveNormals = false;\r\n            elements.autoDeriveTangents = false;\r\n            var data = this._graphicVOs[i];\r\n            elements.setIndices(data.indices);\r\n            elements.setPositions(data.vertices);\r\n            elements.setNormals(data.normals);\r\n            elements.setTangents(data.tangents);\r\n            elements.setUVs(data.uvs);\r\n            if (this._keepMaterial && useSubMaterials)\r\n                destGraphics.addGraphic(elements, data.material);\r\n            else\r\n                destGraphics.addGraphic(elements);\r\n        }\r\n        if (this._keepMaterial && !useSubMaterials && this._graphicVOs.length)\r\n            destSprite.material = this._graphicVOs[0].material;\r\n        if (dispose) {\r\n            var len = this._toDispose.length;\r\n            for (var i; i < len; i++)\r\n                this._toDispose[i].dispose();\r\n        }\r\n        this._toDispose = null;\r\n    };\r\n    Merge.prototype.collect = function (sprite, dispose) {\r\n        var subIdx;\r\n        var calc;\r\n        for (subIdx = 0; subIdx < sprite.graphics.count; subIdx++) {\r\n            var i;\r\n            var len;\r\n            var iIdx, vIdx, nIdx, tIdx, uIdx;\r\n            var indexOffset;\r\n            var elements;\r\n            var vo;\r\n            var vertices;\r\n            var normals;\r\n            var tangents;\r\n            var ind;\r\n            elements = sprite.graphics.getGraphicAt(subIdx).elements;\r\n            // Get (or create) a VO for this material\r\n            vo = this.getGraphicData(sprite.graphics.getGraphicAt(subIdx).material);\r\n            // Vertices and normals are copied to temporary vectors, to be transformed\r\n            // before concatenated onto those of the data. This is unnecessary if no\r\n            // transformation will be performed, i.e. for object space merging.\r\n            vertices = (this._objectSpace) ? vo.vertices : new Array();\r\n            normals = (this._objectSpace) ? vo.normals : new Array();\r\n            tangents = (this._objectSpace) ? vo.tangents : new Array();\r\n            // Copy over vertex attributes\r\n            vIdx = vertices.length;\r\n            nIdx = normals.length;\r\n            tIdx = tangents.length;\r\n            uIdx = vo.uvs.length;\r\n            this.copyAttributes(elements.positions, vertices, elements.numVertices, vIdx);\r\n            this.copyAttributes(elements.normals, normals, elements.numVertices, nIdx);\r\n            this.copyAttributes(elements.tangents, tangents, elements.numVertices, tIdx);\r\n            this.copyAttributes(elements.uvs, vo.uvs, elements.numVertices, uIdx);\r\n            // Copy over triangle indices\r\n            indexOffset = (!this._objectSpace) ? vo.vertices.length / 3 : 0;\r\n            iIdx = vo.indices.length;\r\n            len = elements.numElements;\r\n            ind = elements.indices.get(len);\r\n            for (i = 0; i < len; i++) {\r\n                calc = i * 3;\r\n                vo.indices[iIdx++] = ind[calc] + indexOffset;\r\n                vo.indices[iIdx++] = ind[calc + 1] + indexOffset;\r\n                vo.indices[iIdx++] = ind[calc + 2] + indexOffset;\r\n            }\r\n            if (!this._objectSpace) {\r\n                sprite.sceneTransform.transformVectors(vertices, vertices);\r\n                Matrix3DUtils_1.Matrix3DUtils.deltaTransformVectors(sprite.sceneTransform, normals, normals);\r\n                Matrix3DUtils_1.Matrix3DUtils.deltaTransformVectors(sprite.sceneTransform, tangents, tangents);\r\n                // Copy vertex data from temporary (transformed) vectors\r\n                vIdx = vo.vertices.length;\r\n                nIdx = vo.normals.length;\r\n                tIdx = vo.tangents.length;\r\n                len = vertices.length;\r\n                for (i = 0; i < len; i++) {\r\n                    vo.vertices[vIdx++] = vertices[i];\r\n                    vo.normals[nIdx++] = normals[i];\r\n                    vo.tangents[tIdx++] = tangents[i];\r\n                }\r\n            }\r\n        }\r\n        if (dispose)\r\n            this._toDispose.push(sprite);\r\n    };\r\n    Merge.prototype.copyAttributes = function (attributes, array, count, startIndex) {\r\n        var vertices = attributes.get(count);\r\n        var dim = attributes.dimensions;\r\n        var stride = attributes.stride;\r\n        var len = count * stride;\r\n        for (var i = 0; i < len; i += stride)\r\n            for (var j = 0; j < dim; j++)\r\n                array[startIndex++] = vertices[i + j];\r\n    };\r\n    Merge.prototype.getGraphicData = function (material) {\r\n        var data;\r\n        if (this._keepMaterial) {\r\n            var i;\r\n            var len;\r\n            len = this._graphicVOs.length;\r\n            for (i = 0; i < len; i++) {\r\n                if (this._graphicVOs[i].material == material) {\r\n                    data = this._graphicVOs[i];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else if (this._graphicVOs.length) {\r\n            // If materials are not to be kept, all data can be\r\n            // put into a single VO, so return that one.\r\n            data = this._graphicVOs[0];\r\n        }\r\n        // No data (for this material) found, create new.\r\n        if (!data) {\r\n            data = new GraphicVO();\r\n            data.vertices = new Array();\r\n            data.normals = new Array();\r\n            data.tangents = new Array();\r\n            data.uvs = new Array();\r\n            data.indices = new Array();\r\n            data.material = material;\r\n            this._graphicVOs.push(data);\r\n        }\r\n        return data;\r\n    };\r\n    Merge.prototype.parseContainer = function (receiver, object) {\r\n        var child;\r\n        var i;\r\n        if (object instanceof Sprite_1.Sprite && object != receiver)\r\n            this.collect(object, this._disposeSources);\r\n        for (i = 0; i < object.numChildren; ++i) {\r\n            child = object.getChildAt(i);\r\n            this.parseContainer(receiver, child);\r\n        }\r\n    };\r\n    return Merge;\r\n}());\r\nexports.Merge = Merge;\r\nvar GraphicVO = (function () {\r\n    function GraphicVO() {\r\n    }\r\n    return GraphicVO;\r\n}());\r\nexports.GraphicVO = GraphicVO;\r\n},{\"awayjs-core/lib/attributes/AttributesBuffer\":undefined,\"awayjs-core/lib/geom/Matrix3DUtils\":undefined,\"awayjs-display/lib/display/Sprite\":undefined,\"awayjs-display/lib/graphics/TriangleElements\":undefined}],\"awayjs-renderergl/lib/tools/data/ParticleGraphicsTransform\":[function(require,module,exports){\n\"use strict\";\r\n/**\r\n * ...\r\n */\r\nvar ParticleGraphicsTransform = (function () {\r\n    function ParticleGraphicsTransform() {\r\n    }\r\n    Object.defineProperty(ParticleGraphicsTransform.prototype, \"vertexTransform\", {\r\n        get: function () {\r\n            return this._defaultVertexTransform;\r\n        },\r\n        set: function (value) {\r\n            this._defaultVertexTransform = value;\r\n            this._defaultInvVertexTransform = value.clone();\r\n            this._defaultInvVertexTransform.invert();\r\n            this._defaultInvVertexTransform.transpose();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ParticleGraphicsTransform.prototype, \"UVTransform\", {\r\n        get: function () {\r\n            return this._defaultUVTransform;\r\n        },\r\n        set: function (value) {\r\n            this._defaultUVTransform = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ParticleGraphicsTransform.prototype, \"invVertexTransform\", {\r\n        get: function () {\r\n            return this._defaultInvVertexTransform;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return ParticleGraphicsTransform;\r\n}());\r\nexports.ParticleGraphicsTransform = ParticleGraphicsTransform;\r\n},{}],\"awayjs-renderergl/lib/tools\":[function(require,module,exports){\n\"use strict\";\r\nvar Merge_1 = require(\"./tools/commands/Merge\");\r\nexports.Merge = Merge_1.Merge;\r\nvar ParticleGraphicsTransform_1 = require(\"./tools/data/ParticleGraphicsTransform\");\r\nexports.ParticleGraphicsTransform = ParticleGraphicsTransform_1.ParticleGraphicsTransform;\r\n},{\"./tools/commands/Merge\":\"awayjs-renderergl/lib/tools/commands/Merge\",\"./tools/data/ParticleGraphicsTransform\":\"awayjs-renderergl/lib/tools/data/ParticleGraphicsTransform\"}],\"awayjs-renderergl/lib/utils/ParticleGraphicsHelper\":[function(require,module,exports){\n\"use strict\";\r\nvar AttributesBuffer_1 = require(\"awayjs-core/lib/attributes/AttributesBuffer\");\r\nvar Point_1 = require(\"awayjs-core/lib/geom/Point\");\r\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\r\nvar ParticleData_1 = require(\"awayjs-display/lib/animators/data/ParticleData\");\r\nvar TriangleElements_1 = require(\"awayjs-display/lib/graphics/TriangleElements\");\r\n/**\r\n * ...\r\n */\r\nvar ParticleGraphicsHelper = (function () {\r\n    function ParticleGraphicsHelper() {\r\n    }\r\n    ParticleGraphicsHelper.generateGraphics = function (output, graphicsArray, transforms) {\r\n        if (transforms === void 0) { transforms = null; }\r\n        var indicesVector = new Array();\r\n        var positionsVector = new Array();\r\n        var normalsVector = new Array();\r\n        var tangentsVector = new Array();\r\n        var uvsVector = new Array();\r\n        var vertexCounters = new Array();\r\n        var particles = new Array();\r\n        var elementsArray = new Array();\r\n        var numParticles = graphicsArray.length;\r\n        var sourceGraphics;\r\n        var sourceElements;\r\n        var numGraphics;\r\n        var indices;\r\n        var positions;\r\n        var normals;\r\n        var tangents;\r\n        var uvs;\r\n        var vertexCounter;\r\n        var elements;\r\n        var i;\r\n        var j;\r\n        var sub2SubMap = new Array();\r\n        var tempVertex = new Vector3D_1.Vector3D;\r\n        var tempNormal = new Vector3D_1.Vector3D;\r\n        var tempTangents = new Vector3D_1.Vector3D;\r\n        var tempUV = new Point_1.Point;\r\n        for (i = 0; i < numParticles; i++) {\r\n            sourceGraphics = graphicsArray[i];\r\n            numGraphics = sourceGraphics.count;\r\n            for (var srcIndex = 0; srcIndex < numGraphics; srcIndex++) {\r\n                //create a different particle subgeometry group for each source subgeometry in a particle.\r\n                if (sub2SubMap.length <= srcIndex) {\r\n                    sub2SubMap.push(elementsArray.length);\r\n                    indicesVector.push(new Array());\r\n                    positionsVector.push(new Array());\r\n                    normalsVector.push(new Array());\r\n                    tangentsVector.push(new Array());\r\n                    uvsVector.push(new Array());\r\n                    elementsArray.push(new TriangleElements_1.TriangleElements(new AttributesBuffer_1.AttributesBuffer()));\r\n                    vertexCounters.push(0);\r\n                }\r\n                sourceElements = sourceGraphics.getGraphicAt(srcIndex).elements;\r\n                //add a new particle subgeometry if this source subgeometry will take us over the maxvertex limit\r\n                if (sourceElements.numVertices + vertexCounters[sub2SubMap[srcIndex]] > ParticleGraphicsHelper.MAX_VERTEX) {\r\n                    //update submap and add new subgeom vectors\r\n                    sub2SubMap[srcIndex] = elementsArray.length;\r\n                    indicesVector.push(new Array());\r\n                    positionsVector.push(new Array());\r\n                    normalsVector.push(new Array());\r\n                    tangentsVector.push(new Array());\r\n                    uvsVector.push(new Array());\r\n                    elementsArray.push(new TriangleElements_1.TriangleElements(new AttributesBuffer_1.AttributesBuffer()));\r\n                    vertexCounters.push(0);\r\n                }\r\n                j = sub2SubMap[srcIndex];\r\n                //select the correct vector\r\n                indices = indicesVector[j];\r\n                positions = positionsVector[j];\r\n                normals = normalsVector[j];\r\n                tangents = tangentsVector[j];\r\n                uvs = uvsVector[j];\r\n                vertexCounter = vertexCounters[j];\r\n                elements = elementsArray[j];\r\n                var particleData = new ParticleData_1.ParticleData();\r\n                particleData.numVertices = sourceElements.numVertices;\r\n                particleData.startVertexIndex = vertexCounter;\r\n                particleData.particleIndex = i;\r\n                particleData.elements = elements;\r\n                particles.push(particleData);\r\n                vertexCounters[j] += sourceElements.numVertices;\r\n                var k;\r\n                var index;\r\n                var posIndex;\r\n                var normalIndex;\r\n                var tangentIndex;\r\n                var uvIndex;\r\n                var tempLen;\r\n                var compact = sourceElements;\r\n                var sourcePositions;\r\n                var posStride;\r\n                var sourceNormals;\r\n                var normalStride;\r\n                var sourceTangents;\r\n                var tangentStride;\r\n                var sourceUVs;\r\n                var uvStride;\r\n                if (compact) {\r\n                    tempLen = compact.numVertices;\r\n                    sourcePositions = compact.positions.get(tempLen);\r\n                    posStride = compact.positions.stride;\r\n                    sourceNormals = compact.normals.get(tempLen);\r\n                    normalStride = compact.normals.stride;\r\n                    sourceTangents = compact.tangents.get(tempLen);\r\n                    tangentStride = compact.tangents.stride;\r\n                    sourceUVs = compact.uvs.get(tempLen);\r\n                    uvStride = compact.uvs.stride;\r\n                    if (transforms) {\r\n                        var particleGraphicsTransform = transforms[i];\r\n                        var vertexTransform = particleGraphicsTransform.vertexTransform;\r\n                        var invVertexTransform = particleGraphicsTransform.invVertexTransform;\r\n                        var UVTransform = particleGraphicsTransform.UVTransform;\r\n                        for (k = 0; k < tempLen; k++) {\r\n                            /*\r\n                             * 0 - 2: vertex position X, Y, Z\r\n                             * 3 - 5: normal X, Y, Z\r\n                             * 6 - 8: tangent X, Y, Z\r\n                             * 9 - 10: U V\r\n                             * 11 - 12: Secondary U V*/\r\n                            posIndex = k * posStride;\r\n                            tempVertex.x = sourcePositions[posIndex];\r\n                            tempVertex.y = sourcePositions[posIndex + 1];\r\n                            tempVertex.z = sourcePositions[posIndex + 2];\r\n                            normalIndex = k * normalStride;\r\n                            tempNormal.x = sourceNormals[normalIndex];\r\n                            tempNormal.y = sourceNormals[normalIndex + 1];\r\n                            tempNormal.z = sourceNormals[normalIndex + 2];\r\n                            tangentIndex = k * tangentStride;\r\n                            tempTangents.x = sourceTangents[tangentIndex];\r\n                            tempTangents.y = sourceTangents[tangentIndex + 1];\r\n                            tempTangents.z = sourceTangents[tangentIndex + 2];\r\n                            uvIndex = k * uvStride;\r\n                            tempUV.x = sourceUVs[uvIndex];\r\n                            tempUV.y = sourceUVs[uvIndex + 1];\r\n                            if (vertexTransform) {\r\n                                tempVertex = vertexTransform.transformVector(tempVertex);\r\n                                tempNormal = invVertexTransform.deltaTransformVector(tempNormal);\r\n                                tempTangents = invVertexTransform.deltaTransformVector(tempNormal);\r\n                            }\r\n                            if (UVTransform)\r\n                                tempUV = UVTransform.transformPoint(tempUV);\r\n                            //this is faster than that only push one data\r\n                            positions.push(tempVertex.x, tempVertex.y, tempVertex.z);\r\n                            normals.push(tempNormal.x, tempNormal.y, tempNormal.z);\r\n                            tangents.push(tempTangents.x, tempTangents.y, tempTangents.z);\r\n                            uvs.push(tempUV.x, tempUV.y);\r\n                        }\r\n                    }\r\n                    else {\r\n                        for (k = 0; k < tempLen; k++) {\r\n                            posIndex = k * posStride;\r\n                            normalIndex = k * normalStride;\r\n                            tangentIndex = k * tangentStride;\r\n                            uvIndex = k * uvStride;\r\n                            //this is faster than that only push one data\r\n                            positions.push(sourcePositions[posIndex], sourcePositions[posIndex + 1], sourcePositions[posIndex + 2]);\r\n                            normals.push(sourceNormals[normalIndex], sourceNormals[normalIndex + 1], sourceNormals[normalIndex + 2]);\r\n                            tangents.push(sourceTangents[tangentIndex], sourceTangents[tangentIndex + 1], sourceTangents[tangentIndex + 2]);\r\n                            uvs.push(sourceUVs[uvIndex], sourceUVs[uvIndex + 1]);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                }\r\n                tempLen = sourceElements.numElements;\r\n                var sourceIndices = sourceElements.indices.get(tempLen);\r\n                for (k = 0; k < tempLen; k++) {\r\n                    index = k * 3;\r\n                    indices.push(sourceIndices[index] + vertexCounter, sourceIndices[index + 1] + vertexCounter, sourceIndices[index + 2] + vertexCounter);\r\n                }\r\n            }\r\n        }\r\n        output.particles = particles;\r\n        output.numParticles = numParticles;\r\n        numParticles = elementsArray.length;\r\n        for (i = 0; i < numParticles; i++) {\r\n            elements = elementsArray[i];\r\n            elements.autoDeriveNormals = false;\r\n            elements.autoDeriveTangents = false;\r\n            elements.setIndices(indicesVector[i]);\r\n            elements.setPositions(positionsVector[i]);\r\n            elements.setNormals(normalsVector[i]);\r\n            elements.setTangents(tangentsVector[i]);\r\n            elements.setUVs(uvsVector[i]);\r\n            output.addGraphic(elements);\r\n        }\r\n    };\r\n    ParticleGraphicsHelper.MAX_VERTEX = 65535;\r\n    return ParticleGraphicsHelper;\r\n}());\r\nexports.ParticleGraphicsHelper = ParticleGraphicsHelper;\r\n},{\"awayjs-core/lib/attributes/AttributesBuffer\":undefined,\"awayjs-core/lib/geom/Point\":undefined,\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-display/lib/animators/data/ParticleData\":undefined,\"awayjs-display/lib/graphics/TriangleElements\":undefined}],\"awayjs-renderergl/lib/utils/PerspectiveMatrix3D\":[function(require,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Matrix3D_1 = require(\"awayjs-core/lib/geom/Matrix3D\");\r\n/**\r\n *\r\n */\r\nvar PerspectiveMatrix3D = (function (_super) {\r\n    __extends(PerspectiveMatrix3D, _super);\r\n    function PerspectiveMatrix3D(v) {\r\n        if (v === void 0) { v = null; }\r\n        _super.call(this, v);\r\n    }\r\n    PerspectiveMatrix3D.prototype.perspectiveFieldOfViewLH = function (fieldOfViewY, aspectRatio, zNear, zFar) {\r\n        var yScale = 1 / Math.tan(fieldOfViewY / 2);\r\n        var xScale = yScale / aspectRatio;\r\n        this.rawData[0] = xScale;\r\n        this.rawData[1] = 0.0;\r\n        this.rawData[2] = 0.0;\r\n        this.rawData[3] = 0.0;\r\n        this.rawData[4] = 0.0;\r\n        this.rawData[5] = yScale;\r\n        this.rawData[6] = 0.0;\r\n        this.rawData[7] = 0.0;\r\n        this.rawData[8] = 0.0;\r\n        this.rawData[9] = 0.0;\r\n        this.rawData[10] = zFar / (zFar - zNear);\r\n        this.rawData[11] = 1.0;\r\n        this.rawData[12] = 0.0;\r\n        this.rawData[13] = 0.0;\r\n        this.rawData[14] = (zNear * zFar) / (zNear - zFar);\r\n        this.rawData[15] = 0.0;\r\n    };\r\n    return PerspectiveMatrix3D;\r\n}(Matrix3D_1.Matrix3D));\r\nexports.PerspectiveMatrix3D = PerspectiveMatrix3D;\r\n},{\"awayjs-core/lib/geom/Matrix3D\":undefined}],\"awayjs-renderergl/lib/utils\":[function(require,module,exports){\n\"use strict\";\r\nvar ParticleGraphicsHelper_1 = require(\"./utils/ParticleGraphicsHelper\");\r\nexports.ParticleGraphicsHelper = ParticleGraphicsHelper_1.ParticleGraphicsHelper;\r\nvar PerspectiveMatrix3D_1 = require(\"./utils/PerspectiveMatrix3D\");\r\nexports.PerspectiveMatrix3D = PerspectiveMatrix3D_1.PerspectiveMatrix3D;\r\n},{\"./utils/ParticleGraphicsHelper\":\"awayjs-renderergl/lib/utils/ParticleGraphicsHelper\",\"./utils/PerspectiveMatrix3D\":\"awayjs-renderergl/lib/utils/PerspectiveMatrix3D\"}]},{},[1])\n\n",
    "import * as animators\t\t\t\tfrom \"./lib/animators\";\r\nimport * as elements\t\t\t\tfrom \"./lib/elements\";\r\nimport * as errors\t\t\t\t\tfrom \"./lib/errors\";\r\nimport * as events\t\t\t\t\tfrom \"./lib/events\";\r\nimport * as filters\t\t\t\t\tfrom \"./lib/filters\";\r\nimport * as managers\t\t\t\tfrom \"./lib/managers\";\r\nimport * as renderables\t\t\t\tfrom \"./lib/renderables\";\r\nimport * as shaders\t\t\t\t\tfrom \"./lib/shaders\";\r\nimport * as sort\t\t\t\t\tfrom \"./lib/sort\";\r\nimport * as surfaces\t\t\t\tfrom \"./lib/surfaces\";\r\nimport * as textures\t\t\t\tfrom \"./lib/textures\";\r\nimport * as tools\t\t\t\t\tfrom \"./lib/tools\";\r\nimport * as utils\t\t\t\t\tfrom \"./lib/utils\";\r\nimport {DefaultRenderer}\t\t\t\tfrom \"./lib/DefaultRenderer\";\r\nimport {DepthRenderer}\t\t\t\tfrom \"./lib/DepthRenderer\";\r\nimport {DistanceRenderer}\t\t\t\tfrom \"./lib/DistanceRenderer\";\r\nimport {Filter3DRenderer}\t\t\t\tfrom \"./lib/Filter3DRenderer\";\r\nimport {RendererBase}\t\t\t\t\tfrom \"./lib/RendererBase\";\r\n\r\nimport {BasicMaterial}\t\t\t\tfrom \"awayjs-display/lib/materials/BasicMaterial\";\r\nimport {Skybox}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Skybox\";\r\nimport {Billboard}\t\t\t\t\tfrom \"awayjs-display/lib/display/Billboard\";\r\nimport {LineSegment}\t\t\t\t\tfrom \"awayjs-display/lib/display/LineSegment\";\r\nimport {LineElements}\t\t\t\t\tfrom \"awayjs-display/lib/graphics/LineElements\";\r\nimport {TriangleElements}\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\r\nimport {Graphic}\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphic\";\r\nimport {Single2DTexture}\t\t\t\tfrom \"awayjs-display/lib/textures/Single2DTexture\";\r\nimport {SingleCubeTexture}\t\t\tfrom \"awayjs-display/lib/textures/SingleCubeTexture\";\r\n\r\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\n\r\nsurfaces.SurfacePool.registerAbstraction(surfaces.GL_BasicMaterialSurface, BasicMaterial);\r\nsurfaces.SurfacePool.registerAbstraction(surfaces.GL_SkyboxSurface, Skybox);\r\n\r\nStage.registerAbstraction(elements.GL_LineElements, LineElements);\r\nStage.registerAbstraction(elements.GL_TriangleElements, TriangleElements);\r\n\r\nshaders.ShaderBase.registerAbstraction(textures.GL_Single2DTexture, Single2DTexture);\r\nshaders.ShaderBase.registerAbstraction(textures.GL_SingleCubeTexture, SingleCubeTexture);\r\n\r\nRendererBase.registerAbstraction(renderables.GL_BillboardRenderable, Billboard);\r\nRendererBase.registerAbstraction(renderables.GL_LineSegmentRenderable, LineSegment);\r\nRendererBase.registerAbstraction(renderables.GL_GraphicRenderable, Graphic);\r\nRendererBase.registerAbstraction(renderables.GL_SkyboxRenderable, Skybox);\r\n\r\nexport {\r\n\tanimators,\r\n\telements,\r\n\terrors,\r\n\tevents,\r\n\tfilters,\r\n\tmanagers,\r\n\trenderables,\r\n\tshaders,\r\n\tsort,\r\n\tsurfaces,\r\n\ttextures,\r\n\ttools,\r\n\tutils,\r\n\tDefaultRenderer,\r\n\tDepthRenderer,\r\n\tDistanceRenderer,\r\n\tFilter3DRenderer,\r\n\tRendererBase\r\n}",
    "import {ImageBase}\t\t\t\t\tfrom \"awayjs-core/lib/image/ImageBase\";\r\nimport {BitmapImage2D}\t\t\t\tfrom \"awayjs-core/lib/image/BitmapImage2D\";\r\nimport {Matrix3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\r\nimport {Rectangle}\t\t\t\t\tfrom \"awayjs-core/lib/geom/Rectangle\";\r\nimport {Vector3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {LightBase}\t\t\t\t\tfrom \"awayjs-display/lib/display/LightBase\";\r\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\nimport {DirectionalLight}\t\t\t\tfrom \"awayjs-display/lib/display/DirectionalLight\";\r\nimport {PointLight}\t\t\t\t\tfrom \"awayjs-display/lib/display/PointLight\";\r\nimport {IEntity}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/IEntity\";\r\nimport {LightProbe}\t\t\t\t\tfrom \"awayjs-display/lib/display/LightProbe\";\r\nimport {Skybox}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Skybox\";\r\nimport {Scene}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Scene\";\r\nimport {ShadowMapperBase}\t\t\t\tfrom \"awayjs-display/lib/materials/shadowmappers/ShadowMapperBase\";\r\nimport {INode}\t\t\t\t\t\tfrom \"awayjs-display/lib/partition/INode\";\r\n\r\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\nimport {ContextGLCompareMode}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLCompareMode\";\r\nimport {ContextGLClearMask}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLClearMask\";\r\nimport {IContextGL}\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/IContextGL\";\r\n\r\nimport {RendererBase}\t\t\t\t\tfrom \"./RendererBase\";\r\nimport {DepthRenderer}\t\t\t\tfrom \"./DepthRenderer\";\r\nimport {DistanceRenderer}\t\t\t\tfrom \"./DistanceRenderer\";\r\nimport {Filter3DRenderer}\t\t\t\tfrom \"./Filter3DRenderer\";\r\nimport {Filter3DBase}\t\t\t\t\tfrom \"./filters/Filter3DBase\";\r\nimport {GL_SkyboxElements}\t\t\tfrom \"./elements/GL_SkyboxElements\";\r\nimport {GL_RenderableBase}\t\t\tfrom \"./renderables/GL_RenderableBase\";\r\nimport {RTTBufferManager}\t\t\t\tfrom \"./managers/RTTBufferManager\";\r\nimport {IPass}\t\t\t\t\t\tfrom \"./surfaces/passes/IPass\";\r\nimport {SurfacePool}\t\t\t\t\tfrom \"./surfaces/SurfacePool\";\r\n\r\n/**\r\n * The DefaultRenderer class provides the default rendering method. It renders the scene graph objects using the\r\n * materials assigned to them.\r\n *\r\n * @class away.render.DefaultRenderer\r\n */\r\nexport class DefaultRenderer extends RendererBase\r\n{\r\n\tpublic _pRequireDepthRender:boolean;\r\n\r\n\tprivate _pDistanceRenderer:DepthRenderer;\r\n\tprivate _pDepthRenderer:DepthRenderer;\r\n\tpublic _pFilter3DRenderer:Filter3DRenderer;\r\n\r\n\tpublic _pDepthRender:BitmapImage2D;\r\n\r\n\tprivate _antiAlias:number = 0;\r\n\tprivate _directionalLights:Array<DirectionalLight> = new Array<DirectionalLight>();\r\n\tprivate _pointLights:Array<PointLight> = new Array<PointLight>();\r\n\tprivate _lightProbes:Array<LightProbe> = new Array<LightProbe>();\r\n\r\n\tpublic get antiAlias():number\r\n\t{\r\n\t\treturn this._antiAlias;\r\n\t}\r\n\r\n\tpublic set antiAlias(value:number)\r\n\t{\r\n\t\tif (this._antiAlias == value)\r\n\t\t\treturn;\r\n\r\n\t\tthis._antiAlias = value;\r\n\r\n\t\tthis._pBackBufferInvalid = true;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic get depthPrepass():boolean\r\n\t{\r\n\t\treturn this._depthPrepass;\r\n\t}\r\n\r\n\tpublic set depthPrepass(value:boolean)\r\n\t{\r\n\t\tthis._depthPrepass = value;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @returns {*}\r\n\t */\r\n\tpublic get filters3d():Array<Filter3DBase>\r\n\t{\r\n\t\treturn this._pFilter3DRenderer? this._pFilter3DRenderer.filters : null;\r\n\t}\r\n\tpublic set filters3d(value:Array<Filter3DBase>)\r\n\t{\r\n\t\tif (value && value.length == 0)\r\n\t\t\tvalue = null;\r\n\r\n\t\tif (this._pFilter3DRenderer && !value) {\r\n\t\t\tthis._pFilter3DRenderer.dispose();\r\n\t\t\tthis._pFilter3DRenderer = null;\r\n\t\t} else if (!this._pFilter3DRenderer && value) {\r\n\t\t\tthis._pFilter3DRenderer = new Filter3DRenderer(this._pStage);\r\n\t\t\tthis._pFilter3DRenderer.filters = value;\r\n\t\t}\r\n\r\n\t\tif (this._pFilter3DRenderer) {\r\n\t\t\tthis._pFilter3DRenderer.filters = value;\r\n\t\t\tthis._pRequireDepthRender = this._pFilter3DRenderer.requireDepthRender;\r\n\t\t} else {\r\n\t\t\tthis._pRequireDepthRender = false;\r\n\r\n\t\t\tif (this._pDepthRender) {\r\n\t\t\t\tthis._pDepthRender.dispose();\r\n\t\t\t\tthis._pDepthRender = null;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new DefaultRenderer object.\r\n\t *\r\n\t * @param antiAlias The amount of anti-aliasing to use.\r\n\t * @param renderMode The render mode to use.\r\n\t */\r\n\tconstructor(stage:Stage = null, forceSoftware:boolean = false, profile:string = \"baseline\", mode:string = \"auto\")\r\n\t{\r\n\t\tsuper(stage, null, forceSoftware, profile, mode);\r\n\r\n\t\tif (stage)\r\n\t\t\tthis.shareContext = true;\r\n\r\n\t\tthis._pRttBufferManager = RTTBufferManager.getInstance(this._pStage);\r\n\r\n\t\tthis._pDepthRenderer = new DepthRenderer(this._pStage);\r\n\t\tthis._pDistanceRenderer = new DistanceRenderer(this._pStage);\r\n\r\n\t\tif (this._width == 0)\r\n\t\t\tthis.width = window.innerWidth;\r\n\t\telse\r\n\t\t\tthis._pRttBufferManager.viewWidth = this._width;\r\n\r\n\t\tif (this._height == 0)\r\n\t\t\tthis.height = window.innerHeight;\r\n\t\telse\r\n\t\t\tthis._pRttBufferManager.viewHeight = this._height;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic enterNode(node:INode):boolean\r\n\t{\r\n\t\tvar enter:boolean = super.enterNode(node);\r\n\r\n\t\tif (enter && node.debugVisible)\r\n\t\t\tthis.applyEntity(node.bounds.boundsPrimitive);\r\n\r\n\t\treturn enter;\r\n\t}\r\n\r\n\tpublic render(camera:Camera, scene:Scene):void\r\n\t{\r\n\t\tsuper.render(camera, scene);\r\n\r\n\t\tif (!this._pStage.recoverFromDisposal()) {//if context has Disposed by the OS,don't render at this frame\r\n\t\t\tthis._pBackBufferInvalid = true;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this._pBackBufferInvalid)// reset or update render settings\r\n\t\t\tthis.pUpdateBackBuffer();\r\n\r\n\t\tif (this.shareContext && this._pContext)\r\n\t\t\tthis._pContext.clear(0, 0, 0, 1, 1, 0, ContextGLClearMask.DEPTH);\r\n\r\n\t\tif (this._pFilter3DRenderer) {\r\n\t\t\tthis.textureRatioX = this._pRttBufferManager.textureRatioX;\r\n\t\t\tthis.textureRatioY = this._pRttBufferManager.textureRatioY;\r\n\t\t} else {\r\n\t\t\tthis.textureRatioX = 1;\r\n\t\t\tthis.textureRatioY = 1;\r\n\t\t}\r\n\r\n\t\tif (this._pRequireDepthRender)\r\n\t\t\tthis.pRenderSceneDepthToTexture(camera, scene);\r\n\r\n\t\tif (this._depthPrepass)\r\n\t\t\tthis.pRenderDepthPrepass(camera, scene);\r\n\r\n\t\t//reset lights\r\n\t\tthis._directionalLights.length = 0;\r\n\t\tthis._pointLights.length = 0;\r\n\t\tthis._lightProbes.length = 0;\r\n\r\n\t\tif (this._pFilter3DRenderer && this._pContext) { //TODO\r\n\t\t\tthis._iRender(camera, scene, this._pFilter3DRenderer.getMainInputTexture(this._pStage), this._pRttBufferManager.renderToTextureRect);\r\n\t\t\tthis._pFilter3DRenderer.render(this._pStage, camera, this._pDepthRender);\r\n\t\t} else {\r\n\r\n\t\t\tif (this.shareContext)\r\n\t\t\t\tthis._iRender(camera, scene, null, this._pScissorRect);\r\n\t\t\telse\r\n\t\t\t\tthis._iRender(camera, scene);\r\n\t\t}\r\n\r\n\t\tif (!this.shareContext && this._pContext)\r\n\t\t\tthis._pContext.present();\r\n\r\n\t\t// register that a view has been rendered\r\n\t\tthis._pStage.bufferClear = false;\r\n\t}\r\n\r\n\tpublic pExecuteRender(camera:Camera, target:ImageBase = null, scissorRect:Rectangle = null, surfaceSelector:number = 0):void\r\n\t{\r\n\t\tthis.updateLights(camera);\r\n\r\n\t\tsuper.pExecuteRender(camera, target, scissorRect, surfaceSelector);\r\n\t}\r\n\r\n\tprivate updateLights(camera:Camera):void\r\n\t{\r\n\t\tvar len:number, i:number;\r\n\t\tvar light:LightBase;\r\n\t\tvar shadowMapper:ShadowMapperBase;\r\n\r\n\t\tlen = this._directionalLights.length;\r\n\t\tfor (i = 0; i < len; ++i) {\r\n\t\t\t\tlight = this._directionalLights[i];\r\n\r\n\t\t\tshadowMapper = light.shadowMapper;\r\n\r\n\t\t\tif (light.shadowsEnabled && (shadowMapper.autoUpdateShadows || shadowMapper._iShadowsInvalid ))\r\n\t\t\t\tshadowMapper.iRenderDepthMap(camera, light.scene, this._pDepthRenderer);\r\n\t\t}\r\n\r\n\t\tlen = this._pointLights.length;\r\n\t\tfor (i = 0; i < len; ++i) {\r\n\t\t\tlight = <LightBase> this._pointLights[i];\r\n\r\n\t\t\tshadowMapper = light.shadowMapper;\r\n\r\n\t\t\tif (light.shadowsEnabled && (shadowMapper.autoUpdateShadows || shadowMapper._iShadowsInvalid))\r\n\t\t\t\tshadowMapper.iRenderDepthMap(camera, light.scene, this._pDistanceRenderer);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param entity\r\n\t */\r\n\tpublic applyDirectionalLight(entity:IEntity):void\r\n\t{\r\n\t\tthis._directionalLights.push(<DirectionalLight> entity);\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param entity\r\n\t */\r\n\tpublic applyLightProbe(entity:IEntity):void\r\n\t{\r\n\t\tthis._lightProbes.push(<LightProbe> entity);\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param entity\r\n\t */\r\n\tpublic applyPointLight(entity:IEntity):void\r\n\t{\r\n\t\tthis._pointLights.push(<PointLight> entity);\r\n\t}\r\n\r\n\tpublic dispose():void\r\n\t{\r\n\t\tif (!this.shareContext)\r\n\t\t\tthis._pStage.dispose();\r\n\r\n\t\tthis._pRttBufferManager.dispose();\r\n\t\tthis._pRttBufferManager = null;\r\n\r\n\t\tthis._pDepthRenderer.dispose();\r\n\t\tthis._pDistanceRenderer.dispose();\r\n\t\tthis._pDepthRenderer = null;\r\n\t\tthis._pDistanceRenderer = null;\r\n\r\n\t\tthis._pDepthRender = null;\r\n\r\n\t\tsuper.dispose();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic pRenderDepthPrepass(camera:Camera, scene:Scene):void\r\n\t{\r\n\t\tthis._pDepthRenderer.disableColor = true;\r\n\r\n\t\tif (this._pFilter3DRenderer) {\r\n\t\t\tthis._pDepthRenderer.textureRatioX = this._pRttBufferManager.textureRatioX;\r\n\t\t\tthis._pDepthRenderer.textureRatioY = this._pRttBufferManager.textureRatioY;\r\n\t\t\tthis._pDepthRenderer._iRender(camera, scene, this._pFilter3DRenderer.getMainInputTexture(this._pStage), this._pRttBufferManager.renderToTextureRect);\r\n\t\t} else {\r\n\t\t\tthis._pDepthRenderer.textureRatioX = 1;\r\n\t\t\tthis._pDepthRenderer.textureRatioY = 1;\r\n\t\t\tthis._pDepthRenderer._iRender(camera, scene);\r\n\t\t}\r\n\r\n\t\tthis._pDepthRenderer.disableColor = false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic pRenderSceneDepthToTexture(camera:Camera, scene:Scene):void\r\n\t{\r\n\t\tif (this._pDepthTextureInvalid || !this._pDepthRender)\r\n\t\t\tthis.initDepthTexture(<IContextGL> this._pStage.context);\r\n\r\n\t\tthis._pDepthRenderer.textureRatioX = this._pRttBufferManager.textureRatioX;\r\n\t\tthis._pDepthRenderer.textureRatioY = this._pRttBufferManager.textureRatioY;\r\n\t\tthis._pDepthRenderer._iRender(camera, scene, this._pDepthRender);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates the backbuffer dimensions.\r\n\t */\r\n\tpublic pUpdateBackBuffer():void\r\n\t{\r\n\t\t// No reason trying to configure back buffer if there is no context available.\r\n\t\t// Doing this anyway (and relying on _stage to cache width/height for\r\n\t\t// context does get available) means usesSoftwareRendering won't be reliable.\r\n\t\tif (this._pStage.context && !this.shareContext) {\r\n\t\t\tif (this._width && this._height) {\r\n\t\t\t\tthis._pStage.configureBackBuffer(this._width, this._height, this._antiAlias, true);\r\n\t\t\t\tthis._pBackBufferInvalid = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tprivate initDepthTexture(context:IContextGL):void\r\n\t{\r\n\t\tthis._pDepthTextureInvalid = false;\r\n\r\n\t\tif (this._pDepthRender)\r\n\t\t\tthis._pDepthRender.dispose();\r\n\r\n\t\tthis._pDepthRender = new BitmapImage2D(this._pRttBufferManager.textureWidth, this._pRttBufferManager.textureHeight);\r\n\t}\r\n}",
    "import {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\n\r\nimport {INode}\t\t\t\t\t\tfrom \"awayjs-display/lib/partition/INode\";\r\n\r\nimport {RendererBase}\t\t\t\t\tfrom \"./RendererBase\";\r\nimport {GL_DepthSurface}\t\t\t\tfrom \"./surfaces/GL_DepthSurface\";\r\n\r\n/**\r\n * The DepthRenderer class renders 32-bit depth information encoded as RGBA\r\n *\r\n * @class away.render.DepthRenderer\r\n */\r\nexport class DepthRenderer extends RendererBase\r\n{\r\n\t/**\r\n\t * Creates a new DepthRenderer object.\r\n\t * @param renderBlended Indicates whether semi-transparent objects should be rendered.\r\n\t * @param distanceBased Indicates whether the written depth value is distance-based or projected depth-based\r\n\t */\r\n\tconstructor(stage:Stage = null)\r\n\t{\r\n\t\tsuper(stage, GL_DepthSurface);\r\n\r\n\t\tthis._iBackgroundR = 1;\r\n\t\tthis._iBackgroundG = 1;\r\n\t\tthis._iBackgroundB = 1;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic enterNode(node:INode):boolean\r\n\t{\r\n\t\tvar enter:boolean = node._iCollectionMark != RendererBase._iCollectionMark && node.isCastingShadow();\r\n\r\n\t\tif (!enter) {\r\n\t\t\tnode._iCollectionMark = RendererBase._iCollectionMark;\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn super.enterNode(node);\r\n\t}\r\n}",
    "import {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\n\r\nimport {INode}\t\t\t\t\t\tfrom \"awayjs-display/lib/partition/INode\";\r\n\r\nimport {RendererBase}\t\t\t\t\tfrom \"./RendererBase\";\r\nimport {GL_DistanceSurface}\t\t\tfrom \"./surfaces/GL_DistanceSurface\";\r\n\r\n/**\r\n * The DistanceRenderer class renders 32-bit depth information encoded as RGBA\r\n *\r\n * @class away.render.DistanceRenderer\r\n */\r\nexport class DistanceRenderer extends RendererBase\r\n{\r\n\t/**\r\n\t * Creates a new DistanceRenderer object.\r\n\t * @param renderBlended Indicates whether semi-transparent objects should be rendered.\r\n\t * @param distanceBased Indicates whether the written depth value is distance-based or projected depth-based\r\n\t */\r\n\tconstructor(stage:Stage = null)\r\n\t{\r\n\t\tsuper(stage, GL_DistanceSurface);\r\n\r\n\t\tthis._iBackgroundR = 1;\r\n\t\tthis._iBackgroundG = 1;\r\n\t\tthis._iBackgroundB = 1;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic enterNode(node:INode):boolean\r\n\t{\r\n\t\tvar enter:boolean = node._iCollectionMark != RendererBase._iCollectionMark && node.isCastingShadow();\r\n\r\n\t\tif (!enter) {\r\n\t\t\tnode._iCollectionMark = RendererBase._iCollectionMark;\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn super.enterNode(node);\r\n\t}\r\n}",
    "import {Image2D}\t\t\t\t\t\tfrom \"awayjs-core/lib/image/Image2D\";\r\n\r\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\n\r\nimport {GL_ImageBase}\t\t\t\t\tfrom \"awayjs-stagegl/lib/image/GL_ImageBase\";\r\n\r\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\nimport {ContextGLDrawMode}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLDrawMode\";\r\nimport {ContextGLBlendFactor}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLBlendFactor\";\r\nimport {ContextGLVertexBufferFormat}\tfrom \"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\";\r\nimport {IContextGL}\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/IContextGL\";\r\nimport {IIndexBuffer}\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/IIndexBuffer\";\r\nimport {IVertexBuffer}\t\t\t\tfrom \"awayjs-stagegl/lib/base/IVertexBuffer\";\r\n\r\nimport {RTTEvent}\t\t\t\t\t\tfrom \"./events/RTTEvent\";\r\nimport {RTTBufferManager}\t\t\t\tfrom \"./managers/RTTBufferManager\";\r\nimport {Filter3DBase}\t\t\t\t\tfrom \"./filters/Filter3DBase\";\r\nimport {Filter3DTaskBase}\t\t\t\tfrom \"./filters/tasks/Filter3DTaskBase\";\r\n\r\n/**\r\n * @class away.render.Filter3DRenderer\r\n */\r\nexport class Filter3DRenderer\r\n{\r\n\tprivate _filters:Array<Filter3DBase>;\r\n\tprivate _tasks:Array<Filter3DTaskBase>;\r\n\tprivate _filterTasksInvalid:boolean;\r\n\tprivate _mainInputTexture:Image2D;\r\n\tprivate _requireDepthRender:boolean;\r\n\tprivate _rttManager:RTTBufferManager;\r\n\tprivate _stage:Stage;\r\n\tprivate _filterSizesInvalid:boolean = true;\r\n\tprivate _onRTTResizeDelegate:(event:RTTEvent) => void;\r\n\r\n\tconstructor(stage:Stage)\r\n\t{\r\n\t\tthis._onRTTResizeDelegate = (event:RTTEvent) => this.onRTTResize(event);\r\n\r\n\t\tthis._stage = stage;\r\n\t\tthis._rttManager = RTTBufferManager.getInstance(stage);\r\n\t\tthis._rttManager.addEventListener(RTTEvent.RESIZE, this._onRTTResizeDelegate);\r\n\r\n\t}\r\n\r\n\tprivate onRTTResize(event:RTTEvent):void\r\n\t{\r\n\t\tthis._filterSizesInvalid = true;\r\n\t}\r\n\r\n\tpublic get requireDepthRender():boolean\r\n\t{\r\n\t\treturn this._requireDepthRender;\r\n\t}\r\n\r\n\tpublic getMainInputTexture(stage:Stage):Image2D\r\n\t{\r\n\t\tif (this._filterTasksInvalid)\r\n\t\t\tthis.updateFilterTasks(stage);\r\n\r\n\t\treturn this._mainInputTexture;\r\n\t}\r\n\r\n\tpublic get filters():Filter3DBase[]\r\n\t{\r\n\t\treturn this._filters;\r\n\t}\r\n\r\n\tpublic set filters(value:Filter3DBase[])\r\n\t{\r\n\t\tthis._filters = value;\r\n\r\n\t\tthis._filterTasksInvalid = true;\r\n\r\n\t\tthis._requireDepthRender = false;\r\n\r\n\t\tif (!this._filters)\r\n\t\t\treturn;\r\n\r\n\t\tfor (var i:number = 0; i < this._filters.length; ++i)\r\n\t\t\tif (this._filters[i].requireDepthRender)\r\n\t\t\t\tthis._requireDepthRender = true;\r\n\r\n\t\tthis._filterSizesInvalid = true;\r\n\t}\r\n\r\n\tprivate updateFilterTasks(stage:Stage):void\r\n\t{\r\n\t\tvar len:number;\r\n\r\n\t\tif (this._filterSizesInvalid)\r\n\t\t\tthis.updateFilterSizes();\r\n\r\n\t\tif (!this._filters) {\r\n\t\t\tthis._tasks = null;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._tasks = new Array<Filter3DTaskBase>();\r\n\r\n\t\tlen = this._filters.length - 1;\r\n\r\n\t\tvar filter:Filter3DBase;\r\n\r\n\t\tfor (var i:number = 0; i <= len; ++i) {\r\n\r\n\t\t\t// make sure all internal tasks are linked together\r\n\t\t\tfilter = this._filters[i];\r\n\r\n\t\t\tfilter.setRenderTargets(i == len? null : this._filters[i + 1].getMainInputTexture(stage), stage);\r\n\r\n\t\t\tthis._tasks = this._tasks.concat(filter.tasks);\r\n\r\n\t\t}\r\n\r\n\t\tthis._mainInputTexture = this._filters[0].getMainInputTexture(stage);\r\n\r\n\t}\r\n\r\n\tpublic render(stage:Stage, camera:Camera, depthTexture:Image2D):void\r\n\t{\r\n\t\tvar len:number;\r\n\t\tvar i:number;\r\n\t\tvar task:Filter3DTaskBase;\r\n\t\tvar context:IContextGL = <IContextGL> stage.context;\r\n\r\n\t\tvar indexBuffer:IIndexBuffer = this._rttManager.indexBuffer;\r\n\r\n\t\tvar vertexBuffer:IVertexBuffer = this._rttManager.renderToTextureVertexBuffer;\r\n\r\n\t\tif (!this._filters)\r\n\t\t\treturn;\r\n\r\n\t\tif (this._filterSizesInvalid)\r\n\t\t\tthis.updateFilterSizes();\r\n\r\n\t\tif (this._filterTasksInvalid)\r\n\t\t\tthis.updateFilterTasks(stage);\r\n\r\n\t\tlen = this._filters.length;\r\n\r\n\t\tfor (i = 0; i < len; ++i)\r\n\t\t\tthis._filters[i].update(stage, camera);\r\n\r\n\t\tlen = this._tasks.length;\r\n\r\n\t\tif (len > 1) {\r\n\t\t\tcontext.setProgram(this._tasks[0].getProgram(stage));\r\n\t\t\tcontext.setVertexBufferAt(this._tasks[0]._positionIndex, vertexBuffer, 0, ContextGLVertexBufferFormat.FLOAT_2);\r\n\t\t\tcontext.setVertexBufferAt(this._tasks[0]._uvIndex, vertexBuffer, 8, ContextGLVertexBufferFormat.FLOAT_2);\r\n\t\t}\r\n\r\n\t\tfor (i = 0; i < len; ++i) {\r\n\r\n\t\t\ttask = this._tasks[i];\r\n\r\n\t\t\tstage.setRenderTarget(task.target);\r\n\r\n\t\t\tcontext.setProgram(task.getProgram(stage));\r\n\t\t\t(<GL_ImageBase> stage.getAbstraction(task.getMainInputTexture(stage))).activate(task._inputTextureIndex, false);\r\n\r\n\r\n\t\t\tif (!task.target) {\r\n\r\n\t\t\t\tstage.scissorRect = null;\r\n\t\t\t\tvertexBuffer = this._rttManager.renderToScreenVertexBuffer;\r\n\t\t\t\tcontext.setVertexBufferAt(task._positionIndex, vertexBuffer, 0, ContextGLVertexBufferFormat.FLOAT_2);\r\n\t\t\t\tcontext.setVertexBufferAt(task._uvIndex, vertexBuffer, 8, ContextGLVertexBufferFormat.FLOAT_2);\r\n\r\n\t\t\t}\r\n\t\t\tcontext.clear(0.0, 0.0, 0.0, 0.0);\r\n\r\n\t\t\ttask.activate(stage, camera, depthTexture);\r\n\r\n\t\t\tcontext.setBlendFactors(ContextGLBlendFactor.ONE, ContextGLBlendFactor.ZERO);\r\n\t\t\tcontext.drawIndices(ContextGLDrawMode.TRIANGLES, indexBuffer, 0, 6);\r\n\r\n\t\t\ttask.deactivate(stage);\r\n\t\t}\r\n\r\n\t\tcontext.setTextureAt(0, null);\r\n\t\tcontext.setVertexBufferAt(0, null);\r\n\t\tcontext.setVertexBufferAt(1, null);\r\n\t}\r\n\r\n\tprivate updateFilterSizes():void\r\n\t{\r\n\t\tfor (var i:number = 0; i < this._filters.length; ++i) {\r\n\t\t\tthis._filters[i].textureWidth = this._rttManager.textureWidth;\r\n\t\t\tthis._filters[i].textureHeight = this._rttManager.textureHeight;\r\n\t\t\tthis._filters[i].rttManager = this._rttManager;\r\n\t\t}\r\n\r\n\t\tthis._filterSizesInvalid = true;\r\n\t}\r\n\r\n\tpublic dispose():void\r\n\t{\r\n\t\tthis._rttManager.removeEventListener(RTTEvent.RESIZE, this._onRTTResizeDelegate);\r\n\t\tthis._rttManager = null;\r\n\t\tthis._stage = null;\r\n\t}\r\n}",
    "import {ImageBase}\t\t\t\t\tfrom \"awayjs-core/lib/image/ImageBase\";\r\nimport {BitmapImage2D}\t\t\t\tfrom \"awayjs-core/lib/image/BitmapImage2D\";\r\nimport {Matrix3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\r\nimport {Matrix3DUtils}\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3DUtils\";\r\nimport {Plane3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Plane3D\";\r\nimport {Point}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Point\";\r\nimport {Rectangle}\t\t\t\t\tfrom \"awayjs-core/lib/geom/Rectangle\";\r\nimport {Vector3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\nimport {EventDispatcher}\t\t\t\tfrom \"awayjs-core/lib/events/EventDispatcher\";\r\nimport {IAssetClass}\t\t\t\t\tfrom \"awayjs-core/lib/library/IAssetClass\";\r\nimport {IAbstractionPool}\t\t\t\tfrom \"awayjs-core/lib/library/IAbstractionPool\";\r\nimport {ByteArray}\t\t\t\t\tfrom \"awayjs-core/lib/utils/ByteArray\";\r\n\r\nimport {IRenderable}\t\t\t\t\tfrom \"awayjs-display/lib/base/IRenderable\";\r\nimport {IRenderer}\t\t\t\t\tfrom \"awayjs-display/lib/IRenderer\";\r\nimport {INode}\t\t\t\t\t\tfrom \"awayjs-display/lib/partition/INode\";\r\nimport {DisplayObject}\t\t\t\tfrom \"awayjs-display/lib/display/DisplayObject\";\r\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\nimport {IEntity}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/IEntity\";\r\nimport {Scene}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Scene\";\r\nimport {RendererEvent}\t\t\t\tfrom \"awayjs-display/lib/events/RendererEvent\";\r\n\r\nimport {AGALMiniAssembler}\t\t\tfrom \"awayjs-stagegl/lib/aglsl/assembler/AGALMiniAssembler\";\r\nimport {ContextGLBlendFactor}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLBlendFactor\";\r\nimport {ContextGLCompareMode}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLCompareMode\";\r\nimport {IContextGL}\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/IContextGL\";\r\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\nimport {StageEvent}\t\t\t\t\tfrom \"awayjs-stagegl/lib/events/StageEvent\";\r\nimport {StageManager}\t\t\t\t\tfrom \"awayjs-stagegl/lib/managers/StageManager\";\r\nimport {ProgramData}\t\t\t\t\tfrom \"awayjs-stagegl/lib/image/ProgramData\";\r\nimport {GL_IAssetClass}\t\t\t\tfrom \"awayjs-stagegl/lib/library/GL_IAssetClass\";\r\n\r\nimport {GL_ElementsBase}\t\t\t\tfrom \"./elements/GL_ElementsBase\";\r\nimport {ISurfaceClassGL}\t\t\t\tfrom \"./surfaces/ISurfaceClassGL\";\r\nimport {GL_SurfaceBase}\t\t\t\tfrom \"./surfaces/GL_SurfaceBase\";\r\nimport {GL_RenderableBase}\t\t\tfrom \"./renderables/GL_RenderableBase\";\r\nimport {RTTBufferManager}\t\t\t\tfrom \"./managers/RTTBufferManager\";\r\nimport {SurfacePool}\t\t\t\t\tfrom \"./surfaces/SurfacePool\";\r\nimport {IPass}\t\t\t\t\t\tfrom \"./surfaces/passes/IPass\";\r\nimport {IEntitySorter}\t\t\t\tfrom \"./sort/IEntitySorter\";\r\nimport {RenderableMergeSort}\t\t\tfrom \"./sort/RenderableMergeSort\";\r\n\r\n\r\n/**\r\n * RendererBase forms an abstract base class for classes that are used in the rendering pipeline to render the\r\n * contents of a partition\r\n *\r\n * @class away.render.RendererBase\r\n */\r\nexport class RendererBase extends EventDispatcher implements IRenderer, IAbstractionPool\r\n{\r\n\tpublic static _iCollectionMark = 0;\r\n\tpublic static _abstractionClassPool:Object = new Object();\r\n\r\n\tprivate _objectPools:Object = new Object();\r\n\tprivate _abstractionPool:Object = new Object();\r\n\r\n\tprivate _maskConfig:number;\r\n\tprivate _activeMasksDirty:boolean;\r\n\tprivate _activeMasksConfig:Array<Array<number>> = new Array<Array<number>>();\r\n\tprivate _registeredMasks : Array<GL_RenderableBase> = new Array<GL_RenderableBase>();\r\n\tprivate _numUsedStreams:number = 0;\r\n\tprivate _numUsedTextures:number = 0;\r\n\r\n\tpublic _pContext:IContextGL;\r\n\tpublic _pStage:Stage;\r\n\tprivate _surfaceClassGL:ISurfaceClassGL;\r\n\t\r\n\tprivate _cameraPosition:Vector3D;\r\n\tpublic _cameraTransform:Matrix3D;\r\n\tprivate _cameraForward:Vector3D = new Vector3D();\r\n\r\n\tpublic _pRttBufferManager:RTTBufferManager;\r\n\tprivate _viewPort:Rectangle = new Rectangle();\r\n\tprivate _viewportDirty:boolean;\r\n\tprivate _scissorDirty:boolean;\r\n\r\n\tpublic _pBackBufferInvalid:boolean = true;\r\n\tpublic _pDepthTextureInvalid:boolean = true;\r\n\tpublic _depthPrepass:boolean = false;\r\n\tprivate _backgroundR:number = 0;\r\n\tprivate _backgroundG:number = 0;\r\n\tprivate _backgroundB:number = 0;\r\n\tprivate _backgroundAlpha:number = 1;\r\n\r\n\t// only used by renderers that need to render geometry to textures\r\n\tpublic _width:number;\r\n\tpublic _height:number;\r\n\r\n\tpublic textureRatioX:number = 1;\r\n\tpublic textureRatioY:number = 1;\r\n\r\n\tprivate _snapshotBitmapImage2D:BitmapImage2D;\r\n\tprivate _snapshotRequired:boolean;\r\n\r\n\tpublic _pRttViewProjectionMatrix:Matrix3D = new Matrix3D();\r\n\r\n\tprivate _localPos:Point = new Point();\r\n\tprivate _globalPos:Point = new Point();\r\n\tpublic _pScissorRect:Rectangle = new Rectangle();\r\n\r\n\tprivate _scissorUpdated:RendererEvent;\r\n\tprivate _viewPortUpdated:RendererEvent;\r\n\r\n\tprivate _onContextUpdateDelegate:(event:StageEvent) => void;\r\n\tprivate _onViewportUpdatedDelegate:(event:StageEvent) => void;\r\n\r\n\tpublic _pNumElements:number = 0;\r\n\r\n\tpublic _pOpaqueRenderableHead:GL_RenderableBase;\r\n\tpublic _pBlendedRenderableHead:GL_RenderableBase;\r\n\tpublic _disableColor:boolean = false;\r\n\tpublic _renderBlended:boolean = true;\r\n\tprivate _cullPlanes:Array<Plane3D>;\r\n\tprivate _customCullPlanes:Array<Plane3D>;\r\n\tprivate _numCullPlanes:number = 0;\r\n\tprivate _sourceEntity:IEntity;\r\n\tprivate _zIndex:number;\r\n\tprivate _renderSceneTransform:Matrix3D;\r\n\r\n\t\r\n\t/**\r\n\t * Defers control of ContextGL clear() and present() calls to Stage, enabling multiple Stage frameworks\r\n\t * to share the same ContextGL object.\r\n\t */\r\n\tpublic shareContext:boolean;\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic get cullPlanes():Array<Plane3D>\r\n\t{\r\n\t\treturn this._customCullPlanes;\r\n\t}\r\n\r\n\tpublic set cullPlanes(value:Array<Plane3D>)\r\n\t{\r\n\t\tthis._customCullPlanes = value;\r\n\t}\r\n\r\n\r\n\tpublic get renderBlended():boolean\r\n\t{\r\n\t\treturn this._renderBlended;\r\n\t}\r\n\r\n\tpublic set renderBlended(value:boolean)\r\n\t{\r\n\t\tthis._renderBlended = value;\r\n\t}\r\n\r\n\r\n\tpublic get disableColor():boolean\r\n\t{\r\n\t\treturn this._disableColor;\r\n\t}\r\n\r\n\tpublic set disableColor(value:boolean)\r\n\t{\r\n\t\tthis._disableColor = value;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic get numElements():number\r\n\t{\r\n\t\treturn this._pNumElements;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic renderableSorter:IEntitySorter;\r\n\r\n\r\n\t/**\r\n\t * A viewPort rectangle equivalent of the Stage size and position.\r\n\t */\r\n\tpublic get viewPort():Rectangle\r\n\t{\r\n\t\treturn this._viewPort;\r\n\t}\r\n\r\n\t/**\r\n\t * A scissor rectangle equivalent of the view size and position.\r\n\t */\r\n\tpublic get scissorRect():Rectangle\r\n\t{\r\n\t\treturn this._pScissorRect;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic get x():number\r\n\t{\r\n\t\treturn this._localPos.x;\r\n\t}\r\n\r\n\tpublic set x(value:number)\r\n\t{\r\n\t\tif (this.x == value)\r\n\t\t\treturn;\r\n\r\n\t\tthis._globalPos.x = this._localPos.x = value;\r\n\r\n\t\tthis.updateGlobalPos();\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic get y():number\r\n\t{\r\n\t\treturn this._localPos.y;\r\n\t}\r\n\r\n\tpublic set y(value:number)\r\n\t{\r\n\t\tif (this.y == value)\r\n\t\t\treturn;\r\n\r\n\t\tthis._globalPos.y = this._localPos.y = value;\r\n\r\n\t\tthis.updateGlobalPos();\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic get width():number\r\n\t{\r\n\t\treturn this._width;\r\n\t}\r\n\r\n\tpublic set width(value:number)\r\n\t{\r\n\t\tif (this._width == value)\r\n\t\t\treturn;\r\n\r\n\t\tthis._width = value;\r\n\t\tthis._pScissorRect.width = value;\r\n\r\n\t\tif (this._pRttBufferManager)\r\n\t\t\tthis._pRttBufferManager.viewWidth = value;\r\n\r\n\t\tthis._pBackBufferInvalid = true;\r\n\t\tthis._pDepthTextureInvalid = true;\r\n\r\n\t\tthis.notifyScissorUpdate();\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic get height():number\r\n\t{\r\n\t\treturn this._height;\r\n\t}\r\n\r\n\tpublic set height(value:number)\r\n\t{\r\n\t\tif (this._height == value)\r\n\t\t\treturn;\r\n\r\n\t\tthis._height = value;\r\n\t\tthis._pScissorRect.height = value;\r\n\r\n\t\tif (this._pRttBufferManager)\r\n\t\t\tthis._pRttBufferManager.viewHeight = value;\r\n\r\n\t\tthis._pBackBufferInvalid = true;\r\n\t\tthis._pDepthTextureInvalid = true;\r\n\r\n\t\tthis.notifyScissorUpdate();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new RendererBase object.\r\n\t */\r\n\tconstructor(stage:Stage = null, surfaceClassGL:ISurfaceClassGL = null, forceSoftware:boolean = false, profile:string = \"baseline\", mode:string = \"auto\")\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tthis._onViewportUpdatedDelegate = (event:StageEvent) => this.onViewportUpdated(event);\r\n\t\tthis._onContextUpdateDelegate = (event:StageEvent) => this.onContextUpdate(event);\r\n\r\n\t\t//default sorting algorithm\r\n\t\tthis.renderableSorter = new RenderableMergeSort();\r\n\r\n\t\t//set stage\r\n\t\tthis._pStage = stage || StageManager.getInstance().getFreeStage(forceSoftware, profile, mode);\r\n\r\n\t\tthis._pStage.addEventListener(StageEvent.CONTEXT_CREATED, this._onContextUpdateDelegate);\r\n\t\tthis._pStage.addEventListener(StageEvent.CONTEXT_RECREATED, this._onContextUpdateDelegate);\r\n\t\tthis._pStage.addEventListener(StageEvent.VIEWPORT_UPDATED, this._onViewportUpdatedDelegate);\r\n\r\n\t\tthis._surfaceClassGL = surfaceClassGL;\r\n\t\t\r\n\t\t/*\r\n\t\t if (_backgroundImageRenderer)\r\n\t\t _backgroundImageRenderer.stage = value;\r\n\t\t */\r\n\t\tif (this._pStage.context)\r\n\t\t\tthis._pContext = <IContextGL> this._pStage.context;\r\n\t}\r\n\r\n\r\n\tpublic getAbstraction(renderable:IRenderable):GL_RenderableBase\r\n\t{\r\n\t\treturn this._abstractionPool[renderable.id] || (this._abstractionPool[renderable.id] = new (<GL_IAssetClass> RendererBase._abstractionClassPool[renderable.assetType])(renderable, this));\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param image\r\n\t */\r\n\tpublic clearAbstraction(renderable:IRenderable):void\r\n\t{\r\n\t\tthis._abstractionPool[renderable.id] = null;\r\n\t}\r\n\r\n\t/**\r\n\t * //TODO\r\n\t *\r\n\t * @param elementsClass\r\n\t * @returns SurfacePool\r\n\t */\r\n\tpublic getSurfacePool(elements:GL_ElementsBase):SurfacePool\r\n\t{\r\n\t\treturn this._objectPools[elements.elementsType] || (this._objectPools[elements.elementsType] = new SurfacePool(elements.elementsClass, this._pStage, this._surfaceClassGL));\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param imageObjectClass\r\n\t */\r\n\tpublic static registerAbstraction(renderableClass:GL_IAssetClass, assetClass:IAssetClass):void\r\n\t{\r\n\t\tRendererBase._abstractionClassPool[assetClass.assetType] = renderableClass;\r\n\t}\r\n\r\n\tpublic activatePass(pass:IPass, camera:Camera):void\r\n\t{\r\n\t\t//clear unused vertex streams\r\n\t\tvar i:number\r\n\t\tfor (i = pass.shader.numUsedStreams; i < this._numUsedStreams; i++)\r\n\t\t\tthis._pContext.setVertexBufferAt(i, null);\r\n\r\n\t\t//clear unused texture streams\r\n\t\tfor (i = pass.shader.numUsedTextures; i < this._numUsedTextures; i++)\r\n\t\t\tthis._pContext.setTextureAt(i, null);\r\n\r\n\t\t//check program data is uploaded\r\n\t\tvar programData:ProgramData = pass.shader.programData;\r\n\r\n\t\tif (!programData.program) {\r\n\t\t\tprogramData.program = this._pContext.createProgram();\r\n\t\t\tvar vertexByteCode:ByteArray = (new AGALMiniAssembler().assemble(\"part vertex 1\\n\" + programData.vertexString + \"endpart\"))['vertex'].data;\r\n\t\t\tvar fragmentByteCode:ByteArray = (new AGALMiniAssembler().assemble(\"part fragment 1\\n\" + programData.fragmentString + \"endpart\"))['fragment'].data;\r\n\t\t\tprogramData.program.upload(vertexByteCode, fragmentByteCode);\r\n\t\t}\r\n\r\n\t\t//set program data\r\n\t\tthis._pContext.setProgram(programData.program);\r\n\r\n\t\t//activate shader object through pass\r\n\t\tpass._iActivate(camera);\r\n\t}\r\n\r\n\tpublic deactivatePass(pass:IPass):void\r\n\t{\r\n\t\t//deactivate shader object through pass\r\n\t\tpass._iDeactivate();\r\n\r\n\t\tthis._numUsedStreams = pass.shader.numUsedStreams;\r\n\t\tthis._numUsedTextures = pass.shader.numUsedTextures;\r\n\t}\r\n\r\n\t/**\r\n\t * The background color's red component, used when clearing.\r\n\t *\r\n\t * @private\r\n\t */\r\n\tpublic get _iBackgroundR():number\r\n\t{\r\n\t\treturn this._backgroundR;\r\n\t}\r\n\r\n\tpublic set _iBackgroundR(value:number)\r\n\t{\r\n\t\tif (this._backgroundR == value)\r\n\t\t\treturn;\r\n\r\n\t\tthis._backgroundR = value;\r\n\r\n\t\tthis._pBackBufferInvalid = true;\r\n\t}\r\n\r\n\t/**\r\n\t * The background color's green component, used when clearing.\r\n\t *\r\n\t * @private\r\n\t */\r\n\tpublic get _iBackgroundG():number\r\n\t{\r\n\t\treturn this._backgroundG;\r\n\t}\r\n\r\n\tpublic set _iBackgroundG(value:number)\r\n\t{\r\n\t\tif (this._backgroundG == value)\r\n\t\t\treturn;\r\n\r\n\t\tthis._backgroundG = value;\r\n\r\n\t\tthis._pBackBufferInvalid = true;\r\n\t}\r\n\r\n\t/**\r\n\t * The background color's blue component, used when clearing.\r\n\t *\r\n\t * @private\r\n\t */\r\n\tpublic get _iBackgroundB():number\r\n\t{\r\n\t\treturn this._backgroundB;\r\n\t}\r\n\r\n\tpublic set _iBackgroundB(value:number)\r\n\t{\r\n\t\tif (this._backgroundB == value)\r\n\t\t\treturn;\r\n\r\n\t\tthis._backgroundB = value;\r\n\r\n\t\tthis._pBackBufferInvalid = true;\r\n\t}\r\n\r\n\tpublic get context():IContextGL\r\n\t{\r\n\t\treturn this._pContext;\r\n\t}\r\n\r\n\t/**\r\n\t * The Stage that will provide the ContextGL used for rendering.\r\n\t */\r\n\tpublic get stage():Stage\r\n\t{\r\n\t\treturn this._pStage;\r\n\t}\r\n\r\n\t/**\r\n\t * Disposes the resources used by the RendererBase.\r\n\t */\r\n\tpublic dispose():void\r\n\t{\r\n\t\tfor (var id in this._abstractionPool)\r\n\t\t\tthis._abstractionPool[id].clear();\r\n\r\n\t\tthis._abstractionPool = null;\r\n\r\n\t\tthis._pStage.removeEventListener(StageEvent.CONTEXT_CREATED, this._onContextUpdateDelegate);\r\n\t\tthis._pStage.removeEventListener(StageEvent.CONTEXT_RECREATED, this._onContextUpdateDelegate);\r\n\t\tthis._pStage.removeEventListener(StageEvent.VIEWPORT_UPDATED, this._onViewportUpdatedDelegate);\r\n\r\n\t\tthis._pStage = null;\r\n\t\tthis._pContext = null;\r\n\t\t/*\r\n\t\t if (_backgroundImageRenderer) {\r\n\t\t _backgroundImageRenderer.dispose();\r\n\t\t _backgroundImageRenderer = null;\r\n\t\t }\r\n\t\t */\r\n\t}\r\n\r\n\tpublic render(camera:Camera, scene:Scene):void\r\n\t{\r\n\t\tthis._viewportDirty = false;\r\n\t\tthis._scissorDirty = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Renders the potentially visible geometry to the back buffer or texture.\r\n\t * @param target An option target texture to render to.\r\n\t * @param surfaceSelector The index of a CubeTexture's face to render to.\r\n\t * @param additionalClearMask Additional clear mask information, in case extra clear channels are to be omitted.\r\n\t */\r\n\tpublic _iRender(camera:Camera, scene:Scene, target:ImageBase = null, scissorRect:Rectangle = null, surfaceSelector:number = 0):void\r\n\t{\r\n\t\t//TODO refactor setTarget so that rendertextures are created before this check\r\n\t\tif (!this._pStage || !this._pContext)\r\n\t\t\treturn;\r\n\r\n\t\t//reset head values\r\n\t\tthis._pBlendedRenderableHead = null;\r\n\t\tthis._pOpaqueRenderableHead = null;\r\n\t\tthis._pNumElements = 0;\r\n\r\n\t\tthis._cullPlanes = this._customCullPlanes? this._customCullPlanes : camera.frustumPlanes;\r\n\t\tthis._numCullPlanes = this._cullPlanes? this._cullPlanes.length : 0;\r\n\t\tthis._cameraPosition = camera.scenePosition;\r\n\t\tthis._cameraTransform = camera.sceneTransform;\r\n\t\tthis._cameraForward = Matrix3DUtils.getForward(camera.sceneTransform, this._cameraForward);\r\n\r\n\t\tRendererBase._iCollectionMark++;\r\n\r\n\t\tscene.traversePartitions(this);\r\n\r\n\t\t//sort the resulting renderables\r\n\t\tif (this.renderableSorter) {\r\n\t\t\tthis._pOpaqueRenderableHead = <GL_RenderableBase> this.renderableSorter.sortOpaqueRenderables(this._pOpaqueRenderableHead);\r\n\t\t\tthis._pBlendedRenderableHead = <GL_RenderableBase> this.renderableSorter.sortBlendedRenderables(this._pBlendedRenderableHead);\r\n\t\t}\r\n\r\n\t\tthis._pRttViewProjectionMatrix.copyFrom(camera.viewProjection);\r\n\t\tthis._pRttViewProjectionMatrix.appendScale(this.textureRatioX, this.textureRatioY, 1);\r\n\r\n\t\tthis.pExecuteRender(camera, target, scissorRect, surfaceSelector);\r\n\r\n\t\t// generate mip maps on target (if target exists) //TODO\r\n\t\t//if (target)\r\n\t\t//\t(<Texture>target).generateMipmaps();\r\n\r\n\t\t// clear buffers\r\n\t\tfor (var i:number = 0; i < 8; ++i) {\r\n\t\t\tthis._pContext.setVertexBufferAt(i, null);\r\n\t\t\tthis._pContext.setTextureAt(i, null);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic _iRenderCascades(camera:Camera, scene:Scene, target:ImageBase, numCascades:number, scissorRects:Array<Rectangle>, cameras:Array<Camera>):void\r\n\t{\r\n\t\tthis._pStage.setRenderTarget(target, true, 0);\r\n\t\tthis._pContext.clear(1, 1, 1, 1, 1, 0);\r\n\r\n\t\tthis._pContext.setBlendFactors(ContextGLBlendFactor.ONE, ContextGLBlendFactor.ZERO);\r\n\t\tthis._pContext.setDepthTest(true, ContextGLCompareMode.LESS);\r\n\r\n\t\tvar head:GL_RenderableBase = this._pOpaqueRenderableHead;\r\n\r\n\t\tvar first:boolean = true;\r\n\r\n\t\t//TODO cascades must have separate collectors, rather than separate draw commands\r\n\t\tfor (var i:number = numCascades - 1; i >= 0; --i) {\r\n\t\t\tthis._pStage.scissorRect = scissorRects[i];\r\n\t\t\t//this.drawCascadeRenderables(head, cameras[i], first? null : cameras[i].frustumPlanes);\r\n\t\t\tfirst = false;\r\n\t\t}\r\n\r\n\t\t//line required for correct rendering when using away3d with starling. DO NOT REMOVE UNLESS STARLING INTEGRATION IS RETESTED!\r\n\t\tthis._pContext.setDepthTest(false, ContextGLCompareMode.LESS_EQUAL);\r\n\r\n\t\tthis._pStage.scissorRect = null;\r\n\t}\r\n\r\n\t/**\r\n\t * Renders the potentially visible geometry to the back buffer or texture. Only executed if everything is set up.\r\n\t *\r\n\t * @param target An option target texture to render to.\r\n\t * @param surfaceSelector The index of a CubeTexture's face to render to.\r\n\t * @param additionalClearMask Additional clear mask information, in case extra clear channels are to be omitted.\r\n\t */\r\n\tpublic pExecuteRender(camera:Camera, target:ImageBase = null, scissorRect:Rectangle = null, surfaceSelector:number = 0):void\r\n\t{\r\n\t\tthis._pStage.setRenderTarget(target, true, surfaceSelector);\r\n\r\n\t\tif ((target || !this.shareContext) && !this._depthPrepass)\r\n\t\t\tthis._pContext.clear(this._backgroundR, this._backgroundG, this._backgroundB, this._backgroundAlpha, 1, 0);\r\n\r\n\t\tthis._pStage.scissorRect = scissorRect;\r\n\r\n\t\t/*\r\n\t\t if (_backgroundImageRenderer)\r\n\t\t _backgroundImageRenderer.render();\r\n\t\t */\r\n\r\n\t\tthis._pContext.setBlendFactors(ContextGLBlendFactor.ONE, ContextGLBlendFactor.ZERO);\r\n\r\n\t\tthis.pDraw(camera);\r\n\r\n\t\t//line required for correct rendering when using away3d with starling. DO NOT REMOVE UNLESS STARLING INTEGRATION IS RETESTED!\r\n\t\t//this._pContext.setDepthTest(false, ContextGLCompareMode.LESS_EQUAL); //oopsie\r\n\r\n\t\tif (!this.shareContext) {\r\n\t\t\tif (this._snapshotRequired && this._snapshotBitmapImage2D) {\r\n\t\t\t\tthis._pContext.drawToBitmapImage2D(this._snapshotBitmapImage2D);\r\n\t\t\t\tthis._snapshotRequired = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._pStage.scissorRect = null;\r\n\t}\r\n\r\n\t/*\r\n\t * Will draw the renderer's output on next render to the provided bitmap data.\r\n\t * */\r\n\tpublic queueSnapshot(bmd:BitmapImage2D):void\r\n\t{\r\n\t\tthis._snapshotRequired = true;\r\n\t\tthis._snapshotBitmapImage2D = bmd;\r\n\t}\r\n\r\n\t/**\r\n\t * Performs the actual drawing of geometry to the target.\r\n\t */\r\n\tpublic pDraw(camera:Camera):void\r\n\t{\r\n\t\tthis._pContext.setDepthTest(true, ContextGLCompareMode.LESS);\r\n\r\n\t\tif (this._disableColor)\r\n\t\t\tthis._pContext.setColorMask(false, false, false, false);\r\n\r\n\t\tthis.drawRenderables(camera, this._pOpaqueRenderableHead);\r\n\r\n\t\tif (this._renderBlended)\r\n\t\t\tthis.drawRenderables(camera, this._pBlendedRenderableHead);\r\n\r\n\t\tif (this._disableColor)\r\n\t\t\tthis._pContext.setColorMask(true, true, true, true);\r\n\t}\r\n\r\n\t//private drawCascadeRenderables(renderableGL:GL_RenderableBase, camera:Camera, cullPlanes:Array<Plane3D>)\r\n\t//{\r\n\t//\tvar renderableGL2:GL_RenderableBase;\r\n\t//\tvar render:GL_SurfaceBase;\r\n\t//\tvar pass:IPass;\r\n\t//\r\n\t//\twhile (renderableGL) {\r\n\t//\t\trenderableGL2 = renderableGL;\r\n\t//\t\trender = renderableGL.render;\r\n\t//\t\tpass = render.passes[0] //assuming only one pass per material\r\n\t//\r\n\t//\t\tthis.activatePass(renderableGL, pass, camera);\r\n\t//\r\n\t//\t\tdo {\r\n\t//\t\t\t// if completely in front, it will fall in a different cascade\r\n\t//\t\t\t// do not use near and far planes\r\n\t//\t\t\tif (!cullPlanes || renderableGL2.sourceEntity.worldBounds.isInFrustum(cullPlanes, 4)) {\r\n\t//\t\t\t\trenderableGL2._iRender(pass, camera, this._pRttViewProjectionMatrix);\r\n\t//\t\t\t} else {\r\n\t//\t\t\t\trenderableGL2.cascaded = true;\r\n\t//\t\t\t}\r\n\t//\r\n\t//\t\t\trenderableGL2 = renderableGL2.next;\r\n\t//\r\n\t//\t\t} while (renderableGL2 && renderableGL2.render == render && !renderableGL2.cascaded);\r\n\t//\r\n\t//\t\tthis.deactivatePass(renderableGL, pass);\r\n\t//\r\n\t//\t\trenderableGL = renderableGL2;\r\n\t//\t}\r\n\t//}\r\n\r\n\t/**\r\n\t * Draw a list of renderables.\r\n\t *\r\n\t * @param renderables The renderables to draw.\r\n\t */\r\n\tpublic drawRenderables(camera:Camera, renderableGL:GL_RenderableBase):void\r\n\t{\r\n\t\tvar i:number;\r\n\t\tvar len:number;\r\n\t\tvar renderableGL2:GL_RenderableBase;\r\n\t\tvar surfaceGL:GL_SurfaceBase;\r\n\t\tvar passes:Array<IPass>;\r\n\t\tvar pass:IPass;\r\n\r\n\t\tthis._pContext.setStencilActions(\"frontAndBack\", \"always\", \"keep\", \"keep\", \"keep\");\r\n\r\n\t\tthis._registeredMasks.length = 0;\r\n\t\tvar gl = this._pContext[\"_gl\"];\r\n\t\tif(gl) {\r\n\t\t\tgl.disable(gl.STENCIL_TEST);\r\n\t\t}\r\n\r\n\t\tthis._maskConfig = 0;\r\n\r\n\t\twhile (renderableGL) {\r\n\t\t\tsurfaceGL = renderableGL.surfaceGL;\r\n\t\t\tpasses = surfaceGL.passes;\r\n\r\n\t\t\t// otherwise this would result in depth rendered anyway because fragment shader kil is ignored\r\n\t\t\tif (this._disableColor && surfaceGL._surface.alphaThreshold != 0) {\r\n\t\t\t\trenderableGL2 = renderableGL;\r\n\t\t\t\t// fast forward\r\n\t\t\t\tdo {\r\n\t\t\t\t\trenderableGL2 = renderableGL2.next;\r\n\r\n\t\t\t\t} while (renderableGL2 && renderableGL2.surfaceGL == surfaceGL);\r\n\t\t\t} else {\r\n\t\t\t\tif (this._activeMasksDirty || this._checkMasksConfig(renderableGL.masksConfig)) {\r\n\t\t\t\t\tthis._activeMasksConfig = renderableGL.masksConfig;\r\n\t\t\t\t\tif (!this._activeMasksConfig.length) {\r\n\t\t\t\t\t\t// disable stencil\r\n\t\t\t\t\t\tif(gl) {\r\n\t\t\t\t\t\t\tgl.disable(gl.STENCIL_TEST);\r\n\t\t\t\t\t\t\tgl.stencilFunc(gl.ALWAYS, 0, 0xff);\r\n\t\t\t\t\t\t\tgl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis._renderMasks(camera, renderableGL.sourceEntity._iAssignedMasks());\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._activeMasksDirty = false;\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\t//iterate through each shader object\r\n\t\t\t\tlen = passes.length;\r\n\t\t\t\tfor (i = 0; i < len; i++) {\r\n\t\t\t\t\trenderableGL2 = renderableGL;\r\n\t\t\t\t\tpass = passes[i];\r\n\r\n\t\t\t\t\tthis.activatePass(pass, camera);\r\n\r\n\t\t\t\t\tdo {\r\n\t\t\t\t\t\tif (renderableGL2.maskId !== -1) {\r\n\t\t\t\t\t\t\tif (i == 0)\r\n\t\t\t\t\t\t\t\tthis._registerMask(renderableGL2);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\trenderableGL2._iRender(pass, camera, this._pRttViewProjectionMatrix);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\trenderableGL2 = renderableGL2.next;\r\n\r\n\t\t\t\t\t} while (renderableGL2 && renderableGL2.surfaceGL == surfaceGL && !(this._activeMasksDirty = this._checkMasksConfig(renderableGL2.masksConfig)));\r\n\r\n\t\t\t\t\tthis.deactivatePass(pass);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\trenderableGL = renderableGL2;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Assign the context once retrieved\r\n\t */\r\n\tprivate onContextUpdate(event:StageEvent):void\r\n\t{\r\n\t\tthis._pContext = <IContextGL> this._pStage.context;\r\n\t}\r\n\r\n\tpublic get _iBackgroundAlpha():number\r\n\t{\r\n\t\treturn this._backgroundAlpha;\r\n\t}\r\n\r\n\tpublic set _iBackgroundAlpha(value:number)\r\n\t{\r\n\t\tif (this._backgroundAlpha == value)\r\n\t\t\treturn;\r\n\r\n\t\tthis._backgroundAlpha = value;\r\n\r\n\t\tthis._pBackBufferInvalid = true;\r\n\t}\r\n\r\n\t/*\r\n\t public get iBackground():Texture2DBase\r\n\t {\r\n\t return this._background;\r\n\t }\r\n\t */\r\n\r\n\t/*\r\n\t public set iBackground(value:Texture2DBase)\r\n\t {\r\n\t if (this._backgroundImageRenderer && !value) {\r\n\t this._backgroundImageRenderer.dispose();\r\n\t this._backgroundImageRenderer = null;\r\n\t }\r\n\r\n\t if (!this._backgroundImageRenderer && value)\r\n\t {\r\n\r\n\t this._backgroundImageRenderer = new BackgroundImageRenderer(this._pStage);\r\n\r\n\t }\r\n\r\n\r\n\t this._background = value;\r\n\r\n\t if (this._backgroundImageRenderer)\r\n\t this._backgroundImageRenderer.texture = value;\r\n\t }\r\n\t */\r\n\t/*\r\n\t public get backgroundImageRenderer():BackgroundImageRenderer\r\n\t {\r\n\t return _backgroundImageRenderer;\r\n\t }\r\n\t */\r\n\r\n\r\n\t/**\r\n\t * @private\r\n\t */\r\n\tprivate notifyScissorUpdate():void\r\n\t{\r\n\t\tif (this._scissorDirty)\r\n\t\t\treturn;\r\n\r\n\t\tthis._scissorDirty = true;\r\n\r\n\t\tif (!this._scissorUpdated)\r\n\t\t\tthis._scissorUpdated = new RendererEvent(RendererEvent.SCISSOR_UPDATED);\r\n\r\n\t\tthis.dispatchEvent(this._scissorUpdated);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @private\r\n\t */\r\n\tprivate notifyViewportUpdate():void\r\n\t{\r\n\t\tif (this._viewportDirty)\r\n\t\t\treturn;\r\n\r\n\t\tthis._viewportDirty = true;\r\n\r\n\t\tif (!this._viewPortUpdated)\r\n\t\t\tthis._viewPortUpdated = new RendererEvent(RendererEvent.VIEWPORT_UPDATED);\r\n\r\n\t\tthis.dispatchEvent(this._viewPortUpdated);\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic onViewportUpdated(event:StageEvent):void\r\n\t{\r\n\t\tthis._viewPort = this._pStage.viewPort;\r\n\t\t//TODO stop firing viewport updated for every stagegl viewport change\r\n\r\n\t\tif (this.shareContext) {\r\n\t\t\tthis._pScissorRect.x = this._globalPos.x - this._pStage.x;\r\n\t\t\tthis._pScissorRect.y = this._globalPos.y - this._pStage.y;\r\n\t\t\tthis.notifyScissorUpdate();\r\n\t\t}\r\n\r\n\t\tthis.notifyViewportUpdate();\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic updateGlobalPos():void\r\n\t{\r\n\t\tif (this.shareContext) {\r\n\t\t\tthis._pScissorRect.x = this._globalPos.x - this._viewPort.x;\r\n\t\t\tthis._pScissorRect.y = this._globalPos.y - this._viewPort.y;\r\n\t\t} else {\r\n\t\t\tthis._pScissorRect.x = 0;\r\n\t\t\tthis._pScissorRect.y = 0;\r\n\t\t\tthis._viewPort.x = this._globalPos.x;\r\n\t\t\tthis._viewPort.y = this._globalPos.y;\r\n\t\t}\r\n\r\n\t\tthis.notifyScissorUpdate();\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param node\r\n\t * @returns {boolean}\r\n\t */\r\n\tpublic enterNode(node:INode):boolean\r\n\t{\r\n\t\tvar enter:boolean = node._iCollectionMark != RendererBase._iCollectionMark && node.isRenderable() && node.isInFrustum(this._cullPlanes, this._numCullPlanes);\r\n\r\n\t\tnode._iCollectionMark = RendererBase._iCollectionMark;\r\n\r\n\t\treturn enter;\r\n\t}\r\n\r\n\tpublic applyEntity(entity:IEntity):void\r\n\t{\r\n\t\tthis._sourceEntity = entity;\r\n\r\n\t\t// project onto camera's z-axis\r\n\t\tthis._zIndex = entity.zOffset + this._cameraPosition.subtract(entity.scenePosition).dotProduct(this._cameraForward);\r\n\r\n\t\t//save sceneTransform\r\n\t\tthis._renderSceneTransform = entity.getRenderSceneTransform(this._cameraTransform);\r\n\r\n\t\t//collect renderables\r\n\t\tentity._acceptTraverser(this);\r\n\t}\r\n\r\n\tpublic applyRenderable(renderable:IRenderable):void\r\n\t{\r\n\t\tvar renderableGL:GL_RenderableBase = this.getAbstraction(renderable);\r\n\t\tvar surfaceGL:GL_SurfaceBase = renderableGL.surfaceGL;\r\n\r\n\t\t//set local vars for faster referencing\r\n\t\trenderableGL.surfaceID = surfaceGL.surfaceID;\r\n\t\trenderableGL.renderOrderId = surfaceGL.renderOrderId;\r\n\r\n\t\trenderableGL.cascaded = false;\r\n\r\n\t\trenderableGL.sourceEntity = this._sourceEntity;\r\n\t\trenderableGL.zIndex = this._zIndex;\r\n\t\trenderableGL.maskId = this._sourceEntity._iAssignedMaskId();\r\n\t\trenderableGL.masksConfig = this._sourceEntity._iMasksConfig();\r\n\r\n\t\t//store reference to scene transform\r\n\t\trenderableGL.renderSceneTransform = this._renderSceneTransform;\r\n\r\n\t\tif (surfaceGL.requiresBlending) {\r\n\t\t\trenderableGL.next = this._pBlendedRenderableHead;\r\n\t\t\tthis._pBlendedRenderableHead = renderableGL;\r\n\t\t} else {\r\n\t\t\trenderableGL.next = this._pOpaqueRenderableHead;\r\n\t\t\tthis._pOpaqueRenderableHead = renderableGL;\r\n\t\t}\r\n\r\n\t\tthis._pNumElements += renderableGL.elementsGL.elements.numElements;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param entity\r\n\t */\r\n\tpublic applyDirectionalLight(entity:IEntity):void\r\n\t{\r\n\t\t//don't do anything here\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param entity\r\n\t */\r\n\tpublic applyLightProbe(entity:IEntity):void\r\n\t{\r\n\t\t//don't do anything here\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param entity\r\n\t */\r\n\tpublic applyPointLight(entity:IEntity):void\r\n\t{\r\n\t\t//don't do anything here\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param entity\r\n\t */\r\n\tpublic applySkybox(entity:IEntity):void\r\n\t{\r\n\t\t//don't do anything here\r\n\t}\r\n\r\n\tprivate _registerMask(obj:GL_RenderableBase):void\r\n\t{\r\n\t\t//console.log(\"registerMask\");\r\n\t\tthis._registeredMasks.push(obj);\r\n\t}\r\n\r\n\tpublic _renderMasks(camera:Camera, masks:DisplayObject[][]):void\r\n\t{\r\n\t\tvar gl = this._pContext[\"_gl\"];\r\n\t\t//var oldRenderTarget = this._stage.renderTarget;\r\n\r\n\t\t//this._stage.setRenderTarget(this._image);\r\n\t\t//this._stage.clear();\r\n\t\tthis._pContext.setColorMask(false, false, false, false);\r\n\t\t// TODO: Could we create masks within masks by providing a previous configID, and supply \"clear/keep\" on stencil fail\r\n\t\t//context.setStencilActions(\"frontAndBack\", \"always\", \"set\", \"set\", \"set\");\r\n\t\tgl.enable(gl.STENCIL_TEST);\r\n\t\tthis._maskConfig++;\r\n\t\tgl.stencilFunc(gl.ALWAYS, this._maskConfig, 0xff);\r\n\t\tgl.stencilOp(gl.REPLACE, gl.REPLACE, gl.REPLACE);\r\n\r\n\t\tvar numLayers:number = masks.length;\r\n\t\tvar numRenderables:number = this._registeredMasks.length;\r\n\t\tvar renderableGL:GL_RenderableBase;\r\n\t\tvar children:Array<DisplayObject>;\r\n\t\tvar numChildren:number;\r\n\t\tvar mask:DisplayObject;\r\n\r\n\t\tfor (var i:number = 0; i < numLayers; ++i) {\r\n\t\t\tif (i != 0) {\r\n\t\t\t\tgl.stencilFunc(gl.EQUAL, this._maskConfig, 0xff);\r\n\t\t\t\tgl.stencilOp(gl.KEEP, gl.INCR, gl.INCR);\r\n\t\t\t\tthis._maskConfig++;\r\n\t\t\t}\r\n\r\n\t\t\tchildren = masks[i];\r\n\t\t\tnumChildren = children.length;\r\n\r\n\t\t\tfor (var j:number = 0; j < numChildren; ++j) {\r\n\t\t\t\tmask = children[j];\r\n\t\t\t\tfor (var k:number = 0; k < numRenderables; ++k) {\r\n\t\t\t\t\trenderableGL = this._registeredMasks[k];\r\n\t\t\t\t\t//console.log(\"testing for \" + mask[\"hierarchicalMaskID\"] + \", \" + mask.name);\r\n\t\t\t\t\tif (renderableGL.maskId == mask.id) {\r\n\t\t\t\t\t\t//console.log(\"Rendering hierarchicalMaskID \" + mask[\"hierarchicalMaskID\"]);\r\n\t\t\t\t\t\tthis._drawMask(camera, renderableGL);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tgl.stencilFunc(gl.EQUAL, this._maskConfig, 0xff);\r\n\t\tgl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\r\n\r\n\t\tthis._pContext.setColorMask(true, true, true, true);\r\n\t\tthis._pContext.setDepthTest(true, ContextGLCompareMode.LESS);\r\n\t\t//this._stage.setRenderTarget(oldRenderTarget);\r\n\t}\r\n\r\n\tprivate _drawMask(camera:Camera, renderableGL:GL_RenderableBase):void\r\n\t{\r\n\t\tvar surfaceGL = renderableGL.surfaceGL;\r\n\t\tvar passes = surfaceGL.passes;\r\n\t\tvar len = passes.length;\r\n\t\tvar pass = passes[len-1];\r\n\r\n\t\tthis.activatePass(pass, camera);\r\n\t\tthis._pContext.setDepthTest(false, ContextGLCompareMode.LESS); //TODO: setup so as not to override activate\r\n\t\t// only render last pass for now\r\n\t\trenderableGL._iRender(pass, camera, this._pRttViewProjectionMatrix);\r\n\t\tthis.deactivatePass(pass);\r\n\t}\r\n\r\n\tprivate _checkMasksConfig(masksConfig:Array<Array<number>>):boolean\r\n\t{\r\n\t\tif (this._activeMasksConfig.length != masksConfig.length)\r\n\t\t\treturn true;\r\n\r\n\t\tvar numLayers:number = masksConfig.length;\r\n\t\tvar numChildren:number;\r\n\t\tvar childConfig:Array<number>;\r\n\t\tvar activeNumChildren:number;\r\n\t\tvar activeChildConfig:Array<number>;\r\n\t\tfor (var i:number = 0; i < numLayers; i++) {\r\n\t\t\tchildConfig = masksConfig[i];\r\n\t\t\tnumChildren = childConfig.length;\r\n\t\t\tactiveChildConfig = this._activeMasksConfig[i];\r\n\t\t\tactiveNumChildren = activeChildConfig.length;\r\n\t\t\tif (activeNumChildren != numChildren)\r\n\t\t\t\treturn true;\r\n\r\n\t\t\tfor (var j:number = 0; j < numChildren; j++) {\r\n\t\t\t\tif (activeChildConfig[j] != childConfig[j])\r\n\t\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n}",
    "import {IAsset}\t\t\t\t\t\tfrom \"awayjs-core/lib/library/IAsset\";\r\nimport {AssetBase}\t\t\t\t\tfrom \"awayjs-core/lib/library/AssetBase\";\r\nimport {AbstractMethodError}\t\t\tfrom \"awayjs-core/lib/errors/AbstractMethodError\";\r\n\r\nimport {AnimationNodeBase}\t\t\tfrom \"awayjs-display/lib/animators/nodes/AnimationNodeBase\";\r\n\r\nimport {AnimationSetError}\t\t\tfrom \"../errors/AnimationSetError\";\r\nimport {ShaderBase}\t\t\t\t\tfrom \"../shaders/ShaderBase\";\r\nimport {ShaderRegisterElement}\t\t\tfrom \"../shaders/ShaderRegisterElement\";\r\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterData}\t\t\t\tfrom \"../shaders/ShaderRegisterData\";\r\n\r\n/**\r\n * Provides an abstract base class for data set classes that hold animation data for use in animator classes.\r\n *\r\n * @see away.animators.AnimatorBase\r\n */\r\nexport class AnimationSetBase extends AssetBase implements IAsset\r\n{\r\n\tpublic static assetType:string = \"[asset AnimationSet]\";\r\n\r\n\tprivate _usesCPU:boolean;\r\n\tprivate _animations:Array<AnimationNodeBase> = new Array<AnimationNodeBase>();\r\n\tprivate _animationNames:Array<string> = new Array<string>();\r\n\tprivate _animationDictionary:Object = new Object();\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves a temporary GPU register that's still free.\r\n\t *\r\n\t * @param exclude An array of non-free temporary registers.\r\n\t * @param excludeAnother An additional register that's not free.\r\n\t * @return A temporary register that can be used.\r\n\t */\r\n\tpublic _pFindTempReg(exclude:Array<string>, excludeAnother:string = null):string\r\n\t{\r\n\t\tvar i:number = 0;\r\n\t\tvar reg:string;\r\n\r\n\t\twhile (true) {\r\n\t\t\treg = \"vt\" + i;\r\n\t\t\tif (exclude.indexOf(reg) == -1 && excludeAnother != reg)\r\n\t\t\t\treturn reg;\r\n\t\t\t++i;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether the properties of the animation data contained within the set combined with\r\n\t * the vertex registers already in use on shading materials allows the animation data to utilise\r\n\t * GPU calls.\r\n\t */\r\n\tpublic get usesCPU():boolean\r\n\t{\r\n\t\treturn this._usesCPU;\r\n\t}\r\n\r\n\t/**\r\n\t * Called by the material to reset the GPU indicator before testing whether register space in the shader\r\n\t * is available for running GPU-based animation code.\r\n\t *\r\n\t * @private\r\n\t */\r\n\tpublic resetGPUCompatibility():void\r\n\t{\r\n\t\tthis._usesCPU = false;\r\n\t}\r\n\r\n\tpublic cancelGPUCompatibility():void\r\n\t{\r\n\t\tthis._usesCPU = true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAGALVertexCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\r\n\t{\r\n\t\tthrow new AbstractMethodError();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAGALFragmentCode(shader:ShaderBase, registerCache:ShaderRegisterCache, shadedTarget:ShaderRegisterElement):string\r\n\t{\r\n\t\tthrow new AbstractMethodError();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAGALUVCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\r\n\t{\r\n\t\tthrow new AbstractMethodError();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic doneAGALCode(shader:ShaderBase):void\r\n\t{\r\n\t\tthrow new AbstractMethodError();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic get assetType():string\r\n\t{\r\n\t\treturn AnimationSetBase.assetType;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a vector of animation state objects that make up the contents of the animation data set.\r\n\t */\r\n\tpublic get animations():Array<AnimationNodeBase>\r\n\t{\r\n\t\treturn this._animations;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a vector of animation state objects that make up the contents of the animation data set.\r\n\t */\r\n\tpublic get animationNames():Array<string>\r\n\t{\r\n\t\treturn this._animationNames;\r\n\t}\r\n\r\n\t/**\r\n\t * Check to determine whether a state is registered in the animation set under the given name.\r\n\t *\r\n\t * @param stateName The name of the animation state object to be checked.\r\n\t */\r\n\tpublic hasAnimation(name:string):boolean\r\n\t{\r\n\t\treturn this._animationDictionary[name] != null;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the animation state object registered in the animation data set under the given name.\r\n\t *\r\n\t * @param stateName The name of the animation state object to be retrieved.\r\n\t */\r\n\tpublic getAnimation(name:string):AnimationNodeBase\r\n\t{\r\n\t\treturn this._animationDictionary[name];\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an animation state object to the aniamtion data set under the given name.\r\n\t *\r\n\t * @param stateName The name under which the animation state object will be stored.\r\n\t * @param animationState The animation state object to be staored in the set.\r\n\t */\r\n\tpublic addAnimation(node:AnimationNodeBase):void\r\n\t{\r\n\t\tif (this._animationDictionary[node.name])\r\n\t\t\tthrow new AnimationSetError(\"root node name '\" + node.name + \"' already exists in the set\");\r\n\r\n\t\tthis._animationDictionary[node.name] = node;\r\n\r\n\t\tthis._animations.push(node);\r\n\r\n\t\tthis._animationNames.push(node.name);\r\n\t}\r\n\r\n\t/**\r\n\t * Cleans up any resources used by the current object.\r\n\t */\r\n\tpublic dispose():void\r\n\t{\r\n\t}\r\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\nimport {AssetBase}\t\t\t\t\t\tfrom \"awayjs-core/lib/library/AssetBase\";\r\nimport {AbstractMethodError}\t\t\t\tfrom \"awayjs-core/lib/errors/AbstractMethodError\";\r\nimport {RequestAnimationFrame}\t\t\tfrom \"awayjs-core/lib/utils/RequestAnimationFrame\";\r\nimport {getTimer}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/utils/getTimer\";\r\n\r\nimport {IAnimationSet}\t\t\t\t\tfrom \"awayjs-display/lib/animators/IAnimationSet\";\r\nimport {IAnimator}\t\t\t\t\t\tfrom \"awayjs-display/lib/animators/IAnimator\";\r\nimport {AnimationNodeBase}\t\t\t\tfrom \"awayjs-display/lib/animators/nodes/AnimationNodeBase\";\r\nimport {ElementsBase}\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/ElementsBase\";\r\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\nimport {Sprite}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Sprite\";\r\n\r\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\n\r\nimport {IAnimationState}\t\t\t\t\tfrom \"../animators/states/IAnimationState\";\r\nimport {GL_RenderableBase}\t\t\t\tfrom \"../renderables/GL_RenderableBase\";\r\nimport {AnimatorEvent}\t\t\t\t\tfrom \"../events/AnimatorEvent\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../shaders/ShaderBase\";\r\n\r\n/**\r\n * Dispatched when playback of an animation inside the animator object starts.\r\n *\r\n * @eventType away3d.events.AnimatorEvent\r\n */\r\n//[Event(name=\"start\", type=\"away3d.events.AnimatorEvent\")]\r\n\r\n/**\r\n * Dispatched when playback of an animation inside the animator object stops.\r\n *\r\n * @eventType away3d.events.AnimatorEvent\r\n */\r\n//[Event(name=\"stop\", type=\"away3d.events.AnimatorEvent\")]\r\n\r\n/**\r\n * Dispatched when playback of an animation reaches the end of an animation.\r\n *\r\n * @eventType away3d.events.AnimatorEvent\r\n */\r\n//[Event(name=\"cycle_complete\", type=\"away3d.events.AnimatorEvent\")]\r\n\r\n/**\r\n * Provides an abstract base class for animator classes that control animation output from a data set subtype of <code>AnimationSetBase</code>.\r\n *\r\n * @see away.animators.AnimationSetBase\r\n */\r\nexport class AnimatorBase extends AssetBase implements IAnimator\r\n{\r\n\tpublic static assetType:string = \"[asset Animator]\";\r\n\r\n\tprivate _broadcaster:RequestAnimationFrame;\r\n\tprivate _isPlaying:boolean;\r\n\tprivate _autoUpdate:boolean = true;\r\n\tprivate _startEvent:AnimatorEvent;\r\n\tprivate _stopEvent:AnimatorEvent;\r\n\tprivate _cycleEvent:AnimatorEvent;\r\n\tprivate _time:number = 0;\r\n\tprivate _playbackSpeed:number = 1;\r\n\r\n\tpublic _pAnimationSet:IAnimationSet;\r\n\tpublic _pOwners:Array<Sprite> = new Array<Sprite>();\r\n\tpublic _pActiveNode:AnimationNodeBase;\r\n\tpublic _pActiveState:IAnimationState;\r\n\tpublic _pActiveAnimationName:string;\r\n\tpublic _pAbsoluteTime:number = 0;\r\n\r\n\tprivate _animationStates:Object = new Object();\r\n\r\n\t/**\r\n\t * Enables translation of the animated sprite from data returned per frame via the positionDelta property of the active animation node. Defaults to true.\r\n\t *\r\n\t * @see away.animators.IAnimationState#positionDelta\r\n\t */\r\n\tpublic updatePosition:boolean = true;\r\n\r\n\tpublic getAnimationState(node:AnimationNodeBase):IAnimationState\r\n\t{\r\n\t\tvar className:any = node.stateClass;\r\n\t\tvar uID:number = node.id;\r\n\r\n\t\tif (this._animationStates[uID] == null)\r\n\t\t\tthis._animationStates[uID] = new className(this, node);\r\n\r\n\t\treturn this._animationStates[uID];\r\n\t}\r\n\r\n\tpublic getAnimationStateByName(name:string):IAnimationState\r\n\t{\r\n\t\treturn this.getAnimationState(this._pAnimationSet.getAnimation(name));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the internal absolute time of the animator, calculated by the current time and the playback speed.\r\n\t *\r\n\t * @see #time\r\n\t * @see #playbackSpeed\r\n\t */\r\n\tpublic get absoluteTime():number\r\n\t{\r\n\t\treturn this._pAbsoluteTime;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the animation data set in use by the animator.\r\n\t */\r\n\tpublic get animationSet():IAnimationSet\r\n\t{\r\n\t\treturn this._pAnimationSet;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the current active animation state.\r\n\t */\r\n\tpublic get activeState():IAnimationState\r\n\t{\r\n\t\treturn this._pActiveState;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the current active animation node.\r\n\t */\r\n\tpublic get activeAnimation():AnimationNodeBase\r\n\t{\r\n\t\treturn this._pAnimationSet.getAnimation(this._pActiveAnimationName);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the current active animation node.\r\n\t */\r\n\tpublic get activeAnimationName():string\r\n\t{\r\n\t\treturn this._pActiveAnimationName;\r\n\t}\r\n\r\n\t/**\r\n\t * Determines whether the animators internal update mechanisms are active. Used in cases\r\n\t * where manual updates are required either via the <code>time</code> property or <code>update()</code> method.\r\n\t * Defaults to true.\r\n\t *\r\n\t * @see #time\r\n\t * @see #update()\r\n\t */\r\n\tpublic get autoUpdate():boolean\r\n\t{\r\n\t\treturn this._autoUpdate;\r\n\t}\r\n\r\n\tpublic set autoUpdate(value:boolean)\r\n\t{\r\n\t\tif (this._autoUpdate == value)\r\n\t\t\treturn;\r\n\r\n\t\tthis._autoUpdate = value;\r\n\r\n\t\tif (this._autoUpdate)\r\n\t\t\tthis.start(); else\r\n\t\t\tthis.stop();\r\n\t}\r\n\r\n\t/**\r\n\t * Gets and sets the internal time clock of the animator.\r\n\t */\r\n\tpublic get time():number\r\n\t{\r\n\t\treturn this._time;\r\n\t}\r\n\r\n\tpublic set time(value:number)\r\n\t{\r\n\t\tif (this._time == value)\r\n\t\t\treturn;\r\n\r\n\t\tthis.update(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the animation phase of the current active state's animation clip(s).\r\n\t *\r\n\t * @param value The phase value to use. 0 represents the beginning of an animation clip, 1 represents the end.\r\n\t */\r\n\tpublic phase(value:number):void\r\n\t{\r\n\t\tthis._pActiveState.phase(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new <code>AnimatorBase</code> object.\r\n\t *\r\n\t * @param animationSet The animation data set to be used by the animator object.\r\n\t */\r\n\tconstructor(animationSet:IAnimationSet)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tthis._pAnimationSet = animationSet;\r\n\r\n\t\tthis._broadcaster = new RequestAnimationFrame(this.onEnterFrame, this);\r\n\t}\r\n\r\n\t/**\r\n\t * The amount by which passed time should be scaled. Used to slow down or speed up animations. Defaults to 1.\r\n\t */\r\n\tpublic get playbackSpeed():number\r\n\t{\r\n\t\treturn this._playbackSpeed;\r\n\t}\r\n\r\n\tpublic set playbackSpeed(value:number)\r\n\t{\r\n\t\tthis._playbackSpeed = value;\r\n\t}\r\n\r\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, stage:Stage, camera:Camera):void\r\n\t{\r\n\t\tthrow new AbstractMethodError();\r\n\t}\r\n\r\n\t/**\r\n\t * Resumes the automatic playback clock controling the active state of the animator.\r\n\t */\r\n\tpublic start():void\r\n\t{\r\n\t\tif (this._isPlaying || !this._autoUpdate)\r\n\t\t\treturn;\r\n\r\n\t\tthis._time = this._pAbsoluteTime = getTimer();\r\n\r\n\t\tthis._isPlaying = true;\r\n\r\n\t\tthis._broadcaster.start();\r\n\r\n\t\tif (!this.hasEventListener(AnimatorEvent.START))\r\n\t\t\treturn;\r\n\r\n\t\tif (this._startEvent == null)\r\n\t\t\tthis._startEvent = new AnimatorEvent(AnimatorEvent.START, this);\r\n\r\n\t\tthis.dispatchEvent(this._startEvent);\r\n\t}\r\n\r\n\t/**\r\n\t * Pauses the automatic playback clock of the animator, in case manual updates are required via the\r\n\t * <code>time</code> property or <code>update()</code> method.\r\n\t *\r\n\t * @see #time\r\n\t * @see #update()\r\n\t */\r\n\tpublic stop():void\r\n\t{\r\n\t\tif (!this._isPlaying)\r\n\t\t\treturn;\r\n\r\n\t\tthis._isPlaying = false;\r\n\r\n\t\tthis._broadcaster.stop();\r\n\r\n\t\tif (!this.hasEventListener(AnimatorEvent.STOP))\r\n\t\t\treturn;\r\n\r\n\t\tif (this._stopEvent == null)\r\n\t\t\tthis._stopEvent = new AnimatorEvent(AnimatorEvent.STOP, this);\r\n\r\n\t\tthis.dispatchEvent(this._stopEvent);\r\n\t}\r\n\r\n\t/**\r\n\t * Provides a way to manually update the active state of the animator when automatic\r\n\t * updates are disabled.\r\n\t *\r\n\t * @see #stop()\r\n\t * @see #autoUpdate\r\n\t */\r\n\tpublic update(time:number):void\r\n\t{\r\n\t\tvar dt:number = (time - this._time)*this.playbackSpeed;\r\n\r\n\t\tthis._pUpdateDeltaTime(dt);\r\n\r\n\t\tthis._time = time;\r\n\t}\r\n\r\n\tpublic reset(name:string, offset:number = 0):void\r\n\t{\r\n\t\tthis.getAnimationState(this._pAnimationSet.getAnimation(name)).offset(offset + this._pAbsoluteTime);\r\n\t}\r\n\r\n\t/**\r\n\t * Used by the sprite object to which the animator is applied, registers the owner for internal use.\r\n\t *\r\n\t * @private\r\n\t */\r\n\tpublic addOwner(sprite:Sprite):void\r\n\t{\r\n\t\tthis._pOwners.push(sprite);\r\n\t}\r\n\r\n\t/**\r\n\t * Used by the sprite object from which the animator is removed, unregisters the owner for internal use.\r\n\t *\r\n\t * @private\r\n\t */\r\n\tpublic removeOwner(sprite:Sprite):void\r\n\t{\r\n\t\tthis._pOwners.splice(this._pOwners.indexOf(sprite), 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Internal abstract method called when the time delta property of the animator's contents requires updating.\r\n\t *\r\n\t * @private\r\n\t */\r\n\tpublic _pUpdateDeltaTime(dt:number):void\r\n\t{\r\n\t\tthis._pAbsoluteTime += dt;\r\n\r\n\t\tthis._pActiveState.update(this._pAbsoluteTime);\r\n\r\n\t\tif (this.updatePosition)\r\n\t\t\tthis.applyPositionDelta();\r\n\t}\r\n\r\n\t/**\r\n\t * Enter frame event handler for automatically updating the active state of the animator.\r\n\t */\r\n\tprivate onEnterFrame(event:Event = null):void\r\n\t{\r\n\t\tthis.update(getTimer());\r\n\t}\r\n\r\n\tprivate applyPositionDelta():void\r\n\t{\r\n\t\tvar delta:Vector3D = this._pActiveState.positionDelta;\r\n\t\tvar dist:number = delta.length;\r\n\t\tvar len:number;\r\n\t\tif (dist > 0) {\r\n\t\t\tlen = this._pOwners.length;\r\n\t\t\tfor (var i:number = 0; i < len; ++i)\r\n\t\t\t\tthis._pOwners[i].transform.translateLocal(delta, dist);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *  for internal use.\r\n\t *\r\n\t * @private\r\n\t */\r\n\tpublic dispatchCycleEvent():void\r\n\t{\r\n\t\tif (this.hasEventListener(AnimatorEvent.CYCLE_COMPLETE)) {\r\n\t\t\tif (this._cycleEvent == null)\r\n\t\t\t\tthis._cycleEvent = new AnimatorEvent(AnimatorEvent.CYCLE_COMPLETE, this);\r\n\r\n\t\t\tthis.dispatchEvent(this._cycleEvent);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic clone():AnimatorBase\r\n\t{\r\n\t\tthrow new AbstractMethodError();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic dispose():void\r\n\t{\r\n\t}\r\n\r\n\r\n\tpublic invalidateElements():void\r\n\t{\r\n\t\tvar sprite:Sprite;\r\n\t\tvar len:number = this._pOwners.length;\r\n\t\tfor (var i:number = 0; i < len; i++) {\r\n\t\t\tsprite = this._pOwners[i];\r\n\t\t\tsprite.graphics.invalidateElements();\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic testGPUCompatibility(shader:ShaderBase):void\r\n\t{\r\n\t\tthrow new AbstractMethodError();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic get assetType():string\r\n\t{\r\n\t\treturn AnimatorBase.assetType;\r\n\t}\r\n\r\n\r\n\tpublic getRenderableElements(renderable:GL_RenderableBase, sourceElements:ElementsBase):ElementsBase\r\n\t{\r\n\t\t//nothing to do here\r\n\t\treturn sourceElements;\r\n\t}\r\n}",
    "import {ElementsBase}\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/ElementsBase\";\r\nimport {IAnimationSet}\t\t\t\t\tfrom \"awayjs-display/lib/animators/IAnimationSet\";\r\nimport {ParticleData}\t\t\t\t\t\tfrom \"awayjs-display/lib/animators/data/ParticleData\";\r\nimport {AnimationNodeBase}\t\t\t\tfrom \"awayjs-display/lib/animators/nodes/AnimationNodeBase\";\r\nimport {Graphic}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphic\";\r\nimport {Graphics}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphics\";\r\n\r\nimport {AnimationSetBase}\t\t\t\t\tfrom \"../animators/AnimationSetBase\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../animators/data/AnimationRegisterData\";\r\nimport {AnimationElements}\t\t\t\tfrom \"../animators/data/AnimationElements\";\r\nimport {ParticleAnimationData}\t\t\tfrom \"../animators/data/ParticleAnimationData\";\r\nimport {ParticleProperties}\t\t\t\tfrom \"../animators/data/ParticleProperties\";\r\nimport {ParticlePropertiesMode}\t\t\tfrom \"../animators/data/ParticlePropertiesMode\";\r\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../animators/nodes/ParticleNodeBase\";\r\nimport {ParticleTimeNode}\t\t\t\t\tfrom \"../animators/nodes/ParticleTimeNode\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../shaders/ShaderBase\";\r\nimport {ShaderRegisterElement}\t\t\tfrom \"../shaders/ShaderRegisterElement\";\r\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterData}\t\t\t\tfrom \"../shaders/ShaderRegisterData\";\r\n\r\n/**\r\n * The animation data set used by particle-based animators, containing particle animation data.\r\n *\r\n * @see away.animators.ParticleAnimator\r\n */\r\nexport class ParticleAnimationSet extends AnimationSetBase implements IAnimationSet\r\n{\r\n\t/** @private */\r\n\tpublic _iAnimationRegisterData:AnimationRegisterData;\r\n\r\n\t//all other nodes dependent on it\r\n\tprivate _timeNode:ParticleTimeNode;\r\n\r\n\t/**\r\n\t * Property used by particle nodes that require compilers at the end of the shader\r\n\t */\r\n\tpublic static POST_PRIORITY:number = 9;\r\n\r\n\t/**\r\n\t * Property used by particle nodes that require color compilers\r\n\t */\r\n\tpublic static COLOR_PRIORITY:number = 18;\r\n\r\n\tprivate _animationElements:Object = new Object();\r\n\tprivate _particleNodes:Array<ParticleNodeBase> = new Array<ParticleNodeBase>();\r\n\tprivate _localDynamicNodes:Array<ParticleNodeBase> = new Array<ParticleNodeBase>();\r\n\tprivate _localStaticNodes:Array<ParticleNodeBase> = new Array<ParticleNodeBase>();\r\n\tprivate _totalLenOfOneVertex:number = 0;\r\n\r\n\t//set true if has an node which will change UV\r\n\tpublic hasUVNode:boolean;\r\n\t//set if the other nodes need to access the velocity\r\n\tpublic needVelocity:boolean;\r\n\t//set if has a billboard node.\r\n\tpublic hasBillboard:boolean;\r\n\t//set if has an node which will apply color multiple operation\r\n\tpublic hasColorMulNode:boolean;\r\n\t//set if has an node which will apply color add operation\r\n\tpublic hasColorAddNode:boolean;\r\n\r\n\t/**\r\n\t * Initialiser function for static particle properties. Needs to reference a with the following format\r\n\t *\r\n\t * <code>\r\n\t * initParticleFunc(prop:ParticleProperties)\r\n\t * {\r\n\t * \t\t//code for settings local properties\r\n\t * }\r\n\t * </code>\r\n\t *\r\n\t * Aside from setting any properties required in particle animation nodes using local static properties, the initParticleFunc function\r\n\t * is required to time node requirements as they may be needed. These properties on the ParticleProperties object can include\r\n\t * <code>startTime</code>, <code>duration</code> and <code>delay</code>. The use of these properties is determined by the setting\r\n\t * arguments passed in the constructor of the particle animation set. By default, only the <code>startTime</code> property is required.\r\n\t */\r\n\tpublic initParticleFunc:Function;\r\n\r\n\t/**\r\n\t * Initialiser function scope for static particle properties\r\n\t */\r\n\tpublic initParticleScope:Object;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic shareAnimationGraphics:boolean = true;\r\n\r\n\t/**\r\n\t * Creates a new <code>ParticleAnimationSet</code>\r\n\t *\r\n\t * @param    [optional] usesDuration    Defines whether the animation set uses the <code>duration</code> data in its static properties to determine how long a particle is visible for. Defaults to false.\r\n\t * @param    [optional] usesLooping     Defines whether the animation set uses a looping timeframe for each particle determined by the <code>startTime</code>, <code>duration</code> and <code>delay</code> data in its static properties function. Defaults to false. Requires <code>usesDuration</code> to be true.\r\n\t * @param    [optional] usesDelay       Defines whether the animation set uses the <code>delay</code> data in its static properties to determine how long a particle is hidden for. Defaults to false. Requires <code>usesLooping</code> to be true.\r\n\t */\r\n\tconstructor(usesDuration:boolean = false, usesLooping:boolean = false, usesDelay:boolean = false)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\t//automatically add a particle time node to the set\r\n\t\tthis.addAnimation(this._timeNode = new ParticleTimeNode(usesDuration, usesLooping, usesDelay));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a vector of the particle animation nodes contained within the set.\r\n\t */\r\n\tpublic get particleNodes():Array<ParticleNodeBase>\r\n\t{\r\n\t\treturn this._particleNodes;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic addAnimation(node:AnimationNodeBase):void\r\n\t{\r\n\t\tvar i:number;\r\n\t\tvar n:ParticleNodeBase = <ParticleNodeBase> node;\r\n\t\tn._iProcessAnimationSetting(this);\r\n\t\tif (n.mode == ParticlePropertiesMode.LOCAL_STATIC) {\r\n\t\t\tn._iDataOffset = this._totalLenOfOneVertex;\r\n\t\t\tthis._totalLenOfOneVertex += n.dataLength;\r\n\t\t\tthis._localStaticNodes.push(n);\r\n\t\t} else if (n.mode == ParticlePropertiesMode.LOCAL_DYNAMIC)\r\n\t\t\tthis._localDynamicNodes.push(n);\r\n\r\n\t\tfor (i = this._particleNodes.length - 1; i >= 0; i--) {\r\n\t\t\tif (this._particleNodes[i].priority <= n.priority)\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tthis._particleNodes.splice(i + 1, 0, n);\r\n\r\n\t\tsuper.addAnimation(node);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAGALVertexCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\r\n\t{\r\n\t\t//grab animationRegisterData from the materialpassbase or create a new one if the first time\r\n\t\tthis._iAnimationRegisterData = shader.animationRegisterData;\r\n\r\n\t\tif (this._iAnimationRegisterData == null)\r\n\t\t\tthis._iAnimationRegisterData = shader.animationRegisterData = new AnimationRegisterData();\r\n\r\n\t\t//reset animationRegisterData\r\n\t\tthis._iAnimationRegisterData.reset(registerCache, sharedRegisters, this.needVelocity);\r\n\r\n\t\tvar code:string = \"\";\r\n\r\n\t\tvar len:number = sharedRegisters.animatableAttributes.length;\r\n\t\tfor (var i:number = 0; i < len; i++)\r\n\t\t\tcode += \"mov \" + sharedRegisters.animationTargetRegisters[i] + \",\" + sharedRegisters.animatableAttributes[i] + \"\\n\";\r\n\r\n\t\tcode += \"mov \" + this._iAnimationRegisterData.positionTarget + \".xyz,\" + this._iAnimationRegisterData.vertexZeroConst + \"\\n\";\r\n\r\n\t\tif (this.needVelocity)\r\n\t\t\tcode += \"mov \" + this._iAnimationRegisterData.velocityTarget + \".xyz,\" + this._iAnimationRegisterData.vertexZeroConst + \"\\n\";\r\n\r\n\t\tvar node:ParticleNodeBase;\r\n\t\tvar i:number;\r\n\r\n\t\tfor (i = 0; i < this._particleNodes.length; i++) {\r\n\t\t\tnode = this._particleNodes[i];\r\n\t\t\tif (node.priority < ParticleAnimationSet.POST_PRIORITY)\r\n\t\t\t\tcode += node.getAGALVertexCode(shader, this, registerCache, this._iAnimationRegisterData);\r\n\t\t}\r\n\r\n\t\tcode += \"add \" + this._iAnimationRegisterData.scaleAndRotateTarget + \".xyz,\" + this._iAnimationRegisterData.scaleAndRotateTarget + \".xyz,\" + this._iAnimationRegisterData.positionTarget + \".xyz\\n\";\r\n\r\n\t\tfor (i = 0; i < this._particleNodes.length; i++) {\r\n\t\t\tnode = this._particleNodes[i];\r\n\t\t\tif (node.priority >= ParticleAnimationSet.POST_PRIORITY && node.priority < ParticleAnimationSet.COLOR_PRIORITY)\r\n\t\t\t\tcode += node.getAGALVertexCode(shader, this, registerCache, this._iAnimationRegisterData);\r\n\t\t}\r\n\r\n\t\tif (this.hasColorMulNode) {\r\n\t\t\tthis._iAnimationRegisterData.colorMulTarget = registerCache.getFreeVertexVectorTemp();\r\n\t\t\tregisterCache.addVertexTempUsages(this._iAnimationRegisterData.colorMulTarget, 1);\r\n\t\t\tthis._iAnimationRegisterData.colorMulVary = registerCache.getFreeVarying();\r\n\t\t\tcode += \"mov \" + this._iAnimationRegisterData.colorMulTarget + \",\" + this._iAnimationRegisterData.vertexOneConst + \"\\n\";\r\n\t\t}\r\n\t\tif (this.hasColorAddNode) {\r\n\t\t\tthis._iAnimationRegisterData.colorAddTarget = registerCache.getFreeVertexVectorTemp();\r\n\t\t\tregisterCache.addVertexTempUsages(this._iAnimationRegisterData.colorAddTarget, 1);\r\n\t\t\tthis._iAnimationRegisterData.colorAddVary = registerCache.getFreeVarying();\r\n\t\t\tcode += \"mov \" + this._iAnimationRegisterData.colorAddTarget + \",\" + this._iAnimationRegisterData.vertexZeroConst + \"\\n\";\r\n\t\t}\r\n\r\n\t\tfor (i = 0; i < this._particleNodes.length; i++) {\r\n\t\t\tnode = this._particleNodes[i];\r\n\t\t\tif (node.priority >= ParticleAnimationSet.COLOR_PRIORITY)\r\n\t\t\t\tcode += node.getAGALVertexCode(shader, this, registerCache, this._iAnimationRegisterData);\r\n\t\t}\r\n\t\tif (shader.usesFragmentAnimation && (this.hasColorAddNode || this.hasColorMulNode)) {\r\n\t\t\tif (this.hasColorMulNode)\r\n\t\t\t\tcode += \"mov \" + this._iAnimationRegisterData.colorMulVary + \",\" + this._iAnimationRegisterData.colorMulTarget + \"\\n\";\r\n\t\t\tif (this.hasColorAddNode)\r\n\t\t\t\tcode += \"mov \" + this._iAnimationRegisterData.colorAddVary + \",\" + this._iAnimationRegisterData.colorAddTarget + \"\\n\";\r\n\t\t}\r\n\t\treturn code;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAGALUVCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\r\n\t{\r\n\t\tvar code:string = \"\";\r\n\t\tif (this.hasUVNode) {\r\n\t\t\tthis._iAnimationRegisterData.setUVSourceAndTarget(sharedRegisters);\r\n\t\t\tcode += \"mov \" + this._iAnimationRegisterData.uvTarget + \".xy,\" + this._iAnimationRegisterData.uvAttribute.toString() + \"\\n\";\r\n\t\t\tvar node:ParticleNodeBase;\r\n\t\t\tfor (var i:number = 0; i < this._particleNodes.length; i++)\r\n\t\t\t\tnode = this._particleNodes[i];\r\n\t\t\t\tcode += node.getAGALUVCode(shader, this, registerCache, this._iAnimationRegisterData);\r\n\t\t\tcode += \"mov \" + this._iAnimationRegisterData.uvVar + \",\" + this._iAnimationRegisterData.uvTarget + \".xy\\n\";\r\n\t\t} else\r\n\t\t\tcode += \"mov \" + sharedRegisters.uvTarget + \",\" + sharedRegisters.uvSource + \"\\n\";\r\n\t\treturn code;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAGALFragmentCode(shader:ShaderBase, registerCache:ShaderRegisterCache, shadedTarget:ShaderRegisterElement):string\r\n\t{\r\n\t\tvar code:string = \"\";\r\n\t\tif (shader.usesFragmentAnimation && (this.hasColorAddNode || this.hasColorMulNode)) {\r\n\t\t\tif (this.hasColorMulNode)\r\n\t\t\t\tcode += \"mul \" + shadedTarget + \",\" + shadedTarget + \",\" + this._iAnimationRegisterData.colorMulVary + \"\\n\";\r\n\t\t\tif (this.hasColorAddNode)\r\n\t\t\t\tcode += \"add \" + shadedTarget + \",\" + shadedTarget + \",\" + this._iAnimationRegisterData.colorAddVary + \"\\n\";\r\n\t\t}\r\n\t\treturn code;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic doneAGALCode(shader:ShaderBase):void\r\n\t{\r\n\t\t//set vertexZeroConst,vertexOneConst,vertexTwoConst\r\n\t\tshader.setVertexConst(this._iAnimationRegisterData.vertexZeroConst.index, 0, 1, 2, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic get usesCPU():boolean\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic cancelGPUCompatibility():void\r\n\t{\r\n\r\n\t}\r\n\r\n\tpublic dispose():void\r\n\t{\r\n\t\tfor (var key in this._animationElements)\r\n\t\t\t(<AnimationElements> this._animationElements[key]).dispose();\r\n\r\n\t\tsuper.dispose();\r\n\t}\r\n\r\n\tpublic getAnimationElements(graphic:Graphic):AnimationElements\r\n\t{\r\n\t\tvar animationElements:AnimationElements = (this.shareAnimationGraphics)? this._animationElements[graphic.elements.id] : this._animationElements[graphic.id];\r\n\r\n\t\tif (animationElements)\r\n\t\t\treturn animationElements;\r\n\r\n\t\tthis._iGenerateAnimationElements(graphic.parent);\r\n\r\n\t\treturn (this.shareAnimationGraphics)? this._animationElements[graphic.elements.id] : this._animationElements[graphic.id];\r\n\t}\r\n\r\n\r\n\t/** @private */\r\n\tpublic _iGenerateAnimationElements(graphics:Graphics):void\r\n\t{\r\n\t\tif (this.initParticleFunc == null)\r\n\t\t\tthrow(new Error(\"no initParticleFunc set\"));\r\n\r\n\t\tvar i:number, j:number, k:number;\r\n\t\tvar animationElements:AnimationElements;\r\n\t\tvar newAnimationElements:boolean = false;\r\n\t\tvar elements:ElementsBase;\r\n\t\tvar graphic:Graphic;\r\n\t\tvar localNode:ParticleNodeBase;\r\n\r\n\t\tfor (i = 0; i < graphics.count; i++) {\r\n\t\t\tgraphic = graphics.getGraphicAt(i);\r\n\t\t\telements = graphic.elements;\r\n\t\t\tif (this.shareAnimationGraphics) {\r\n\t\t\t\tanimationElements = this._animationElements[elements.id];\r\n\r\n\t\t\t\tif (animationElements)\r\n\t\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tanimationElements = new AnimationElements();\r\n\r\n\t\t\tif (this.shareAnimationGraphics)\r\n\t\t\t\tthis._animationElements[elements.id] = animationElements;\r\n\t\t\telse\r\n\t\t\t\tthis._animationElements[graphic.id] = animationElements;\r\n\r\n\t\t\tnewAnimationElements = true;\r\n\r\n\t\t\t//create the vertexData vector that will be used for local node data\r\n\t\t\tanimationElements.createVertexData(elements.numVertices, this._totalLenOfOneVertex);\r\n\t\t}\r\n\r\n\t\tif (!newAnimationElements)\r\n\t\t\treturn;\r\n\r\n\t\tvar particles:Array<ParticleData> = graphics.particles;\r\n\t\tvar particlesLength:number = particles.length;\r\n\t\tvar numParticles:number = graphics.numParticles;\r\n\t\tvar particleProperties:ParticleProperties = new ParticleProperties();\r\n\t\tvar particle:ParticleData;\r\n\r\n\t\tvar oneDataLen:number;\r\n\t\tvar oneDataOffset:number;\r\n\t\tvar counterForVertex:number;\r\n\t\tvar counterForOneData:number;\r\n\t\tvar oneData:Array<number>;\r\n\t\tvar numVertices:number;\r\n\t\tvar vertexData:Array<number>;\r\n\t\tvar vertexLength:number;\r\n\t\tvar startingOffset:number;\r\n\t\tvar vertexOffset:number;\r\n\r\n\t\t//default values for particle param\r\n\t\tparticleProperties.total = numParticles;\r\n\t\tparticleProperties.startTime = 0;\r\n\t\tparticleProperties.duration = 1000;\r\n\t\tparticleProperties.delay = 0.1;\r\n\r\n\t\ti = 0;\r\n\t\tj = 0;\r\n\t\twhile (i < numParticles) {\r\n\t\t\tparticleProperties.index = i;\r\n\r\n\t\t\t//call the init on the particle parameters\r\n\t\t\tthis.initParticleFunc.call(this.initParticleScope, particleProperties);\r\n\r\n\t\t\t//create the next set of node properties for the particle\r\n\t\t\tfor (k = 0; k < this._localStaticNodes.length; k++)\r\n\t\t\t\tthis._localStaticNodes[k]._iGeneratePropertyOfOneParticle(particleProperties);\r\n\r\n\t\t\t//loop through all particle data for the curent particle\r\n\t\t\twhile (j < particlesLength && (particle = particles[j]).particleIndex == i) {\r\n\t\t\t\t//find the target animationElements\r\n\t\t\t\tfor (k = 0; k < graphics.count; k++) {\r\n\t\t\t\t\tgraphic = graphics.getGraphicAt(k);\r\n\t\t\t\t\tif (graphic.elements == particle.elements) {\r\n\t\t\t\t\t\tanimationElements = (this.shareAnimationGraphics)? this._animationElements[graphic.elements.id] : this._animationElements[graphic.id];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tnumVertices = particle.numVertices;\r\n\t\t\t\tvertexData = animationElements.vertexData;\r\n\t\t\t\tvertexLength = numVertices*this._totalLenOfOneVertex;\r\n\t\t\t\tstartingOffset = animationElements.numProcessedVertices*this._totalLenOfOneVertex;\r\n\r\n\t\t\t\t//loop through each static local node in the animation set\r\n\t\t\t\tfor (k = 0; k < this._localStaticNodes.length; k++) {\r\n\t\t\t\t\tlocalNode = this._localStaticNodes[k];\r\n\t\t\t\t\toneData = localNode.oneData;\r\n\t\t\t\t\toneDataLen = localNode.dataLength;\r\n\t\t\t\t\toneDataOffset = startingOffset + localNode._iDataOffset;\r\n\r\n\t\t\t\t\t//loop through each vertex set in the vertex data\r\n\t\t\t\t\tfor (counterForVertex = 0; counterForVertex < vertexLength; counterForVertex += this._totalLenOfOneVertex) {\r\n\t\t\t\t\t\tvertexOffset = oneDataOffset + counterForVertex;\r\n\r\n\t\t\t\t\t\t//add the data for the local node to the vertex data\r\n\t\t\t\t\t\tfor (counterForOneData = 0; counterForOneData < oneDataLen; counterForOneData++)\r\n\t\t\t\t\t\t\tvertexData[vertexOffset + counterForOneData] = oneData[counterForOneData];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//store particle properties if they need to be retreived for dynamic local nodes\r\n\t\t\t\tif (this._localDynamicNodes.length)\r\n\t\t\t\t\tanimationElements.animationParticles.push(new ParticleAnimationData(i, particleProperties.startTime, particleProperties.duration, particleProperties.delay, particle));\r\n\r\n\t\t\t\tanimationElements.numProcessedVertices += numVertices;\r\n\r\n\t\t\t\t//next index\r\n\t\t\t\tj++;\r\n\t\t\t}\r\n\r\n\t\t\t//next particle\r\n\t\t\ti++;\r\n\t\t}\r\n\t}\r\n}",
    "import {ElementsBase}\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/ElementsBase\";\r\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\nimport {Graphic}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphic\";\r\n\r\nimport {ContextGLProgramType}\t\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLProgramType\";\r\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\n\r\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../animators/AnimatorBase\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../animators/data/AnimationRegisterData\";\r\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../animators/ParticleAnimationSet\";\r\nimport {AnimationElements}\t\t\t\tfrom \"../animators/data/AnimationElements\";\r\nimport {ParticlePropertiesMode}\t\t\tfrom \"../animators/data/ParticlePropertiesMode\";\r\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../animators/nodes/ParticleNodeBase\";\r\nimport {ParticleStateBase}\t\t\t\tfrom \"../animators/states/ParticleStateBase\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../shaders/ShaderBase\";\r\nimport {GL_RenderableBase}\t\t\t\tfrom \"../renderables/GL_RenderableBase\";\r\nimport {GL_GraphicRenderable}\t\t\tfrom \"../renderables/GL_GraphicRenderable\";\r\n\r\n/**\r\n * Provides an interface for assigning paricle-based animation data sets to sprite-based entity objects\r\n * and controlling the various available states of animation through an interative playhead that can be\r\n * automatically updated or manually triggered.\r\n *\r\n * Requires that the containing geometry of the parent sprite is particle geometry\r\n *\r\n * @see away.base.ParticleGraphics\r\n */\r\nexport class ParticleAnimator extends AnimatorBase\r\n{\r\n\r\n\tprivate _particleAnimationSet:ParticleAnimationSet;\r\n\tprivate _animationParticleStates:Array<ParticleStateBase> = new Array<ParticleStateBase>();\r\n\tprivate _animatorParticleStates:Array<ParticleStateBase> = new Array<ParticleStateBase>();\r\n\tprivate _timeParticleStates:Array<ParticleStateBase> = new Array<ParticleStateBase>();\r\n\tprivate _totalLenOfOneVertex:number = 0;\r\n\tprivate _animatorSubGeometries:Object = new Object();\r\n\r\n\t/**\r\n\t * Creates a new <code>ParticleAnimator</code> object.\r\n\t *\r\n\t * @param particleAnimationSet The animation data set containing the particle animations used by the animator.\r\n\t */\r\n\tconstructor(particleAnimationSet:ParticleAnimationSet)\r\n\t{\r\n\t\tsuper(particleAnimationSet);\r\n\t\tthis._particleAnimationSet = particleAnimationSet;\r\n\r\n\t\tvar state:ParticleStateBase;\r\n\t\tvar node:ParticleNodeBase;\r\n\r\n\t\tfor (var i:number = 0; i < this._particleAnimationSet.particleNodes.length; i++) {\r\n\t\t\tnode = this._particleAnimationSet.particleNodes[i];\r\n\t\t\tstate = <ParticleStateBase> this.getAnimationState(node);\r\n\t\t\tif (node.mode == ParticlePropertiesMode.LOCAL_DYNAMIC) {\r\n\t\t\t\tthis._animatorParticleStates.push(state);\r\n\t\t\t\tnode._iDataOffset = this._totalLenOfOneVertex;\r\n\t\t\t\tthis._totalLenOfOneVertex += node.dataLength;\r\n\t\t\t} else {\r\n\t\t\t\tthis._animationParticleStates.push(state);\r\n\t\t\t}\r\n\t\t\tif (state.needUpdateTime)\r\n\t\t\t\tthis._timeParticleStates.push(state);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic clone():AnimatorBase\r\n\t{\r\n\t\treturn new ParticleAnimator(this._particleAnimationSet);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, stage:Stage, camera:Camera):void\r\n\t{\r\n\t\tvar animationRegisterData:AnimationRegisterData = this._particleAnimationSet._iAnimationRegisterData;\r\n\r\n\t\tvar graphic:Graphic = (<GL_GraphicRenderable> renderable).graphic;\r\n\r\n\t\tif (!graphic)\r\n\t\t\tthrow(new Error(\"Must be graphic\"));\r\n\r\n\t\t//process animation sub geometries\r\n\t\tvar animationElements:AnimationElements = this._particleAnimationSet.getAnimationElements(graphic);\r\n\t\tvar i:number;\r\n\t\t\r\n\t\tfor (i = 0; i < this._animationParticleStates.length; i++)\r\n\t\t\tthis._animationParticleStates[i].setRenderState(shader, renderable, animationElements, animationRegisterData, camera, stage);\r\n\r\n\t\t//process animator subgeometries\r\n\t\tvar animatorElements:AnimationElements = this.getAnimatorElements(graphic);\r\n\r\n\t\tfor (i = 0; i < this._animatorParticleStates.length; i++)\r\n\t\t\tthis._animatorParticleStates[i].setRenderState(shader, renderable, animatorElements, animationRegisterData, camera, stage);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic testGPUCompatibility(shader:ShaderBase):void\r\n\t{\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic start():void\r\n\t{\r\n\t\tsuper.start();\r\n\r\n\t\tfor (var i:number = 0; i < this._timeParticleStates.length; i++)\r\n\t\t\tthis._timeParticleStates[i].offset(this._pAbsoluteTime);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pUpdateDeltaTime(dt:number):void\r\n\t{\r\n\t\tthis._pAbsoluteTime += dt;\r\n\r\n\t\tfor (var i:number = 0; i < this._timeParticleStates.length; i++)\r\n\t\t\tthis._timeParticleStates[i].update(this._pAbsoluteTime);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic resetTime(offset:number = 0):void\r\n\t{\r\n\t\tfor (var i:number = 0; i < this._timeParticleStates.length; i++)\r\n\t\t\tthis._timeParticleStates[i].offset(this._pAbsoluteTime + offset);\r\n\t\tthis.update(this.time);\r\n\t}\r\n\r\n\tpublic dispose():void\r\n\t{\r\n\t\tfor (var key in this._animatorSubGeometries)\r\n\t\t\t(<AnimationElements> this._animatorSubGeometries[key]).dispose();\r\n\t}\r\n\r\n\tprivate getAnimatorElements(graphic:Graphic):AnimationElements\r\n\t{\r\n\t\tif (!this._animatorParticleStates.length)\r\n\t\t\treturn;\r\n\r\n\t\tvar elements:ElementsBase = graphic.elements;\r\n\t\tvar animatorElements:AnimationElements = this._animatorSubGeometries[elements.id] = new AnimationElements();\r\n\r\n\t\t//create the vertexData vector that will be used for local state data\r\n\t\tanimatorElements.createVertexData(elements.numVertices, this._totalLenOfOneVertex);\r\n\r\n\t\t//pass the particles data to the animator elements\r\n\t\tanimatorElements.animationParticles = this._particleAnimationSet.getAnimationElements(graphic).animationParticles;\r\n\t}\r\n}",
    "import {IAnimationSet}\t\t\t\t\tfrom \"awayjs-display/lib/animators/IAnimationSet\";\r\n\r\nimport {AnimationSetBase}\t\t\t\t\tfrom \"../animators/AnimationSetBase\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../shaders/ShaderBase\";\r\nimport {ShaderRegisterElement}\t\t\tfrom \"../shaders/ShaderRegisterElement\";\r\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterData}\t\t\t\tfrom \"../shaders/ShaderRegisterData\";\r\n\r\n/**\r\n * The animation data set used by skeleton-based animators, containing skeleton animation data.\r\n *\r\n * @see away.animators.SkeletonAnimator\r\n */\r\nexport class SkeletonAnimationSet extends AnimationSetBase implements IAnimationSet\r\n{\r\n\tprivate _jointsPerVertex:number;\r\n\tprivate _matricesIndex:number;\r\n\r\n\t/**\r\n\t * Returns the amount of skeleton joints that can be linked to a single vertex via skinned weight values. For GPU-base animation, the\r\n\t * maximum allowed value is 4.\r\n\t */\r\n\tpublic get jointsPerVertex():number\r\n\t{\r\n\t\treturn this._jointsPerVertex;\r\n\t}\r\n\t\r\n\tpublic get matricesIndex():number\r\n\t{\r\n\t\treturn this._matricesIndex;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Creates a new <code>SkeletonAnimationSet</code> object.\r\n\t *\r\n\t * @param jointsPerVertex Sets the amount of skeleton joints that can be linked to a single vertex via skinned weight values. For GPU-base animation, the maximum allowed value is 4. Defaults to 4.\r\n\t */\r\n\tconstructor(jointsPerVertex:number = 4)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tthis._jointsPerVertex = jointsPerVertex;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAGALVertexCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\r\n\t{\r\n\t\tthis._matricesIndex = registerCache.numUsedVertexConstants;\r\n\t\tvar indexOffset0:number = this._matricesIndex;\r\n\t\tvar indexOffset1:number = this._matricesIndex + 1;\r\n\t\tvar indexOffset2:number = this._matricesIndex + 2;\r\n\t\t\r\n\t\tvar indexStream:ShaderRegisterElement = registerCache.getFreeVertexAttribute();\r\n\t\tshader.jointIndexIndex = indexStream.index;\r\n\t\t\r\n\t\tvar weightStream:ShaderRegisterElement = registerCache.getFreeVertexAttribute();\r\n\t\tshader.jointWeightIndex = weightStream.index;\r\n\t\t\r\n\t\tvar indices:Array<string> = [ indexStream + \".x\", indexStream + \".y\", indexStream + \".z\", indexStream + \".w\" ];\r\n\t\tvar weights:Array<string> = [ weightStream + \".x\", weightStream + \".y\", weightStream + \".z\", weightStream + \".w\" ];\r\n\t\tvar temp1:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\tvar dot:string = \"dp4\";\r\n\t\tvar code:string = \"\";\r\n\r\n\t\tvar len:number = sharedRegisters.animatableAttributes.length;\r\n\t\tfor (var i:number = 0; i < len; ++i) {\r\n\r\n\t\t\tvar source:ShaderRegisterElement = sharedRegisters.animatableAttributes[i];\r\n\t\t\tvar target:ShaderRegisterElement = sharedRegisters.animationTargetRegisters[i];\r\n\r\n\t\t\tfor (var j:number = 0; j < this._jointsPerVertex; ++j) {\r\n\t\t\t\tregisterCache.getFreeVertexConstant();\r\n\t\t\t\tregisterCache.getFreeVertexConstant();\r\n\t\t\t\tregisterCache.getFreeVertexConstant();\r\n\t\t\t\tcode += dot + \" \" + temp1 + \".x, \" + source + \", vc[\" + indices[j] + \"+\" + indexOffset0 + \"]\\n\" +\r\n\t\t\t\t\tdot + \" \" + temp1 + \".y, \" + source + \", vc[\" + indices[j] + \"+\" + indexOffset1 + \"]\\n\" +\r\n\t\t\t\t\tdot + \" \" + temp1 + \".z, \" + source + \", vc[\" + indices[j] + \"+\" + indexOffset2 + \"]\\n\" +\r\n\t\t\t\t\t\"mov \" + temp1 + \".w, \" + source + \".w\\n\" +\r\n\t\t\t\t\t\"mul \" + temp1 + \", \" + temp1 + \", \" + weights[j] + \"\\n\"; // apply weight\r\n\r\n\t\t\t\t// add or mov to target. Need to write to a temp reg first, because an output can be a target\r\n\t\t\t\tif (j == 0)\r\n\t\t\t\t\tcode += \"mov \" + target + \", \" + temp1 + \"\\n\";\r\n\t\t\t\telse\r\n\t\t\t\t\tcode += \"add \" + target + \", \" + target + \", \" + temp1 + \"\\n\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// switch to dp3 once positions have been transformed, from now on, it should only be vectors instead of points\r\n\t\t\tdot = \"dp3\";\r\n\t\t}\r\n\r\n\t\treturn code;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAGALFragmentCode(shader:ShaderBase, registerCache:ShaderRegisterCache, shadedTarget:ShaderRegisterElement):string\r\n\t{\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAGALUVCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\r\n\t{\r\n\t\treturn \"mov \" + sharedRegisters.uvTarget + \",\" + sharedRegisters.uvSource + \"\\n\";\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic doneAGALCode(shader:ShaderBase):void\r\n\t{\r\n\r\n\t}\r\n}",
    "import {Quaternion}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Quaternion\";\r\nimport {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {TriangleElements}\t\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\r\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\nimport {ElementsEvent}\t\t\t\t\tfrom \"awayjs-display/lib/events/ElementsEvent\";\r\n\r\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\n\r\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../animators/AnimatorBase\";\r\nimport {SkeletonAnimationSet}\t\t\t\tfrom \"../animators/SkeletonAnimationSet\";\r\nimport {JointPose}\t\t\t\t\t\tfrom \"../animators/data/JointPose\";\r\nimport {Skeleton}\t\t\t\t\t\t\tfrom \"../animators/data/Skeleton\";\r\nimport {SkeletonJoint}\t\t\t\t\tfrom \"../animators/data/SkeletonJoint\";\r\nimport {SkeletonPose}\t\t\t\t\t\tfrom \"../animators/data/SkeletonPose\";\r\nimport {ISkeletonAnimationState}\t\t\tfrom \"../animators/states/ISkeletonAnimationState\";\r\nimport {IAnimationTransition}\t\t\t\tfrom \"../animators/transitions/IAnimationTransition\";\r\nimport {AnimationStateEvent}\t\t\t\tfrom \"../events/AnimationStateEvent\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../shaders/ShaderBase\";\r\nimport {GL_RenderableBase}\t\t\t\tfrom \"../renderables/GL_RenderableBase\";\r\nimport {GL_GraphicRenderable}\t\t\t\tfrom \"../renderables/GL_GraphicRenderable\";\r\n\r\n/**\r\n * Provides an interface for assigning skeleton-based animation data sets to sprite-based entity objects\r\n * and controlling the various available states of animation through an interative playhead that can be\r\n * automatically updated or manually triggered.\r\n */\r\nexport class SkeletonAnimator extends AnimatorBase\r\n{\r\n\tprivate _globalMatrices:Float32Array;\r\n\tprivate _globalPose:SkeletonPose = new SkeletonPose();\r\n\tprivate _globalPropertiesDirty:boolean;\r\n\tprivate _numJoints:number;\r\n\tprivate _morphedElements:Object = new Object();\r\n\tprivate _morphedElementsDirty:Object = new Object();\r\n\tprivate _condensedMatrices:Float32Array;\r\n\r\n\tprivate _skeletonAnimationSet:SkeletonAnimationSet;\r\n\tprivate _skeleton:Skeleton;\r\n\tprivate _forceCPU:boolean;\r\n\tprivate _useCondensedIndices:boolean;\r\n\tprivate _jointsPerVertex:number;\r\n\tprivate _activeSkeletonState:ISkeletonAnimationState;\r\n\tprivate _onTransitionCompleteDelegate:(event:AnimationStateEvent) => void;\r\n\r\n\tprivate _onIndicesUpdateDelegate:(event:ElementsEvent) => void;\r\n\tprivate _onVerticesUpdateDelegate:(event:ElementsEvent) => void;\r\n\r\n\t/**\r\n\t * returns the calculated global matrices of the current skeleton pose.\r\n\t *\r\n\t * @see #globalPose\r\n\t */\r\n\tpublic get globalMatrices():Float32Array\r\n\t{\r\n\t\tif (this._globalPropertiesDirty)\r\n\t\t\tthis.updateGlobalProperties();\r\n\r\n\t\treturn this._globalMatrices;\r\n\t}\r\n\r\n\t/**\r\n\t * returns the current skeleton pose output from the animator.\r\n\t *\r\n\t * @see away.animators.data.SkeletonPose\r\n\t */\r\n\tpublic get globalPose():SkeletonPose\r\n\t{\r\n\t\tif (this._globalPropertiesDirty)\r\n\t\t\tthis.updateGlobalProperties();\r\n\r\n\t\treturn this._globalPose;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the skeleton object in use by the animator - this defines the number and heirarchy of joints used by the\r\n\t * skinned geoemtry to which skeleon animator is applied.\r\n\t */\r\n\tpublic get skeleton():Skeleton\r\n\t{\r\n\t\treturn this._skeleton;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether the skeleton animator is disabled by default for GPU rendering, something that allows the animator to perform calculation on the GPU.\r\n\t * Defaults to false.\r\n\t */\r\n\tpublic get forceCPU():boolean\r\n\t{\r\n\t\treturn this._forceCPU;\r\n\t}\r\n\r\n\t/**\r\n\t * Offers the option of enabling GPU accelerated animation on skeletons larger than 32 joints\r\n\t * by condensing the number of joint index values required per sprite. Only applicable to\r\n\t * skeleton animations that utilise more than one sprite object. Defaults to false.\r\n\t */\r\n\tpublic get useCondensedIndices():boolean\r\n\t{\r\n\t\treturn this._useCondensedIndices;\r\n\t}\r\n\r\n\tpublic set useCondensedIndices(value:boolean)\r\n\t{\r\n\t\tthis._useCondensedIndices = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new <code>SkeletonAnimator</code> object.\r\n\t *\r\n\t * @param skeletonAnimationSet The animation data set containing the skeleton animations used by the animator.\r\n\t * @param skeleton The skeleton object used for calculating the resulting global matrices for transforming skinned sprite data.\r\n\t * @param forceCPU Optional value that only allows the animator to perform calculation on the CPU. Defaults to false.\r\n\t */\r\n\tconstructor(animationSet:SkeletonAnimationSet, skeleton:Skeleton, forceCPU:boolean = false)\r\n\t{\r\n\t\tsuper(animationSet);\r\n\r\n\t\tthis._skeletonAnimationSet = animationSet;\r\n\t\tthis._skeleton = skeleton;\r\n\t\tthis._forceCPU = forceCPU;\r\n\t\tthis._jointsPerVertex = animationSet.jointsPerVertex;\r\n\r\n\t\tthis._numJoints = this._skeleton.numJoints;\r\n\t\tthis._globalMatrices = new Float32Array(this._numJoints*12);\r\n\r\n\t\tvar j:number = 0;\r\n\t\tfor (var i:number = 0; i < this._numJoints; ++i) {\r\n\t\t\tthis._globalMatrices[j++] = 1;\r\n\t\t\tthis._globalMatrices[j++] = 0;\r\n\t\t\tthis._globalMatrices[j++] = 0;\r\n\t\t\tthis._globalMatrices[j++] = 0;\r\n\t\t\tthis._globalMatrices[j++] = 0;\r\n\t\t\tthis._globalMatrices[j++] = 1;\r\n\t\t\tthis._globalMatrices[j++] = 0;\r\n\t\t\tthis._globalMatrices[j++] = 0;\r\n\t\t\tthis._globalMatrices[j++] = 0;\r\n\t\t\tthis._globalMatrices[j++] = 0;\r\n\t\t\tthis._globalMatrices[j++] = 1;\r\n\t\t\tthis._globalMatrices[j++] = 0;\r\n\t\t}\r\n\r\n\t\tthis._onTransitionCompleteDelegate = (event:AnimationStateEvent) => this.onTransitionComplete(event);\r\n\t\tthis._onIndicesUpdateDelegate = (event:ElementsEvent) => this.onIndicesUpdate(event);\r\n\t\tthis._onVerticesUpdateDelegate = (event:ElementsEvent) => this.onVerticesUpdate(event);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic clone():AnimatorBase\r\n\t{\r\n\t\treturn new SkeletonAnimator(this._skeletonAnimationSet, this._skeleton, this._forceCPU);\r\n\t}\r\n\r\n\t/**\r\n\t * Plays an animation state registered with the given name in the animation data set.\r\n\t *\r\n\t * @param name The data set name of the animation state to be played.\r\n\t * @param transition An optional transition object that determines how the animator will transition from the currently active animation state.\r\n\t * @param offset An option offset time (in milliseconds) that resets the state's internal clock to the absolute time of the animator plus the offset value. Required for non-looping animation states.\r\n\t */\r\n\tpublic play(name:string, transition:IAnimationTransition = null, offset:number = NaN):void\r\n\t{\r\n\t\tif (this._pActiveAnimationName == name)\r\n\t\t\treturn;\r\n\r\n\t\tthis._pActiveAnimationName = name;\r\n\r\n\t\tif (!this._pAnimationSet.hasAnimation(name))\r\n\t\t\tthrow new Error(\"Animation root node \" + name + \" not found!\");\r\n\r\n\t\tif (transition && this._pActiveNode) {\r\n\t\t\t//setup the transition\r\n\t\t\tthis._pActiveNode = transition.getAnimationNode(this, this._pActiveNode, this._pAnimationSet.getAnimation(name), this._pAbsoluteTime);\r\n\t\t\tthis._pActiveNode.addEventListener(AnimationStateEvent.TRANSITION_COMPLETE, this._onTransitionCompleteDelegate);\r\n\t\t} else\r\n\t\t\tthis._pActiveNode = this._pAnimationSet.getAnimation(name);\r\n\r\n\t\tthis._pActiveState = this.getAnimationState(this._pActiveNode);\r\n\r\n\t\tif (this.updatePosition) {\r\n\t\t\t//update straight away to reset position deltas\r\n\t\t\tthis._pActiveState.update(this._pAbsoluteTime);\r\n\t\t\tthis._pActiveState.positionDelta;\r\n\t\t}\r\n\r\n\t\tthis._activeSkeletonState = <ISkeletonAnimationState> this._pActiveState;\r\n\r\n\t\tthis.start();\r\n\r\n\t\t//apply a time offset if specified\r\n\t\tif (!isNaN(offset))\r\n\t\t\tthis.reset(name, offset);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, stage:Stage, camera:Camera):void\r\n\t{\r\n\t\t// do on request of globalProperties\r\n\t\tif (this._globalPropertiesDirty)\r\n\t\t\tthis.updateGlobalProperties();\r\n\r\n\t\tvar elements:TriangleElements = <TriangleElements> (<GL_GraphicRenderable> renderable).graphic.elements;\r\n\r\n\t\telements.useCondensedIndices = this._useCondensedIndices;\r\n\r\n\t\tif (this._useCondensedIndices) {\r\n\t\t\t// using a condensed data set\r\n\t\t\tthis.updateCondensedMatrices(elements.condensedIndexLookUp);\r\n\t\t\tshader.setVertexConstFromArray(this._skeletonAnimationSet.matricesIndex, this._condensedMatrices);\r\n\t\t} else {\r\n\t\t\tif (this._pAnimationSet.usesCPU) {\r\n\t\t\t\tif (this._morphedElementsDirty[elements.id])\r\n\t\t\t\t\tthis.morphElements(<GL_GraphicRenderable> renderable, elements);\r\n\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tshader.setVertexConstFromArray(this._skeletonAnimationSet.matricesIndex, this._globalMatrices);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic testGPUCompatibility(shader:ShaderBase):void\r\n\t{\r\n\t\tif (!this._useCondensedIndices && (this._forceCPU || this._jointsPerVertex > 4 || shader.numUsedVertexConstants + this._numJoints*3 > 128))\r\n\t\t\tthis._pAnimationSet.cancelGPUCompatibility();\r\n\t}\r\n\r\n\t/**\r\n\t * Applies the calculated time delta to the active animation state node or state transition object.\r\n\t */\r\n\tpublic _pUpdateDeltaTime(dt:number):void\r\n\t{\r\n\t\tsuper._pUpdateDeltaTime(dt);\r\n\r\n\t\t//invalidate pose matrices\r\n\t\tthis._globalPropertiesDirty = true;\r\n\r\n\t\t//trigger geometry invalidation if using CPU animation\r\n\t\tif (this._pAnimationSet.usesCPU)\r\n\t\t\tthis.invalidateElements();\r\n\t}\r\n\r\n\tprivate updateCondensedMatrices(condensedIndexLookUp:Array<number>):void\r\n\t{\r\n\t\tvar j:number = 0, k:number = 0;\r\n\t\tvar len:number = condensedIndexLookUp.length;\r\n\t\tvar srcIndex:number;\r\n\r\n\t\tthis._condensedMatrices = new Float32Array(len*12);\r\n\r\n\t\tfor (var i:number = 0; i < len; i++) {\r\n\t\t\tsrcIndex = condensedIndexLookUp[i]*12; //12 required for the three 4-component vectors that store the matrix\r\n\t\t\tk = 12;\r\n\t\t\t// copy into condensed\r\n\t\t\twhile (k--)\r\n\t\t\t\tthis._condensedMatrices[j++] = this._globalMatrices[srcIndex++];\r\n\t\t}\r\n\t}\r\n\r\n\tprivate updateGlobalProperties():void\r\n\t{\r\n\t\tthis._globalPropertiesDirty = false;\r\n\r\n\t\t//get global pose\r\n\t\tthis.localToGlobalPose(this._activeSkeletonState.getSkeletonPose(this._skeleton), this._globalPose, this._skeleton);\r\n\r\n\t\t// convert pose to matrix\r\n\t\tvar mtxOffset:number = 0;\r\n\t\tvar globalPoses:Array<JointPose> = this._globalPose.jointPoses;\r\n\t\tvar raw:Float32Array;\r\n\t\tvar ox:number, oy:number, oz:number, ow:number;\r\n\t\tvar xy2:number, xz2:number, xw2:number;\r\n\t\tvar yz2:number, yw2:number, zw2:number;\r\n\t\tvar n11:number, n12:number, n13:number;\r\n\t\tvar n21:number, n22:number, n23:number;\r\n\t\tvar n31:number, n32:number, n33:number;\r\n\t\tvar m11:number, m12:number, m13:number, m14:number;\r\n\t\tvar m21:number, m22:number, m23:number, m24:number;\r\n\t\tvar m31:number, m32:number, m33:number, m34:number;\r\n\t\tvar joints:Array<SkeletonJoint> = this._skeleton.joints;\r\n\t\tvar pose:JointPose;\r\n\t\tvar quat:Quaternion;\r\n\t\tvar vec:Vector3D;\r\n\t\tvar t:number;\r\n\r\n\t\tfor (var i:number = 0; i < this._numJoints; ++i) {\r\n\t\t\tpose = globalPoses[i];\r\n\t\t\tquat = pose.orientation;\r\n\t\t\tvec = pose.translation;\r\n\t\t\tox = quat.x;\r\n\t\t\toy = quat.y;\r\n\t\t\toz = quat.z;\r\n\t\t\tow = quat.w;\r\n\r\n\t\t\txy2 = (t = 2.0*ox)*oy;\r\n\t\t\txz2 = t*oz;\r\n\t\t\txw2 = t*ow;\r\n\t\t\tyz2 = (t = 2.0*oy)*oz;\r\n\t\t\tyw2 = t*ow;\r\n\t\t\tzw2 = 2.0*oz*ow;\r\n\r\n\t\t\tyz2 = 2.0*oy*oz;\r\n\t\t\tyw2 = 2.0*oy*ow;\r\n\t\t\tzw2 = 2.0*oz*ow;\r\n\t\t\tox *= ox;\r\n\t\t\toy *= oy;\r\n\t\t\toz *= oz;\r\n\t\t\tow *= ow;\r\n\r\n\t\t\tn11 = (t = ox - oy) - oz + ow;\r\n\t\t\tn12 = xy2 - zw2;\r\n\t\t\tn13 = xz2 + yw2;\r\n\t\t\tn21 = xy2 + zw2;\r\n\t\t\tn22 = -t - oz + ow;\r\n\t\t\tn23 = yz2 - xw2;\r\n\t\t\tn31 = xz2 - yw2;\r\n\t\t\tn32 = yz2 + xw2;\r\n\t\t\tn33 = -ox - oy + oz + ow;\r\n\r\n\t\t\t// prepend inverse bind pose\r\n\t\t\traw = joints[i].inverseBindPose;\r\n\t\t\tm11 = raw[0];\r\n\t\t\tm12 = raw[4];\r\n\t\t\tm13 = raw[8];\r\n\t\t\tm14 = raw[12];\r\n\t\t\tm21 = raw[1];\r\n\t\t\tm22 = raw[5];\r\n\t\t\tm23 = raw[9];\r\n\t\t\tm24 = raw[13];\r\n\t\t\tm31 = raw[2];\r\n\t\t\tm32 = raw[6];\r\n\t\t\tm33 = raw[10];\r\n\t\t\tm34 = raw[14];\r\n\r\n\t\t\tthis._globalMatrices[mtxOffset] = n11*m11 + n12*m21 + n13*m31;\r\n\t\t\tthis._globalMatrices[mtxOffset + 1] = n11*m12 + n12*m22 + n13*m32;\r\n\t\t\tthis._globalMatrices[mtxOffset + 2] = n11*m13 + n12*m23 + n13*m33;\r\n\t\t\tthis._globalMatrices[mtxOffset + 3] = n11*m14 + n12*m24 + n13*m34 + vec.x;\r\n\t\t\tthis._globalMatrices[mtxOffset + 4] = n21*m11 + n22*m21 + n23*m31;\r\n\t\t\tthis._globalMatrices[mtxOffset + 5] = n21*m12 + n22*m22 + n23*m32;\r\n\t\t\tthis._globalMatrices[mtxOffset + 6] = n21*m13 + n22*m23 + n23*m33;\r\n\t\t\tthis._globalMatrices[mtxOffset + 7] = n21*m14 + n22*m24 + n23*m34 + vec.y;\r\n\t\t\tthis._globalMatrices[mtxOffset + 8] = n31*m11 + n32*m21 + n33*m31;\r\n\t\t\tthis._globalMatrices[mtxOffset + 9] = n31*m12 + n32*m22 + n33*m32;\r\n\t\t\tthis._globalMatrices[mtxOffset + 10] = n31*m13 + n32*m23 + n33*m33;\r\n\t\t\tthis._globalMatrices[mtxOffset + 11] = n31*m14 + n32*m24 + n33*m34 + vec.z;\r\n\r\n\t\t\tmtxOffset = mtxOffset + 12;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getRenderableElements(renderable:GL_GraphicRenderable, sourceElements:TriangleElements):TriangleElements\r\n\t{\r\n\t\tthis._morphedElementsDirty[sourceElements.id] = true;\r\n\r\n\t\t//early out for GPU animations\r\n\t\tif (!this._pAnimationSet.usesCPU)\r\n\t\t\treturn sourceElements;\r\n\r\n\t\tvar targetElements:TriangleElements;\r\n\r\n\t\tif (!(targetElements = this._morphedElements[sourceElements.id])) {\r\n\t\t\t//not yet stored\r\n\t\t\tsourceElements.normals;\r\n\t\t\tsourceElements.tangents;\r\n\t\t\ttargetElements = this._morphedElements[sourceElements.id] = sourceElements.clone();\r\n\t\t\t//turn off auto calculations on the morphed geometry\r\n\t\t\ttargetElements.autoDeriveNormals = false;\r\n\t\t\ttargetElements.autoDeriveTangents = false;\r\n\t\t\t//add event listeners for any changes in UV values on the source geometry\r\n\t\t\tsourceElements.addEventListener(ElementsEvent.INVALIDATE_INDICES, this._onIndicesUpdateDelegate);\r\n\t\t\tsourceElements.addEventListener(ElementsEvent.INVALIDATE_VERTICES, this._onVerticesUpdateDelegate);\r\n\t\t}\r\n\r\n\t\treturn targetElements;\r\n\t}\r\n\r\n\t/**\r\n\t * If the animation can't be performed on GPU, transform vertices manually\r\n\t * @param subGeom The subgeometry containing the weights and joint index data per vertex.\r\n\t * @param pass The material pass for which we need to transform the vertices\r\n\t */\r\n\tpublic morphElements(renderable:GL_GraphicRenderable, sourceElements:TriangleElements):void\r\n\t{\r\n\t\tthis._morphedElementsDirty[sourceElements.id] = false;\r\n\r\n\t\tvar numVertices:number = sourceElements.numVertices;\r\n\t\tvar sourcePositions:ArrayBufferView = sourceElements.positions.get(numVertices);\r\n\t\tvar sourceNormals:Float32Array = sourceElements.normals.get(numVertices);\r\n\t\tvar sourceTangents:Float32Array = sourceElements.tangents.get(numVertices);\r\n\r\n\t\tvar posDim:number = sourceElements.positions.dimensions;\r\n\t\tvar posStride:number = sourceElements.positions.stride;\r\n\t\tvar normalStride:number = sourceElements.normals.stride;\r\n\t\tvar tangentStride:number = sourceElements.tangents.stride;\r\n\r\n\t\tvar jointIndices:Float32Array = <Float32Array> sourceElements.jointIndices.get(numVertices);\r\n\t\tvar jointWeights:Float32Array = <Float32Array> sourceElements.jointWeights.get(numVertices);\r\n\t\tvar jointStride:number = sourceElements.jointIndices.stride;\r\n\r\n\t\tvar targetElements:TriangleElements = this._morphedElements[sourceElements.id];\r\n\r\n\t\tvar targetPositions:ArrayBufferView = targetElements.positions.get(numVertices);\r\n\t\tvar targetNormals:Float32Array = targetElements.normals.get(numVertices);\r\n\t\tvar targetTangents:Float32Array = targetElements.tangents.get(numVertices);\r\n\t\ttargetElements.positions.attributesBuffer.invalidate();\r\n\t\ttargetElements.normals.attributesBuffer.invalidate();\r\n\t\ttargetElements.tangents.attributesBuffer.invalidate();\r\n\r\n\t\tvar index:number = 0;\r\n\t\tvar i0:number = 0;\r\n\t\tvar i1:number = 0;\r\n\t\tvar i2:number = 0;\r\n\t\tvar i3:number = 0;\r\n\t\tvar k:number;\r\n\t\tvar vx:number, vy:number, vz:number;\r\n\t\tvar nx:number, ny:number, nz:number;\r\n\t\tvar tx:number, ty:number, tz:number;\r\n\t\tvar weight:number;\r\n\t\tvar vertX:number, vertY:number, vertZ:number;\r\n\t\tvar normX:number, normY:number, normZ:number;\r\n\t\tvar tangX:number, tangY:number, tangZ:number;\r\n\t\tvar m11:number, m12:number, m13:number, m14:number;\r\n\t\tvar m21:number, m22:number, m23:number, m24:number;\r\n\t\tvar m31:number, m32:number, m33:number, m34:number;\r\n\r\n\t\twhile (index < numVertices) {\r\n\t\t\ti0 = index*posStride;\r\n\t\t\tvertX = sourcePositions[i0];\r\n\t\t\tvertY = sourcePositions[i0 + 1];\r\n\t\t\tvertZ = (posDim == 3)? sourcePositions[i0 + 2] : 0;\r\n\t\t\ti1 = index*normalStride;\r\n\t\t\tnormX = sourceNormals[i1];\r\n\t\t\tnormY = sourceNormals[i1 + 1];\r\n\t\t\tnormZ = sourceNormals[i1 + 2];\r\n\t\t\ti2 = index*tangentStride;\r\n\t\t\ttangX = sourceTangents[i2];\r\n\t\t\ttangY = sourceTangents[i2 + 1];\r\n\t\t\ttangZ = sourceTangents[i2 + 2];\r\n\t\t\tvx = 0;\r\n\t\t\tvy = 0;\r\n\t\t\tvz = 0;\r\n\t\t\tnx = 0;\r\n\t\t\tny = 0;\r\n\t\t\tnz = 0;\r\n\t\t\ttx = 0;\r\n\t\t\tty = 0;\r\n\t\t\ttz = 0;\r\n\t\t\tk = 0;\r\n\t\t\ti3 = index*jointStride;\r\n\t\t\twhile (k < this._jointsPerVertex) {\r\n\t\t\t\tweight = jointWeights[i3 + k];\r\n\t\t\t\tif (weight > 0) {\r\n\t\t\t\t\t// implicit /3*12 (/3 because indices are multiplied by 3 for gpu matrix access, *12 because it's the matrix size)\r\n\t\t\t\t\tvar mtxOffset:number = jointIndices[i3 + k] << 2;\r\n\t\t\t\t\tm11 = this._globalMatrices[mtxOffset];\r\n\t\t\t\t\tm12 = this._globalMatrices[mtxOffset + 1];\r\n\t\t\t\t\tm13 = this._globalMatrices[mtxOffset + 2];\r\n\t\t\t\t\tm14 = this._globalMatrices[mtxOffset + 3];\r\n\t\t\t\t\tm21 = this._globalMatrices[mtxOffset + 4];\r\n\t\t\t\t\tm22 = this._globalMatrices[mtxOffset + 5];\r\n\t\t\t\t\tm23 = this._globalMatrices[mtxOffset + 6];\r\n\t\t\t\t\tm24 = this._globalMatrices[mtxOffset + 7];\r\n\t\t\t\t\tm31 = this._globalMatrices[mtxOffset + 8];\r\n\t\t\t\t\tm32 = this._globalMatrices[mtxOffset + 9];\r\n\t\t\t\t\tm33 = this._globalMatrices[mtxOffset + 10];\r\n\t\t\t\t\tm34 = this._globalMatrices[mtxOffset + 11];\r\n\t\t\t\t\tvx += weight*(m11*vertX + m12*vertY + m13*vertZ + m14);\r\n\t\t\t\t\tvy += weight*(m21*vertX + m22*vertY + m23*vertZ + m24);\r\n\t\t\t\t\tvz += weight*(m31*vertX + m32*vertY + m33*vertZ + m34);\r\n\t\t\t\t\tnx += weight*(m11*normX + m12*normY + m13*normZ);\r\n\t\t\t\t\tny += weight*(m21*normX + m22*normY + m23*normZ);\r\n\t\t\t\t\tnz += weight*(m31*normX + m32*normY + m33*normZ);\r\n\t\t\t\t\ttx += weight*(m11*tangX + m12*tangY + m13*tangZ);\r\n\t\t\t\t\tty += weight*(m21*tangX + m22*tangY + m23*tangZ);\r\n\t\t\t\t\ttz += weight*(m31*tangX + m32*tangY + m33*tangZ);\r\n\t\t\t\t\tk++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//if zero weight encountered, skip to the next vertex\r\n\t\t\t\t\tk = this._jointsPerVertex;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\ttargetPositions[i0] = vx;\r\n\t\t\ttargetPositions[i0 + 1] = vy;\r\n\t\t\tif (posDim == 3) targetPositions[i0 + 2] = vz;\r\n\t\t\ttargetNormals[i1] = nx;\r\n\t\t\ttargetNormals[i1 + 1] = ny;\r\n\t\t\ttargetNormals[i1 + 2] = nz;\r\n\t\t\ttargetTangents[i2] = tx;\r\n\t\t\ttargetTangents[i2 + 1] = ty;\r\n\t\t\ttargetTangents[i2 + 2] = tz;\r\n\r\n\t\t\tindex++;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a local hierarchical skeleton pose to a global pose\r\n\t * @param targetPose The SkeletonPose object that will contain the global pose.\r\n\t * @param skeleton The skeleton containing the joints, and as such, the hierarchical data to transform to global poses.\r\n\t */\r\n\tprivate localToGlobalPose(sourcePose:SkeletonPose, targetPose:SkeletonPose, skeleton:Skeleton):void\r\n\t{\r\n\t\tvar globalPoses:Array<JointPose> = targetPose.jointPoses;\r\n\t\tvar globalJointPose:JointPose;\r\n\t\tvar joints:Array<SkeletonJoint> = skeleton.joints;\r\n\t\tvar len:number = sourcePose.numJointPoses;\r\n\t\tvar jointPoses:Array<JointPose> = sourcePose.jointPoses;\r\n\t\tvar parentIndex:number;\r\n\t\tvar joint:SkeletonJoint;\r\n\t\tvar parentPose:JointPose;\r\n\t\tvar pose:JointPose;\r\n\t\tvar or:Quaternion;\r\n\t\tvar tr:Vector3D;\r\n\t\tvar t:Vector3D;\r\n\t\tvar q:Quaternion;\r\n\r\n\t\tvar x1:number, y1:number, z1:number, w1:number;\r\n\t\tvar x2:number, y2:number, z2:number, w2:number;\r\n\t\tvar x3:number, y3:number, z3:number;\r\n\r\n\t\t// :s\r\n\t\tif (globalPoses.length != len)\r\n\t\t\tglobalPoses.length = len;\r\n\r\n\t\tfor (var i:number = 0; i < len; ++i) {\r\n\t\t\tglobalJointPose = globalPoses[i];\r\n\r\n\t\t\tif (globalJointPose == null)\r\n\t\t\t\tglobalJointPose = globalPoses[i] = new JointPose();\r\n\r\n\t\t\tjoint = joints[i];\r\n\t\t\tparentIndex = joint.parentIndex;\r\n\t\t\tpose = jointPoses[i];\r\n\r\n\t\t\tq = globalJointPose.orientation;\r\n\t\t\tt = globalJointPose.translation;\r\n\r\n\t\t\tif (parentIndex < 0) {\r\n\t\t\t\ttr = pose.translation;\r\n\t\t\t\tor = pose.orientation;\r\n\t\t\t\tq.x = or.x;\r\n\t\t\t\tq.y = or.y;\r\n\t\t\t\tq.z = or.z;\r\n\t\t\t\tq.w = or.w;\r\n\t\t\t\tt.x = tr.x;\r\n\t\t\t\tt.y = tr.y;\r\n\t\t\t\tt.z = tr.z;\r\n\t\t\t} else {\r\n\t\t\t\t// append parent pose\r\n\t\t\t\tparentPose = globalPoses[parentIndex];\r\n\r\n\t\t\t\t// rotate point\r\n\t\t\t\tor = parentPose.orientation;\r\n\t\t\t\ttr = pose.translation;\r\n\t\t\t\tx2 = or.x;\r\n\t\t\t\ty2 = or.y;\r\n\t\t\t\tz2 = or.z;\r\n\t\t\t\tw2 = or.w;\r\n\t\t\t\tx3 = tr.x;\r\n\t\t\t\ty3 = tr.y;\r\n\t\t\t\tz3 = tr.z;\r\n\r\n\t\t\t\tw1 = -x2*x3 - y2*y3 - z2*z3;\r\n\t\t\t\tx1 = w2*x3 + y2*z3 - z2*y3;\r\n\t\t\t\ty1 = w2*y3 - x2*z3 + z2*x3;\r\n\t\t\t\tz1 = w2*z3 + x2*y3 - y2*x3;\r\n\r\n\t\t\t\t// append parent translation\r\n\t\t\t\ttr = parentPose.translation;\r\n\t\t\t\tt.x = -w1*x2 + x1*w2 - y1*z2 + z1*y2 + tr.x;\r\n\t\t\t\tt.y = -w1*y2 + x1*z2 + y1*w2 - z1*x2 + tr.y;\r\n\t\t\t\tt.z = -w1*z2 - x1*y2 + y1*x2 + z1*w2 + tr.z;\r\n\r\n\t\t\t\t// append parent orientation\r\n\t\t\t\tx1 = or.x;\r\n\t\t\t\ty1 = or.y;\r\n\t\t\t\tz1 = or.z;\r\n\t\t\t\tw1 = or.w;\r\n\t\t\t\tor = pose.orientation;\r\n\t\t\t\tx2 = or.x;\r\n\t\t\t\ty2 = or.y;\r\n\t\t\t\tz2 = or.z;\r\n\t\t\t\tw2 = or.w;\r\n\r\n\t\t\t\tq.w = w1*w2 - x1*x2 - y1*y2 - z1*z2;\r\n\t\t\t\tq.x = w1*x2 + x1*w2 + y1*z2 - z1*y2;\r\n\t\t\t\tq.y = w1*y2 - x1*z2 + y1*w2 + z1*x2;\r\n\t\t\t\tq.z = w1*z2 + x1*y2 - y1*x2 + z1*w2;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate onTransitionComplete(event:AnimationStateEvent):void\r\n\t{\r\n\t\tif (event.type == AnimationStateEvent.TRANSITION_COMPLETE) {\r\n\t\t\tevent.animationNode.removeEventListener(AnimationStateEvent.TRANSITION_COMPLETE, this._onTransitionCompleteDelegate);\r\n\t\t\t//if this is the current active state transition, revert control to the active node\r\n\t\t\tif (this._pActiveState == event.animationState) {\r\n\t\t\t\tthis._pActiveNode = this._pAnimationSet.getAnimation(this._pActiveAnimationName);\r\n\t\t\t\tthis._pActiveState = this.getAnimationState(this._pActiveNode);\r\n\t\t\t\tthis._activeSkeletonState = <ISkeletonAnimationState> this._pActiveState;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate onIndicesUpdate(event:ElementsEvent):void\r\n\t{\r\n\t\tvar elements:TriangleElements = <TriangleElements> event.target;\r\n\r\n\t\t(<TriangleElements> this._morphedElements[elements.id]).setIndices(elements.indices);\r\n\t}\r\n\r\n\tprivate onVerticesUpdate(event:ElementsEvent):void\r\n\t{\r\n\t\t//only update uvs\r\n\t\tif (event.attributesView != elements.uvs && event.attributesView != elements.getCustomAtributes(\"secondaryUVs\"))\r\n\t\t\treturn;\r\n\r\n\t\tvar elements:TriangleElements = <TriangleElements> event.target;\r\n\t\tvar morphGraphics:TriangleElements = <TriangleElements> this._morphedElements[elements.id];\r\n\t\tvar morphUVs:Float32Array = <Float32Array> morphGraphics.uvs.get(elements.numVertices);\r\n\r\n\t\tmorphGraphics.invalidateVertices(morphGraphics.uvs);\r\n\r\n\t\tvar uvStride:number = morphGraphics.uvs.stride;\r\n\t\tvar uvs:Float32Array = <Float32Array> event.attributesView.get(elements.numVertices);\r\n\r\n\t\tvar len:number = elements.numVertices*uvStride;\r\n\t\tfor (var i:number = 0; i < len; i+=uvStride) {\r\n\t\t\tmorphUVs[i] = uvs[i];\r\n\t\t\tmorphUVs[i + 1] = uvs[i + 1];\r\n\t\t}\r\n\t}\r\n}",
    "import {IAnimationSet}\t\t\t\t\tfrom \"awayjs-display/lib/animators/IAnimationSet\";\r\n\r\nimport {AnimationSetBase}\t\t\t\t\tfrom \"../animators/AnimationSetBase\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../animators/data/AnimationRegisterData\";\r\nimport {VertexAnimationMode}\t\t\t\tfrom \"../animators/data/VertexAnimationMode\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../shaders/ShaderBase\";\r\nimport {ShaderRegisterElement}\t\t\tfrom \"../shaders/ShaderRegisterElement\";\r\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterData}\t\t\t\tfrom \"../shaders/ShaderRegisterData\";\r\n\r\n/**\r\n * The animation data set used by vertex-based animators, containing vertex animation state data.\r\n *\r\n * @see VertexAnimator\r\n */\r\nexport class VertexAnimationSet extends AnimationSetBase implements IAnimationSet\r\n{\r\n\tprivate _iAnimationRegisterData:AnimationRegisterData;\r\n\t\r\n\tprivate _numPoses:number;\r\n\tprivate _blendMode:string;\r\n\r\n\t/**\r\n\t * Returns the number of poses made available at once to the GPU animation code.\r\n\t */\r\n\tpublic get numPoses():number\r\n\t{\r\n\t\treturn this._numPoses;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the active blend mode of the vertex animator object.\r\n\t */\r\n\tpublic get blendMode():string\r\n\t{\r\n\t\treturn this._blendMode;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns whether or not normal data is used in last set GPU pass of the vertex shader.\r\n\t */\r\n//\t\tpublic get useNormals():boolean\r\n//\t\t{\r\n//\t\t\treturn this._uploadNormals;\r\n//\t\t}\r\n\r\n\t/**\r\n\t * Creates a new <code>VertexAnimationSet</code> object.\r\n\t *\r\n\t * @param numPoses The number of poses made available at once to the GPU animation code.\r\n\t * @param blendMode Optional value for setting the animation mode of the vertex animator object.\r\n\t *\r\n\t * @see away3d.animators.data.VertexAnimationMode\r\n\t */\r\n\tconstructor(numPoses:number = 2, blendMode:string = \"absolute\")\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._numPoses = numPoses;\r\n\t\tthis._blendMode = blendMode;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAGALVertexCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\r\n\t{\r\n\t\t//grab animationRegisterData from the materialpassbase or create a new one if the first time\r\n\t\tthis._iAnimationRegisterData = shader.animationRegisterData;\r\n\r\n\t\tif (this._iAnimationRegisterData == null)\r\n\t\t\tthis._iAnimationRegisterData = shader.animationRegisterData = new AnimationRegisterData();\r\n\t\t\r\n\t\tif (this._blendMode == VertexAnimationMode.ABSOLUTE)\r\n\t\t\treturn this.getAbsoluteAGALCode(shader, registerCache, sharedRegisters);\r\n\t\telse\r\n\t\t\treturn this.getAdditiveAGALCode(shader, registerCache, sharedRegisters);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAGALFragmentCode(shader:ShaderBase, registerCache:ShaderRegisterCache, shadedTarget:ShaderRegisterElement):string\r\n\t{\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAGALUVCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\r\n\t{\r\n\t\treturn \"mov \" + sharedRegisters.uvTarget + \",\" + sharedRegisters.uvSource + \"\\n\";\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic doneAGALCode(shader:ShaderBase):void\r\n\t{\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Generates the vertex AGAL code for absolute blending.\r\n\t */\r\n\tprivate getAbsoluteAGALCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\r\n\t{\r\n\t\tvar code:string = \"\";\r\n\t\tvar temp1:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\tregisterCache.addVertexTempUsages(temp1, 1);\r\n\t\tvar temp2:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\tvar regs:Array<string> = new Array<string>(\".x\", \".y\", \".z\", \".w\");\r\n\t\tvar len:number = sharedRegisters.animatableAttributes.length;\r\n\t\tvar constantReg:ShaderRegisterElement = registerCache.getFreeVertexConstant();\r\n\t\tthis._iAnimationRegisterData.weightsIndex = constantReg.index;\r\n\t\tthis._iAnimationRegisterData.poseIndices = new Array<number>(this._numPoses);\r\n\t\tvar poseInput:ShaderRegisterElement;\r\n\t\tvar k:number = 0;\r\n\t\t\r\n\t\tif (len > 2)\r\n\t\t\tlen = 2;\r\n\t\t\r\n\t\tfor (var i:number = 0; i < len; ++i) {\r\n\t\t\tcode += \"mul \" + temp1 + \", \" + sharedRegisters.animatableAttributes[i] + \", \" + constantReg + regs[0] + \"\\n\";\r\n\t\t\r\n\t\t\tfor (var j:number = 1; j < this._numPoses; ++j) {\r\n\t\t\t\tposeInput = registerCache.getFreeVertexAttribute();\r\n\t\t\t\tthis._iAnimationRegisterData.poseIndices[k++] = poseInput.index;\r\n\t\t\t\tcode += \"mul \" + temp2 + \", \" + poseInput + \", \" + constantReg + regs[j] + \"\\n\";\r\n\t\t\r\n\t\t\t\tif (j < this._numPoses - 1) //TODO this is always the case, write better?\r\n\t\t\t\t\tcode += \"add \" + temp1 + \", \" + temp1 + \", \" + temp2 + \"\\n\";\r\n\t\t\t}\r\n\t\t\r\n\t\t\tcode += \"add \" + sharedRegisters.animationTargetRegisters[i] + \", \" + temp1 + \", \" + temp2 + \"\\n\";\r\n\t\t}\r\n\t\t\r\n\t\t// add code for bitangents if tangents are used\r\n\t\tif (shader.tangentDependencies > 0 || shader.outputsNormals) {\r\n\t\t\tcode += \"dp3 \" + temp1 + \".x, \" + sharedRegisters.animatableAttributes[2] + \", \" + sharedRegisters.animationTargetRegisters[1] + \"\\n\" +\r\n\t\t\t\t\"mul \" + temp1 + \", \" + sharedRegisters.animationTargetRegisters[1] + \", \" + temp1 + \".x\\n\" +\r\n\t\t\t\t\"sub \" + sharedRegisters.animationTargetRegisters[2] + \", \" + sharedRegisters.animationTargetRegisters[2] + \", \" + temp1 + \"\\n\";\r\n\t\t}\r\n\t\t//\r\n\t\t// // simply write attributes to targets, do not animate them\r\n\t\t// // projection will pick up on targets[0] to do the projection\r\n\t\t// var len:number = sharedRegisters.animatableAttributes.length;\r\n\t\t// for (var i:number = 0; i < len; ++i)\r\n\t\t// \tcode += \"mov \" + sharedRegisters.animationTargetRegisters[i] + \", \" + sharedRegisters.animatableAttributes[i] + \"\\n\";\r\n\r\n\t\treturn code;\r\n\t}\r\n\r\n\t/**\r\n\t * Generates the vertex AGAL code for additive blending.\r\n\t */\r\n\tprivate getAdditiveAGALCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\r\n\t{\r\n\t\tvar code:string = \"\";\r\n\t\tvar len:number = sharedRegisters.animatableAttributes.length;\r\n\t\tvar regs:Array<string> = [\".x\", \".y\", \".z\", \".w\"];\r\n\t\tvar temp1:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\tvar constantReg:ShaderRegisterElement = registerCache.getFreeVertexConstant();\r\n\t\tthis._iAnimationRegisterData.weightsIndex = constantReg.index;\r\n\t\tthis._iAnimationRegisterData.poseIndices = new Array<number>(this._numPoses);\r\n\t\tvar poseInput:ShaderRegisterElement;\r\n\t\tvar k:number = 0;\r\n\r\n\t\tif (len > 2)\r\n\t\t\tlen = 2;\r\n\r\n\t\tcode += \"mov  \" + sharedRegisters.animationTargetRegisters[0] + \", \" + sharedRegisters.animatableAttributes[0] + \"\\n\";\r\n\t\tif (shader.normalDependencies > 0)\r\n\t\t\tcode += \"mov \" + sharedRegisters.animationTargetRegisters[1] + \", \" + sharedRegisters.animatableAttributes[1] + \"\\n\";\r\n\r\n\t\tfor (var i:number = 0; i < len; ++i) {\r\n\t\t\tfor (var j:number = 0; j < this._numPoses; ++j) {\r\n\t\t\t\tposeInput = registerCache.getFreeVertexAttribute();\r\n\t\t\t\tthis._iAnimationRegisterData.poseIndices[k++] = poseInput.index;\r\n\t\t\t\tcode += \"mul \" + temp1 + \", \" + poseInput + \", \" + constantReg + regs[j] + \"\\n\" +\r\n\t\t\t\t\t\"add \" + sharedRegisters.animationTargetRegisters[i] + \", \" + sharedRegisters.animationTargetRegisters[i] + \", \" + temp1 + \"\\n\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (shader.tangentDependencies > 0 || shader.outputsNormals) {\r\n\t\t\tcode += \"dp3 \" + temp1 + \".x, \" + sharedRegisters.animatableAttributes[2] + \", \" + sharedRegisters.animationTargetRegisters[1] + \"\\n\" +\r\n\t\t\t\t\"mul \" + temp1 + \", \" + sharedRegisters.animationTargetRegisters[1] + \", \" + temp1 + \".x\\n\" +\r\n\t\t\t\t\"sub \" + sharedRegisters.animationTargetRegisters[2] + \", \" + sharedRegisters.animatableAttributes[2] + \", \" + temp1 + \"\\n\";\r\n\t\t}\r\n\r\n\t\treturn code;\r\n\t}\r\n}",
    "import {Graphics}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphics\";\r\nimport {ElementsBase}\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/ElementsBase\";\r\nimport {TriangleElements}\t\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\r\nimport {Graphic}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphic\";\r\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\n\r\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\n\r\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../animators/AnimatorBase\";\r\nimport {VertexAnimationSet}\t\t\t\tfrom \"../animators/VertexAnimationSet\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../animators/data/AnimationRegisterData\";\r\nimport {VertexAnimationMode}\t\t\t\tfrom \"../animators/data/VertexAnimationMode\";\r\nimport {IVertexAnimationState}\t\t\tfrom \"../animators/states/IVertexAnimationState\";\r\nimport {IAnimationTransition}\t\t\t\tfrom \"../animators/transitions/IAnimationTransition\";\r\nimport {GL_GraphicRenderable}\t\t\t\tfrom \"../renderables/GL_GraphicRenderable\";\r\nimport {GL_RenderableBase}\t\t\t\tfrom \"../renderables/GL_RenderableBase\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../shaders/ShaderBase\";\r\nimport {GL_ElementsBase}\t\t\t\t\tfrom \"../elements/GL_ElementsBase\";\r\n\r\n/**\r\n * Provides an interface for assigning vertex-based animation data sets to sprite-based entity objects\r\n * and controlling the various available states of animation through an interative playhead that can be\r\n * automatically updated or manually triggered.\r\n */\r\nexport class VertexAnimator extends AnimatorBase\r\n{\r\n\tprivate _vertexAnimationSet:VertexAnimationSet;\r\n\tprivate _poses:Array<Graphics> = new Array<Graphics>();\r\n\tprivate _weights:Float32Array = new Float32Array([1, 0, 0, 0]);\r\n\tprivate _activeVertexState:IVertexAnimationState;\r\n\r\n\t/**\r\n\t * Creates a new <code>VertexAnimator</code> object.\r\n\t *\r\n\t * @param vertexAnimationSet The animation data set containing the vertex animations used by the animator.\r\n\t */\r\n\tconstructor(vertexAnimationSet:VertexAnimationSet)\r\n\t{\r\n\t\tsuper(vertexAnimationSet);\r\n\r\n\t\tthis._vertexAnimationSet = vertexAnimationSet;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic clone():AnimatorBase\r\n\t{\r\n\t\treturn new VertexAnimator(this._vertexAnimationSet);\r\n\t}\r\n\r\n\t/**\r\n\t * Plays a sequence with a given name. If the sequence is not found, it may not be loaded yet, and it will retry every frame.\r\n\t * @param sequenceName The name of the clip to be played.\r\n\t */\r\n\tpublic play(name:string, transition:IAnimationTransition = null, offset:number = NaN):void\r\n\t{\r\n\t\tif (this._pActiveAnimationName == name)\r\n\t\t\treturn;\r\n\r\n\t\tthis._pActiveAnimationName = name;\r\n\r\n\t\t//TODO: implement transitions in vertex animator\r\n\r\n\t\tif (!this._pAnimationSet.hasAnimation(name))\r\n\t\t\tthrow new Error(\"Animation root node \" + name + \" not found!\");\r\n\r\n\t\tthis._pActiveNode = this._pAnimationSet.getAnimation(name);\r\n\r\n\t\tthis._pActiveState = this.getAnimationState(this._pActiveNode);\r\n\r\n\t\tif (this.updatePosition) {\r\n\t\t\t//update straight away to reset position deltas\r\n\t\t\tthis._pActiveState.update(this._pAbsoluteTime);\r\n\t\t\tthis._pActiveState.positionDelta;\r\n\t\t}\r\n\r\n\t\tthis._activeVertexState = <IVertexAnimationState> this._pActiveState;\r\n\r\n\t\tthis.start();\r\n\r\n\t\t//apply a time offset if specified\r\n\t\tif (!isNaN(offset))\r\n\t\t\tthis.reset(name, offset);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pUpdateDeltaTime(dt:number):void\r\n\t{\r\n\t\tsuper._pUpdateDeltaTime(dt);\r\n\r\n\t\tvar geometryFlag:boolean = false;\r\n\r\n\t\tif (this._poses[0] != this._activeVertexState.currentGraphics) {\r\n\t\t\tthis._poses[0] = this._activeVertexState.currentGraphics;\r\n\t\t\tgeometryFlag = true;\r\n\t\t}\r\n\r\n\t\tif (this._poses[1] != this._activeVertexState.nextGraphics)\r\n\t\t\tthis._poses[1] = this._activeVertexState.nextGraphics;\r\n\r\n\t\tthis._weights[0] = 1 - (this._weights[1] = this._activeVertexState.blendWeight);\r\n\r\n\t\tif (geometryFlag)\r\n\t\t\tthis.invalidateElements();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, stage:Stage, camera:Camera):void\r\n\t{\r\n\t\t// todo: add code for when running on cpu\r\n\t\t// this type of animation can only be SubSprite\r\n\t\tvar graphic:Graphic = <Graphic> (<GL_GraphicRenderable> renderable).graphic;\r\n\t\tvar elements:ElementsBase = graphic.elements;\r\n\r\n\t\t// if no poses defined, set temp data\r\n\t\tif (!this._poses.length) {\r\n\t\t\tthis.setNullPose(shader, elements, stage);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar animationRegisterData:AnimationRegisterData = shader.animationRegisterData;\r\n\t\tvar i:number;\r\n\t\tvar len:number = this._vertexAnimationSet.numPoses;\r\n\r\n\t\tshader.setVertexConstFromArray(animationRegisterData.weightsIndex, this._weights);\r\n\r\n\t\tif (this._vertexAnimationSet.blendMode == VertexAnimationMode.ABSOLUTE)\r\n\t\t\ti = 1;\r\n\t\telse\r\n\t\t\ti = 0;\r\n\r\n\t\tvar elementsGL:GL_ElementsBase;\r\n\t\tvar k:number = 0;\r\n\r\n\t\tfor (; i < len; ++i) {\r\n\t\t\telements = this._poses[i].getGraphicAt(graphic._iIndex).elements || graphic.elements;\r\n\r\n\t\t\telementsGL = <GL_ElementsBase> stage.getAbstraction(elements);\r\n\t\t\telementsGL._indexMappings = (<GL_ElementsBase> stage.getAbstraction(graphic.elements)).getIndexMappings();\r\n\r\n\t\t\tif (elements.isAsset(TriangleElements)) {\r\n\t\t\t\telementsGL.activateVertexBufferVO(animationRegisterData.poseIndices[k++], (<TriangleElements> elements).positions);\r\n\r\n\t\t\t\tif (shader.normalDependencies > 0)\r\n\t\t\t\t\telementsGL.activateVertexBufferVO(animationRegisterData.poseIndices[k++], (<TriangleElements> elements).normals);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate setNullPose(shader:ShaderBase, elements:ElementsBase, stage:Stage):void\r\n\t{\r\n\t\tvar animationRegisterData:AnimationRegisterData = shader.animationRegisterData;\r\n\t\t\r\n\t\tshader.setVertexConstFromArray(animationRegisterData.weightsIndex, this._weights);\r\n\r\n\t\tvar elementsGL:GL_ElementsBase = (<GL_ElementsBase> stage.getAbstraction(elements));\r\n\t\tvar k:number = 0;\r\n\t\t\r\n\t\tif (this._vertexAnimationSet.blendMode == VertexAnimationMode.ABSOLUTE) {\r\n\t\t\tvar len:number = this._vertexAnimationSet.numPoses;\r\n\t\t\tfor (var i:number = 1; i < len; ++i) {\r\n\t\t\t\tif (elements.isAsset(TriangleElements)) {\r\n\t\t\t\t\telementsGL.activateVertexBufferVO(animationRegisterData.poseIndices[k++], (<TriangleElements> elements).positions);\r\n\r\n\t\t\t\t\tif (shader.normalDependencies > 0)\r\n\t\t\t\t\t\telementsGL.activateVertexBufferVO(animationRegisterData.poseIndices[k++], (<TriangleElements> elements).normals);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// todo: set temp data for additive?\r\n\t}\r\n\r\n\t/**\r\n\t * Verifies if the animation will be used on cpu. Needs to be true for all passes for a material to be able to use it on gpu.\r\n\t * Needs to be called if gpu code is potentially required.\r\n\t */\r\n\tpublic testGPUCompatibility(shader:ShaderBase):void\r\n\t{\r\n\t}\r\n\r\n\tpublic getRenderableElements(renderable:GL_GraphicRenderable, sourceElements:TriangleElements):TriangleElements\r\n\t{\r\n\t\tif (this._vertexAnimationSet.blendMode == VertexAnimationMode.ABSOLUTE && this._poses.length)\r\n\t\t\treturn <TriangleElements> this._poses[0].getGraphicAt(renderable.graphic._iIndex).elements || sourceElements;\r\n\r\n\t\t//nothing to do here\r\n\t\treturn sourceElements;\r\n\t}\r\n}",
    "import {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\nimport {IContextGL}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/IContextGL\";\r\nimport {IVertexBuffer}\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/IVertexBuffer\";\r\n\r\nimport {ParticleAnimationData}\t\t\tfrom \"../../animators/data/ParticleAnimationData\";\r\n\r\n/**\r\n * ...\r\n */\r\nexport class AnimationElements\r\n{\r\n\tpublic static SUBGEOM_ID_COUNT:number = 0;\r\n\r\n\tpublic _pVertexData:Array<number>;\r\n\r\n\tpublic _pVertexBuffer:Array<IVertexBuffer> = new Array<IVertexBuffer>(8);\r\n\tpublic _pBufferContext:Array<IContextGL> = new Array<IContextGL>(8);\r\n\tpublic _pBufferDirty:Array<boolean> = new Array<boolean>(8);\r\n\r\n\tprivate _numVertices:number;\r\n\r\n\tprivate _totalLenOfOneVertex:number;\r\n\r\n\tpublic numProcessedVertices:number = 0;\r\n\r\n\tpublic previousTime:number = Number.NEGATIVE_INFINITY;\r\n\r\n\tpublic animationParticles:Array<ParticleAnimationData> = new Array<ParticleAnimationData>();\r\n\r\n\t/**\r\n\t * An id for this animation subgeometry, used to identify animation subgeometries when using animation sets.\r\n\t *\r\n\t * @private\r\n\t */\r\n\tpublic _iUniqueId:number;//Arcane\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tfor (var i:number = 0; i < 8; i++)\r\n\t\t\tthis._pBufferDirty[i] = true;\r\n\r\n\t\tthis._iUniqueId = AnimationElements.SUBGEOM_ID_COUNT++;\r\n\t}\r\n\r\n\tpublic createVertexData(numVertices:number, totalLenOfOneVertex:number):void\r\n\t{\r\n\t\tthis._numVertices = numVertices;\r\n\t\tthis._totalLenOfOneVertex = totalLenOfOneVertex;\r\n\t\tthis._pVertexData = new Array<number>(numVertices*totalLenOfOneVertex);\r\n\t}\r\n\r\n\tpublic activateVertexBuffer(index:number, bufferOffset:number, stage:Stage, format:number):void\r\n\t{\r\n\t\tvar contextIndex:number = stage.stageIndex;\r\n\t\tvar context:IContextGL = <IContextGL> stage.context;\r\n\r\n\t\tvar buffer:IVertexBuffer = this._pVertexBuffer[contextIndex];\r\n\t\tif (!buffer || this._pBufferContext[contextIndex] != context) {\r\n\t\t\tbuffer = this._pVertexBuffer[contextIndex] = context.createVertexBuffer(this._numVertices, this._totalLenOfOneVertex*4);\r\n\t\t\tthis._pBufferContext[contextIndex] = context;\r\n\t\t\tthis._pBufferDirty[contextIndex] = true;\r\n\t\t}\r\n\t\tif (this._pBufferDirty[contextIndex]) {\r\n\t\t\tbuffer.uploadFromArray(this._pVertexData, 0, this._numVertices);\r\n\t\t\tthis._pBufferDirty[contextIndex] = false;\r\n\t\t}\r\n\t\tcontext.setVertexBufferAt(index, buffer, bufferOffset*4, format);\r\n\t}\r\n\r\n\tpublic dispose():void\r\n\t{\r\n\t\twhile (this._pVertexBuffer.length) {\r\n\t\t\tvar vertexBuffer:IVertexBuffer = this._pVertexBuffer.pop()\r\n\r\n\t\t\tif (vertexBuffer)\r\n\t\t\t\tvertexBuffer.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic invalidateBuffer():void\r\n\t{\r\n\t\tfor (var i:number = 0; i < 8; i++)\r\n\t\t\tthis._pBufferDirty[i] = true;\r\n\t}\r\n\r\n\tpublic get vertexData():Array<number>\r\n\t{\r\n\t\treturn this._pVertexData;\r\n\t}\r\n\r\n\tpublic get numVertices():number\r\n\t{\r\n\t\treturn this._numVertices;\r\n\t}\r\n\r\n\tpublic get totalLenOfOneVertex():number\r\n\t{\r\n\t\treturn this._totalLenOfOneVertex;\r\n\t}\r\n}",
    "import {Matrix3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\r\n\r\nimport {AnimationNodeBase}\t\t\tfrom \"awayjs-display/lib/animators/nodes/AnimationNodeBase\";\r\n\r\nimport {ShaderRegisterCache}\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterData}\t\t\tfrom \"../../shaders/ShaderRegisterData\";\r\nimport {ShaderRegisterElement}\t\tfrom \"../../shaders/ShaderRegisterElement\";\r\n\r\n\r\n/**\r\n * ...\r\n */\r\nexport class AnimationRegisterData\r\n{\r\n\t//vertex animation data\r\n\tpublic weightsIndex:number;\r\n\tpublic poseIndices:Array<number>;\r\n\t\r\n\t//vertex\r\n\tpublic positionAttribute:ShaderRegisterElement;\r\n\tpublic uvAttribute:ShaderRegisterElement;\r\n\tpublic positionTarget:ShaderRegisterElement;\r\n\tpublic scaleAndRotateTarget:ShaderRegisterElement;\r\n\tpublic velocityTarget:ShaderRegisterElement;\r\n\tpublic vertexTime:ShaderRegisterElement;\r\n\tpublic vertexLife:ShaderRegisterElement;\r\n\tpublic vertexZeroConst:ShaderRegisterElement;\r\n\tpublic vertexOneConst:ShaderRegisterElement;\r\n\tpublic vertexTwoConst:ShaderRegisterElement;\r\n\tpublic uvTarget:ShaderRegisterElement;\r\n\tpublic colorAddTarget:ShaderRegisterElement;\r\n\tpublic colorMulTarget:ShaderRegisterElement;\r\n\t//vary\r\n\tpublic colorAddVary:ShaderRegisterElement;\r\n\tpublic colorMulVary:ShaderRegisterElement;\r\n\r\n\t//fragment\r\n\tpublic uvVar:ShaderRegisterElement;\r\n\r\n\t//these are targets only need to rotate ( normal and tangent )\r\n\tpublic rotationRegisters:Array<ShaderRegisterElement>;\r\n\r\n\tprivate indexDictionary:Object = new Object();\r\n\r\n\tconstructor()\r\n\t{\r\n\t}\r\n\r\n\tpublic reset(registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData, needVelocity:boolean):void\r\n\t{\r\n\t\tthis.rotationRegisters = new Array<ShaderRegisterElement>();\r\n\t\tthis.positionAttribute = sharedRegisters.animatableAttributes[0];\r\n\t\tthis.scaleAndRotateTarget = sharedRegisters.animationTargetRegisters[0];\r\n\r\n\t\tfor (var i:number = 1; i < sharedRegisters.animationTargetRegisters.length; i++)\r\n\t\t\tthis.rotationRegisters.push(sharedRegisters.animationTargetRegisters[i]);\r\n\t\t\r\n\t\t//allot const register\r\n\t\tthis.vertexZeroConst = registerCache.getFreeVertexConstant();\r\n\t\tthis.vertexZeroConst = new ShaderRegisterElement(this.vertexZeroConst.regName, this.vertexZeroConst.index, 0);\r\n\t\tthis.vertexOneConst = new ShaderRegisterElement(this.vertexZeroConst.regName, this.vertexZeroConst.index, 1);\r\n\t\tthis.vertexTwoConst = new ShaderRegisterElement(this.vertexZeroConst.regName, this.vertexZeroConst.index, 2);\r\n\r\n\t\t//allot temp register\r\n\t\tthis.positionTarget = registerCache.getFreeVertexVectorTemp();\r\n\t\tregisterCache.addVertexTempUsages(this.positionTarget, 1);\r\n\t\tthis.positionTarget = new ShaderRegisterElement(this.positionTarget.regName, this.positionTarget.index);\r\n\r\n\t\tif (needVelocity) {\r\n\t\t\tthis.velocityTarget = registerCache.getFreeVertexVectorTemp();\r\n\t\t\tregisterCache.addVertexTempUsages(this.velocityTarget, 1);\r\n\t\t\tthis.velocityTarget = new ShaderRegisterElement(this.velocityTarget.regName, this.velocityTarget.index);\r\n\t\t\tthis.vertexTime = new ShaderRegisterElement(this.velocityTarget.regName, this.velocityTarget.index, 3);\r\n\t\t\tthis.vertexLife = new ShaderRegisterElement(this.positionTarget.regName, this.positionTarget.index, 3);\r\n\t\t} else {\r\n\t\t\tvar tempTime:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\t\tregisterCache.addVertexTempUsages(tempTime, 1);\r\n\t\t\tthis.vertexTime = new ShaderRegisterElement(tempTime.regName, tempTime.index, 0);\r\n\t\t\tthis.vertexLife = new ShaderRegisterElement(tempTime.regName, tempTime.index, 1);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tpublic setUVSourceAndTarget(sharedRegisters:ShaderRegisterData):void\r\n\t{\r\n\t\tthis.uvVar = sharedRegisters.uvTarget;\r\n\t\tthis.uvAttribute = sharedRegisters.uvSource;\r\n\t\t//uv action is processed after normal actions,so use offsetTarget as uvTarget\r\n\t\tthis.uvTarget = new ShaderRegisterElement(this.positionTarget.regName, this.positionTarget.index);\r\n\t}\r\n\r\n\tpublic setRegisterIndex(node:AnimationNodeBase, parameterIndex:number, registerIndex:number):void\r\n\t{\r\n\t\t//8 should be enough for any node.\r\n\t\tvar t:Array<number> = this.indexDictionary[node.id];\r\n\r\n\t\tif (t == null)\r\n\t\t\tt = this.indexDictionary[node.id] = new Array<number>(8);\r\n\r\n\t\tt[parameterIndex] = registerIndex;\r\n\t}\r\n\r\n\tpublic getRegisterIndex(node:AnimationNodeBase, parameterIndex:number):number\r\n\t{\r\n\t\treturn (<Array<number>> this.indexDictionary[node.id])[parameterIndex];\r\n\t}\r\n}",
    "import {ColorTransform}\t\t\t\t\tfrom \"awayjs-core/lib/geom/ColorTransform\";\r\n\r\nexport class ColorSegmentPoint\r\n{\r\n\tprivate _color:ColorTransform;\r\n\tprivate _life:number;\r\n\r\n\tconstructor(life:number, color:ColorTransform)\r\n\t{\r\n\t\t//0<life<1\r\n\t\tif (life <= 0 || life >= 1)\r\n\t\t\tthrow(new Error(\"life exceeds range (0,1)\"));\r\n\t\tthis._life = life;\r\n\t\tthis._color = color;\r\n\t}\r\n\r\n\tpublic get color():ColorTransform\r\n\t{\r\n\t\treturn this._color;\r\n\t}\r\n\r\n\tpublic get life():number\r\n\t{\r\n\t\treturn this._life;\r\n\t}\r\n\r\n}",
    "import {Matrix3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\r\nimport {Quaternion}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Quaternion\";\r\nimport {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\n/**\r\n * Contains transformation data for a skeleton joint, used for skeleton animation.\r\n *\r\n * @see away.animation.Skeleton\r\n * @see away.animation.SkeletonJoint\r\n *\r\n * todo: support (uniform) scale\r\n */\r\nexport class JointPose\r\n{\r\n\t/**\r\n\t * The name of the joint to which the pose is associated\r\n\t */\r\n\tpublic name:string; // intention is that this should be used only at load time, not in the main loop\r\n\r\n\t/**\r\n\t * The rotation of the pose stored as a quaternion\r\n\t */\r\n\tpublic orientation:Quaternion = new Quaternion();\r\n\r\n\t/**\r\n\t * The translation of the pose\r\n\t */\r\n\tpublic translation:Vector3D = new Vector3D();\r\n\r\n\tconstructor()\r\n\t{\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Converts the transformation to a Matrix3D representation.\r\n\t *\r\n\t * @param target An optional target matrix to store the transformation. If not provided, it will create a new instance.\r\n\t * @return The transformation matrix of the pose.\r\n\t */\r\n\tpublic toMatrix3D(target:Matrix3D = null):Matrix3D\r\n\t{\r\n\t\tif (target == null)\r\n\t\t\ttarget = new Matrix3D();\r\n\r\n\t\tthis.orientation.toMatrix3D(target);\r\n\t\ttarget.appendTranslation(this.translation.x, this.translation.y, this.translation.z);\r\n\t\treturn target;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies the transformation data from a source pose object into the existing pose object.\r\n\t *\r\n\t * @param pose The source pose to copy from.\r\n\t */\r\n\tpublic copyFrom(pose:JointPose):void\r\n\t{\r\n\t\tvar or:Quaternion = pose.orientation;\r\n\t\tvar tr:Vector3D = pose.translation;\r\n\t\tthis.orientation.x = or.x;\r\n\t\tthis.orientation.y = or.y;\r\n\t\tthis.orientation.z = or.z;\r\n\t\tthis.orientation.w = or.w;\r\n\t\tthis.translation.x = tr.x;\r\n\t\tthis.translation.y = tr.y;\r\n\t\tthis.translation.z = tr.z;\r\n\t}\r\n}",
    "import {ParticleData}\t\t\t\t\t\tfrom \"awayjs-display/lib/animators/data/ParticleData\";\r\n\r\n/**\r\n * ...\r\n */\r\nexport class ParticleAnimationData\r\n{\r\n\tpublic index:number;\r\n\tpublic startTime:number;\r\n\tpublic totalTime:number;\r\n\tpublic duration:number;\r\n\tpublic delay:number;\r\n\tpublic startVertexIndex:number;\r\n\tpublic numVertices:number;\r\n\r\n\tconstructor(index:number, startTime:number, duration:number, delay:number, particle:ParticleData)\r\n\t{\r\n\t\tthis.index = index;\r\n\t\tthis.startTime = startTime;\r\n\t\tthis.totalTime = duration + delay;\r\n\t\tthis.duration = duration;\r\n\t\tthis.delay = delay;\r\n\t\tthis.startVertexIndex = particle.startVertexIndex;\r\n\t\tthis.numVertices = particle.numVertices;\r\n\t}\r\n}",
    "/**\r\n * Options for setting the properties mode of a particle animation node.\r\n */\r\nexport class ParticlePropertiesMode\r\n{\r\n\t/**\r\n\t * Mode that defines the particle node as acting on global properties (ie. the properties set in the node constructor or the corresponding animation state).\r\n\t */\r\n\tpublic static GLOBAL:number = 0;\r\n\r\n\t/**\r\n\t * Mode that defines the particle node as acting on local static properties (ie. the properties of particles set in the initialising on the animation set).\r\n\t */\r\n\tpublic static LOCAL_STATIC:number = 1;\r\n\r\n\t/**\r\n\t * Mode that defines the particle node as acting on local dynamic properties (ie. the properties of the particles set in the corresponding animation state).\r\n\t */\r\n\tpublic static LOCAL_DYNAMIC:number = 2;\r\n}",
    "/**\r\n * Dynamic class for holding the local properties of a particle, used for processing the static properties\r\n * of particles in the particle animation set before beginning upload to the GPU.\r\n */\r\nexport class ParticleProperties\r\n{\r\n\t/**\r\n\t * The index of the current particle being set.\r\n\t */\r\n\tpublic index:number;\r\n\r\n\t/**\r\n\t * The total number of particles being processed by the particle animation set.\r\n\t */\r\n\tpublic total:number;\r\n\r\n\t/**\r\n\t * The start time of the particle.\r\n\t */\r\n\tpublic startTime:number;\r\n\r\n\t/**\r\n\t * The duration of the particle, an optional value used when the particle aniamtion set settings for <code>useDuration</code> are enabled in the constructor.\r\n\t *\r\n\t * @see away.animators.ParticleAnimationSet\r\n\t */\r\n\tpublic duration:number;\r\n\r\n\t/**\r\n\t * The delay between cycles of the particle, an optional value used when the particle aniamtion set settings for <code>useLooping</code> and  <code>useDelay</code> are enabled in the constructor.\r\n\t *\r\n\t * @see away.animators.ParticleAnimationSet\r\n\t */\r\n\tpublic delay:number;\r\n}",
    "/**\r\n * A value obect representing a single joint in a skeleton object.\r\n *\r\n * @see away.animators.Skeleton\r\n */\r\nexport class SkeletonJoint\r\n{\r\n\t/**\r\n\t * The index of the parent joint in the skeleton's joints vector.\r\n\t *\r\n\t * @see away.animators.Skeleton#joints\r\n\t */\r\n\tpublic parentIndex:number = -1;\r\n\r\n\t/**\r\n\t * The name of the joint\r\n\t */\r\n\tpublic name:string; // intention is that this should be used only at load time, not in the main loop\r\n\r\n\t/**\r\n\t * The inverse bind pose matrix, as raw data, used to transform vertices to bind joint space in preparation for transformation using the joint matrix.\r\n\t */\r\n\tpublic inverseBindPose:Float32Array;\r\n\r\n\t/**\r\n\t * Creates a new <code>SkeletonJoint</code> object\r\n\t */\r\n\tconstructor()\r\n\t{\r\n\t}\r\n}",
    "import {IAsset}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/library/IAsset\";\r\nimport {AssetBase}\t\t\t\t\t\tfrom \"awayjs-core/lib/library/AssetBase\";\r\n\r\nimport {JointPose}\t\t\t\t\t\tfrom \"../../animators/data/JointPose\";\r\n\r\n\r\n/**\r\n * A collection of pose objects, determining the pose for an entire skeleton.\r\n * The <code>jointPoses</code> vector object corresponds to a skeleton's <code>joints</code> vector object, however, there is no\r\n * reference to a skeleton's instance, since several skeletons can be influenced by the same pose (eg: animation\r\n * clips are added to any animator with a valid skeleton)\r\n *\r\n * @see away.animators.Skeleton\r\n * @see away.animators.JointPose\r\n */\r\nexport class SkeletonPose extends AssetBase implements IAsset\r\n{\r\n\tpublic static assetType:string = \"[asset SkeletonPose]\";\r\n\r\n\t/**\r\n\t * A flat list of pose objects that comprise the skeleton pose. The pose indices correspond to the target skeleton's joint indices.\r\n\t *\r\n\t * @see away.animators.Skeleton#joints\r\n\t */\r\n\tpublic jointPoses:Array<JointPose>;\r\n\r\n\t/**\r\n\t * The total number of joint poses in the skeleton pose.\r\n\t */\r\n\tpublic get numJointPoses():number\r\n\t{\r\n\t\treturn this.jointPoses.length;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new <code>SkeletonPose</code> object.\r\n\t */\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tthis.jointPoses = new Array<JointPose>();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic get assetType():string\r\n\t{\r\n\t\treturn SkeletonPose.assetType;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the joint pose object with the given joint name, otherwise returns a null object.\r\n\t *\r\n\t * @param jointName The name of the joint object whose pose is to be found.\r\n\t * @return The pose object with the given joint name.\r\n\t */\r\n\tpublic jointPoseFromName(jointName:string):JointPose\r\n\t{\r\n\t\tvar jointPoseIndex:number = this.jointPoseIndexFromName(jointName);\r\n\t\tif (jointPoseIndex != -1)\r\n\t\t\treturn this.jointPoses[jointPoseIndex]; else\r\n\t\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the pose index, given the joint name. -1 is returned if the joint name is not found in the pose.\r\n\t *\r\n\t * @param The name of the joint object whose pose is to be found.\r\n\t * @return The index of the pose object in the jointPoses Array\r\n\t *\r\n\t * @see #jointPoses\r\n\t */\r\n\tpublic jointPoseIndexFromName(jointName:string):number\r\n\t{\r\n\t\t// this is implemented as a linear search, rather than a possibly\r\n\t\t// more optimal method (Dictionary lookup, for example) because:\r\n\t\t// a) it is assumed that it will be called once for each joint\r\n\t\t// b) it is assumed that it will be called only during load, and not during main loop\r\n\t\t// c) maintaining a dictionary (for safety) would dictate an interface to access JointPoses,\r\n\t\t//    rather than direct array access.  this would be sub-optimal.\r\n\t\tvar jointPoseIndex:number;\r\n\t\tvar jointPose:JointPose;\r\n\t\tfor (var i:number; i < this.jointPoses.length; i++) {\r\n\t\t\tjointPose = this.jointPoses[i];\r\n\t\t\tif (jointPose.name == jointName)\r\n\t\t\t\treturn jointPoseIndex;\r\n\t\t\tjointPoseIndex++;\r\n\t\t}\r\n\r\n\t\treturn -1;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a copy of the <code>SkeletonPose</code> object, with a dulpicate of its component joint poses.\r\n\t *\r\n\t * @return SkeletonPose\r\n\t */\r\n\tpublic clone():SkeletonPose\r\n\t{\r\n\t\tvar clone:SkeletonPose = new SkeletonPose();\r\n\t\tvar numJointPoses:number = this.jointPoses.length;\r\n\t\tfor (var i:number = 0; i < numJointPoses; i++) {\r\n\t\t\tvar cloneJointPose:JointPose = new JointPose();\r\n\t\t\tvar thisJointPose:JointPose = this.jointPoses[i];\r\n\t\t\tcloneJointPose.name = thisJointPose.name;\r\n\t\t\tcloneJointPose.copyFrom(thisJointPose);\r\n\t\t\tclone.jointPoses[i] = cloneJointPose;\r\n\t\t}\r\n\t\treturn clone;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic dispose():void\r\n\t{\r\n\t\tthis.jointPoses.length = 0;\r\n\t}\r\n}",
    "import {SkeletonJoint}\t\t\t\t\tfrom \"../../animators/data/SkeletonJoint\";\r\n\r\nimport {IAsset}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/library/IAsset\";\r\nimport {AssetBase}\t\t\t\t\t\tfrom \"awayjs-core/lib/library/AssetBase\";\r\n\r\n/**\r\n * A Skeleton object is a hierarchical grouping of joint objects that can be used for skeletal animation.\r\n *\r\n * @see away.animators.SkeletonJoint\r\n */\r\nexport class Skeleton extends AssetBase implements IAsset\r\n{\r\n\tpublic static assetType:string = \"[asset Skeleton]\";\r\n\r\n\t/**\r\n\t * A flat list of joint objects that comprise the skeleton. Every joint except for the root has a parentIndex\r\n\t * property that is an index into this list.\r\n\t * A child joint should always have a higher index than its parent.\r\n\t */\r\n\tpublic joints:Array<SkeletonJoint>;\r\n\r\n\t/**\r\n\t * The total number of joints in the skeleton.\r\n\t */\r\n\tpublic get numJoints():number\r\n\t{\r\n\t\treturn this.joints.length;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new <code>Skeleton</code> object\r\n\t */\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\t// in the long run, it might be a better idea to not store Joint objects, but keep all data in Vectors, that we can upload easily?\r\n\t\tthis.joints = new Array<SkeletonJoint>();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the joint object in the skeleton with the given name, otherwise returns a null object.\r\n\t *\r\n\t * @param jointName The name of the joint object to be found.\r\n\t * @return The joint object with the given name.\r\n\t *\r\n\t * @see #joints\r\n\t */\r\n\tpublic jointFromName(jointName:string):SkeletonJoint\r\n\t{\r\n\t\tvar jointIndex:number = this.jointIndexFromName(jointName);\r\n\t\tif (jointIndex != -1)\r\n\t\t\treturn this.joints[jointIndex]; else\r\n\t\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the joint index, given the joint name. -1 is returned if the joint name is not found.\r\n\t *\r\n\t * @param jointName The name of the joint object to be found.\r\n\t * @return The index of the joint object in the joints Array\r\n\t *\r\n\t * @see #joints\r\n\t */\r\n\tpublic jointIndexFromName(jointName:string):number\r\n\t{\r\n\t\t// this is implemented as a linear search, rather than a possibly\r\n\t\t// more optimal method (Dictionary lookup, for example) because:\r\n\t\t// a) it is assumed that it will be called once for each joint\r\n\t\t// b) it is assumed that it will be called only during load, and not during main loop\r\n\t\t// c) maintaining a dictionary (for safety) would dictate an interface to access SkeletonJoints,\r\n\t\t//    rather than direct array access.  this would be sub-optimal.\r\n\t\tvar jointIndex:number;\r\n\t\tvar joint:SkeletonJoint;\r\n\t\tfor (var i:number; i < this.joints.length; i++) {\r\n\t\t\tjoint = this.joints[i];\r\n\t\t\tif (joint.name == jointName)\r\n\t\t\t\treturn jointIndex;\r\n\t\t\tjointIndex++;\r\n\t\t}\r\n\r\n\t\treturn -1;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic dispose():void\r\n\t{\r\n\t\tthis.joints.length = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic get assetType():string\r\n\t{\r\n\t\treturn Skeleton.assetType;\r\n\t}\r\n}",
    "/**\r\n * Options for setting the animation mode of a vertex animator object.\r\n *\r\n * @see away.animators.VertexAnimator\r\n */\r\nexport class VertexAnimationMode\r\n{\r\n\t/**\r\n\t * Animation mode that adds all outputs from active vertex animation state to form the current vertex animation pose.\r\n\t */\r\n\tpublic static ADDITIVE:string = \"additive\";\r\n\r\n\t/**\r\n\t * Animation mode that picks the output from a single vertex animation state to form the current vertex animation pose.\r\n\t */\r\n\tpublic static ABSOLUTE:string = \"absolute\";\r\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {AnimationNodeBase}\t\t\t\tfrom \"awayjs-display/lib/animators/nodes/AnimationNodeBase\";\r\n\r\n/**\r\n * Provides an abstract base class for nodes with time-based animation data in an animation blend tree.\r\n */\r\nexport class AnimationClipNodeBase extends AnimationNodeBase\r\n{\r\n\tpublic _pLooping:boolean = true;\r\n\tpublic _pTotalDuration:number = 0;\r\n\tpublic _pLastFrame:number;\r\n\r\n\tpublic _pStitchDirty:boolean = true;\r\n\tpublic _pStitchFinalFrame:boolean = false;\r\n\tpublic _pNumFrames:number = 0;\r\n\r\n\tpublic _pDurations:Array<number> = new Array<number>();\r\n\t/*uint*/\r\n\tpublic _pTotalDelta:Vector3D = new Vector3D();\r\n\r\n\tpublic fixedFrameRate:boolean = true;\r\n\r\n\t/**\r\n\t * Determines whether the contents of the animation node have looping characteristics enabled.\r\n\t */\r\n\tpublic get looping():boolean\r\n\t{\r\n\t\treturn this._pLooping;\r\n\t}\r\n\r\n\tpublic set looping(value:boolean)\r\n\t{\r\n\t\tif (this._pLooping == value)\r\n\t\t\treturn;\r\n\r\n\t\tthis._pLooping = value;\r\n\r\n\t\tthis._pStitchDirty = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Defines if looping content blends the final frame of animation data with the first (true) or works on the\r\n\t * assumption that both first and last frames are identical (false). Defaults to false.\r\n\t */\r\n\tpublic get stitchFinalFrame():boolean\r\n\t{\r\n\t\treturn this._pStitchFinalFrame;\r\n\t}\r\n\r\n\tpublic set stitchFinalFrame(value:boolean)\r\n\t{\r\n\t\tif (this._pStitchFinalFrame == value)\r\n\t\t\treturn;\r\n\r\n\t\tthis._pStitchFinalFrame = value;\r\n\r\n\t\tthis._pStitchDirty = true;\r\n\t}\r\n\r\n\tpublic get totalDuration():number\r\n\t{\r\n\t\tif (this._pStitchDirty)\r\n\t\t\tthis._pUpdateStitch();\r\n\r\n\t\treturn this._pTotalDuration;\r\n\t}\r\n\r\n\tpublic get totalDelta():Vector3D\r\n\t{\r\n\t\tif (this._pStitchDirty)\r\n\t\t\tthis._pUpdateStitch();\r\n\r\n\t\treturn this._pTotalDelta;\r\n\t}\r\n\r\n\tpublic get lastFrame():number\r\n\t{\r\n\t\tif (this._pStitchDirty)\r\n\t\t\tthis._pUpdateStitch();\r\n\r\n\t\treturn this._pLastFrame;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a vector of time values representing the duration (in milliseconds) of each animation frame in the clip.\r\n\t */\r\n\tpublic get durations():Array<number>\r\n\t{\r\n\t\treturn this._pDurations;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new <code>AnimationClipNodeBase</code> object.\r\n\t */\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the node's final frame stitch state.\r\n\t *\r\n\t * @see #stitchFinalFrame\r\n\t */\r\n\tpublic _pUpdateStitch():void\r\n\t{\r\n\t\tthis._pStitchDirty = false;\r\n\r\n\t\tthis._pLastFrame = (this._pStitchFinalFrame)? this._pNumFrames : this._pNumFrames - 1;\r\n\r\n\t\tthis._pTotalDuration = 0;\r\n\t\tthis._pTotalDelta.x = 0;\r\n\t\tthis._pTotalDelta.y = 0;\r\n\t\tthis._pTotalDelta.z = 0;\r\n\t}\r\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\r\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {ParticleProperties}\t\t\t\tfrom \"../../animators/data/ParticleProperties\";\r\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\r\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\r\nimport {ParticleAccelerationState}\t\tfrom \"../../animators/states/ParticleAccelerationState\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\r\n\r\n/**\r\n * A particle animation node used to apply a constant acceleration vector to the motion of a particle.\r\n */\r\nexport class ParticleAccelerationNode extends ParticleNodeBase\r\n{\r\n\t/** @private */\r\n\tpublic _acceleration:Vector3D;\r\n\r\n\t/**\r\n\t * Reference for acceleration node properties on a single particle (when in local property mode).\r\n\t * Expects a <code>Vector3D</code> object representing the direction of acceleration on the particle.\r\n\t */\r\n\tpublic static ACCELERATION_VECTOR3D:string = \"AccelerationVector3D\";\r\n\r\n\t/**\r\n\t * Creates a new <code>ParticleAccelerationNode</code>\r\n\t *\r\n\t * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\r\n\t * @param    [optional] acceleration    Defines the default acceleration vector of the node, used when in global mode.\r\n\t */\r\n\tconstructor(mode:number, acceleration:Vector3D = null)\r\n\t{\r\n\t\tsuper(\"ParticleAcceleration\", mode, 3);\r\n\r\n\t\tthis._pStateClass = ParticleAccelerationState;\r\n\r\n\t\tthis._acceleration = acceleration || new Vector3D();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAGALVertexCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\r\n\t{\r\n\t\tvar accelerationValue:ShaderRegisterElement = (this._pMode == ParticlePropertiesMode.GLOBAL)? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\r\n\t\tanimationRegisterData.setRegisterIndex(this, ParticleAccelerationState.ACCELERATION_INDEX, accelerationValue.index);\r\n\r\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\tregisterCache.addVertexTempUsages(temp, 1);\r\n\r\n\t\tvar code:string = \"mul \" + temp + \",\" + animationRegisterData.vertexTime + \",\" + accelerationValue + \"\\n\";\r\n\r\n\t\tif (animationSet.needVelocity) {\r\n\t\t\tvar temp2:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\t\tcode += \"mul \" + temp2 + \",\" + temp + \",\" + animationRegisterData.vertexTwoConst + \"\\n\";\r\n\t\t\tcode += \"add \" + animationRegisterData.velocityTarget + \".xyz,\" + temp2 + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz\\n\";\r\n\t\t}\r\n\t\tregisterCache.removeVertexTempUsage(temp);\r\n\r\n\t\tcode += \"mul \" + temp + \",\" + temp + \",\" + animationRegisterData.vertexTime + \"\\n\";\r\n\t\tcode += \"add \" + animationRegisterData.positionTarget + \".xyz,\" + temp + \",\" + animationRegisterData.positionTarget + \".xyz\\n\";\r\n\t\treturn code;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAnimationState(animator:AnimatorBase):ParticleAccelerationState\r\n\t{\r\n\t\treturn <ParticleAccelerationState> animator.getAnimationState(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iGeneratePropertyOfOneParticle(param:ParticleProperties):void\r\n\t{\r\n\t\tvar tempAcceleration:Vector3D = param[ParticleAccelerationNode.ACCELERATION_VECTOR3D];\r\n\t\tif (!tempAcceleration)\r\n\t\t\tthrow new Error(\"there is no \" + ParticleAccelerationNode.ACCELERATION_VECTOR3D + \" in param!\");\r\n\r\n\t\tthis._pOneData[0] = tempAcceleration.x/2;\r\n\t\tthis._pOneData[1] = tempAcceleration.y/2;\r\n\t\tthis._pOneData[2] = tempAcceleration.z/2;\r\n\t}\r\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\r\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {ParticleProperties}\t\t\t\tfrom \"../../animators/data/ParticleProperties\";\r\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\r\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\r\nimport {ParticleBezierCurveState}\t\t\tfrom \"../../animators/states/ParticleBezierCurveState\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\r\n/**\r\n * A particle animation node used to control the position of a particle over time along a bezier curve.\r\n */\r\nexport class ParticleBezierCurveNode extends ParticleNodeBase\r\n{\r\n\t/** @private */\r\n\tpublic _iControlPoint:Vector3D;\r\n\t/** @private */\r\n\tpublic _iEndPoint:Vector3D;\r\n\r\n\t/**\r\n\t * Reference for bezier curve node properties on a single particle (when in local property mode).\r\n\t * Expects a <code>Vector3D</code> object representing the control point position (0, 1, 2) of the curve.\r\n\t */\r\n\tpublic static BEZIER_CONTROL_VECTOR3D:string = \"BezierControlVector3D\";\r\n\r\n\t/**\r\n\t * Reference for bezier curve node properties on a single particle (when in local property mode).\r\n\t * Expects a <code>Vector3D</code> object representing the end point position (0, 1, 2) of the curve.\r\n\t */\r\n\tpublic static BEZIER_END_VECTOR3D:string = \"BezierEndVector3D\";\r\n\r\n\t/**\r\n\t * Creates a new <code>ParticleBezierCurveNode</code>\r\n\t *\r\n\t * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\r\n\t * @param    [optional] controlPoint    Defines the default control point of the node, used when in global mode.\r\n\t * @param    [optional] endPoint        Defines the default end point of the node, used when in global mode.\r\n\t */\r\n\tconstructor(mode:number, controlPoint:Vector3D = null, endPoint:Vector3D = null)\r\n\t{\r\n\t\tsuper(\"ParticleBezierCurve\", mode, 6);\r\n\r\n\t\tthis._pStateClass = ParticleBezierCurveState;\r\n\r\n\t\tthis._iControlPoint = controlPoint || new Vector3D();\r\n\t\tthis._iEndPoint = endPoint || new Vector3D();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAGALVertexCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\r\n\t{\r\n\t\tvar controlValue:ShaderRegisterElement = (this._pMode == ParticlePropertiesMode.GLOBAL)? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\r\n\t\tanimationRegisterData.setRegisterIndex(this, ParticleBezierCurveState.BEZIER_CONTROL_INDEX, controlValue.index);\r\n\r\n\t\tvar endValue:ShaderRegisterElement = (this._pMode == ParticlePropertiesMode.GLOBAL)? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\r\n\t\tanimationRegisterData.setRegisterIndex(this, ParticleBezierCurveState.BEZIER_END_INDEX, endValue.index);\r\n\r\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\tvar rev_time:ShaderRegisterElement = new ShaderRegisterElement(temp.regName, temp.index, 0);\r\n\t\tvar time_2:ShaderRegisterElement = new ShaderRegisterElement(temp.regName, temp.index, 1);\r\n\t\tvar time_temp:ShaderRegisterElement = new ShaderRegisterElement(temp.regName, temp.index, 2);\r\n\t\tregisterCache.addVertexTempUsages(temp, 1);\r\n\t\tvar temp2:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\tvar distance:ShaderRegisterElement = new ShaderRegisterElement(temp2.regName, temp2.index);\r\n\t\tregisterCache.removeVertexTempUsage(temp);\r\n\r\n\t\tvar code:string = \"\";\r\n\t\tcode += \"sub \" + rev_time + \",\" + animationRegisterData.vertexOneConst + \",\" + animationRegisterData.vertexLife + \"\\n\";\r\n\t\tcode += \"mul \" + time_2 + \",\" + animationRegisterData.vertexLife + \",\" + animationRegisterData.vertexLife + \"\\n\";\r\n\r\n\t\tcode += \"mul \" + time_temp + \",\" + animationRegisterData.vertexLife + \",\" + rev_time + \"\\n\";\r\n\t\tcode += \"mul \" + time_temp + \",\" + time_temp + \",\" + animationRegisterData.vertexTwoConst + \"\\n\";\r\n\t\tcode += \"mul \" + distance + \".xyz,\" + time_temp + \",\" + controlValue + \"\\n\";\r\n\t\tcode += \"add \" + animationRegisterData.positionTarget + \".xyz,\" + distance + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\r\n\t\tcode += \"mul \" + distance + \".xyz,\" + time_2 + \",\" + endValue + \"\\n\";\r\n\t\tcode += \"add \" + animationRegisterData.positionTarget + \".xyz,\" + distance + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\r\n\r\n\t\tif (animationSet.needVelocity) {\r\n\t\t\tcode += \"mul \" + time_2 + \",\" + animationRegisterData.vertexLife + \",\" + animationRegisterData.vertexTwoConst + \"\\n\";\r\n\t\t\tcode += \"sub \" + time_temp + \",\" + animationRegisterData.vertexOneConst + \",\" + time_2 + \"\\n\";\r\n\t\t\tcode += \"mul \" + time_temp + \",\" + animationRegisterData.vertexTwoConst + \",\" + time_temp + \"\\n\";\r\n\t\t\tcode += \"mul \" + distance + \".xyz,\" + controlValue + \",\" + time_temp + \"\\n\";\r\n\t\t\tcode += \"add \" + animationRegisterData.velocityTarget + \".xyz,\" + distance + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz\\n\";\r\n\t\t\tcode += \"mul \" + distance + \".xyz,\" + endValue + \",\" + time_2 + \"\\n\";\r\n\t\t\tcode += \"add \" + animationRegisterData.velocityTarget + \".xyz,\" + distance + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz\\n\";\r\n\t\t}\r\n\r\n\t\treturn code;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAnimationState(animator:AnimatorBase):ParticleBezierCurveState\r\n\t{\r\n\t\treturn <ParticleBezierCurveState> animator.getAnimationState(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iGeneratePropertyOfOneParticle(param:ParticleProperties):void\r\n\t{\r\n\t\tvar bezierControl:Vector3D = param[ParticleBezierCurveNode.BEZIER_CONTROL_VECTOR3D];\r\n\t\tif (!bezierControl)\r\n\t\t\tthrow new Error(\"there is no \" + ParticleBezierCurveNode.BEZIER_CONTROL_VECTOR3D + \" in param!\");\r\n\r\n\t\tvar bezierEnd:Vector3D = param[ParticleBezierCurveNode.BEZIER_END_VECTOR3D];\r\n\t\tif (!bezierEnd)\r\n\t\t\tthrow new Error(\"there is no \" + ParticleBezierCurveNode.BEZIER_END_VECTOR3D + \" in param!\");\r\n\r\n\t\tthis._pOneData[0] = bezierControl.x;\r\n\t\tthis._pOneData[1] = bezierControl.y;\r\n\t\tthis._pOneData[2] = bezierControl.z;\r\n\t\tthis._pOneData[3] = bezierEnd.x;\r\n\t\tthis._pOneData[4] = bezierEnd.y;\r\n\t\tthis._pOneData[5] = bezierEnd.z;\r\n\t}\r\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\r\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\r\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\r\nimport {ParticleBillboardState}\t\t\tfrom \"../../animators/states/ParticleBillboardState\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\r\n\r\n/**\r\n * A particle animation node that controls the rotation of a particle to always face the camera.\r\n */\r\nexport class ParticleBillboardNode extends ParticleNodeBase\r\n{\r\n\t/** @private */\r\n\tpublic _iBillboardAxis:Vector3D;\r\n\r\n\t/**\r\n\t * Creates a new <code>ParticleBillboardNode</code>\r\n\t */\r\n\tconstructor(billboardAxis:Vector3D = null)\r\n\t{\r\n\t\tsuper(\"ParticleBillboard\", ParticlePropertiesMode.GLOBAL, 0, 4);\r\n\r\n\t\tthis._pStateClass = ParticleBillboardState;\r\n\r\n\t\tthis._iBillboardAxis = billboardAxis;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAGALVertexCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\r\n\t{\r\n\t\tvar rotationMatrixRegister:ShaderRegisterElement = registerCache.getFreeVertexConstant();\r\n\t\tanimationRegisterData.setRegisterIndex(this, ParticleBillboardState.MATRIX_INDEX, rotationMatrixRegister.index);\r\n\t\tregisterCache.getFreeVertexConstant();\r\n\t\tregisterCache.getFreeVertexConstant();\r\n\t\tregisterCache.getFreeVertexConstant();\r\n\r\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\r\n\t\tvar code:string = \"m33 \" + temp + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \",\" + rotationMatrixRegister + \"\\n\" +\r\n\t\t\t\t\t\t  \"mov \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp + \"\\n\";\r\n\r\n\t\tvar shaderRegisterElement:ShaderRegisterElement;\r\n\t\tfor (var i:number = 0; i < animationRegisterData.rotationRegisters.length; i++) {\r\n\t\t\tshaderRegisterElement = animationRegisterData.rotationRegisters[i];\r\n\t\t\tcode += \"m33 \" + temp + \".xyz,\" + shaderRegisterElement + \",\" + rotationMatrixRegister + \"\\n\" +\r\n\t\t\t\t\t\"mov \" + shaderRegisterElement + \".xyz,\" + shaderRegisterElement + \"\\n\";\r\n\t\t}\r\n\r\n\t\treturn code;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAnimationState(animator:AnimatorBase):ParticleBillboardState\r\n\t{\r\n\t\treturn <ParticleBillboardState> animator.getAnimationState(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iProcessAnimationSetting(particleAnimationSet:ParticleAnimationSet):void\r\n\t{\r\n\t\tparticleAnimationSet.hasBillboard = true;\r\n\t}\r\n}",
    "import {ColorTransform}\t\t\t\t\tfrom \"awayjs-core/lib/geom/ColorTransform\";\r\n\r\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\r\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {ParticleProperties}\t\t\t\tfrom \"../../animators/data/ParticleProperties\";\r\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\r\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\r\nimport {ParticleColorState}\t\t\t\tfrom \"../../animators/states/ParticleColorState\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\r\n\r\n/**\r\n * A particle animation node used to control the color variation of a particle over time.\r\n */\r\nexport class ParticleColorNode extends ParticleNodeBase\r\n{\r\n\t//default values used when creating states\r\n\t/** @private */\r\n\tpublic _iUsesMultiplier:boolean;\r\n\t/** @private */\r\n\tpublic _iUsesOffset:boolean;\r\n\t/** @private */\r\n\tpublic _iUsesCycle:boolean;\r\n\t/** @private */\r\n\tpublic _iUsesPhase:boolean;\r\n\t/** @private */\r\n\tpublic _iStartColor:ColorTransform;\r\n\t/** @private */\r\n\tpublic _iEndColor:ColorTransform;\r\n\t/** @private */\r\n\tpublic _iCycleDuration:number;\r\n\t/** @private */\r\n\tpublic _iCyclePhase:number;\r\n\r\n\t/**\r\n\t * Reference for color node properties on a single particle (when in local property mode).\r\n\t * Expects a <code>ColorTransform</code> object representing the start color transform applied to the particle.\r\n\t */\r\n\tpublic static COLOR_START_COLORTRANSFORM:string = \"ColorStartColorTransform\";\r\n\r\n\t/**\r\n\t * Reference for color node properties on a single particle (when in local property mode).\r\n\t * Expects a <code>ColorTransform</code> object representing the end color transform applied to the particle.\r\n\t */\r\n\tpublic static COLOR_END_COLORTRANSFORM:string = \"ColorEndColorTransform\";\r\n\r\n\t/**\r\n\t * Creates a new <code>ParticleColorNode</code>\r\n\t *\r\n\t * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\r\n\t * @param    [optional] usesMultiplier  Defines whether the node uses multiplier data in the shader for its color transformations. Defaults to true.\r\n\t * @param    [optional] usesOffset      Defines whether the node uses offset data in the shader for its color transformations. Defaults to true.\r\n\t * @param    [optional] usesCycle       Defines whether the node uses the <code>cycleDuration</code> property in the shader to calculate the period of the animation independent of particle duration. Defaults to false.\r\n\t * @param    [optional] usesPhase       Defines whether the node uses the <code>cyclePhase</code> property in the shader to calculate a starting offset to the cycle rotation of the particle. Defaults to false.\r\n\t * @param    [optional] startColor      Defines the default start color transform of the node, when in global mode.\r\n\t * @param    [optional] endColor        Defines the default end color transform of the node, when in global mode.\r\n\t * @param    [optional] cycleDuration   Defines the duration of the animation in seconds, used as a period independent of particle duration when in global mode. Defaults to 1.\r\n\t * @param    [optional] cyclePhase      Defines the phase of the cycle in degrees, used as the starting offset of the cycle when in global mode. Defaults to 0.\r\n\t */\r\n\tconstructor(mode:number, usesMultiplier:boolean = true, usesOffset:boolean = true, usesCycle:boolean = false, usesPhase:boolean = false, startColor:ColorTransform = null, endColor:ColorTransform = null, cycleDuration:number = 1, cyclePhase:number = 0)\r\n\t{\r\n\t\tsuper(\"ParticleColor\", mode, (usesMultiplier && usesOffset)? 16 : 8, ParticleAnimationSet.COLOR_PRIORITY);\r\n\r\n\t\tthis._pStateClass = ParticleColorState;\r\n\r\n\t\tthis._iUsesMultiplier = usesMultiplier;\r\n\t\tthis._iUsesOffset = usesOffset;\r\n\t\tthis._iUsesCycle = usesCycle;\r\n\t\tthis._iUsesPhase = usesPhase;\r\n\r\n\t\tthis._iStartColor = startColor || new ColorTransform();\r\n\t\tthis._iEndColor = endColor || new ColorTransform();\r\n\t\tthis._iCycleDuration = cycleDuration;\r\n\t\tthis._iCyclePhase = cyclePhase;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAGALVertexCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\r\n\t{\r\n\t\tvar code:string = \"\";\r\n\t\tif (shader.usesFragmentAnimation) {\r\n\t\t\tvar temp:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\r\n\t\t\tif (this._iUsesCycle) {\r\n\t\t\t\tvar cycleConst:ShaderRegisterElement = registerCache.getFreeVertexConstant();\r\n\t\t\t\tanimationRegisterData.setRegisterIndex(this, ParticleColorState.CYCLE_INDEX, cycleConst.index);\r\n\r\n\t\t\t\tregisterCache.addVertexTempUsages(temp, 1);\r\n\t\t\t\tvar sin:ShaderRegisterElement = registerCache.getFreeVertexSingleTemp();\r\n\t\t\t\tregisterCache.removeVertexTempUsage(temp);\r\n\r\n\t\t\t\tcode += \"mul \" + sin + \",\" + animationRegisterData.vertexTime + \",\" + cycleConst + \".x\\n\";\r\n\r\n\t\t\t\tif (this._iUsesPhase)\r\n\t\t\t\t\tcode += \"add \" + sin + \",\" + sin + \",\" + cycleConst + \".y\\n\";\r\n\r\n\t\t\t\tcode += \"sin \" + sin + \",\" + sin + \"\\n\";\r\n\t\t\t}\r\n\r\n\t\t\tif (this._iUsesMultiplier) {\r\n\t\t\t\tvar startMultiplierValue:ShaderRegisterElement = (this._pMode == ParticlePropertiesMode.GLOBAL)? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\r\n\t\t\t\tvar deltaMultiplierValue:ShaderRegisterElement = (this._pMode == ParticlePropertiesMode.GLOBAL)? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\r\n\r\n\t\t\t\tanimationRegisterData.setRegisterIndex(this, ParticleColorState.START_MULTIPLIER_INDEX, startMultiplierValue.index);\r\n\t\t\t\tanimationRegisterData.setRegisterIndex(this, ParticleColorState.DELTA_MULTIPLIER_INDEX, deltaMultiplierValue.index);\r\n\r\n\t\t\t\tcode += \"mul \" + temp + \",\" + deltaMultiplierValue + \",\" + (this._iUsesCycle? sin : animationRegisterData.vertexLife) + \"\\n\";\r\n\t\t\t\tcode += \"add \" + temp + \",\" + temp + \",\" + startMultiplierValue + \"\\n\";\r\n\t\t\t\tcode += \"mul \" + animationRegisterData.colorMulTarget + \",\" + temp + \",\" + animationRegisterData.colorMulTarget + \"\\n\";\r\n\t\t\t}\r\n\r\n\t\t\tif (this._iUsesOffset) {\r\n\t\t\t\tvar startOffsetValue:ShaderRegisterElement = (this._pMode == ParticlePropertiesMode.LOCAL_STATIC)? registerCache.getFreeVertexAttribute() : registerCache.getFreeVertexConstant();\r\n\t\t\t\tvar deltaOffsetValue:ShaderRegisterElement = (this._pMode == ParticlePropertiesMode.LOCAL_STATIC)? registerCache.getFreeVertexAttribute() : registerCache.getFreeVertexConstant();\r\n\r\n\t\t\t\tanimationRegisterData.setRegisterIndex(this, ParticleColorState.START_OFFSET_INDEX, startOffsetValue.index);\r\n\t\t\t\tanimationRegisterData.setRegisterIndex(this, ParticleColorState.DELTA_OFFSET_INDEX, deltaOffsetValue.index);\r\n\r\n\t\t\t\tcode += \"mul \" + temp + \",\" + deltaOffsetValue + \",\" + (this._iUsesCycle? sin : animationRegisterData.vertexLife) + \"\\n\";\r\n\t\t\t\tcode += \"add \" + temp + \",\" + temp + \",\" + startOffsetValue + \"\\n\";\r\n\t\t\t\tcode += \"add \" + animationRegisterData.colorAddTarget + \",\" + temp + \",\" + animationRegisterData.colorAddTarget + \"\\n\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn code;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAnimationState(animator:AnimatorBase):ParticleColorState\r\n\t{\r\n\t\treturn <ParticleColorState> animator.getAnimationState(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iProcessAnimationSetting(particleAnimationSet:ParticleAnimationSet):void\r\n\t{\r\n\t\tif (this._iUsesMultiplier)\r\n\t\t\tparticleAnimationSet.hasColorMulNode = true;\r\n\t\tif (this._iUsesOffset)\r\n\t\t\tparticleAnimationSet.hasColorAddNode = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iGeneratePropertyOfOneParticle(param:ParticleProperties):void\r\n\t{\r\n\t\tvar startColor:ColorTransform = param[ParticleColorNode.COLOR_START_COLORTRANSFORM];\r\n\t\tif (!startColor)\r\n\t\t\tthrow(new Error(\"there is no \" + ParticleColorNode.COLOR_START_COLORTRANSFORM + \" in param!\"));\r\n\r\n\t\tvar endColor:ColorTransform = param[ParticleColorNode.COLOR_END_COLORTRANSFORM];\r\n\t\tif (!endColor)\r\n\t\t\tthrow(new Error(\"there is no \" + ParticleColorNode.COLOR_END_COLORTRANSFORM + \" in param!\"));\r\n\r\n\t\tvar i:number = 0;\r\n\r\n\t\tif (!this._iUsesCycle) {\r\n\t\t\t//multiplier\r\n\t\t\tif (this._iUsesMultiplier) {\r\n\t\t\t\tthis._pOneData[i++] = startColor.redMultiplier;\r\n\t\t\t\tthis._pOneData[i++] = startColor.greenMultiplier;\r\n\t\t\t\tthis._pOneData[i++] = startColor.blueMultiplier;\r\n\t\t\t\tthis._pOneData[i++] = startColor.alphaMultiplier;\r\n\t\t\t\tthis._pOneData[i++] = endColor.redMultiplier - startColor.redMultiplier;\r\n\t\t\t\tthis._pOneData[i++] = endColor.greenMultiplier - startColor.greenMultiplier;\r\n\t\t\t\tthis._pOneData[i++] = endColor.blueMultiplier - startColor.blueMultiplier;\r\n\t\t\t\tthis._pOneData[i++] = endColor.alphaMultiplier - startColor.alphaMultiplier;\r\n\t\t\t}\r\n\r\n\t\t\t//offset\r\n\t\t\tif (this._iUsesOffset) {\r\n\t\t\t\tthis._pOneData[i++] = startColor.redOffset/255;\r\n\t\t\t\tthis._pOneData[i++] = startColor.greenOffset/255;\r\n\t\t\t\tthis._pOneData[i++] = startColor.blueOffset/255;\r\n\t\t\t\tthis._pOneData[i++] = startColor.alphaOffset/255;\r\n\t\t\t\tthis._pOneData[i++] = (endColor.redOffset - startColor.redOffset)/255;\r\n\t\t\t\tthis._pOneData[i++] = (endColor.greenOffset - startColor.greenOffset)/255;\r\n\t\t\t\tthis._pOneData[i++] = (endColor.blueOffset - startColor.blueOffset)/255;\r\n\t\t\t\tthis._pOneData[i++] = (endColor.alphaOffset - startColor.alphaOffset)/255;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t//multiplier\r\n\t\t\tif (this._iUsesMultiplier) {\r\n\t\t\t\tthis._pOneData[i++] = (startColor.redMultiplier + endColor.redMultiplier)/2;\r\n\t\t\t\tthis._pOneData[i++] = (startColor.greenMultiplier + endColor.greenMultiplier)/2;\r\n\t\t\t\tthis._pOneData[i++] = (startColor.blueMultiplier + endColor.blueMultiplier)/2;\r\n\t\t\t\tthis._pOneData[i++] = (startColor.alphaMultiplier + endColor.alphaMultiplier)/2;\r\n\t\t\t\tthis._pOneData[i++] = (startColor.redMultiplier - endColor.redMultiplier)/2;\r\n\t\t\t\tthis._pOneData[i++] = (startColor.greenMultiplier - endColor.greenMultiplier)/2;\r\n\t\t\t\tthis._pOneData[i++] = (startColor.blueMultiplier - endColor.blueMultiplier)/2;\r\n\t\t\t\tthis._pOneData[i++] = (startColor.alphaMultiplier - endColor.alphaMultiplier)/2;\r\n\t\t\t}\r\n\r\n\t\t\t//offset\r\n\t\t\tif (this._iUsesOffset) {\r\n\t\t\t\tthis._pOneData[i++] = (startColor.redOffset + endColor.redOffset)/(255*2);\r\n\t\t\t\tthis._pOneData[i++] = (startColor.greenOffset + endColor.greenOffset)/(255*2);\r\n\t\t\t\tthis._pOneData[i++] = (startColor.blueOffset + endColor.blueOffset)/(255*2);\r\n\t\t\t\tthis._pOneData[i++] = (startColor.alphaOffset + endColor.alphaOffset)/(255*2);\r\n\t\t\t\tthis._pOneData[i++] = (startColor.redOffset - endColor.redOffset)/(255*2);\r\n\t\t\t\tthis._pOneData[i++] = (startColor.greenOffset - endColor.greenOffset)/(255*2);\r\n\t\t\t\tthis._pOneData[i++] = (startColor.blueOffset - endColor.blueOffset)/(255*2);\r\n\t\t\t\tthis._pOneData[i++] = (startColor.alphaOffset - endColor.alphaOffset)/(255*2);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n}",
    "import {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\r\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\r\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\r\nimport {ParticleFollowState}\t\t\t\tfrom \"../../animators/states/ParticleFollowState\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\r\n\r\n/**\r\n * A particle animation node used to create a follow behaviour on a particle system.\r\n */\r\nexport class ParticleFollowNode extends ParticleNodeBase\r\n{\r\n\t/** @private */\r\n\tpublic _iUsesPosition:boolean;\r\n\r\n\t/** @private */\r\n\tpublic _iUsesRotation:boolean;\r\n\r\n\t/** @private */\r\n\tpublic _iSmooth:boolean;\r\n\r\n\t/**\r\n\t * Creates a new <code>ParticleFollowNode</code>\r\n\t *\r\n\t * @param    [optional] usesPosition     Defines wehether the individual particle reacts to the position of the target.\r\n\t * @param    [optional] usesRotation     Defines wehether the individual particle reacts to the rotation of the target.\r\n\t * @param    [optional] smooth     Defines wehether the state calculate the interpolated value.\r\n\t */\r\n\tconstructor(usesPosition:boolean = true, usesRotation:boolean = true, smooth:boolean = false)\r\n\t{\r\n\t\tsuper(\"ParticleFollow\", ParticlePropertiesMode.LOCAL_DYNAMIC, (usesPosition && usesRotation)? 6 : 3, ParticleAnimationSet.POST_PRIORITY);\r\n\r\n\t\tthis._pStateClass = ParticleFollowState;\r\n\r\n\t\tthis._iUsesPosition = usesPosition;\r\n\t\tthis._iUsesRotation = usesRotation;\r\n\t\tthis._iSmooth = smooth;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAGALVertexCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\r\n\t{\r\n\t\t//TODO: use Quaternion to implement this function\r\n\t\tvar code:string = \"\";\r\n\t\tif (this._iUsesRotation) {\r\n\t\t\tvar rotationAttribute:ShaderRegisterElement = registerCache.getFreeVertexAttribute();\r\n\t\t\tanimationRegisterData.setRegisterIndex(this, ParticleFollowState.FOLLOW_ROTATION_INDEX, rotationAttribute.index);\r\n\r\n\t\t\tvar temp1:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\t\tregisterCache.addVertexTempUsages(temp1, 1);\r\n\t\t\tvar temp2:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\t\tregisterCache.addVertexTempUsages(temp2, 1);\r\n\t\t\tvar temp3:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\r\n\t\t\tvar temp4:ShaderRegisterElement;\r\n\t\t\tif (animationSet.hasBillboard) {\r\n\t\t\t\tregisterCache.addVertexTempUsages(temp3, 1);\r\n\t\t\t\ttemp4 = registerCache.getFreeVertexVectorTemp();\r\n\t\t\t}\r\n\r\n\t\t\tregisterCache.removeVertexTempUsage(temp1);\r\n\t\t\tregisterCache.removeVertexTempUsage(temp2);\r\n\t\t\tif (animationSet.hasBillboard)\r\n\t\t\t\tregisterCache.removeVertexTempUsage(temp3);\r\n\r\n\t\t\tvar len:number = animationRegisterData.rotationRegisters.length;\r\n\t\t\tvar i:number;\r\n\r\n\t\t\t//x axis\r\n\t\t\tcode += \"mov \" + temp1 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n\t\t\tcode += \"mov \" + temp1 + \".x,\" + animationRegisterData.vertexOneConst + \"\\n\";\r\n\t\t\tcode += \"mov \" + temp3 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n\t\t\tcode += \"sin \" + temp3 + \".y,\" + rotationAttribute + \".x\\n\";\r\n\t\t\tcode += \"cos \" + temp3 + \".z,\" + rotationAttribute + \".x\\n\";\r\n\t\t\tcode += \"mov \" + temp2 + \".x,\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n\t\t\tcode += \"mov \" + temp2 + \".y,\" + temp3 + \".z\\n\";\r\n\t\t\tcode += \"neg \" + temp2 + \".z,\" + temp3 + \".y\\n\";\r\n\r\n\t\t\tif (animationSet.hasBillboard)\r\n\t\t\t\tcode += \"m33 \" + temp4 + \".xyz,\" + animationRegisterData.positionTarget + \".xyz,\" + temp1 + \"\\n\";\r\n\t\t\telse {\r\n\t\t\t\tcode += \"m33 \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp1 + \"\\n\";\r\n\t\t\t\tfor (i = 0; i < len; i++)\r\n\t\t\t\t\tcode += \"m33 \" + animationRegisterData.rotationRegisters[i] + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \",\" + temp1 + \"\\n\";\r\n\t\t\t}\r\n\r\n\t\t\t//y axis\r\n\t\t\tcode += \"mov \" + temp1 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n\t\t\tcode += \"cos \" + temp1 + \".x,\" + rotationAttribute + \".y\\n\";\r\n\t\t\tcode += \"sin \" + temp1 + \".z,\" + rotationAttribute + \".y\\n\";\r\n\t\t\tcode += \"mov \" + temp2 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n\t\t\tcode += \"mov \" + temp2 + \".y,\" + animationRegisterData.vertexOneConst + \"\\n\";\r\n\t\t\tcode += \"mov \" + temp3 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n\t\t\tcode += \"neg \" + temp3 + \".x,\" + temp1 + \".z\\n\";\r\n\t\t\tcode += \"mov \" + temp3 + \".z,\" + temp1 + \".x\\n\";\r\n\r\n\t\t\tif (animationSet.hasBillboard)\r\n\t\t\t\tcode += \"m33 \" + temp4 + \".xyz,\" + temp4 + \".xyz,\" + temp1 + \"\\n\";\r\n\t\t\telse {\r\n\t\t\t\tcode += \"m33 \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp1 + \"\\n\";\r\n\t\t\t\tfor (i = 0; i < len; i++)\r\n\t\t\t\t\tcode += \"m33 \" + animationRegisterData.rotationRegisters[i] + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \",\" + temp1 + \"\\n\";\r\n\t\t\t}\r\n\r\n\t\t\t//z axis\r\n\t\t\tcode += \"mov \" + temp2 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n\t\t\tcode += \"sin \" + temp2 + \".x,\" + rotationAttribute + \".z\\n\";\r\n\t\t\tcode += \"cos \" + temp2 + \".y,\" + rotationAttribute + \".z\\n\";\r\n\t\t\tcode += \"mov \" + temp1 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n\t\t\tcode += \"mov \" + temp1 + \".x,\" + temp2 + \".y\\n\";\r\n\t\t\tcode += \"neg \" + temp1 + \".y,\" + temp2 + \".x\\n\";\r\n\t\t\tcode += \"mov \" + temp3 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n\t\t\tcode += \"mov \" + temp3 + \".z,\" + animationRegisterData.vertexOneConst + \"\\n\";\r\n\r\n\t\t\tif (animationSet.hasBillboard) {\r\n\t\t\t\tcode += \"m33 \" + temp4 + \".xyz,\" + temp4 + \".xyz,\" + temp1 + \"\\n\";\r\n\t\t\t\tcode += \"sub \" + temp4 + \".xyz,\" + temp4 + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\r\n\t\t\t\tcode += \"add \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp4 + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz\\n\";\r\n\t\t\t} else {\r\n\t\t\t\tcode += \"m33 \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp1 + \"\\n\";\r\n\t\t\t\tfor (i = 0; i < len; i++)\r\n\t\t\t\t\tcode += \"m33 \" + animationRegisterData.rotationRegisters[i] + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \",\" + temp1 + \"\\n\";\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif (this._iUsesPosition) {\r\n\t\t\tvar positionAttribute:ShaderRegisterElement = registerCache.getFreeVertexAttribute();\r\n\t\t\tanimationRegisterData.setRegisterIndex(this, ParticleFollowState.FOLLOW_POSITION_INDEX, positionAttribute.index);\r\n\t\t\tcode += \"add \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + positionAttribute + \",\" + animationRegisterData.scaleAndRotateTarget + \".xyz\\n\";\r\n\t\t}\r\n\r\n\t\treturn code;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAnimationState(animator:AnimatorBase):ParticleFollowState\r\n\t{\r\n\t\treturn <ParticleFollowState> animator.getAnimationState(this);\r\n\t}\r\n}",
    "import {ColorTransform}\t\t\t\t\tfrom \"awayjs-core/lib/geom/ColorTransform\";\r\n\r\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {ParticleProperties}\t\t\t\tfrom \"../../animators/data/ParticleProperties\";\r\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\r\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\r\nimport {ParticleInitialColorState}\t\tfrom \"../../animators/states/ParticleInitialColorState\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\r\n\r\n/**\r\n *\r\n */\r\nexport class ParticleInitialColorNode extends ParticleNodeBase\r\n{\r\n\t//default values used when creating states\r\n\t/** @private */\r\n\tpublic _iUsesMultiplier:boolean;\r\n\t/** @private */\r\n\tpublic _iUsesOffset:boolean;\r\n\t/** @private */\r\n\tpublic _iInitialColor:ColorTransform;\r\n\r\n\t/**\r\n\t * Reference for color node properties on a single particle (when in local property mode).\r\n\t * Expects a <code>ColorTransform</code> object representing the color transform applied to the particle.\r\n\t */\r\n\tpublic static COLOR_INITIAL_COLORTRANSFORM:string = \"ColorInitialColorTransform\";\r\n\r\n\tconstructor(mode:number, usesMultiplier:boolean = true, usesOffset:boolean = false, initialColor:ColorTransform = null)\r\n\t{\r\n\t\tsuper(\"ParticleInitialColor\", mode, (usesMultiplier && usesOffset)? 8 : 4, ParticleAnimationSet.COLOR_PRIORITY);\r\n\r\n\t\tthis._pStateClass = ParticleInitialColorState;\r\n\r\n\t\tthis._iUsesMultiplier = usesMultiplier;\r\n\t\tthis._iUsesOffset = usesOffset;\r\n\t\tthis._iInitialColor = initialColor || new ColorTransform();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAGALVertexCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\r\n\t{\r\n\t\tvar code:string = \"\";\r\n\t\tif (shader.usesFragmentAnimation) {\r\n\r\n\t\t\tif (this._iUsesMultiplier) {\r\n\t\t\t\tvar multiplierValue:ShaderRegisterElement = (this._pMode == ParticlePropertiesMode.GLOBAL)? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\r\n\t\t\t\tanimationRegisterData.setRegisterIndex(this, ParticleInitialColorState.MULTIPLIER_INDEX, multiplierValue.index);\r\n\r\n\t\t\t\tcode += \"mul \" + animationRegisterData.colorMulTarget + \",\" + multiplierValue + \",\" + animationRegisterData.colorMulTarget + \"\\n\";\r\n\t\t\t}\r\n\r\n\t\t\tif (this._iUsesOffset) {\r\n\t\t\t\tvar offsetValue:ShaderRegisterElement = (this._pMode == ParticlePropertiesMode.LOCAL_STATIC)? registerCache.getFreeVertexAttribute() : registerCache.getFreeVertexConstant();\r\n\t\t\t\tanimationRegisterData.setRegisterIndex(this, ParticleInitialColorState.OFFSET_INDEX, offsetValue.index);\r\n\r\n\t\t\t\tcode += \"add \" + animationRegisterData.colorAddTarget + \",\" + offsetValue + \",\" + animationRegisterData.colorAddTarget + \"\\n\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn code;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iProcessAnimationSetting(particleAnimationSet:ParticleAnimationSet):void\r\n\t{\r\n\t\tif (this._iUsesMultiplier)\r\n\t\t\tparticleAnimationSet.hasColorMulNode = true;\r\n\t\tif (this._iUsesOffset)\r\n\t\t\tparticleAnimationSet.hasColorAddNode = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iGeneratePropertyOfOneParticle(param:ParticleProperties):void\r\n\t{\r\n\t\tvar initialColor:ColorTransform = param[ParticleInitialColorNode.COLOR_INITIAL_COLORTRANSFORM];\r\n\t\tif (!initialColor)\r\n\t\t\tthrow(new Error(\"there is no \" + ParticleInitialColorNode.COLOR_INITIAL_COLORTRANSFORM + \" in param!\"));\r\n\r\n\t\tvar i:number = 0;\r\n\r\n\t\t//multiplier\r\n\t\tif (this._iUsesMultiplier) {\r\n\t\t\tthis._pOneData[i++] = initialColor.redMultiplier;\r\n\t\t\tthis._pOneData[i++] = initialColor.greenMultiplier;\r\n\t\t\tthis._pOneData[i++] = initialColor.blueMultiplier;\r\n\t\t\tthis._pOneData[i++] = initialColor.alphaMultiplier;\r\n\t\t}\r\n\t\t//offset\r\n\t\tif (this._iUsesOffset) {\r\n\t\t\tthis._pOneData[i++] = initialColor.redOffset/255;\r\n\t\t\tthis._pOneData[i++] = initialColor.greenOffset/255;\r\n\t\t\tthis._pOneData[i++] = initialColor.blueOffset/255;\r\n\t\t\tthis._pOneData[i++] = initialColor.alphaOffset/255;\r\n\t\t}\r\n\r\n\t}\r\n\r\n}",
    "import {AnimationNodeBase}\t\t\t\tfrom \"awayjs-display/lib/animators/nodes/AnimationNodeBase\";\r\n\r\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {ParticleProperties}\t\t\t\tfrom \"../../animators/data/ParticleProperties\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\r\n\r\n/**\r\n * Provides an abstract base class for particle animation nodes.\r\n */\r\nexport class ParticleNodeBase extends AnimationNodeBase\r\n{\r\n\tprivate _priority:number;\r\n\r\n\tpublic _pMode:number;\r\n\tpublic _pDataLength:number = 3;\r\n\tpublic _pOneData:Array<number>;\r\n\r\n\tpublic _iDataOffset:number;\r\n\r\n\t//modes alias\r\n\tprivate static GLOBAL:string = 'Global';\r\n\tprivate static LOCAL_STATIC:string = 'LocalStatic';\r\n\tprivate static LOCAL_DYNAMIC:string = 'LocalDynamic';\r\n\r\n\t//modes list\r\n\tprivate static MODES:Object =\r\n\t{\r\n\t\t0:ParticleNodeBase.GLOBAL,\r\n\t\t1:ParticleNodeBase.LOCAL_STATIC,\r\n\t\t2:ParticleNodeBase.LOCAL_DYNAMIC\r\n\t};\r\n\r\n\t/**\r\n\t * Returns the property mode of the particle animation node. Typically set in the node constructor\r\n\t *\r\n\t * @see away.animators.ParticlePropertiesMode\r\n\t */\r\n\tpublic get mode():number\r\n\t{\r\n\t\treturn this._pMode;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the priority of the particle animation node, used to order the agal generated in a particle animation set. Set automatically on instantiation.\r\n\t *\r\n\t * @see away.animators.ParticleAnimationSet\r\n\t * @see #getAGALVertexCode\r\n\t */\r\n\tpublic get priority():number\r\n\t{\r\n\t\treturn this._priority;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the length of the data used by the node when in <code>LOCAL_STATIC</code> mode. Used to generate the local static data of the particle animation set.\r\n\t *\r\n\t * @see away.animators.ParticleAnimationSet\r\n\t * @see #getAGALVertexCode\r\n\t */\r\n\tpublic get dataLength():number\r\n\t{\r\n\t\treturn this._pDataLength;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the generated data vector of the node after one particle pass during the generation of all local static data of the particle animation set.\r\n\t *\r\n\t * @see away.animators.ParticleAnimationSet\r\n\t * @see #generatePropertyOfOneParticle\r\n\t */\r\n\tpublic get oneData():Array<number>\r\n\t{\r\n\t\treturn this._pOneData;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new <code>ParticleNodeBase</code> object.\r\n\t *\r\n\t * @param               name            Defines the generic name of the particle animation node.\r\n\t * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\r\n\t * @param               dataLength      Defines the length of the data used by the node when in <code>LOCAL_STATIC</code> mode.\r\n\t * @param    [optional] priority        the priority of the particle animation node, used to order the agal generated in a particle animation set. Defaults to 1.\r\n\t */\r\n\tconstructor(name:string, mode:number, dataLength:number, priority:number = 1)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tname = name + ParticleNodeBase.MODES[mode];\r\n\r\n\t\tthis.name = name;\r\n\t\tthis._pMode = mode;\r\n\t\tthis._priority = priority;\r\n\t\tthis._pDataLength = dataLength;\r\n\r\n\t\tthis._pOneData = new Array<number>(this._pDataLength);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the AGAL code of the particle animation node for use in the vertex shader.\r\n\t */\r\n\tpublic getAGALVertexCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\r\n\t{\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the AGAL code of the particle animation node for use in the fragment shader.\r\n\t */\r\n\tpublic getAGALFragmentCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\r\n\t{\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the AGAL code of the particle animation node for use in the fragment shader when UV coordinates are required.\r\n\t */\r\n\tpublic getAGALUVCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\r\n\t{\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * Called internally by the particle animation set when assigning the set of static properties originally defined by the initParticleFunc of the set.\r\n\t *\r\n\t * @see away.animators.ParticleAnimationSet#initParticleFunc\r\n\t */\r\n\tpublic _iGeneratePropertyOfOneParticle(param:ParticleProperties):void\r\n\t{\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Called internally by the particle animation set when determining the requirements of the particle animation node AGAL.\r\n\t */\r\n\tpublic _iProcessAnimationSetting(particleAnimationSet:ParticleAnimationSet):void\r\n\t{\r\n\r\n\t}\r\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\r\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {ParticleProperties}\t\t\t\tfrom \"../../animators/data/ParticleProperties\";\r\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\r\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\r\nimport {ParticleOrbitState}\t\t\t\tfrom \"../../animators/states/ParticleOrbitState\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\r\n\r\n/**\r\n * A particle animation node used to control the position of a particle over time around a circular orbit.\r\n */\r\nexport class ParticleOrbitNode extends ParticleNodeBase\r\n{\r\n\t/** @private */\r\n\tpublic _iUsesEulers:boolean;\r\n\r\n\t/** @private */\r\n\tpublic _iUsesCycle:boolean;\r\n\r\n\t/** @private */\r\n\tpublic _iUsesPhase:boolean;\r\n\r\n\t/** @private */\r\n\tpublic _iRadius:number;\r\n\t/** @private */\r\n\tpublic _iCycleDuration:number;\r\n\t/** @private */\r\n\tpublic _iCyclePhase:number;\r\n\t/** @private */\r\n\tpublic _iEulers:Vector3D;\r\n\r\n\t/**\r\n\t * Reference for orbit node properties on a single particle (when in local property mode).\r\n\t * Expects a <code>Vector3D</code> object representing the radius (x), cycle speed (y) and cycle phase (z) of the motion on the particle.\r\n\t */\r\n\tpublic static ORBIT_VECTOR3D:string = \"OrbitVector3D\";\r\n\r\n\t/**\r\n\t * Creates a new <code>ParticleOrbitNode</code> object.\r\n\t *\r\n\t * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\r\n\t * @param    [optional] usesEulers      Defines whether the node uses the <code>eulers</code> property in the shader to calculate a rotation on the orbit. Defaults to true.\r\n\t * @param    [optional] usesCycle       Defines whether the node uses the <code>cycleDuration</code> property in the shader to calculate the period of the orbit independent of particle duration. Defaults to false.\r\n\t * @param    [optional] usesPhase       Defines whether the node uses the <code>cyclePhase</code> property in the shader to calculate a starting offset to the cycle rotation of the particle. Defaults to false.\r\n\t * @param    [optional] radius          Defines the radius of the orbit when in global mode. Defaults to 100.\r\n\t * @param    [optional] cycleDuration   Defines the duration of the orbit in seconds, used as a period independent of particle duration when in global mode. Defaults to 1.\r\n\t * @param    [optional] cyclePhase      Defines the phase of the orbit in degrees, used as the starting offset of the cycle when in global mode. Defaults to 0.\r\n\t * @param    [optional] eulers          Defines the euler rotation in degrees, applied to the orientation of the orbit when in global mode.\r\n\t */\r\n\tconstructor(mode:number, usesEulers:boolean = true, usesCycle:boolean = false, usesPhase:boolean = false, radius:number = 100, cycleDuration:number = 1, cyclePhase:number = 0, eulers:Vector3D = null)\r\n\t{\r\n\t\tvar len:number = 3;\r\n\t\tif (usesPhase)\r\n\t\t\tlen++;\r\n\t\tsuper(\"ParticleOrbit\", mode, len);\r\n\r\n\t\tthis._pStateClass = ParticleOrbitState;\r\n\r\n\t\tthis._iUsesEulers = usesEulers;\r\n\t\tthis._iUsesCycle = usesCycle;\r\n\t\tthis._iUsesPhase = usesPhase;\r\n\r\n\t\tthis._iRadius = radius;\r\n\t\tthis._iCycleDuration = cycleDuration;\r\n\t\tthis._iCyclePhase = cyclePhase;\r\n\t\tthis._iEulers = eulers || new Vector3D();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAGALVertexCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\r\n\t{\r\n\t\tvar orbitRegister:ShaderRegisterElement = (this._pMode == ParticlePropertiesMode.GLOBAL)? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\r\n\t\tanimationRegisterData.setRegisterIndex(this, ParticleOrbitState.ORBIT_INDEX, orbitRegister.index);\r\n\r\n\t\tvar eulersMatrixRegister:ShaderRegisterElement = registerCache.getFreeVertexConstant();\r\n\t\tanimationRegisterData.setRegisterIndex(this, ParticleOrbitState.EULERS_INDEX, eulersMatrixRegister.index);\r\n\t\tregisterCache.getFreeVertexConstant();\r\n\t\tregisterCache.getFreeVertexConstant();\r\n\t\tregisterCache.getFreeVertexConstant();\r\n\r\n\t\tvar temp1:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\tregisterCache.addVertexTempUsages(temp1, 1);\r\n\t\tvar distance:ShaderRegisterElement = new ShaderRegisterElement(temp1.regName, temp1.index);\r\n\r\n\t\tvar temp2:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\tvar cos:ShaderRegisterElement = new ShaderRegisterElement(temp2.regName, temp2.index, 0);\r\n\t\tvar sin:ShaderRegisterElement = new ShaderRegisterElement(temp2.regName, temp2.index, 1);\r\n\t\tvar degree:ShaderRegisterElement = new ShaderRegisterElement(temp2.regName, temp2.index, 2);\r\n\t\tregisterCache.removeVertexTempUsage(temp1);\r\n\r\n\t\tvar code:string = \"\";\r\n\r\n\t\tif (this._iUsesCycle) {\r\n\t\t\tcode += \"mul \" + degree + \",\" + animationRegisterData.vertexTime + \",\" + orbitRegister + \".y\\n\";\r\n\r\n\t\t\tif (this._iUsesPhase)\r\n\t\t\t\tcode += \"add \" + degree + \",\" + degree + \",\" + orbitRegister + \".w\\n\";\r\n\t\t} else\r\n\t\t\tcode += \"mul \" + degree + \",\" + animationRegisterData.vertexLife + \",\" + orbitRegister + \".y\\n\";\r\n\r\n\t\tcode += \"cos \" + cos + \",\" + degree + \"\\n\";\r\n\t\tcode += \"sin \" + sin + \",\" + degree + \"\\n\";\r\n\t\tcode += \"mul \" + distance + \".x,\" + cos + \",\" + orbitRegister + \".x\\n\";\r\n\t\tcode += \"mul \" + distance + \".y,\" + sin + \",\" + orbitRegister + \".x\\n\";\r\n\t\tcode += \"mov \" + distance + \".wz\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n\t\tif (this._iUsesEulers)\r\n\t\t\tcode += \"m44 \" + distance + \",\" + distance + \",\" + eulersMatrixRegister + \"\\n\";\r\n\t\tcode += \"add \" + animationRegisterData.positionTarget + \".xyz,\" + distance + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\r\n\r\n\t\tif (animationSet.needVelocity) {\r\n\t\t\tcode += \"neg \" + distance + \".x,\" + sin + \"\\n\";\r\n\t\t\tcode += \"mov \" + distance + \".y,\" + cos + \"\\n\";\r\n\t\t\tcode += \"mov \" + distance + \".zw,\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n\t\t\tif (this._iUsesEulers)\r\n\t\t\t\tcode += \"m44 \" + distance + \",\" + distance + \",\" + eulersMatrixRegister + \"\\n\";\r\n\t\t\tcode += \"mul \" + distance + \",\" + distance + \",\" + orbitRegister + \".z\\n\";\r\n\t\t\tcode += \"div \" + distance + \",\" + distance + \",\" + orbitRegister + \".y\\n\";\r\n\t\t\tif (!this._iUsesCycle)\r\n\t\t\t\tcode += \"div \" + distance + \",\" + distance + \",\" + animationRegisterData.vertexLife + \"\\n\";\r\n\t\t\tcode += \"add \" + animationRegisterData.velocityTarget + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz,\" + distance + \".xyz\\n\";\r\n\t\t}\r\n\t\treturn code;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAnimationState(animator:AnimatorBase):ParticleOrbitState\r\n\t{\r\n\t\treturn <ParticleOrbitState> animator.getAnimationState(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iGeneratePropertyOfOneParticle(param:ParticleProperties):void\r\n\t{\r\n\t\t//Vector3D.x is radius, Vector3D.y is cycle duration, Vector3D.z is phase\r\n\t\tvar orbit:Vector3D = param[ParticleOrbitNode.ORBIT_VECTOR3D];\r\n\t\tif (!orbit)\r\n\t\t\tthrow new Error(\"there is no \" + ParticleOrbitNode.ORBIT_VECTOR3D + \" in param!\");\r\n\r\n\t\tthis._pOneData[0] = orbit.x;\r\n\t\tif (this._iUsesCycle && orbit.y <= 0)\r\n\t\t\tthrow(new Error(\"the cycle duration must be greater than zero\"));\r\n\t\tthis._pOneData[1] = Math.PI*2/(!this._iUsesCycle? 1 : orbit.y);\r\n\t\tthis._pOneData[2] = orbit.x*Math.PI*2;\r\n\t\tif (this._iUsesPhase)\r\n\t\t\tthis._pOneData[3] = orbit.z*Math.PI/180;\r\n\t}\r\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\r\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {ParticleProperties}\t\t\t\tfrom \"../../animators/data/ParticleProperties\";\r\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\r\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\r\nimport {ParticleOscillatorState}\t\t\tfrom \"../../animators/states/ParticleOscillatorState\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\r\n\r\n/**\r\n * A particle animation node used to control the position of a particle over time using simple harmonic motion.\r\n */\r\nexport class ParticleOscillatorNode extends ParticleNodeBase\r\n{\r\n\t/** @private */\r\n\tpublic _iOscillator:Vector3D;\r\n\r\n\t/**\r\n\t * Reference for ocsillator node properties on a single particle (when in local property mode).\r\n\t * Expects a <code>Vector3D</code> object representing the axis (x,y,z) and cycle speed (w) of the motion on the particle.\r\n\t */\r\n\tpublic static OSCILLATOR_VECTOR3D:string = \"OscillatorVector3D\";\r\n\r\n\t/**\r\n\t * Creates a new <code>ParticleOscillatorNode</code>\r\n\t *\r\n\t * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\r\n\t * @param    [optional] oscillator      Defines the default oscillator axis (x, y, z) and cycleDuration (w) of the node, used when in global mode.\r\n\t */\r\n\tconstructor(mode:number, oscillator:Vector3D = null)\r\n\t{\r\n\t\tsuper(\"ParticleOscillator\", mode, 4);\r\n\r\n\t\tthis._pStateClass = ParticleOscillatorState;\r\n\r\n\t\tthis._iOscillator = oscillator || new Vector3D();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAGALVertexCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\r\n\t{\r\n\t\tvar oscillatorRegister:ShaderRegisterElement = (this._pMode == ParticlePropertiesMode.GLOBAL)? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\r\n\t\tanimationRegisterData.setRegisterIndex(this, ParticleOscillatorState.OSCILLATOR_INDEX, oscillatorRegister.index);\r\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\tvar dgree:ShaderRegisterElement = new ShaderRegisterElement(temp.regName, temp.index, 0);\r\n\t\tvar sin:ShaderRegisterElement = new ShaderRegisterElement(temp.regName, temp.index, 1);\r\n\t\tvar cos:ShaderRegisterElement = new ShaderRegisterElement(temp.regName, temp.index, 2);\r\n\t\tregisterCache.addVertexTempUsages(temp, 1);\r\n\t\tvar temp2:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\tvar distance:ShaderRegisterElement = new ShaderRegisterElement(temp2.regName, temp2.index);\r\n\t\tregisterCache.removeVertexTempUsage(temp);\r\n\r\n\t\tvar code:string = \"\";\r\n\t\tcode += \"mul \" + dgree + \",\" + animationRegisterData.vertexTime + \",\" + oscillatorRegister + \".w\\n\";\r\n\t\tcode += \"sin \" + sin + \",\" + dgree + \"\\n\";\r\n\t\tcode += \"mul \" + distance + \".xyz,\" + sin + \",\" + oscillatorRegister + \".xyz\\n\";\r\n\t\tcode += \"add \" + animationRegisterData.positionTarget + \".xyz,\" + distance + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\r\n\r\n\t\tif (animationSet.needVelocity) {\r\n\t\t\tcode += \"cos \" + cos + \",\" + dgree + \"\\n\";\r\n\t\t\tcode += \"mul \" + distance + \".xyz,\" + cos + \",\" + oscillatorRegister + \".xyz\\n\";\r\n\t\t\tcode += \"add \" + animationRegisterData.velocityTarget + \".xyz,\" + distance + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz\\n\";\r\n\t\t}\r\n\r\n\t\treturn code;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAnimationState(animator:AnimatorBase):ParticleOscillatorState\r\n\t{\r\n\t\treturn <ParticleOscillatorState> animator.getAnimationState(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iGeneratePropertyOfOneParticle(param:ParticleProperties):void\r\n\t{\r\n\t\t//(Vector3D.x,Vector3D.y,Vector3D.z) is oscillator axis, Vector3D.w is oscillator cycle duration\r\n\t\tvar drift:Vector3D = param[ParticleOscillatorNode.OSCILLATOR_VECTOR3D];\r\n\t\tif (!drift)\r\n\t\t\tthrow(new Error(\"there is no \" + ParticleOscillatorNode.OSCILLATOR_VECTOR3D + \" in param!\"));\r\n\r\n\t\tthis._pOneData[0] = drift.x;\r\n\t\tthis._pOneData[1] = drift.y;\r\n\t\tthis._pOneData[2] = drift.z;\r\n\t\tif (drift.w <= 0)\r\n\t\t\tthrow(new Error(\"the cycle duration must greater than zero\"));\r\n\t\tthis._pOneData[3] = Math.PI*2/drift.w;\r\n\t}\r\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\r\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {ParticleProperties}\t\t\t\tfrom \"../../animators/data/ParticleProperties\";\r\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\r\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\r\nimport {ParticlePositionState}\t\t\tfrom \"../../animators/states/ParticlePositionState\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\r\n\r\n/**\r\n * A particle animation node used to set the starting position of a particle.\r\n */\r\nexport class ParticlePositionNode extends ParticleNodeBase\r\n{\r\n\t/** @private */\r\n\tpublic _iPosition:Vector3D;\r\n\r\n\t/**\r\n\t * Reference for position node properties on a single particle (when in local property mode).\r\n\t * Expects a <code>Vector3D</code> object representing position of the particle.\r\n\t */\r\n\tpublic static POSITION_VECTOR3D:string = \"PositionVector3D\";\r\n\r\n\t/**\r\n\t * Creates a new <code>ParticlePositionNode</code>\r\n\t *\r\n\t * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\r\n\t * @param    [optional] position        Defines the default position of the particle when in global mode. Defaults to 0,0,0.\r\n\t */\r\n\tconstructor(mode:number, position:Vector3D = null)\r\n\t{\r\n\t\tsuper(\"ParticlePosition\", mode, 3);\r\n\r\n\t\tthis._pStateClass = ParticlePositionState;\r\n\r\n\t\tthis._iPosition = position || new Vector3D();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAGALVertexCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\r\n\t{\r\n\t\tvar positionAttribute:ShaderRegisterElement = (this._pMode == ParticlePropertiesMode.GLOBAL)? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\r\n\t\tanimationRegisterData.setRegisterIndex(this, ParticlePositionState.POSITION_INDEX, positionAttribute.index);\r\n\r\n\t\treturn \"add \" + animationRegisterData.positionTarget + \".xyz,\" + positionAttribute + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAnimationState(animator:AnimatorBase):ParticlePositionState\r\n\t{\r\n\t\treturn <ParticlePositionState> animator.getAnimationState(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iGeneratePropertyOfOneParticle(param:ParticleProperties):void\r\n\t{\r\n\t\tvar offset:Vector3D = param[ParticlePositionNode.POSITION_VECTOR3D];\r\n\t\tif (!offset)\r\n\t\t\tthrow(new Error(\"there is no \" + ParticlePositionNode.POSITION_VECTOR3D + \" in param!\"));\r\n\r\n\t\tthis._pOneData[0] = offset.x;\r\n\t\tthis._pOneData[1] = offset.y;\r\n\t\tthis._pOneData[2] = offset.z;\r\n\t}\r\n}",
    "import {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\r\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\r\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\r\nimport {ParticleRotateToHeadingState}\t\tfrom \"../../animators/states/ParticleRotateToHeadingState\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\r\n\r\n/**\r\n * A particle animation node used to control the rotation of a particle to match its heading vector.\r\n */\r\nexport class ParticleRotateToHeadingNode extends ParticleNodeBase\r\n{\r\n\t/**\r\n\t * Creates a new <code>ParticleBillboardNode</code>\r\n\t */\r\n\tconstructor()\r\n\t{\r\n\t\tsuper(\"ParticleRotateToHeading\", ParticlePropertiesMode.GLOBAL, 0, 3);\r\n\r\n\t\tthis._pStateClass = ParticleRotateToHeadingState;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAGALVertexCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\r\n\t{\r\n\t\tvar code:string = \"\";\r\n\t\tvar len:number = animationRegisterData.rotationRegisters.length;\r\n\t\tvar i:number;\r\n\t\tif (animationSet.hasBillboard) {\r\n\t\t\tvar temp1:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\t\tregisterCache.addVertexTempUsages(temp1, 1);\r\n\t\t\tvar temp2:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\t\tregisterCache.addVertexTempUsages(temp2, 1);\r\n\t\t\tvar temp3:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\r\n\t\t\tvar rotationMatrixRegister:ShaderRegisterElement = registerCache.getFreeVertexConstant();\r\n\t\t\tanimationRegisterData.setRegisterIndex(this, ParticleRotateToHeadingState.MATRIX_INDEX, rotationMatrixRegister.index);\r\n\t\t\tregisterCache.getFreeVertexConstant();\r\n\t\t\tregisterCache.getFreeVertexConstant();\r\n\t\t\tregisterCache.getFreeVertexConstant();\r\n\r\n\t\t\tregisterCache.removeVertexTempUsage(temp1);\r\n\t\t\tregisterCache.removeVertexTempUsage(temp2);\r\n\r\n\t\t\t//process the velocity\r\n\t\t\tcode += \"m33 \" + temp1 + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz,\" + rotationMatrixRegister + \"\\n\";\r\n\r\n\t\t\tcode += \"mov \" + temp3 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n\t\t\tcode += \"mov \" + temp3 + \".xy,\" + temp1 + \".xy\\n\";\r\n\t\t\tcode += \"nrm \" + temp3 + \".xyz,\" + temp3 + \".xyz\\n\";\r\n\r\n\t\t\t//temp3.x=cos,temp3.y=sin\r\n\t\t\t//only process z axis\r\n\t\t\tcode += \"mov \" + temp2 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n\t\t\tcode += \"mov \" + temp2 + \".x,\" + temp3 + \".y\\n\";\r\n\t\t\tcode += \"mov \" + temp2 + \".y,\" + temp3 + \".x\\n\";\r\n\t\t\tcode += \"mov \" + temp1 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n\t\t\tcode += \"mov \" + temp1 + \".x,\" + temp3 + \".x\\n\";\r\n\t\t\tcode += \"neg \" + temp1 + \".y,\" + temp3 + \".y\\n\";\r\n\t\t\tcode += \"mov \" + temp3 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n\t\t\tcode += \"mov \" + temp3 + \".z,\" + animationRegisterData.vertexOneConst + \"\\n\";\r\n\t\t\tcode += \"m33 \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp1 + \"\\n\";\r\n\t\t\tfor (i = 0; i < len; i++)\r\n\t\t\t\tcode += \"m33 \" + animationRegisterData.rotationRegisters[i] + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \",\" + temp1 + \"\\n\";\r\n\t\t} else {\r\n\t\t\tvar nrmVel:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\t\tregisterCache.addVertexTempUsages(nrmVel, 1);\r\n\r\n\t\t\tvar xAxis:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\t\tregisterCache.addVertexTempUsages(xAxis, 1);\r\n\r\n\t\t\tvar R:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\t\tregisterCache.addVertexTempUsages(R, 1);\r\n\t\t\tvar R_rev:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\t\tvar cos:ShaderRegisterElement = new ShaderRegisterElement(R.regName, R.index, 3);\r\n\t\t\tvar sin:ShaderRegisterElement = new ShaderRegisterElement(R_rev.regName, R_rev.index, 3);\r\n\t\t\tvar cos2:ShaderRegisterElement = new ShaderRegisterElement(nrmVel.regName, nrmVel.index, 3);\r\n\t\t\tvar tempSingle:ShaderRegisterElement = sin;\r\n\r\n\t\t\tregisterCache.removeVertexTempUsage(nrmVel);\r\n\t\t\tregisterCache.removeVertexTempUsage(xAxis);\r\n\t\t\tregisterCache.removeVertexTempUsage(R);\r\n\r\n\t\t\tcode += \"mov \" + xAxis + \".x,\" + animationRegisterData.vertexOneConst + \"\\n\";\r\n\t\t\tcode += \"mov \" + xAxis + \".yz,\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n\r\n\t\t\tcode += \"nrm \" + nrmVel + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz\\n\";\r\n\t\t\tcode += \"dp3 \" + cos2 + \",\" + nrmVel + \".xyz,\" + xAxis + \".xyz\\n\";\r\n\t\t\tcode += \"crs \" + nrmVel + \".xyz,\" + xAxis + \".xyz,\" + nrmVel + \".xyz\\n\";\r\n\t\t\tcode += \"nrm \" + nrmVel + \".xyz,\" + nrmVel + \".xyz\\n\";\r\n\t\t\t//use R as temp to judge if nrm is (0,0,0).\r\n\t\t\t//if nrm is (0,0,0) ,change it to (0,0,1).\r\n\t\t\tcode += \"dp3 \" + R + \".x,\" + nrmVel + \".xyz,\" + nrmVel + \".xyz\\n\";\r\n\t\t\tcode += \"sge \" + R + \".x,\" + animationRegisterData.vertexZeroConst + \",\" + R + \".x\\n\";\r\n\t\t\tcode += \"add \" + nrmVel + \".z,\" + R + \".x,\" + nrmVel + \".z\\n\";\r\n\r\n\t\t\tcode += \"add \" + tempSingle + \",\" + cos2 + \",\" + animationRegisterData.vertexOneConst + \"\\n\";\r\n\t\t\tcode += \"div \" + tempSingle + \",\" + tempSingle + \",\" + animationRegisterData.vertexTwoConst + \"\\n\";\r\n\t\t\tcode += \"sqt \" + cos + \",\" + tempSingle + \"\\n\";\r\n\r\n\t\t\tcode += \"sub \" + tempSingle + \",\" + animationRegisterData.vertexOneConst + \",\" + cos2 + \"\\n\";\r\n\t\t\tcode += \"div \" + tempSingle + \",\" + tempSingle + \",\" + animationRegisterData.vertexTwoConst + \"\\n\";\r\n\t\t\tcode += \"sqt \" + sin + \",\" + tempSingle + \"\\n\";\r\n\r\n\t\t\tcode += \"mul \" + R + \".xyz,\" + sin + \",\" + nrmVel + \".xyz\\n\";\r\n\r\n\t\t\t//use cos as R.w\r\n\r\n\t\t\tcode += \"mul \" + R_rev + \".xyz,\" + sin + \",\" + nrmVel + \".xyz\\n\";\r\n\t\t\tcode += \"neg \" + R_rev + \".xyz,\" + R_rev + \".xyz\\n\";\r\n\r\n\t\t\t//use cos as R_rev.w\r\n\r\n\t\t\t//nrmVel and xAxis are used as temp register\r\n\t\t\tcode += \"crs \" + nrmVel + \".xyz,\" + R + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz\\n\";\r\n\r\n\t\t\t//use cos as R.w\r\n\t\t\tcode += \"mul \" + xAxis + \".xyz,\" + cos + \",\" + animationRegisterData.scaleAndRotateTarget + \".xyz\\n\";\r\n\t\t\tcode += \"add \" + nrmVel + \".xyz,\" + nrmVel + \".xyz,\" + xAxis + \".xyz\\n\";\r\n\t\t\tcode += \"dp3 \" + xAxis + \".w,\" + R + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz\\n\";\r\n\t\t\tcode += \"neg \" + nrmVel + \".w,\" + xAxis + \".w\\n\";\r\n\r\n\t\t\tcode += \"crs \" + R + \".xyz,\" + nrmVel + \".xyz,\" + R_rev + \".xyz\\n\";\r\n\t\t\t//code += \"mul \" + xAxis + \".xyzw,\" + nrmVel + \".xyzw,\" +R_rev + \".w\\n\";\r\n\t\t\tcode += \"mul \" + xAxis + \".xyzw,\" + nrmVel + \".xyzw,\" + cos + \"\\n\";\r\n\t\t\tcode += \"add \" + R + \".xyz,\" + R + \".xyz,\" + xAxis + \".xyz\\n\";\r\n\t\t\tcode += \"mul \" + xAxis + \".xyz,\" + nrmVel + \".w,\" + R_rev + \".xyz\\n\";\r\n\r\n\t\t\tcode += \"add \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + R + \".xyz,\" + xAxis + \".xyz\\n\";\r\n\r\n\t\t\tfor (i = 0; i < len; i++) {\r\n\t\t\t\t//just repeat the calculate above\r\n\t\t\t\t//because of the limited registers, no need to optimise\r\n\t\t\t\tcode += \"mov \" + xAxis + \".x,\" + animationRegisterData.vertexOneConst + \"\\n\";\r\n\t\t\t\tcode += \"mov \" + xAxis + \".yz,\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n\t\t\t\tcode += \"nrm \" + nrmVel + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz\\n\";\r\n\t\t\t\tcode += \"dp3 \" + cos2 + \",\" + nrmVel + \".xyz,\" + xAxis + \".xyz\\n\";\r\n\t\t\t\tcode += \"crs \" + nrmVel + \".xyz,\" + xAxis + \".xyz,\" + nrmVel + \".xyz\\n\";\r\n\t\t\t\tcode += \"nrm \" + nrmVel + \".xyz,\" + nrmVel + \".xyz\\n\";\r\n\t\t\t\tcode += \"dp3 \" + R + \".x,\" + nrmVel + \".xyz,\" + nrmVel + \".xyz\\n\";\r\n\t\t\t\tcode += \"sge \" + R + \".x,\" + animationRegisterData.vertexZeroConst + \",\" + R + \".x\\n\";\r\n\t\t\t\tcode += \"add \" + nrmVel + \".z,\" + R + \".x,\" + nrmVel + \".z\\n\";\r\n\t\t\t\tcode += \"add \" + tempSingle + \",\" + cos2 + \",\" + animationRegisterData.vertexOneConst + \"\\n\";\r\n\t\t\t\tcode += \"div \" + tempSingle + \",\" + tempSingle + \",\" + animationRegisterData.vertexTwoConst + \"\\n\";\r\n\t\t\t\tcode += \"sqt \" + cos + \",\" + tempSingle + \"\\n\";\r\n\t\t\t\tcode += \"sub \" + tempSingle + \",\" + animationRegisterData.vertexOneConst + \",\" + cos2 + \"\\n\";\r\n\t\t\t\tcode += \"div \" + tempSingle + \",\" + tempSingle + \",\" + animationRegisterData.vertexTwoConst + \"\\n\";\r\n\t\t\t\tcode += \"sqt \" + sin + \",\" + tempSingle + \"\\n\";\r\n\t\t\t\tcode += \"mul \" + R + \".xyz,\" + sin + \",\" + nrmVel + \".xyz\\n\";\r\n\t\t\t\tcode += \"mul \" + R_rev + \".xyz,\" + sin + \",\" + nrmVel + \".xyz\\n\";\r\n\t\t\t\tcode += \"neg \" + R_rev + \".xyz,\" + R_rev + \".xyz\\n\";\r\n\t\t\t\tcode += \"crs \" + nrmVel + \".xyz,\" + R + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \".xyz\\n\";\r\n\t\t\t\tcode += \"mul \" + xAxis + \".xyz,\" + cos + \",\" + animationRegisterData.rotationRegisters[i] + \".xyz\\n\";\r\n\t\t\t\tcode += \"add \" + nrmVel + \".xyz,\" + nrmVel + \".xyz,\" + xAxis + \".xyz\\n\";\r\n\t\t\t\tcode += \"dp3 \" + xAxis + \".w,\" + R + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \".xyz\\n\";\r\n\t\t\t\tcode += \"neg \" + nrmVel + \".w,\" + xAxis + \".w\\n\";\r\n\t\t\t\tcode += \"crs \" + R + \".xyz,\" + nrmVel + \".xyz,\" + R_rev + \".xyz\\n\";\r\n\t\t\t\tcode += \"mul \" + xAxis + \".xyzw,\" + nrmVel + \".xyzw,\" + cos + \"\\n\";\r\n\t\t\t\tcode += \"add \" + R + \".xyz,\" + R + \".xyz,\" + xAxis + \".xyz\\n\";\r\n\t\t\t\tcode += \"mul \" + xAxis + \".xyz,\" + nrmVel + \".w,\" + R_rev + \".xyz\\n\";\r\n\t\t\t\tcode += \"add \" + animationRegisterData.rotationRegisters[i] + \".xyz,\" + R + \".xyz,\" + xAxis + \".xyz\\n\";\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\treturn code;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAnimationState(animator:AnimatorBase):ParticleRotateToHeadingState\r\n\t{\r\n\t\treturn <ParticleRotateToHeadingState> animator.getAnimationState(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iProcessAnimationSetting(particleAnimationSet:ParticleAnimationSet):void\r\n\t{\r\n\t\tparticleAnimationSet.needVelocity = true;\r\n\t}\r\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\r\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {ParticleProperties}\t\t\t\tfrom \"../../animators/data/ParticleProperties\";\r\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\r\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\r\nimport {ParticleRotateToPositionState}\tfrom \"../../animators/states/ParticleRotateToPositionState\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\r\n\r\n/**\r\n * A particle animation node used to control the rotation of a particle to face to a position\r\n */\r\nexport class ParticleRotateToPositionNode extends ParticleNodeBase\r\n{\r\n\t/** @private */\r\n\tpublic _iPosition:Vector3D;\r\n\r\n\t/**\r\n\t * Reference for the position the particle will rotate to face for a single particle (when in local property mode).\r\n\t * Expects a <code>Vector3D</code> object representing the position that the particle must face.\r\n\t */\r\n\tpublic static POSITION_VECTOR3D:string = \"RotateToPositionVector3D\";\r\n\r\n\t/**\r\n\t * Creates a new <code>ParticleRotateToPositionNode</code>\r\n\t */\r\n\tconstructor(mode:number, position:Vector3D = null)\r\n\t{\r\n\t\tsuper(\"ParticleRotateToPosition\", mode, 3, 3);\r\n\r\n\t\tthis._pStateClass = ParticleRotateToPositionState;\r\n\r\n\t\tthis._iPosition = position || new Vector3D();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAGALVertexCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\r\n\t{\r\n\t\tvar positionAttribute:ShaderRegisterElement = (this._pMode == ParticlePropertiesMode.GLOBAL)? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\r\n\t\tanimationRegisterData.setRegisterIndex(this, ParticleRotateToPositionState.POSITION_INDEX, positionAttribute.index);\r\n\r\n\t\tvar code:string = \"\";\r\n\t\tvar len:number = animationRegisterData.rotationRegisters.length;\r\n\t\tvar i:number;\r\n\t\tif (animationSet.hasBillboard) {\r\n\t\t\tvar temp1:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\t\tregisterCache.addVertexTempUsages(temp1, 1);\r\n\t\t\tvar temp2:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\t\tregisterCache.addVertexTempUsages(temp2, 1);\r\n\t\t\tvar temp3:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\r\n\t\t\tvar rotationMatrixRegister:ShaderRegisterElement = registerCache.getFreeVertexConstant();\r\n\t\t\tanimationRegisterData.setRegisterIndex(this, ParticleRotateToPositionState.MATRIX_INDEX, rotationMatrixRegister.index);\r\n\t\t\tregisterCache.getFreeVertexConstant();\r\n\t\t\tregisterCache.getFreeVertexConstant();\r\n\t\t\tregisterCache.getFreeVertexConstant();\r\n\r\n\t\t\tregisterCache.removeVertexTempUsage(temp1);\r\n\t\t\tregisterCache.removeVertexTempUsage(temp2);\r\n\r\n\t\t\t//process the position\r\n\t\t\tcode += \"sub \" + temp1 + \".xyz,\" + positionAttribute + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\r\n\t\t\tcode += \"m33 \" + temp1 + \".xyz,\" + temp1 + \".xyz,\" + rotationMatrixRegister + \"\\n\";\r\n\r\n\t\t\tcode += \"mov \" + temp3 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n\t\t\tcode += \"mov \" + temp3 + \".xy,\" + temp1 + \".xy\\n\";\r\n\t\t\tcode += \"nrm \" + temp3 + \".xyz,\" + temp3 + \".xyz\\n\";\r\n\r\n\t\t\t//temp3.x=cos,temp3.y=sin\r\n\t\t\t//only process z axis\r\n\t\t\tcode += \"mov \" + temp2 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n\t\t\tcode += \"mov \" + temp2 + \".x,\" + temp3 + \".y\\n\";\r\n\t\t\tcode += \"mov \" + temp2 + \".y,\" + temp3 + \".x\\n\";\r\n\t\t\tcode += \"mov \" + temp1 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n\t\t\tcode += \"mov \" + temp1 + \".x,\" + temp3 + \".x\\n\";\r\n\t\t\tcode += \"neg \" + temp1 + \".y,\" + temp3 + \".y\\n\";\r\n\t\t\tcode += \"mov \" + temp3 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n\t\t\tcode += \"mov \" + temp3 + \".z,\" + animationRegisterData.vertexOneConst + \"\\n\";\r\n\t\t\tcode += \"m33 \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp1 + \"\\n\";\r\n\t\t\tfor (i = 0; i < len; i++)\r\n\t\t\t\tcode += \"m33 \" + animationRegisterData.rotationRegisters[i] + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \",\" + temp1 + \"\\n\";\r\n\t\t} else {\r\n\t\t\tvar nrmDirection:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\t\tregisterCache.addVertexTempUsages(nrmDirection, 1);\r\n\r\n\t\t\tvar temp:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\t\tregisterCache.addVertexTempUsages(temp, 1);\r\n\t\t\tvar cos:ShaderRegisterElement = new ShaderRegisterElement(temp.regName, temp.index, 0);\r\n\t\t\tvar sin:ShaderRegisterElement = new ShaderRegisterElement(temp.regName, temp.index, 1);\r\n\t\t\tvar o_temp:ShaderRegisterElement = new ShaderRegisterElement(temp.regName, temp.index, 2);\r\n\t\t\tvar tempSingle:ShaderRegisterElement = new ShaderRegisterElement(temp.regName, temp.index, 3);\r\n\r\n\t\t\tvar R:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\t\tregisterCache.addVertexTempUsages(R, 1);\r\n\r\n\t\t\tregisterCache.removeVertexTempUsage(nrmDirection);\r\n\t\t\tregisterCache.removeVertexTempUsage(temp);\r\n\t\t\tregisterCache.removeVertexTempUsage(R);\r\n\r\n\t\t\tcode += \"sub \" + nrmDirection + \".xyz,\" + positionAttribute + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\r\n\t\t\tcode += \"nrm \" + nrmDirection + \".xyz,\" + nrmDirection + \".xyz\\n\";\r\n\r\n\t\t\tcode += \"mov \" + sin + \",\" + nrmDirection + \".y\\n\";\r\n\t\t\tcode += \"mul \" + cos + \",\" + sin + \",\" + sin + \"\\n\";\r\n\t\t\tcode += \"sub \" + cos + \",\" + animationRegisterData.vertexOneConst + \",\" + cos + \"\\n\";\r\n\t\t\tcode += \"sqt \" + cos + \",\" + cos + \"\\n\";\r\n\r\n\t\t\tcode += \"mul \" + R + \".x,\" + cos + \",\" + animationRegisterData.scaleAndRotateTarget + \".y\\n\";\r\n\t\t\tcode += \"mul \" + R + \".y,\" + sin + \",\" + animationRegisterData.scaleAndRotateTarget + \".z\\n\";\r\n\t\t\tcode += \"mul \" + R + \".z,\" + sin + \",\" + animationRegisterData.scaleAndRotateTarget + \".y\\n\";\r\n\t\t\tcode += \"mul \" + R + \".w,\" + cos + \",\" + animationRegisterData.scaleAndRotateTarget + \".z\\n\";\r\n\r\n\t\t\tcode += \"sub \" + animationRegisterData.scaleAndRotateTarget + \".y,\" + R + \".x,\" + R + \".y\\n\";\r\n\t\t\tcode += \"add \" + animationRegisterData.scaleAndRotateTarget + \".z,\" + R + \".z,\" + R + \".w\\n\";\r\n\r\n\t\t\tcode += \"abs \" + R + \".y,\" + nrmDirection + \".y\\n\";\r\n\t\t\tcode += \"sge \" + R + \".z,\" + R + \".y,\" + animationRegisterData.vertexOneConst + \"\\n\";\r\n\t\t\tcode += \"mul \" + R + \".x,\" + R + \".y,\" + nrmDirection + \".y\\n\";\r\n\r\n\t\t\t//judgu if nrmDirection=(0,1,0);\r\n\t\t\tcode += \"mov \" + nrmDirection + \".y,\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n\t\t\tcode += \"dp3 \" + sin + \",\" + nrmDirection + \".xyz,\" + nrmDirection + \".xyz\\n\";\r\n\t\t\tcode += \"sge \" + tempSingle + \",\" + animationRegisterData.vertexZeroConst + \",\" + sin + \"\\n\";\r\n\r\n\t\t\tcode += \"mov \" + nrmDirection + \".y,\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n\t\t\tcode += \"nrm \" + nrmDirection + \".xyz,\" + nrmDirection + \".xyz\\n\";\r\n\r\n\t\t\tcode += \"sub \" + sin + \",\" + animationRegisterData.vertexOneConst + \",\" + tempSingle + \"\\n\";\r\n\t\t\tcode += \"mul \" + sin + \",\" + sin + \",\" + nrmDirection + \".x\\n\";\r\n\r\n\t\t\tcode += \"mov \" + cos + \",\" + nrmDirection + \".z\\n\";\r\n\t\t\tcode += \"neg \" + cos + \",\" + cos + \"\\n\";\r\n\t\t\tcode += \"sub \" + o_temp + \",\" + animationRegisterData.vertexOneConst + \",\" + cos + \"\\n\";\r\n\t\t\tcode += \"mul \" + o_temp + \",\" + R + \".x,\" + tempSingle + \"\\n\";\r\n\t\t\tcode += \"add \" + cos + \",\" + cos + \",\" + o_temp + \"\\n\";\r\n\r\n\t\t\tcode += \"mul \" + R + \".x,\" + cos + \",\" + animationRegisterData.scaleAndRotateTarget + \".x\\n\";\r\n\t\t\tcode += \"mul \" + R + \".y,\" + sin + \",\" + animationRegisterData.scaleAndRotateTarget + \".z\\n\";\r\n\t\t\tcode += \"mul \" + R + \".z,\" + sin + \",\" + animationRegisterData.scaleAndRotateTarget + \".x\\n\";\r\n\t\t\tcode += \"mul \" + R + \".w,\" + cos + \",\" + animationRegisterData.scaleAndRotateTarget + \".z\\n\";\r\n\r\n\t\t\tcode += \"sub \" + animationRegisterData.scaleAndRotateTarget + \".x,\" + R + \".x,\" + R + \".y\\n\";\r\n\t\t\tcode += \"add \" + animationRegisterData.scaleAndRotateTarget + \".z,\" + R + \".z,\" + R + \".w\\n\";\r\n\r\n\t\t\tfor (i = 0; i < len; i++) {\r\n\t\t\t\t//just repeat the calculate above\r\n\t\t\t\t//because of the limited registers, no need to optimise\r\n\t\t\t\tcode += \"sub \" + nrmDirection + \".xyz,\" + positionAttribute + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\r\n\t\t\t\tcode += \"nrm \" + nrmDirection + \".xyz,\" + nrmDirection + \".xyz\\n\";\r\n\t\t\t\tcode += \"mov \" + sin + \",\" + nrmDirection + \".y\\n\";\r\n\t\t\t\tcode += \"mul \" + cos + \",\" + sin + \",\" + sin + \"\\n\";\r\n\t\t\t\tcode += \"sub \" + cos + \",\" + animationRegisterData.vertexOneConst + \",\" + cos + \"\\n\";\r\n\t\t\t\tcode += \"sqt \" + cos + \",\" + cos + \"\\n\";\r\n\t\t\t\tcode += \"mul \" + R + \".x,\" + cos + \",\" + animationRegisterData.rotationRegisters[i] + \".y\\n\";\r\n\t\t\t\tcode += \"mul \" + R + \".y,\" + sin + \",\" + animationRegisterData.rotationRegisters[i] + \".z\\n\";\r\n\t\t\t\tcode += \"mul \" + R + \".z,\" + sin + \",\" + animationRegisterData.rotationRegisters[i] + \".y\\n\";\r\n\t\t\t\tcode += \"mul \" + R + \".w,\" + cos + \",\" + animationRegisterData.rotationRegisters[i] + \".z\\n\";\r\n\t\t\t\tcode += \"sub \" + animationRegisterData.rotationRegisters[i] + \".y,\" + R + \".x,\" + R + \".y\\n\";\r\n\t\t\t\tcode += \"add \" + animationRegisterData.rotationRegisters[i] + \".z,\" + R + \".z,\" + R + \".w\\n\";\r\n\t\t\t\tcode += \"abs \" + R + \".y,\" + nrmDirection + \".y\\n\";\r\n\t\t\t\tcode += \"sge \" + R + \".z,\" + R + \".y,\" + animationRegisterData.vertexOneConst + \"\\n\";\r\n\t\t\t\tcode += \"mul \" + R + \".x,\" + R + \".y,\" + nrmDirection + \".y\\n\";\r\n\t\t\t\tcode += \"mov \" + nrmDirection + \".y,\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n\t\t\t\tcode += \"dp3 \" + sin + \",\" + nrmDirection + \".xyz,\" + nrmDirection + \".xyz\\n\";\r\n\t\t\t\tcode += \"sge \" + tempSingle + \",\" + animationRegisterData.vertexZeroConst + \",\" + sin + \"\\n\";\r\n\t\t\t\tcode += \"mov \" + nrmDirection + \".y,\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n\t\t\t\tcode += \"nrm \" + nrmDirection + \".xyz,\" + nrmDirection + \".xyz\\n\";\r\n\t\t\t\tcode += \"sub \" + sin + \",\" + animationRegisterData.vertexOneConst + \",\" + tempSingle + \"\\n\";\r\n\t\t\t\tcode += \"mul \" + sin + \",\" + sin + \",\" + nrmDirection + \".x\\n\";\r\n\t\t\t\tcode += \"mov \" + cos + \",\" + nrmDirection + \".z\\n\";\r\n\t\t\t\tcode += \"neg \" + cos + \",\" + cos + \"\\n\";\r\n\t\t\t\tcode += \"sub \" + o_temp + \",\" + animationRegisterData.vertexOneConst + \",\" + cos + \"\\n\";\r\n\t\t\t\tcode += \"mul \" + o_temp + \",\" + R + \".x,\" + tempSingle + \"\\n\";\r\n\t\t\t\tcode += \"add \" + cos + \",\" + cos + \",\" + o_temp + \"\\n\";\r\n\t\t\t\tcode += \"mul \" + R + \".x,\" + cos + \",\" + animationRegisterData.rotationRegisters[i] + \".x\\n\";\r\n\t\t\t\tcode += \"mul \" + R + \".y,\" + sin + \",\" + animationRegisterData.rotationRegisters[i] + \".z\\n\";\r\n\t\t\t\tcode += \"mul \" + R + \".z,\" + sin + \",\" + animationRegisterData.rotationRegisters[i] + \".x\\n\";\r\n\t\t\t\tcode += \"mul \" + R + \".w,\" + cos + \",\" + animationRegisterData.rotationRegisters[i] + \".z\\n\";\r\n\t\t\t\tcode += \"sub \" + animationRegisterData.rotationRegisters[i] + \".x,\" + R + \".x,\" + R + \".y\\n\";\r\n\t\t\t\tcode += \"add \" + animationRegisterData.rotationRegisters[i] + \".z,\" + R + \".z,\" + R + \".w\\n\";\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn code;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAnimationState(animator:AnimatorBase):ParticleRotateToPositionState\r\n\t{\r\n\t\treturn <ParticleRotateToPositionState> animator.getAnimationState(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iGeneratePropertyOfOneParticle(param:ParticleProperties):void\r\n\t{\r\n\t\tvar offset:Vector3D = param[ParticleRotateToPositionNode.POSITION_VECTOR3D];\r\n\t\tif (!offset)\r\n\t\t\tthrow(new Error(\"there is no \" + ParticleRotateToPositionNode.POSITION_VECTOR3D + \" in param!\"));\r\n\r\n\t\tthis._pOneData[0] = offset.x;\r\n\t\tthis._pOneData[1] = offset.y;\r\n\t\tthis._pOneData[2] = offset.z;\r\n\t}\r\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\r\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {ParticleProperties}\t\t\t\tfrom \"../../animators/data/ParticleProperties\";\r\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\r\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\r\nimport {ParticleRotationalVelocityState}\tfrom \"../../animators/states/ParticleRotationalVelocityState\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\r\n\r\n/**\r\n * A particle animation node used to set the starting rotational velocity of a particle.\r\n */\r\nexport class ParticleRotationalVelocityNode extends ParticleNodeBase\r\n{\r\n\t/** @private */\r\n\tpublic _iRotationalVelocity:Vector3D;\r\n\r\n\t/**\r\n\t * Reference for rotational velocity node properties on a single particle (when in local property mode).\r\n\t * Expects a <code>Vector3D</code> object representing the rotational velocity around an axis of the particle.\r\n\t */\r\n\tpublic static ROTATIONALVELOCITY_VECTOR3D:string = \"RotationalVelocityVector3D\";\r\n\r\n\t/**\r\n\t * Creates a new <code>ParticleRotationalVelocityNode</code>\r\n\t *\r\n\t * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\r\n\t */\r\n\tconstructor(mode:number, rotationalVelocity:Vector3D = null)\r\n\t{\r\n\t\tsuper(\"ParticleRotationalVelocity\", mode, 4);\r\n\r\n\t\tthis._pStateClass = ParticleRotationalVelocityState;\r\n\r\n\t\tthis._iRotationalVelocity = rotationalVelocity || new Vector3D();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAGALVertexCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\r\n\t{\r\n\t\tvar rotationRegister:ShaderRegisterElement = (this._pMode == ParticlePropertiesMode.GLOBAL)? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\r\n\t\tanimationRegisterData.setRegisterIndex(this, ParticleRotationalVelocityState.ROTATIONALVELOCITY_INDEX, rotationRegister.index);\r\n\r\n\t\tvar nrmVel:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\tregisterCache.addVertexTempUsages(nrmVel, 1);\r\n\r\n\t\tvar xAxis:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\tregisterCache.addVertexTempUsages(xAxis, 1);\r\n\r\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\tregisterCache.addVertexTempUsages(temp, 1);\r\n\t\tvar Rtemp:ShaderRegisterElement = new ShaderRegisterElement(temp.regName, temp.index);\r\n\t\tvar R_rev:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\tR_rev = new ShaderRegisterElement(R_rev.regName, R_rev.index);\r\n\r\n\t\tvar cos:ShaderRegisterElement = new ShaderRegisterElement(Rtemp.regName, Rtemp.index, 3);\r\n\t\tvar sin:ShaderRegisterElement = new ShaderRegisterElement(R_rev.regName, R_rev.index, 3);\r\n\r\n\t\tregisterCache.removeVertexTempUsage(nrmVel);\r\n\t\tregisterCache.removeVertexTempUsage(xAxis);\r\n\t\tregisterCache.removeVertexTempUsage(temp);\r\n\r\n\t\tvar code:string = \"\";\r\n\t\tcode += \"mov \" + nrmVel + \".xyz,\" + rotationRegister + \".xyz\\n\";\r\n\t\tcode += \"mov \" + nrmVel + \".w,\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n\r\n\t\tcode += \"mul \" + cos + \",\" + animationRegisterData.vertexTime + \",\" + rotationRegister + \".w\\n\";\r\n\r\n\t\tcode += \"sin \" + sin + \",\" + cos + \"\\n\";\r\n\t\tcode += \"cos \" + cos + \",\" + cos + \"\\n\";\r\n\r\n\t\tcode += \"mul \" + Rtemp + \".xyz,\" + sin + \",\" + nrmVel + \".xyz\\n\";\r\n\r\n\t\tcode += \"mul \" + R_rev + \".xyz,\" + sin + \",\" + nrmVel + \".xyz\\n\";\r\n\t\tcode += \"neg \" + R_rev + \".xyz,\" + R_rev + \".xyz\\n\";\r\n\r\n\t\t//nrmVel and xAxis are used as temp register\r\n\t\tcode += \"crs \" + nrmVel + \".xyz,\" + Rtemp + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz\\n\";\r\n\r\n\t\tcode += \"mul \" + xAxis + \".xyz,\" + cos + \",\" + animationRegisterData.scaleAndRotateTarget + \".xyz\\n\";\r\n\t\tcode += \"add \" + nrmVel + \".xyz,\" + nrmVel + \".xyz,\" + xAxis + \".xyz\\n\";\r\n\t\tcode += \"dp3 \" + xAxis + \".w,\" + Rtemp + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz\\n\";\r\n\t\tcode += \"neg \" + nrmVel + \".w,\" + xAxis + \".w\\n\";\r\n\r\n\t\tcode += \"crs \" + Rtemp + \".xyz,\" + nrmVel + \".xyz,\" + R_rev + \".xyz\\n\";\r\n\r\n\t\t//use cos as R_rev.w\r\n\t\tcode += \"mul \" + xAxis + \".xyzw,\" + nrmVel + \".xyzw,\" + cos + \"\\n\";\r\n\t\tcode += \"add \" + Rtemp + \".xyz,\" + Rtemp + \".xyz,\" + xAxis + \".xyz\\n\";\r\n\t\tcode += \"mul \" + xAxis + \".xyz,\" + nrmVel + \".w,\" + R_rev + \".xyz\\n\";\r\n\r\n\t\tcode += \"add \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + Rtemp + \".xyz,\" + xAxis + \".xyz\\n\";\r\n\r\n\t\tvar len:number = animationRegisterData.rotationRegisters.length;\r\n\t\tfor (var i:number = 0; i < len; i++) {\r\n\t\t\tcode += \"mov \" + nrmVel + \".xyz,\" + rotationRegister + \".xyz\\n\";\r\n\t\t\tcode += \"mov \" + nrmVel + \".w,\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n\t\t\tcode += \"mul \" + cos + \",\" + animationRegisterData.vertexTime + \",\" + rotationRegister + \".w\\n\";\r\n\t\t\tcode += \"sin \" + sin + \",\" + cos + \"\\n\";\r\n\t\t\tcode += \"cos \" + cos + \",\" + cos + \"\\n\";\r\n\t\t\tcode += \"mul \" + Rtemp + \".xyz,\" + sin + \",\" + nrmVel + \".xyz\\n\";\r\n\t\t\tcode += \"mul \" + R_rev + \".xyz,\" + sin + \",\" + nrmVel + \".xyz\\n\";\r\n\t\t\tcode += \"neg \" + R_rev + \".xyz,\" + R_rev + \".xyz\\n\";\r\n\t\t\tcode += \"crs \" + nrmVel + \".xyz,\" + Rtemp + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \".xyz\\n\";\r\n\t\t\tcode += \"mul \" + xAxis + \".xyz,\" + cos + \",\" + animationRegisterData.rotationRegisters[i] + \"\\n\";\r\n\t\t\tcode += \"add \" + nrmVel + \".xyz,\" + nrmVel + \".xyz,\" + xAxis + \".xyz\\n\";\r\n\t\t\tcode += \"dp3 \" + xAxis + \".w,\" + Rtemp + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \"\\n\";\r\n\t\t\tcode += \"neg \" + nrmVel + \".w,\" + xAxis + \".w\\n\";\r\n\t\t\tcode += \"crs \" + Rtemp + \".xyz,\" + nrmVel + \".xyz,\" + R_rev + \".xyz\\n\";\r\n\t\t\tcode += \"mul \" + xAxis + \".xyzw,\" + nrmVel + \".xyzw,\" + cos + \"\\n\";\r\n\t\t\tcode += \"add \" + Rtemp + \".xyz,\" + Rtemp + \".xyz,\" + xAxis + \".xyz\\n\";\r\n\t\t\tcode += \"mul \" + xAxis + \".xyz,\" + nrmVel + \".w,\" + R_rev + \".xyz\\n\";\r\n\t\t\tcode += \"add \" + animationRegisterData.rotationRegisters[i] + \",\" + Rtemp + \".xyz,\" + xAxis + \".xyz\\n\";\r\n\t\t}\r\n\t\treturn code;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAnimationState(animator:AnimatorBase):ParticleRotationalVelocityState\r\n\t{\r\n\t\treturn <ParticleRotationalVelocityState> animator.getAnimationState(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iGeneratePropertyOfOneParticle(param:ParticleProperties):void\r\n\t{\r\n\t\t//(Vector3d.x,Vector3d.y,Vector3d.z) is rotation axis,Vector3d.w is cycle duration\r\n\t\tvar rotate:Vector3D = param[ParticleRotationalVelocityNode.ROTATIONALVELOCITY_VECTOR3D];\r\n\t\tif (!rotate)\r\n\t\t\tthrow(new Error(\"there is no \" + ParticleRotationalVelocityNode.ROTATIONALVELOCITY_VECTOR3D + \" in param!\"));\r\n\r\n\t\tif (rotate.length <= 0)\r\n\t\t\trotate.z = 1; //set the default direction\r\n\t\telse\r\n\t\t\trotate.normalize();\r\n\r\n\t\tthis._pOneData[0] = rotate.x;\r\n\t\tthis._pOneData[1] = rotate.y;\r\n\t\tthis._pOneData[2] = rotate.z;\r\n\t\tif (rotate.w <= 0)\r\n\t\t\tthrow(new Error(\"the cycle duration must greater than zero\"));\r\n\t\t// it's used as angle/2 in agal\r\n\t\tthis._pOneData[3] = Math.PI/rotate.w;\r\n\t}\r\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\r\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {ParticleProperties}\t\t\t\tfrom \"../../animators/data/ParticleProperties\";\r\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\r\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\r\nimport {ParticleScaleState}\t\t\t\tfrom \"../../animators/states/ParticleScaleState\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\r\n\r\n/**\r\n * A particle animation node used to control the scale variation of a particle over time.\r\n */\r\nexport class ParticleScaleNode extends ParticleNodeBase\r\n{\r\n\t/** @private */\r\n\tpublic _iUsesCycle:boolean;\r\n\r\n\t/** @private */\r\n\tpublic _iUsesPhase:boolean;\r\n\r\n\t/** @private */\r\n\tpublic _iMinScale:number;\r\n\t/** @private */\r\n\tpublic _iMaxScale:number;\r\n\t/** @private */\r\n\tpublic _iCycleDuration:number;\r\n\t/** @private */\r\n\tpublic _iCyclePhase:number;\r\n\r\n\t/**\r\n\t * Reference for scale node properties on a single particle (when in local property mode).\r\n\t * Expects a <code>Vector3D</code> representing the min scale (x), max scale(y), optional cycle speed (z) and phase offset (w) applied to the particle.\r\n\t */\r\n\tpublic static SCALE_VECTOR3D:string = \"ScaleVector3D\";\r\n\r\n\t/**\r\n\t * Creates a new <code>ParticleScaleNode</code>\r\n\t *\r\n\t * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\r\n\t * @param    [optional] usesCycle       Defines whether the node uses the <code>cycleDuration</code> property in the shader to calculate the period of animation independent of particle duration. Defaults to false.\r\n\t * @param    [optional] usesPhase       Defines whether the node uses the <code>cyclePhase</code> property in the shader to calculate a starting offset to the animation cycle. Defaults to false.\r\n\t * @param    [optional] minScale        Defines the default min scale transform of the node, when in global mode. Defaults to 1.\r\n\t * @param    [optional] maxScale        Defines the default max color transform of the node, when in global mode. Defaults to 1.\r\n\t * @param    [optional] cycleDuration   Defines the default duration of the animation in seconds, used as a period independent of particle duration when in global mode. Defaults to 1.\r\n\t * @param    [optional] cyclePhase      Defines the default phase of the cycle in degrees, used as the starting offset of the cycle when in global mode. Defaults to 0.\r\n\t */\r\n\tconstructor(mode:number, usesCycle:boolean, usesPhase:boolean, minScale:number = 1, maxScale:number = 1, cycleDuration:number = 1, cyclePhase:number = 0)\r\n\t{\r\n\t\tsuper(\"ParticleScale\", mode, (usesCycle && usesPhase)? 4 : ((usesCycle || usesPhase)? 3 : 2), 3);\r\n\r\n\t\tthis._pStateClass = ParticleScaleState;\r\n\r\n\t\tthis._iUsesCycle = usesCycle;\r\n\t\tthis._iUsesPhase = usesPhase;\r\n\r\n\t\tthis._iMinScale = minScale;\r\n\t\tthis._iMaxScale = maxScale;\r\n\t\tthis._iCycleDuration = cycleDuration;\r\n\t\tthis._iCyclePhase = cyclePhase;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAGALVertexCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\r\n\t{\r\n\t\tvar code:string = \"\";\r\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeVertexSingleTemp();\r\n\r\n\t\tvar scaleRegister:ShaderRegisterElement = (this._pMode == ParticlePropertiesMode.GLOBAL)? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\r\n\t\tanimationRegisterData.setRegisterIndex(this, ParticleScaleState.SCALE_INDEX, scaleRegister.index);\r\n\r\n\t\tif (this._iUsesCycle) {\r\n\t\t\tcode += \"mul \" + temp + \",\" + animationRegisterData.vertexTime + \",\" + scaleRegister + \".z\\n\";\r\n\r\n\t\t\tif (this._iUsesPhase)\r\n\t\t\t\tcode += \"add \" + temp + \",\" + temp + \",\" + scaleRegister + \".w\\n\";\r\n\r\n\t\t\tcode += \"sin \" + temp + \",\" + temp + \"\\n\";\r\n\t\t}\r\n\r\n\t\tcode += \"mul \" + temp + \",\" + scaleRegister + \".y,\" + ((this._iUsesCycle)? temp : animationRegisterData.vertexLife) + \"\\n\";\r\n\t\tcode += \"add \" + temp + \",\" + scaleRegister + \".x,\" + temp + \"\\n\";\r\n\t\tcode += \"mul \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp + \"\\n\";\r\n\r\n\t\treturn code;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAnimationState(animator:AnimatorBase):ParticleScaleState\r\n\t{\r\n\t\treturn <ParticleScaleState> animator.getAnimationState(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iGeneratePropertyOfOneParticle(param:ParticleProperties):void\r\n\t{\r\n\t\tvar scale:Vector3D = param[ParticleScaleNode.SCALE_VECTOR3D];\r\n\t\tif (!scale)\r\n\t\t\tthrow(new Error(\"there is no \" + ParticleScaleNode.SCALE_VECTOR3D + \" in param!\"));\r\n\r\n\t\tif (this._iUsesCycle) {\r\n\t\t\tthis._pOneData[0] = (scale.x + scale.y)/2;\r\n\t\t\tthis._pOneData[1] = Math.abs(scale.x - scale.y)/2;\r\n\t\t\tif (scale.z <= 0)\r\n\t\t\t\tthrow(new Error(\"the cycle duration must be greater than zero\"));\r\n\t\t\tthis._pOneData[2] = Math.PI*2/scale.z;\r\n\t\t\tif (this._iUsesPhase)\r\n\t\t\t\tthis._pOneData[3] = scale.w*Math.PI/180;\r\n\t\t} else {\r\n\t\t\tthis._pOneData[0] = scale.x;\r\n\t\t\tthis._pOneData[1] = scale.y - scale.x;\r\n\t\t}\r\n\t}\r\n}",
    "import {ColorTransform}\t\t\t\t\tfrom \"awayjs-core/lib/geom/ColorTransform\";\r\n\r\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {ColorSegmentPoint}\t\t\t\tfrom \"../../animators/data/ColorSegmentPoint\";\r\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\r\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\r\nimport {ParticleSegmentedColorState}\t\tfrom \"../../animators/states/ParticleSegmentedColorState\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\r\n\r\n/**\r\n *\r\n */\r\nexport class ParticleSegmentedColorNode extends ParticleNodeBase\r\n{\r\n\t/** @private */\r\n\tpublic _iUsesMultiplier:boolean;\r\n\t/** @private */\r\n\tpublic _iUsesOffset:boolean;\r\n\t/** @private */\r\n\tpublic _iStartColor:ColorTransform;\r\n\t/** @private */\r\n\tpublic _iEndColor:ColorTransform;\r\n\t/** @private */\r\n\tpublic _iNumSegmentPoint:number;\r\n\t/** @private */\r\n\tpublic _iSegmentPoints:Array<ColorSegmentPoint>;\r\n\r\n\tconstructor(usesMultiplier:boolean, usesOffset:boolean, numSegmentPoint:number, startColor:ColorTransform, endColor:ColorTransform, segmentPoints:Array<ColorSegmentPoint>)\r\n\t{\r\n\t\t//because of the stage3d register limitation, it only support the global mode\r\n\t\tsuper(\"ParticleSegmentedColor\", ParticlePropertiesMode.GLOBAL, 0, ParticleAnimationSet.COLOR_PRIORITY);\r\n\r\n\t\tthis._pStateClass = ParticleSegmentedColorState;\r\n\r\n\t\tif (numSegmentPoint > 4)\r\n\t\t\tthrow(new Error(\"the numSegmentPoint must be less or equal 4\"));\r\n\t\tthis._iUsesMultiplier = usesMultiplier;\r\n\t\tthis._iUsesOffset = usesOffset;\r\n\t\tthis._iNumSegmentPoint = numSegmentPoint;\r\n\t\tthis._iStartColor = startColor;\r\n\t\tthis._iEndColor = endColor;\r\n\t\tthis._iSegmentPoints = segmentPoints;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iProcessAnimationSetting(particleAnimationSet:ParticleAnimationSet):void\r\n\t{\r\n\t\tif (this._iUsesMultiplier)\r\n\t\t\tparticleAnimationSet.hasColorMulNode = true;\r\n\t\tif (this._iUsesOffset)\r\n\t\t\tparticleAnimationSet.hasColorAddNode = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAGALVertexCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\r\n\t{\r\n\t\tvar code:string = \"\";\r\n\t\tif (shader.usesFragmentAnimation) {\r\n\t\t\tvar accMultiplierColor:ShaderRegisterElement;\r\n\t\t\t//var accOffsetColor:ShaderRegisterElement;\r\n\t\t\tif (this._iUsesMultiplier) {\r\n\t\t\t\taccMultiplierColor = registerCache.getFreeVertexVectorTemp();\r\n\t\t\t\tregisterCache.addVertexTempUsages(accMultiplierColor, 1);\r\n\t\t\t}\r\n\r\n\t\t\tvar tempColor:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\t\tregisterCache.addVertexTempUsages(tempColor, 1);\r\n\r\n\t\t\tvar temp:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\t\tvar accTime:ShaderRegisterElement = new ShaderRegisterElement(temp.regName, temp.index, 0);\r\n\t\t\tvar tempTime:ShaderRegisterElement = new ShaderRegisterElement(temp.regName, temp.index, 1);\r\n\r\n\t\t\tif (this._iUsesMultiplier)\r\n\t\t\t\tregisterCache.removeVertexTempUsage(accMultiplierColor);\r\n\r\n\t\t\tregisterCache.removeVertexTempUsage(tempColor);\r\n\r\n\t\t\t//for saving all the life values (at most 4)\r\n\t\t\tvar lifeTimeRegister:ShaderRegisterElement = registerCache.getFreeVertexConstant();\r\n\t\t\tanimationRegisterData.setRegisterIndex(this, ParticleSegmentedColorState.TIME_DATA_INDEX, lifeTimeRegister.index);\r\n\r\n\t\t\tvar i:number;\r\n\r\n\t\t\tvar startMulValue:ShaderRegisterElement;\r\n\t\t\tvar deltaMulValues:Array<ShaderRegisterElement>;\r\n\t\t\tif (this._iUsesMultiplier) {\r\n\t\t\t\tstartMulValue = registerCache.getFreeVertexConstant();\r\n\t\t\t\tanimationRegisterData.setRegisterIndex(this, ParticleSegmentedColorState.START_MULTIPLIER_INDEX, startMulValue.index);\r\n\t\t\t\tdeltaMulValues = new Array<ShaderRegisterElement>();\r\n\t\t\t\tfor (i = 0; i < this._iNumSegmentPoint + 1; i++)\r\n\t\t\t\t\tdeltaMulValues.push(registerCache.getFreeVertexConstant());\r\n\t\t\t}\r\n\r\n\t\t\tvar startOffsetValue:ShaderRegisterElement;\r\n\t\t\tvar deltaOffsetValues:Array<ShaderRegisterElement>;\r\n\t\t\tif (this._iUsesOffset) {\r\n\t\t\t\tstartOffsetValue = registerCache.getFreeVertexConstant();\r\n\t\t\t\tanimationRegisterData.setRegisterIndex(this, ParticleSegmentedColorState.START_OFFSET_INDEX, startOffsetValue.index);\r\n\t\t\t\tdeltaOffsetValues = new Array<ShaderRegisterElement>();\r\n\t\t\t\tfor (i = 0; i < this._iNumSegmentPoint + 1; i++)\r\n\t\t\t\t\tdeltaOffsetValues.push(registerCache.getFreeVertexConstant());\r\n\t\t\t}\r\n\r\n\t\t\tif (this._iUsesMultiplier)\r\n\t\t\t\tcode += \"mov \" + accMultiplierColor + \",\" + startMulValue + \"\\n\";\r\n\t\t\tif (this._iUsesOffset)\r\n\t\t\t\tcode += \"add \" + animationRegisterData.colorAddTarget + \",\" + animationRegisterData.colorAddTarget + \",\" + startOffsetValue + \"\\n\";\r\n\r\n\t\t\tfor (i = 0; i < this._iNumSegmentPoint; i++) {\r\n\t\t\t\tswitch (i) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tcode += \"min \" + tempTime + \",\" + animationRegisterData.vertexLife + \",\" + lifeTimeRegister + \".x\\n\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tcode += \"sub \" + accTime + \",\" + animationRegisterData.vertexLife + \",\" + lifeTimeRegister + \".x\\n\";\r\n\t\t\t\t\t\tcode += \"max \" + tempTime + \",\" + accTime + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n\t\t\t\t\t\tcode += \"min \" + tempTime + \",\" + tempTime + \",\" + lifeTimeRegister + \".y\\n\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tcode += \"sub \" + accTime + \",\" + accTime + \",\" + lifeTimeRegister + \".y\\n\";\r\n\t\t\t\t\t\tcode += \"max \" + tempTime + \",\" + accTime + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n\t\t\t\t\t\tcode += \"min \" + tempTime + \",\" + tempTime + \",\" + lifeTimeRegister + \".z\\n\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tcode += \"sub \" + accTime + \",\" + accTime + \",\" + lifeTimeRegister + \".z\\n\";\r\n\t\t\t\t\t\tcode += \"max \" + tempTime + \",\" + accTime + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n\t\t\t\t\t\tcode += \"min \" + tempTime + \",\" + tempTime + \",\" + lifeTimeRegister + \".w\\n\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif (this._iUsesMultiplier) {\r\n\t\t\t\t\tcode += \"mul \" + tempColor + \",\" + tempTime + \",\" + deltaMulValues[i] + \"\\n\";\r\n\t\t\t\t\tcode += \"add \" + accMultiplierColor + \",\" + accMultiplierColor + \",\" + tempColor + \"\\n\";\r\n\t\t\t\t}\r\n\t\t\t\tif (this._iUsesOffset) {\r\n\t\t\t\t\tcode += \"mul \" + tempColor + \",\" + tempTime + \",\" + deltaOffsetValues[i] + \"\\n\";\r\n\t\t\t\t\tcode += \"add \" + animationRegisterData.colorAddTarget + \",\" + animationRegisterData.colorAddTarget + \",\" + tempColor + \"\\n\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//for the last segment:\r\n\t\t\tif (this._iNumSegmentPoint == 0)\r\n\t\t\t\ttempTime = animationRegisterData.vertexLife;\r\n\t\t\telse {\r\n\t\t\t\tswitch (this._iNumSegmentPoint) {\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tcode += \"sub \" + accTime + \",\" + animationRegisterData.vertexLife + \",\" + lifeTimeRegister + \".x\\n\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tcode += \"sub \" + accTime + \",\" + accTime + \",\" + lifeTimeRegister + \".y\\n\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tcode += \"sub \" + accTime + \",\" + accTime + \",\" + lifeTimeRegister + \".z\\n\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\tcode += \"sub \" + accTime + \",\" + accTime + \",\" + lifeTimeRegister + \".w\\n\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcode += \"max \" + tempTime + \",\" + accTime + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n\t\t\t}\r\n\t\t\tif (this._iUsesMultiplier) {\r\n\t\t\t\tcode += \"mul \" + tempColor + \",\" + tempTime + \",\" + deltaMulValues[this._iNumSegmentPoint] + \"\\n\";\r\n\t\t\t\tcode += \"add \" + accMultiplierColor + \",\" + accMultiplierColor + \",\" + tempColor + \"\\n\";\r\n\t\t\t\tcode += \"mul \" + animationRegisterData.colorMulTarget + \",\" + animationRegisterData.colorMulTarget + \",\" + accMultiplierColor + \"\\n\";\r\n\t\t\t}\r\n\t\t\tif (this._iUsesOffset) {\r\n\t\t\t\tcode += \"mul \" + tempColor + \",\" + tempTime + \",\" + deltaOffsetValues[this._iNumSegmentPoint] + \"\\n\";\r\n\t\t\t\tcode += \"add \" + animationRegisterData.colorAddTarget + \",\" + animationRegisterData.colorAddTarget + \",\" + tempColor + \"\\n\";\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\treturn code;\r\n\t}\r\n\r\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\r\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {ParticleProperties}\t\t\t\tfrom \"../../animators/data/ParticleProperties\";\r\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\r\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\r\nimport {ParticleSpriteSheetState}\t\t\tfrom \"../../animators/states/ParticleSpriteSheetState\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\r\n\r\n/**\r\n * A particle animation node used when a spritesheet texture is required to animate the particle.\r\n * NB: to enable use of this node, the <code>repeat</code> property on the material has to be set to true.\r\n */\r\nexport class ParticleSpriteSheetNode extends ParticleNodeBase\r\n{\r\n\t/** @private */\r\n\tpublic _iUsesCycle:boolean;\r\n\r\n\t/** @private */\r\n\tpublic _iUsesPhase:boolean;\r\n\r\n\t/** @private */\r\n\tpublic _iTotalFrames:number;\r\n\t/** @private */\r\n\tpublic _iNumColumns:number;\r\n\t/** @private */\r\n\tpublic _iNumRows:number;\r\n\t/** @private */\r\n\tpublic _iCycleDuration:number;\r\n\t/** @private */\r\n\tpublic _iCyclePhase:number;\r\n\r\n\t/**\r\n\t * Reference for spritesheet node properties on a single particle (when in local property mode).\r\n\t * Expects a <code>Vector3D</code> representing the cycleDuration (x), optional phaseTime (y).\r\n\t */\r\n\tpublic static UV_VECTOR3D:string = \"UVVector3D\";\r\n\r\n\t/**\r\n\t * Defines the number of columns in the spritesheet, when in global mode. Defaults to 1. Read only.\r\n\t */\r\n\tpublic get numColumns():number\r\n\t{\r\n\t\treturn this._iNumColumns;\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the number of rows in the spritesheet, when in global mode. Defaults to 1. Read only.\r\n\t */\r\n\tpublic get numRows():number\r\n\t{\r\n\t\treturn this._iNumRows;\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the total number of frames used by the spritesheet, when in global mode. Defaults to the number defined by numColumns and numRows. Read only.\r\n\t */\r\n\tpublic get totalFrames():number\r\n\t{\r\n\t\treturn this._iTotalFrames;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new <code>ParticleSpriteSheetNode</code>\r\n\t *\r\n\t * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\r\n\t * @param    [optional] numColumns      Defines the number of columns in the spritesheet, when in global mode. Defaults to 1.\r\n\t * @param    [optional] numRows         Defines the number of rows in the spritesheet, when in global mode. Defaults to 1.\r\n\t * @param    [optional] cycleDuration   Defines the default cycle duration in seconds, when in global mode. Defaults to 1.\r\n\t * @param    [optional] cyclePhase      Defines the default cycle phase, when in global mode. Defaults to 0.\r\n\t * @param    [optional] totalFrames     Defines the total number of frames used by the spritesheet, when in global mode. Defaults to the number defined by numColumns and numRows.\r\n\t * @param    [optional] looping         Defines whether the spritesheet animation is set to loop indefinitely. Defaults to true.\r\n\t */\r\n\tconstructor(mode:number, usesCycle:boolean, usesPhase:boolean, numColumns:number = 1, numRows:number = 1, cycleDuration:number = 1, cyclePhase:number = 0, totalFrames:number = Number.MAX_VALUE)\r\n\t{\r\n\t\tsuper(\"ParticleSpriteSheet\", mode, usesCycle? (usesPhase? 3 : 2) : 1, ParticleAnimationSet.POST_PRIORITY + 1);\r\n\r\n\t\tthis._pStateClass = ParticleSpriteSheetState;\r\n\r\n\t\tthis._iUsesCycle = usesCycle;\r\n\t\tthis._iUsesPhase = usesPhase;\r\n\r\n\t\tthis._iNumColumns = numColumns;\r\n\t\tthis._iNumRows = numRows;\r\n\t\tthis._iCyclePhase = cyclePhase;\r\n\t\tthis._iCycleDuration = cycleDuration;\r\n\t\tthis._iTotalFrames = Math.min(totalFrames, numColumns*numRows);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAGALUVCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\r\n\t{\r\n\t\t//get 2 vc\r\n\t\tvar uvParamConst1:ShaderRegisterElement = registerCache.getFreeVertexConstant();\r\n\t\tvar uvParamConst2:ShaderRegisterElement = (this._pMode == ParticlePropertiesMode.GLOBAL)? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\r\n\t\tanimationRegisterData.setRegisterIndex(this, ParticleSpriteSheetState.UV_INDEX_0, uvParamConst1.index);\r\n\t\tanimationRegisterData.setRegisterIndex(this, ParticleSpriteSheetState.UV_INDEX_1, uvParamConst2.index);\r\n\r\n\t\tvar uTotal:ShaderRegisterElement = new ShaderRegisterElement(uvParamConst1.regName, uvParamConst1.index, 0);\r\n\t\tvar uStep:ShaderRegisterElement = new ShaderRegisterElement(uvParamConst1.regName, uvParamConst1.index, 1);\r\n\t\tvar vStep:ShaderRegisterElement = new ShaderRegisterElement(uvParamConst1.regName, uvParamConst1.index, 2);\r\n\r\n\t\tvar uSpeed:ShaderRegisterElement = new ShaderRegisterElement(uvParamConst2.regName, uvParamConst2.index, 0);\r\n\t\tvar cycle:ShaderRegisterElement = new ShaderRegisterElement(uvParamConst2.regName, uvParamConst2.index, 1);\r\n\t\tvar phaseTime:ShaderRegisterElement = new ShaderRegisterElement(uvParamConst2.regName, uvParamConst2.index, 2);\r\n\r\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\tvar time:ShaderRegisterElement = new ShaderRegisterElement(temp.regName, temp.index, 0);\r\n\t\tvar vOffset:ShaderRegisterElement = new ShaderRegisterElement(temp.regName, temp.index, 1);\r\n\t\ttemp = new ShaderRegisterElement(temp.regName, temp.index, 2);\r\n\t\tvar temp2:ShaderRegisterElement = new ShaderRegisterElement(temp.regName, temp.index, 3);\r\n\r\n\t\tvar u:ShaderRegisterElement = new ShaderRegisterElement(animationRegisterData.uvTarget.regName, animationRegisterData.uvTarget.index, 0);\r\n\t\tvar v:ShaderRegisterElement = new ShaderRegisterElement(animationRegisterData.uvTarget.regName, animationRegisterData.uvTarget.index, 1);\r\n\r\n\t\tvar code:string = \"\";\r\n\t\t//scale uv\r\n\t\tcode += \"mul \" + u + \",\" + u + \",\" + uStep + \"\\n\";\r\n\t\tif (this._iNumRows > 1)\r\n\t\t\tcode += \"mul \" + v + \",\" + v + \",\" + vStep + \"\\n\";\r\n\r\n\t\tif (this._iUsesCycle) {\r\n\t\t\tif (this._iUsesPhase)\r\n\t\t\t\tcode += \"add \" + time + \",\" + animationRegisterData.vertexTime + \",\" + phaseTime + \"\\n\";\r\n\t\t\telse\r\n\t\t\t\tcode += \"mov \" + time + \",\" + animationRegisterData.vertexTime + \"\\n\";\r\n\t\t\tcode += \"div \" + time + \",\" + time + \",\" + cycle + \"\\n\";\r\n\t\t\tcode += \"frc \" + time + \",\" + time + \"\\n\";\r\n\t\t\tcode += \"mul \" + time + \",\" + time + \",\" + cycle + \"\\n\";\r\n\t\t\tcode += \"mul \" + temp + \",\" + time + \",\" + uSpeed + \"\\n\";\r\n\t\t} else\r\n\t\t\tcode += \"mul \" + temp.toString() + \",\" + animationRegisterData.vertexLife + \",\" + uTotal + \"\\n\";\r\n\r\n\t\tif (this._iNumRows > 1) {\r\n\t\t\tcode += \"frc \" + temp2 + \",\" + temp + \"\\n\";\r\n\t\t\tcode += \"sub \" + vOffset + \",\" + temp + \",\" + temp2 + \"\\n\";\r\n\t\t\tcode += \"mul \" + vOffset + \",\" + vOffset + \",\" + vStep + \"\\n\";\r\n\t\t\tcode += \"add \" + v + \",\" + v + \",\" + vOffset + \"\\n\";\r\n\t\t}\r\n\r\n\t\tcode += \"div \" + temp2 + \",\" + temp + \",\" + uStep + \"\\n\";\r\n\t\tcode += \"frc \" + temp + \",\" + temp2 + \"\\n\";\r\n\t\tcode += \"sub \" + temp2 + \",\" + temp2 + \",\" + temp + \"\\n\";\r\n\t\tcode += \"mul \" + temp + \",\" + temp2 + \",\" + uStep + \"\\n\";\r\n\r\n\t\tif (this._iNumRows > 1)\r\n\t\t\tcode += \"frc \" + temp + \",\" + temp + \"\\n\";\r\n\t\tcode += \"add \" + u + \",\" + u + \",\" + temp + \"\\n\";\r\n\r\n\t\treturn code;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAnimationState(animator:AnimatorBase):ParticleSpriteSheetState\r\n\t{\r\n\t\treturn <ParticleSpriteSheetState> animator.getAnimationState(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iProcessAnimationSetting(particleAnimationSet:ParticleAnimationSet):void\r\n\t{\r\n\t\tparticleAnimationSet.hasUVNode = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iGeneratePropertyOfOneParticle(param:ParticleProperties):void\r\n\t{\r\n\t\tif (this._iUsesCycle) {\r\n\t\t\tvar uvCycle:Vector3D = param[ParticleSpriteSheetNode.UV_VECTOR3D];\r\n\t\t\tif (!uvCycle)\r\n\t\t\t\tthrow(new Error(\"there is no \" + ParticleSpriteSheetNode.UV_VECTOR3D + \" in param!\"));\r\n\t\t\tif (uvCycle.x <= 0)\r\n\t\t\t\tthrow(new Error(\"the cycle duration must be greater than zero\"));\r\n\t\t\tvar uTotal:number = this._iTotalFrames/this._iNumColumns;\r\n\t\t\tthis._pOneData[0] = uTotal/uvCycle.x;\r\n\t\t\tthis._pOneData[1] = uvCycle.x;\r\n\t\t\tif (this._iUsesPhase)\r\n\t\t\t\tthis._pOneData[2] = uvCycle.y;\r\n\t\t}\r\n\t}\r\n}",
    "import {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\r\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {ParticleProperties}\t\t\t\tfrom \"../../animators/data/ParticleProperties\";\r\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\r\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\r\nimport {ParticleTimeState}\t\t\t\tfrom \"../../animators/states/ParticleTimeState\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\r\n\r\n/**\r\n * A particle animation node used as the base node for timekeeping inside a particle. Automatically added to a particle animation set on instatiation.\r\n */\r\nexport class ParticleTimeNode extends ParticleNodeBase\r\n{\r\n\t/** @private */\r\n\tpublic _iUsesDuration:boolean;\r\n\t/** @private */\r\n\tpublic _iUsesDelay:boolean;\r\n\t/** @private */\r\n\tpublic _iUsesLooping:boolean;\r\n\r\n\t/**\r\n\t * Creates a new <code>ParticleTimeNode</code>\r\n\t *\r\n\t * @param    [optional] usesDuration    Defines whether the node uses the <code>duration</code> data in the static properties to determine how long a particle is visible for. Defaults to false.\r\n\t * @param    [optional] usesDelay       Defines whether the node uses the <code>delay</code> data in the static properties to determine how long a particle is hidden for. Defaults to false. Requires <code>usesDuration</code> to be true.\r\n\t * @param    [optional] usesLooping     Defines whether the node creates a looping timeframe for each particle determined by the <code>startTime</code>, <code>duration</code> and <code>delay</code> data in the static properties function. Defaults to false. Requires <code>usesLooping</code> to be true.\r\n\t */\r\n\tconstructor(usesDuration:boolean = false, usesLooping:boolean = false, usesDelay:boolean = false)\r\n\t{\r\n\t\tsuper(\"ParticleTime\", ParticlePropertiesMode.LOCAL_STATIC, 4, 0);\r\n\t\t\r\n\t\tthis._pStateClass = ParticleTimeState;\r\n\r\n\t\tthis._iUsesDuration = usesDuration;\r\n\t\tthis._iUsesLooping = usesLooping;\r\n\t\tthis._iUsesDelay = usesDelay;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAGALVertexCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\r\n\t{\r\n\t\tvar timeStreamRegister:ShaderRegisterElement = registerCache.getFreeVertexAttribute(); //timeStreamRegister.x is start，timeStreamRegister.y is during time\r\n\t\tanimationRegisterData.setRegisterIndex(this, ParticleTimeState.TIME_STREAM_INDEX, timeStreamRegister.index);\r\n\t\tvar timeConst:ShaderRegisterElement = registerCache.getFreeVertexConstant();\r\n\t\tanimationRegisterData.setRegisterIndex(this, ParticleTimeState.TIME_CONSTANT_INDEX, timeConst.index);\r\n\r\n\t\tvar code:string = \"\";\r\n\t\tcode += \"sub \" + animationRegisterData.vertexTime + \",\" + timeConst + \",\" + timeStreamRegister + \".x\\n\";\r\n\t\t//if time=0,set the position to zero.\r\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeVertexSingleTemp();\r\n\t\tcode += \"sge \" + temp + \",\" + animationRegisterData.vertexTime + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\r\n\t\tcode += \"mul \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp + \"\\n\";\r\n\t\tif (this._iUsesDuration) {\r\n\t\t\tif (this._iUsesLooping) {\r\n\t\t\t\tvar div:ShaderRegisterElement = registerCache.getFreeVertexSingleTemp();\r\n\t\t\t\tif (this._iUsesDelay) {\r\n\t\t\t\t\tcode += \"div \" + div + \",\" + animationRegisterData.vertexTime + \",\" + timeStreamRegister + \".z\\n\";\r\n\t\t\t\t\tcode += \"frc \" + div + \",\" + div + \"\\n\";\r\n\t\t\t\t\tcode += \"mul \" + animationRegisterData.vertexTime + \",\" + div + \",\" + timeStreamRegister + \".z\\n\";\r\n\t\t\t\t\tcode += \"slt \" + div + \",\" + animationRegisterData.vertexTime + \",\" + timeStreamRegister + \".y\\n\";\r\n\t\t\t\t\tcode += \"mul \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + div + \"\\n\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcode += \"mul \" + div + \",\" + animationRegisterData.vertexTime + \",\" + timeStreamRegister + \".w\\n\";\r\n\t\t\t\t\tcode += \"frc \" + div + \",\" + div + \"\\n\";\r\n\t\t\t\t\tcode += \"mul \" + animationRegisterData.vertexTime + \",\" + div + \",\" + timeStreamRegister + \".y\\n\";\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tvar sge:ShaderRegisterElement = registerCache.getFreeVertexSingleTemp();\r\n\t\t\t\tcode += \"sge \" + sge + \",\" + timeStreamRegister + \".y,\" + animationRegisterData.vertexTime + \"\\n\";\r\n\t\t\t\tcode += \"mul \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + sge + \"\\n\";\r\n\t\t\t}\r\n\t\t}\r\n\t\tcode += \"mul \" + animationRegisterData.vertexLife + \",\" + animationRegisterData.vertexTime + \",\" + timeStreamRegister + \".w\\n\";\r\n\t\treturn code;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAnimationState(animator:AnimatorBase):ParticleTimeState\r\n\t{\r\n\t\treturn <ParticleTimeState> animator.getAnimationState(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iGeneratePropertyOfOneParticle(param:ParticleProperties):void\r\n\t{\r\n\t\tthis._pOneData[0] = param.startTime;\r\n\t\tthis._pOneData[1] = param.duration;\r\n\t\tthis._pOneData[2] = param.delay + param.duration;\r\n\t\tthis._pOneData[3] = 1/param.duration;\r\n\r\n\t}\r\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\r\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\r\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\r\nimport {ParticleUVState}\t\t\t\t\tfrom \"../../animators/states/ParticleUVState\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\r\n\r\n/**\r\n * A particle animation node used to control the UV offset and scale of a particle over time.\r\n */\r\nexport class ParticleUVNode extends ParticleNodeBase\r\n{\r\n\t/** @private */\r\n\tpublic _iUvData:Vector3D;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic static U_AXIS:string = \"x\";\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic static V_AXIS:string = \"y\";\r\n\r\n\tprivate _cycle:number;\r\n\tprivate _scale:number;\r\n\tprivate _axis:string;\r\n\r\n\t/**\r\n\t * Creates a new <code>ParticleTimeNode</code>\r\n\t *\r\n\t * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\r\n\t * @param    [optional] cycle           Defines whether the time track is in loop mode. Defaults to false.\r\n\t * @param    [optional] scale           Defines whether the time track is in loop mode. Defaults to false.\r\n\t * @param    [optional] axis            Defines whether the time track is in loop mode. Defaults to false.\r\n\t */\r\n\tconstructor(mode:number, cycle:number = 1, scale:number = 1, axis:string = \"x\")\r\n\t{\r\n\t\t//because of the stage3d register limitation, it only support the global mode\r\n\t\tsuper(\"ParticleUV\", ParticlePropertiesMode.GLOBAL, 4, ParticleAnimationSet.POST_PRIORITY + 1);\r\n\r\n\t\tthis._pStateClass = ParticleUVState;\r\n\r\n\t\tthis._cycle = cycle;\r\n\t\tthis._scale = scale;\r\n\t\tthis._axis = axis;\r\n\r\n\t\tthis.updateUVData();\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic get cycle():number\r\n\t{\r\n\t\treturn this._cycle;\r\n\t}\r\n\r\n\tpublic set cycle(value:number)\r\n\t{\r\n\t\tthis._cycle = value;\r\n\r\n\t\tthis.updateUVData();\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic get scale():number\r\n\t{\r\n\t\treturn this._scale;\r\n\t}\r\n\r\n\tpublic set scale(value:number)\r\n\t{\r\n\t\tthis._scale = value;\r\n\r\n\t\tthis.updateUVData();\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic get axis():string\r\n\t{\r\n\t\treturn this._axis;\r\n\t}\r\n\r\n\tpublic set axis(value:string)\r\n\t{\r\n\t\tthis._axis = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAGALUVCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\r\n\t{\r\n\t\tvar code:string = \"\";\r\n\r\n\t\tvar uvConst:ShaderRegisterElement = registerCache.getFreeVertexConstant();\r\n\t\tanimationRegisterData.setRegisterIndex(this, ParticleUVState.UV_INDEX, uvConst.index);\r\n\r\n\t\tvar axisIndex:number = this._axis == \"x\"? 0 : (this._axis == \"y\"? 1 : 2);\r\n\r\n\t\tvar target:ShaderRegisterElement = new ShaderRegisterElement(animationRegisterData.uvTarget.regName, animationRegisterData.uvTarget.index, axisIndex);\r\n\r\n\t\tvar sin:ShaderRegisterElement = registerCache.getFreeVertexSingleTemp();\r\n\r\n\t\tif (this._scale != 1)\r\n\t\t\tcode += \"mul \" + target + \",\" + target + \",\" + uvConst + \".y\\n\";\r\n\r\n\t\tcode += \"mul \" + sin + \",\" + animationRegisterData.vertexTime + \",\" + uvConst + \".x\\n\";\r\n\t\tcode += \"sin \" + sin + \",\" + sin + \"\\n\";\r\n\t\tcode += \"add \" + target + \",\" + target + \",\" + sin + \"\\n\";\r\n\r\n\t\treturn code;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAnimationState(animator:AnimatorBase):ParticleUVState\r\n\t{\r\n\t\treturn <ParticleUVState> animator.getAnimationState(this);\r\n\t}\r\n\r\n\tprivate updateUVData():void\r\n\t{\r\n\t\tthis._iUvData = new Vector3D(Math.PI*2/this._cycle, this._scale, 0, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iProcessAnimationSetting(particleAnimationSet:ParticleAnimationSet):void\r\n\t{\r\n\t\tparticleAnimationSet.hasUVNode = true;\r\n\t}\r\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\r\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {ParticleProperties}\t\t\t\tfrom \"../../animators/data/ParticleProperties\";\r\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\r\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\r\nimport {ParticleVelocityState}\t\t\tfrom \"../../animators/states/ParticleVelocityState\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\r\n\r\n/**\r\n * A particle animation node used to set the starting velocity of a particle.\r\n */\r\nexport class ParticleVelocityNode extends ParticleNodeBase\r\n{\r\n\t/** @private */\r\n\tpublic _iVelocity:Vector3D;\r\n\r\n\t/**\r\n\t * Reference for velocity node properties on a single particle (when in local property mode).\r\n\t * Expects a <code>Vector3D</code> object representing the direction of movement on the particle.\r\n\t */\r\n\tpublic static VELOCITY_VECTOR3D:string = \"VelocityVector3D\";\r\n\r\n\t/**\r\n\t * Creates a new <code>ParticleVelocityNode</code>\r\n\t *\r\n\t * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\r\n\t * @param    [optional] velocity        Defines the default velocity vector of the node, used when in global mode.\r\n\t */\r\n\tconstructor(mode:number, velocity:Vector3D = null)\r\n\t{\r\n\t\tsuper(\"ParticleVelocity\", mode, 3);\r\n\r\n\t\tthis._pStateClass = ParticleVelocityState;\r\n\r\n\t\tthis._iVelocity = velocity || new Vector3D();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAGALVertexCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\r\n\t{\r\n\t\tvar velocityValue:ShaderRegisterElement = (this._pMode == ParticlePropertiesMode.GLOBAL)? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\r\n\t\tanimationRegisterData.setRegisterIndex(this, ParticleVelocityState.VELOCITY_INDEX, velocityValue.index);\r\n\r\n\t\tvar distance:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\tvar code:string = \"\";\r\n\t\tcode += \"mul \" + distance + \",\" + animationRegisterData.vertexTime + \",\" + velocityValue + \"\\n\";\r\n\t\tcode += \"add \" + animationRegisterData.positionTarget + \".xyz,\" + distance + \",\" + animationRegisterData.positionTarget + \".xyz\\n\";\r\n\r\n\t\tif (animationSet.needVelocity)\r\n\t\t\tcode += \"add \" + animationRegisterData.velocityTarget + \".xyz,\" + velocityValue + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz\\n\";\r\n\r\n\t\treturn code;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAnimationState(animator:AnimatorBase):ParticleVelocityState\r\n\t{\r\n\t\treturn <ParticleVelocityState> animator.getAnimationState(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iGeneratePropertyOfOneParticle(param:ParticleProperties):void\r\n\t{\r\n\t\tvar _tempVelocity:Vector3D = param[ParticleVelocityNode.VELOCITY_VECTOR3D];\r\n\t\tif (!_tempVelocity)\r\n\t\t\tthrow new Error(\"there is no \" + ParticleVelocityNode.VELOCITY_VECTOR3D + \" in param!\");\r\n\r\n\t\tthis._pOneData[0] = _tempVelocity.x;\r\n\t\tthis._pOneData[1] = _tempVelocity.y;\r\n\t\tthis._pOneData[2] = _tempVelocity.z;\r\n\t}\r\n}",
    "import {AnimationNodeBase}\t\t\t\tfrom \"awayjs-display/lib/animators/nodes/AnimationNodeBase\";\r\n\r\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\r\nimport {SkeletonBinaryLERPState}\t\t\tfrom \"../../animators/states/SkeletonBinaryLERPState\";\r\n\r\n/**\r\n * A skeleton animation node that uses two animation node inputs to blend a lineraly interpolated output of a skeleton pose.\r\n */\r\nexport class SkeletonBinaryLERPNode extends AnimationNodeBase\r\n{\r\n\t/**\r\n\t * Defines input node A to use for the blended output.\r\n\t */\r\n\tpublic inputA:AnimationNodeBase;\r\n\r\n\t/**\r\n\t * Defines input node B to use for the blended output.\r\n\t */\r\n\tpublic inputB:AnimationNodeBase;\r\n\r\n\t/**\r\n\t * Creates a new <code>SkeletonBinaryLERPNode</code> object.\r\n\t */\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tthis._pStateClass = SkeletonBinaryLERPState;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAnimationState(animator:AnimatorBase):SkeletonBinaryLERPState\r\n\t{\r\n\t\treturn <SkeletonBinaryLERPState> animator.getAnimationState(this);\r\n\t}\r\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\r\nimport {SkeletonPose}\t\t\t\t\t\tfrom \"../../animators/data/SkeletonPose\";\r\nimport {AnimationClipNodeBase}\t\t\tfrom \"../../animators/nodes/AnimationClipNodeBase\";\r\nimport {SkeletonClipState}\t\t\t\tfrom \"../../animators/states/SkeletonClipState\";\r\n\r\n/**\r\n * A skeleton animation node containing time-based animation data as individual skeleton poses.\r\n */\r\nexport class SkeletonClipNode extends AnimationClipNodeBase\r\n{\r\n\tprivate _frames:Array<SkeletonPose> = new Array<SkeletonPose>();\r\n\r\n\t/**\r\n\t * Determines whether to use SLERP equations (true) or LERP equations (false) in the calculation\r\n\t * of the output skeleton pose. Defaults to false.\r\n\t */\r\n\tpublic highQuality:boolean = false;\r\n\r\n\t/**\r\n\t * Returns a vector of skeleton poses representing the pose of each animation frame in the clip.\r\n\t */\r\n\tpublic get frames():Array<SkeletonPose>\r\n\t{\r\n\t\treturn this._frames;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new <code>SkeletonClipNode</code> object.\r\n\t */\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tthis._pStateClass = SkeletonClipState;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a skeleton pose frame to the internal timeline of the animation node.\r\n\t *\r\n\t * @param skeletonPose The skeleton pose object to add to the timeline of the node.\r\n\t * @param duration The specified duration of the frame in milliseconds.\r\n\t */\r\n\tpublic addFrame(skeletonPose:SkeletonPose, duration:number):void\r\n\t{\r\n\t\tthis._frames.push(skeletonPose);\r\n\t\tthis._pDurations.push(duration);\r\n\r\n\t\tthis._pNumFrames = this._pDurations.length;\r\n\r\n\t\tthis._pStitchDirty = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAnimationState(animator:AnimatorBase):SkeletonClipState\r\n\t{\r\n\t\treturn <SkeletonClipState> animator.getAnimationState(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pUpdateStitch():void\r\n\t{\r\n\t\tsuper._pUpdateStitch();\r\n\r\n\t\tvar i:number = this._pNumFrames - 1;\r\n\t\tvar p1:Vector3D, p2:Vector3D, delta:Vector3D;\r\n\t\twhile (i--) {\r\n\t\t\tthis._pTotalDuration += this._pDurations[i];\r\n\t\t\tp1 = this._frames[i].jointPoses[0].translation;\r\n\t\t\tp2 = this._frames[i + 1].jointPoses[0].translation;\r\n\t\t\tdelta = p2.subtract(p1);\r\n\t\t\tthis._pTotalDelta.x += delta.x;\r\n\t\t\tthis._pTotalDelta.y += delta.y;\r\n\t\t\tthis._pTotalDelta.z += delta.z;\r\n\t\t}\r\n\r\n\t\tif (this._pStitchFinalFrame || !this._pLooping) {\r\n\t\t\tthis._pTotalDuration += this._pDurations[this._pNumFrames - 1];\r\n\t\t\tp1 = this._frames[0].jointPoses[0].translation;\r\n\t\t\tp2 = this._frames[1].jointPoses[0].translation;\r\n\t\t\tdelta = p2.subtract(p1);\r\n\t\t\tthis._pTotalDelta.x += delta.x;\r\n\t\t\tthis._pTotalDelta.y += delta.y;\r\n\t\t\tthis._pTotalDelta.z += delta.z;\r\n\t\t}\r\n\t}\r\n}",
    "import {AnimationNodeBase}\t\t\t\tfrom \"awayjs-display/lib/animators/nodes/AnimationNodeBase\";\r\n\r\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\r\nimport {SkeletonDifferenceState}\t\t\tfrom \"../../animators/states/SkeletonDifferenceState\";\r\n\r\n/**\r\n * A skeleton animation node that uses a difference input pose with a base input pose to blend a linearly interpolated output of a skeleton pose.\r\n */\r\nexport class SkeletonDifferenceNode extends AnimationNodeBase\r\n{\r\n\t/**\r\n\t * Defines a base input node to use for the blended output.\r\n\t */\r\n\tpublic baseInput:AnimationNodeBase;\r\n\r\n\t/**\r\n\t * Defines a difference input node to use for the blended output.\r\n\t */\r\n\tpublic differenceInput:AnimationNodeBase;\r\n\r\n\t/**\r\n\t * Creates a new <code>SkeletonAdditiveNode</code> object.\r\n\t */\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tthis._pStateClass = SkeletonDifferenceState;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAnimationState(animator:AnimatorBase):SkeletonDifferenceState\r\n\t{\r\n\t\treturn <SkeletonDifferenceState> animator.getAnimationState(this);\r\n\t}\r\n}\r\n\r\nexport default SkeletonDifferenceNode",
    "import {AnimationNodeBase}\t\t\t\tfrom \"awayjs-display/lib/animators/nodes/AnimationNodeBase\";\r\n\r\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\r\nimport {SkeletonDirectionalState}\t\t\tfrom \"../../animators/states/SkeletonDirectionalState\";\r\n\r\n/**\r\n * A skeleton animation node that uses four directional input poses with an input direction to blend a linearly interpolated output of a skeleton pose.\r\n */\r\nexport class SkeletonDirectionalNode extends AnimationNodeBase\r\n{\r\n\t/**\r\n\t * Defines the forward configured input node to use for the blended output.\r\n\t */\r\n\tpublic forward:AnimationNodeBase;\r\n\r\n\t/**\r\n\t * Defines the backwards configured input node to use for the blended output.\r\n\t */\r\n\tpublic backward:AnimationNodeBase;\r\n\r\n\t/**\r\n\t * Defines the left configured input node to use for the blended output.\r\n\t */\r\n\tpublic left:AnimationNodeBase;\r\n\r\n\t/**\r\n\t * Defines the right configured input node to use for the blended output.\r\n\t */\r\n\tpublic right:AnimationNodeBase;\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tthis._pStateClass = SkeletonDirectionalState;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAnimationState(animator:AnimatorBase):SkeletonDirectionalState\r\n\t{\r\n\t\treturn <SkeletonDirectionalState> animator.getAnimationState(this);\r\n\t}\r\n\r\n}",
    "import {AnimationNodeBase}\t\t\t\tfrom \"awayjs-display/lib/animators/nodes/AnimationNodeBase\";\r\n\r\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\r\nimport {SkeletonNaryLERPState}\t\t\tfrom \"../../animators/states/SkeletonNaryLERPState\";\r\n\r\n/**\r\n * A skeleton animation node that uses an n-dimensional array of animation node inputs to blend a lineraly interpolated output of a skeleton pose.\r\n */\r\nexport class SkeletonNaryLERPNode extends AnimationNodeBase\r\n{\r\n\tpublic _iInputs:Array<AnimationNodeBase> = new Array<AnimationNodeBase>();\r\n\r\n\tprivate _numInputs:number;\r\n\r\n\tpublic get numInputs():number\r\n\t{\r\n\t\treturn this._numInputs;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new <code>SkeletonNaryLERPNode</code> object.\r\n\t */\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tthis._pStateClass = SkeletonNaryLERPState;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an integer representing the input index of the given skeleton animation node.\r\n\t *\r\n\t * @param input The skeleton animation node for with the input index is requested.\r\n\t */\r\n\tpublic getInputIndex(input:AnimationNodeBase):number\r\n\t{\r\n\t\treturn this._iInputs.indexOf(input);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the skeleton animation node object that resides at the given input index.\r\n\t *\r\n\t * @param index The input index for which the skeleton animation node is requested.\r\n\t */\r\n\tpublic getInputAt(index:number):AnimationNodeBase\r\n\t{\r\n\t\treturn this._iInputs[index];\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a new skeleton animation node input to the animation node.\r\n\t */\r\n\tpublic addInput(input:AnimationNodeBase):void\r\n\t{\r\n\t\tthis._iInputs[this._numInputs++] = input;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic getAnimationState(animator:AnimatorBase):SkeletonNaryLERPState\r\n\t{\r\n\t\treturn <SkeletonNaryLERPState> animator.getAnimationState(this);\r\n\t}\r\n}\r\n\r\nexport default SkeletonNaryLERPNode",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {Graphics}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphics\";\r\n\r\nimport {AnimationClipNodeBase}\t\t\tfrom \"../../animators/nodes/AnimationClipNodeBase\";\r\nimport {VertexClipState}\t\t\t\t\tfrom \"../../animators/states/VertexClipState\";\r\n\r\n/**\r\n * A vertex animation node containing time-based animation data as individual geometry obejcts.\r\n */\r\nexport class VertexClipNode extends AnimationClipNodeBase\r\n{\r\n\tprivate _frames:Array<Graphics> = new Array<Graphics>();\r\n\tprivate _translations:Array<Vector3D> = new Array<Vector3D>();\r\n\r\n\t/**\r\n\t * Returns a vector of geometry frames representing the vertex values of each animation frame in the clip.\r\n\t */\r\n\tpublic get frames():Array<Graphics>\r\n\t{\r\n\t\treturn this._frames;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new <code>VertexClipNode</code> object.\r\n\t */\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tthis._pStateClass = VertexClipState;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a geometry object to the internal timeline of the animation node.\r\n\t *\r\n\t * @param geometry The geometry object to add to the timeline of the node.\r\n\t * @param duration The specified duration of the frame in milliseconds.\r\n\t * @param translation The absolute translation of the frame, used in root delta calculations for sprite movement.\r\n\t */\r\n\tpublic addFrame(geometry:Graphics, duration:number, translation:Vector3D = null):void\r\n\t{\r\n\t\tthis._frames.push(geometry);\r\n\t\tthis._pDurations.push(duration);\r\n\t\tthis._translations.push(translation || new Vector3D());\r\n\r\n\t\tthis._pNumFrames = this._pDurations.length;\r\n\r\n\t\tthis._pStitchDirty = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pUpdateStitch():void\r\n\t{\r\n\t\tsuper._pUpdateStitch();\r\n\r\n\t\tvar i:number = this._pNumFrames - 1;\r\n\t\tvar p1:Vector3D, p2:Vector3D, delta:Vector3D;\r\n\t\twhile (i--) {\r\n\t\t\tthis._pTotalDuration += this._pDurations[i];\r\n\t\t\tp1 = this._translations[i];\r\n\t\t\tp2 = this._translations[i + 1];\r\n\t\t\tdelta = p2.subtract(p1);\r\n\t\t\tthis._pTotalDelta.x += delta.x;\r\n\t\t\tthis._pTotalDelta.y += delta.y;\r\n\t\t\tthis._pTotalDelta.z += delta.z;\r\n\t\t}\r\n\r\n\t\tif (this._pNumFrames > 1 && (this._pStitchFinalFrame || !this._pLooping)) {\r\n\t\t\tthis._pTotalDuration += this._pDurations[this._pNumFrames - 1];\r\n\t\t\tp1 = this._translations[0];\r\n\t\t\tp2 = this._translations[1];\r\n\t\t\tdelta = p2.subtract(p1);\r\n\t\t\tthis._pTotalDelta.x += delta.x;\r\n\t\t\tthis._pTotalDelta.y += delta.y;\r\n\t\t\tthis._pTotalDelta.z += delta.z;\r\n\t\t}\r\n\t}\r\n}",
    "import {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\r\nimport {AnimationClipNodeBase}\t\t\tfrom \"../../animators/nodes/AnimationClipNodeBase\";\r\nimport {AnimationStateBase}\t\t\t\tfrom \"../../animators/states/AnimationStateBase\";\r\nimport {AnimationStateEvent}\t\t\t\tfrom \"../../events/AnimationStateEvent\";\r\n\r\n/**\r\n *\r\n */\r\nexport class AnimationClipState extends AnimationStateBase\r\n{\r\n\tprivate _animationClipNode:AnimationClipNodeBase;\r\n\tprivate _animationStatePlaybackComplete:AnimationStateEvent;\r\n\tpublic _pBlendWeight:number;\r\n\tpublic _pCurrentFrame:number;\r\n\tpublic _pNextFrame:number;\r\n\r\n\tpublic _pOldFrame:number;\r\n\tpublic _pTimeDir:number;\r\n\tpublic _pFramesDirty:boolean = true;\r\n\r\n\t/**\r\n\t * Returns a fractional value between 0 and 1 representing the blending ratio of the current playhead position\r\n\t * between the current frame (0) and next frame (1) of the animation.\r\n\t *\r\n\t * @see #currentFrame\r\n\t * @see #nextFrame\r\n\t */\r\n\tpublic get blendWeight():number\r\n\t{\r\n\t\tif (this._pFramesDirty)\r\n\t\t\tthis._pUpdateFrames();\r\n\r\n\t\treturn this._pBlendWeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the current frame of animation in the clip based on the internal playhead position.\r\n\t */\r\n\tpublic get currentFrame():number\r\n\t{\r\n\t\tif (this._pFramesDirty)\r\n\t\t\tthis._pUpdateFrames();\r\n\r\n\t\treturn this._pCurrentFrame;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the next frame of animation in the clip based on the internal playhead position.\r\n\t */\r\n\tpublic get nextFrame():number\r\n\t{\r\n\t\tif (this._pFramesDirty)\r\n\t\t\tthis._pUpdateFrames();\r\n\r\n\t\treturn this._pNextFrame;\r\n\t}\r\n\r\n\tconstructor(animator:AnimatorBase, animationClipNode:AnimationClipNodeBase)\r\n\t{\r\n\t\tsuper(animator, animationClipNode);\r\n\r\n\t\tthis._animationClipNode = animationClipNode;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic update(time:number):void\r\n\t{\r\n\t\tif (!this._animationClipNode.looping) {\r\n\t\t\tif (time > this._pStartTime + this._animationClipNode.totalDuration)\r\n\t\t\t\ttime = this._pStartTime + this._animationClipNode.totalDuration; else if (time < this._pStartTime)\r\n\t\t\t\ttime = this._pStartTime;\r\n\t\t}\r\n\r\n\t\tif (this._pTime == time - this._pStartTime)\r\n\t\t\treturn;\r\n\r\n\t\tthis._pUpdateTime(time);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic phase(value:number):void\r\n\t{\r\n\t\tvar time:number = value*this._animationClipNode.totalDuration + this._pStartTime;\r\n\r\n\t\tif (this._pTime == time - this._pStartTime)\r\n\t\t\treturn;\r\n\r\n\t\tthis._pUpdateTime(time);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pUpdateTime(time:number):void\r\n\t{\r\n\t\tthis._pFramesDirty = true;\r\n\r\n\t\tthis._pTimeDir = (time - this._pStartTime > this._pTime)? 1 : -1;\r\n\r\n\t\tsuper._pUpdateTime(time);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the nodes internal playhead to determine the current and next animation frame, and the blendWeight between the two.\r\n\t *\r\n\t * @see #currentFrame\r\n\t * @see #nextFrame\r\n\t * @see #blendWeight\r\n\t */\r\n\tpublic _pUpdateFrames():void\r\n\t{\r\n\t\tthis._pFramesDirty = false;\r\n\r\n\t\tvar looping:boolean = this._animationClipNode.looping;\r\n\t\tvar totalDuration:number = this._animationClipNode.totalDuration;\r\n\t\tvar lastFrame:number = this._animationClipNode.lastFrame;\r\n\t\tvar time:number = this._pTime;\r\n\r\n\t\t//trace(\"time\", time, totalDuration)\r\n\t\tif (looping && (time >= totalDuration || time < 0)) {\r\n\t\t\ttime %= totalDuration;\r\n\t\t\tif (time < 0)\r\n\t\t\t\ttime += totalDuration;\r\n\t\t}\r\n\r\n\t\tif (!looping && time >= totalDuration) {\r\n\t\t\tthis.notifyPlaybackComplete();\r\n\t\t\tthis._pCurrentFrame = lastFrame;\r\n\t\t\tthis._pNextFrame = lastFrame;\r\n\t\t\tthis._pBlendWeight = 0;\r\n\t\t} else if (!looping && time <= 0) {\r\n\t\t\tthis._pCurrentFrame = 0;\r\n\t\t\tthis._pNextFrame = 0;\r\n\t\t\tthis._pBlendWeight = 0;\r\n\t\t} else if (this._animationClipNode.fixedFrameRate) {\r\n\t\t\tvar t:number = time/totalDuration*lastFrame;\r\n\t\t\tthis._pCurrentFrame = Math.floor(t);\r\n\t\t\tthis._pBlendWeight = t - this._pCurrentFrame;\r\n\t\t\tthis._pNextFrame = this._pCurrentFrame + 1;\r\n\t\t} else {\r\n\t\t\tthis._pCurrentFrame = 0;\r\n\t\t\tthis._pNextFrame = 0;\r\n\r\n\t\t\tvar dur:number = 0, frameTime:number;\r\n\t\t\tvar durations:Array<number> = this._animationClipNode.durations;\r\n\r\n\t\t\tdo {\r\n\t\t\t\tframeTime = dur;\r\n\t\t\t\tdur += durations[this._pNextFrame];\r\n\t\t\t\tthis._pCurrentFrame = this._pNextFrame++;\r\n\t\t\t} while (time > dur);\r\n\r\n\t\t\tif (this._pCurrentFrame == lastFrame) {\r\n\t\t\t\tthis._pCurrentFrame = 0;\r\n\t\t\t\tthis._pNextFrame = 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis._pBlendWeight = (time - frameTime)/durations[this._pCurrentFrame];\r\n\t\t}\r\n\t}\r\n\r\n\tprivate notifyPlaybackComplete():void\r\n\t{\r\n\t\tif (this._animationStatePlaybackComplete == null)\r\n\t\t\tthis._animationStatePlaybackComplete = new AnimationStateEvent(AnimationStateEvent.PLAYBACK_COMPLETE, this._pAnimator, this, this._animationClipNode);\r\n\r\n\t\tthis._animationClipNode.dispatchEvent(this._animationStatePlaybackComplete);\r\n\t}\r\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {AnimationNodeBase}\t\t\t\tfrom \"awayjs-display/lib/animators/nodes/AnimationNodeBase\";\r\n\r\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\r\nimport {IAnimationState}\t\t\t\t\tfrom \"../../animators/states/IAnimationState\";\r\n\r\n/**\r\n *\r\n */\r\nexport class AnimationStateBase implements IAnimationState\r\n{\r\n\tpublic _pAnimationNode:AnimationNodeBase;\r\n\tpublic _pRootDelta:Vector3D = new Vector3D();\r\n\tpublic _pPositionDeltaDirty:boolean = true;\r\n\r\n\tpublic _pTime:number;\r\n\tpublic _pStartTime:number = 0;\r\n\tpublic _pAnimator:AnimatorBase;\r\n\r\n\t/**\r\n\t * Returns a 3d vector representing the translation delta of the animating entity for the current timestep of animation\r\n\t */\r\n\tpublic get positionDelta():Vector3D\r\n\t{\r\n\t\tif (this._pPositionDeltaDirty) {\r\n\r\n\t\t\tthis._pUpdatePositionDelta();\r\n\t\t}\r\n\r\n\t\treturn this._pRootDelta;\r\n\r\n\t}\r\n\r\n\tconstructor(animator:AnimatorBase, animationNode:AnimationNodeBase)\r\n\t{\r\n\t\tthis._pAnimator = animator;\r\n\t\tthis._pAnimationNode = animationNode;\r\n\t}\r\n\r\n\t/**\r\n\t * Resets the start time of the node to a  new value.\r\n\t *\r\n\t * @param startTime The absolute start time (in milliseconds) of the node's starting time.\r\n\t */\r\n\tpublic offset(startTime:number):void\r\n\t{\r\n\t\tthis._pStartTime = startTime;\r\n\r\n\t\tthis._pPositionDeltaDirty = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the configuration of the node to its current state.\r\n\t *\r\n\t * @param time The absolute time (in milliseconds) of the animator's play head position.\r\n\t *\r\n\t * @see AnimatorBase#update()\r\n\t */\r\n\tpublic update(time:number):void\r\n\t{\r\n\t\tif (this._pTime == time - this._pStartTime) {\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tthis._pUpdateTime(time);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the animation phase of the node.\r\n\t *\r\n\t * @param value The phase value to use. 0 represents the beginning of an animation clip, 1 represents the end.\r\n\t */\r\n\tpublic phase(value:number):void\r\n\t{\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the node's internal playhead position.\r\n\t *\r\n\t * @param time The local time (in milliseconds) of the node's playhead position.\r\n\t */\r\n\tpublic _pUpdateTime(time:number):void\r\n\t{\r\n\t\tthis._pTime = time - this._pStartTime;\r\n\r\n\t\tthis._pPositionDeltaDirty = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the node's root delta position\r\n\t */\r\n\tpublic _pUpdatePositionDelta():void\r\n\t{\r\n\t}\r\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\n\r\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\nimport {ContextGLVertexBufferFormat}\t\tfrom \"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\";\r\n\r\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\r\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\r\nimport {ParticleAccelerationNode}\t\t\tfrom \"../../animators/nodes/ParticleAccelerationNode\";\r\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\r\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\n\r\n/**\r\n * ...\r\n */\r\nexport class ParticleAccelerationState extends ParticleStateBase\r\n{\r\n\t/** @private */\r\n\tpublic static ACCELERATION_INDEX:number = 0;\r\n\r\n\tprivate _particleAccelerationNode:ParticleAccelerationNode;\r\n\tprivate _acceleration:Vector3D;\r\n\tprivate _halfAcceleration:Vector3D;\r\n\t\r\n\t/**\r\n\t * Defines the acceleration vector of the state, used when in global mode.\r\n\t */\r\n\tpublic get acceleration():Vector3D\r\n\t{\r\n\t\treturn this._acceleration;\r\n\t}\r\n\t\r\n\tpublic set acceleration(value:Vector3D)\r\n\t{\r\n\t\tthis._acceleration.x = value.x;\r\n\t\tthis._acceleration.y = value.y;\r\n\t\tthis._acceleration.z = value.z;\r\n\r\n\t\tthis.updateAccelerationData();\r\n\t}\r\n\t\r\n\tconstructor(animator:ParticleAnimator, particleAccelerationNode:ParticleAccelerationNode)\r\n\t{\r\n\t\tsuper(animator, particleAccelerationNode);\r\n\r\n\t\tthis._particleAccelerationNode = particleAccelerationNode;\r\n\t\tthis._acceleration = this._particleAccelerationNode._acceleration;\r\n\r\n\t\tthis.updateAccelerationData();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\r\n\t{\r\n\t\tvar index:number = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleAccelerationState.ACCELERATION_INDEX);\r\n\t\t\r\n\t\tif (this._particleAccelerationNode.mode == ParticlePropertiesMode.LOCAL_STATIC)\r\n\t\t\tanimationElements.activateVertexBuffer(index, this._particleAccelerationNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_3);\r\n\t\telse\r\n\t\t\tshader.setVertexConst(index, this._halfAcceleration.x, this._halfAcceleration.y, this._halfAcceleration.z);\r\n\t}\r\n\t\r\n\tprivate updateAccelerationData():void\r\n\t{\r\n\t\tif (this._particleAccelerationNode.mode == ParticlePropertiesMode.GLOBAL)\r\n\t\t\tthis._halfAcceleration = new Vector3D(this._acceleration.x/2, this._acceleration.y/2, this._acceleration.z/2);\r\n\t}\r\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\n\r\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\nimport {ContextGLVertexBufferFormat}\t\tfrom \"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\";\r\n\r\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\r\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\r\nimport {ParticleBezierCurveNode}\t\t\tfrom \"../../animators/nodes/ParticleBezierCurveNode\";\r\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\r\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\n\r\n/**\r\n * ...\r\n */\r\nexport class ParticleBezierCurveState extends ParticleStateBase\r\n{\r\n\t/** @private */\r\n\tpublic static BEZIER_CONTROL_INDEX:number = 0;\r\n\r\n\t/** @private */\r\n\tpublic static BEZIER_END_INDEX:number = 1;\r\n\r\n\tprivate _particleBezierCurveNode:ParticleBezierCurveNode;\r\n\tprivate _controlPoint:Vector3D;\r\n\tprivate _endPoint:Vector3D;\r\n\r\n\t/**\r\n\t * Defines the default control point of the node, used when in global mode.\r\n\t */\r\n\tpublic get controlPoint():Vector3D\r\n\t{\r\n\t\treturn this._controlPoint;\r\n\t}\r\n\r\n\tpublic set controlPoint(value:Vector3D)\r\n\t{\r\n\t\tthis._controlPoint = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the default end point of the node, used when in global mode.\r\n\t */\r\n\tpublic get endPoint():Vector3D\r\n\t{\r\n\t\treturn this._endPoint;\r\n\t}\r\n\r\n\tpublic set endPoint(value:Vector3D)\r\n\t{\r\n\t\tthis._endPoint = value;\r\n\t}\r\n\r\n\tconstructor(animator:ParticleAnimator, particleBezierCurveNode:ParticleBezierCurveNode)\r\n\t{\r\n\t\tsuper(animator, particleBezierCurveNode);\r\n\r\n\t\tthis._particleBezierCurveNode = particleBezierCurveNode;\r\n\t\tthis._controlPoint = this._particleBezierCurveNode._iControlPoint;\r\n\t\tthis._endPoint = this._particleBezierCurveNode._iEndPoint;\r\n\t}\r\n\r\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\r\n\t{\r\n\t\tvar controlIndex:number = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleBezierCurveState.BEZIER_CONTROL_INDEX);\r\n\t\tvar endIndex:number = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleBezierCurveState.BEZIER_END_INDEX);\r\n\r\n\t\tif (this._particleBezierCurveNode.mode == ParticlePropertiesMode.LOCAL_STATIC) {\r\n\t\t\tanimationElements.activateVertexBuffer(controlIndex, this._particleBezierCurveNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_3);\r\n\t\t\tanimationElements.activateVertexBuffer(endIndex, this._particleBezierCurveNode._iDataOffset + 3, stage, ContextGLVertexBufferFormat.FLOAT_3);\r\n\t\t} else {\r\n\t\t\tshader.setVertexConst(controlIndex, this._controlPoint.x, this._controlPoint.y, this._controlPoint.z);\r\n\t\t\tshader.setVertexConst(endIndex, this._endPoint.x, this._endPoint.y, this._endPoint.z);\r\n\t\t}\r\n\t}\r\n}",
    "import {MathConsts}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/MathConsts\";\r\nimport {Matrix3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\r\nimport {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\nimport {Orientation3D}\t\t\t\t\tfrom \"awayjs-core/lib/geom/Orientation3D\";\r\n\r\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\n\r\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\n\r\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\r\nimport {ParticleBillboardNode}\t\t\tfrom \"../../animators/nodes/ParticleBillboardNode\";\r\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\r\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\n\r\n/**\r\n * ...\r\n */\r\nexport class ParticleBillboardState extends ParticleStateBase\r\n{\r\n\t/** @private */\r\n\tpublic static MATRIX_INDEX:number = 0;\r\n\r\n\tprivate _matrix:Matrix3D = new Matrix3D;\r\n\r\n\tprivate _billboardAxis:Vector3D;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tconstructor(animator:ParticleAnimator, particleNode:ParticleBillboardNode)\r\n\t{\r\n\t\tsuper(animator, particleNode);\r\n\r\n\t\tthis._billboardAxis = particleNode._iBillboardAxis;\r\n\t}\r\n\r\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\r\n\t{\r\n\t\tvar comps:Array<Vector3D>;\r\n\t\tif (this._billboardAxis) {\r\n\t\t\tvar pos:Vector3D = renderable.sourceEntity.sceneTransform.position;\r\n\t\t\tvar look:Vector3D = camera.sceneTransform.position.subtract(pos);\r\n\t\t\tvar right:Vector3D = look.crossProduct(this._billboardAxis);\r\n\t\t\tright.normalize();\r\n\t\t\tlook = this.billboardAxis.crossProduct(right);\r\n\t\t\tlook.normalize();\r\n\r\n\t\t\t//create a quick inverse projection matrix\r\n\t\t\tthis._matrix.copyFrom(renderable.sourceEntity.sceneTransform);\r\n\t\t\tcomps = this._matrix.decompose(Orientation3D.AXIS_ANGLE);\r\n\t\t\tthis._matrix.copyColumnFrom(0, right);\r\n\t\t\tthis._matrix.copyColumnFrom(1, this.billboardAxis);\r\n\t\t\tthis._matrix.copyColumnFrom(2, look);\r\n\t\t\tthis._matrix.copyColumnFrom(3, pos);\r\n\t\t\tthis._matrix.appendRotation(-comps[1].w*MathConsts.RADIANS_TO_DEGREES, comps[1]);\r\n\t\t} else {\r\n\t\t\t//create a quick inverse projection matrix\r\n\t\t\tthis._matrix.copyFrom(renderable.sourceEntity.sceneTransform);\r\n\t\t\tthis._matrix.append(camera.inverseSceneTransform);\r\n\r\n\t\t\t//decompose using axis angle rotations\r\n\t\t\tcomps = this._matrix.decompose(Orientation3D.AXIS_ANGLE);\r\n\r\n\t\t\t//recreate the matrix with just the rotation data\r\n\t\t\tthis._matrix.identity();\r\n\t\t\tthis._matrix.appendRotation(-comps[1].w*MathConsts.RADIANS_TO_DEGREES, comps[1]);\r\n\t\t}\r\n\r\n\t\t//set a new matrix transform constant\r\n\t\tshader.setVertexConstFromMatrix(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleBillboardState.MATRIX_INDEX), this._matrix);\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the billboard axis.\r\n\t */\r\n\tpublic get billboardAxis():Vector3D\r\n\t{\r\n\t\treturn this.billboardAxis;\r\n\t}\r\n\r\n\tpublic set billboardAxis(value:Vector3D)\r\n\t{\r\n\t\tthis.billboardAxis = value? value.clone() : null;\r\n\t\tif (this.billboardAxis)\r\n\t\t\tthis.billboardAxis.normalize();\r\n\t}\r\n\r\n}",
    "import {ColorTransform}\t\t\t\t\tfrom \"awayjs-core/lib/geom/ColorTransform\";\r\nimport {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\n\r\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\nimport {ContextGLVertexBufferFormat}\t\tfrom \"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\";\r\n\r\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\r\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\r\nimport {ParticleColorNode}\t\t\t\tfrom \"../../animators/nodes/ParticleColorNode\";\r\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\r\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\n\r\n/**\r\n * ...\r\n * @author ...\r\n */\r\nexport class ParticleColorState extends ParticleStateBase\r\n{\r\n\t/** @private */\r\n\tpublic static START_MULTIPLIER_INDEX:number = 0;\r\n\r\n\t/** @private */\r\n\tpublic static DELTA_MULTIPLIER_INDEX:number = 1;\r\n\r\n\t/** @private */\r\n\tpublic static START_OFFSET_INDEX:number = 2;\r\n\r\n\t/** @private */\r\n\tpublic static DELTA_OFFSET_INDEX:number = 3;\r\n\r\n\t/** @private */\r\n\tpublic static CYCLE_INDEX:number = 4;\r\n\r\n\tprivate _particleColorNode:ParticleColorNode;\r\n\tprivate _usesMultiplier:boolean;\r\n\tprivate _usesOffset:boolean;\r\n\tprivate _usesCycle:boolean;\r\n\tprivate _usesPhase:boolean;\r\n\tprivate _startColor:ColorTransform;\r\n\tprivate _endColor:ColorTransform;\r\n\tprivate _cycleDuration:number;\r\n\tprivate _cyclePhase:number;\r\n\tprivate _cycleData:Vector3D;\r\n\tprivate _startMultiplierData:Vector3D;\r\n\tprivate _deltaMultiplierData:Vector3D;\r\n\tprivate _startOffsetData:Vector3D;\r\n\tprivate _deltaOffsetData:Vector3D;\r\n\r\n\t/**\r\n\t * Defines the start color transform of the state, when in global mode.\r\n\t */\r\n\tpublic get startColor():ColorTransform\r\n\t{\r\n\t\treturn this._startColor;\r\n\t}\r\n\r\n\tpublic set startColor(value:ColorTransform)\r\n\t{\r\n\t\tthis._startColor = value;\r\n\r\n\t\tthis.updateColorData();\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the end color transform of the state, when in global mode.\r\n\t */\r\n\tpublic get endColor():ColorTransform\r\n\t{\r\n\t\treturn this._endColor;\r\n\t}\r\n\r\n\tpublic set endColor(value:ColorTransform)\r\n\t{\r\n\t\tthis._endColor = value;\r\n\r\n\t\tthis.updateColorData();\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the duration of the animation in seconds, used as a period independent of particle duration when in global mode. Defaults to 1.\r\n\t */\r\n\tpublic get cycleDuration():number\r\n\t{\r\n\t\treturn this._cycleDuration;\r\n\t}\r\n\r\n\tpublic set cycleDuration(value:number)\r\n\t{\r\n\t\tthis._cycleDuration = value;\r\n\r\n\t\tthis.updateColorData();\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the phase of the cycle in degrees, used as the starting offset of the cycle when in global mode. Defaults to 0.\r\n\t */\r\n\tpublic get cyclePhase():number\r\n\t{\r\n\t\treturn this._cyclePhase;\r\n\t}\r\n\r\n\tpublic set cyclePhase(value:number)\r\n\t{\r\n\t\tthis._cyclePhase = value;\r\n\r\n\t\tthis.updateColorData();\r\n\t}\r\n\r\n\tconstructor(animator:ParticleAnimator, particleColorNode:ParticleColorNode)\r\n\t{\r\n\t\tsuper(animator, particleColorNode);\r\n\r\n\t\tthis._particleColorNode = particleColorNode;\r\n\t\tthis._usesMultiplier = this._particleColorNode._iUsesMultiplier;\r\n\t\tthis._usesOffset = this._particleColorNode._iUsesOffset;\r\n\t\tthis._usesCycle = this._particleColorNode._iUsesCycle;\r\n\t\tthis._usesPhase = this._particleColorNode._iUsesPhase;\r\n\t\tthis._startColor = this._particleColorNode._iStartColor;\r\n\t\tthis._endColor = this._particleColorNode._iEndColor;\r\n\t\tthis._cycleDuration = this._particleColorNode._iCycleDuration;\r\n\t\tthis._cyclePhase = this._particleColorNode._iCyclePhase;\r\n\r\n\t\tthis.updateColorData();\r\n\t}\r\n\r\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\r\n\t{\r\n\t\tif (shader.usesFragmentAnimation) {\r\n\t\t\tvar dataOffset:number = this._particleColorNode._iDataOffset;\r\n\t\t\tvar index:number;\r\n\t\t\tif (this._usesCycle)\r\n\t\t\t\tshader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.CYCLE_INDEX), this._cycleData.x, this._cycleData.y, this._cycleData.z, this._cycleData.w);\r\n\r\n\t\t\tif (this._usesMultiplier) {\r\n\t\t\t\tif (this._particleColorNode.mode == ParticlePropertiesMode.LOCAL_STATIC) {\r\n\t\t\t\t\tanimationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.START_MULTIPLIER_INDEX), dataOffset, stage, ContextGLVertexBufferFormat.FLOAT_4);\r\n\t\t\t\t\tdataOffset += 4;\r\n\t\t\t\t\tanimationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.DELTA_MULTIPLIER_INDEX), dataOffset, stage, ContextGLVertexBufferFormat.FLOAT_4);\r\n\t\t\t\t\tdataOffset += 4;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tshader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.START_MULTIPLIER_INDEX), this._startMultiplierData.x, this._startMultiplierData.y, this._startMultiplierData.z, this._startMultiplierData.w);\r\n\t\t\t\t\tshader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.DELTA_MULTIPLIER_INDEX), this._deltaMultiplierData.x, this._deltaMultiplierData.y, this._deltaMultiplierData.z, this._deltaMultiplierData.w);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this._usesOffset) {\r\n\t\t\t\tif (this._particleColorNode.mode == ParticlePropertiesMode.LOCAL_STATIC) {\r\n\t\t\t\t\tanimationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.START_OFFSET_INDEX), dataOffset, stage, ContextGLVertexBufferFormat.FLOAT_4);\r\n\t\t\t\t\tdataOffset += 4;\r\n\t\t\t\t\tanimationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.DELTA_OFFSET_INDEX), dataOffset, stage, ContextGLVertexBufferFormat.FLOAT_4);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tshader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.START_OFFSET_INDEX), this._startOffsetData.x, this._startOffsetData.y, this._startOffsetData.z, this._startOffsetData.w);\r\n\t\t\t\t\tshader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.DELTA_OFFSET_INDEX), this._deltaOffsetData.x, this._deltaOffsetData.y, this._deltaOffsetData.z, this._deltaOffsetData.w);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate updateColorData():void\r\n\t{\r\n\t\tif (this._usesCycle) {\r\n\t\t\tif (this._cycleDuration <= 0)\r\n\t\t\t\tthrow(new Error(\"the cycle duration must be greater than zero\"));\r\n\t\t\tthis._cycleData = new Vector3D(Math.PI*2/this._cycleDuration, this._cyclePhase*Math.PI/180, 0, 0);\r\n\t\t}\r\n\t\tif (this._particleColorNode.mode == ParticlePropertiesMode.GLOBAL) {\r\n\t\t\tif (this._usesCycle) {\r\n\t\t\t\tif (this._usesMultiplier) {\r\n\t\t\t\t\tthis._startMultiplierData = new Vector3D((this._startColor.redMultiplier + this._endColor.redMultiplier)/2, (this._startColor.greenMultiplier + this._endColor.greenMultiplier)/2, (this._startColor.blueMultiplier + this._endColor.blueMultiplier)/2, (this._startColor.alphaMultiplier + this._endColor.alphaMultiplier)/2);\r\n\t\t\t\t\tthis._deltaMultiplierData = new Vector3D((this._endColor.redMultiplier - this._startColor.redMultiplier)/2, (this._endColor.greenMultiplier - this._startColor.greenMultiplier)/2, (this._endColor.blueMultiplier - this._startColor.blueMultiplier)/2, (this._endColor.alphaMultiplier - this._startColor.alphaMultiplier)/2);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this._usesOffset) {\r\n\t\t\t\t\tthis._startOffsetData = new Vector3D((this._startColor.redOffset + this._endColor.redOffset)/(255*2), (this._startColor.greenOffset + this._endColor.greenOffset)/(255*2), (this._startColor.blueOffset + this._endColor.blueOffset)/(255*2), (this._startColor.alphaOffset + this._endColor.alphaOffset)/(255*2));\r\n\t\t\t\t\tthis._deltaOffsetData = new Vector3D((this._endColor.redOffset - this._startColor.redOffset)/(255*2), (this._endColor.greenOffset - this._startColor.greenOffset)/(255*2), (this._endColor.blueOffset - this._startColor.blueOffset)/(255*2), (this._endColor.alphaOffset - this._startColor.alphaOffset)/(255*2));\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (this._usesMultiplier) {\r\n\t\t\t\t\tthis._startMultiplierData = new Vector3D(this._startColor.redMultiplier, this._startColor.greenMultiplier, this._startColor.blueMultiplier, this._startColor.alphaMultiplier);\r\n\t\t\t\t\tthis._deltaMultiplierData = new Vector3D((this._endColor.redMultiplier - this._startColor.redMultiplier), (this._endColor.greenMultiplier - this._startColor.greenMultiplier), (this._endColor.blueMultiplier - this._startColor.blueMultiplier), (this._endColor.alphaMultiplier - this._startColor.alphaMultiplier));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this._usesOffset) {\r\n\t\t\t\t\tthis._startOffsetData = new Vector3D(this._startColor.redOffset/255, this._startColor.greenOffset/255, this._startColor.blueOffset/255, this._startColor.alphaOffset/255);\r\n\t\t\t\t\tthis._deltaOffsetData = new Vector3D((this._endColor.redOffset - this._startColor.redOffset)/255, (this._endColor.greenOffset - this._startColor.greenOffset)/255, (this._endColor.blueOffset - this._startColor.blueOffset )/255, (this._endColor.alphaOffset - this._startColor.alphaOffset)/255);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
    "import {MathConsts}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/MathConsts\";\r\nimport {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {DisplayObject}\t\t\t\t\tfrom \"awayjs-display/lib/display/DisplayObject\";\r\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\n\r\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\nimport {ContextGLVertexBufferFormat}\t\tfrom \"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\";\r\n\r\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\r\nimport {ParticleAnimationData}\t\t\tfrom \"../../animators/data/ParticleAnimationData\";\r\nimport {ParticleFollowNode}\t\t\t\tfrom \"../../animators/nodes/ParticleFollowNode\";\r\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\r\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\n\r\n/**\r\n * ...\r\n */\r\nexport class ParticleFollowState extends ParticleStateBase\r\n{\r\n\t/** @private */\r\n\tpublic static FOLLOW_POSITION_INDEX:number = 0;\r\n\r\n\t/** @private */\r\n\tpublic static FOLLOW_ROTATION_INDEX:number = 1;\r\n\r\n\tprivate _particleFollowNode:ParticleFollowNode;\r\n\tprivate _followTarget:DisplayObject;\r\n\r\n\tprivate _targetPos:Vector3D = new Vector3D();\r\n\tprivate _targetEuler:Vector3D = new Vector3D();\r\n\tprivate _prePos:Vector3D;\r\n\tprivate _preEuler:Vector3D;\r\n\tprivate _smooth:boolean;\r\n\r\n\t//temporary vector3D for calculation\r\n\tprivate _temp:Vector3D = new Vector3D();\r\n\r\n\tconstructor(animator:ParticleAnimator, particleFollowNode:ParticleFollowNode)\r\n\t{\r\n\t\tsuper(animator, particleFollowNode, true);\r\n\r\n\t\tthis._particleFollowNode = particleFollowNode;\r\n\t\tthis._smooth = particleFollowNode._iSmooth;\r\n\t}\r\n\r\n\tpublic get followTarget():DisplayObject\r\n\t{\r\n\t\treturn this._followTarget;\r\n\t}\r\n\r\n\tpublic set followTarget(value:DisplayObject)\r\n\t{\r\n\t\tthis._followTarget = value;\r\n\t}\r\n\r\n\tpublic get smooth():boolean\r\n\t{\r\n\t\treturn this._smooth;\r\n\t}\r\n\r\n\tpublic set smooth(value:boolean)\r\n\t{\r\n\t\tthis._smooth = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\r\n\t{\r\n\t\tif (this._followTarget) {\r\n\t\t\tif (this._particleFollowNode._iUsesPosition) {\r\n\t\t\t\tthis._targetPos.x = this._followTarget.transform.position.x/renderable.sourceEntity.scaleX;\r\n\t\t\t\tthis._targetPos.y = this._followTarget.transform.position.y/renderable.sourceEntity.scaleY;\r\n\t\t\t\tthis._targetPos.z = this._followTarget.transform.position.z/renderable.sourceEntity.scaleZ;\r\n\t\t\t}\r\n\t\t\tif (this._particleFollowNode._iUsesRotation) {\r\n\t\t\t\tthis._targetEuler.x = this._followTarget.rotationX;\r\n\t\t\t\tthis._targetEuler.y = this._followTarget.rotationY;\r\n\t\t\t\tthis._targetEuler.z = this._followTarget.rotationZ;\r\n\t\t\t\tthis._targetEuler.scaleBy(MathConsts.DEGREES_TO_RADIANS);\r\n\t\t\t}\r\n\t\t}\r\n\t\t//initialization\r\n\t\tif (!this._prePos)\r\n\t\t\tthis._prePos = this._targetPos.clone();\r\n\t\tif (!this._preEuler)\r\n\t\t\tthis._preEuler = this._targetEuler.clone();\r\n\r\n\t\tvar currentTime:number = this._pTime/1000;\r\n\t\tvar previousTime:number = animationElements.previousTime;\r\n\t\tvar deltaTime:number = currentTime - previousTime;\r\n\r\n\t\tvar needProcess:boolean = previousTime != currentTime;\r\n\r\n\t\tif (this._particleFollowNode._iUsesPosition && this._particleFollowNode._iUsesRotation) {\r\n\t\t\tif (needProcess)\r\n\t\t\t\tthis.processPositionAndRotation(currentTime, deltaTime, animationElements);\r\n\r\n\t\t\tanimationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleFollowState.FOLLOW_POSITION_INDEX), this._particleFollowNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_3);\r\n\t\t\tanimationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleFollowState.FOLLOW_ROTATION_INDEX), this._particleFollowNode._iDataOffset + 3, stage, ContextGLVertexBufferFormat.FLOAT_3);\r\n\t\t} else if (this._particleFollowNode._iUsesPosition) {\r\n\t\t\tif (needProcess)\r\n\t\t\t\tthis.processPosition(currentTime, deltaTime, animationElements);\r\n\r\n\t\t\tanimationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleFollowState.FOLLOW_POSITION_INDEX), this._particleFollowNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_3);\r\n\t\t} else if (this._particleFollowNode._iUsesRotation) {\r\n\t\t\tif (needProcess)\r\n\t\t\t\tthis.precessRotation(currentTime, deltaTime, animationElements);\r\n\r\n\t\t\tanimationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleFollowState.FOLLOW_ROTATION_INDEX), this._particleFollowNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_3);\r\n\t\t}\r\n\r\n\t\tthis._prePos.copyFrom(this._targetPos);\r\n\t\tthis._targetEuler.copyFrom(this._targetEuler);\r\n\t\tanimationElements.previousTime = currentTime;\r\n\t}\r\n\r\n\tprivate processPosition(currentTime:number, deltaTime:number, animationElements:AnimationElements):void\r\n\t{\r\n\t\tvar data:Array<ParticleAnimationData> = animationElements.animationParticles;\r\n\t\tvar vertexData:Array<number> = animationElements.vertexData;\r\n\r\n\t\tvar changed:boolean = false;\r\n\t\tvar len:number = data.length;\r\n\t\tvar interpolatedPos:Vector3D;\r\n\t\tvar posVelocity:Vector3D;\r\n\t\tif (this._smooth) {\r\n\t\t\tposVelocity = this._prePos.subtract(this._targetPos);\r\n\t\t\tposVelocity.scaleBy(1/deltaTime);\r\n\t\t} else\r\n\t\t\tinterpolatedPos = this._targetPos;\r\n\t\tfor (var i:number = 0; i < len; i++) {\r\n\t\t\tvar k:number = (currentTime - data[i].startTime)/data[i].totalTime;\r\n\t\t\tvar t:number = (k - Math.floor(k))*data[i].totalTime;\r\n\t\t\tif (t - deltaTime <= 0) {\r\n\t\t\t\tvar inc:number = data[i].startVertexIndex*animationElements.totalLenOfOneVertex + this._particleFollowNode._iDataOffset;\r\n\r\n\t\t\t\tif (this._smooth) {\r\n\t\t\t\t\tthis._temp.copyFrom(posVelocity);\r\n\t\t\t\t\tthis._temp.scaleBy(t);\r\n\t\t\t\t\tinterpolatedPos = this._targetPos.add(this._temp);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (vertexData[inc] != interpolatedPos.x || vertexData[inc + 1] != interpolatedPos.y || vertexData[inc + 2] != interpolatedPos.z) {\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t\tfor (var j:number = 0; j < data[i].numVertices; j++) {\r\n\t\t\t\t\t\tvertexData[inc++] = interpolatedPos.x;\r\n\t\t\t\t\t\tvertexData[inc++] = interpolatedPos.y;\r\n\t\t\t\t\t\tvertexData[inc++] = interpolatedPos.z;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (changed)\r\n\t\t\tanimationElements.invalidateBuffer();\r\n\r\n\t}\r\n\r\n\tprivate precessRotation(currentTime:number, deltaTime:number, animationElements:AnimationElements):void\r\n\t{\r\n\t\tvar data:Array<ParticleAnimationData> = animationElements.animationParticles;\r\n\t\tvar vertexData:Array<number> = animationElements.vertexData;\r\n\r\n\t\tvar changed:boolean = false;\r\n\t\tvar len:number = data.length;\r\n\r\n\t\tvar interpolatedRotation:Vector3D;\r\n\t\tvar rotationVelocity:Vector3D;\r\n\r\n\t\tif (this._smooth) {\r\n\t\t\trotationVelocity = this._preEuler.subtract(this._targetEuler);\r\n\t\t\trotationVelocity.scaleBy(1/deltaTime);\r\n\t\t} else\r\n\t\t\tinterpolatedRotation = this._targetEuler;\r\n\r\n\t\tfor (var i:number = 0; i < len; i++) {\r\n\t\t\tvar k:number = (currentTime - data[i].startTime)/data[i].totalTime;\r\n\t\t\tvar t:number = (k - Math.floor(k))*data[i].totalTime;\r\n\t\t\tif (t - deltaTime <= 0) {\r\n\t\t\t\tvar inc:number = data[i].startVertexIndex*animationElements.totalLenOfOneVertex + this._particleFollowNode._iDataOffset;\r\n\r\n\t\t\t\tif (this._smooth) {\r\n\t\t\t\t\tthis._temp.copyFrom(rotationVelocity);\r\n\t\t\t\t\tthis._temp.scaleBy(t);\r\n\t\t\t\t\tinterpolatedRotation = this._targetEuler.add(this._temp);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (vertexData[inc] != interpolatedRotation.x || vertexData[inc + 1] != interpolatedRotation.y || vertexData[inc + 2] != interpolatedRotation.z) {\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t\tfor (var j:number = 0; j < data[i].numVertices; j++) {\r\n\t\t\t\t\t\tvertexData[inc++] = interpolatedRotation.x;\r\n\t\t\t\t\t\tvertexData[inc++] = interpolatedRotation.y;\r\n\t\t\t\t\t\tvertexData[inc++] = interpolatedRotation.z;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (changed)\r\n\t\t\tanimationElements.invalidateBuffer();\r\n\r\n\t}\r\n\r\n\tprivate processPositionAndRotation(currentTime:number, deltaTime:number, animationElements:AnimationElements):void\r\n\t{\r\n\t\tvar data:Array<ParticleAnimationData> = animationElements.animationParticles;\r\n\t\tvar vertexData:Array<number> = animationElements.vertexData;\r\n\r\n\t\tvar changed:boolean = false;\r\n\t\tvar len:number = data.length;\r\n\r\n\t\tvar interpolatedPos:Vector3D;\r\n\t\tvar interpolatedRotation:Vector3D;\r\n\r\n\t\tvar posVelocity:Vector3D;\r\n\t\tvar rotationVelocity:Vector3D;\r\n\t\tif (this._smooth) {\r\n\t\t\tposVelocity = this._prePos.subtract(this._targetPos);\r\n\t\t\tposVelocity.scaleBy(1/deltaTime);\r\n\t\t\trotationVelocity = this._preEuler.subtract(this._targetEuler);\r\n\t\t\trotationVelocity.scaleBy(1/deltaTime);\r\n\t\t} else {\r\n\t\t\tinterpolatedPos = this._targetPos;\r\n\t\t\tinterpolatedRotation = this._targetEuler;\r\n\t\t}\r\n\r\n\t\tfor (var i:number = 0; i < len; i++) {\r\n\t\t\tvar k:number = (currentTime - data[i].startTime)/data[i].totalTime;\r\n\t\t\tvar t:number = (k - Math.floor(k))*data[i].totalTime;\r\n\t\t\tif (t - deltaTime <= 0) {\r\n\t\t\t\tvar inc:number = data[i].startVertexIndex*animationElements.totalLenOfOneVertex + this._particleFollowNode._iDataOffset;\r\n\t\t\t\tif (this._smooth) {\r\n\t\t\t\t\tthis._temp.copyFrom(posVelocity);\r\n\t\t\t\t\tthis._temp.scaleBy(t);\r\n\t\t\t\t\tinterpolatedPos = this._targetPos.add(this._temp);\r\n\r\n\t\t\t\t\tthis._temp.copyFrom(rotationVelocity);\r\n\t\t\t\t\tthis._temp.scaleBy(t);\r\n\t\t\t\t\tinterpolatedRotation = this._targetEuler.add(this._temp);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (vertexData[inc] != interpolatedPos.x || vertexData[inc + 1] != interpolatedPos.y || vertexData[inc + 2] != interpolatedPos.z || vertexData[inc + 3] != interpolatedRotation.x || vertexData[inc + 4] != interpolatedRotation.y || vertexData[inc + 5] != interpolatedRotation.z) {\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t\tfor (var j:number = 0; j < data[i].numVertices; j++) {\r\n\t\t\t\t\t\tvertexData[inc++] = interpolatedPos.x;\r\n\t\t\t\t\t\tvertexData[inc++] = interpolatedPos.y;\r\n\t\t\t\t\t\tvertexData[inc++] = interpolatedPos.z;\r\n\t\t\t\t\t\tvertexData[inc++] = interpolatedRotation.x;\r\n\t\t\t\t\t\tvertexData[inc++] = interpolatedRotation.y;\r\n\t\t\t\t\t\tvertexData[inc++] = interpolatedRotation.z;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (changed)\r\n\t\t\tanimationElements.invalidateBuffer();\r\n\t}\r\n\r\n}",
    "import {ColorTransform}\t\t\t\t\tfrom \"awayjs-core/lib/geom/ColorTransform\";\r\nimport {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\n\r\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\nimport {ContextGLVertexBufferFormat}\t\tfrom \"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\";\r\n\r\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\r\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\r\nimport {ParticleInitialColorNode}\t\t\tfrom \"../../animators/nodes/ParticleInitialColorNode\";\r\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\r\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\n\r\n/**\r\n*\r\n*/\r\nexport class ParticleInitialColorState extends ParticleStateBase\r\n{\r\n\t/** @private */\r\n\tpublic static MULTIPLIER_INDEX:number = 0;\r\n\t/** @private */\r\n\tpublic static OFFSET_INDEX:number = 1;\r\n\r\n\tprivate _particleInitialColorNode:ParticleInitialColorNode;\r\n\tprivate _usesMultiplier:boolean;\r\n\tprivate _usesOffset:boolean;\r\n\tprivate _initialColor:ColorTransform;\r\n\tprivate _multiplierData:Vector3D;\r\n\tprivate _offsetData:Vector3D;\r\n\r\n\tconstructor(animator:ParticleAnimator, particleInitialColorNode:ParticleInitialColorNode)\r\n\t{\r\n\t\tsuper(animator, particleInitialColorNode);\r\n\r\n\t\tthis._particleInitialColorNode = particleInitialColorNode;\r\n\t\tthis._usesMultiplier = particleInitialColorNode._iUsesMultiplier;\r\n\t\tthis._usesOffset = particleInitialColorNode._iUsesOffset;\r\n\t\tthis._initialColor = particleInitialColorNode._iInitialColor;\r\n\r\n\t\tthis.updateColorData();\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the initial color transform of the state, when in global mode.\r\n\t */\r\n\tpublic get initialColor():ColorTransform\r\n\t{\r\n\t\treturn this._initialColor;\r\n\t}\r\n\r\n\tpublic set initialColor(value:ColorTransform)\r\n\t{\r\n\t\tthis._initialColor = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\r\n\t{\r\n\t\tif (shader.usesFragmentAnimation) {\r\n\t\t\tvar index:number;\r\n\t\t\tif (this._particleInitialColorNode.mode == ParticlePropertiesMode.LOCAL_STATIC) {\r\n\t\t\t\tvar dataOffset:number = this._particleInitialColorNode._iDataOffset;\r\n\t\t\t\tif (this._usesMultiplier) {\r\n\t\t\t\t\tanimationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleInitialColorState.MULTIPLIER_INDEX), dataOffset, stage, ContextGLVertexBufferFormat.FLOAT_4);\r\n\t\t\t\t\tdataOffset += 4;\r\n\t\t\t\t}\r\n\t\t\t\tif (this._usesOffset)\r\n\t\t\t\t\tanimationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleInitialColorState.OFFSET_INDEX), dataOffset, stage, ContextGLVertexBufferFormat.FLOAT_4);\r\n\t\t\t} else {\r\n\t\t\t\tif (this._usesMultiplier)\r\n\t\t\t\t\tshader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleInitialColorState.MULTIPLIER_INDEX), this._multiplierData.x, this._multiplierData.y, this._multiplierData.z, this._multiplierData.w);\r\n\t\t\t\tif (this._usesOffset)\r\n\t\t\t\t\tshader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleInitialColorState.OFFSET_INDEX), this._offsetData.x, this._offsetData.y, this._offsetData.z, this._offsetData.w);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate updateColorData():void\r\n\t{\r\n\t\tif (this._particleInitialColorNode.mode == ParticlePropertiesMode.GLOBAL) {\r\n\t\t\tif (this._usesMultiplier)\r\n\t\t\t\tthis._multiplierData = new Vector3D(this._initialColor.redMultiplier, this._initialColor.greenMultiplier, this._initialColor.blueMultiplier, this._initialColor.alphaMultiplier);\r\n\t\t\tif (this._usesOffset)\r\n\t\t\t\tthis._offsetData = new Vector3D(this._initialColor.redOffset/255, this._initialColor.greenOffset/255, this._initialColor.blueOffset/255, this._initialColor.alphaOffset/255);\r\n\t\t}\r\n\t}\r\n\r\n}",
    "import {Matrix3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\r\nimport {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\n\r\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\nimport {ContextGLVertexBufferFormat}\t\tfrom \"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\";\r\n\r\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\r\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\r\nimport {ParticleOrbitNode}\t\t\t\tfrom \"../../animators/nodes/ParticleOrbitNode\";\r\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\r\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\n\r\n/**\r\n * ...\r\n */\r\nexport class ParticleOrbitState extends ParticleStateBase\r\n{\r\n\t/** @private */\r\n\tpublic static ORBIT_INDEX:number = 0;\r\n\r\n\t/** @private */\r\n\tpublic static EULERS_INDEX:number = 1;\r\n\r\n\tprivate _particleOrbitNode:ParticleOrbitNode;\r\n\tprivate _usesEulers:boolean;\r\n\tprivate _usesCycle:boolean;\r\n\tprivate _usesPhase:boolean;\r\n\tprivate _radius:number;\r\n\tprivate _cycleDuration:number;\r\n\tprivate _cyclePhase:number;\r\n\tprivate _eulers:Vector3D;\r\n\tprivate _orbitData:Vector3D;\r\n\tprivate _eulersMatrix:Matrix3D;\r\n\r\n\t/**\r\n\t * Defines the radius of the orbit when in global mode. Defaults to 100.\r\n\t */\r\n\tpublic get radius():number\r\n\t{\r\n\t\treturn this._radius;\r\n\t}\r\n\r\n\tpublic set radius(value:number)\r\n\t{\r\n\t\tthis._radius = value;\r\n\r\n\t\tthis.updateOrbitData();\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the duration of the orbit in seconds, used as a period independent of particle duration when in global mode. Defaults to 1.\r\n\t */\r\n\tpublic get cycleDuration():number\r\n\t{\r\n\t\treturn this._cycleDuration;\r\n\t}\r\n\r\n\tpublic set cycleDuration(value:number)\r\n\t{\r\n\t\tthis._cycleDuration = value;\r\n\r\n\t\tthis.updateOrbitData();\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the phase of the orbit in degrees, used as the starting offset of the cycle when in global mode. Defaults to 0.\r\n\t */\r\n\tpublic get cyclePhase():number\r\n\t{\r\n\t\treturn this._cyclePhase;\r\n\t}\r\n\r\n\tpublic set cyclePhase(value:number)\r\n\t{\r\n\t\tthis._cyclePhase = value;\r\n\r\n\t\tthis.updateOrbitData();\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the euler rotation in degrees, applied to the orientation of the orbit when in global mode.\r\n\t */\r\n\tpublic get eulers():Vector3D\r\n\t{\r\n\t\treturn this._eulers;\r\n\t}\r\n\r\n\tpublic set eulers(value:Vector3D)\r\n\t{\r\n\t\tthis._eulers = value;\r\n\r\n\t\tthis.updateOrbitData();\r\n\r\n\t}\r\n\r\n\tconstructor(animator:ParticleAnimator, particleOrbitNode:ParticleOrbitNode)\r\n\t{\r\n\t\tsuper(animator, particleOrbitNode);\r\n\r\n\t\tthis._particleOrbitNode = particleOrbitNode;\r\n\t\tthis._usesEulers = this._particleOrbitNode._iUsesEulers;\r\n\t\tthis._usesCycle = this._particleOrbitNode._iUsesCycle;\r\n\t\tthis._usesPhase = this._particleOrbitNode._iUsesPhase;\r\n\t\tthis._eulers = this._particleOrbitNode._iEulers;\r\n\t\tthis._radius = this._particleOrbitNode._iRadius;\r\n\t\tthis._cycleDuration = this._particleOrbitNode._iCycleDuration;\r\n\t\tthis._cyclePhase = this._particleOrbitNode._iCyclePhase;\r\n\t\tthis.updateOrbitData();\r\n\t}\r\n\r\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\r\n\t{\r\n\t\tvar index:number = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleOrbitState.ORBIT_INDEX);\r\n\r\n\t\tif (this._particleOrbitNode.mode == ParticlePropertiesMode.LOCAL_STATIC) {\r\n\t\t\tif (this._usesPhase)\r\n\t\t\t\tanimationElements.activateVertexBuffer(index, this._particleOrbitNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_4);\r\n\t\t\telse\r\n\t\t\t\tanimationElements.activateVertexBuffer(index, this._particleOrbitNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_3);\r\n\t\t} else\r\n\t\t\tshader.setVertexConst(index, this._orbitData.x, this._orbitData.y, this._orbitData.z, this._orbitData.w);\r\n\r\n\t\tif (this._usesEulers)\r\n\t\t\tshader.setVertexConstFromMatrix(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleOrbitState.EULERS_INDEX), this._eulersMatrix);\r\n\t}\r\n\r\n\tprivate updateOrbitData():void\r\n\t{\r\n\t\tif (this._usesEulers) {\r\n\t\t\tthis._eulersMatrix = new Matrix3D();\r\n\t\t\tthis._eulersMatrix.appendRotation(this._eulers.x, Vector3D.X_AXIS);\r\n\t\t\tthis._eulersMatrix.appendRotation(this._eulers.y, Vector3D.Y_AXIS);\r\n\t\t\tthis._eulersMatrix.appendRotation(this._eulers.z, Vector3D.Z_AXIS);\r\n\t\t}\r\n\t\tif (this._particleOrbitNode.mode == ParticlePropertiesMode.GLOBAL) {\r\n\t\t\tthis._orbitData = new Vector3D(this._radius, 0, this._radius*Math.PI*2, this._cyclePhase*Math.PI/180);\r\n\t\t\tif (this._usesCycle) {\r\n\t\t\t\tif (this._cycleDuration <= 0)\r\n\t\t\t\t\tthrow(new Error(\"the cycle duration must be greater than zero\"));\r\n\t\t\t\tthis._orbitData.y = Math.PI*2/this._cycleDuration;\r\n\t\t\t} else\r\n\t\t\t\tthis._orbitData.y = Math.PI*2;\r\n\t\t}\r\n\t}\r\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\n\r\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\nimport {ContextGLVertexBufferFormat}\t\tfrom \"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\";\r\n\r\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\r\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\r\nimport {ParticleOscillatorNode}\t\t\tfrom \"../../animators/nodes/ParticleOscillatorNode\";\r\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\r\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\n\r\n/**\r\n * ...\r\n */\r\nexport class ParticleOscillatorState extends ParticleStateBase\r\n{\r\n\t/** @private */\r\n\tpublic static OSCILLATOR_INDEX:number = 0;\r\n\r\n\tprivate _particleOscillatorNode:ParticleOscillatorNode;\r\n\tprivate _oscillator:Vector3D;\r\n\tprivate _oscillatorData:Vector3D;\r\n\r\n\t/**\r\n\t * Defines the default oscillator axis (x, y, z) and cycleDuration (w) of the state, used when in global mode.\r\n\t */\r\n\tpublic get oscillator():Vector3D\r\n\t{\r\n\t\treturn this._oscillator;\r\n\t}\r\n\r\n\tpublic set oscillator(value:Vector3D)\r\n\t{\r\n\t\tthis._oscillator = value;\r\n\r\n\t\tthis.updateOscillatorData();\r\n\t}\r\n\r\n\tconstructor(animator:ParticleAnimator, particleOscillatorNode:ParticleOscillatorNode)\r\n\t{\r\n\t\tsuper(animator, particleOscillatorNode);\r\n\r\n\t\tthis._particleOscillatorNode = particleOscillatorNode;\r\n\t\tthis._oscillator = this._particleOscillatorNode._iOscillator;\r\n\r\n\t\tthis.updateOscillatorData();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\r\n\t{\r\n\t\tvar index:number = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleOscillatorState.OSCILLATOR_INDEX);\r\n\r\n\t\tif (this._particleOscillatorNode.mode == ParticlePropertiesMode.LOCAL_STATIC)\r\n\t\t\tanimationElements.activateVertexBuffer(index, this._particleOscillatorNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_4);\r\n\t\telse\r\n\t\t\tshader.setVertexConst(index, this._oscillatorData.x, this._oscillatorData.y, this._oscillatorData.z, this._oscillatorData.w);\r\n\t}\r\n\r\n\tprivate updateOscillatorData():void\r\n\t{\r\n\t\tif (this._particleOscillatorNode.mode == ParticlePropertiesMode.GLOBAL) {\r\n\t\t\tif (this._oscillator.w <= 0)\r\n\t\t\t\tthrow(new Error(\"the cycle duration must greater than zero\"));\r\n\r\n\t\t\tif (this._oscillatorData == null)\r\n\t\t\t\tthis._oscillatorData = new Vector3D();\r\n\r\n\t\t\tthis._oscillatorData.x = this._oscillator.x;\r\n\t\t\tthis._oscillatorData.y = this._oscillator.y;\r\n\t\t\tthis._oscillatorData.z = this._oscillator.z;\r\n\t\t\tthis._oscillatorData.w = Math.PI*2/this._oscillator.w;\r\n\t\t}\r\n\t}\r\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\n\r\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\nimport {ContextGLVertexBufferFormat}\t\tfrom \"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\";\r\n\r\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\r\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\r\nimport {ParticlePositionNode}\t\t\t\tfrom \"../../animators/nodes/ParticlePositionNode\";\r\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\r\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\n\r\n/**\r\n * ...\r\n * @author ...\r\n */\r\nexport class ParticlePositionState extends ParticleStateBase\r\n{\r\n\t/** @private */\r\n\tpublic static POSITION_INDEX:number = 0;\r\n\r\n\tprivate _particlePositionNode:ParticlePositionNode;\r\n\tprivate _position:Vector3D;\r\n\r\n\t/**\r\n\t * Defines the position of the particle when in global mode. Defaults to 0,0,0.\r\n\t */\r\n\tpublic get position():Vector3D\r\n\t{\r\n\t\treturn this._position;\r\n\t}\r\n\r\n\tpublic set position(value:Vector3D)\r\n\t{\r\n\t\tthis._position = value;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic getPositions():Array<Vector3D>\r\n\t{\r\n\t\treturn this._pDynamicProperties;\r\n\t}\r\n\r\n\tpublic setPositions(value:Array<Vector3D>):void\r\n\t{\r\n\t\tthis._pDynamicProperties = value;\r\n\r\n\t\tthis._pDynamicPropertiesDirty = new Object();\r\n\t}\r\n\r\n\tconstructor(animator:ParticleAnimator, particlePositionNode:ParticlePositionNode)\r\n\t{\r\n\t\tsuper(animator, particlePositionNode);\r\n\r\n\t\tthis._particlePositionNode = particlePositionNode;\r\n\t\tthis._position = this._particlePositionNode._iPosition;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\r\n\t{\r\n\t\tif (this._particlePositionNode.mode == ParticlePropertiesMode.LOCAL_DYNAMIC && !this._pDynamicPropertiesDirty[animationElements._iUniqueId])\r\n\t\t\tthis._pUpdateDynamicProperties(animationElements);\r\n\r\n\t\tvar index:number = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticlePositionState.POSITION_INDEX);\r\n\r\n\t\tif (this._particlePositionNode.mode == ParticlePropertiesMode.GLOBAL)\r\n\t\t\tshader.setVertexConst(index, this._position.x, this._position.y, this._position.z);\r\n\t\telse\r\n\t\t\tanimationElements.activateVertexBuffer(index, this._particlePositionNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_3);\r\n\t}\r\n}",
    "import {Matrix3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\r\n\r\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\n\r\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\n\r\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\r\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\r\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\r\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\r\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\n\r\n/**\r\n * ...\r\n */\r\nexport class ParticleRotateToHeadingState extends ParticleStateBase\r\n{\r\n\t/** @private */\r\n\tpublic static MATRIX_INDEX:number = 0;\r\n\r\n\tprivate _matrix:Matrix3D = new Matrix3D();\r\n\r\n\tconstructor(animator:ParticleAnimator, particleNode:ParticleNodeBase)\r\n\t{\r\n\t\tsuper(animator, particleNode);\r\n\t}\r\n\r\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\r\n\t{\r\n\t\tif ((<ParticleAnimationSet> this._pParticleAnimator.animationSet).hasBillboard) {\r\n\t\t\tthis._matrix.copyFrom(renderable.sourceEntity.sceneTransform);\r\n\t\t\tthis._matrix.append(camera.inverseSceneTransform);\r\n\t\t\tshader.setVertexConstFromMatrix(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleRotateToHeadingState.MATRIX_INDEX), this._matrix);\r\n\t\t}\r\n\t}\r\n\r\n}",
    "import {Matrix3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\r\nimport {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\n\r\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\nimport {ContextGLVertexBufferFormat}\t\tfrom \"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\";\r\n\r\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\r\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\r\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\r\nimport {ParticleRotateToPositionNode}\t\tfrom \"../../animators/nodes/ParticleRotateToPositionNode\";\r\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\r\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\n\r\n/**\r\n * ...\r\n */\r\nexport class ParticleRotateToPositionState extends ParticleStateBase\r\n{\r\n\t/** @private */\r\n\tpublic static MATRIX_INDEX:number = 0;\r\n\t/** @private */\r\n\tpublic static POSITION_INDEX:number = 1;\r\n\r\n\tprivate _particleRotateToPositionNode:ParticleRotateToPositionNode;\r\n\tprivate _position:Vector3D;\r\n\tprivate _matrix:Matrix3D = new Matrix3D();\r\n\tprivate _offset:Vector3D;\r\n\r\n\t/**\r\n\t * Defines the position of the point the particle will rotate to face when in global mode. Defaults to 0,0,0.\r\n\t */\r\n\tpublic get position():Vector3D\r\n\t{\r\n\t\treturn this._position;\r\n\t}\r\n\r\n\tpublic set position(value:Vector3D)\r\n\t{\r\n\t\tthis._position = value;\r\n\t}\r\n\r\n\tconstructor(animator:ParticleAnimator, particleRotateToPositionNode:ParticleRotateToPositionNode)\r\n\t{\r\n\t\tsuper(animator, particleRotateToPositionNode);\r\n\r\n\t\tthis._particleRotateToPositionNode = particleRotateToPositionNode;\r\n\t\tthis._position = this._particleRotateToPositionNode._iPosition;\r\n\t}\r\n\r\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\r\n\t{\r\n\t\tvar index:number = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleRotateToPositionState.POSITION_INDEX);\r\n\r\n\t\tif ((<ParticleAnimationSet> this._pParticleAnimator.animationSet).hasBillboard) {\r\n\t\t\tthis._matrix.copyFrom(renderable.sourceEntity.sceneTransform);\r\n\t\t\tthis._matrix.append(camera.inverseSceneTransform);\r\n\t\t\tshader.setVertexConstFromMatrix(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleRotateToPositionState.MATRIX_INDEX), this._matrix);\r\n\t\t}\r\n\r\n\t\tif (this._particleRotateToPositionNode.mode == ParticlePropertiesMode.GLOBAL) {\r\n\t\t\tthis._offset = renderable.sourceEntity.inverseSceneTransform.transformVector(this._position);\r\n\t\t\tshader.setVertexConst(index, this._offset.x, this._offset.y, this._offset.z);\r\n\t\t} else\r\n\t\t\tanimationElements.activateVertexBuffer(index, this._particleRotateToPositionNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_3);\r\n\r\n\t}\r\n\r\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\n\r\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\nimport {ContextGLVertexBufferFormat}\t\tfrom \"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\";\r\n\r\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\r\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\r\nimport {ParticleRotationalVelocityNode}\tfrom \"../../animators/nodes/ParticleRotationalVelocityNode\";\r\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\r\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\n\r\n/**\r\n * ...\r\n */\r\nexport class ParticleRotationalVelocityState extends ParticleStateBase\r\n{\r\n\t/** @private */\r\n\tpublic static ROTATIONALVELOCITY_INDEX:number = 0;\r\n\r\n\tprivate _particleRotationalVelocityNode:ParticleRotationalVelocityNode;\r\n\tprivate _rotationalVelocityData:Vector3D;\r\n\tprivate _rotationalVelocity:Vector3D;\r\n\r\n\t/**\r\n\t * Defines the default rotationalVelocity of the state, used when in global mode.\r\n\t */\r\n\tpublic get rotationalVelocity():Vector3D\r\n\t{\r\n\t\treturn this._rotationalVelocity;\r\n\t}\r\n\r\n\tpublic set rotationalVelocity(value:Vector3D)\r\n\t{\r\n\t\tthis._rotationalVelocity = value;\r\n\r\n\t\tthis.updateRotationalVelocityData();\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic getRotationalVelocities():Array<Vector3D>\r\n\t{\r\n\t\treturn this._pDynamicProperties;\r\n\t}\r\n\r\n\tpublic setRotationalVelocities(value:Array<Vector3D>):void\r\n\t{\r\n\t\tthis._pDynamicProperties = value;\r\n\r\n\t\tthis._pDynamicPropertiesDirty = new Object();\r\n\t}\r\n\r\n\tconstructor(animator:ParticleAnimator, particleRotationNode:ParticleRotationalVelocityNode)\r\n\t{\r\n\t\tsuper(animator, particleRotationNode);\r\n\r\n\t\tthis._particleRotationalVelocityNode = particleRotationNode;\r\n\t\tthis._rotationalVelocity = this._particleRotationalVelocityNode._iRotationalVelocity;\r\n\r\n\t\tthis.updateRotationalVelocityData();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\r\n\t{\r\n\t\tif (this._particleRotationalVelocityNode.mode == ParticlePropertiesMode.LOCAL_DYNAMIC && !this._pDynamicPropertiesDirty[animationElements._iUniqueId])\r\n\t\t\tthis._pUpdateDynamicProperties(animationElements);\r\n\r\n\t\tvar index:number = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleRotationalVelocityState.ROTATIONALVELOCITY_INDEX);\r\n\r\n\t\tif (this._particleRotationalVelocityNode.mode == ParticlePropertiesMode.GLOBAL)\r\n\t\t\tshader.setVertexConst(index, this._rotationalVelocityData.x, this._rotationalVelocityData.y, this._rotationalVelocityData.z, this._rotationalVelocityData.w);\r\n\t\telse\r\n\t\t\tanimationElements.activateVertexBuffer(index, this._particleRotationalVelocityNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_4);\r\n\t}\r\n\r\n\tprivate updateRotationalVelocityData():void\r\n\t{\r\n\t\tif (this._particleRotationalVelocityNode.mode == ParticlePropertiesMode.GLOBAL) {\r\n\t\t\tif (this._rotationalVelocity.w <= 0)\r\n\t\t\t\tthrow(new Error(\"the cycle duration must greater than zero\"));\r\n\t\t\tvar rotation:Vector3D = this._rotationalVelocity.clone();\r\n\r\n\t\t\tif (rotation.length <= 0)\r\n\t\t\t\trotation.z = 1; //set the default direction\r\n\t\t\telse\r\n\t\t\t\trotation.normalize();\r\n\t\t\t// w is used as angle/2 in agal\r\n\t\t\tthis._rotationalVelocityData = new Vector3D(rotation.x, rotation.y, rotation.z, Math.PI/rotation.w);\r\n\t\t}\r\n\t}\r\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\n\r\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\nimport {ContextGLVertexBufferFormat}\t\tfrom \"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\";\r\n\r\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\r\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\r\nimport {ParticleScaleNode}\t\t\t\tfrom \"../../animators/nodes/ParticleScaleNode\";\r\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\r\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\n\r\n/**\r\n * ...\r\n */\r\nexport class ParticleScaleState extends ParticleStateBase\r\n{\r\n\t/** @private */\r\n\tpublic static SCALE_INDEX:number = 0;\r\n\r\n\tprivate _particleScaleNode:ParticleScaleNode;\r\n\tprivate _usesCycle:boolean;\r\n\tprivate _usesPhase:boolean;\r\n\tprivate _minScale:number;\r\n\tprivate _maxScale:number;\r\n\tprivate _cycleDuration:number;\r\n\tprivate _cyclePhase:number;\r\n\tprivate _scaleData:Vector3D;\r\n\r\n\t/**\r\n\t * Defines the end scale of the state, when in global mode. Defaults to 1.\r\n\t */\r\n\tpublic get minScale():number\r\n\t{\r\n\t\treturn this._minScale;\r\n\t}\r\n\r\n\tpublic set minScale(value:number)\r\n\t{\r\n\t\tthis._minScale = value;\r\n\r\n\t\tthis.updateScaleData();\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the end scale of the state, when in global mode. Defaults to 1.\r\n\t */\r\n\tpublic get maxScale():number\r\n\t{\r\n\t\treturn this._maxScale;\r\n\t}\r\n\r\n\tpublic set maxScale(value:number)\r\n\t{\r\n\t\tthis._maxScale = value;\r\n\r\n\t\tthis.updateScaleData();\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the duration of the animation in seconds, used as a period independent of particle duration when in global mode. Defaults to 1.\r\n\t */\r\n\tpublic get cycleDuration():number\r\n\t{\r\n\t\treturn this._cycleDuration;\r\n\t}\r\n\r\n\tpublic set cycleDuration(value:number)\r\n\t{\r\n\t\tthis._cycleDuration = value;\r\n\r\n\t\tthis.updateScaleData();\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the phase of the cycle in degrees, used as the starting offset of the cycle when in global mode. Defaults to 0.\r\n\t */\r\n\tpublic get cyclePhase():number\r\n\t{\r\n\t\treturn this._cyclePhase;\r\n\t}\r\n\r\n\tpublic set cyclePhase(value:number)\r\n\t{\r\n\t\tthis._cyclePhase = value;\r\n\r\n\t\tthis.updateScaleData();\r\n\t}\r\n\r\n\tconstructor(animator:ParticleAnimator, particleScaleNode:ParticleScaleNode)\r\n\t{\r\n\t\tsuper(animator, particleScaleNode);\r\n\r\n\t\tthis._particleScaleNode = particleScaleNode;\r\n\t\tthis._usesCycle = this._particleScaleNode._iUsesCycle;\r\n\t\tthis._usesPhase = this._particleScaleNode._iUsesPhase;\r\n\t\tthis._minScale = this._particleScaleNode._iMinScale;\r\n\t\tthis._maxScale = this._particleScaleNode._iMaxScale;\r\n\t\tthis._cycleDuration = this._particleScaleNode._iCycleDuration;\r\n\t\tthis._cyclePhase = this._particleScaleNode._iCyclePhase;\r\n\r\n\t\tthis.updateScaleData();\r\n\t}\r\n\r\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\r\n\t{\r\n\t\tvar index:number = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleScaleState.SCALE_INDEX);\r\n\r\n\t\tif (this._particleScaleNode.mode == ParticlePropertiesMode.LOCAL_STATIC) {\r\n\t\t\tif (this._usesCycle) {\r\n\t\t\t\tif (this._usesPhase)\r\n\t\t\t\t\tanimationElements.activateVertexBuffer(index, this._particleScaleNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_4);\r\n\t\t\t\telse\r\n\t\t\t\t\tanimationElements.activateVertexBuffer(index, this._particleScaleNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_3);\r\n\t\t\t} else\r\n\t\t\t\tanimationElements.activateVertexBuffer(index, this._particleScaleNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_2);\r\n\t\t} else\r\n\t\t\tshader.setVertexConst(index, this._scaleData.x, this._scaleData.y, this._scaleData.z, this._scaleData.w);\r\n\t}\r\n\r\n\tprivate updateScaleData():void\r\n\t{\r\n\t\tif (this._particleScaleNode.mode == ParticlePropertiesMode.GLOBAL) {\r\n\t\t\tif (this._usesCycle) {\r\n\t\t\t\tif (this._cycleDuration <= 0)\r\n\t\t\t\t\tthrow(new Error(\"the cycle duration must be greater than zero\"));\r\n\t\t\t\tthis._scaleData = new Vector3D((this._minScale + this._maxScale)/2, Math.abs(this._minScale - this._maxScale)/2, Math.PI*2/this._cycleDuration, this._cyclePhase*Math.PI/180);\r\n\t\t\t} else\r\n\t\t\t\tthis._scaleData = new Vector3D(this._minScale, this._maxScale - this._minScale, 0, 0);\r\n\t\t}\r\n\t}\r\n}",
    "import {ColorTransform}\t\t\t\t\tfrom \"awayjs-core/lib/geom/ColorTransform\";\r\n\r\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\n\r\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\n\r\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\r\nimport {ColorSegmentPoint}\t\t\t\tfrom \"../../animators/data/ColorSegmentPoint\";\r\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\r\nimport {ParticleSegmentedColorNode}\t\tfrom \"../../animators/nodes/ParticleSegmentedColorNode\";\r\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\r\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\n\r\n/**\r\n *\r\n */\r\nexport class ParticleSegmentedColorState extends ParticleStateBase\r\n{\r\n\t/** @private */\r\n\tpublic static START_MULTIPLIER_INDEX:number = 0;\r\n\r\n\t/** @private */\r\n\tpublic static START_OFFSET_INDEX:number = 1;\r\n\r\n\t/** @private */\r\n\tpublic static TIME_DATA_INDEX:number = 2;\r\n\r\n\tprivate _usesMultiplier:boolean;\r\n\tprivate _usesOffset:boolean;\r\n\tprivate _startColor:ColorTransform;\r\n\tprivate _endColor:ColorTransform;\r\n\tprivate _segmentPoints:Array<ColorSegmentPoint>;\r\n\tprivate _numSegmentPoint:number;\r\n\r\n\tprivate _timeLifeData:Float32Array;\r\n\tprivate _multiplierData:Float32Array;\r\n\tprivate _offsetData:Float32Array;\r\n\r\n\t/**\r\n\t * Defines the start color transform of the state, when in global mode.\r\n\t */\r\n\tpublic get startColor():ColorTransform\r\n\t{\r\n\t\treturn this._startColor;\r\n\t}\r\n\r\n\tpublic set startColor(value:ColorTransform)\r\n\t{\r\n\t\tthis._startColor = value;\r\n\r\n\t\tthis.updateColorData();\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the end color transform of the state, when in global mode.\r\n\t */\r\n\tpublic get endColor():ColorTransform\r\n\t{\r\n\t\treturn this._endColor;\r\n\t}\r\n\r\n\tpublic set endColor(value:ColorTransform)\r\n\t{\r\n\t\tthis._endColor = value;\r\n\t\t\r\n\t\tthis.updateColorData();\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the number of segments.\r\n\t */\r\n\tpublic get numSegmentPoint():number\r\n\t{\r\n\t\treturn this._numSegmentPoint;\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the key points of color\r\n\t */\r\n\tpublic get segmentPoints():Array<ColorSegmentPoint>\r\n\t{\r\n\t\treturn this._segmentPoints;\r\n\t}\r\n\r\n\tpublic set segmentPoints(value:Array<ColorSegmentPoint>)\r\n\t{\r\n\t\tthis._segmentPoints = value;\r\n\t\tthis.updateColorData();\r\n\t}\r\n\r\n\tpublic get usesMultiplier():boolean\r\n\t{\r\n\t\treturn this._usesMultiplier;\r\n\t}\r\n\r\n\tpublic get usesOffset():boolean\r\n\t{\r\n\t\treturn this._usesOffset;\r\n\t}\r\n\r\n\tconstructor(animator:ParticleAnimator, particleSegmentedColorNode:ParticleSegmentedColorNode)\r\n\t{\r\n\t\tsuper(animator, particleSegmentedColorNode);\r\n\r\n\t\tthis._usesMultiplier = particleSegmentedColorNode._iUsesMultiplier;\r\n\t\tthis._usesOffset = particleSegmentedColorNode._iUsesOffset;\r\n\t\tthis._startColor = particleSegmentedColorNode._iStartColor;\r\n\t\tthis._endColor = particleSegmentedColorNode._iEndColor;\r\n\t\tthis._segmentPoints = particleSegmentedColorNode._iSegmentPoints;\r\n\t\tthis._numSegmentPoint = particleSegmentedColorNode._iNumSegmentPoint;\r\n\t\tthis.updateColorData();\r\n\t}\r\n\r\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\r\n\t{\r\n\t\tif (shader.usesFragmentAnimation) {\r\n\t\t\tif (this._numSegmentPoint > 0)\r\n\t\t\t\tshader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleSegmentedColorState.TIME_DATA_INDEX), this._timeLifeData[0], this._timeLifeData[1], this._timeLifeData[2], this._timeLifeData[3]);\r\n\t\t\tif (this._usesMultiplier)\r\n\t\t\t\tshader.setVertexConstFromArray(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleSegmentedColorState.START_MULTIPLIER_INDEX), this._multiplierData);\r\n\t\t\tif (this._usesOffset)\r\n\t\t\t\tshader.setVertexConstFromArray(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleSegmentedColorState.START_OFFSET_INDEX), this._offsetData);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate updateColorData():void\r\n\t{\r\n\t\tthis._timeLifeData = new Float32Array(4);\r\n\t\tthis._multiplierData = new Float32Array(4*(this._numSegmentPoint + 1));\r\n\t\tthis._offsetData = new Float32Array(4*(this._numSegmentPoint + 1));\r\n\r\n\t\t//cut off the time data\r\n\t\tvar i:number;\r\n\t\tvar j:number = 0;\r\n\t\tvar count:number = this._numSegmentPoint > 3? 3 : this._numSegmentPoint;\r\n\t\tfor (i = 0; i < count; i++) {\r\n\t\t\tif (i == 0)\r\n\t\t\t\tthis._timeLifeData[j++] = this._segmentPoints[i].life;\r\n\t\t\telse\r\n\t\t\t\tthis._timeLifeData[j++] = this._segmentPoints[i].life - this._segmentPoints[i - 1].life;\r\n\t\t}\r\n\t\ti = count;\r\n\t\tif (this._numSegmentPoint == 0)\r\n\t\t\tthis._timeLifeData[j++] = 1;\r\n\t\telse\r\n\t\t\tthis._timeLifeData[j++] = 1 - this._segmentPoints[i - 1].life;\r\n\r\n\t\tif (this._usesMultiplier) {\r\n\t\t\tj = 0;\r\n\t\t\tthis._multiplierData[j++] = this._startColor.redMultiplier;\r\n\t\t\tthis._multiplierData[j++] = this._startColor.greenMultiplier;\r\n\t\t\tthis._multiplierData[j++] = this._startColor.blueMultiplier;\r\n\t\t\tthis._multiplierData[j++] = this._startColor.alphaMultiplier;\r\n\t\t\tfor (i = 0; i < this._numSegmentPoint; i++) {\r\n\t\t\t\tif (i == 0) {\r\n\t\t\t\t\tthis._multiplierData[j++] = (this._segmentPoints[i].color.redMultiplier - this._startColor.redMultiplier)/this._timeLifeData[i];\r\n\t\t\t\t\tthis._multiplierData[j++] = (this._segmentPoints[i].color.greenMultiplier - this._startColor.greenMultiplier)/this._timeLifeData[i];\r\n\t\t\t\t\tthis._multiplierData[j++] = (this._segmentPoints[i].color.blueMultiplier - this._startColor.blueMultiplier)/this._timeLifeData[i];\r\n\t\t\t\t\tthis._multiplierData[j++] = (this._segmentPoints[i].color.alphaMultiplier - this._startColor.alphaMultiplier)/this._timeLifeData[i];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._multiplierData[j++] = (this._segmentPoints[i].color.redMultiplier - this._segmentPoints[i - 1].color.redMultiplier)/this._timeLifeData[i];\r\n\t\t\t\t\tthis._multiplierData[j++] = (this._segmentPoints[i].color.greenMultiplier - this._segmentPoints[i - 1].color.greenMultiplier)/this._timeLifeData[i];\r\n\t\t\t\t\tthis._multiplierData[j++] = (this._segmentPoints[i].color.blueMultiplier - this._segmentPoints[i - 1].color.blueMultiplier)/this._timeLifeData[i];\r\n\t\t\t\t\tthis._multiplierData[j++] = (this._segmentPoints[i].color.alphaMultiplier - this._segmentPoints[i - 1].color.alphaMultiplier)/this._timeLifeData[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ti = this._numSegmentPoint;\r\n\t\t\tif (this._numSegmentPoint == 0) {\r\n\t\t\t\tthis._multiplierData[j++] = this._endColor.redMultiplier - this._startColor.redMultiplier;\r\n\t\t\t\tthis._multiplierData[j++] = this._endColor.greenMultiplier - this._startColor.greenMultiplier;\r\n\t\t\t\tthis._multiplierData[j++] = this._endColor.blueMultiplier - this._startColor.blueMultiplier;\r\n\t\t\t\tthis._multiplierData[j++] = this._endColor.alphaMultiplier - this._startColor.alphaMultiplier;\r\n\t\t\t} else {\r\n\t\t\t\tthis._multiplierData[j++] = (this._endColor.redMultiplier - this._segmentPoints[i - 1].color.redMultiplier)/this._timeLifeData[i];\r\n\t\t\t\tthis._multiplierData[j++] = (this._endColor.greenMultiplier - this._segmentPoints[i - 1].color.greenMultiplier)/this._timeLifeData[i];\r\n\t\t\t\tthis._multiplierData[j++] = (this._endColor.blueMultiplier - this._segmentPoints[i - 1].color.blueMultiplier)/this._timeLifeData[i];\r\n\t\t\t\tthis._multiplierData[j++] = (this._endColor.alphaMultiplier - this._segmentPoints[i - 1].color.alphaMultiplier)/this._timeLifeData[i];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._usesOffset) {\r\n\t\t\tj = 0;\r\n\t\t\tthis._offsetData[j++] = this._startColor.redOffset/255;\r\n\t\t\tthis._offsetData[j++] = this._startColor.greenOffset/255;\r\n\t\t\tthis._offsetData[j++] = this._startColor.blueOffset/255;\r\n\t\t\tthis._offsetData[j++] = this._startColor.alphaOffset/255;\r\n\t\t\tfor (i = 0; i < this._numSegmentPoint; i++) {\r\n\t\t\t\tif (i == 0) {\r\n\t\t\t\t\tthis._offsetData[j++] = (this._segmentPoints[i].color.redOffset - this._startColor.redOffset)/this._timeLifeData[i]/255;\r\n\t\t\t\t\tthis._offsetData[j++] = (this._segmentPoints[i].color.greenOffset - this._startColor.greenOffset)/this._timeLifeData[i]/255;\r\n\t\t\t\t\tthis._offsetData[j++] = (this._segmentPoints[i].color.blueOffset - this._startColor.blueOffset)/this._timeLifeData[i]/255;\r\n\t\t\t\t\tthis._offsetData[j++] = (this._segmentPoints[i].color.alphaOffset - this._startColor.alphaOffset)/this._timeLifeData[i]/255;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._offsetData[j++] = (this._segmentPoints[i].color.redOffset - this._segmentPoints[i - 1].color.redOffset)/this._timeLifeData[i]/255;\r\n\t\t\t\t\tthis._offsetData[j++] = (this._segmentPoints[i].color.greenOffset - this._segmentPoints[i - 1].color.greenOffset)/this._timeLifeData[i]/255;\r\n\t\t\t\t\tthis._offsetData[j++] = (this._segmentPoints[i].color.blueOffset - this._segmentPoints[i - 1].color.blueOffset)/this._timeLifeData[i]/255;\r\n\t\t\t\t\tthis._offsetData[j++] = (this._segmentPoints[i].color.alphaOffset - this._segmentPoints[i - 1].color.alphaOffset)/this._timeLifeData[i]/255;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ti = this._numSegmentPoint;\r\n\t\t\tif (this._numSegmentPoint == 0) {\r\n\t\t\t\tthis._offsetData[j++] = (this._endColor.redOffset - this._startColor.redOffset)/255;\r\n\t\t\t\tthis._offsetData[j++] = (this._endColor.greenOffset - this._startColor.greenOffset)/255;\r\n\t\t\t\tthis._offsetData[j++] = (this._endColor.blueOffset - this._startColor.blueOffset)/255;\r\n\t\t\t\tthis._offsetData[j++] = (this._endColor.alphaOffset - this._startColor.alphaOffset)/255;\r\n\t\t\t} else {\r\n\t\t\t\tthis._offsetData[i] = (this._endColor.redOffset - this._segmentPoints[i - 1].color.redOffset)/this._timeLifeData[i]/255;\r\n\t\t\t\tthis._offsetData[j++] = (this._endColor.greenOffset - this._segmentPoints[i - 1].color.greenOffset)/this._timeLifeData[i]/255;\r\n\t\t\t\tthis._offsetData[j++] = (this._endColor.blueOffset - this._segmentPoints[i - 1].color.blueOffset)/this._timeLifeData[i]/255;\r\n\t\t\t\tthis._offsetData[j++] = (this._endColor.alphaOffset - this._segmentPoints[i - 1].color.alphaOffset)/this._timeLifeData[i]/255;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\n\r\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\nimport {ContextGLVertexBufferFormat}\t\tfrom \"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\";\r\n\r\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\r\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\r\nimport {ParticleSpriteSheetNode}\t\t\tfrom \"../../animators/nodes/ParticleSpriteSheetNode\";\r\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\r\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\n\r\n/**\r\n * ...\r\n */\r\nexport class ParticleSpriteSheetState extends ParticleStateBase\r\n{\r\n\t/** @private */\r\n\tpublic static UV_INDEX_0:number = 0;\r\n\r\n\t/** @private */\r\n\tpublic static UV_INDEX_1:number = 1;\r\n\r\n\tprivate _particleSpriteSheetNode:ParticleSpriteSheetNode;\r\n\tprivate _usesCycle:boolean;\r\n\tprivate _usesPhase:boolean;\r\n\tprivate _totalFrames:number;\r\n\tprivate _numColumns:number;\r\n\tprivate _numRows:number;\r\n\tprivate _cycleDuration:number;\r\n\tprivate _cyclePhase:number;\r\n\tprivate _spriteSheetData:Array<number>;\r\n\r\n\t/**\r\n\t * Defines the cycle phase, when in global mode. Defaults to zero.\r\n\t */\r\n\tpublic get cyclePhase():number\r\n\t{\r\n\t\treturn this._cyclePhase;\r\n\t}\r\n\r\n\tpublic set cyclePhase(value:number)\r\n\t{\r\n\t\tthis._cyclePhase = value;\r\n\r\n\t\tthis.updateSpriteSheetData();\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the cycle duration in seconds, when in global mode. Defaults to 1.\r\n\t */\r\n\tpublic get cycleDuration():number\r\n\t{\r\n\t\treturn this._cycleDuration;\r\n\t}\r\n\r\n\tpublic set cycleDuration(value:number)\r\n\t{\r\n\t\tthis._cycleDuration = value;\r\n\r\n\t\tthis.updateSpriteSheetData();\r\n\t}\r\n\r\n\tconstructor(animator:ParticleAnimator, particleSpriteSheetNode:ParticleSpriteSheetNode)\r\n\t{\r\n\t\tsuper(animator, particleSpriteSheetNode);\r\n\r\n\t\tthis._particleSpriteSheetNode = particleSpriteSheetNode;\r\n\r\n\t\tthis._usesCycle = this._particleSpriteSheetNode._iUsesCycle;\r\n\t\tthis._usesPhase = this._particleSpriteSheetNode._iUsesCycle;\r\n\t\tthis._totalFrames = this._particleSpriteSheetNode._iTotalFrames;\r\n\t\tthis._numColumns = this._particleSpriteSheetNode._iNumColumns;\r\n\t\tthis._numRows = this._particleSpriteSheetNode._iNumRows;\r\n\t\tthis._cycleDuration = this._particleSpriteSheetNode._iCycleDuration;\r\n\t\tthis._cyclePhase = this._particleSpriteSheetNode._iCyclePhase;\r\n\r\n\t\tthis.updateSpriteSheetData();\r\n\t}\r\n\r\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\r\n\t{\r\n\t\tif (!shader.usesUVTransform) {\r\n\t\t\tshader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleSpriteSheetState.UV_INDEX_0), this._spriteSheetData[0], this._spriteSheetData[1], this._spriteSheetData[2], this._spriteSheetData[3]);\r\n\t\t\tif (this._usesCycle) {\r\n\t\t\t\tvar index:number = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleSpriteSheetState.UV_INDEX_1);\r\n\t\t\t\tif (this._particleSpriteSheetNode.mode == ParticlePropertiesMode.LOCAL_STATIC) {\r\n\t\t\t\t\tif (this._usesPhase)\r\n\t\t\t\t\t\tanimationElements.activateVertexBuffer(index, this._particleSpriteSheetNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_3);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tanimationElements.activateVertexBuffer(index, this._particleSpriteSheetNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_2);\r\n\t\t\t\t} else\r\n\t\t\t\t\tshader.setVertexConst(index, this._spriteSheetData[4], this._spriteSheetData[5]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate updateSpriteSheetData():void\r\n\t{\r\n\t\tthis._spriteSheetData = new Array<number>(8);\r\n\r\n\t\tvar uTotal:number = this._totalFrames/this._numColumns;\r\n\r\n\t\tthis._spriteSheetData[0] = uTotal;\r\n\t\tthis._spriteSheetData[1] = 1/this._numColumns;\r\n\t\tthis._spriteSheetData[2] = 1/this._numRows;\r\n\r\n\t\tif (this._usesCycle) {\r\n\t\t\tif (this._cycleDuration <= 0)\r\n\t\t\t\tthrow(new Error(\"the cycle duration must be greater than zero\"));\r\n\t\t\tthis._spriteSheetData[4] = uTotal/this._cycleDuration;\r\n\t\t\tthis._spriteSheetData[5] = this._cycleDuration;\r\n\t\t\tif (this._usesPhase)\r\n\t\t\t\tthis._spriteSheetData[6] = this._cyclePhase;\r\n\t\t}\r\n\t}\r\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\n\r\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\n\r\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\r\nimport {ParticleAnimationData}\t\t\tfrom \"../../animators/data/ParticleAnimationData\";\r\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\r\nimport {AnimationStateBase}\t\t\t\tfrom \"../../animators/states/AnimationStateBase\";\r\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\n\r\n/**\r\n * ...\r\n */\r\nexport class ParticleStateBase extends AnimationStateBase\r\n{\r\n\tprivate _particleNode:ParticleNodeBase;\r\n\tpublic _pParticleAnimator:ParticleAnimator;\r\n\t\r\n\tpublic _pDynamicProperties:Array<Vector3D> = new Array<Vector3D>();\r\n\tpublic _pDynamicPropertiesDirty:Object = new Object();\r\n\r\n\tpublic _pNeedUpdateTime:boolean;\r\n\r\n\tconstructor(animator:ParticleAnimator, particleNode:ParticleNodeBase, needUpdateTime:boolean = false)\r\n\t{\r\n\t\tsuper(animator, particleNode);\r\n\r\n\t\tthis._pParticleAnimator = animator;\r\n\t\tthis._particleNode = particleNode;\r\n\t\tthis._pNeedUpdateTime = needUpdateTime;\r\n\t}\r\n\r\n\tpublic get needUpdateTime():boolean\r\n\t{\r\n\t\treturn this._pNeedUpdateTime;\r\n\t}\r\n\r\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\r\n\t{\r\n\r\n\t}\r\n\r\n\tpublic _pUpdateDynamicProperties(animationElements:AnimationElements):void\r\n\t{\r\n\t\tthis._pDynamicPropertiesDirty[animationElements._iUniqueId] = true;\r\n\r\n\t\tvar animationParticles:Array<ParticleAnimationData> = animationElements.animationParticles;\r\n\t\tvar vertexData:Array<number> = animationElements.vertexData;\r\n\t\tvar totalLenOfOneVertex:number = animationElements.totalLenOfOneVertex;\r\n\t\tvar dataLength:number = this._particleNode.dataLength;\r\n\t\tvar dataOffset:number = this._particleNode._iDataOffset;\r\n\t\tvar vertexLength:number;\r\n\t\t//\t\t\tvar particleOffset:number;\r\n\t\tvar startingOffset:number;\r\n\t\tvar vertexOffset:number;\r\n\t\tvar data:Vector3D;\r\n\t\tvar animationParticle:ParticleAnimationData;\r\n\r\n\t\t//\t\t\tvar numParticles:number = _positions.length/dataLength;\r\n\t\tvar numParticles:number = this._pDynamicProperties.length;\r\n\t\tvar i:number = 0;\r\n\t\tvar j:number = 0;\r\n\t\tvar k:number = 0;\r\n\r\n\t\t//loop through all particles\r\n\t\twhile (i < numParticles) {\r\n\t\t\t//loop through each particle data for the current particle\r\n\t\t\twhile (j < numParticles && (animationParticle = animationParticles[j]).index == i) {\r\n\t\t\t\tdata = this._pDynamicProperties[i];\r\n\t\t\t\tvertexLength = animationParticle.numVertices*totalLenOfOneVertex;\r\n\t\t\t\tstartingOffset = animationParticle.startVertexIndex*totalLenOfOneVertex + dataOffset;\r\n\t\t\t\t//loop through each vertex in the particle data\r\n\t\t\t\tfor (k = 0; k < vertexLength; k += totalLenOfOneVertex) {\r\n\t\t\t\t\tvertexOffset = startingOffset + k;\r\n\t\t\t\t\t//\t\t\t\t\t\tparticleOffset = i * dataLength;\r\n\t\t\t\t\t//loop through all vertex data for the current particle data\r\n\t\t\t\t\tfor (k = 0; k < vertexLength; k += totalLenOfOneVertex) {\r\n\t\t\t\t\t\tvertexOffset = startingOffset + k;\r\n\t\t\t\t\t\tvertexData[vertexOffset++] = data.x;\r\n\t\t\t\t\t\tvertexData[vertexOffset++] = data.y;\r\n\t\t\t\t\t\tvertexData[vertexOffset++] = data.z;\r\n\r\n\t\t\t\t\t\tif (dataLength == 4)\r\n\t\t\t\t\t\t\tvertexData[vertexOffset++] = data.w;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\t//loop through each value in the particle vertex\r\n\t\t\t\t\t\t//\t\t\t\t\t\tswitch(dataLength) {\r\n\t\t\t\t\t\t//\t\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t//\t\t\t\t\t\t\t\tvertexData[vertexOffset++] = _positions[particleOffset++];\r\n\t\t\t\t\t\t//\t\t\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t//\t\t\t\t\t\t\t\tvertexData[vertexOffset++] = _positions[particleOffset++];\r\n\t\t\t\t\t\t//\t\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t//\t\t\t\t\t\t\t\tvertexData[vertexOffset++] = _positions[particleOffset++];\r\n\t\t\t\t\t\t//\t\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t//\t\t\t\t\t\t\t\tvertexData[vertexOffset++] = _positions[particleOffset++];\r\n\t\t\t\t\t\t//\t\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tj++;\r\n\t\t\t}\r\n\t\t\ti++;\r\n\t\t}\r\n\r\n\t\tanimationElements.invalidateBuffer();\r\n\t}\r\n\r\n}",
    "import {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\n\r\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\nimport {ContextGLVertexBufferFormat}\t\tfrom \"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\";\r\n\r\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\r\nimport {ParticleTimeNode}\t\t\t\t\tfrom \"../../animators/nodes/ParticleTimeNode\";\r\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\r\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\n\r\n/**\r\n * ...\r\n */\r\nexport class ParticleTimeState extends ParticleStateBase\r\n{\r\n\t/** @private */\r\n\tpublic static TIME_STREAM_INDEX:number = 0;\r\n\r\n\t/** @private */\r\n\tpublic static TIME_CONSTANT_INDEX:number = 1;\r\n\r\n\tprivate _particleTimeNode:ParticleTimeNode;\r\n\r\n\tconstructor(animator:ParticleAnimator, particleTimeNode:ParticleTimeNode)\r\n\t{\r\n\t\tsuper(animator, particleTimeNode, true);\r\n\r\n\t\tthis._particleTimeNode = particleTimeNode;\r\n\t}\r\n\r\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\r\n\t{\r\n\t\tanimationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleTimeState.TIME_STREAM_INDEX), this._particleTimeNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_4);\r\n\r\n\t\tvar particleTime:number = this._pTime/1000;\r\n\t\tshader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleTimeState.TIME_CONSTANT_INDEX), particleTime, particleTime, particleTime, particleTime);\r\n\t}\r\n\r\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\n\r\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\n\r\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\r\nimport {ParticleUVNode}\t\t\t\t\tfrom \"../../animators/nodes/ParticleUVNode\";\r\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\r\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\n\r\n/**\r\n * ...\r\n */\r\nexport class ParticleUVState extends ParticleStateBase\r\n{\r\n\t/** @private */\r\n\tpublic static UV_INDEX:number = 0;\r\n\r\n\tprivate _particleUVNode:ParticleUVNode;\r\n\r\n\tconstructor(animator:ParticleAnimator, particleUVNode:ParticleUVNode)\r\n\t{\r\n\t\tsuper(animator, particleUVNode);\r\n\r\n\t\tthis._particleUVNode = particleUVNode;\r\n\t}\r\n\r\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\r\n\t{\r\n\t\tif (!shader.usesUVTransform) {\r\n\t\t\tvar index:number = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleUVState.UV_INDEX);\r\n\t\t\tvar data:Vector3D = this._particleUVNode._iUvData;\r\n\t\t\tshader.setVertexConst(index, data.x, data.y);\r\n\t\t}\r\n\t}\r\n\r\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\n\r\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\nimport {ContextGLVertexBufferFormat}\t\tfrom \"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\";\r\n\r\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\r\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\r\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\r\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\r\nimport {ParticleVelocityNode}\t\t\t\tfrom \"../../animators/nodes/ParticleVelocityNode\";\r\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\r\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\r\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\n\r\n/**\r\n * ...\r\n */\r\nexport class ParticleVelocityState extends ParticleStateBase\r\n{\r\n\t/** @private */\r\n\tpublic static VELOCITY_INDEX:number = 0;\r\n\r\n\tprivate _particleVelocityNode:ParticleVelocityNode;\r\n\tprivate _velocity:Vector3D;\r\n\r\n\t/**\r\n\t * Defines the default velocity vector of the state, used when in global mode.\r\n\t */\r\n\tpublic get velocity():Vector3D\r\n\t{\r\n\t\treturn this._velocity;\r\n\t}\r\n\r\n\tpublic set velocity(value:Vector3D)\r\n\t{\r\n\t\tthis._velocity = value;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic getVelocities():Array<Vector3D>\r\n\t{\r\n\t\treturn this._pDynamicProperties;\r\n\t}\r\n\r\n\tpublic setVelocities(value:Array<Vector3D>):void\r\n\t{\r\n\t\tthis._pDynamicProperties = value;\r\n\r\n\t\tthis._pDynamicPropertiesDirty = new Object();\r\n\t}\r\n\r\n\tconstructor(animator:ParticleAnimator, particleVelocityNode:ParticleVelocityNode)\r\n\t{\r\n\t\tsuper(animator, particleVelocityNode);\r\n\r\n\t\tthis._particleVelocityNode = particleVelocityNode;\r\n\t\tthis._velocity = this._particleVelocityNode._iVelocity;\r\n\t}\r\n\r\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\r\n\t{\r\n\t\tif (this._particleVelocityNode.mode == ParticlePropertiesMode.LOCAL_DYNAMIC && !this._pDynamicPropertiesDirty[animationElements._iUniqueId])\r\n\t\t\tthis._pUpdateDynamicProperties(animationElements);\r\n\r\n\t\tvar index:number = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleVelocityState.VELOCITY_INDEX);\r\n\r\n\t\tif (this._particleVelocityNode.mode == ParticlePropertiesMode.GLOBAL)\r\n\t\t\tshader.setVertexConst(index, this._velocity.x, this._velocity.y, this._velocity.z);\r\n\t\telse\r\n\t\t\tanimationElements.activateVertexBuffer(index, this._particleVelocityNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_3);\r\n\t}\r\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\r\nimport {JointPose}\t\t\t\t\t\tfrom \"../../animators/data/JointPose\";\r\nimport {Skeleton}\t\t\t\t\t\t\tfrom \"../../animators/data/Skeleton\";\r\nimport {SkeletonPose}\t\t\t\t\t\tfrom \"../../animators/data/SkeletonPose\";\r\nimport {SkeletonBinaryLERPNode}\t\t\tfrom \"../../animators/nodes/SkeletonBinaryLERPNode\";\r\nimport {AnimationStateBase}\t\t\t\tfrom \"../../animators/states/AnimationStateBase\";\r\nimport {ISkeletonAnimationState}\t\t\tfrom \"../../animators/states/ISkeletonAnimationState\";\r\n\r\n/**\r\n *\r\n */\r\nexport class SkeletonBinaryLERPState extends AnimationStateBase implements ISkeletonAnimationState\r\n{\r\n\tprivate _blendWeight:number = 0;\r\n\tprivate _skeletonAnimationNode:SkeletonBinaryLERPNode;\r\n\tprivate _skeletonPose:SkeletonPose = new SkeletonPose();\r\n\tprivate _skeletonPoseDirty:boolean = true;\r\n\tprivate _inputA:ISkeletonAnimationState;\r\n\tprivate _inputB:ISkeletonAnimationState;\r\n\r\n\t/**\r\n\t * Defines a fractional value between 0 and 1 representing the blending ratio between inputA (0) and inputB (1),\r\n\t * used to produce the skeleton pose output.\r\n\t *\r\n\t * @see inputA\r\n\t * @see inputB\r\n\t */\r\n\tpublic get blendWeight():number\r\n\t{\r\n\t\treturn this._blendWeight;\r\n\t}\r\n\r\n\tpublic set blendWeight(value:number)\r\n\t{\r\n\t\tthis._blendWeight = value;\r\n\r\n\t\tthis._pPositionDeltaDirty = true;\r\n\t\tthis._skeletonPoseDirty = true;\r\n\t}\r\n\r\n\tconstructor(animator:AnimatorBase, skeletonAnimationNode:SkeletonBinaryLERPNode)\r\n\t{\r\n\t\tsuper(animator, skeletonAnimationNode);\r\n\r\n\t\tthis._skeletonAnimationNode = skeletonAnimationNode;\r\n\r\n\t\tthis._inputA = <ISkeletonAnimationState> animator.getAnimationState(this._skeletonAnimationNode.inputA);\r\n\t\tthis._inputB = <ISkeletonAnimationState> animator.getAnimationState(this._skeletonAnimationNode.inputB);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic phase(value:number):void\r\n\t{\r\n\t\tthis._skeletonPoseDirty = true;\r\n\r\n\t\tthis._pPositionDeltaDirty = true;\r\n\r\n\t\tthis._inputA.phase(value);\r\n\t\tthis._inputB.phase(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pUpdateTime(time:number):void\r\n\t{\r\n\t\tthis._skeletonPoseDirty = true;\r\n\r\n\t\tthis._inputA.update(time);\r\n\t\tthis._inputB.update(time);\r\n\r\n\t\tsuper._pUpdateTime(time);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the current skeleton pose of the animation in the clip based on the internal playhead position.\r\n\t */\r\n\tpublic getSkeletonPose(skeleton:Skeleton):SkeletonPose\r\n\t{\r\n\t\tif (this._skeletonPoseDirty)\r\n\t\t\tthis.updateSkeletonPose(skeleton);\r\n\r\n\t\treturn this._skeletonPose;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pUpdatePositionDelta():void\r\n\t{\r\n\t\tthis._pPositionDeltaDirty = false;\r\n\r\n\t\tvar deltA:Vector3D = this._inputA.positionDelta;\r\n\t\tvar deltB:Vector3D = this._inputB.positionDelta;\r\n\r\n\t\tthis._pRootDelta.x = deltA.x + this._blendWeight*(deltB.x - deltA.x);\r\n\t\tthis._pRootDelta.y = deltA.y + this._blendWeight*(deltB.y - deltA.y);\r\n\t\tthis._pRootDelta.z = deltA.z + this._blendWeight*(deltB.z - deltA.z);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the output skeleton pose of the node based on the blendWeight value between input nodes.\r\n\t *\r\n\t * @param skeleton The skeleton used by the animator requesting the ouput pose.\r\n\t */\r\n\tprivate updateSkeletonPose(skeleton:Skeleton):void\r\n\t{\r\n\t\tthis._skeletonPoseDirty = false;\r\n\r\n\t\tvar endPose:JointPose;\r\n\t\tvar endPoses:Array<JointPose> = this._skeletonPose.jointPoses;\r\n\t\tvar poses1:Array<JointPose> = this._inputA.getSkeletonPose(skeleton).jointPoses;\r\n\t\tvar poses2:Array<JointPose> = this._inputB.getSkeletonPose(skeleton).jointPoses;\r\n\t\tvar pose1:JointPose, pose2:JointPose;\r\n\t\tvar p1:Vector3D, p2:Vector3D;\r\n\t\tvar tr:Vector3D;\r\n\t\tvar numJoints:number = skeleton.numJoints;\r\n\r\n\t\t// :s\r\n\t\tif (endPoses.length != numJoints)\r\n\t\t\tendPoses.length = numJoints;\r\n\r\n\t\tfor (var i:number = 0; i < numJoints; ++i) {\r\n\t\t\tendPose = endPoses[i];\r\n\r\n\t\t\tif (endPose == null)\r\n\t\t\t\tendPose = endPoses[i] = new JointPose();\r\n\r\n\t\t\tpose1 = poses1[i];\r\n\t\t\tpose2 = poses2[i];\r\n\t\t\tp1 = pose1.translation;\r\n\t\t\tp2 = pose2.translation;\r\n\r\n\t\t\tendPose.orientation.lerp(pose1.orientation, pose2.orientation, this._blendWeight);\r\n\r\n\t\t\ttr = endPose.translation;\r\n\t\t\ttr.x = p1.x + this._blendWeight*(p2.x - p1.x);\r\n\t\t\ttr.y = p1.y + this._blendWeight*(p2.y - p1.y);\r\n\t\t\ttr.z = p1.z + this._blendWeight*(p2.z - p1.z);\r\n\t\t}\r\n\t}\r\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\r\nimport {SkeletonAnimator}\t\t\t\t\tfrom \"../../animators/SkeletonAnimator\";\r\nimport {JointPose}\t\t\t\t\t\tfrom \"../../animators/data/JointPose\";\r\nimport {Skeleton}\t\t\t\t\t\t\tfrom \"../../animators/data/Skeleton\";\r\nimport {SkeletonPose}\t\t\t\t\t\tfrom \"../../animators/data/SkeletonPose\";\r\nimport {SkeletonClipNode}\t\t\t\t\tfrom \"../../animators/nodes/SkeletonClipNode\";\r\nimport {AnimationClipState}\t\t\t\tfrom \"../../animators/states/AnimationClipState\";\r\nimport {ISkeletonAnimationState}\t\t\tfrom \"../../animators/states/ISkeletonAnimationState\";\r\n\r\n/**\r\n *\r\n */\r\nexport class SkeletonClipState extends AnimationClipState implements ISkeletonAnimationState\r\n{\r\n\tprivate _rootPos:Vector3D = new Vector3D();\r\n\tprivate _frames:Array<SkeletonPose>;\r\n\tprivate _skeletonClipNode:SkeletonClipNode;\r\n\tprivate _skeletonPose:SkeletonPose = new SkeletonPose();\r\n\tprivate _skeletonPoseDirty:boolean = true;\r\n\tprivate _currentPose:SkeletonPose;\r\n\tprivate _nextPose:SkeletonPose;\r\n\r\n\t/**\r\n\t * Returns the current skeleton pose frame of animation in the clip based on the internal playhead position.\r\n\t */\r\n\tpublic get currentPose():SkeletonPose\r\n\t{\r\n\t\tif (this._pFramesDirty)\r\n\t\t\tthis._pUpdateFrames();\r\n\r\n\t\treturn this._currentPose;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the next skeleton pose frame of animation in the clip based on the internal playhead position.\r\n\t */\r\n\tpublic get nextPose():SkeletonPose\r\n\t{\r\n\t\tif (this._pFramesDirty)\r\n\t\t\tthis._pUpdateFrames();\r\n\r\n\t\treturn this._nextPose;\r\n\t}\r\n\r\n\tconstructor(animator:AnimatorBase, skeletonClipNode:SkeletonClipNode)\r\n\t{\r\n\t\tsuper(animator, skeletonClipNode);\r\n\r\n\t\tthis._skeletonClipNode = skeletonClipNode;\r\n\t\tthis._frames = this._skeletonClipNode.frames;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the current skeleton pose of the animation in the clip based on the internal playhead position.\r\n\t */\r\n\tpublic getSkeletonPose(skeleton:Skeleton):SkeletonPose\r\n\t{\r\n\t\tif (this._skeletonPoseDirty)\r\n\t\t\tthis.updateSkeletonPose(skeleton);\r\n\r\n\t\treturn this._skeletonPose;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pUpdateTime(time:number):void\r\n\t{\r\n\t\tthis._skeletonPoseDirty = true;\r\n\r\n\t\tsuper._pUpdateTime(time);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pUpdateFrames():void\r\n\t{\r\n\t\tsuper._pUpdateFrames();\r\n\r\n\t\tthis._currentPose = this._frames[this._pCurrentFrame];\r\n\r\n\t\tif (this._skeletonClipNode.looping && this._pNextFrame >= this._skeletonClipNode.lastFrame) {\r\n\t\t\tthis._nextPose = this._frames[0];\r\n\t\t\t(<SkeletonAnimator> this._pAnimator).dispatchCycleEvent();\r\n\t\t} else\r\n\t\t\tthis._nextPose = this._frames[this._pNextFrame];\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the output skeleton pose of the node based on the internal playhead position.\r\n\t *\r\n\t * @param skeleton The skeleton used by the animator requesting the ouput pose.\r\n\t */\r\n\tprivate updateSkeletonPose(skeleton:Skeleton):void\r\n\t{\r\n\t\tthis._skeletonPoseDirty = false;\r\n\r\n\t\tif (!this._skeletonClipNode.totalDuration)\r\n\t\t\treturn;\r\n\r\n\t\tif (this._pFramesDirty)\r\n\t\t\tthis._pUpdateFrames();\r\n\r\n\t\tvar currentPose:Array<JointPose> = this._currentPose.jointPoses;\r\n\t\tvar nextPose:Array<JointPose> = this._nextPose.jointPoses;\r\n\t\tvar numJoints:number = skeleton.numJoints;\r\n\t\tvar p1:Vector3D, p2:Vector3D;\r\n\t\tvar pose1:JointPose, pose2:JointPose;\r\n\t\tvar endPoses:Array<JointPose> = this._skeletonPose.jointPoses;\r\n\t\tvar endPose:JointPose;\r\n\t\tvar tr:Vector3D;\r\n\r\n\t\t// :s\r\n\t\tif (endPoses.length != numJoints)\r\n\t\t\tendPoses.length = numJoints;\r\n\r\n\t\tif ((numJoints != currentPose.length) || (numJoints != nextPose.length))\r\n\t\t\tthrow new Error(\"joint counts don't match!\");\r\n\r\n\t\tfor (var i:number = 0; i < numJoints; ++i) {\r\n\t\t\tendPose = endPoses[i];\r\n\r\n\t\t\tif (endPose == null)\r\n\t\t\t\tendPose = endPoses[i] = new JointPose();\r\n\r\n\t\t\tpose1 = currentPose[i];\r\n\t\t\tpose2 = nextPose[i];\r\n\t\t\tp1 = pose1.translation;\r\n\t\t\tp2 = pose2.translation;\r\n\r\n\t\t\tif (this._skeletonClipNode.highQuality)\r\n\t\t\t\tendPose.orientation.slerp(pose1.orientation, pose2.orientation, this._pBlendWeight); else\r\n\t\t\t\tendPose.orientation.lerp(pose1.orientation, pose2.orientation, this._pBlendWeight);\r\n\r\n\t\t\tif (i > 0) {\r\n\t\t\t\ttr = endPose.translation;\r\n\t\t\t\ttr.x = p1.x + this._pBlendWeight*(p2.x - p1.x);\r\n\t\t\t\ttr.y = p1.y + this._pBlendWeight*(p2.y - p1.y);\r\n\t\t\t\ttr.z = p1.z + this._pBlendWeight*(p2.z - p1.z);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pUpdatePositionDelta():void\r\n\t{\r\n\t\tthis._pPositionDeltaDirty = false;\r\n\r\n\t\tif (this._pFramesDirty)\r\n\t\t\tthis._pUpdateFrames();\r\n\r\n\t\tvar p1:Vector3D, p2:Vector3D, p3:Vector3D;\r\n\t\tvar totalDelta:Vector3D = this._skeletonClipNode.totalDelta;\r\n\r\n\t\t// jumping back, need to reset position\r\n\t\tif ((this._pTimeDir > 0 && this._pNextFrame < this._pOldFrame) || (this._pTimeDir < 0 && this._pNextFrame > this._pOldFrame)) {\r\n\t\t\tthis._rootPos.x -= totalDelta.x*this._pTimeDir;\r\n\t\t\tthis._rootPos.y -= totalDelta.y*this._pTimeDir;\r\n\t\t\tthis._rootPos.z -= totalDelta.z*this._pTimeDir;\r\n\t\t}\r\n\r\n\t\tvar dx:number = this._rootPos.x;\r\n\t\tvar dy:number = this._rootPos.y;\r\n\t\tvar dz:number = this._rootPos.z;\r\n\r\n\t\tif (this._skeletonClipNode.stitchFinalFrame && this._pNextFrame == this._skeletonClipNode.lastFrame) {\r\n\t\t\tp1 = this._frames[0].jointPoses[0].translation;\r\n\t\t\tp2 = this._frames[1].jointPoses[0].translation;\r\n\t\t\tp3 = this._currentPose.jointPoses[0].translation;\r\n\r\n\t\t\tthis._rootPos.x = p3.x + p1.x + this._pBlendWeight*(p2.x - p1.x);\r\n\t\t\tthis._rootPos.y = p3.y + p1.y + this._pBlendWeight*(p2.y - p1.y);\r\n\t\t\tthis._rootPos.z = p3.z + p1.z + this._pBlendWeight*(p2.z - p1.z);\r\n\t\t} else {\r\n\t\t\tp1 = this._currentPose.jointPoses[0].translation;\r\n\t\t\tp2 = this._frames[this._pNextFrame].jointPoses[0].translation; //cover the instances where we wrap the pose but still want the final frame translation values\r\n\t\t\tthis._rootPos.x = p1.x + this._pBlendWeight*(p2.x - p1.x);\r\n\t\t\tthis._rootPos.y = p1.y + this._pBlendWeight*(p2.y - p1.y);\r\n\t\t\tthis._rootPos.z = p1.z + this._pBlendWeight*(p2.z - p1.z);\r\n\t\t}\r\n\r\n\t\tthis._pRootDelta.x = this._rootPos.x - dx;\r\n\t\tthis._pRootDelta.y = this._rootPos.y - dy;\r\n\t\tthis._pRootDelta.z = this._rootPos.z - dz;\r\n\r\n\t\tthis._pOldFrame = this._pNextFrame;\r\n\t}\r\n}",
    "import {Quaternion}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Quaternion\";\r\nimport {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\r\nimport {JointPose}\t\t\t\t\t\tfrom \"../../animators/data/JointPose\";\r\nimport {Skeleton}\t\t\t\t\t\t\tfrom \"../../animators/data/Skeleton\";\r\nimport {SkeletonPose}\t\t\t\t\t\tfrom \"../../animators/data/SkeletonPose\";\r\nimport {SkeletonDifferenceNode}\t\t\tfrom \"../../animators/nodes/SkeletonDifferenceNode\";\r\nimport {AnimationStateBase}\t\t\t\tfrom \"../../animators/states/AnimationStateBase\";\r\nimport {ISkeletonAnimationState}\t\t\tfrom \"../../animators/states/ISkeletonAnimationState\";\r\n\r\n/**\r\n *\r\n */\r\nexport class SkeletonDifferenceState extends AnimationStateBase implements ISkeletonAnimationState\r\n{\r\n\tprivate _blendWeight:number = 0;\r\n\tprivate static _tempQuat:Quaternion = new Quaternion();\r\n\tprivate _skeletonAnimationNode:SkeletonDifferenceNode;\r\n\tprivate _skeletonPose:SkeletonPose = new SkeletonPose();\r\n\tprivate _skeletonPoseDirty:boolean = true;\r\n\tprivate _baseInput:ISkeletonAnimationState;\r\n\tprivate _differenceInput:ISkeletonAnimationState;\r\n\r\n\t/**\r\n\t * Defines a fractional value between 0 and 1 representing the blending ratio between the base input (0) and difference input (1),\r\n\t * used to produce the skeleton pose output.\r\n\t *\r\n\t * @see #baseInput\r\n\t * @see #differenceInput\r\n\t */\r\n\tpublic get blendWeight():number\r\n\t{\r\n\t\treturn this._blendWeight;\r\n\t}\r\n\r\n\tpublic set blendWeight(value:number)\r\n\t{\r\n\t\tthis._blendWeight = value;\r\n\r\n\t\tthis._pPositionDeltaDirty = true;\r\n\t\tthis._skeletonPoseDirty = true;\r\n\t}\r\n\r\n\tconstructor(animator:AnimatorBase, skeletonAnimationNode:SkeletonDifferenceNode)\r\n\t{\r\n\t\tsuper(animator, skeletonAnimationNode);\r\n\r\n\t\tthis._skeletonAnimationNode = skeletonAnimationNode;\r\n\r\n\t\tthis._baseInput = <ISkeletonAnimationState> animator.getAnimationState(this._skeletonAnimationNode.baseInput);\r\n\t\tthis._differenceInput = <ISkeletonAnimationState> animator.getAnimationState(this._skeletonAnimationNode.differenceInput);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic phase(value:number):void\r\n\t{\r\n\t\tthis._skeletonPoseDirty = true;\r\n\r\n\t\tthis._pPositionDeltaDirty = true;\r\n\r\n\t\tthis._baseInput.phase(value);\r\n\t\tthis._baseInput.phase(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pUpdateTime(time:number):void\r\n\t{\r\n\t\tthis._skeletonPoseDirty = true;\r\n\r\n\t\tthis._baseInput.update(time);\r\n\t\tthis._differenceInput.update(time);\r\n\r\n\t\tsuper._pUpdateTime(time);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the current skeleton pose of the animation in the clip based on the internal playhead position.\r\n\t */\r\n\tpublic getSkeletonPose(skeleton:Skeleton):SkeletonPose\r\n\t{\r\n\t\tif (this._skeletonPoseDirty)\r\n\t\t\tthis.updateSkeletonPose(skeleton);\r\n\r\n\t\treturn this._skeletonPose;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pUpdatePositionDelta():void\r\n\t{\r\n\t\tthis._pPositionDeltaDirty = false;\r\n\r\n\t\tvar deltA:Vector3D = this._baseInput.positionDelta;\r\n\t\tvar deltB:Vector3D = this._differenceInput.positionDelta;\r\n\r\n\t\tthis.positionDelta.x = deltA.x + this._blendWeight*deltB.x;\r\n\t\tthis.positionDelta.y = deltA.y + this._blendWeight*deltB.y;\r\n\t\tthis.positionDelta.z = deltA.z + this._blendWeight*deltB.z;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the output skeleton pose of the node based on the blendWeight value between base input and difference input nodes.\r\n\t *\r\n\t * @param skeleton The skeleton used by the animator requesting the ouput pose.\r\n\t */\r\n\tprivate updateSkeletonPose(skeleton:Skeleton):void\r\n\t{\r\n\t\tthis._skeletonPoseDirty = false;\r\n\r\n\t\tvar endPose:JointPose;\r\n\t\tvar endPoses:Array<JointPose> = this._skeletonPose.jointPoses;\r\n\t\tvar basePoses:Array<JointPose> = this._baseInput.getSkeletonPose(skeleton).jointPoses;\r\n\t\tvar diffPoses:Array<JointPose> = this._differenceInput.getSkeletonPose(skeleton).jointPoses;\r\n\t\tvar base:JointPose, diff:JointPose;\r\n\t\tvar basePos:Vector3D, diffPos:Vector3D;\r\n\t\tvar tr:Vector3D;\r\n\t\tvar numJoints:number = skeleton.numJoints;\r\n\r\n\t\t// :s\r\n\t\tif (endPoses.length != numJoints)\r\n\t\t\tendPoses.length = numJoints;\r\n\r\n\t\tfor (var i:number = 0; i < numJoints; ++i) {\r\n\t\t\tendPose = endPoses[i];\r\n\r\n\t\t\tif (endPose == null)\r\n\t\t\t\tendPose = endPoses[i] = new JointPose();\r\n\r\n\t\t\tbase = basePoses[i];\r\n\t\t\tdiff = diffPoses[i];\r\n\t\t\tbasePos = base.translation;\r\n\t\t\tdiffPos = diff.translation;\r\n\r\n\t\t\tSkeletonDifferenceState._tempQuat.multiply(diff.orientation, base.orientation);\r\n\t\t\tendPose.orientation.lerp(base.orientation, SkeletonDifferenceState._tempQuat, this._blendWeight);\r\n\r\n\t\t\ttr = endPose.translation;\r\n\t\t\ttr.x = basePos.x + this._blendWeight*diffPos.x;\r\n\t\t\ttr.y = basePos.y + this._blendWeight*diffPos.y;\r\n\t\t\ttr.z = basePos.z + this._blendWeight*diffPos.z;\r\n\t\t}\r\n\t}\r\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\r\nimport {JointPose}\t\t\t\t\t\tfrom \"../../animators/data/JointPose\";\r\nimport {Skeleton}\t\t\t\t\t\t\tfrom \"../../animators/data/Skeleton\";\r\nimport {SkeletonPose}\t\t\t\t\t\tfrom \"../../animators/data/SkeletonPose\";\r\nimport {SkeletonDirectionalNode}\t\t\tfrom \"../../animators/nodes/SkeletonDirectionalNode\";\r\nimport {AnimationStateBase}\t\t\t\tfrom \"../../animators/states/AnimationStateBase\";\r\nimport {ISkeletonAnimationState}\t\t\tfrom \"../../animators/states/ISkeletonAnimationState\";\r\n\r\n/**\r\n *\r\n */\r\nexport class SkeletonDirectionalState extends AnimationStateBase implements ISkeletonAnimationState\r\n{\r\n\tprivate _skeletonAnimationNode:SkeletonDirectionalNode;\r\n\tprivate _skeletonPose:SkeletonPose = new SkeletonPose();\r\n\tprivate _skeletonPoseDirty:boolean = true;\r\n\tprivate _inputA:ISkeletonAnimationState;\r\n\tprivate _inputB:ISkeletonAnimationState;\r\n\tprivate _blendWeight:number = 0;\r\n\tprivate _direction:number = 0;\r\n\tprivate _blendDirty:boolean = true;\r\n\tprivate _forward:ISkeletonAnimationState;\r\n\tprivate _backward:ISkeletonAnimationState;\r\n\tprivate _left:ISkeletonAnimationState;\r\n\tprivate _right:ISkeletonAnimationState;\r\n\r\n\t/**\r\n\t * Defines the direction in degrees of the aniamtion between the forwards (0), right(90) backwards (180) and left(270) input nodes,\r\n\t * used to produce the skeleton pose output.\r\n\t */\r\n\tpublic set direction(value:number)\r\n\t{\r\n\t\tif (this._direction == value)\r\n\t\t\treturn;\r\n\r\n\t\tthis._direction = value;\r\n\r\n\t\tthis._blendDirty = true;\r\n\r\n\t\tthis._skeletonPoseDirty = true;\r\n\t\tthis._pPositionDeltaDirty = true;\r\n\t}\r\n\r\n\tpublic get direction():number\r\n\t{\r\n\t\treturn this._direction;\r\n\t}\r\n\r\n\tconstructor(animator:AnimatorBase, skeletonAnimationNode:SkeletonDirectionalNode)\r\n\t{\r\n\t\tsuper(animator, skeletonAnimationNode);\r\n\r\n\t\tthis._skeletonAnimationNode = skeletonAnimationNode;\r\n\r\n\t\tthis._forward = <ISkeletonAnimationState> animator.getAnimationState(this._skeletonAnimationNode.forward);\r\n\t\tthis._backward = <ISkeletonAnimationState> animator.getAnimationState(this._skeletonAnimationNode.backward);\r\n\t\tthis._left = <ISkeletonAnimationState> animator.getAnimationState(this._skeletonAnimationNode.left);\r\n\t\tthis._right = <ISkeletonAnimationState> animator.getAnimationState(this._skeletonAnimationNode.right);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic phase(value:number):void\r\n\t{\r\n\t\tif (this._blendDirty)\r\n\t\t\tthis.updateBlend();\r\n\r\n\t\tthis._skeletonPoseDirty = true;\r\n\r\n\t\tthis._pPositionDeltaDirty = true;\r\n\r\n\t\tthis._inputA.phase(value);\r\n\t\tthis._inputB.phase(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pUdateTime(time:number):void\r\n\t{\r\n\t\tif (this._blendDirty)\r\n\t\t\tthis.updateBlend();\r\n\r\n\t\tthis._skeletonPoseDirty = true;\r\n\r\n\t\tthis._inputA.update(time);\r\n\t\tthis._inputB.update(time);\r\n\r\n\t\tsuper._pUpdateTime(time);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the current skeleton pose of the animation in the clip based on the internal playhead position.\r\n\t */\r\n\tpublic getSkeletonPose(skeleton:Skeleton):SkeletonPose\r\n\t{\r\n\t\tif (this._skeletonPoseDirty)\r\n\t\t\tthis.updateSkeletonPose(skeleton);\r\n\r\n\t\treturn this._skeletonPose;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pUpdatePositionDelta():void\r\n\t{\r\n\t\tthis._pPositionDeltaDirty = false;\r\n\r\n\t\tif (this._blendDirty)\r\n\t\t\tthis.updateBlend();\r\n\r\n\t\tvar deltA:Vector3D = this._inputA.positionDelta;\r\n\t\tvar deltB:Vector3D = this._inputB.positionDelta;\r\n\r\n\t\tthis.positionDelta.x = deltA.x + this._blendWeight*(deltB.x - deltA.x);\r\n\t\tthis.positionDelta.y = deltA.y + this._blendWeight*(deltB.y - deltA.y);\r\n\t\tthis.positionDelta.z = deltA.z + this._blendWeight*(deltB.z - deltA.z);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the output skeleton pose of the node based on the direction value between forward, backwards, left and right input nodes.\r\n\t *\r\n\t * @param skeleton The skeleton used by the animator requesting the ouput pose.\r\n\t */\r\n\tprivate updateSkeletonPose(skeleton:Skeleton):void\r\n\t{\r\n\t\tthis._skeletonPoseDirty = false;\r\n\r\n\t\tif (this._blendDirty)\r\n\t\t\tthis.updateBlend();\r\n\r\n\t\tvar endPose:JointPose;\r\n\t\tvar endPoses:Array<JointPose> = this._skeletonPose.jointPoses;\r\n\t\tvar poses1:Array<JointPose> = this._inputA.getSkeletonPose(skeleton).jointPoses;\r\n\t\tvar poses2:Array<JointPose> = this._inputB.getSkeletonPose(skeleton).jointPoses;\r\n\t\tvar pose1:JointPose, pose2:JointPose;\r\n\t\tvar p1:Vector3D, p2:Vector3D;\r\n\t\tvar tr:Vector3D;\r\n\t\tvar numJoints:number = skeleton.numJoints;\r\n\r\n\t\t// :s\r\n\t\tif (endPoses.length != numJoints)\r\n\t\t\tendPoses.length = numJoints;\r\n\r\n\t\tfor (var i:number = 0; i < numJoints; ++i) {\r\n\t\t\tendPose = endPoses[i];\r\n\r\n\t\t\tif (endPose == null)\r\n\t\t\t\tendPose = endPoses[i] = new JointPose();\r\n\r\n\t\t\tpose1 = poses1[i];\r\n\t\t\tpose2 = poses2[i];\r\n\t\t\tp1 = pose1.translation;\r\n\t\t\tp2 = pose2.translation;\r\n\r\n\t\t\tendPose.orientation.lerp(pose1.orientation, pose2.orientation, this._blendWeight);\r\n\r\n\t\t\ttr = endPose.translation;\r\n\t\t\ttr.x = p1.x + this._blendWeight*(p2.x - p1.x);\r\n\t\t\ttr.y = p1.y + this._blendWeight*(p2.y - p1.y);\r\n\t\t\ttr.z = p1.z + this._blendWeight*(p2.z - p1.z);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the blend value for the animation output based on the direction value between forward, backwards, left and right input nodes.\r\n\t *\r\n\t * @private\r\n\t */\r\n\tprivate updateBlend():void\r\n\t{\r\n\t\tthis._blendDirty = false;\r\n\r\n\t\tif (this._direction < 0 || this._direction > 360) {\r\n\t\t\tthis._direction %= 360;\r\n\t\t\tif (this._direction < 0)\r\n\t\t\t\tthis._direction += 360;\r\n\t\t}\r\n\r\n\t\tif (this._direction < 90) {\r\n\t\t\tthis._inputA = this._forward;\r\n\t\t\tthis._inputB = this._right;\r\n\t\t\tthis._blendWeight = this._direction/90;\r\n\t\t} else if (this._direction < 180) {\r\n\t\t\tthis._inputA = this._right;\r\n\t\t\tthis._inputB = this._backward;\r\n\t\t\tthis._blendWeight = (this._direction - 90)/90;\r\n\t\t} else if (this._direction < 270) {\r\n\t\t\tthis._inputA = this._backward;\r\n\t\t\tthis._inputB = this._left;\r\n\t\t\tthis._blendWeight = (this._direction - 180)/90;\r\n\t\t} else {\r\n\t\t\tthis._inputA = this._left;\r\n\t\t\tthis._inputB = this._forward;\r\n\t\t\tthis._blendWeight = (this._direction - 270)/90;\r\n\t\t}\r\n\t}\r\n}",
    "import {Quaternion}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Quaternion\";\r\nimport {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\r\nimport {JointPose}\t\t\t\t\t\tfrom \"../../animators/data/JointPose\";\r\nimport {Skeleton}\t\t\t\t\t\t\tfrom \"../../animators/data/Skeleton\";\r\nimport {SkeletonPose}\t\t\t\t\t\tfrom \"../../animators/data/SkeletonPose\";\r\nimport {SkeletonNaryLERPNode}\t\t\t\tfrom \"../../animators/nodes/SkeletonNaryLERPNode\";\r\nimport {AnimationStateBase}\t\t\t\tfrom \"../../animators/states/AnimationStateBase\";\r\nimport {ISkeletonAnimationState}\t\t\tfrom \"../../animators/states/ISkeletonAnimationState\";\r\n\r\n/**\r\n *\r\n */\r\nexport class SkeletonNaryLERPState extends AnimationStateBase implements ISkeletonAnimationState\r\n{\r\n\tprivate _skeletonAnimationNode:SkeletonNaryLERPNode;\r\n\tprivate _skeletonPose:SkeletonPose = new SkeletonPose();\r\n\tprivate _skeletonPoseDirty:boolean = true;\r\n\tprivate _blendWeights:Array<number> = new Array<number>();\r\n\tprivate _inputs:Array<ISkeletonAnimationState> = new Array<ISkeletonAnimationState>();\r\n\r\n\tconstructor(animator:AnimatorBase, skeletonAnimationNode:SkeletonNaryLERPNode)\r\n\t{\r\n\t\tsuper(animator, skeletonAnimationNode);\r\n\r\n\t\tthis._skeletonAnimationNode = skeletonAnimationNode;\r\n\r\n\t\tvar i:number = this._skeletonAnimationNode.numInputs;\r\n\r\n\t\twhile (i--)\r\n\t\t\tthis._inputs[i] = <ISkeletonAnimationState> animator.getAnimationState(this._skeletonAnimationNode._iInputs[i]);\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic phase(value:number):void\r\n\t{\r\n\t\tthis._skeletonPoseDirty = true;\r\n\r\n\t\tthis._pPositionDeltaDirty = true;\r\n\r\n\t\tfor (var j:number = 0; j < this._skeletonAnimationNode.numInputs; ++j) {\r\n\t\t\tif (this._blendWeights[j])\r\n\t\t\t\tthis._inputs[j].update(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pUdateTime(time:number):void\r\n\t{\r\n\t\tfor (var j:number = 0; j < this._skeletonAnimationNode.numInputs; ++j) {\r\n\t\t\tif (this._blendWeights[j])\r\n\t\t\t\tthis._inputs[j].update(time);\r\n\t\t}\r\n\r\n\t\tsuper._pUpdateTime(time);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the current skeleton pose of the animation in the clip based on the internal playhead position.\r\n\t */\r\n\tpublic getSkeletonPose(skeleton:Skeleton):SkeletonPose\r\n\t{\r\n\t\tif (this._skeletonPoseDirty)\r\n\t\t\tthis.updateSkeletonPose(skeleton);\r\n\r\n\t\treturn this._skeletonPose;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the blend weight of the skeleton aniamtion node that resides at the given input index.\r\n\t *\r\n\t * @param index The input index for which the skeleton animation node blend weight is requested.\r\n\t */\r\n\tpublic getBlendWeightAt(index:number):number\r\n\t{\r\n\t\treturn this._blendWeights[index];\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the blend weight of the skeleton aniamtion node that resides at the given input index.\r\n\t *\r\n\t * @param index The input index on which the skeleton animation node blend weight is to be set.\r\n\t * @param blendWeight The blend weight value to use for the given skeleton animation node index.\r\n\t */\r\n\tpublic setBlendWeightAt(index:number, blendWeight:number):void\r\n\t{\r\n\t\tthis._blendWeights[index] = blendWeight;\r\n\r\n\t\tthis._pPositionDeltaDirty = true;\r\n\t\tthis._skeletonPoseDirty = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pUpdatePositionDelta():void\r\n\t{\r\n\t\tthis._pPositionDeltaDirty = false;\r\n\r\n\t\tvar delta:Vector3D;\r\n\t\tvar weight:number;\r\n\r\n\t\tthis.positionDelta.x = 0;\r\n\t\tthis.positionDelta.y = 0;\r\n\t\tthis.positionDelta.z = 0;\r\n\r\n\t\tfor (var j:number = 0; j < this._skeletonAnimationNode.numInputs; ++j) {\r\n\t\t\tweight = this._blendWeights[j];\r\n\r\n\t\t\tif (weight) {\r\n\t\t\t\tdelta = this._inputs[j].positionDelta;\r\n\t\t\t\tthis.positionDelta.x += weight*delta.x;\r\n\t\t\t\tthis.positionDelta.y += weight*delta.y;\r\n\t\t\t\tthis.positionDelta.z += weight*delta.z;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the output skeleton pose of the node based on the blend weight values given to the input nodes.\r\n\t *\r\n\t * @param skeleton The skeleton used by the animator requesting the ouput pose.\r\n\t */\r\n\tprivate updateSkeletonPose(skeleton:Skeleton):void\r\n\t{\r\n\t\tthis._skeletonPoseDirty = false;\r\n\r\n\t\tvar weight:number;\r\n\t\tvar endPoses:Array<JointPose> = this._skeletonPose.jointPoses;\r\n\t\tvar poses:Array<JointPose>;\r\n\t\tvar endPose:JointPose, pose:JointPose;\r\n\t\tvar endTr:Vector3D, tr:Vector3D;\r\n\t\tvar endQuat:Quaternion, q:Quaternion;\r\n\t\tvar firstPose:Array<JointPose>;\r\n\t\tvar i:number;\r\n\t\tvar w0:number, x0:number, y0:number, z0:number;\r\n\t\tvar w1:number, x1:number, y1:number, z1:number;\r\n\t\tvar numJoints:number = skeleton.numJoints;\r\n\r\n\t\t// :s\r\n\t\tif (endPoses.length != numJoints)\r\n\t\t\tendPoses.length = numJoints;\r\n\r\n\t\tfor (var j:number = 0; j < this._skeletonAnimationNode.numInputs; ++j) {\r\n\t\t\tweight = this._blendWeights[j];\r\n\r\n\t\t\tif (!weight)\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\tposes = this._inputs[j].getSkeletonPose(skeleton).jointPoses;\r\n\r\n\t\t\tif (!firstPose) {\r\n\t\t\t\tfirstPose = poses;\r\n\t\t\t\tfor (i = 0; i < numJoints; ++i) {\r\n\t\t\t\t\tendPose = endPoses[i];\r\n\r\n\t\t\t\t\tif (endPose == null)\r\n\t\t\t\t\t\tendPose = endPoses[i] = new JointPose();\r\n\r\n\t\t\t\t\tpose = poses[i];\r\n\t\t\t\t\tq = pose.orientation;\r\n\t\t\t\t\ttr = pose.translation;\r\n\r\n\t\t\t\t\tendQuat = endPose.orientation;\r\n\r\n\t\t\t\t\tendQuat.x = weight*q.x;\r\n\t\t\t\t\tendQuat.y = weight*q.y;\r\n\t\t\t\t\tendQuat.z = weight*q.z;\r\n\t\t\t\t\tendQuat.w = weight*q.w;\r\n\r\n\t\t\t\t\tendTr = endPose.translation;\r\n\t\t\t\t\tendTr.x = weight*tr.x;\r\n\t\t\t\t\tendTr.y = weight*tr.y;\r\n\t\t\t\t\tendTr.z = weight*tr.z;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tfor (i = 0; i < skeleton.numJoints; ++i) {\r\n\t\t\t\t\tendPose = endPoses[i];\r\n\t\t\t\t\tpose = poses[i];\r\n\r\n\t\t\t\t\tq = firstPose[i].orientation;\r\n\t\t\t\t\tx0 = q.x;\r\n\t\t\t\t\ty0 = q.y;\r\n\t\t\t\t\tz0 = q.z;\r\n\t\t\t\t\tw0 = q.w;\r\n\r\n\t\t\t\t\tq = pose.orientation;\r\n\t\t\t\t\ttr = pose.translation;\r\n\r\n\t\t\t\t\tx1 = q.x;\r\n\t\t\t\t\ty1 = q.y;\r\n\t\t\t\t\tz1 = q.z;\r\n\t\t\t\t\tw1 = q.w;\r\n\t\t\t\t\t// find shortest direction\r\n\t\t\t\t\tif (x0*x1 + y0*y1 + z0*z1 + w0*w1 < 0) {\r\n\t\t\t\t\t\tx1 = -x1;\r\n\t\t\t\t\t\ty1 = -y1;\r\n\t\t\t\t\t\tz1 = -z1;\r\n\t\t\t\t\t\tw1 = -w1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tendQuat = endPose.orientation;\r\n\t\t\t\t\tendQuat.x += weight*x1;\r\n\t\t\t\t\tendQuat.y += weight*y1;\r\n\t\t\t\t\tendQuat.z += weight*z1;\r\n\t\t\t\t\tendQuat.w += weight*w1;\r\n\r\n\t\t\t\t\tendTr = endPose.translation;\r\n\t\t\t\t\tendTr.x += weight*tr.x;\r\n\t\t\t\t\tendTr.y += weight*tr.y;\r\n\t\t\t\t\tendTr.z += weight*tr.z;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (i = 0; i < skeleton.numJoints; ++i)\r\n\t\t\tendPoses[i].orientation.normalize();\r\n\t}\r\n}",
    "import {Graphics}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphics\";\r\n\r\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\r\nimport {VertexAnimator}\t\t\t\t\tfrom \"../../animators/VertexAnimator\";\r\nimport {VertexClipNode}\t\t\t\t\tfrom \"../../animators/nodes/VertexClipNode\";\r\nimport {AnimationClipState}\t\t\t\tfrom \"../../animators/states/AnimationClipState\";\r\nimport {IVertexAnimationState}\t\t\tfrom \"../../animators/states/IVertexAnimationState\";\r\n\r\n/**\r\n *\r\n */\r\nexport class VertexClipState extends AnimationClipState implements IVertexAnimationState\r\n{\r\n\tprivate _frames:Array<Graphics>;\r\n\tprivate _vertexClipNode:VertexClipNode;\r\n\tprivate _currentGraphics:Graphics;\r\n\tprivate _nextGraphics:Graphics;\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic get currentGraphics():Graphics\r\n\t{\r\n\t\tif (this._pFramesDirty)\r\n\t\t\tthis._pUpdateFrames();\r\n\r\n\t\treturn this._currentGraphics;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic get nextGraphics():Graphics\r\n\t{\r\n\t\tif (this._pFramesDirty)\r\n\t\t\tthis._pUpdateFrames();\r\n\r\n\t\treturn this._nextGraphics;\r\n\t}\r\n\r\n\tconstructor(animator:AnimatorBase, vertexClipNode:VertexClipNode)\r\n\t{\r\n\t\tsuper(animator, vertexClipNode);\r\n\r\n\t\tthis._vertexClipNode = vertexClipNode;\r\n\t\tthis._frames = this._vertexClipNode.frames;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pUpdateFrames():void\r\n\t{\r\n\t\tsuper._pUpdateFrames();\r\n\r\n\t\tthis._currentGraphics = this._frames[this._pCurrentFrame];\r\n\r\n\t\tif (this._vertexClipNode.looping && this._pNextFrame >= this._vertexClipNode.lastFrame) {\r\n\t\t\tthis._nextGraphics = this._frames[0];\r\n\t\t\t(<VertexAnimator> this._pAnimator).dispatchCycleEvent();\r\n\t\t} else\r\n\t\t\tthis._nextGraphics = this._frames[this._pNextFrame];\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pUpdatePositionDelta():void\r\n\t{\r\n\t\t//TODO:implement positiondelta functionality for vertex animations\r\n\t}\r\n}",
    "import {SkeletonBinaryLERPNode}\t\t\tfrom \"../../animators/nodes/SkeletonBinaryLERPNode\";\r\nimport {CrossfadeTransitionState}\t\t\tfrom \"../../animators/transitions/CrossfadeTransitionState\";\r\n\r\n/**\r\n * A skeleton animation node that uses two animation node inputs to blend a lineraly interpolated output of a skeleton pose.\r\n */\r\nexport class CrossfadeTransitionNode extends SkeletonBinaryLERPNode\r\n{\r\n\tpublic blendSpeed:number;\r\n\r\n\tpublic startBlend:number;\r\n\r\n\t/**\r\n\t * Creates a new <code>CrossfadeTransitionNode</code> object.\r\n\t */\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tthis._pStateClass = CrossfadeTransitionState;\r\n\t}\r\n}",
    "import {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\r\nimport {SkeletonBinaryLERPNode}\t\t\tfrom \"../../animators/nodes/SkeletonBinaryLERPNode\";\r\nimport {SkeletonBinaryLERPState}\t\t\tfrom \"../../animators/states/SkeletonBinaryLERPState\";\r\nimport {CrossfadeTransitionNode}\t\t\tfrom \"../../animators/transitions/CrossfadeTransitionNode\";\r\nimport {AnimationStateEvent}\t\t\t\tfrom \"../../animators/../events/AnimationStateEvent\";\r\n\r\n/**\r\n *\r\n */\r\nexport class CrossfadeTransitionState extends SkeletonBinaryLERPState\r\n{\r\n\tprivate _crossfadeTransitionNode:CrossfadeTransitionNode;\r\n\tprivate _animationStateTransitionComplete:AnimationStateEvent;\r\n\r\n\tconstructor(animator:AnimatorBase, skeletonAnimationNode:CrossfadeTransitionNode)\r\n\t{\r\n\t\tsuper(animator, <SkeletonBinaryLERPNode> skeletonAnimationNode);\r\n\r\n\t\tthis._crossfadeTransitionNode = skeletonAnimationNode;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pUpdateTime(time:number):void\r\n\t{\r\n\t\tthis.blendWeight = Math.abs(time - this._crossfadeTransitionNode.startBlend)/(1000*this._crossfadeTransitionNode.blendSpeed);\r\n\r\n\t\tif (this.blendWeight >= 1) {\r\n\t\t\tthis.blendWeight = 1;\r\n\r\n\t\t\tif (this._animationStateTransitionComplete == null)\r\n\t\t\t\tthis._animationStateTransitionComplete = new AnimationStateEvent(AnimationStateEvent.TRANSITION_COMPLETE, this._pAnimator, this, this._crossfadeTransitionNode);\r\n\r\n\t\t\tthis._crossfadeTransitionNode.dispatchEvent(this._animationStateTransitionComplete);\r\n\t\t}\r\n\r\n\t\tsuper._pUpdateTime(time);\r\n\t}\r\n}",
    "import {AnimationNodeBase}\t\t\t\tfrom \"awayjs-display/lib/animators/nodes/AnimationNodeBase\";\r\n\r\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\r\nimport {CrossfadeTransitionNode}\t\t\tfrom \"../../animators/transitions/CrossfadeTransitionNode\";\r\nimport {IAnimationTransition}\t\t\t\tfrom \"../../animators/transitions/IAnimationTransition\";\r\n\r\n/**\r\n *\r\n */\r\nexport class CrossfadeTransition implements IAnimationTransition\r\n{\r\n\tpublic blendSpeed:number = 0.5;\r\n\r\n\tconstructor(blendSpeed:number)\r\n\t{\r\n\t\tthis.blendSpeed = blendSpeed;\r\n\t}\r\n\r\n\tpublic getAnimationNode(animator:AnimatorBase, startNode:AnimationNodeBase, endNode:AnimationNodeBase, startBlend:number):AnimationNodeBase\r\n\t{\r\n\t\tvar crossFadeTransitionNode:CrossfadeTransitionNode = new CrossfadeTransitionNode();\r\n\t\tcrossFadeTransitionNode.inputA = startNode;\r\n\t\tcrossFadeTransitionNode.inputB = endNode;\r\n\t\tcrossFadeTransitionNode.blendSpeed = this.blendSpeed;\r\n\t\tcrossFadeTransitionNode.startBlend = startBlend;\r\n\r\n\t\treturn <AnimationNodeBase> crossFadeTransitionNode;\r\n\t}\r\n}",
    "export {AnimationElements}\t\t\t\tfrom \"./animators/data/AnimationElements\";\r\nexport {AnimationRegisterData}\t\t\tfrom \"./animators/data/AnimationRegisterData\";\r\nexport {ColorSegmentPoint}\t\t\t\tfrom \"./animators/data/ColorSegmentPoint\";\r\nexport {JointPose}\t\t\t\t\t\tfrom \"./animators/data/JointPose\";\r\nexport {ParticleAnimationData}\t\t\tfrom \"./animators/data/ParticleAnimationData\";\r\nexport {ParticleProperties}\t\t\t\tfrom \"./animators/data/ParticleProperties\";\r\nexport {ParticlePropertiesMode}\t\t\tfrom \"./animators/data/ParticlePropertiesMode\";\r\nexport {Skeleton}\t\t\t\t\t\tfrom \"./animators/data/Skeleton\";\r\nexport {SkeletonJoint}\t\t\t\t\tfrom \"./animators/data/SkeletonJoint\";\r\nexport {SkeletonPose}\t\t\t\t\tfrom \"./animators/data/SkeletonPose\";\r\nexport {VertexAnimationMode}\t\t\t\tfrom \"./animators/data/VertexAnimationMode\";\r\nexport {AnimationClipNodeBase}\t\t\tfrom \"./animators/nodes/AnimationClipNodeBase\";\r\nexport {ParticleAccelerationNode}\t\tfrom \"./animators/nodes/ParticleAccelerationNode\";\r\nexport {ParticleBezierCurveNode}\t\t\tfrom \"./animators/nodes/ParticleBezierCurveNode\";\r\nexport {ParticleBillboardNode}\t\t\tfrom \"./animators/nodes/ParticleBillboardNode\";\r\nexport {ParticleColorNode}\t\t\t\tfrom \"./animators/nodes/ParticleColorNode\";\r\nexport {ParticleFollowNode}\t\t\t\tfrom \"./animators/nodes/ParticleFollowNode\";\r\nexport {ParticleInitialColorNode}\t\tfrom \"./animators/nodes/ParticleInitialColorNode\";\r\nexport {ParticleNodeBase}\t\t\t\tfrom \"./animators/nodes/ParticleNodeBase\";\r\nexport {ParticleOrbitNode}\t\t\t\tfrom \"./animators/nodes/ParticleOrbitNode\";\r\nexport {ParticleOscillatorNode}\t\t\tfrom \"./animators/nodes/ParticleOscillatorNode\";\r\nexport {ParticlePositionNode}\t\t\tfrom \"./animators/nodes/ParticlePositionNode\";\r\nexport {ParticleRotateToHeadingNode}\t\tfrom \"./animators/nodes/ParticleRotateToHeadingNode\";\r\nexport {ParticleRotateToPositionNode}\tfrom \"./animators/nodes/ParticleRotateToPositionNode\";\r\nexport {ParticleRotationalVelocityNode}\tfrom \"./animators/nodes/ParticleRotationalVelocityNode\";\r\nexport {ParticleScaleNode}\t\t\t\tfrom \"./animators/nodes/ParticleScaleNode\";\r\nexport {ParticleSegmentedColorNode}\t\tfrom \"./animators/nodes/ParticleSegmentedColorNode\";\r\nexport {ParticleSpriteSheetNode}\t\t\tfrom \"./animators/nodes/ParticleSpriteSheetNode\";\r\nexport {ParticleTimeNode}\t\t\t\tfrom \"./animators/nodes/ParticleTimeNode\";\r\nexport {ParticleUVNode}\t\t\t\t\tfrom \"./animators/nodes/ParticleUVNode\";\r\nexport {ParticleVelocityNode}\t\t\tfrom \"./animators/nodes/ParticleVelocityNode\";\r\nexport {SkeletonBinaryLERPNode}\t\t\tfrom \"./animators/nodes/SkeletonBinaryLERPNode\";\r\nexport {SkeletonClipNode}\t\t\t\tfrom \"./animators/nodes/SkeletonClipNode\";\r\nexport {SkeletonDifferenceNode}\t\t\tfrom \"./animators/nodes/SkeletonDifferenceNode\";\r\nexport {SkeletonDirectionalNode}\t\t\tfrom \"./animators/nodes/SkeletonDirectionalNode\";\r\nexport {SkeletonNaryLERPNode}\t\t\tfrom \"./animators/nodes/SkeletonNaryLERPNode\";\r\nexport {VertexClipNode}\t\t\t\t\tfrom \"./animators/nodes/VertexClipNode\";\r\nexport {AnimationClipState}\t\t\t\tfrom \"./animators/states/AnimationClipState\";\r\nexport {AnimationStateBase}\t\t\t\tfrom \"./animators/states/AnimationStateBase\";\r\nexport {IAnimationState}\t\t\t\t\tfrom \"./animators/states/IAnimationState\";\r\nexport {ISkeletonAnimationState}\t\t\tfrom \"./animators/states/ISkeletonAnimationState\";\r\nexport {IVertexAnimationState}\t\t\tfrom \"./animators/states/IVertexAnimationState\";\r\nexport {ParticleAccelerationState}\t\tfrom \"./animators/states/ParticleAccelerationState\";\r\nexport {ParticleBezierCurveState}\t\tfrom \"./animators/states/ParticleBezierCurveState\";\r\nexport {ParticleBillboardState}\t\t\tfrom \"./animators/states/ParticleBillboardState\";\r\nexport {ParticleColorState}\t\t\t\tfrom \"./animators/states/ParticleColorState\";\r\nexport {ParticleFollowState}\t\t\t\tfrom \"./animators/states/ParticleFollowState\";\r\nexport {ParticleInitialColorState}\t\tfrom \"./animators/states/ParticleInitialColorState\";\r\nexport {ParticleStateBase}\t\t\t\tfrom \"./animators/states/ParticleStateBase\";\r\nexport {ParticleOrbitState}\t\t\t\tfrom \"./animators/states/ParticleOrbitState\";\r\nexport {ParticleOscillatorState}\t\t\tfrom \"./animators/states/ParticleOscillatorState\";\r\nexport {ParticlePositionState}\t\t\tfrom \"./animators/states/ParticlePositionState\";\r\nexport {ParticleRotateToHeadingState}\tfrom \"./animators/states/ParticleRotateToHeadingState\";\r\nexport {ParticleRotateToPositionState}\tfrom \"./animators/states/ParticleRotateToPositionState\";\r\nexport {ParticleRotationalVelocityState}\tfrom \"./animators/states/ParticleRotationalVelocityState\";\r\nexport {ParticleScaleState}\t\t\t\tfrom \"./animators/states/ParticleScaleState\";\r\nexport {ParticleSegmentedColorState}\t\tfrom \"./animators/states/ParticleSegmentedColorState\";\r\nexport {ParticleSpriteSheetState}\t\tfrom \"./animators/states/ParticleSpriteSheetState\";\r\nexport {ParticleTimeState}\t\t\t\tfrom \"./animators/states/ParticleTimeState\";\r\nexport {ParticleUVState}\t\t\t\t\tfrom \"./animators/states/ParticleUVState\";\r\nexport {ParticleVelocityState}\t\t\tfrom \"./animators/states/ParticleVelocityState\";\r\nexport {SkeletonBinaryLERPState}\t\t\tfrom \"./animators/states/SkeletonBinaryLERPState\";\r\nexport {SkeletonClipState}\t\t\t\tfrom \"./animators/states/SkeletonClipState\";\r\nexport {SkeletonDifferenceState}\t\t\tfrom \"./animators/states/SkeletonDifferenceState\";\r\nexport {SkeletonDirectionalState}\t\tfrom \"./animators/states/SkeletonDirectionalState\";\r\nexport {SkeletonNaryLERPState}\t\t\tfrom \"./animators/states/SkeletonNaryLERPState\";\r\nexport {VertexClipState}\t\t\t\t\tfrom \"./animators/states/VertexClipState\";\r\nexport {CrossfadeTransition}\t\t\t\tfrom \"./animators/transitions/CrossfadeTransition\";\r\nexport {CrossfadeTransitionNode}\t\t\tfrom \"./animators/transitions/CrossfadeTransitionNode\";\r\nexport {CrossfadeTransitionState}\t\tfrom \"./animators/transitions/CrossfadeTransitionState\";\r\nexport {IAnimationTransition}\t\t\tfrom \"./animators/transitions/IAnimationTransition\";\r\nexport {AnimationSetBase}\t\t\t\tfrom \"./animators/AnimationSetBase\";\r\nexport {AnimatorBase}\t\t\t\t\tfrom \"./animators/AnimatorBase\";\r\nexport {ParticleAnimationSet}\t\t\tfrom \"./animators/ParticleAnimationSet\";\r\nexport {ParticleAnimator}\t\t\t\tfrom \"./animators/ParticleAnimator\";\r\nexport {SkeletonAnimationSet}\t\t\tfrom \"./animators/SkeletonAnimationSet\";\r\nexport {SkeletonAnimator}\t\t\t\tfrom \"./animators/SkeletonAnimator\";\r\nexport {VertexAnimationSet}\t\t\t\tfrom \"./animators/VertexAnimationSet\";\r\nexport {VertexAnimator}\t\t\t\t\tfrom \"./animators/VertexAnimator\";",
    "import {Short3Attributes}\t\t\t\tfrom \"awayjs-core/lib/attributes/Short3Attributes\";\r\nimport {AttributesView}\t\t\t\tfrom \"awayjs-core/lib/attributes/AttributesView\";\r\nimport {AttributesBuffer}\t\t\t\tfrom \"awayjs-core/lib/attributes/AttributesBuffer\";\r\nimport {AbstractionBase}\t\t\t\tfrom \"awayjs-core/lib/library/AbstractionBase\";\r\nimport {IAbstractionPool}\t\t\t\tfrom \"awayjs-core/lib/library/IAbstractionPool\";\r\nimport {AbstractMethodError}\t\t\tfrom \"awayjs-core/lib/errors/AbstractMethodError\";\r\nimport {AssetEvent}\t\t\t\t\tfrom \"awayjs-core/lib/events/AssetEvent\";\r\nimport {Matrix3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\r\n\r\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\nimport {GL_AttributesBuffer}\t\t\tfrom \"awayjs-stagegl/lib/attributes/GL_AttributesBuffer\";\r\n\r\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\nimport {ElementsBase}\t\t\t\t\tfrom \"awayjs-display/lib/graphics/ElementsBase\";\r\nimport {ElementsEvent}\t\t\t\tfrom \"awayjs-display/lib/events/ElementsEvent\";\r\nimport {ElementsUtils}\t\t\t\tfrom \"awayjs-display/lib/utils/ElementsUtils\";\r\n\r\nimport {IElementsClassGL}\t\t\t\tfrom \"../elements/IElementsClassGL\";\r\nimport {ShaderBase}\t\t\t\t\tfrom \"../shaders/ShaderBase\";\r\nimport {GL_RenderableBase}\t\t\tfrom \"../renderables/GL_RenderableBase\";\r\n\r\n/**\r\n *\r\n * @class away.pool.GL_ElementsBaseBase\r\n */\r\nexport class GL_ElementsBase extends AbstractionBase\r\n{\r\n\tpublic usages:number = 0;\r\n\tprivate _elements:ElementsBase;\r\n\tpublic _stage:Stage;\r\n\tprivate _onInvalidateIndicesDelegate:(event:ElementsEvent) => void;\r\n\tprivate _onClearIndicesDelegate:(event:ElementsEvent) => void;\r\n\tprivate _onInvalidateVerticesDelegate:(event:ElementsEvent) => void;\r\n\tprivate _onClearVerticesDelegate:(event:ElementsEvent) => void;\r\n\tprivate _overflow:GL_ElementsBase;\r\n\tpublic _indices:GL_AttributesBuffer;\r\n\tprivate _indicesUpdated:boolean;\r\n\tprivate _vertices:Object = new Object();\r\n\tprivate _verticesUpdated:Object = new Object();\r\n\r\n\tpublic _indexMappings:Array<number> = Array<number>();\r\n\t\r\n\tprivate _numIndices:number = 0;\r\n\r\n\tprivate _numVertices:number;\r\n\t\r\n\tpublic get elementsType():string\r\n\t{\r\n\t\tthrow new AbstractMethodError();\r\n\t}\r\n\t\r\n\tpublic get elementsClass():IElementsClassGL\r\n\t{\r\n\t\tthrow new AbstractMethodError();\r\n\t}\r\n\r\n\tpublic get elements():ElementsBase\r\n\t{\r\n\t\treturn this._elements;\r\n\t}\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic get numIndices():number\r\n\t{\r\n\t\treturn this._numIndices;\r\n\t}\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic get numVertices():number\r\n\t{\r\n\t\treturn this._numVertices;\r\n\t}\r\n\t\r\n\tconstructor(elements:ElementsBase, stage:Stage)\r\n\t{\r\n\t\tsuper(elements, stage);\r\n\t\t\r\n\t\tthis._elements = elements;\r\n\t\tthis._stage = stage;\r\n\r\n\t\tthis._onInvalidateIndicesDelegate = (event:ElementsEvent) => this._onInvalidateIndices(event);\r\n\t\tthis._onClearIndicesDelegate = (event:ElementsEvent) => this._onClearIndices(event);\r\n\t\tthis._onInvalidateVerticesDelegate = (event:ElementsEvent) => this._onInvalidateVertices(event);\r\n\t\tthis._onClearVerticesDelegate = (event:ElementsEvent) => this._onClearVertices(event);\r\n\r\n\t\tthis._elements.addEventListener(ElementsEvent.CLEAR_INDICES, this._onClearIndicesDelegate);\r\n\t\tthis._elements.addEventListener(ElementsEvent.INVALIDATE_INDICES, this._onInvalidateIndicesDelegate);\r\n\r\n\t\tthis._elements.addEventListener(ElementsEvent.CLEAR_VERTICES, this._onClearVerticesDelegate);\r\n\t\tthis._elements.addEventListener(ElementsEvent.INVALIDATE_VERTICES, this._onInvalidateVerticesDelegate);\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic getIndexMappings():Array<number>\r\n\t{\r\n\t\tif (!this._indicesUpdated)\r\n\t\t\tthis._updateIndices();\r\n\r\n\t\treturn this._indexMappings;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic getIndexBufferGL():GL_AttributesBuffer\r\n\t{\r\n\t\tif (!this._indicesUpdated)\r\n\t\t\tthis._updateIndices();\r\n\r\n\t\treturn this._indices;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic getVertexBufferGL(attributesView:AttributesView):GL_AttributesBuffer\r\n\t{\r\n\t\t//first check if indices need updating which may affect vertices\r\n\t\tif (!this._indicesUpdated)\r\n\t\t\tthis._updateIndices();\r\n\r\n\t\tvar bufferId:number = attributesView.attributesBuffer.id;\r\n\r\n\t\tif (!this._verticesUpdated[bufferId])\r\n\t\t\tthis._updateVertices(attributesView);\r\n\r\n\t\treturn this._vertices[bufferId];\r\n\t}\r\n\t\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic activateVertexBufferVO(index:number, attributesView:AttributesView, dimensions:number = 0, offset:number = 0):void\r\n\t{\r\n\t\tthis.getVertexBufferGL(attributesView).activate(index, attributesView.size, dimensions || attributesView.dimensions, attributesView.offset + offset, attributesView.unsigned);\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic onClear(event:AssetEvent):void\r\n\t{\r\n\t\tsuper.onClear(event);\r\n\r\n\t\tthis._elements.removeEventListener(ElementsEvent.CLEAR_INDICES, this._onClearIndicesDelegate);\r\n\t\tthis._elements.removeEventListener(ElementsEvent.INVALIDATE_INDICES, this._onInvalidateIndicesDelegate);\r\n\r\n\t\tthis._elements.removeEventListener(ElementsEvent.CLEAR_VERTICES, this._onClearVerticesDelegate);\r\n\t\tthis._elements.removeEventListener(ElementsEvent.INVALIDATE_VERTICES, this._onInvalidateVerticesDelegate);\r\n\r\n\t\tthis._elements = null;\r\n\r\n\t\tif (this._overflow) {\r\n\t\t\tthis._overflow.onClear(event);\r\n\t\t\tthis._overflow = null;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic _setRenderState(renderable:GL_RenderableBase, shader:ShaderBase, camera:Camera, viewProjection:Matrix3D):void\r\n\t{\r\n\t\tif (!this._verticesUpdated)\r\n\t\t\tthis._updateIndices();\r\n\r\n\t\t//TODO replace overflow system with something sensible\r\n\t\t//this._render(renderable, camera, viewProjection);\r\n\t\t//\r\n\t\t// if (this._overflow)\r\n\t\t// \tthis._overflow._iRender(renderable, camera, viewProjection);\r\n\t}\r\n\r\n\tpublic draw(renderable:GL_RenderableBase, shader:ShaderBase, camera:Camera, viewProjection:Matrix3D, count:number, offset:number):void\r\n\t{\r\n\t\tthrow new AbstractMethodError();\r\n\t}\r\n\r\n\t/**\r\n\t * //TODO\r\n\t *\r\n\t * @private\r\n\t */\r\n\tpublic _updateIndices(indexOffset:number = 0):void\r\n\t{\r\n\t\tvar indices:Short3Attributes = this._elements.indices;\r\n\t\tif (indices) {\r\n\t\t\tthis._indices = <GL_AttributesBuffer> this._stage.getAbstraction(ElementsUtils.getSubIndices(indices, this._elements.numVertices, this._indexMappings, indexOffset));\r\n\t\t\tthis._numIndices = this._indices._attributesBuffer.count*indices.dimensions;\r\n\t\t} else {\r\n\t\t\tthis._indices = null;\r\n\t\t\tthis._numIndices = 0;\r\n\t\t\tthis._indexMappings  = Array<number>();\r\n\t\t}\r\n\r\n\t\tindexOffset += this._numIndices;\r\n\r\n\t\t//check if there is more to split\r\n\t\tif (indices && indexOffset < indices.count*this._elements.indices.dimensions) {\r\n\t\t\tif (!this._overflow)\r\n\t\t\t\tthis._overflow = this._pGetOverflowElements();\r\n\r\n\t\t\tthis._overflow._updateIndices(indexOffset);\r\n\t\t} else if (this._overflow) {\r\n\t\t\tthis._overflow.onClear(new AssetEvent(AssetEvent.CLEAR, this._elements));\r\n\t\t\tthis._overflow = null;\r\n\t\t}\r\n\r\n\t\tthis._indicesUpdated = true;\r\n\r\n\t\t//invalidate vertices if index mappings exist\r\n\t\tif (this._indexMappings.length)\r\n\t\t\tfor (var key in this._verticesUpdated)\r\n\t\t\t\tthis._verticesUpdated[key] = false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * //TODO\r\n\t *\r\n\t * @param attributesView\r\n\t * @private\r\n\t */\r\n\tprivate _updateVertices(attributesView:AttributesView):void\r\n\t{\r\n\t\tthis._numVertices = this._elements.numVertices;\r\n\r\n\t\tvar bufferId:number = attributesView.attributesBuffer.id;\r\n\r\n\t\tthis._vertices[bufferId] = <GL_AttributesBuffer> this._stage.getAbstraction(ElementsUtils.getSubVertices(attributesView.attributesBuffer, this._indexMappings));\r\n\r\n\t\tthis._verticesUpdated[bufferId] = true;\r\n\t}\r\n\r\n\t/**\r\n\t * //TODO\r\n\t *\r\n\t * @param event\r\n\t * @private\r\n\t */\r\n\tpublic _onInvalidateIndices(event:ElementsEvent):void\r\n\t{\r\n\t\tif (!event.attributesView)\r\n\t\t\treturn;\r\n\r\n\t\tthis._indicesUpdated = false;\r\n\t}\r\n\r\n\t/**\r\n\t * //TODO\r\n\t *\r\n\t * @param event\r\n\t * @private\r\n\t */\r\n\tpublic _onClearIndices(event:ElementsEvent):void\r\n\t{\r\n\t\tif (!event.attributesView)\r\n\t\t\treturn;\r\n\r\n\t\tthis._indices.onClear(new AssetEvent(AssetEvent.CLEAR, event.attributesView));\r\n\t\tthis._indices = null;\r\n\t}\r\n\r\n\t/**\r\n\t * //TODO\r\n\t *\r\n\t * @param event\r\n\t * @private\r\n\t */\r\n\tpublic _onInvalidateVertices(event:ElementsEvent):void\r\n\t{\r\n\t\tif (!event.attributesView)\r\n\t\t\treturn;\r\n\r\n\t\tvar bufferId:number = event.attributesView.attributesBuffer.id;\r\n\r\n\t\tthis._verticesUpdated[bufferId] = false;\r\n\t}\r\n\t\r\n\t/**\r\n\t * //TODO\r\n\t *\r\n\t * @param event\r\n\t * @private\r\n\t */\r\n\tpublic _onClearVertices(event:ElementsEvent):void\r\n\t{\r\n\t\tif (!event.attributesView)\r\n\t\t\treturn;\r\n\r\n\t\tvar bufferId:number = event.attributesView.attributesBuffer.id;\r\n\r\n\t\tif (this._vertices[bufferId]) {\r\n\t\t\tthis._vertices[bufferId].onClear(new AssetEvent(AssetEvent.CLEAR, event.attributesView));\r\n\t\t\tdelete this._vertices[bufferId];\r\n\t\t\tdelete this._verticesUpdated[bufferId];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * //TODO\r\n\t *\r\n\t * @param pool\r\n\t * @param renderable\r\n\t * @param level\r\n\t * @param indexOffset\r\n\t * @returns {away.pool.GL_GraphicRenderable}\r\n\t * @protected\r\n\t */\r\n\tpublic _pGetOverflowElements():GL_ElementsBase\r\n\t{\r\n\t\tthrow new AbstractMethodError();\r\n\t}\r\n}",
    "import {AssetEvent}\t\t\t\t\tfrom \"awayjs-core/lib/events/AssetEvent\";\r\nimport {Matrix3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\r\n\r\nimport {ContextGLDrawMode}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLDrawMode\";\r\nimport {IContextGL}\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/IContextGL\";\r\nimport {ContextGLProgramType}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLProgramType\";\r\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\n\r\nimport {LineElements}\t\t\t\t\tfrom \"awayjs-display/lib/graphics/LineElements\";\r\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\n\r\nimport {GL_ElementsBase}\t\t\t\tfrom \"../elements/GL_ElementsBase\";\r\nimport {IElementsClassGL}\t\t\t\tfrom \"../elements/IElementsClassGL\";\r\nimport {ShaderBase}\t\t\t\t\tfrom \"../shaders/ShaderBase\";\r\nimport {ShaderRegisterCache}\t\t\tfrom \"../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterElement}\t\tfrom \"../shaders/ShaderRegisterElement\";\r\nimport {ShaderRegisterData}\t\t\tfrom \"../shaders/ShaderRegisterData\";\r\nimport {GL_RenderableBase}\t\t\tfrom \"../renderables/GL_RenderableBase\";\r\n\r\n/**\r\n *\r\n * @class away.pool.GL_LineElements\r\n */\r\nexport class GL_LineElements extends GL_ElementsBase\r\n{\r\n\tpublic static elementsType:string = \"[elements Line]\";\r\n\t\r\n\tpublic get elementsType():string\r\n\t{\r\n\t\treturn GL_LineElements.elementsType;\r\n\t}\r\n\t\r\n\tpublic get elementsClass():IElementsClassGL\r\n\t{\r\n\t\treturn GL_LineElements;\r\n\t}\r\n\t\r\n\tpublic static _iIncludeDependencies(shader:ShaderBase):void\r\n\t{\r\n\t\tshader.colorDependencies++;\r\n\t}\r\n\r\n\tpublic static _iGetVertexCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\r\n\t{\r\n\t\t//get the projection coordinates\r\n\t\tvar position0:ShaderRegisterElement = (shader.globalPosDependencies > 0)? sharedRegisters.globalPositionVertex : sharedRegisters.animatedPosition;\r\n\t\tvar position1:ShaderRegisterElement = registerCache.getFreeVertexAttribute();\r\n\t\tvar thickness:ShaderRegisterElement = registerCache.getFreeVertexAttribute();\r\n\r\n\t\t//reserving vertex constants for projection matrix\r\n\t\tvar viewMatrixReg:ShaderRegisterElement = registerCache.getFreeVertexConstant();\r\n\t\tregisterCache.getFreeVertexConstant();\r\n\t\tregisterCache.getFreeVertexConstant();\r\n\t\tregisterCache.getFreeVertexConstant();\r\n\t\tshader.viewMatrixIndex = viewMatrixReg.index*4;\r\n\r\n\t\tregisterCache.getFreeVertexConstant(); // not used\r\n\t\tvar constOne:ShaderRegisterElement = registerCache.getFreeVertexConstant();\r\n\t\tvar constNegOne:ShaderRegisterElement = registerCache.getFreeVertexConstant();\r\n\t\tvar misc:ShaderRegisterElement = registerCache.getFreeVertexConstant();\r\n\r\n\t\tvar sceneMatrixReg:ShaderRegisterElement = registerCache.getFreeVertexConstant();\r\n\t\tregisterCache.getFreeVertexConstant();\r\n\t\tregisterCache.getFreeVertexConstant();\r\n\t\tregisterCache.getFreeVertexConstant();\r\n\t\tshader.sceneMatrixIndex = sceneMatrixReg.index*4;\r\n\t\t\r\n\t\tvar q0:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\tregisterCache.addVertexTempUsages(q0, 1);\r\n\t\tvar q1:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\tregisterCache.addVertexTempUsages(q1, 1);\r\n\t\t\r\n\t\tvar l:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\tregisterCache.addVertexTempUsages(l, 1);\r\n\t\tvar behind:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\tregisterCache.addVertexTempUsages(behind, 1);\r\n\t\tvar qclipped:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\tregisterCache.addVertexTempUsages(qclipped, 1);\r\n\t\tvar offset:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\tregisterCache.addVertexTempUsages(offset, 1);\r\n\r\n\t\treturn \"m44 \" + q0 + \", \" + position0 + \", \" + sceneMatrixReg + \"\t\t\t\\n\" + // transform Q0 to eye space\r\n\t\t\t\"m44 \" + q1 + \", \" + position1 + \", \" + sceneMatrixReg + \"\t\t\t\\n\" + // transform Q1 to eye space\r\n\t\t\t\"sub \" + l + \", \" + q1 + \", \" + q0 + \" \t\t\t\\n\" + // L = Q1 - Q0\r\n\r\n\t\t\t\t// test if behind camera near plane\r\n\t\t\t\t// if 0 - Q0.z < Camera.near then the point needs to be clipped\r\n\t\t\t\"slt \" + behind + \".x, \" + q0 + \".z, \" + misc + \".z\t\t\t\\n\" + // behind = ( 0 - Q0.z < -Camera.near ) ? 1 : 0\r\n\t\t\t\"sub \" + behind + \".y, \" + constOne + \".x, \" + behind + \".x\t\t\t\\n\" + // !behind = 1 - behind\r\n\r\n\t\t\t\t// p = point on the plane (0,0,-near)\r\n\t\t\t\t// n = plane normal (0,0,-1)\r\n\t\t\t\t// D = Q1 - Q0\r\n\t\t\t\t// t = ( dot( n, ( p - Q0 ) ) / ( dot( n, d )\r\n\r\n\t\t\t\t// solve for t where line crosses Camera.near\r\n\t\t\t\"add \" + offset + \".x, \" + q0 + \".z, \" + misc + \".z\t\t\t\\n\" + // Q0.z + ( -Camera.near )\r\n\t\t\t\"sub \" + offset + \".y, \" + q0 + \".z, \" + q1 + \".z\t\t\t\\n\" + // Q0.z - Q1.z\r\n\r\n\t\t\t\t// fix divide by zero for horizontal lines\r\n\t\t\t\"seq \" + offset + \".z, \" + offset + \".y \" + constNegOne + \".x\t\t\t\\n\" + // offset = (Q0.z - Q1.z)==0 ? 1 : 0\r\n\t\t\t\"add \" + offset + \".y, \" + offset + \".y, \" + offset + \".z\t\t\t\\n\" + // ( Q0.z - Q1.z ) + offset\r\n\r\n\t\t\t\"div \" + offset + \".z, \" + offset + \".x, \" + offset + \".y\t\t\t\\n\" + // t = ( Q0.z - near ) / ( Q0.z - Q1.z )\r\n\r\n\t\t\t\"mul \" + offset + \".xyz, \" + offset + \".zzz, \" + l + \".xyz\t\\n\" + // t(L)\r\n\t\t\t\"add \" + qclipped + \".xyz, \" + q0 + \".xyz, \" + offset + \".xyz\t\\n\" + // Qclipped = Q0 + t(L)\r\n\t\t\t\"mov \" + qclipped + \".w, \" + constOne + \".x\t\t\t\\n\" + // Qclipped.w = 1\r\n\r\n\t\t\t\t// If necessary, replace Q0 with new Qclipped\r\n\t\t\t\"mul \" + q0 + \", \" + q0 + \", \" + behind + \".yyyy\t\t\t\\n\" + // !behind * Q0\r\n\t\t\t\"mul \" + qclipped + \", \" + qclipped + \", \" + behind + \".xxxx\t\t\t\\n\" + // behind * Qclipped\r\n\t\t\t\"add \" + q0 + \", \" + q0 + \", \" + qclipped + \"\t\t\t\t\\n\" + // newQ0 = Q0 + Qclipped\r\n\r\n\t\t\t\t// calculate side vector for line\r\n\t\t\t\"nrm \" + l + \".xyz, \" + l + \".xyz\t\t\t\\n\" + // normalize( L )\r\n\t\t\t\"nrm \" + behind + \".xyz, \" + q0 + \".xyz\t\t\t\\n\" + // D = normalize( Q1 )\r\n\t\t\t\"mov \" + behind + \".w, \" + constOne + \".x\t\t\t\t\\n\" + // D.w = 1\r\n\t\t\t\"crs \" + qclipped + \".xyz, \" + l + \", \" + behind + \"\t\t\t\\n\" + // S = L x D\r\n\t\t\t\"nrm \" + qclipped + \".xyz, \" + qclipped + \".xyz\t\t\t\\n\" + // normalize( S )\r\n\r\n\t\t\t\t// face the side vector properly for the given point\r\n\t\t\t\"mul \" + qclipped + \".xyz, \" + qclipped + \".xyz, \" + thickness + \".xxx\t\\n\" + // S *= weight\r\n\t\t\t\"mov \" + qclipped + \".w, \" + constOne + \".x\t\t\t\\n\" + // S.w = 1\r\n\r\n\t\t\t\t// calculate the amount required to move at the point's distance to correspond to the line's pixel width\r\n\t\t\t\t// scale the side vector by that amount\r\n\t\t\t\"dp3 \" + offset + \".x, \" + q0 + \", \" + constNegOne + \"\t\t\t\\n\" + // distance = dot( view )\r\n\t\t\t\"mul \" + offset + \".x, \" + offset + \".x, \" + misc + \".x\t\t\t\\n\" + // distance *= vpsod\r\n\t\t\t\"mul \" + qclipped + \".xyz, \" + qclipped + \".xyz, \" + offset + \".xxx\t\\n\" + // S.xyz *= pixelScaleFactor\r\n\r\n\t\t\t\t// add scaled side vector to Q0 and transform to clip space\r\n\t\t\t\"add \" + q0 + \".xyz, \" + q0 + \".xyz, \" + qclipped + \".xyz\t\\n\" + // Q0 + S\r\n\r\n\t\t\t\"m44 op, \" + q0 + \", \" + viewMatrixReg + \"\t\t\t\\n\"  // transform Q0 to clip space\r\n\t}\r\n\r\n\tpublic static _iGetFragmentCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\r\n\t{\r\n\t\treturn \"\";\r\n\t}\r\n\t\r\n\tprivate _calcMatrix:Matrix3D = new Matrix3D();\r\n\tprivate _thickness:number = 1.25;\r\n\r\n\tprivate _lineElements:LineElements;\r\n\r\n\tconstructor(lineElements:LineElements, stage:Stage)\r\n\t{\r\n\t\tsuper(lineElements, stage);\r\n\r\n\t\tthis._lineElements = lineElements;\r\n\t}\r\n\r\n\tpublic onClear(event:AssetEvent):void\r\n\t{\r\n\t\tsuper.onClear(event);\r\n\r\n\t\tthis._lineElements = null;\r\n\t}\r\n\r\n\tpublic _setRenderState(renderable:GL_RenderableBase, shader:ShaderBase, camera:Camera, viewProjection:Matrix3D):void\r\n\t{\r\n\t\tsuper._setRenderState(renderable, shader, camera, viewProjection);\r\n\t\t\r\n\t\tif (shader.colorBufferIndex >= 0)\r\n\t\t\tthis.activateVertexBufferVO(shader.colorBufferIndex, this._lineElements.colors);\r\n\r\n\t\tthis.activateVertexBufferVO(0, this._lineElements.positions, 3);\r\n\t\tthis.activateVertexBufferVO(2, this._lineElements.positions, 3, 12);\r\n\t\tthis.activateVertexBufferVO(3, this._lineElements.thickness);\r\n\r\n\t\tshader.vertexConstantData[4+16] = 1;\r\n\t\tshader.vertexConstantData[5+16] = 1;\r\n\t\tshader.vertexConstantData[6+16] = 1;\r\n\t\tshader.vertexConstantData[7+16] = 1;\r\n\r\n\t\tshader.vertexConstantData[10+16] = -1;\r\n\r\n\t\tshader.vertexConstantData[12+16] = this._thickness/((this._stage.scissorRect)? Math.min(this._stage.scissorRect.width, this._stage.scissorRect.height) : Math.min(this._stage.width, this._stage.height));\r\n\t\tshader.vertexConstantData[13+16] = 1/255;\r\n\t\tshader.vertexConstantData[14+16] = camera.projection.near;\r\n\r\n\t\tvar context:IContextGL = this._stage.context;\r\n\t}\r\n\r\n\tpublic draw(renderable:GL_RenderableBase, shader:ShaderBase, camera:Camera, viewProjection:Matrix3D, count:number, offset:number):void\r\n\t{\r\n\t\tvar context:IContextGL = this._stage.context;\r\n\t\t\r\n\t\t// projection matrix\r\n\t\tcamera.projection.matrix.copyRawDataTo(shader.vertexConstantData, shader.viewMatrixIndex, true);\r\n\t\t\r\n\t\tthis._calcMatrix.copyFrom(renderable.sourceEntity.sceneTransform);\r\n\t\tthis._calcMatrix.append(camera.inverseSceneTransform);\r\n\t\tthis._calcMatrix.copyRawDataTo(shader.vertexConstantData, shader.sceneMatrixIndex, true);\r\n\r\n\t\tcontext.setProgramConstantsFromArray(ContextGLProgramType.VERTEX, shader.vertexConstantData);\r\n\t\t\r\n\t\tif (this._indices)\r\n\t\t\tthis.getIndexBufferGL().draw(ContextGLDrawMode.TRIANGLES, 0, this.numIndices);\r\n\t\telse\r\n\t\t\tthis._stage.context.drawVertices(ContextGLDrawMode.TRIANGLES, offset, count || this.numVertices);\r\n\t}\r\n\r\n\t/**\r\n\t * //TODO\r\n\t *\r\n\t * @param pool\r\n\t * @param renderable\r\n\t * @param level\r\n\t * @param indexOffset\r\n\t * @returns {away.pool.LineSubSpriteRenderable}\r\n\t * @protected\r\n\t */\r\n\tpublic _pGetOverflowElements():GL_ElementsBase\r\n\t{\r\n\t\treturn new GL_LineElements(this._lineElements, this._stage);\r\n\t}\r\n}",
    "import {Matrix3DUtils}\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3DUtils\";\r\nimport {Matrix3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\r\nimport {Vector3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\n\r\nimport {ContextGLDrawMode}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLDrawMode\";\r\nimport {ContextGLProgramType}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLProgramType\";\r\nimport {IContextGL}\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/IContextGL\";\r\n\r\nimport {ShaderBase}\t\t\t\t\tfrom \"../shaders/ShaderBase\";\r\nimport {ShaderRegisterCache}\t\t\tfrom \"../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterElement}\t\tfrom \"../shaders/ShaderRegisterElement\";\r\nimport {GL_TriangleElements}\t\t\tfrom \"../elements/GL_TriangleElements\";\r\nimport {IElementsClassGL}\t\t\t\tfrom \"../elements/IElementsClassGL\";\r\nimport {GL_RenderableBase}\t\t\tfrom \"../renderables/GL_RenderableBase\";\r\nimport {ShaderRegisterData}\t\t\tfrom \"../shaders/ShaderRegisterData\";\r\n\r\n/**\r\n *\r\n * @class away.pool.GL_SkyboxElements\r\n */\r\nexport class GL_SkyboxElements extends GL_TriangleElements\r\n{\r\n\tprivate _skyboxProjection:Matrix3D = new Matrix3D();\r\n\t\r\n\tpublic static elementsType:string = \"[elements Skybox]\";\r\n\r\n\tpublic get elementsType():string\r\n\t{\r\n\t\treturn GL_SkyboxElements.elementsType;\r\n\t}\r\n\t\r\n\tpublic get elementsClass():IElementsClassGL\r\n\t{\r\n\t\treturn GL_SkyboxElements;\r\n\t}\r\n\t\r\n\tpublic static _iIncludeDependencies(shader:ShaderBase):void\r\n\t{\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic static _iGetVertexCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\r\n\t{\r\n\t\tvar code:string = \"\";\r\n\r\n\t\t//get the projection coordinates\r\n\t\tvar position:ShaderRegisterElement = (shader.globalPosDependencies > 0)? sharedRegisters.globalPositionVertex : sharedRegisters.animatedPosition;\r\n\r\n\t\t//reserving vertex constants for projection matrix\r\n\t\tvar viewMatrixReg:ShaderRegisterElement = registerCache.getFreeVertexConstant();\r\n\t\tregisterCache.getFreeVertexConstant();\r\n\t\tregisterCache.getFreeVertexConstant();\r\n\t\tregisterCache.getFreeVertexConstant();\r\n\t\tshader.viewMatrixIndex = viewMatrixReg.index*4;\r\n\r\n\t\tvar scenePosition:ShaderRegisterElement = registerCache.getFreeVertexConstant();\r\n\t\tshader.scenePositionIndex = scenePosition.index*4;\r\n\r\n\t\tvar skyboxScale:ShaderRegisterElement = registerCache.getFreeVertexConstant();\r\n\t\t\r\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\r\n\t\tcode += \"mul \" + temp + \", \" + position + \", \" + skyboxScale + \"\\n\" +\r\n\t\t\t\"add \" + temp + \", \" + temp + \", \" + scenePosition + \"\\n\";\r\n\r\n\t\tif (shader.projectionDependencies > 0) {\r\n\t\t\tsharedRegisters.projectionFragment = registerCache.getFreeVarying();\r\n\t\t\tcode += \"m44 \" + temp + \", \" + temp + \", \" + viewMatrixReg + \"\\n\" +\r\n\t\t\t\t\"mov \" + sharedRegisters.projectionFragment + \", \" + temp + \"\\n\" +\r\n\t\t\t\t\"mov op, \" + temp + \"\\n\";\r\n\t\t} else {\r\n\t\t\tcode += \"m44 op, \" + temp + \", \" + viewMatrixReg + \"\\n\";\r\n\t\t}\r\n\r\n\t\treturn code;\r\n\t}\r\n\r\n\tpublic static _iGetFragmentCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\r\n\t{\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\tpublic draw(renderable:GL_RenderableBase, shader:ShaderBase, camera:Camera, viewProjection:Matrix3D, count:number, offset:number):void\r\n\t{\r\n\t\tvar index:number = shader.scenePositionIndex;\r\n\t\tvar pos:Vector3D = camera.scenePosition;\r\n\t\tshader.vertexConstantData[index++] = 2*pos.x;\r\n\t\tshader.vertexConstantData[index++] = 2*pos.y;\r\n\t\tshader.vertexConstantData[index++] = 2*pos.z;\r\n\t\tshader.vertexConstantData[index++] = 1;\r\n\t\tshader.vertexConstantData[index++] = shader.vertexConstantData[index++] = shader.vertexConstantData[index++] = camera.projection.far/Math.sqrt(3);\r\n\t\tshader.vertexConstantData[index] = 1;\r\n\r\n\t\tvar near:Vector3D = new Vector3D();\r\n\r\n\t\tthis._skyboxProjection.copyFrom(viewProjection);\r\n\t\tthis._skyboxProjection.copyRowTo(2, near);\r\n\r\n\t\tvar camPos:Vector3D = camera.scenePosition;\r\n\r\n\t\tvar cx:number = near.x;\r\n\t\tvar cy:number = near.y;\r\n\t\tvar cz:number = near.z;\r\n\t\tvar cw:number = -(near.x*camPos.x + near.y*camPos.y + near.z*camPos.z + Math.sqrt(cx*cx + cy*cy + cz*cz));\r\n\r\n\t\tvar signX:number = cx >= 0? 1 : -1;\r\n\t\tvar signY:number = cy >= 0? 1 : -1;\r\n\r\n\t\tvar p:Vector3D = new Vector3D(signX, signY, 1, 1);\r\n\r\n\t\tvar inverse:Matrix3D = this._skyboxProjection.clone();\r\n\t\tinverse.invert();\r\n\r\n\t\tvar q:Vector3D = inverse.transformVector(p);\r\n\r\n\t\tthis._skyboxProjection.copyRowTo(3, p);\r\n\r\n\t\tvar a:number = (q.x*p.x + q.y*p.y + q.z*p.z + q.w*p.w)/(cx*q.x + cy*q.y + cz*q.z + cw*q.w);\r\n\r\n\t\tthis._skyboxProjection.copyRowFrom(2, new Vector3D(cx*a, cy*a, cz*a, cw*a));\r\n\t\t\r\n\t\t//set constants\r\n\t\tif (shader.sceneMatrixIndex >= 0) {\r\n\t\t\trenderable.renderSceneTransform.copyRawDataTo(shader.vertexConstantData, shader.sceneMatrixIndex, true);\r\n\t\t\tthis._skyboxProjection.copyRawDataTo(shader.vertexConstantData, shader.viewMatrixIndex, true);\r\n\t\t} else {\r\n\t\t\tthis._skyboxProjection.copyRawDataTo(shader.vertexConstantData, shader.viewMatrixIndex, true);\r\n\t\t}\r\n\r\n\t\tvar context:IContextGL = this._stage.context;\r\n\t\tcontext.setProgramConstantsFromArray(ContextGLProgramType.VERTEX, shader.vertexConstantData);\r\n\t\tcontext.setProgramConstantsFromArray(ContextGLProgramType.FRAGMENT, shader.fragmentConstantData);\r\n\r\n\t\tif (this._indices)\r\n\t\t\tthis.getIndexBufferGL().draw(ContextGLDrawMode.TRIANGLES, 0, this.numIndices);\r\n\t\telse\r\n\t\t\tthis._stage.context.drawVertices(ContextGLDrawMode.TRIANGLES, offset, count || this.numVertices);\r\n\t}\r\n}",
    "import {AssetEvent}\t\t\t\t\tfrom \"awayjs-core/lib/events/AssetEvent\";\r\nimport {Matrix3DUtils}\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3DUtils\";\r\nimport {Matrix3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\r\n\r\nimport {ContextGLDrawMode}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLDrawMode\";\r\nimport {ContextGLProgramType}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLProgramType\";\r\nimport {IContextGL}\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/IContextGL\";\r\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\n\r\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\nimport {TriangleElements}\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\r\n\r\nimport {GL_ElementsBase}\t\t\t\tfrom \"../elements/GL_ElementsBase\";\r\nimport {IElementsClassGL}\t\t\t\tfrom \"../elements/IElementsClassGL\";\r\nimport {GL_RenderableBase}\t\t\tfrom \"../renderables/GL_RenderableBase\";\r\nimport {ShaderBase}\t\t\t\t\tfrom \"../shaders/ShaderBase\";\r\nimport {ShaderRegisterCache}\t\t\tfrom \"../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterData}\t\t\tfrom \"../shaders/ShaderRegisterData\";\r\nimport {ShaderRegisterElement}\t\tfrom \"../shaders/ShaderRegisterElement\";\r\n\r\n/**\r\n *\r\n * @class away.pool.GL_TriangleElements\r\n */\r\nexport class GL_TriangleElements extends GL_ElementsBase\r\n{\r\n\tpublic static elementsType:string = \"[elements Triangle]\";\r\n\r\n\tpublic get elementsType():string\r\n\t{\r\n\t\treturn GL_TriangleElements.elementsType;\r\n\t}\r\n\t\r\n\tpublic get elementsClass():IElementsClassGL\r\n\t{\r\n\t\treturn GL_TriangleElements;\r\n\t}\r\n\t\r\n\tpublic static _iIncludeDependencies(shader:ShaderBase):void\r\n\t{\r\n\t}\r\n\r\n\tpublic static _iGetVertexCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\r\n\t{\r\n\t\tvar code:string = \"\";\r\n\t\t\r\n\t\t//get the projection coordinates\r\n\t\tvar position:ShaderRegisterElement = (shader.globalPosDependencies > 0)? sharedRegisters.globalPositionVertex : sharedRegisters.animatedPosition;\r\n\r\n\t\t//reserving vertex constants for projection matrix\r\n\t\tvar viewMatrixReg:ShaderRegisterElement = registerCache.getFreeVertexConstant();\r\n\t\tregisterCache.getFreeVertexConstant();\r\n\t\tregisterCache.getFreeVertexConstant();\r\n\t\tregisterCache.getFreeVertexConstant();\r\n\t\tshader.viewMatrixIndex = viewMatrixReg.index*4;\r\n\r\n\t\tif (shader.projectionDependencies > 0) {\r\n\t\t\tsharedRegisters.projectionFragment = registerCache.getFreeVarying();\r\n\t\t\tvar temp:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\r\n\t\t\tcode += \"m44 \" + temp + \", \" + position + \", \" + viewMatrixReg + \"\\n\" +\r\n\t\t\t\t\"mov \" + sharedRegisters.projectionFragment + \", \" + temp + \"\\n\" +\r\n\t\t\t\t\"mov op, \" + temp + \"\\n\";\r\n\t\t} else {\r\n\t\t\tcode += \"m44 op, \" + position + \", \" + viewMatrixReg + \"\\n\";\r\n\t\t}\r\n\r\n\t\treturn code;\r\n\t}\r\n\r\n\tpublic static _iGetFragmentCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\r\n\t{\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\tprivate _triangleElements:TriangleElements;\r\n\r\n\tconstructor(triangleElements:TriangleElements, stage:Stage)\r\n\t{\r\n\t\tsuper(triangleElements, stage);\r\n\r\n\t\tthis._triangleElements = triangleElements;\r\n\t}\r\n\r\n\tpublic onClear(event:AssetEvent):void\r\n\t{\r\n\t\tsuper.onClear(event);\r\n\r\n\t\tthis._triangleElements = null;\r\n\t}\r\n\r\n\tpublic _setRenderState(renderable:GL_RenderableBase, shader:ShaderBase, camera:Camera, viewProjection:Matrix3D):void\r\n\t{\r\n\t\tsuper._setRenderState(renderable, shader, camera, viewProjection);\r\n\r\n\t\t//set buffers\r\n\t\t//TODO: find a better way to update a concatenated buffer when autoderiving\r\n\t\tif (shader.normalIndex >= 0 && this._triangleElements.autoDeriveNormals)\r\n\t\t\tthis._triangleElements.normals;\r\n\r\n\t\tif (shader.tangentIndex >= 0 && this._triangleElements.autoDeriveTangents)\r\n\t\t\tthis._triangleElements.tangents;\r\n\r\n\t\tif (shader.curvesIndex >= 0)\r\n\t\t\tthis.activateVertexBufferVO(shader.curvesIndex, this._triangleElements.getCustomAtributes(\"curves\"));\r\n\r\n\t\tif (shader.uvIndex >= 0)\r\n\t\t\tthis.activateVertexBufferVO(shader.uvIndex, this._triangleElements.uvs || this._triangleElements.positions);\r\n\r\n\t\tif (shader.secondaryUVIndex >= 0)\r\n\t\t\tthis.activateVertexBufferVO(shader.secondaryUVIndex, this._triangleElements.getCustomAtributes(\"secondaryUVs\") || this._triangleElements.uvs || this._triangleElements.positions);\r\n\r\n\t\tif (shader.normalIndex >= 0)\r\n\t\t\tthis.activateVertexBufferVO(shader.normalIndex, this._triangleElements.normals);\r\n\r\n\t\tif (shader.tangentIndex >= 0)\r\n\t\t\tthis.activateVertexBufferVO(shader.tangentIndex, this._triangleElements.tangents);\r\n\r\n\t\tif (shader.jointIndexIndex >= 0)\r\n\t\t\tthis.activateVertexBufferVO(shader.jointIndexIndex, this._triangleElements.jointIndices);\r\n\r\n\t\tif (shader.jointWeightIndex >= 0)\r\n\t\t\tthis.activateVertexBufferVO(shader.jointIndexIndex, this._triangleElements.jointWeights);\r\n\r\n\t\tthis.activateVertexBufferVO(0, this._triangleElements.positions);\r\n\t}\r\n\r\n\tpublic draw(renderable:GL_RenderableBase, shader:ShaderBase, camera:Camera, viewProjection:Matrix3D, count:number, offset:number):void\r\n\t{\r\n\t\t//set constants\r\n\t\tif (shader.sceneMatrixIndex >= 0) {\r\n\t\t\trenderable.renderSceneTransform.copyRawDataTo(shader.vertexConstantData, shader.sceneMatrixIndex, true);\r\n\t\t\tviewProjection.copyRawDataTo(shader.vertexConstantData, shader.viewMatrixIndex, true);\r\n\t\t} else {\r\n\t\t\tvar matrix3D:Matrix3D = Matrix3DUtils.CALCULATION_MATRIX;\r\n\r\n\t\t\tmatrix3D.copyFrom(renderable.renderSceneTransform);\r\n\t\t\tmatrix3D.append(viewProjection);\r\n\r\n\t\t\tmatrix3D.copyRawDataTo(shader.vertexConstantData, shader.viewMatrixIndex, true);\r\n\t\t}\r\n\r\n\t\tvar context:IContextGL = this._stage.context;\r\n\t\tcontext.setProgramConstantsFromArray(ContextGLProgramType.VERTEX, shader.vertexConstantData);\r\n\t\tcontext.setProgramConstantsFromArray(ContextGLProgramType.FRAGMENT, shader.fragmentConstantData);\r\n\r\n\t\tif (this._indices)\r\n\t\t\tthis.getIndexBufferGL().draw(ContextGLDrawMode.TRIANGLES, 0, this.numIndices);\r\n\t\telse\r\n\t\t\tthis._stage.context.drawVertices(ContextGLDrawMode.TRIANGLES, offset, count || this.numVertices);\r\n\t}\r\n\r\n\t/**\r\n\t * //TODO\r\n\t *\r\n\t * @param pool\r\n\t * @param renderable\r\n\t * @param level\r\n\t * @param indexOffset\r\n\t * @returns {away.pool.GL_GraphicRenderable}\r\n\t * @protected\r\n\t */\r\n\tpublic _pGetOverflowElements():GL_ElementsBase\r\n\t{\r\n\t\treturn new GL_TriangleElements(this._triangleElements, this._stage);\r\n\t}\r\n}",
    "export {GL_ElementsBase}\t\t\t\t\tfrom \"./elements/GL_ElementsBase\";\r\nexport {GL_LineElements}\t\t\t\t\tfrom \"./elements/GL_LineElements\";\r\nexport {GL_SkyboxElements}\t\t\t\tfrom \"./elements/GL_SkyboxElements\";\r\nexport {GL_TriangleElements}\t\t\t\tfrom \"./elements/GL_TriangleElements\";\r\nexport {IElementsClassGL}\t\t\t\tfrom \"./elements/IElementsClassGL\";",
    "import {ErrorBase}\t\t\t\t\tfrom \"awayjs-core/lib/errors/ErrorBase\";\r\n\r\nexport class AnimationSetError extends ErrorBase\r\n{\r\n\tconstructor(message:string)\r\n\t{\r\n\t\tsuper(message);\r\n\t}\r\n}",
    "export {AnimationSetError}\t\t\t\tfrom \"./errors/AnimationSetError\";",
    "import {AnimationNodeBase}\t\t\t\tfrom \"awayjs-display/lib/animators/nodes/AnimationNodeBase\";\r\n\r\nimport {EventBase}\t\t\t\t\t\tfrom \"awayjs-core/lib/events/EventBase\";\r\n\r\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../animators/AnimatorBase\";\r\nimport {IAnimationState}\t\t\t\t\tfrom \"../animators/states/IAnimationState\";\r\n\r\n/**\r\n * Dispatched to notify changes in an animation state's state.\r\n */\r\nexport class AnimationStateEvent extends EventBase\r\n{\r\n\t/**\r\n\t * Dispatched when a non-looping clip node inside an animation state reaches the end of its timeline.\r\n\t */\r\n\tpublic static PLAYBACK_COMPLETE:string = \"playbackComplete\";\r\n\r\n\tpublic static TRANSITION_COMPLETE:string = \"transitionComplete\";\r\n\r\n\tprivate _animator:AnimatorBase;\r\n\tprivate _animationState:IAnimationState;\r\n\tprivate _animationNode:AnimationNodeBase;\r\n\r\n\t/**\r\n\t * Create a new <code>AnimatonStateEvent</code>\r\n\t *\r\n\t * @param type The event type.\r\n\t * @param animator The animation state object that is the subject of this event.\r\n\t * @param animationNode The animation node inside the animation state from which the event originated.\r\n\t */\r\n\tconstructor(type:string, animator:AnimatorBase, animationState:IAnimationState, animationNode:AnimationNodeBase)\r\n\t{\r\n\t\tsuper(type);\r\n\r\n\t\tthis._animator = animator;\r\n\t\tthis._animationState = animationState;\r\n\t\tthis._animationNode = animationNode;\r\n\t}\r\n\r\n\t/**\r\n\t * The animator object that is the subject of this event.\r\n\t */\r\n\tpublic get animator():AnimatorBase\r\n\t{\r\n\t\treturn this._animator;\r\n\t}\r\n\r\n\t/**\r\n\t * The animation state object that is the subject of this event.\r\n\t */\r\n\tpublic get animationState():IAnimationState\r\n\t{\r\n\t\treturn this._animationState;\r\n\t}\r\n\r\n\t/**\r\n\t * The animation node inside the animation state from which the event originated.\r\n\t */\r\n\tpublic get animationNode():AnimationNodeBase\r\n\t{\r\n\t\treturn this._animationNode;\r\n\t}\r\n\r\n\t/**\r\n\t * Clones the event.\r\n\t *\r\n\t * @return An exact duplicate of the current object.\r\n\t */\r\n\tpublic clone():AnimationStateEvent\r\n\t{\r\n\t\treturn new AnimationStateEvent(this.type, this._animator, this._animationState, this._animationNode);\r\n\t}\r\n}",
    "import {EventBase}\t\t\t\t\tfrom \"awayjs-core/lib/events/EventBase\";\r\n\r\nimport {AnimatorBase}\t\t\t\t\tfrom \"../animators/AnimatorBase\";\r\n\r\n/**\r\n * Dispatched to notify changes in an animator's state.\r\n */\r\nexport class AnimatorEvent extends EventBase\r\n{\r\n\t/**\r\n\t * Defines the value of the type property of a start event object.\r\n\t */\r\n\tpublic static START:string = \"animatorStart\";\r\n\r\n\t/**\r\n\t * Defines the value of the type property of a stop event object.\r\n\t */\r\n\tpublic static STOP:string = \"animatorStop\";\r\n\r\n\t/**\r\n\t * Defines the value of the type property of a cycle complete event object.\r\n\t */\r\n\tpublic static CYCLE_COMPLETE:string = \"animatorCycleComplete\";\r\n\r\n\tprivate _animator:AnimatorBase;\r\n\r\n\t/**\r\n\t * Create a new <code>AnimatorEvent</code> object.\r\n\t *\r\n\t * @param type The event type.\r\n\t * @param animator The animator object that is the subject of this event.\r\n\t */\r\n\tconstructor(type:string, animator:AnimatorBase)\r\n\t{\r\n\t\tsuper(type);\r\n\t\tthis._animator = animator;\r\n\t}\r\n\r\n\tpublic get animator():AnimatorBase\r\n\t{\r\n\t\treturn this._animator;\r\n\t}\r\n\r\n\t/**\r\n\t * Clones the event.\r\n\t *\r\n\t * @return An exact duplicate of the current event object.\r\n\t */\r\n\tpublic clone():AnimatorEvent\r\n\t{\r\n\t\treturn new AnimatorEvent(this.type, this._animator);\r\n\t}\r\n}",
    "import {EventBase}\t\t\t\tfrom \"awayjs-core/lib/events/EventBase\";\r\n\r\nimport {IPass}\t\t\t\t\tfrom \"../surfaces/passes/IPass\";\r\n\r\nexport class PassEvent extends EventBase\r\n{\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic static INVALIDATE:string = \"invalidatePass\";\r\n\r\n\tprivate _pass:IPass;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic get pass():IPass\r\n\t{\r\n\t\treturn this._pass;\r\n\t}\r\n\r\n\tconstructor(type:string, pass:IPass)\r\n\t{\r\n\t\tsuper(type);\r\n\r\n\t\tthis._pass = pass;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic clone():PassEvent\r\n\t{\r\n\t\treturn new PassEvent(this.type, this._pass);\r\n\t}\r\n}",
    "import {EventBase}\t\t\t\tfrom \"awayjs-core/lib/events/EventBase\";\r\n\r\nimport {RTTBufferManager}\t\t\tfrom \"../managers/RTTBufferManager\";\r\n\r\nexport class RTTEvent extends EventBase\r\n{\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic static RESIZE:string = \"rttManagerResize\";\r\n\r\n\tprivate _rttManager:RTTBufferManager;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic get rttManager():RTTBufferManager\r\n\t{\r\n\t\treturn this._rttManager;\r\n\t}\r\n\r\n\tconstructor(type:string, rttManager:RTTBufferManager)\r\n\t{\r\n\t\tsuper(type);\r\n\r\n\t\tthis._rttManager = rttManager;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic clone():RTTEvent\r\n\t{\r\n\t\treturn new RTTEvent(this.type, this._rttManager);\r\n\t}\r\n}",
    "import {EventBase}\t\t\t\t\tfrom \"awayjs-core/lib/events/EventBase\";\r\n\r\nexport class ShadingMethodEvent extends EventBase\r\n{\r\n\tpublic static SHADER_INVALIDATED:string = \"ShaderInvalidated\";\r\n\r\n\tconstructor(type:string)\r\n\t{\r\n\t\tsuper(type);\r\n\t}\r\n}",
    "export {AnimationStateEvent}\t\t\t\tfrom \"./events/AnimationStateEvent\";\r\nexport {AnimatorEvent}\t\t\t\t\tfrom \"./events/AnimatorEvent\";\r\nexport {PassEvent}\t\t\t\t\t\tfrom \"./events/PassEvent\";\r\nexport {RTTEvent}\t\t\t\t\t\tfrom \"./events/RTTEvent\";\r\nexport {ShadingMethodEvent}\t\t\t\tfrom \"./events/ShadingMethodEvent\";",
    "import {Image2D}\t\t\t\t\t\tfrom \"awayjs-core/lib/image/Image2D\";\r\n\r\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\n\r\nimport {Filter3DHBlurTask}\t\t\tfrom \"../filters/tasks/Filter3DHBlurTask\";\r\nimport {Filter3DVBlurTask}\t\t\tfrom \"../filters/tasks/Filter3DVBlurTask\";\r\nimport {Filter3DBase}\t\t\t\t\tfrom \"../filters/Filter3DBase\";\r\n\r\nexport class BlurFilter3D extends Filter3DBase\r\n{\r\n\tprivate _hBlurTask:Filter3DHBlurTask;\r\n\tprivate _vBlurTask:Filter3DVBlurTask;\r\n\t\r\n\t/**\r\n\t * Creates a new BlurFilter3D object\r\n\t * @param blurX The amount of horizontal blur to apply\r\n\t * @param blurY The amount of vertical blur to apply\r\n\t * @param stepSize The distance between samples. Set to -1 to autodetect with acceptable quality.\r\n\t */\r\n\tconstructor(blurX:number = 3, blurY:number = 3, stepSize:number = -1)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tthis._hBlurTask = new Filter3DHBlurTask(blurX, stepSize);\r\n\t\tthis._vBlurTask = new Filter3DVBlurTask(blurY, stepSize);\r\n\r\n\t\tthis.addTask(this._hBlurTask);\r\n\t\tthis.addTask(this._vBlurTask);\r\n\t}\r\n\t\r\n\tpublic get blurX():number\r\n\t{\r\n\t\treturn this._hBlurTask.amount;\r\n\t}\r\n\t\r\n\tpublic set blurX(value:number)\r\n\t{\r\n\t\tthis._hBlurTask.amount = value;\r\n\t}\r\n\t\r\n\tpublic get blurY():number\r\n\t{\r\n\t\treturn this._vBlurTask.amount;\r\n\t}\r\n\t\r\n\tpublic set blurY(value:number)\r\n\t{\r\n\t\tthis._vBlurTask.amount = value;\r\n\t}\r\n\t\r\n\t/**\r\n\t * The distance between two blur samples. Set to -1 to autodetect with acceptable quality (default value).\r\n\t * Higher values provide better performance at the cost of reduces quality.\r\n\t */\r\n\tpublic get stepSize():number\r\n\t{\r\n\t\treturn this._hBlurTask.stepSize;\r\n\t}\r\n\t\r\n\tpublic set stepSize(value:number)\r\n\t{\r\n\t\tthis._hBlurTask.stepSize = value;\r\n\t\tthis._vBlurTask.stepSize = value;\r\n\t}\r\n\t\r\n\tpublic setRenderTargets(mainTarget:Image2D, stage:Stage):void\r\n\t{\r\n\t\tthis._hBlurTask.target = this._vBlurTask.getMainInputTexture(stage);\r\n\t\tsuper.setRenderTargets(mainTarget, stage);\r\n\t}\r\n}",
    "import {Image2D}\t\t\t\t\t\tfrom \"awayjs-core/lib/image/Image2D\";\r\n\r\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\n\r\nimport {Filter3DCompositeTask}\t\tfrom \"../filters/tasks/Filter3DCompositeTask\";\r\nimport {Filter3DBase}\t\t\t\t\tfrom \"../filters/Filter3DBase\";\r\n\r\nexport class CompositeFilter3D extends Filter3DBase\r\n{\r\n\tprivate _compositeTask:Filter3DCompositeTask;\r\n\t\r\n\t/**\r\n\t * Creates a new CompositeFilter3D object\r\n\t * @param blurX The amount of horizontal blur to apply\r\n\t * @param blurY The amount of vertical blur to apply\r\n\t * @param stepSize The distance between samples. Set to -1 to autodetect with acceptable quality.\r\n\t */\r\n\tconstructor(blendMode:string, exposure:number = 1)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tthis._compositeTask = new Filter3DCompositeTask(blendMode, exposure);\r\n\r\n\t\tthis.addTask(this._compositeTask);\r\n\t}\r\n\t\r\n\tpublic get exposure():number\r\n\t{\r\n\t\treturn this._compositeTask.exposure;\r\n\t}\r\n\t\r\n\tpublic set exposure(value:number)\r\n\t{\r\n\t\tthis._compositeTask.exposure = value;\r\n\t}\r\n\r\n\r\n\tpublic get overlayTexture():Image2D\r\n\t{\r\n\t\treturn this._compositeTask.overlayTexture;\r\n\t}\r\n\r\n\tpublic set overlayTexture(value:Image2D)\r\n\t{\r\n\t\tthis._compositeTask.overlayTexture = value;\r\n\t}\r\n}",
    "import {Image2D}\t\t\t\t\t\tfrom \"awayjs-core/lib/image/Image2D\";\r\n\r\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\n\r\nimport {Filter3DFXAATask}\t\t\t\tfrom \"../filters/tasks/Filter3DFXAATask\";\r\nimport {Filter3DBase}\t\t\t\t\tfrom \"../filters/Filter3DBase\";\r\n\r\nexport class FXAAFilter3D extends Filter3DBase\r\n{\r\n\tprivate _fxaaTask:Filter3DFXAATask;\r\n\t\r\n\t/**\r\n\t * Creates a new FXAAFilter3D object\r\n\t * @param amount\r\n\t * @param stepSize The distance between samples. Set to -1 to autodetect with acceptable quality.\r\n\t */\r\n\tconstructor(amount:number, stepSize:number = -1)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tthis._fxaaTask = new Filter3DFXAATask(amount, stepSize);\r\n\r\n\t\tthis.addTask(this._fxaaTask);\r\n\t}\r\n\t\r\n\tpublic get amount():number\r\n\t{\r\n\t\treturn this._fxaaTask.amount;\r\n\t}\r\n\t\r\n\tpublic set amount(value:number)\r\n\t{\r\n\t\tthis._fxaaTask.amount = value;\r\n\t}\r\n\r\n\r\n\tpublic get stepSize():number\r\n\t{\r\n\t\treturn this._fxaaTask.stepSize;\r\n\t}\r\n\r\n\tpublic set stepSize(value:number)\r\n\t{\r\n\t\tthis._fxaaTask.stepSize = value;\r\n\t}\r\n}",
    "import {Image2D}\t\t\t\t\t\tfrom \"awayjs-core/lib/image/Image2D\";\r\n\r\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\n\r\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\n\r\nimport {Filter3DTaskBase}\t\t\t\tfrom \"../filters/tasks/Filter3DTaskBase\";\r\nimport {RTTBufferManager}\t\t\t\tfrom \"../managers/RTTBufferManager\";\r\n\r\nexport class Filter3DBase\r\n{\r\n\tprivate _tasks:Array<Filter3DTaskBase>;\r\n\tprivate _requireDepthRender:boolean;\r\n\tprivate _rttManager:RTTBufferManager;\r\n\tprivate _textureWidth:number;\r\n\tprivate _textureHeight:number;\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis._tasks = new Array<Filter3DTaskBase>();\r\n\t}\r\n\r\n\tpublic get requireDepthRender():boolean\r\n\t{\r\n\t\treturn this._requireDepthRender;\r\n\t}\r\n\r\n\tpublic addTask(filter:Filter3DTaskBase):void\r\n\t{\r\n\t\tthis._tasks.push(filter);\r\n\r\n\t\tif (this._requireDepthRender == null)\r\n\t\t\tthis._requireDepthRender = filter.requireDepthRender;\r\n\t}\r\n\r\n\tpublic get tasks():Filter3DTaskBase[]\r\n\t{\r\n\t\treturn this._tasks;\r\n\t}\r\n\r\n\tpublic getMainInputTexture(stage:Stage):Image2D\r\n\t{\r\n\t\treturn this._tasks[0].getMainInputTexture(stage);\r\n\t}\r\n\r\n\tpublic get textureWidth():number\r\n\t{\r\n\t\treturn this._textureWidth;\r\n\t}\r\n\r\n\tpublic set textureWidth(value:number)\r\n\t{\r\n\t\tthis._textureWidth = value;\r\n\r\n\t\tfor (var i:number = 0; i < this._tasks.length; ++i)\r\n\t\t\tthis._tasks[i].textureWidth = value;\r\n\t}\r\n\r\n\r\n\tpublic get rttManager():RTTBufferManager\r\n\t{\r\n\t\treturn this._rttManager;\r\n\t}\r\n\r\n\tpublic set rttManager(value:RTTBufferManager)\r\n\t{\r\n\t\tthis._rttManager = value;\r\n\r\n\t\tfor (var i:number = 0; i < this._tasks.length; ++i)\r\n\t\t\tthis._tasks[i].rttManager = value;\r\n\t}\r\n\r\n\tpublic get textureHeight():number\r\n\t{\r\n\t\treturn this._textureHeight;\r\n\t}\r\n\r\n\tpublic set textureHeight(value:number)\r\n\t{\r\n\t\tthis._textureHeight = value;\r\n\r\n\t\tfor (var i:number = 0; i < this._tasks.length; ++i)\r\n\t\t\tthis._tasks[i].textureHeight = value;\r\n\t}\r\n\r\n\t// link up the filters correctly with the next filter\r\n\tpublic setRenderTargets(mainTarget:Image2D, stage:Stage):void\r\n\t{\r\n\t\tthis._tasks[this._tasks.length - 1].target = mainTarget;\r\n\t}\r\n\r\n\tpublic dispose():void\r\n\t{\r\n\t\tfor (var i:number = 0; i < this._tasks.length; ++i)\r\n\t\t\tthis._tasks[i].dispose();\r\n\t}\r\n\r\n\tpublic update(stage:Stage, camera:Camera):void\r\n\t{\r\n\r\n\t}\r\n}",
    "import {Image2D}\t\t\t\t\t\tfrom \"awayjs-core/lib/image/Image2D\";\r\n\r\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\n\r\nimport {ContextGLProgramType}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLProgramType\";\r\nimport {IContextGL}\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/IContextGL\";\r\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\nimport {GL_ImageBase}\t\t\t\t\tfrom \"awayjs-stagegl/lib/image/GL_ImageBase\";\r\n\r\nimport {Filter3DTaskBase}\t\t\t\tfrom \"../../filters/tasks/Filter3DTaskBase\";\r\nimport {ShaderRegisterElement}\t\tfrom \"../../shaders/ShaderRegisterElement\";\r\n\r\nexport class Filter3DCompositeTask extends Filter3DTaskBase\r\n{\r\n\tprivate _data:Float32Array;\r\n\tprivate _overlayTexture:Image2D;\r\n\tprivate _overlayWidth:number;\r\n\tprivate _overlayHeight:number;\r\n\tprivate _blendMode:string;\r\n\t\r\n\tprivate _overlayTextureIndex:number;\r\n\tprivate _exposureIndex:number;\r\n\tprivate _scalingIndex:number;\r\n\t\r\n\tconstructor(blendMode:string, exposure:number = 1)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._data = new Float32Array([exposure, 0.5, 2.0, -1, 0.0, 0.0, 0.0, 0.0 ]);\r\n\t\tthis._blendMode = blendMode;\r\n\t}\r\n\t\r\n\tpublic get overlayTexture():Image2D\r\n\t{\r\n\t\treturn this._overlayTexture;\r\n\t}\r\n\t\r\n\tpublic set overlayTexture(value:Image2D)\r\n\t{\r\n\t\tthis._overlayTexture = value;\r\n\t\tthis._overlayWidth = this._overlayTexture.width;\r\n\t\tthis._overlayHeight = this._overlayTexture.height;\r\n\t}\r\n\t\r\n\tpublic get exposure():number\r\n\t{\r\n\t\treturn this._data[0];\r\n\t}\r\n\t\r\n\tpublic set exposure(value:number)\r\n\t{\r\n\t\tthis._data[0] = value;\r\n\t}\r\n\t\r\n\tpublic getFragmentCode():string\r\n\t{\r\n\t\tvar temp1:ShaderRegisterElement = this._registerCache.getFreeFragmentVectorTemp();\r\n\t\tthis._registerCache.addFragmentTempUsages(temp1, 1);\r\n\t\tvar temp2:ShaderRegisterElement = this._registerCache.getFreeFragmentVectorTemp();\r\n\t\tthis._registerCache.addFragmentTempUsages(temp2, 1);\r\n\t\tvar temp3:ShaderRegisterElement = this._registerCache.getFreeFragmentVectorTemp();\r\n\t\tthis._registerCache.addFragmentTempUsages(temp3, 1);\r\n\t\tvar temp4:ShaderRegisterElement = this._registerCache.getFreeFragmentVectorTemp();\r\n\t\tthis._registerCache.addFragmentTempUsages(temp4, 1);\r\n\t\t\r\n\t\t\r\n\t\tvar inputTexture:ShaderRegisterElement = this._registerCache.getFreeTextureReg();\r\n\t\tthis._inputTextureIndex = inputTexture.index;\r\n\t\t\r\n\t\tvar overlayTexture:ShaderRegisterElement = this._registerCache.getFreeTextureReg();\r\n\t\tthis._overlayTextureIndex = overlayTexture.index;\r\n\t\t\r\n\t\tvar exposure:ShaderRegisterElement = this._registerCache.getFreeFragmentConstant();\r\n\t\tthis._exposureIndex = exposure.index*4;\r\n\r\n\t\tvar scaling:ShaderRegisterElement = this._registerCache.getFreeFragmentConstant();\r\n\t\tthis._scalingIndex = scaling.index*4;\r\n\t\t\r\n\t\tvar code:string;\r\n\t\t\r\n\t\tcode = \"tex \" + temp1 + \", \" + this._uvVarying + \", \" + inputTexture + \" <2d,linear,clamp>\\n\" +\r\n\t\t\t\"mul \" + temp2 + \", \" + this._uvVarying + \", \" + scaling + \".zw\\n\" +\r\n\t\t\t\"add \" + temp2 + \", \" + temp2 + \", \" + scaling + \".xy\\n\" +\r\n\t\t\t\"tex \" + temp2 + \", \" + temp2 + \", \" + overlayTexture + \" <2d,linear,clamp>\\n\" +\r\n\t\t\t\"mul \" + temp2 + \", \" + temp2 + \", \" + exposure + \".xxx\\n\" +\r\n\t\t\t\"add \" + temp2 + \", \" + temp2 + \", \" + exposure + \".xxx\\n\";\r\n\t\tswitch (this._blendMode) {\r\n\t\t\tcase \"multiply\":\r\n\t\t\t\tcode += \"mul oc, \" + temp1 + \", \" + temp2 + \"\\n\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"add\":\r\n\t\t\t\tcode += \"add oc, \" + temp1 + \", \" + temp2 + \"\\n\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"subtract\":\r\n\t\t\t\tcode += \"sub oc, \" + temp1 + \", \" + temp2 + \"\\n\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"overlay\":\r\n\t\t\t\tcode += \"sge \" + temp3 + \", \" + temp1 + \", \" + exposure + \".yyy\\n\"; // t2 = (blend >= 0.5)? 1 : 0\r\n\t\t\t\tcode += \"sub \" + temp1 + \", \" + temp3 + \", \" + temp1 + \"\\n\"; // base = (1 : 0 - base)\r\n\t\t\t\tcode += \"sub \" + temp2 + \", \" + temp2 + \", \" + temp3 + \"\\n\"; // blend = (blend - 1 : 0)\r\n\t\t\t\tcode += \"mul \" + temp2 + \", \" + temp2 + \", \" + temp1 + \"\\n\"; // blend = blend * base\r\n\t\t\t\tcode += \"sub \" + temp4 + \", \" + temp3 + \", \" + exposure + \".yyy\\n\"; // t3 = (blend >= 0.5)? 0.5 : -0.5\r\n\t\t\t\tcode += \"div \" + temp2 + \", \" + temp2 + \", \" + temp4 + \"\\n\"; // blend = blend / ( 0.5 : -0.5)\r\n\t\t\t\tcode += \"add oc, \" + temp2 + \", \" + temp3 + \"\\n\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"normal\":\r\n\t\t\t\t// for debugging purposes\r\n\t\t\t\tcode += \"mov oc, \" + temp1 + \"\\n\";\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Unknown blend mode\");\r\n\t\t}\r\n\t\treturn code;\r\n\t}\r\n\t\r\n\tpublic activate(stage:Stage, camera3D:Camera, depthTexture:Image2D):void\r\n\t{\r\n\t\tthis._data[4] = -0.5*(this._scaledTextureWidth - this._overlayWidth)/this._overlayWidth;\r\n\t\tthis._data[5] = -0.5*(this._scaledTextureHeight - this._overlayHeight)/this._overlayHeight;\r\n\r\n\t\tthis._data[6] = this._scaledTextureWidth/this._overlayWidth;\r\n\t\tthis._data[7] = this._scaledTextureHeight/this._overlayHeight;\r\n\r\n\t\tvar context:IContextGL = stage.context;\r\n\t\tcontext.setProgramConstantsFromArray(ContextGLProgramType.FRAGMENT, this._data);\r\n\t\t\r\n\t\t(<GL_ImageBase> stage.getAbstraction(this._overlayTexture)).activate(this._overlayTextureIndex, false);\r\n\t}\r\n\t\r\n\tpublic deactivate(stage:Stage):void\r\n\t{\r\n\t\tstage.context.setTextureAt(1, null);\r\n\t}\r\n}",
    "import {Image2D}\t\t\t\t\t\tfrom \"awayjs-core/lib/image/Image2D\";\r\n\r\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\n\r\nimport {ContextGLProgramType}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLProgramType\";\r\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\n\r\nimport {Filter3DTaskBase}\t\t\t\tfrom \"../../filters/tasks/Filter3DTaskBase\";\r\n\r\nexport class Filter3DFXAATask extends Filter3DTaskBase\r\n{\r\n\tprivate _data:Float32Array;\r\n\t//TODO - remove blur variables and create setters/getters for FXAA\r\n\tprivate static MAX_AUTO_SAMPLES:number = 15;\r\n\tprivate _amount:number;\r\n\tprivate _stepSize:number = 1;\r\n\tprivate _realStepSize:number;\r\n\t\r\n\t/**\r\n\t *\r\n\t * @param amount\r\n\t * @param stepSize The distance between samples. Set to -1 to autodetect with acceptable quality.\r\n\t */\r\n\tconstructor(amount:number = 1, stepSize:number = -1)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tthis._data =  new Float32Array(20);\r\n\t\t//luma\r\n\t\tthis._data.set([0.299, 0.587, 0.114, 0],0);//0.212, 0.716, 0.072\r\n\t\t//helpers\r\n\t\tthis._data.set([0.25, 0.5, 0.75, 1], 4);\r\n\t\t//settings (screen x, screen y, ...)\r\n\t\tthis._data.set([1/1024, 1/1024, -1, 1], 8);\r\n\t\t//deltas\r\n\t\tthis._data.set([1/128, 1/8, 8, 0], 12);\r\n\t\t//deltas\r\n\t\tthis._data.set([1.0/3.0 - 0.5, 2.0/3.0 - 0.5, 0.0/3.0 - 0.5, 3.0/3.0 - 0.5], 16);\r\n\r\n\r\n\t\tthis.amount = amount;\r\n\t\tthis.stepSize = stepSize;\r\n\t}\r\n\r\n\tpublic get amount():number\r\n\t{\r\n\t\treturn this._amount;\r\n\t}\r\n\r\n\tpublic set amount(value:number)\r\n\t{\r\n\t\tif (this._amount == value)\r\n\t\t\treturn;\r\n\r\n\t\tthis._amount = value;\r\n\r\n\t\tthis.invalidateProgram();\r\n\t\tthis.updateBlurData();\r\n\t}\r\n\r\n\tpublic get stepSize():number\r\n\t{\r\n\t\treturn this._stepSize;\r\n\t}\r\n\r\n\tpublic set stepSize(value:number)\r\n\t{\r\n\t\tif (this._stepSize == value)\r\n\t\t\treturn;\r\n\t\tthis._stepSize = value;\r\n\t\tthis.calculateStepSize();\r\n\t\tthis.invalidateProgram();\r\n\t\tthis.updateBlurData();\r\n\t}\r\n\r\n\tpublic getFragmentCode():string\r\n\t{\r\n\t\tvar lum:string = \"fc0\";\t\t//\t0.299, 0.587, 0.114\r\n\t\tvar _0:string = \"fc0.w\";\r\n\r\n\t\tvar _025:string = \"fc1.x\";\r\n\t\tvar _05:string = \"fc1.y\";\r\n\t\tvar _075:string = \"fc1.z\";\r\n\t\tvar _1:string = \"fc1.w\";\r\n\r\n\t\tvar pix:string = \"fc2.xy\";\r\n\t\tvar dx:string = \"fc2.x\"; // 1/1024\r\n\t\tvar dy:string = \"fc2.y\"; // 1/1024\r\n\r\n\t\tvar mOne:string = \"fc2.z\"; // -1.0\r\n\t\tvar mul:string = \"fc2.w\"; // 1.0  -- one for now\r\n\r\n\t\tvar fxaaReduceMin :string = \"fc3.x\";\t//1/128\r\n\t\tvar fxaaReduceMul :string = \"fc3.y\";\t//1/8\r\n\t\tvar fxaaSpanMax :string = \"fc3.z\";\t\t//8\r\n\r\n\t\tvar delta1:string = \"fc4.x\";\t//1.0/3.0 - 0.5\r\n\t\tvar delta2:string = \"fc4.y\";\t//2.0/3.0 - 0.5\r\n\t\tvar delta3:string = \"fc4.z\";\t//0.0/3.0 - 0.5\r\n\t\tvar delta4:string = \"fc4.w\";\t//3.0/3.0 - 0.5\r\n\r\n\t\tvar uv_in:string = \"v0\";\r\n\r\n\t\tvar uv:string = \"ft0.xy\";\r\n\t\tvar uvx:string = \"ft0.x\";\r\n\t\tvar uvy:string = \"ft0.y\";\r\n\r\n\t\tvar TL:string = \"ft2.x\";\r\n\t\tvar TR:string = \"ft2.y\";\r\n\t\tvar BL:string = \"ft2.z\";\r\n\t\tvar BR:string = \"ft2.w\";\r\n\t\tvar M:string = \"ft3.x\";\r\n\r\n\t\tvar tempf1:string = \"ft3.y\";\r\n\t\tvar tempf2:string = \"ft3.z\";\r\n\t\tvar tempf3:string = \"ft3.w\";\r\n\r\n\t\tvar tex:string = \"ft1\";\r\n\r\n\t\tvar dir:string = \"ft4\";\r\n\t\tvar dirx:string = \"ft4.x\";\r\n\t\tvar diry:string = \"ft4.y\";\r\n\t\tvar dirxy:string = \"ft4.xy\";\r\n\r\n\t\tvar dirReduce:string = \"ft5.x\";\r\n\t\tvar inverseDirAdjustment:string = \"ft5.y\";\r\n\r\n\t\tvar result1:string = \"ft6\";\r\n\t\tvar result2:string = \"ft7\";\r\n\r\n\t\tvar lumaMin:string = \"ft5.x\";\r\n\t\tvar lumaMax:string = \"ft5.y\";\r\n\r\n\t\tvar sample:string = \"fs0\";\r\n\r\n\r\n\t\tvar temp:string = tex;\r\n\t\tvar tempxy:string = temp + \".xy\";\r\n\t\t\r\n\t\tvar code:Array<string> =  new Array<string>();\r\n\r\n\t\t//lumas\r\n\t\tcode.push(\"tex\", tex, uv_in, sample, \"<2d wrap linear>\", \"\\n\");\r\n\t\tcode.push(\"dp3\", M, tex, lum, \"\\n\");\r\n\t\tcode.push(\"mov\", uv, uv_in, \"\\n\");\r\n\t\tcode.push(\"sub\", uv, uv, pix, \"\\n\");\r\n\t\tcode.push(\"tex\", tex, uv, sample, \"<2d wrap linear>\", \"\\n\");\r\n\t\tcode.push(\"dp3\", TL, tex, lum, \"\\n\");\r\n\t\tcode.push(\"mov\", uv, uv_in, \"\\n\");\r\n\t\tcode.push(\"add\", uv, uv, pix, \"\\n\");\r\n\t\tcode.push(\"tex\", tex, uv, sample, \"<2d wrap linear>\", \"\\n\");\r\n\t\tcode.push(\"dp3\",  BR, tex, lum, \"\\n\");\r\n\t\tcode.push(\"mov\", uv, uv_in, \"\\n\");\r\n\t\tcode.push(\"sub\", uvy, uvy, dy, \"\\n\");\r\n\t\tcode.push(\"add\", uvx, uvx, dx, \"\\n\");\r\n\t\tcode.push(\"tex\", tex, uv, sample, \"<2d wrap linear>\", \"\\n\");\r\n\t\tcode.push(\"dp3\", TR, tex, lum, \"\\n\");\r\n\t\tcode.push(\"mov\", uv, uv_in, \"\\n\");\r\n\t\tcode.push(\"add\", uvy, uvy, dy, \"\\n\");\r\n\t\tcode.push(\"sub\", uvx, uvx, dx, \"\\n\");\r\n\t\tcode.push(\"tex\", tex, uv, sample, \"<2d wrap linear>\", \"\\n\");\r\n\t\tcode.push(\"dp3\", BL, tex, lum, \"\\n\");\r\n\r\n\t\t//dir\r\n\t\tcode.push(\"add\", tempf1, TL, TR, \"\\n\");\r\n\t\tcode.push(\"add\", tempf2, BL, BR, \"\\n\");\r\n\t\tcode.push(\"sub\", dirx, tempf1, tempf2, \"\\n\");\r\n\t\tcode.push(\"neg\", dirx, dirx, \"\\n\");\r\n\r\n\t\tcode.push(\"add\", tempf1, TL, BL, \"\\n\");\r\n\t\tcode.push(\"add\", tempf2, TR, BR, \"\\n\");\r\n\t\tcode.push(\"sub\", diry, tempf1, tempf2, \"\\n\");\r\n\r\n\t\tcode.push(\"add\", tempf1, tempf1, tempf2, \"\\n\");\r\n\t\tcode.push(\"mul\", tempf1, tempf1, fxaaReduceMul, \"\\n\");\r\n\t\tcode.push(\"mul\", tempf1, tempf1, _025, \"\\n\");\r\n\t\tcode.push(\"max\", dirReduce, tempf1, fxaaReduceMin, \"\\n\");\r\n\r\n\t\tcode.push(\"abs\", tempf1, dirx, \"\\n\");\r\n\t\tcode.push(\"abs\", tempf2, diry, \"\\n\");\r\n\t\tcode.push(\"min\", tempf1, tempf1, tempf2, \"\\n\");\r\n\t\tcode.push(\"add\", tempf1, tempf1, dirReduce, \"\\n\");\r\n\t\tcode.push(\"rcp\", inverseDirAdjustment, tempf1, \"\\n\");\r\n\r\n\t\tcode.push(\"mul\", tempf1, dirx, inverseDirAdjustment, \"\\n\");\r\n\t\tcode.push(\"mov\", tempf2, fxaaSpanMax, \"\\n\");\r\n\t\tcode.push(\"neg\", tempf2, tempf2, \"\\n\");\r\n\t\tcode.push(\"max\", tempf1, tempf1, tempf2, \"\\n\");\r\n\t\tcode.push(\"min\", tempf1, fxaaSpanMax, tempf1, \"\\n\");\r\n\t\tcode.push(\"mul\", dirx, tempf1, dx, \"\\n\");\r\n\r\n\t\tcode.push(\"mul\", tempf1, diry, inverseDirAdjustment, \"\\n\");\r\n\t\tcode.push(\"mov\", tempf2, fxaaSpanMax, \"\\n\");\r\n\t\tcode.push(\"neg\", tempf2, tempf2, \"\\n\");\r\n\t\tcode.push(\"max\", tempf1, tempf1, tempf2, \"\\n\");\r\n\t\tcode.push(\"min\", tempf1, fxaaSpanMax, tempf1, \"\\n\");\r\n\t\tcode.push(\"mul\", diry, tempf1, dy, \"\\n\");\r\n\r\n\r\n\t\tcode.push(\"mul\", tempxy, dirxy, delta1, \"\\n\");\r\n\t\tcode.push(\"add\", uv, uv_in, tempxy, \"\\n\");\r\n\t\tcode.push(\"tex\", result1, uv, sample, \"<2d wrap linear>\", \"\\n\");\r\n\t\tcode.push(\"mul\", tempxy, dirxy, delta2, \"\\n\");\r\n\t\tcode.push(\"add\", uv, uv_in, tempxy, \"\\n\");\r\n\t\tcode.push(\"tex\", tex, uv, sample, \"<2d wrap linear>\", \"\\n\");\r\n\t\tcode.push(\"add\", result1, result1, tex, \"\\n\");\r\n\t\tcode.push(\"mul\", result1, result1, _05, \"\\n\");\r\n\r\n\t\tcode.push(\"mul\", tempxy, dirxy, delta3, \"\\n\");\r\n\t\tcode.push(\"add\", uv, uv_in, tempxy, \"\\n\");\r\n\t\tcode.push(\"tex\", result2, uv, sample, \"<2d wrap linear>\", \"\\n\");\r\n\t\tcode.push(\"mul\", tempxy, dirxy, delta4, \"\\n\");\r\n\t\tcode.push(\"add\", uv, uv_in, tempxy, \"\\n\");\r\n\t\tcode.push(\"tex\", tex, uv, sample, \"<2d wrap linear>\", \"\\n\");\r\n\t\tcode.push(\"add\", result2, result2, tex, \"\\n\");\r\n\t\tcode.push(\"mul\", result2, result2, _025, \"\\n\");\r\n\t\tcode.push(\"mul\", tex, result1, _05, \"\\n\");\r\n\t\tcode.push(\"add\", result2, result2, tex, \"\\n\");\r\n\r\n\t\tcode.push(\"min\", tempf1, BL, BR, \"\\n\");\r\n\t\tcode.push(\"min\", tempf2, TL, TR, \"\\n\");\r\n\t\tcode.push(\"min\", tempf1, tempf1, tempf2, \"\\n\");\r\n\t\tcode.push(\"min\", lumaMin, tempf1, M, \"\\n\");\r\n\r\n\t\tcode.push(\"max\", tempf1, BL, BR, \"\\n\");\r\n\t\tcode.push(\"max\", tempf2, TL, TR, \"\\n\");\r\n\t\tcode.push(\"max\", tempf1, tempf1, tempf2, \"\\n\");\r\n\t\tcode.push(\"max\", lumaMax, tempf1, M, \"\\n\");\r\n\r\n\t\tcode.push(\"dp3\", tempf1, lum, result2, \"\\n\");\r\n\r\n\t\tcode.push(\"slt\", tempf2, tempf1, lumaMin, \"\\n\");\r\n\t\tcode.push(\"sge\", tempf3, tempf1, lumaMax, \"\\n\");\r\n\t\tcode.push(\"mul\", tempf2, tempf2, tempf3, \"\\n\");\r\n\r\n\t\tcode.push(\"mul\", result1, result1, tempf2, \"\\n\");\r\n\t\tcode.push(\"sub\", tempf2, _1, tempf2, \"\\n\");\r\n\t\tcode.push(\"mul\", result2, result2, tempf2, \"\\n\");\r\n\r\n\t\tcode.push(\"add\", \"oc\", result1, result2, \"\\n\");\r\n\r\n\t\t//this._data[2] = 1/numSamples;\r\n\r\n\t\treturn code.join(\" \");\r\n\t}\r\n\r\n\tpublic activate(stage:Stage, camera3D:Camera, depthTexture:Image2D):void\r\n\t{\r\n\t\tstage.context.setProgramConstantsFromArray(ContextGLProgramType.FRAGMENT, this._data);\r\n\t}\r\n\r\n\tpublic updateTextures(stage:Stage):void\r\n\t{\r\n\t\tsuper.updateTextures(stage);\r\n\r\n\t\tthis.updateBlurData();\r\n\t}\r\n\r\n\tprivate updateBlurData():void\r\n\t{\r\n\t\t// todo: must be normalized using view size ratio instead of texture\r\n\t\tif (this._rttManager) {\r\n\t\t\tthis._data[8] = 1/this._textureWidth;\r\n\t\t\tthis._data[9] = 1/this._textureHeight;\r\n\t\t\t//this._data[8] = 1/this._rttManager.viewWidth;\r\n\t\t\t//this._data[9] = 1/this._rttManager.viewHeight;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate calculateStepSize():void\r\n\t{\r\n\t\tthis._realStepSize = 1;//this._stepSize > 0? this._stepSize : this._amount > Filter3DVBlurTask.MAX_AUTO_SAMPLES? this._amount/Filter3DVBlurTask.MAX_AUTO_SAMPLES : 1;\r\n\t}\r\n}",
    "import {Image2D}\t\t\t\t\t\tfrom \"awayjs-core/lib/image/Image2D\";\r\n\r\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\n\r\nimport {ContextGLProgramType}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLProgramType\";\r\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\n\r\nimport {Filter3DTaskBase}\t\t\t\tfrom \"../../filters/tasks/Filter3DTaskBase\";\r\n\r\nexport class Filter3DHBlurTask extends Filter3DTaskBase\r\n{\r\n\tprivate static MAX_AUTO_SAMPLES:number = 15;\r\n\tprivate _amount:number;\r\n\tprivate _data:Float32Array;\r\n\tprivate _stepSize:number = 1;\r\n\tprivate _realStepSize:number;\r\n\r\n\t/**\r\n\t * Creates a new Filter3DHDepthOfFFieldTask\r\n\t * @param amount The maximum amount of blur to apply in pixels at the most out-of-focus areas\r\n\t * @param stepSize The distance between samples. Set to -1 to autodetect with acceptable quality.\r\n\t */\r\n\tconstructor(amount:number, stepSize:number = -1)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._amount = amount;\r\n\t\tthis._data = new Float32Array([0, 0, 0, 1]);\r\n\t\tthis.stepSize = stepSize;\r\n\t}\r\n\r\n\tpublic get amount():number\r\n\t{\r\n\t\treturn this._amount;\r\n\t}\r\n\r\n\tpublic set amount(value:number)\r\n\t{\r\n\t\tif (this._amount == value)\r\n\t\t\treturn;\r\n\r\n\t\tthis._amount = value;\r\n\r\n\t\tthis.invalidateProgram();\r\n\t\tthis.updateBlurData();\r\n\t\tthis.calculateStepSize();\r\n\t}\r\n\r\n\tpublic get stepSize():number\r\n\t{\r\n\t\treturn this._stepSize;\r\n\t}\r\n\r\n\tpublic set stepSize(value:number)\r\n\t{\r\n\t\tif (this._stepSize == value)\r\n\t\t\treturn;\r\n\r\n\t\tthis._stepSize = value;\r\n\t\tthis.calculateStepSize();\r\n\t\tthis.invalidateProgram();\r\n\t\tthis.updateBlurData();\r\n\t}\r\n\r\n\tpublic getFragmentCode():string\r\n\t{\r\n\t\tvar code:string;\r\n\t\tvar numSamples:number = 1;\r\n\r\n\t\tcode = \"mov ft0, v0\t\\n\" +\r\n\t\t\t\"sub ft0.x, v0.x, fc0.x\\n\";\r\n\r\n\t\tcode += \"tex ft1, ft0, fs0 <2d,linear,clamp>\\n\";\r\n\r\n\t\tfor (var x:number = this._realStepSize; x <= this._amount; x += this._realStepSize) {\r\n\t\t\tcode += \"add ft0.x, ft0.x, fc0.y\\n\" +\r\n\t\t\t\t\"tex ft2, ft0, fs0 <2d,linear,clamp>\\n\" +\r\n\t\t\t\t\"add ft1, ft1, ft2\\n\";\r\n\t\t\t++numSamples;\r\n\t\t}\r\n\r\n\t\tcode += \"mul oc, ft1, fc0.z\\n\";\r\n\r\n\t\tthis._data[2] = 1/numSamples;\r\n\r\n\t\treturn code;\r\n\t}\r\n\r\n\tpublic activate(stage:Stage, camera3D:Camera, depthTexture:Image2D):void\r\n\t{\r\n\t\tstage.context.setProgramConstantsFromArray(ContextGLProgramType.FRAGMENT, this._data);\r\n\t}\r\n\r\n\tpublic updateTextures(stage:Stage):void\r\n\t{\r\n\t\tsuper.updateTextures(stage);\r\n\r\n\t\tthis.updateBlurData();\r\n\t}\r\n\r\n\tprivate updateBlurData():void\r\n\t{\r\n\t\t// todo: must be normalized using view size ratio instead of texture\r\n\t\tvar invW:number = 1/this._textureWidth;\r\n\r\n\t\tthis._data[0] = this._amount*.5*invW;\r\n\t\tthis._data[1] = this._realStepSize*invW;\r\n\t}\r\n\r\n\tprivate calculateStepSize():void\r\n\t{\r\n\t\tthis._realStepSize = this._stepSize > 0? this._stepSize : this._amount > Filter3DHBlurTask.MAX_AUTO_SAMPLES? this._amount/Filter3DHBlurTask.MAX_AUTO_SAMPLES : 1;\r\n\t}\r\n}",
    "import {Image2D}\t\t\t\t\t\tfrom \"awayjs-core/lib/image/Image2D\";\r\n\r\nimport {AbstractMethodError}\t\t\tfrom \"awayjs-core/lib/errors/AbstractMethodError\";\r\nimport {ByteArray}\t\t\t\t\tfrom \"awayjs-core/lib/utils/ByteArray\";\r\n\r\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\n\r\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\nimport {AGALMiniAssembler}\t\t\tfrom \"awayjs-stagegl/lib/aglsl/assembler/AGALMiniAssembler\";\r\nimport {IProgram}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/IProgram\";\r\n\r\nimport {RTTBufferManager}\t\t\t\tfrom \"../../managers/RTTBufferManager\";\r\nimport {ShaderRegisterCache}\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterElement}\t\tfrom \"../../shaders/ShaderRegisterElement\";\r\n\r\nexport class Filter3DTaskBase\r\n{\r\n\tpublic _registerCache:ShaderRegisterCache;\r\n\t\r\n\tpublic _positionIndex:number;\r\n\tpublic _uvIndex:number;;\r\n\tpublic _inputTextureIndex:number;\r\n\tpublic _uvVarying:ShaderRegisterElement;\r\n\t\r\n\tprivate _mainInputTexture:Image2D;\r\n\r\n\tpublic _scaledTextureWidth:number = -1;\r\n\tpublic _scaledTextureHeight:number = -1;\r\n\tpublic _rttManager:RTTBufferManager;\r\n\tpublic _textureWidth:number = -1;\r\n\tpublic _textureHeight:number = -1;\r\n\tprivate _textureDimensionsInvalid:boolean = true;\r\n\tprivate _program3DInvalid:boolean = true;\r\n\tprivate _program3D:IProgram;\r\n\tprivate _target:Image2D;\r\n\tprivate _requireDepthRender:boolean;\r\n\tprivate _textureScale:number = 0;\r\n\r\n\tconstructor(requireDepthRender:boolean = false)\r\n\t{\r\n\t\tthis._requireDepthRender = requireDepthRender;\r\n\r\n\t\tthis._registerCache = new ShaderRegisterCache(\"baseline\");\r\n\t}\r\n\r\n\t/**\r\n\t * The texture scale for the input of this texture. This will define the output of the previous entry in the chain\r\n\t */\r\n\tpublic get textureScale():number\r\n\t{\r\n\t\treturn this._textureScale;\r\n\t}\r\n\r\n\tpublic set textureScale(value:number)\r\n\t{\r\n\t\tif (this._textureScale == value)\r\n\t\t\treturn;\r\n\r\n\t\tthis._textureScale = value;\r\n\t\tthis._scaledTextureWidth = this._textureWidth >> this._textureScale;\r\n\t\tthis._scaledTextureHeight = this._textureHeight >> this._textureScale;\r\n\t\tthis._textureDimensionsInvalid = true;\r\n\t}\r\n\r\n\tpublic get target():Image2D\r\n\t{\r\n\t\treturn this._target;\r\n\t}\r\n\r\n\tpublic set target(value:Image2D)\r\n\t{\r\n\t\tthis._target = value;\r\n\t}\r\n\r\n\tpublic get rttManager():RTTBufferManager\r\n\t{\r\n\t\treturn this._rttManager;\r\n\t}\r\n\r\n\tpublic set rttManager(value:RTTBufferManager)\r\n\t{\r\n\t\tif (this._rttManager == value)\r\n\t\t\treturn;\r\n\r\n\t\tthis._rttManager = value;\r\n\t\tthis._textureDimensionsInvalid = true;\r\n\t}\r\n\r\n\tpublic get textureWidth():number\r\n\t{\r\n\t\treturn this._textureWidth;\r\n\t}\r\n\r\n\tpublic set textureWidth(value:number)\r\n\t{\r\n\t\tif (this._textureWidth == value)\r\n\t\t\treturn;\r\n\r\n\t\tthis._textureWidth = value;\r\n\t\tthis._scaledTextureWidth = this._textureWidth >> this._textureScale;\r\n\t\tthis._textureDimensionsInvalid = true;\r\n\t}\r\n\r\n\tpublic get textureHeight():number\r\n\t{\r\n\t\treturn this._textureHeight;\r\n\t}\r\n\r\n\tpublic set textureHeight(value:number)\r\n\t{\r\n\t\tif (this._textureHeight == value)\r\n\t\t\treturn;\r\n\r\n\t\tthis._textureHeight = value;\r\n\t\tthis._scaledTextureHeight = this._textureHeight >> this._textureScale;\r\n\t\tthis._textureDimensionsInvalid = true;\r\n\t}\r\n\r\n\tpublic getMainInputTexture(stage:Stage):Image2D\r\n\t{\r\n\t\tif (this._textureDimensionsInvalid)\r\n\t\t\tthis.updateTextures(stage);\r\n\r\n\t\treturn this._mainInputTexture;\r\n\t}\r\n\r\n\tpublic dispose():void\r\n\t{\r\n\t\tif (this._mainInputTexture)\r\n\t\t\tthis._mainInputTexture.dispose();\r\n\r\n\t\tif (this._program3D)\r\n\t\t\tthis._program3D.dispose();\r\n\t}\r\n\r\n\tpublic invalidateProgram():void\r\n\t{\r\n\t\tthis._program3DInvalid = true;\r\n\t}\r\n\r\n\tpublic updateProgram(stage:Stage):void\r\n\t{\r\n\t\tif (this._program3D)\r\n\t\t\tthis._program3D.dispose();\r\n\r\n\t\tthis._program3D = stage.context.createProgram();\r\n\r\n\t\tthis._registerCache.reset();\r\n\t\t\r\n\t\tvar vertexByteCode:ByteArray = (new AGALMiniAssembler().assemble(\"part vertex 1\\n\" + this.getVertexCode() + \"endpart\"))['vertex'].data;\r\n\t\tvar fragmentByteCode:ByteArray = (new AGALMiniAssembler().assemble(\"part fragment 1\\n\" + this.getFragmentCode() + \"endpart\"))['fragment'].data;\r\n\r\n\t\tthis._program3D.upload(vertexByteCode, fragmentByteCode);\r\n\t\tthis._program3DInvalid = false;\r\n\t}\r\n\r\n\tpublic getVertexCode():string\r\n\t{\r\n\t\tvar position:ShaderRegisterElement = this._registerCache.getFreeVertexAttribute();\r\n\t\tthis._positionIndex = position.index;\r\n\t\t\r\n\t\tvar uv:ShaderRegisterElement = this._registerCache.getFreeVertexAttribute();\r\n\t\tthis._uvIndex = uv.index;\r\n\t\t\r\n\t\tthis._uvVarying = this._registerCache.getFreeVarying();\r\n\t\t\r\n\t\tvar code:string;\r\n\t\t\r\n\t\tcode = \"mov op, \" + position + \"\\n\" + \r\n\t\t\t\"mov \" + this._uvVarying + \", \" + uv + \"\\n\";\r\n\t\t\r\n\t\treturn code;\r\n\t}\r\n\r\n\tpublic getFragmentCode():string\r\n\t{\r\n\t\tthrow new AbstractMethodError();\r\n\t}\r\n\r\n\tpublic updateTextures(stage:Stage):void\r\n\t{\r\n\t\tif (this._mainInputTexture)\r\n\t\t\tthis._mainInputTexture.dispose();\r\n\r\n\t\tthis._mainInputTexture = new Image2D(this._scaledTextureWidth, this._scaledTextureHeight);\r\n\r\n\t\tthis._textureDimensionsInvalid = false;\r\n\t}\r\n\r\n\tpublic getProgram(stage:Stage):IProgram\r\n\t{\r\n\t\tif (this._program3DInvalid)\r\n\t\t\tthis.updateProgram(stage);\r\n\r\n\t\treturn this._program3D;\r\n\t}\r\n\r\n\tpublic activate(stage:Stage, camera:Camera, depthTexture:Image2D):void\r\n\t{\r\n\t}\r\n\r\n\tpublic deactivate(stage:Stage):void\r\n\t{\r\n\t}\r\n\r\n\tpublic get requireDepthRender():boolean\r\n\t{\r\n\t\treturn this._requireDepthRender;\r\n\t}\r\n\r\n}",
    "import {Image2D}\t\t\t\t\t\tfrom \"awayjs-core/lib/image/Image2D\";\r\n\r\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\n\r\nimport {ContextGLProgramType}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLProgramType\";\r\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\n\r\nimport {Filter3DTaskBase}\t\t\t\tfrom \"../../filters/tasks/Filter3DTaskBase\";\r\n\r\nexport class Filter3DVBlurTask extends Filter3DTaskBase\r\n{\r\n\tprivate static MAX_AUTO_SAMPLES:number = 15;\r\n\tprivate _amount:number;\r\n\tprivate _data:Float32Array;\r\n\tprivate _stepSize:number = 1;\r\n\tprivate _realStepSize:number;\r\n\t\r\n\t/**\r\n\t *\r\n\t * @param amount\r\n\t * @param stepSize The distance between samples. Set to -1 to autodetect with acceptable quality.\r\n\t */\r\n\tconstructor(amount:number, stepSize:number = -1)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._amount = amount;\r\n\t\tthis._data =  new Float32Array([0, 0, 0, 1]);\r\n\t\tthis.stepSize = stepSize;\r\n\t}\r\n\r\n\tpublic get amount():number\r\n\t{\r\n\t\treturn this._amount;\r\n\t}\r\n\r\n\tpublic set amount(value:number)\r\n\t{\r\n\t\tif (this._amount == value)\r\n\t\t\treturn;\r\n\r\n\t\tthis._amount = value;\r\n\r\n\t\tthis.invalidateProgram();\r\n\t\tthis.updateBlurData();\r\n\t}\r\n\r\n\tpublic get stepSize():number\r\n\t{\r\n\t\treturn this._stepSize;\r\n\t}\r\n\r\n\tpublic set stepSize(value:number)\r\n\t{\r\n\t\tif (this._stepSize == value)\r\n\t\t\treturn;\r\n\t\tthis._stepSize = value;\r\n\t\tthis.calculateStepSize();\r\n\t\tthis.invalidateProgram();\r\n\t\tthis.updateBlurData();\r\n\t}\r\n\r\n\tpublic getFragmentCode():string\r\n\t{\r\n\t\tvar code:string;\r\n\t\tvar numSamples:number = 1;\r\n\r\n\t\tcode = \"mov ft0, v0\t\\n\" +\r\n\t\t\t\"sub ft0.y, v0.y, fc0.x\\n\";\r\n\r\n\t\tcode += \"tex ft1, ft0, fs0 <2d,linear,clamp>\\n\";\r\n\r\n\t\tfor (var x:number = this._realStepSize; x <= this._amount; x += this._realStepSize) {\r\n\t\t\tcode += \"add ft0.y, ft0.y, fc0.y\\n\";\r\n\t\t\tcode += \"tex ft2, ft0, fs0 <2d,linear,clamp>\\n\" +\r\n\t\t\t\t\"add ft1, ft1, ft2\\n\";\r\n\t\t\t++numSamples;\r\n\t\t}\r\n\r\n\t\tcode += \"mul oc, ft1, fc0.z\\n\";\r\n\r\n\t\tthis._data[2] = 1/numSamples;\r\n\r\n\t\treturn code;\r\n\t}\r\n\r\n\tpublic activate(stage:Stage, camera3D:Camera, depthTexture:Image2D):void\r\n\t{\r\n\t\tstage.context.setProgramConstantsFromArray(ContextGLProgramType.FRAGMENT, this._data);\r\n\t}\r\n\r\n\tpublic updateTextures(stage:Stage):void\r\n\t{\r\n\t\tsuper.updateTextures(stage);\r\n\r\n\t\tthis.updateBlurData();\r\n\t}\r\n\r\n\tprivate updateBlurData():void\r\n\t{\r\n\t\t// todo: must be normalized using view size ratio instead of texture\r\n\t\tvar invH:number = 1/this._textureHeight;\r\n\r\n\t\tthis._data[0] = this._amount*.5*invH;\r\n\t\tthis._data[1] = this._realStepSize*invH;\r\n\t}\r\n\r\n\tprivate calculateStepSize():void\r\n\t{\r\n\t\tthis._realStepSize = this._stepSize > 0? this._stepSize : this._amount > Filter3DVBlurTask.MAX_AUTO_SAMPLES? this._amount/Filter3DVBlurTask.MAX_AUTO_SAMPLES : 1;\r\n\t}\r\n}",
    "export {Filter3DCompositeTask}\t\t\tfrom \"./filters/tasks/Filter3DCompositeTask\";\r\nexport {Filter3DFXAATask}\t\t\t\tfrom \"./filters/tasks/Filter3DFXAATask\";\r\nexport {Filter3DHBlurTask}\t\t\t\tfrom \"./filters/tasks/Filter3DHBlurTask\";\r\nexport {Filter3DTaskBase}\t\t\t\tfrom \"./filters/tasks/Filter3DTaskBase\";\r\nexport {Filter3DVBlurTask}\t\t\t\tfrom \"./filters/tasks/Filter3DVBlurTask\";\r\nexport {BlurFilter3D}\t\t\t\t\tfrom \"./filters/BlurFilter3D\";\r\nexport {CompositeFilter3D}\t\t\t\tfrom \"./filters/CompositeFilter3D\";\r\nexport {Filter3DBase}\t\t\t\t\tfrom \"./filters/Filter3DBase\";\r\nexport {FXAAFilter3D}\t\t\t\t\tfrom \"./filters/FXAAFilter3D\";",
    "import {Rectangle}\t\t\t\t\tfrom \"awayjs-core/lib/geom/Rectangle\";\r\nimport {EventDispatcher}\t\t\t\tfrom \"awayjs-core/lib/events/EventDispatcher\";\r\nimport {ImageUtils}\t\t\t\t\tfrom \"awayjs-core/lib/utils/ImageUtils\";\r\n\r\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\nimport {IContextGL}\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/IContextGL\";\r\nimport {IIndexBuffer}\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/IIndexBuffer\";\r\nimport {IVertexBuffer}\t\t\t\tfrom \"awayjs-stagegl/lib/base/IVertexBuffer\";\r\nimport {RTTEvent}\t\t\t\t\t\tfrom \"../events/RTTEvent\";\r\n\r\nexport class RTTBufferManager extends EventDispatcher\r\n{\r\n\tprivate static _instances:Array<RTTBufferManagerVO>;\r\n\r\n\tprivate _renderToTextureVertexBuffer:IVertexBuffer;\r\n\tprivate _renderToScreenVertexBuffer:IVertexBuffer;\r\n\r\n\tprivate _indexBuffer:IIndexBuffer;\r\n\tprivate _stage:Stage;\r\n\tprivate _viewWidth:number = -1;\r\n\tprivate _viewHeight:number = -1;\r\n\tprivate _textureWidth:number = -1;\r\n\tprivate _textureHeight:number = -1;\r\n\tprivate _renderToTextureRect:Rectangle;\r\n\tprivate _buffersInvalid:boolean = true;\r\n\r\n\tprivate _textureRatioX:number;\r\n\tprivate _textureRatioY:number;\r\n\r\n\tconstructor(stage:Stage)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tthis._renderToTextureRect = new Rectangle();\r\n\r\n\t\tthis._stage = stage;\r\n\r\n\t}\r\n\r\n\tpublic static getInstance(stage:Stage):RTTBufferManager\r\n\t{\r\n\t\tif (!stage)\r\n\t\t\tthrow new Error(\"stage key cannot be null!\");\r\n\r\n\t\tif (RTTBufferManager._instances == null)\r\n\t\t\tRTTBufferManager._instances = new Array<RTTBufferManagerVO>();\r\n\r\n\t\tvar rttBufferManager:RTTBufferManager = RTTBufferManager.getRTTBufferManagerFromStage(stage);\r\n\r\n\t\tif (rttBufferManager == null) {\r\n\t\t\trttBufferManager = new RTTBufferManager(stage);\r\n\r\n\t\t\tvar vo:RTTBufferManagerVO = new RTTBufferManagerVO();\r\n\r\n\t\t\tvo.stage3d = stage;\r\n\t\t\tvo.rttbfm = rttBufferManager;\r\n\r\n\t\t\tRTTBufferManager._instances.push(vo);\r\n\t\t}\r\n\r\n\t\treturn rttBufferManager;\r\n\r\n\t}\r\n\r\n\tprivate static getRTTBufferManagerFromStage(stage:Stage):RTTBufferManager\r\n\t{\r\n\r\n\t\tvar l:number = RTTBufferManager._instances.length;\r\n\t\tvar r:RTTBufferManagerVO;\r\n\r\n\t\tfor (var c:number = 0; c < l; c++) {\r\n\t\t\tr = RTTBufferManager._instances[c];\r\n\r\n\t\t\tif (r.stage3d === stage)\r\n\t\t\t\treturn r.rttbfm;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprivate static deleteRTTBufferManager(stage:Stage):void\r\n\t{\r\n\t\tvar l:number = RTTBufferManager._instances.length;\r\n\t\tvar r:RTTBufferManagerVO;\r\n\r\n\t\tfor (var c:number = 0; c < l; c++) {\r\n\t\t\tr = RTTBufferManager._instances[c];\r\n\r\n\t\t\tif (r.stage3d === stage) {\r\n\t\t\t\tRTTBufferManager._instances.splice(c, 1);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic get textureRatioX():number\r\n\t{\r\n\t\tif (this._buffersInvalid)\r\n\t\t\tthis.updateRTTBuffers();\r\n\r\n\t\treturn this._textureRatioX;\r\n\t}\r\n\r\n\tpublic get textureRatioY():number\r\n\t{\r\n\t\tif (this._buffersInvalid)\r\n\t\t\tthis.updateRTTBuffers();\r\n\r\n\t\treturn this._textureRatioY;\r\n\t}\r\n\r\n\tpublic get viewWidth():number\r\n\t{\r\n\t\treturn this._viewWidth;\r\n\t}\r\n\r\n\tpublic set viewWidth(value:number)\r\n\t{\r\n\t\tif (value == this._viewWidth)\r\n\t\t\treturn;\r\n\r\n\t\tthis._viewWidth = value;\r\n\r\n\t\tthis._buffersInvalid = true;\r\n\r\n\t\tthis._textureWidth = ImageUtils.getBestPowerOf2(this._viewWidth);\r\n\r\n\t\tif (this._textureWidth > this._viewWidth) {\r\n\t\t\tthis._renderToTextureRect.x = Math.floor((this._textureWidth - this._viewWidth)*.5);\r\n\t\t\tthis._renderToTextureRect.width = this._viewWidth;\r\n\t\t} else {\r\n\t\t\tthis._renderToTextureRect.x = 0;\r\n\t\t\tthis._renderToTextureRect.width = this._textureWidth;\r\n\t\t}\r\n\r\n\t\tthis.dispatchEvent(new RTTEvent(RTTEvent.RESIZE, this));\r\n\t}\r\n\r\n\tpublic get viewHeight():number\r\n\t{\r\n\t\treturn this._viewHeight;\r\n\t}\r\n\r\n\tpublic set viewHeight(value:number)\r\n\t{\r\n\t\tif (value == this._viewHeight)\r\n\t\t\treturn;\r\n\r\n\t\tthis._viewHeight = value;\r\n\r\n\t\tthis._buffersInvalid = true;\r\n\r\n\t\tthis._textureHeight = ImageUtils.getBestPowerOf2(this._viewHeight);\r\n\r\n\t\tif (this._textureHeight > this._viewHeight) {\r\n\t\t\tthis._renderToTextureRect.y = Math.floor((this._textureHeight - this._viewHeight)*.5);\r\n\t\t\tthis._renderToTextureRect.height = this._viewHeight;\r\n\t\t} else {\r\n\t\t\tthis._renderToTextureRect.y = 0;\r\n\t\t\tthis._renderToTextureRect.height = this._textureHeight;\r\n\t\t}\r\n\r\n\t\tthis.dispatchEvent(new RTTEvent(RTTEvent.RESIZE, this));\r\n\t}\r\n\r\n\tpublic get renderToTextureVertexBuffer():IVertexBuffer\r\n\t{\r\n\t\tif (this._buffersInvalid)\r\n\t\t\tthis.updateRTTBuffers();\r\n\r\n\t\treturn this._renderToTextureVertexBuffer;\r\n\t}\r\n\r\n\tpublic get renderToScreenVertexBuffer():IVertexBuffer\r\n\t{\r\n\t\tif (this._buffersInvalid)\r\n\t\t\tthis.updateRTTBuffers();\r\n\r\n\t\treturn this._renderToScreenVertexBuffer;\r\n\r\n\t}\r\n\r\n\tpublic get indexBuffer():IIndexBuffer\r\n\t{\r\n\t\treturn this._indexBuffer;\r\n\t}\r\n\r\n\tpublic get renderToTextureRect():Rectangle\r\n\t{\r\n\t\tif (this._buffersInvalid)\r\n\t\t\tthis.updateRTTBuffers();\r\n\r\n\t\treturn this._renderToTextureRect;\r\n\t}\r\n\r\n\tpublic get textureWidth():number\r\n\t{\r\n\t\treturn this._textureWidth;\r\n\t}\r\n\r\n\tpublic get textureHeight():number\r\n\t{\r\n\t\treturn this._textureHeight;\r\n\t}\r\n\r\n\tpublic dispose():void\r\n\t{\r\n\t\tRTTBufferManager.deleteRTTBufferManager(this._stage);\r\n\r\n\t\tif (this._indexBuffer) {\r\n\t\t\tthis._indexBuffer.dispose();\r\n\t\t\tthis._renderToScreenVertexBuffer.dispose();\r\n\t\t\tthis._renderToTextureVertexBuffer.dispose();\r\n\t\t\tthis._renderToScreenVertexBuffer = null;\r\n\t\t\tthis._renderToTextureVertexBuffer = null;\r\n\t\t\tthis._indexBuffer = null;\r\n\t\t}\r\n\t}\r\n\r\n\t// todo: place all this in a separate model, since it's used all over the place\r\n\t// maybe it even has a place in the core (together with screenRect etc)?\r\n\t// needs to be stored per view of course\r\n\tprivate updateRTTBuffers():void\r\n\t{\r\n\t\tvar context:IContextGL = this._stage.context;\r\n\t\tvar textureVerts:number[];\r\n\t\tvar screenVerts:number[];\r\n\r\n\t\tvar x:number;\r\n\t\tvar y:number;\r\n\r\n\t\tif (this._renderToTextureVertexBuffer == null)\r\n\t\t\tthis._renderToTextureVertexBuffer = context.createVertexBuffer(4, 20);\r\n\r\n\t\tif (this._renderToScreenVertexBuffer == null)\r\n\t\t\tthis._renderToScreenVertexBuffer = context.createVertexBuffer(4, 20);\r\n\r\n\t\tif (!this._indexBuffer) {\r\n\t\t\tthis._indexBuffer = context.createIndexBuffer(6);\r\n\r\n\t\t\tthis._indexBuffer.uploadFromArray([2, 1, 0, 3, 2, 0], 0, 6);\r\n\t\t}\r\n\r\n\t\tthis._textureRatioX = x = Math.min(this._viewWidth/this._textureWidth, 1);\r\n\t\tthis._textureRatioY = y = Math.min(this._viewHeight/this._textureHeight, 1);\r\n\r\n\t\tvar u1:number = (1 - x)*.5;\r\n\t\tvar u2:number = (x + 1)*.5;\r\n\t\tvar v1:number = (1 - y)*.5;\r\n\t\tvar v2:number = (y + 1)*.5;\r\n\r\n\t\t// last element contains indices for data per vertex that can be passed to the vertex shader if necessary (ie: frustum corners for deferred rendering)\r\n\t\ttextureVerts = [    -x, -y, u1, v1, 0, x, -y, u2, v1, 1, x, y, u2, v2, 2, -x, y, u1, v2, 3 ];\r\n\r\n\t\tscreenVerts = [     -1, -1, u1, v1, 0, 1, -1, u2, v1, 1, 1, 1, u2, v2, 2, -1, 1, u1, v2, 3 ];\r\n\r\n\t\tthis._renderToTextureVertexBuffer.uploadFromArray(textureVerts, 0, 4);\r\n\t\tthis._renderToScreenVertexBuffer.uploadFromArray(screenVerts, 0, 4);\r\n\r\n\t\tthis._buffersInvalid = false;\r\n\t}\r\n}\r\n\r\nclass RTTBufferManagerVO\r\n{\r\n\tpublic stage3d:Stage;\r\n\r\n\tpublic rttbfm:RTTBufferManager;\r\n}",
    "export {RTTBufferManager}\t\t\t\tfrom \"./managers/RTTBufferManager\";",
    "import {AttributesBuffer}\t\t\t\tfrom \"awayjs-core/lib/attributes/AttributesBuffer\";\r\nimport {AssetEvent}\t\t\t\t\tfrom \"awayjs-core/lib/events/AssetEvent\";\r\nimport {Rectangle}\t\t\t\t\tfrom \"awayjs-core/lib/geom/Rectangle\";\r\n\r\nimport {TriangleElements}\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\r\nimport {Billboard}\t\t\t\t\tfrom \"awayjs-display/lib/display/Billboard\";\r\nimport {DefaultMaterialManager}\t\tfrom \"awayjs-display/lib/managers/DefaultMaterialManager\";\r\nimport {TextureBase}\t\t\t\t\tfrom \"awayjs-display/lib/textures/TextureBase\";\r\n\r\nimport {RendererBase}\t\t\t\t\tfrom \"../RendererBase\";\r\nimport {GL_ElementsBase}\t\t\t\tfrom \"../elements/GL_ElementsBase\";\r\nimport {GL_RenderableBase}\t\t\tfrom \"../renderables/GL_RenderableBase\";\r\nimport {GL_SurfaceBase}\t\t\t\tfrom \"../surfaces/GL_SurfaceBase\";\r\n\r\n/**\r\n * @class away.pool.RenderableListItem\r\n */\r\nexport class GL_BillboardRenderable extends GL_RenderableBase\r\n{\r\n\tprivate static _samplerElements:Object = new Object();\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tprivate _billboard:Billboard;\r\n\r\n\tpublic _id:number;\r\n\r\n\t/**\r\n\t * //TODO\r\n\t *\r\n\t * @param pool\r\n\t * @param billboard\r\n\t */\r\n\tconstructor(billboard:Billboard, renderer:RendererBase)\r\n\t{\r\n\t\tsuper(billboard, renderer);\r\n\r\n\t\tthis._billboard = billboard;\r\n\t}\r\n\r\n\tpublic onClear(event:AssetEvent):void\r\n\t{\r\n\t\tsuper.onClear(event);\r\n\r\n\t\tthis._billboard = null;\r\n\t}\r\n\r\n\t/**\r\n\t * //TODO\r\n\t *\r\n\t * @returns {away.base.TriangleElements}\r\n\t */\r\n\tpublic _pGetElements():GL_ElementsBase\r\n\t{\r\n\t\tvar texture:TextureBase = this._billboard.material.getTextureAt(0);\r\n\r\n\t\tvar id:number = -1;\r\n\r\n\t\tif (texture)\r\n\t\t\tid = ((this.renderable.style? this.renderable.style.getSamplerAt(texture) || texture.getSamplerAt(0) : texture.getSamplerAt(0)) || DefaultMaterialManager.getDefaultSampler()).id;\r\n\r\n\t\tthis._id = id;\r\n\r\n\t\tvar elements:TriangleElements = GL_BillboardRenderable._samplerElements[id];\r\n\r\n\t\tvar width:number = this._billboard.billboardWidth;\r\n\t\tvar height:number = this._billboard.billboardHeight;\r\n\t\tvar billboardRect:Rectangle = this._billboard.billboardRect;\r\n\r\n\t\tif (!elements) {\r\n\t\t\telements = GL_BillboardRenderable._samplerElements[id] = new TriangleElements(new AttributesBuffer(11, 4));\r\n\t\t\telements.autoDeriveNormals = false;\r\n\t\t\telements.autoDeriveTangents = false;\r\n\t\t\telements.setIndices(Array<number>(0, 1, 2, 0, 2, 3));\r\n\t\t\telements.setPositions(Array<number>(-billboardRect.x, -billboardRect.y, 0, width-billboardRect.x, -billboardRect.y, 0, width-billboardRect.x, height-billboardRect.y, 0, -billboardRect.x, height-billboardRect.y, 0));\r\n\t\t\telements.setNormals(Array<number>(1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0));\r\n\t\t\telements.setTangents(Array<number>(0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1));\r\n\t\t\telements.setUVs(Array<number>(0, 0, 1, 0, 1, 1, 0, 1));\r\n\t\t} else {\r\n\t\t\telements.setPositions(Array<number>(-billboardRect.x, -billboardRect.y, 0, width-billboardRect.x, -billboardRect.y, 0, width-billboardRect.x, height-billboardRect.y, 0, -billboardRect.x, height-billboardRect.y, 0));\r\n\t\t}\r\n\r\n\t\treturn <GL_ElementsBase> this._stage.getAbstraction(elements);\r\n\t}\r\n\r\n\tpublic _pGetSurface():GL_SurfaceBase\r\n\t{\r\n\t\treturn this._renderer.getSurfacePool(this.elementsGL).getAbstraction(this._billboard.material || DefaultMaterialManager.getDefaultMaterial(this.renderable));\r\n\t}\r\n\r\n}",
    "import {AssetEvent}\t\t\t\t\tfrom \"awayjs-core/lib/events/AssetEvent\";\r\n\r\nimport {Graphic}\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphic\";\r\nimport {DefaultMaterialManager}\t\tfrom \"awayjs-display/lib/managers/DefaultMaterialManager\";\r\n\r\nimport {RendererBase}\t\t\t\t\tfrom \"../RendererBase\";\r\nimport {AnimatorBase}\t\t\t\t\tfrom \"../animators/AnimatorBase\";\r\nimport {GL_ElementsBase}\t\t\t\tfrom \"../elements/GL_ElementsBase\";\r\nimport {GL_RenderableBase}\t\t\tfrom \"../renderables/GL_RenderableBase\";\r\nimport {GL_SurfaceBase}\t\t\t\tfrom \"../surfaces/GL_SurfaceBase\";\r\n\r\n/**\r\n * @class away.pool.GL_GraphicRenderable\r\n */\r\nexport class GL_GraphicRenderable extends GL_RenderableBase\r\n{\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic graphic:Graphic;\r\n\r\n\r\n\t/**\r\n\t * //TODO\r\n\t *\r\n\t * @param pool\r\n\t * @param graphic\r\n\t * @param level\r\n\t * @param indexOffset\r\n\t */\r\n\tconstructor(graphic:Graphic, renderer:RendererBase)\r\n\t{\r\n\t\tsuper(graphic, renderer);\r\n\r\n\t\tthis.graphic = graphic;\r\n\t}\r\n\r\n\tpublic onClear(event:AssetEvent):void\r\n\t{\r\n\t\tsuper.onClear(event);\r\n\r\n\t\tthis.graphic = null;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @returns {ElementsBase}\r\n\t * @protected\r\n\t */\r\n\tpublic _pGetElements():GL_ElementsBase\r\n\t{\r\n\t\tthis._offset = this.graphic.offset;\r\n\t\tthis._count = this.graphic.count;\r\n\r\n\t\t\r\n\t\treturn <GL_ElementsBase> this._stage.getAbstraction((this.renderable.animator)? (<AnimatorBase> this.renderable.animator).getRenderableElements(this, this.graphic.elements) : this.graphic.elements);\r\n\t}\r\n\r\n\r\n\tpublic _pGetSurface():GL_SurfaceBase\r\n\t{\r\n\t\treturn this._renderer.getSurfacePool(this.elementsGL).getAbstraction(this.graphic.material || DefaultMaterialManager.getDefaultMaterial(this.renderable));\r\n\t}\r\n}",
    "import {AssetEvent}\t\t\t\t\tfrom \"awayjs-core/lib/events/AssetEvent\";\r\nimport {Vector3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {LineElements}\t\t\t\t\tfrom \"awayjs-display/lib/graphics/LineElements\";\r\nimport {LineSegment}\t\t\t\t\tfrom \"awayjs-display/lib/display/LineSegment\";\r\nimport {DefaultMaterialManager}\t\tfrom \"awayjs-display/lib/managers/DefaultMaterialManager\";\r\n\r\nimport {RendererBase}\t\t\t\t\tfrom \"../RendererBase\";\r\nimport {GL_ElementsBase}\t\t\t\tfrom \"../elements/GL_ElementsBase\";\r\nimport {GL_RenderableBase}\t\t\tfrom \"../renderables/GL_RenderableBase\";\r\nimport {GL_SurfaceBase}\t\t\t\tfrom \"../surfaces/GL_SurfaceBase\";\r\n\r\n/**\r\n * @class away.pool.GL_LineSegmentRenderable\r\n */\r\nexport class GL_LineSegmentRenderable extends GL_RenderableBase\r\n{\r\n\tprivate static _lineGraphics:Object = new Object();\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tprivate _lineSegment:LineSegment;\r\n\r\n\t/**\r\n\t * //TODO\r\n\t *\r\n\t * @param pool\r\n\t * @param graphic\r\n\t * @param level\r\n\t * @param dataOffset\r\n\t */\r\n\tconstructor(lineSegment:LineSegment, renderer:RendererBase)\r\n\t{\r\n\t\tsuper(lineSegment, renderer);\r\n\r\n\t\tthis._lineSegment = lineSegment;\r\n\t}\r\n\r\n\tpublic onClear(event:AssetEvent):void\r\n\t{\r\n\t\tsuper.onClear(event);\r\n\r\n\t\tthis._lineSegment = null;\r\n\t}\r\n\r\n\t/**\r\n\t * //TODO\r\n\t *\r\n\t * @returns {base.LineElements}\r\n\t * @protected\r\n\t */\r\n\tpublic _pGetElements():GL_ElementsBase\r\n\t{\r\n\t\tvar elements:LineElements = GL_LineSegmentRenderable._lineGraphics[this._lineSegment.id] || (GL_LineSegmentRenderable._lineGraphics[this._lineSegment.id] = new LineElements());\r\n\r\n\t\tvar start:Vector3D = this._lineSegment.startPostion;\r\n\t\tvar end:Vector3D = this._lineSegment.endPosition;\r\n\r\n\t\tvar positions:Float32Array = new Float32Array(6);\r\n\t\tvar thickness:Float32Array = new Float32Array(1);\r\n\r\n\t\tpositions[0] = start.x;\r\n\t\tpositions[1] = start.y;\r\n\t\tpositions[2] = start.z;\r\n\t\tpositions[3] = end.x;\r\n\t\tpositions[4] = end.y;\r\n\t\tpositions[5] = end.z;\r\n\t\tthickness[0] = this._lineSegment.thickness;\r\n\r\n\t\telements.setPositions(positions);\r\n\t\telements.setThickness(thickness);\r\n\r\n\t\treturn <GL_ElementsBase> this._stage.getAbstraction(elements);\r\n\t}\r\n\r\n\tpublic _pGetSurface():GL_SurfaceBase\r\n\t{\r\n\t\treturn this._renderer.getSurfacePool(this.elementsGL).getAbstraction(this._lineSegment.material || DefaultMaterialManager.getDefaultMaterial(this.renderable));\r\n\t}\r\n\r\n\t/**\r\n\t * //TODO\r\n\t *\r\n\t * @param pool\r\n\t * @param renderable\r\n\t * @param level\r\n\t * @param indexOffset\r\n\t * @returns {away.pool.LineSubSpriteRenderable}\r\n\t * @private\r\n\t */\r\n\tpublic _pGetOverflowRenderable(indexOffset:number):GL_RenderableBase\r\n\t{\r\n\t\treturn new GL_LineSegmentRenderable(<LineSegment> this.renderable, this._renderer);\r\n\t}\r\n}",
    "import {AbstractMethodError}\t\t\tfrom \"awayjs-core/lib/errors/AbstractMethodError\";\r\nimport {AssetEvent}\t\t\t\t\tfrom \"awayjs-core/lib/events/AssetEvent\";\r\nimport {Matrix}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix\";\r\nimport {Matrix3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\r\nimport {ImageBase}\t\t\t\t\tfrom \"awayjs-core/lib/image/ImageBase\";\r\nimport {SamplerBase}\t\t\t\t\tfrom \"awayjs-core/lib/image/SamplerBase\";\r\nimport {AbstractionBase}\t\t\t\tfrom \"awayjs-core/lib/library/AbstractionBase\";\r\n\r\nimport {IRenderable}\t\t\t\t\tfrom \"awayjs-display/lib/base/IRenderable\";\r\nimport {ISurface}\t\t\t\t\t\tfrom \"awayjs-display/lib/base/ISurface\";\r\nimport {ElementsBase}\t\t\t\t\tfrom \"awayjs-display/lib/graphics/ElementsBase\";\r\nimport {IEntity}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/IEntity\";\r\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\nimport {RenderableEvent}\t\t\t\tfrom \"awayjs-display/lib/events/RenderableEvent\";\r\nimport {DefaultMaterialManager}\t\tfrom \"awayjs-display/lib/managers/DefaultMaterialManager\";\r\nimport {TextureBase}\t\t\t\t\tfrom \"awayjs-display/lib/textures/TextureBase\";\r\n\r\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\nimport {GL_ImageBase}\t\t\t\t\tfrom \"awayjs-stagegl/lib/image/GL_ImageBase\";\r\nimport {GL_SamplerBase}\t\t\t\tfrom \"awayjs-stagegl/lib/image/GL_SamplerBase\";\r\n\r\nimport {RendererBase}\t\t\t\t\tfrom \"../RendererBase\";\r\nimport {GL_SurfaceBase}\t\t\t\tfrom \"../surfaces/GL_SurfaceBase\";\r\nimport {IPass}\t\t\t\t\t\tfrom \"../surfaces/passes/IPass\";\r\nimport {GL_ElementsBase}\t\t\t\tfrom \"../elements/GL_ElementsBase\";\r\n\r\n/**\r\n * @class RenderableListItem\r\n */\r\nexport class GL_RenderableBase extends AbstractionBase\r\n{\r\n\tprivate _onInvalidateSurfaceDelegate:(event:RenderableEvent) => void;\r\n\tprivate _onInvalidateElementsDelegate:(event:RenderableEvent) => void;\r\n\r\n\tpublic _count:number = 0;\r\n\tpublic _offset:number = 0;\r\n\tprivate _elementsGL:GL_ElementsBase;\r\n\tprivate _surfaceGL:GL_SurfaceBase;\r\n\tprivate _elementsDirty:boolean = true;\r\n\tprivate _surfaceDirty:boolean = true;\r\n\r\n\tpublic JOINT_INDEX_FORMAT:string;\r\n\tpublic JOINT_WEIGHT_FORMAT:string;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic _renderer:RendererBase;\r\n\r\n\tpublic _stage:Stage;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic next:GL_RenderableBase;\r\n\r\n\tpublic id:number;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic surfaceID:number;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic renderOrderId:number;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic zIndex:number;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic maskId:number;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic masksConfig:Array<Array<number>>;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic cascaded:boolean;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic renderSceneTransform:Matrix3D;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic sourceEntity:IEntity;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic renderable:IRenderable;\r\n\r\n\tpublic uvMatrix:Matrix;\r\n\t\r\n\tpublic images:Array<GL_ImageBase> = new Array<GL_ImageBase>();\r\n\r\n\tpublic samplers:Array<GL_SamplerBase> = new Array<GL_SamplerBase>();\r\n\r\n\tpublic get elementsGL():GL_ElementsBase\r\n\t{\r\n\t\tif (this._elementsDirty)\r\n\t\t\tthis._updateElements();\r\n\r\n\t\treturn this._elementsGL;\r\n\t}\r\n\r\n\tpublic get surfaceGL():GL_SurfaceBase\r\n\t{\r\n\t\tif (this._surfaceDirty)\r\n\t\t\tthis._updateSurface();\r\n\r\n\t\treturn this._surfaceGL;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param renderable\r\n\t * @param sourceEntity\r\n\t * @param surface\r\n\t * @param renderer\r\n\t */\r\n\tconstructor(renderable:IRenderable, renderer:RendererBase)\r\n\t{\r\n\t\tsuper(renderable, renderer);\r\n\r\n\t\tthis._onInvalidateSurfaceDelegate = (event:RenderableEvent) => this._onInvalidateSurface(event);\r\n\t\tthis._onInvalidateElementsDelegate = (event:RenderableEvent) => this.onInvalidateElements(event);\r\n\r\n\t\t//store a reference to the pool for later disposal\r\n\t\tthis._renderer = renderer;\r\n\t\tthis._stage = renderer.stage;\r\n\r\n\t\tthis.renderable = renderable;\r\n\r\n\t\tthis.renderable.addEventListener(RenderableEvent.INVALIDATE_SURFACE, this._onInvalidateSurfaceDelegate);\r\n\t\tthis.renderable.addEventListener(RenderableEvent.INVALIDATE_ELEMENTS, this._onInvalidateElementsDelegate);\r\n\t}\r\n\r\n\tpublic onClear(event:AssetEvent):void\r\n\t{\r\n\t\tsuper.onClear(event);\r\n\r\n\t\tthis.next = null;\r\n\t\tthis.masksConfig = null;\r\n\t\tthis.renderSceneTransform = null;\r\n\r\n\t\tthis._renderer = null;\r\n\t\tthis._stage = null;\r\n\t\tthis.sourceEntity = null;\r\n\r\n\t\tthis.renderable.removeEventListener(RenderableEvent.INVALIDATE_SURFACE, this._onInvalidateSurfaceDelegate);\r\n\t\tthis.renderable.removeEventListener(RenderableEvent.INVALIDATE_ELEMENTS, this._onInvalidateElementsDelegate);\r\n\t\tthis.renderable = null;\r\n\r\n\t\tthis._surfaceGL.usages--;\r\n\r\n\t\tif (!this._surfaceGL.usages)\r\n\t\t\tthis._surfaceGL.onClear(new AssetEvent(AssetEvent.CLEAR, this._surfaceGL.surface));\r\n\r\n\t\tthis._surfaceGL = null;\r\n\t\tthis._elementsGL = null;\r\n\t}\r\n\r\n\tpublic onInvalidateElements(event:RenderableEvent):void\r\n\t{\r\n\t\tthis._elementsDirty = true;\r\n\t}\r\n\r\n\tprivate _onInvalidateSurface(event:RenderableEvent):void\r\n\t{\r\n\t\tthis._surfaceDirty = true;\r\n\t}\r\n\r\n\tpublic _pGetElements():GL_ElementsBase\r\n\t{\r\n\t\tthrow new AbstractMethodError();\r\n\t}\r\n\r\n\tpublic _pGetSurface():GL_SurfaceBase\r\n\t{\r\n\t\tthrow new AbstractMethodError();\r\n\t}\r\n\r\n\t/**\r\n\t * Renders an object to the current render target.\r\n\t *\r\n\t * @private\r\n\t */\r\n\tpublic _iRender(pass:IPass, camera:Camera, viewProjection:Matrix3D):void\r\n\t{\r\n\t\tthis._setRenderState(pass, camera, viewProjection);\r\n\r\n\t\tthis._elementsGL.draw(this, pass.shader, camera, viewProjection, this._count, this._offset)\r\n\t}\r\n\r\n\tpublic _setRenderState(pass:IPass, camera:Camera, viewProjection:Matrix3D):void\r\n\t{\r\n\t\tif (this._elementsDirty)\r\n\t\t\tthis._updateElements();\r\n\r\n\t\tpass._setRenderState(this, camera, viewProjection);\r\n\t\t\r\n\t\tif (pass.shader.activeElements != this._elementsGL) {\r\n\t\t\tpass.shader.activeElements = this._elementsGL;\r\n\t\t\tthis._elementsGL._setRenderState(this, pass.shader, camera, viewProjection);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * //TODO\r\n\t *\r\n\t * @private\r\n\t */\r\n\tprivate _updateElements():void\r\n\t{\r\n\t\tthis._elementsGL = this._pGetElements();\r\n\r\n\t\tthis._elementsDirty = false;\r\n\t}\r\n\r\n\tprivate _updateSurface():void\r\n\t{\r\n\t\tvar surfaceGL:GL_SurfaceBase = this._pGetSurface();\r\n\r\n\t\tif (this._surfaceGL != surfaceGL) {\r\n\r\n\t\t\tif (this._surfaceGL) {\r\n\t\t\t\tthis._surfaceGL.usages--;\r\n\r\n\t\t\t\t//dispose current surfaceGL object\r\n\t\t\t\tif (!this._surfaceGL.usages)\r\n\t\t\t\t\tthis._surfaceGL.onClear(new AssetEvent(AssetEvent.CLEAR, this._surfaceGL.surface));\r\n\t\t\t}\r\n\r\n\t\t\tthis._surfaceGL = surfaceGL;\r\n\r\n\t\t\tthis._surfaceGL.usages++;\r\n\t\t}\r\n\r\n\t\t//create a cache of image & sampler objects for the renderable\r\n\t\tvar numImages:number = surfaceGL.numImages;\r\n\r\n\t\tthis.images.length = numImages;\r\n\t\tthis.samplers.length = numImages;\r\n\t\tthis.uvMatrix = this.renderable.style? this.renderable.style.uvMatrix : this._surfaceGL.surface.style? this._surfaceGL.surface.style.uvMatrix : null;\r\n\r\n\t\tvar numTextures:number = this._surfaceGL.surface.getNumTextures();\r\n\t\tvar texture:TextureBase;\r\n\t\tvar numImages:number;\r\n\t\tvar image:ImageBase;\r\n\t\tvar sampler:SamplerBase;\r\n\t\tvar index:number;\r\n\r\n\t\tfor (var i:number = 0; i < numTextures; i++) {\r\n\t\t\ttexture = this._surfaceGL.surface.getTextureAt(i);\r\n\t\t\tnumImages = texture.getNumImages();\r\n\t\t\tfor (var j:number = 0; j < numImages; j++) {\r\n\t\t\t\tindex = surfaceGL.getImageIndex(texture, j);\r\n\t\t\t\timage =  this.renderable.style? this.renderable.style.getImageAt(texture, j) : null;\r\n\t\t\t\tthis.images[index] = image? <GL_ImageBase> this._stage.getAbstraction(image) : null;\r\n\t\t\t\tsampler = this.renderable.style? this.renderable.style.getSamplerAt(texture, j) : null;\r\n\t\t\t\tthis.samplers[index] = sampler? <GL_SamplerBase> this._stage.getAbstraction(sampler) : null;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._surfaceDirty = false;\r\n\t}\r\n}",
    "import {AttributesBuffer}\t\t\t\tfrom \"awayjs-core/lib/attributes/AttributesBuffer\";\r\nimport {Matrix3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\r\nimport {Vector3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {ISurface}\t\t\t\t\t\tfrom \"awayjs-display/lib/base/ISurface\";\r\nimport {ElementsBase}\t\t\t\t\tfrom \"awayjs-display/lib/graphics/ElementsBase\";\r\nimport {TriangleElements}\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\r\nimport {Skybox}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Skybox\";\r\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\n\r\nimport {IContextGL}\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/IContextGL\";\r\nimport {ContextGLProgramType}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLProgramType\";\r\n\r\nimport {RendererBase}\t\t\t\t\tfrom \"../RendererBase\";\r\nimport {ShaderBase}\t\t\t\t\tfrom \"../shaders/ShaderBase\";\r\nimport {ShaderRegisterCache}\t\t\tfrom \"../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterData}\t\t\tfrom \"../shaders/ShaderRegisterData\";\r\nimport {ShaderRegisterElement}\t\tfrom \"../shaders/ShaderRegisterElement\";\r\nimport {GL_RenderableBase}\t\t\tfrom \"../renderables/GL_RenderableBase\";\r\nimport {GL_SurfaceBase}\t\t\t\tfrom \"../surfaces/GL_SurfaceBase\";\r\nimport {IPass}\t\t\t\t\t\tfrom \"../surfaces/passes/IPass\";\r\nimport {GL_SkyboxElements}\t\t\tfrom \"../elements/GL_SkyboxElements\";\r\n\r\n/**\r\n * @class away.pool.GL_SkyboxRenderable\r\n */\r\nexport class GL_SkyboxRenderable extends GL_RenderableBase\r\n{\r\n\t/**\r\n\t *\r\n\t */\r\n\tprivate static _elementsGL:GL_SkyboxElements;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tprivate _skybox:Skybox;\r\n\r\n\t/**\r\n\t * //TODO\r\n\t *\r\n\t * @param pool\r\n\t * @param skybox\r\n\t */\r\n\tconstructor(skybox:Skybox, renderer:RendererBase)\r\n\t{\r\n\t\tsuper(skybox, renderer);\r\n\r\n\t\tthis._skybox = skybox;\r\n\t}\r\n\r\n\t/**\r\n\t * //TODO\r\n\t *\r\n\t * @returns {away.base.TriangleElements}\r\n\t * @private\r\n\t */\r\n\tpublic _pGetElements():GL_SkyboxElements\r\n\t{\r\n\t\tvar elementsGL:GL_SkyboxElements = GL_SkyboxRenderable._elementsGL;\r\n\r\n\t\tif (!elementsGL) {\r\n\t\t\tvar elements:TriangleElements = new TriangleElements(new AttributesBuffer(11, 4));\r\n\t\t\telements.autoDeriveNormals = false;\r\n\t\t\telements.autoDeriveTangents = false;\r\n\t\t\telements.setIndices(Array<number>(0, 1, 2, 2, 3, 0, 6, 5, 4, 4, 7, 6, 2, 6, 7, 7, 3, 2, 4, 5, 1, 1, 0, 4, 4, 0, 3, 3, 7, 4, 2, 1, 5, 5, 6, 2));\r\n\t\t\telements.setPositions(Array<number>(-1, 1, -1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1));\r\n\r\n\t\t\telementsGL = GL_SkyboxRenderable._elementsGL = new GL_SkyboxElements(elements, this._stage);\r\n\t\t}\r\n\r\n\t\treturn elementsGL;\r\n\t}\r\n\r\n\tpublic _pGetSurface():GL_SurfaceBase\r\n\t{\r\n\t\treturn this._renderer.getSurfacePool(this.elementsGL).getAbstraction(this._skybox);\r\n\t}\r\n\r\n\tpublic static _iIncludeDependencies(shader:ShaderBase):void\r\n\t{\r\n\r\n\t}\r\n}",
    "export {GL_BillboardRenderable}\t\t\tfrom \"./renderables/GL_BillboardRenderable\";\r\nexport {GL_GraphicRenderable}\t\t\tfrom \"./renderables/GL_GraphicRenderable\";\r\nexport {GL_LineSegmentRenderable}\t\tfrom \"./renderables/GL_LineSegmentRenderable\";\r\nexport {GL_RenderableBase}\t\t\t\tfrom \"./renderables/GL_RenderableBase\";\r\nexport {GL_SkyboxRenderable}\t\t\t\tfrom \"./renderables/GL_SkyboxRenderable\";",
    "import {Matrix3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\r\nimport {Vector3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\nimport {DirectionalLight}\t\t\t\tfrom \"awayjs-display/lib/display/DirectionalLight\";\r\nimport {LightProbe}\t\t\t\t\tfrom \"awayjs-display/lib/display/LightProbe\";\r\nimport {PointLight}\t\t\t\t\tfrom \"awayjs-display/lib/display/PointLight\";\r\nimport {LightPickerBase}\t\t\t\tfrom \"awayjs-display/lib/materials/lightpickers/LightPickerBase\";\r\nimport {LightSources}\t\t\t\t\tfrom \"awayjs-display/lib/materials/LightSources\";\r\n\r\nimport {ContextGLProfile}\t\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLProfile\";\r\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\nimport {IContextGL}\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/IContextGL\";\r\nimport {GL_ImageBase}\t\t\t\t\tfrom \"awayjs-stagegl/lib/image/GL_ImageBase\";\r\n\r\nimport {ILightingPass}\t\t\t\tfrom \"../surfaces/passes/ILightingPass\";\r\n\r\nimport {ShaderBase}\t\t\t\t\tfrom \"../shaders/ShaderBase\";\r\nimport {CompilerBase}\t\t\t\t\tfrom \"../shaders/compilers/CompilerBase\";\r\nimport {LightingCompiler}\t\t\t\tfrom \"../shaders/compilers/LightingCompiler\";\r\nimport {IElementsClassGL}\t\t\t\tfrom \"../elements/IElementsClassGL\";\r\nimport {GL_RenderableBase}\t\t\tfrom \"../renderables/GL_RenderableBase\";\r\n\r\n/**\r\n * ShaderBase keeps track of the number of dependencies for \"named registers\" used across a pass.\r\n * Named registers are that are not necessarily limited to a single method. They are created by the compiler and\r\n * passed on to methods. The compiler uses the results to reserve usages through RegisterPool, which can be removed\r\n * each time a method has been compiled into the shader.\r\n *\r\n * @see RegisterPool.addUsage\r\n */\r\nexport class LightingShader extends ShaderBase\r\n{\r\n\tpublic _lightingPass:ILightingPass;\r\n\r\n\tprivate _includeCasters:boolean = true;\r\n\r\n\t/**\r\n\t * The first index for the fragment constants containing the light data.\r\n\t */\r\n\tpublic lightFragmentConstantIndex:number;\r\n\r\n\t/**\r\n\t * The starting index if the vertex constant to which light data needs to be uploaded.\r\n\t */\r\n\tpublic lightVertexConstantIndex:number;\r\n\r\n\t/**\r\n\t * Indices for the light probe diffuse textures.\r\n\t */\r\n\tpublic lightProbeDiffuseIndices:Array<number> /*uint*/;\r\n\r\n\t/**\r\n\t * Indices for the light probe specular textures.\r\n\t */\r\n\tpublic lightProbeSpecularIndices:Array<number> /*uint*/;\r\n\r\n\t/**\r\n\t * The index of the fragment constant containing the weights for the light probes.\r\n\t */\r\n\tpublic probeWeightsIndex:number;\r\n\r\n\tpublic numDirectionalLights:number;\r\n\tpublic numPointLights:number;\r\n\tpublic numLightProbes:number;\r\n\r\n\tpublic usesLightFallOff:boolean;\r\n\r\n\tpublic usesShadows:boolean;\r\n\r\n\t/**\r\n\t * Indicates whether the shader uses any lights.\r\n\t */\r\n\tpublic usesLights:boolean;\r\n\r\n\t/**\r\n\t * Indicates whether the shader uses any light probes.\r\n\t */\r\n\tpublic usesProbes:boolean;\r\n\r\n\t/**\r\n\t * Indicates whether the lights uses any specular components.\r\n\t */\r\n\tpublic usesLightsForSpecular:boolean;\r\n\r\n\t/**\r\n\t * Indicates whether the probes uses any specular components.\r\n\t */\r\n\tpublic usesProbesForSpecular:boolean;\r\n\r\n\t/**\r\n\t * Indicates whether the lights uses any diffuse components.\r\n\t */\r\n\tpublic usesLightsForDiffuse:boolean;\r\n\r\n\t/**\r\n\t * Indicates whether the probes uses any diffuse components.\r\n\t */\r\n\tpublic usesProbesForDiffuse:boolean;\r\n\r\n\t/**\r\n\t * Creates a new MethodCompilerVO object.\r\n\t */\r\n\tconstructor(elementsClass:IElementsClassGL, lightingPass:ILightingPass, stage:Stage)\r\n\t{\r\n\t\tsuper(elementsClass, lightingPass, stage);\r\n\r\n\t\tthis._lightingPass = lightingPass;\r\n\t}\r\n\r\n\tpublic _iIncludeDependencies():void\r\n\t{\r\n\t\tthis.numPointLights = this._lightingPass.numPointLights;\r\n\t\tthis.numDirectionalLights = this._lightingPass.numDirectionalLights;\r\n\t\tthis.numLightProbes = this._lightingPass.numLightProbes;\r\n\r\n\t\tvar numAllLights:number = this._lightingPass.numPointLights + this._lightingPass.numDirectionalLights;\r\n\t\tvar numLightProbes:number = this._lightingPass.numLightProbes;\r\n\t\tvar diffuseLightSources:number = this._lightingPass._iUsesDiffuse(this)? this._lightingPass.diffuseLightSources : 0x00;\r\n\t\tvar specularLightSources:number = this._lightingPass._iUsesSpecular(this)? this._lightingPass.specularLightSources : 0x00;\r\n\t\tvar combinedLightSources:number = diffuseLightSources | specularLightSources;\r\n\r\n\t\tthis.usesLightFallOff = this._lightingPass.enableLightFallOff && this.profile != ContextGLProfile.BASELINE_CONSTRAINED;\r\n\t\tthis.usesCommonData = this.usesLightFallOff;\r\n\t\tthis.numLights = numAllLights + numLightProbes;\r\n\t\tthis.usesLights = numAllLights > 0 && (combinedLightSources & LightSources.LIGHTS) != 0;\r\n\t\tthis.usesProbes = numLightProbes > 0 && (combinedLightSources & LightSources.PROBES) != 0;\r\n\t\tthis.usesLightsForSpecular = numAllLights > 0 && (specularLightSources & LightSources.LIGHTS) != 0;\r\n\t\tthis.usesProbesForSpecular = numLightProbes > 0 && (specularLightSources & LightSources.PROBES) != 0;\r\n\t\tthis.usesLightsForDiffuse = numAllLights > 0 && (diffuseLightSources & LightSources.LIGHTS) != 0;\r\n\t\tthis.usesProbesForDiffuse = numLightProbes > 0 && (diffuseLightSources & LightSources.PROBES) != 0;\r\n\t\tthis.usesShadows = this._lightingPass._iUsesShadows(this);\r\n\r\n\t\t//IMPORTANT this must occur after shader lighting initialisation above\r\n\t\tsuper._iIncludeDependencies();\r\n\t}\r\n\r\n\t/**\r\n\t * Factory method to create a concrete compiler object for this object\r\n\t *\r\n\t * @param materialPassVO\r\n\t * @returns {away.materials.LightingCompiler}\r\n\t */\r\n\tpublic createCompiler(elementsClass:IElementsClassGL, pass:ILightingPass):CompilerBase\r\n\t{\r\n\t\treturn new LightingCompiler(elementsClass, pass, this);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t *\r\n\t * @param renderable\r\n\t * @param stage\r\n\t * @param camera\r\n\t */\r\n\tpublic _setRenderState(renderable:GL_RenderableBase, camera:Camera, viewProjection:Matrix3D):void\r\n\t{\r\n\t\tsuper._setRenderState(renderable, camera, viewProjection);\r\n\r\n\t\tif (this._lightingPass.lightPicker)\r\n\t\t\tthis._lightingPass.lightPicker.collectLights(renderable.sourceEntity);\r\n\r\n\t\tif (this.usesLights)\r\n\t\t\tthis.updateLights();\r\n\r\n\t\tif (this.usesProbes)\r\n\t\t\tthis.updateProbes();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates constant data render state used by the lights. This method is optional for subclasses to implement.\r\n\t */\r\n\tprivate updateLights():void\r\n\t{\r\n\t\tvar dirLight:DirectionalLight;\r\n\t\tvar pointLight:PointLight;\r\n\t\tvar i:number = 0;\r\n\t\tvar k:number = 0;\r\n\t\tvar len:number;\r\n\t\tvar dirPos:Vector3D;\r\n\t\tvar total:number = 0;\r\n\t\tvar numLightTypes:number = this.usesShadows? 2 : 1;\r\n\t\tvar l:number;\r\n\t\tvar offset:number;\r\n\r\n\t\tthis.ambientR = this.ambientG = this.ambientB = 0;\r\n\r\n\t\tl = this.lightVertexConstantIndex;\r\n\t\tk = this.lightFragmentConstantIndex;\r\n\r\n\t\tvar cast:number = 0;\r\n\t\tvar dirLights:Array<DirectionalLight> = this._lightingPass.lightPicker.directionalLights;\r\n\t\toffset = this._lightingPass.directionalLightsOffset;\r\n\t\tlen = this._lightingPass.lightPicker.directionalLights.length;\r\n\r\n\t\tif (offset > len) {\r\n\t\t\tcast = 1;\r\n\t\t\toffset -= len;\r\n\t\t}\r\n\r\n\t\tfor (; cast < numLightTypes; ++cast) {\r\n\t\t\tif (cast)\r\n\t\t\t\tdirLights = this._lightingPass.lightPicker.castingDirectionalLights;\r\n\r\n\t\t\tlen = dirLights.length;\r\n\r\n\t\t\tif (len > this.numDirectionalLights)\r\n\t\t\t\tlen = this.numDirectionalLights;\r\n\r\n\t\t\tfor (i = 0; i < len; ++i) {\r\n\t\t\t\tdirLight = dirLights[offset + i];\r\n\t\t\t\tdirPos = dirLight.sceneDirection;\r\n\r\n\t\t\t\tthis.ambientR += dirLight._iAmbientR;\r\n\t\t\t\tthis.ambientG += dirLight._iAmbientG;\r\n\t\t\t\tthis.ambientB += dirLight._iAmbientB;\r\n\r\n\t\t\t\tif (this.usesTangentSpace) {\r\n\t\t\t\t\tvar x:number = -dirPos.x;\r\n\t\t\t\t\tvar y:number = -dirPos.y;\r\n\t\t\t\t\tvar z:number = -dirPos.z;\r\n\r\n\t\t\t\t\tthis.vertexConstantData[l++] = this._pInverseSceneMatrix[0]*x + this._pInverseSceneMatrix[4]*y + this._pInverseSceneMatrix[8]*z;\r\n\t\t\t\t\tthis.vertexConstantData[l++] = this._pInverseSceneMatrix[1]*x + this._pInverseSceneMatrix[5]*y + this._pInverseSceneMatrix[9]*z;\r\n\t\t\t\t\tthis.vertexConstantData[l++] = this._pInverseSceneMatrix[2]*x + this._pInverseSceneMatrix[6]*y + this._pInverseSceneMatrix[10]*z;\r\n\t\t\t\t\tthis.vertexConstantData[l++] = 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.fragmentConstantData[k++] = -dirPos.x;\r\n\t\t\t\t\tthis.fragmentConstantData[k++] = -dirPos.y;\r\n\t\t\t\t\tthis.fragmentConstantData[k++] = -dirPos.z;\r\n\t\t\t\t\tthis.fragmentConstantData[k++] = 1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.fragmentConstantData[k++] = dirLight._iDiffuseR;\r\n\t\t\t\tthis.fragmentConstantData[k++] = dirLight._iDiffuseG;\r\n\t\t\t\tthis.fragmentConstantData[k++] = dirLight._iDiffuseB;\r\n\t\t\t\tthis.fragmentConstantData[k++] = 1;\r\n\r\n\t\t\t\tthis.fragmentConstantData[k++] = dirLight._iSpecularR;\r\n\t\t\t\tthis.fragmentConstantData[k++] = dirLight._iSpecularG;\r\n\t\t\t\tthis.fragmentConstantData[k++] = dirLight._iSpecularB;\r\n\t\t\t\tthis.fragmentConstantData[k++] = 1;\r\n\r\n\t\t\t\tif (++total == this.numDirectionalLights) {\r\n\t\t\t\t\t// break loop\r\n\t\t\t\t\ti = len;\r\n\t\t\t\t\tcast = numLightTypes;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// more directional supported than currently picked, need to clamp all to 0\r\n\t\tif (this.numDirectionalLights > total) {\r\n\t\t\ti = k + (this.numDirectionalLights - total)*12;\r\n\r\n\t\t\twhile (k < i)\r\n\t\t\t\tthis.fragmentConstantData[k++] = 0;\r\n\t\t}\r\n\r\n\t\ttotal = 0;\r\n\r\n\t\tvar pointLights:Array<PointLight> = this._lightingPass.lightPicker.pointLights;\r\n\t\toffset = this._lightingPass.pointLightsOffset;\r\n\t\tlen = this._lightingPass.lightPicker.pointLights.length;\r\n\r\n\t\tif (offset > len) {\r\n\t\t\tcast = 1;\r\n\t\t\toffset -= len;\r\n\t\t} else {\r\n\t\t\tcast = 0;\r\n\t\t}\r\n\r\n\t\tfor (; cast < numLightTypes; ++cast) {\r\n\t\t\tif (cast)\r\n\t\t\t\tpointLights = this._lightingPass.lightPicker.castingPointLights;\r\n\r\n\t\t\tlen = pointLights.length;\r\n\r\n\t\t\tfor (i = 0; i < len; ++i) {\r\n\t\t\t\tpointLight = pointLights[offset + i];\r\n\t\t\t\tdirPos = pointLight.scenePosition;\r\n\r\n\t\t\t\tthis.ambientR += pointLight._iAmbientR;\r\n\t\t\t\tthis.ambientG += pointLight._iAmbientG;\r\n\t\t\t\tthis.ambientB += pointLight._iAmbientB;\r\n\r\n\t\t\t\tif (this.usesTangentSpace) {\r\n\t\t\t\t\tx = dirPos.x;\r\n\t\t\t\t\ty = dirPos.y;\r\n\t\t\t\t\tz = dirPos.z;\r\n\r\n\t\t\t\t\tthis.vertexConstantData[l++] = this._pInverseSceneMatrix[0]*x + this._pInverseSceneMatrix[4]*y + this._pInverseSceneMatrix[8]*z + this._pInverseSceneMatrix[12];\r\n\t\t\t\t\tthis.vertexConstantData[l++] = this._pInverseSceneMatrix[1]*x + this._pInverseSceneMatrix[5]*y + this._pInverseSceneMatrix[9]*z + this._pInverseSceneMatrix[13];\r\n\t\t\t\t\tthis.vertexConstantData[l++] = this._pInverseSceneMatrix[2]*x + this._pInverseSceneMatrix[6]*y + this._pInverseSceneMatrix[10]*z + this._pInverseSceneMatrix[14];\r\n\t\t\t\t\tthis.vertexConstantData[l++] = 1;\r\n\t\t\t\t} else if (!this.usesGlobalPosFragment) {\r\n\t\t\t\t\tthis.vertexConstantData[l++] = dirPos.x;\r\n\t\t\t\t\tthis.vertexConstantData[l++] = dirPos.y;\r\n\t\t\t\t\tthis.vertexConstantData[l++] = dirPos.z;\r\n\t\t\t\t\tthis.vertexConstantData[l++] = 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.fragmentConstantData[k++] = dirPos.x;\r\n\t\t\t\t\tthis.fragmentConstantData[k++] = dirPos.y;\r\n\t\t\t\t\tthis.fragmentConstantData[k++] = dirPos.z;\r\n\t\t\t\t\tthis.fragmentConstantData[k++] = 1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.fragmentConstantData[k++] = pointLight._iDiffuseR;\r\n\t\t\t\tthis.fragmentConstantData[k++] = pointLight._iDiffuseG;\r\n\t\t\t\tthis.fragmentConstantData[k++] = pointLight._iDiffuseB;\r\n\r\n\t\t\t\tvar radius:number = pointLight._pRadius;\r\n\t\t\t\tthis.fragmentConstantData[k++] = radius*radius;\r\n\r\n\t\t\t\tthis.fragmentConstantData[k++] = pointLight._iSpecularR;\r\n\t\t\t\tthis.fragmentConstantData[k++] = pointLight._iSpecularG;\r\n\t\t\t\tthis.fragmentConstantData[k++] = pointLight._iSpecularB;\r\n\t\t\t\tthis.fragmentConstantData[k++] = pointLight._pFallOffFactor;\r\n\r\n\t\t\t\tif (++total == this.numPointLights) {\r\n\t\t\t\t\t// break loop\r\n\t\t\t\t\ti = len;\r\n\t\t\t\t\tcast = numLightTypes;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// more directional supported than currently picked, need to clamp all to 0\r\n\t\tif (this.numPointLights > total) {\r\n\t\t\ti = k + (total - this.numPointLights)*12;\r\n\r\n\t\t\tfor (; k < i; ++k)\r\n\t\t\t\tthis.fragmentConstantData[k] = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates constant data render state used by the light probes. This method is optional for subclasses to implement.\r\n\t */\r\n\tprivate updateProbes():void\r\n\t{\r\n\t\tvar probe:LightProbe;\r\n\t\tvar lightProbes:Array<LightProbe> = this._lightingPass.lightPicker.lightProbes;\r\n\t\tvar weights:Array<number> = this._lightingPass.lightPicker.lightProbeWeights;\r\n\t\tvar len:number = lightProbes.length - this._lightingPass.lightProbesOffset;\r\n\t\tvar addDiff:boolean = this.usesProbesForDiffuse;\r\n\t\tvar addSpec:boolean = this.usesProbesForSpecular;\r\n\r\n\t\tif (!(addDiff || addSpec))\r\n\t\t\treturn;\r\n\r\n\t\tif (len > this.numLightProbes)\r\n\t\t\tlen = this.numLightProbes;\r\n\r\n\t\tfor (var i:number = 0; i < len; ++i) {\r\n\t\t\tprobe = lightProbes[ this._lightingPass.lightProbesOffset + i];\r\n\r\n\t\t\tif (addDiff)\r\n\t\t\t\t(<GL_ImageBase> this._stage.getAbstraction(probe.diffuseMap)).activate(this.lightProbeDiffuseIndices[i], probe.diffuseSampler.mipmap);\r\n\r\n\t\t\tif (addSpec)\r\n\t\t\t\t(<GL_ImageBase> this._stage.getAbstraction(probe.specularMap)).activate(this.lightProbeSpecularIndices[i], probe.diffuseSampler.mipmap);\r\n\t\t}\r\n\r\n\t\tfor (i = 0; i < len; ++i)\r\n\t\t\tthis.fragmentConstantData[this.probeWeightsIndex + i] = weights[this._lightingPass.lightProbesOffset + i];\r\n\t}\r\n}",
    "import {ShaderRegisterElement}\t\tfrom \"../shaders/ShaderRegisterElement\";\r\n\r\n/**\r\n * RegisterPool is used by the shader compilers process to keep track of which registers of a certain type are\r\n * currently used and should not be allowed to be written to. Either entire registers can be requested and locked,\r\n * or single components (x, y, z, w) of a single register.\r\n * It is used by ShaderRegisterCache to track usages of individual register types.\r\n *\r\n * @see away.materials.ShaderRegisterCache\r\n */\r\nexport class RegisterPool\r\n{\r\n\tprivate static _regPool:Object = new Object();\r\n\tprivate static _regCompsPool:Object = new Object();\r\n\r\n\tprivate _vectorRegisters:Array<ShaderRegisterElement>;\r\n\tprivate _registerComponents;\r\n\r\n\tprivate _regName:string;\r\n\tprivate _usedSingleCount:Array<Array<number>>;\r\n\tprivate _usedVectorCount:Array<number> /*uint*/;\r\n\tprivate _regCount:number;\r\n\r\n\tprivate _persistent:boolean;\r\n\r\n\t/**\r\n\t * Creates a new RegisterPool object.\r\n\t * @param regName The base name of the register type (\"ft\" for fragment temporaries, \"vc\" for vertex constants, etc)\r\n\t * @param regCount The amount of available registers of this type.\r\n\t * @param persistent Whether or not registers, once reserved, can be freed again. For example, temporaries are not persistent, but constants are.\r\n\t */\r\n\tconstructor(regName:string, regCount:number, persistent:boolean = true)\r\n\t{\r\n\t\tthis._regName = regName;\r\n\t\tthis._regCount = regCount;\r\n\t\tthis._persistent = persistent;\r\n\t\tthis.initRegisters(regName, regCount);\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieve an entire vector register that's still available.\r\n\t */\r\n\tpublic requestFreeVectorReg():ShaderRegisterElement\r\n\t{\r\n\t\tfor (var i:number = 0; i < this._regCount; ++i) {\r\n\t\t\tif (!this.isRegisterUsed(i)) {\r\n\t\t\t\tif (this._persistent)\r\n\t\t\t\t\tthis._usedVectorCount[i]++;\r\n\r\n\t\t\t\treturn this._vectorRegisters[i];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthrow new Error(\"Register overflow!\");\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieve a single vector component that's still available.\r\n\t */\r\n\tpublic requestFreeRegComponent():ShaderRegisterElement\r\n\t{\r\n\t\tfor (var i:number = 0; i < this._regCount; ++i) {\r\n\t\t\tif (this._usedVectorCount[i] > 0)\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\tfor (var j:number = 0; j < 4; ++j) {\r\n\t\t\t\tif (this._usedSingleCount[j][i] == 0) {\r\n\t\t\t\t\tif (this._persistent)\r\n\t\t\t\t\t\tthis._usedSingleCount[j][i]++;\r\n\r\n\t\t\t\t\treturn this._registerComponents[j][i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthrow new Error(\"Register overflow!\");\r\n\t}\r\n\r\n\t/**\r\n\t * Marks a register as used, so it cannot be retrieved. The register won't be able to be used until removeUsage\r\n\t * has been called usageCount times again.\r\n\t * @param register The register to mark as used.\r\n\t * @param usageCount The amount of usages to add.\r\n\t */\r\n\tpublic addUsage(register:ShaderRegisterElement, usageCount:number):void\r\n\t{\r\n\t\tif (register._component > -1)\r\n\t\t\tthis._usedSingleCount[register._component][register.index] += usageCount;\r\n\t\telse\r\n\t\t\tthis._usedVectorCount[register.index] += usageCount;\r\n\t}\r\n\r\n\t/**\r\n\t * Removes a usage from a register. When usages reach 0, the register is freed again.\r\n\t * @param register The register for which to remove a usage.\r\n\t */\r\n\tpublic removeUsage(register:ShaderRegisterElement):void\r\n\t{\r\n\t\tif (register._component > -1) {\r\n\t\t\tif (--this._usedSingleCount[register._component][register.index] < 0)\r\n\t\t\t\tthrow new Error(\"More usages removed than exist!\");\r\n\t\t} else {\r\n\t\t\tif (--this._usedVectorCount[register.index] < 0)\r\n\t\t\t\tthrow new Error(\"More usages removed than exist!\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Disposes any resources used by the current RegisterPool object.\r\n\t */\r\n\tpublic dispose():void\r\n\t{\r\n\t\tthis._vectorRegisters = null;\r\n\t\tthis._registerComponents = null;\r\n\t\tthis._usedSingleCount = null;\r\n\t\tthis._usedVectorCount = null;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether or not any registers are in use.\r\n\t */\r\n\tpublic hasRegisteredRegs():boolean\r\n\t{\r\n\t\tfor (var i:number = 0; i < this._regCount; ++i)\r\n\t\t\tif (this.isRegisterUsed(i))\r\n\t\t\t\treturn true;\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes all registers.\r\n\t */\r\n\tprivate initRegisters(regName:string, regCount:number):void\r\n\t{\r\n\t\tvar hash:string = RegisterPool._initPool(regName, regCount);\r\n\r\n\t\tthis._vectorRegisters = RegisterPool._regPool[hash];\r\n\t\tthis._registerComponents = RegisterPool._regCompsPool[hash];\r\n\r\n\t\tthis._usedVectorCount = this._initArray(Array<number>(regCount), 0);\r\n\r\n\t\tthis._usedSingleCount = new Array<Array<number>>(4);\r\n\t\tthis._usedSingleCount[0] = this._initArray(new Array<number>(regCount), 0);\r\n\t\tthis._usedSingleCount[1] = this._initArray(new Array<number>(regCount), 0);\r\n\t\tthis._usedSingleCount[2] = this._initArray(new Array<number>(regCount), 0);\r\n\t\tthis._usedSingleCount[3] = this._initArray(new Array<number>(regCount), 0);\r\n\t}\r\n\r\n\tprivate static _initPool(regName:string, regCount:number):string\r\n\t{\r\n\t\tvar hash:string = regName + regCount;\r\n\r\n\t\tif (RegisterPool._regPool[hash] != undefined)\r\n\t\t\treturn hash;\r\n\r\n\t\tvar vectorRegisters:Array<ShaderRegisterElement> = new Array<ShaderRegisterElement>(regCount);\r\n\t\tRegisterPool._regPool[hash] = vectorRegisters;\r\n\r\n\t\tvar registerComponents = [\r\n\t\t\t[],\r\n\t\t\t[],\r\n\t\t\t[],\r\n\t\t\t[]\r\n\t\t];\r\n\t\tRegisterPool._regCompsPool[hash] = registerComponents;\r\n\r\n\t\tfor (var i:number = 0; i < regCount; ++i) {\r\n\r\n\t\t\tvectorRegisters[i] = new ShaderRegisterElement(regName, i);\r\n\r\n\t\t\tfor (var j:number = 0; j < 4; ++j)\r\n\t\t\t\tregisterComponents[j][i] = new ShaderRegisterElement(regName, i, j);\r\n\t\t}\r\n\r\n\t\treturn hash;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Check if the temp register is either used for single or vector use\r\n\t */\r\n\tprivate isRegisterUsed(index:number):boolean\r\n\t{\r\n\t\tif (this._usedVectorCount[index] > 0)\r\n\t\t\treturn true;\r\n\r\n\t\tfor (var i:number = 0; i < 4; ++i)\r\n\t\t\tif (this._usedSingleCount[i][index] > 0)\r\n\t\t\t\treturn true;\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tprivate _initArray(a:Array<any>, val:any):Array<any>\r\n\t{\r\n\t\tvar l:number = a.length;\r\n\r\n\t\tfor (var c:number = 0; c < l; c++)\r\n\t\t\ta[c] = val;\r\n\r\n\t\treturn a;\r\n\t}\r\n}\r\n",
    "import {BlendMode}\t\t\t\t\tfrom \"awayjs-core/lib/image/BlendMode\";\r\nimport {Matrix}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix\";\r\nimport {Matrix3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\r\nimport {Vector3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\nimport {ColorTransform}\t\t\t\tfrom \"awayjs-core/lib/geom/ColorTransform\";\r\nimport {ArgumentError}\t\t\t\tfrom \"awayjs-core/lib/errors/ArgumentError\";\r\nimport {IAssetClass}\t\t\t\t\tfrom \"awayjs-core/lib/library/IAssetClass\";\r\nimport {IAbstractionPool}\t\t\t\tfrom \"awayjs-core/lib/library/IAbstractionPool\";\r\n\r\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\nimport {TextureBase}\t\t\t\t\tfrom \"awayjs-display/lib/textures/TextureBase\";\r\n\r\nimport {ContextGLBlendFactor}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLBlendFactor\";\r\nimport {ContextGLCompareMode}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLCompareMode\";\r\nimport {ContextGLTriangleFace}\t\tfrom \"awayjs-stagegl/lib/base/ContextGLTriangleFace\";\r\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\nimport {ProgramData}\t\t\t\t\tfrom \"awayjs-stagegl/lib/image/ProgramData\";\r\nimport {GL_IAssetClass}\t\t\t\tfrom \"awayjs-stagegl/lib/library/GL_IAssetClass\";\r\n\r\nimport {AnimationSetBase}\t\t\t\tfrom \"../animators/AnimationSetBase\";\r\nimport {AnimatorBase}\t\t\t\t\tfrom \"../animators/AnimatorBase\";\r\nimport {AnimationRegisterData}\t\tfrom \"../animators/data/AnimationRegisterData\";\r\nimport {IPass}\t\t\t\t\t\tfrom \"../surfaces/passes/IPass\";\r\nimport {IElementsClassGL}\t\t\t\tfrom \"../elements/IElementsClassGL\";\r\nimport {GL_ElementsBase}\t\t\t\tfrom \"../elements/GL_ElementsBase\";\r\nimport {GL_RenderableBase}\t\t\tfrom \"../renderables/GL_RenderableBase\";\r\nimport {CompilerBase}\t\t\t\t\tfrom \"../shaders/compilers/CompilerBase\";\r\nimport {ShaderRegisterCache}\t\t\tfrom \"../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterData}\t\t\tfrom \"../shaders/ShaderRegisterData\";\r\nimport {ShaderRegisterElement}\t\tfrom \"../shaders/ShaderRegisterElement\";\r\nimport {GL_TextureBase}\t\t\t\tfrom \"../textures/GL_TextureBase\";\r\n\r\n/**\r\n * ShaderBase keeps track of the number of dependencies for \"named registers\" used across a pass.\r\n * Named registers are that are not necessarily limited to a single method. They are created by the compiler and\r\n * passed on to methods. The compiler uses the results to reserve usages through RegisterPool, which can be removed\r\n * each time a method has been compiled into the shader.\r\n *\r\n * @see RegisterPool.addUsage\r\n */\r\nexport class ShaderBase implements IAbstractionPool\r\n{\r\n\tpublic static _abstractionClassPool:Object = new Object();\r\n\r\n\tprivate _abstractionPool:Object = new Object();\r\n\r\n\tprivate _elementsClass:IElementsClassGL;\r\n\tprivate _pass:IPass;\r\n\tpublic _stage:Stage;\r\n\tprivate _programData:ProgramData;\r\n\r\n\tprivate _blendFactorSource:string = ContextGLBlendFactor.ONE;\r\n\tprivate _blendFactorDest:string = ContextGLBlendFactor.ZERO;\r\n\t\r\n\tprivate _invalidProgram:boolean = true;\r\n\tprivate _animationVertexCode:string = \"\";\r\n\tprivate _animationFragmentCode:string = \"\";\r\n\tprivate _numUsedVertexConstants:number;\r\n\tprivate _numUsedFragmentConstants:number;\r\n\tprivate _numUsedStreams:number;\r\n\tprivate _numUsedTextures:number;\r\n\tprivate _usesAnimation:boolean;\r\n\r\n\tpublic get programData():ProgramData\r\n\t{\r\n\t\tif (this._invalidProgram)\r\n\t\t\tthis._updateProgram();\r\n\r\n\t\treturn this._programData;\r\n\t}\r\n\r\n\tpublic usesBlending:boolean = false;\r\n\r\n\tpublic useImageRect:boolean = false;\r\n\r\n\tpublic usesCurves:boolean = false;\r\n\r\n\t/**\r\n\t * The depth compare mode used to render the renderables using this material.\r\n\t *\r\n\t * @see away.stagegl.ContextGLCompareMode\r\n\t */\r\n\tpublic depthCompareMode:string = ContextGLCompareMode.LESS;\r\n\r\n\r\n\t/**\r\n\t * Indicate whether the shader should write to the depth buffer or not. Ignored when blending is enabled.\r\n\t */\r\n\tpublic writeDepth:boolean = true;\r\n\r\n\tpublic profile:string;\r\n\r\n\tpublic get usesAnimation():boolean\r\n\t{\r\n\t\treturn this._usesAnimation;\r\n\t}\r\n\r\n\tpublic set usesAnimation(value:boolean)\r\n\t{\r\n\t\tif (this._usesAnimation == value)\r\n\t\t\treturn;\r\n\r\n\t\tthis._usesAnimation = value;\r\n\r\n\t\tthis.invalidateProgram();\r\n\t}\r\n\r\n\tprivate _defaultCulling:string = ContextGLTriangleFace.BACK;\r\n\r\n\tpublic _pInverseSceneMatrix:Float32Array = new Float32Array(16);\r\n\r\n\tpublic animationRegisterData:AnimationRegisterData;\r\n\r\n\t\r\n\tpublic get numUsedVertexConstants():number\r\n\t{\r\n\t\tif (this._invalidProgram)\r\n\t\t\tthis._updateProgram();\r\n\t\t\r\n\t\treturn this._numUsedVertexConstants;\r\n\t}\r\n\r\n\tpublic get numUsedFragmentConstants():number\r\n\t{\r\n\t\tif (this._invalidProgram)\r\n\t\t\tthis._updateProgram();\r\n\t\t\r\n\t\treturn this._numUsedFragmentConstants;\r\n\t}\r\n\t\r\n\t/**\r\n\t * The amount of used vertex streams in the vertex code. Used by the animation code generation to know from which index on streams are available.\r\n\t */\r\n\tpublic get numUsedStreams():number\r\n\t{\r\n\t\tif (this._invalidProgram)\r\n\t\t\tthis._updateProgram();\r\n\r\n\t\treturn this._numUsedStreams;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic get numUsedTextures():number\r\n\t{\r\n\t\tif (this._invalidProgram)\r\n\t\t\tthis._updateProgram();\r\n\r\n\t\treturn this._numUsedTextures;\r\n\t}\r\n\r\n\tpublic numLights:number;\r\n\r\n\tpublic useAlphaPremultiplied:boolean;\r\n\tpublic useBothSides:boolean;\r\n\tpublic usesUVTransform:boolean;\r\n\tpublic usesColorTransform:boolean;\r\n\tpublic alphaThreshold:number;\r\n\r\n\r\n\t//set ambient values to default\r\n\tpublic ambientR:number = 0xFF;\r\n\tpublic ambientG:number = 0xFF;\r\n\tpublic ambientB:number = 0xFF;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic usesCommonData:boolean;\r\n\r\n\t/**\r\n\t * Indicates whether the pass requires any fragment animation code.\r\n\t */\r\n\tpublic usesFragmentAnimation:boolean;\r\n\r\n\t/**\r\n\t * The amount of dependencies on the projected position.\r\n\t */\r\n\tpublic projectionDependencies:number;\r\n\r\n\t/**\r\n\t * The amount of dependencies on the normal vector.\r\n\t */\r\n\tpublic normalDependencies:number;\r\n\r\n\t/**\r\n\t * The amount of dependencies on the vertex color.\r\n\t */\r\n\tpublic colorDependencies:number;\r\n\r\n\t/**\r\n\t * The amount of dependencies on the view direction.\r\n\t */\r\n\tpublic viewDirDependencies:number;\r\n\r\n\t/**\r\n\t * The amount of dependencies on the primary UV coordinates.\r\n\t */\r\n\tpublic uvDependencies:number;\r\n\r\n\t/**\r\n\t * The amount of dependencies on the secondary UV coordinates.\r\n\t */\r\n\tpublic secondaryUVDependencies:number;\r\n\r\n\t/**\r\n\t * The amount of dependencies on the global position. This can be 0 while hasGlobalPosDependencies is true when\r\n\t * the global position is used as a temporary value (fe to calculate the view direction)\r\n\t */\r\n\tpublic globalPosDependencies:number;\r\n\r\n\t/**\r\n\t * The amount of tangent vector dependencies (fragment shader).\r\n\t */\r\n\tpublic tangentDependencies:number;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic outputsColors:boolean;\r\n\r\n\t/**\r\n\t * Indicates whether or not normals are output.\r\n\t */\r\n\tpublic outputsNormals:boolean;\r\n\r\n\t/**\r\n\t * Indicates whether or not normal calculations are output in tangent space.\r\n\t */\r\n\tpublic outputsTangentNormals:boolean;\r\n\r\n\t/**\r\n\t * Indicates whether or not normal calculations are expected in tangent space. This is only the case if no world-space\r\n\t * dependencies exist and normals are being output.\r\n\t */\r\n\tpublic usesTangentSpace:boolean;\r\n\r\n\t/**\r\n\t * Indicates whether there are any dependencies on the world-space position vector.\r\n\t */\r\n\tpublic usesGlobalPosFragment:boolean = false;\r\n\r\n\t/**\r\n\t * Indicates whether there are any dependencies on the local position vector.\r\n\t */\r\n\tpublic usesPositionFragment:boolean = false;\r\n\r\n\tpublic vertexConstantData:Float32Array;\r\n\tpublic fragmentConstantData:Float32Array;\r\n\r\n\t/**\r\n\t * The index for the common data register.\r\n\t */\r\n\tpublic commonsDataIndex:number;\r\n\r\n\t/**\r\n\t * The index for the curve vertex attribute stream.\r\n\t */\r\n\tpublic curvesIndex:number;\r\n\r\n\t/**\r\n\t * The index for the UV vertex attribute stream.\r\n\t */\r\n\tpublic uvIndex:number;\r\n\r\n\t/**\r\n\t * The index for the secondary UV vertex attribute stream.\r\n\t */\r\n\tpublic secondaryUVIndex:number;\r\n\r\n\t/**\r\n\t * The index for the vertex normal attribute stream.\r\n\t */\r\n\tpublic normalIndex:number;\r\n\r\n\t/**\r\n\t * The index for the color attribute stream.\r\n\t */\r\n\tpublic colorBufferIndex:number;\r\n\r\n\t/**\r\n\t * The index for the vertex tangent attribute stream.\r\n\t */\r\n\tpublic tangentIndex:number;\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n\tpublic skyboxScaleIndex:number;\r\n\t\r\n\t/**\r\n\t * \r\n\t */\r\n\tpublic scenePositionIndex:number;\r\n\t\r\n\t/**\r\n\t * The index of the vertex constant containing the view matrix.\r\n\t */\r\n\tpublic viewMatrixIndex:number;\r\n\r\n\t/**\r\n\t * The index of the vertex constant containing the scene matrix.\r\n\t */\r\n\tpublic sceneMatrixIndex:number;\r\n\r\n\t/**\r\n\t * The index of the vertex constant containing the uniform scene matrix (the inverse transpose).\r\n\t */\r\n\tpublic sceneNormalMatrixIndex:number;\r\n\r\n\t/**\r\n\t * The index of the vertex constant containing the camera position.\r\n\t */\r\n\tpublic cameraPositionIndex:number;\r\n\r\n\t/**\r\n\t * The index for the UV transformation matrix vertex constant.\r\n\t */\r\n\tpublic uvMatrixIndex:number;\r\n\r\n\t/**\r\n\t * The index for the color transform fragment constant.\r\n\t */\r\n\tpublic colorTransformIndex:number;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic jointIndexIndex:number;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic jointWeightIndex:number;\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic imageIndices:Array<number> = new Array<number>();\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n\tpublic activeElements:GL_ElementsBase;\r\n\r\n\t/**\r\n\t * Creates a new MethodCompilerVO object.\r\n\t */\r\n\tconstructor(elementsClass:IElementsClassGL, pass:IPass, stage:Stage)\r\n\t{\r\n\t\tthis._elementsClass = elementsClass;\r\n\t\tthis._pass = pass;\r\n\t\tthis._stage = stage;\r\n\r\n\t\tthis.profile = this._stage.profile;\r\n\t}\r\n\r\n\tpublic getAbstraction(texture:TextureBase):GL_TextureBase\r\n\t{\r\n\t\treturn (this._abstractionPool[texture.id] || (this._abstractionPool[texture.id] = new (<GL_IAssetClass> ShaderBase._abstractionClassPool[texture.assetType])(texture, this)));\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param image\r\n\t */\r\n\tpublic clearAbstraction(texture:TextureBase):void\r\n\t{\r\n\t\tthis._abstractionPool[texture.id] = null;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param imageObjectClass\r\n\t */\r\n\tpublic static registerAbstraction(gl_assetClass:GL_IAssetClass, assetClass:IAssetClass):void\r\n\t{\r\n\t\tShaderBase._abstractionClassPool[assetClass.assetType] = gl_assetClass;\r\n\t}\r\n\r\n\tpublic getImageIndex(texture:TextureBase, index:number = 0):number\r\n\t{\r\n\t\treturn this._pass.getImageIndex(texture, index);\r\n\t}\r\n\r\n\tpublic _iIncludeDependencies():void\r\n\t{\r\n\t\tthis._pass._iIncludeDependencies(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Factory method to create a concrete compiler object for this object\r\n\t *\r\n\t * @param elementsClass\r\n\t * @param pass\r\n\t * @param stage\r\n\t * @returns {CompilerBase}\r\n\t */\r\n\tpublic createCompiler(elementsClass:IElementsClassGL, pass:IPass):CompilerBase\r\n\t{\r\n\t\treturn new CompilerBase(elementsClass, pass, this);\r\n\t}\r\n\r\n\t/**\r\n\t * Clears dependency counts for all registers. Called when recompiling a pass.\r\n\t */\r\n\tpublic reset():void\r\n\t{\r\n\t\tthis.projectionDependencies = 0;\r\n\t\tthis.normalDependencies = 0;\r\n\t\tthis.colorDependencies = 0;\r\n\t\tthis.viewDirDependencies = 0;\r\n\t\tthis.uvDependencies = 0;\r\n\t\tthis.secondaryUVDependencies = 0;\r\n\t\tthis.globalPosDependencies = 0;\r\n\t\tthis.tangentDependencies = 0;\r\n\t\tthis.usesCommonData = false;\r\n\t\tthis.usesGlobalPosFragment = false;\r\n\t\tthis.usesPositionFragment = false;\r\n\t\tthis.usesFragmentAnimation = false;\r\n\t\tthis.usesTangentSpace = false;\r\n\t\tthis.outputsNormals = false;\r\n\t\tthis.outputsTangentNormals = false;\r\n\t}\r\n\r\n\tpublic pInitRegisterIndices():void\r\n\t{\r\n\t\tthis.commonsDataIndex = -1;\r\n\t\tthis.cameraPositionIndex = -1;\r\n\t\tthis.curvesIndex = -1;\r\n\t\tthis.uvIndex = -1;\r\n\t\tthis.uvMatrixIndex = -1;\r\n\t\tthis.colorTransformIndex = -1;\r\n\t\tthis.secondaryUVIndex = -1;\r\n\t\tthis.normalIndex = -1;\r\n\t\tthis.colorBufferIndex = -1;\r\n\t\tthis.tangentIndex = -1;\r\n\t\tthis.sceneMatrixIndex = -1;\r\n\t\tthis.sceneNormalMatrixIndex = -1;\r\n\t\tthis.jointIndexIndex = -1;\r\n\t\tthis.jointWeightIndex = -1;\r\n\t\tthis.imageIndices.length = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes the unchanging constant data for this shader object.\r\n\t */\r\n\tpublic initConstantData(registerCache:ShaderRegisterCache):void\r\n\t{\r\n\t\t//Updates the amount of used register indices.\r\n\t\tthis._numUsedVertexConstants = registerCache.numUsedVertexConstants;\r\n\t\tthis._numUsedFragmentConstants = registerCache.numUsedFragmentConstants;\r\n\t\tthis._numUsedStreams = registerCache.numUsedStreams;\r\n\t\tthis._numUsedTextures = registerCache.numUsedTextures;\r\n\r\n\t\tthis.vertexConstantData = new Float32Array(registerCache.numUsedVertexConstants*4);\r\n\t\tthis.fragmentConstantData = new Float32Array(registerCache.numUsedFragmentConstants*4);\r\n\r\n\t\t//Initializes commonly required constant values.\r\n\t\tif (this.commonsDataIndex >= 0) {\r\n\t\t\tthis.fragmentConstantData[this.commonsDataIndex] = .5;\r\n\t\t\tthis.fragmentConstantData[this.commonsDataIndex + 1] = 0;\r\n\t\t\tthis.fragmentConstantData[this.commonsDataIndex + 2] = 1/255;\r\n\t\t\tthis.fragmentConstantData[this.commonsDataIndex + 3] = 1;\r\n\t\t}\r\n\r\n\t\t//Initializes the default UV transformation matrix.\r\n\t\tif (this.uvMatrixIndex >= 0) {\r\n\t\t\tthis.vertexConstantData[this.uvMatrixIndex] = 1;\r\n\t\t\tthis.vertexConstantData[this.uvMatrixIndex + 1] = 0;\r\n\t\t\tthis.vertexConstantData[this.uvMatrixIndex + 2] = 0;\r\n\t\t\tthis.vertexConstantData[this.uvMatrixIndex + 3] = 0;\r\n\t\t\tthis.vertexConstantData[this.uvMatrixIndex + 4] = 0;\r\n\t\t\tthis.vertexConstantData[this.uvMatrixIndex + 5] = 1;\r\n\t\t\tthis.vertexConstantData[this.uvMatrixIndex + 6] = 0;\r\n\t\t\tthis.vertexConstantData[this.uvMatrixIndex + 7] = 0;\r\n\t\t}\r\n\r\n\t\t//Initializes the default colorTransform.\r\n\t\tif (this.colorTransformIndex >= 0) {\r\n\t\t\tthis.fragmentConstantData[this.colorTransformIndex] = 1;\r\n\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 1] = 1;\r\n\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 2] = 1;\r\n\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 3] = 1;\r\n\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 4] = 0;\r\n\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 5] = 0;\r\n\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 6] = 0;\r\n\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 7] = 0;\r\n\t\t}\r\n\t\tif (this.cameraPositionIndex >= 0)\r\n\t\t\tthis.vertexConstantData[this.cameraPositionIndex + 3] = 1;\r\n\t\t\r\n\t\t// init constant data in pass\r\n\t\tthis._pass._iInitConstantData(this);\r\n\t\t\r\n\t\t//init constant data in animation\r\n\t\tif (this.usesAnimation)\r\n\t\t\tthis._pass.animationSet.doneAGALCode(this);\r\n\t}\r\n\r\n\t/**\r\n\t * The blend mode to use when drawing this renderable. The following blend modes are supported:\r\n\t * <ul>\r\n\t * <li>BlendMode.NORMAL: No blending, unless the material inherently needs it</li>\r\n\t * <li>BlendMode.LAYER: Force blending. This will draw the object the same as NORMAL, but without writing depth writes.</li>\r\n\t * <li>BlendMode.MULTIPLY</li>\r\n\t * <li>BlendMode.ADD</li>\r\n\t * <li>BlendMode.ALPHA</li>\r\n\t * </ul>\r\n\t */\r\n\tpublic setBlendMode(value:string):void\r\n\t{\r\n\t\tswitch (value) {\r\n\t\t\tcase BlendMode.NORMAL:\r\n\t\t\t\tthis._blendFactorSource = ContextGLBlendFactor.ONE;\r\n\t\t\t\tthis._blendFactorDest = ContextGLBlendFactor.ZERO;\r\n\t\t\t\tthis.usesBlending = false;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase BlendMode.LAYER:\r\n\t\t\t\tthis._blendFactorSource = ContextGLBlendFactor.SOURCE_ALPHA;\r\n\t\t\t\tthis._blendFactorDest = ContextGLBlendFactor.ONE_MINUS_SOURCE_ALPHA;\r\n\t\t\t\tthis.usesBlending = true;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase BlendMode.MULTIPLY:\r\n\t\t\t\tthis._blendFactorSource = ContextGLBlendFactor.ZERO;\r\n\t\t\t\tthis._blendFactorDest = ContextGLBlendFactor.SOURCE_COLOR;\r\n\t\t\t\tthis.usesBlending = true;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase BlendMode.ADD:\r\n\t\t\t\tthis._blendFactorSource = ContextGLBlendFactor.SOURCE_ALPHA;\r\n\t\t\t\tthis._blendFactorDest = ContextGLBlendFactor.ONE;\r\n\t\t\t\tthis.usesBlending = true;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase BlendMode.ALPHA:\r\n\t\t\t\tthis._blendFactorSource = ContextGLBlendFactor.ZERO;\r\n\t\t\t\tthis._blendFactorDest = ContextGLBlendFactor.SOURCE_ALPHA;\r\n\t\t\t\tthis.usesBlending = true;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new ArgumentError(\"Unsupported blend mode!\");\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iActivate(camera:Camera):void\r\n\t{\r\n\t\tthis._stage.context.setCulling(this.useBothSides? ContextGLTriangleFace.NONE : this._defaultCulling, camera.projection.coordinateSystem);\r\n\r\n\t\tif (!this.usesTangentSpace && this.cameraPositionIndex >= 0) {\r\n\t\t\tvar pos:Vector3D = camera.scenePosition;\r\n\r\n\t\t\tthis.vertexConstantData[this.cameraPositionIndex] = pos.x;\r\n\t\t\tthis.vertexConstantData[this.cameraPositionIndex + 1] = pos.y;\r\n\t\t\tthis.vertexConstantData[this.cameraPositionIndex + 2] = pos.z;\r\n\t\t}\r\n\r\n\t\tthis._stage.context.setDepthTest(( this.writeDepth && !this.usesBlending ), this.depthCompareMode);\r\n\r\n\t\tif (this.usesBlending)\r\n\t\t\tthis._stage.context.setBlendFactors(this._blendFactorSource, this._blendFactorDest);\r\n\r\n\t\tthis.activeElements = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iDeactivate():void\r\n\t{\r\n\t\t//For the love of god don't remove this if you want your multi-material shadows to not flicker like shit\r\n\t\tthis._stage.context.setDepthTest(true, ContextGLCompareMode.LESS);\r\n\r\n\t\tthis.activeElements = null;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t *\r\n\t * @param renderable\r\n\t * @param stage\r\n\t * @param camera\r\n\t */\r\n\tpublic _setRenderState(renderable:GL_RenderableBase, camera:Camera, viewProjection:Matrix3D):void\r\n\t{\r\n\t\tif (renderable.renderable.animator)\r\n\t\t\t(<AnimatorBase> renderable.renderable.animator).setRenderState(this, renderable, this._stage, camera);\r\n\r\n\t\tif (this.usesUVTransform) {\r\n\t\t\tvar uvMatrix:Matrix = renderable.uvMatrix;\r\n\r\n\t\t\tif (uvMatrix) {\r\n\t\t\t\t//transpose\r\n\t\t\t\tvar rawData:Float32Array = uvMatrix.rawData;\r\n\t\t\t\tthis.vertexConstantData[this.uvMatrixIndex] = rawData[0];\r\n\t\t\t\tthis.vertexConstantData[this.uvMatrixIndex + 1] = rawData[2];\r\n\t\t\t\tthis.vertexConstantData[this.uvMatrixIndex + 3] = rawData[4];\r\n\t\t\t\tthis.vertexConstantData[this.uvMatrixIndex + 4] = rawData[1];\r\n\t\t\t\tthis.vertexConstantData[this.uvMatrixIndex + 5] = rawData[3];\r\n\t\t\t\tthis.vertexConstantData[this.uvMatrixIndex + 7] = rawData[5];\r\n\t\t\t} else {\r\n\t\t\t\tthis.vertexConstantData[this.uvMatrixIndex] = 1;\r\n\t\t\t\tthis.vertexConstantData[this.uvMatrixIndex + 1] = 0;\r\n\t\t\t\tthis.vertexConstantData[this.uvMatrixIndex + 3] = 0;\r\n\t\t\t\tthis.vertexConstantData[this.uvMatrixIndex + 4] = 0;\r\n\t\t\t\tthis.vertexConstantData[this.uvMatrixIndex + 5] = 1;\r\n\t\t\t\tthis.vertexConstantData[this.uvMatrixIndex + 7] = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.usesColorTransform) {\r\n\r\n\t\t\tvar colorTransform:ColorTransform = renderable.sourceEntity._iAssignedColorTransform();\r\n\r\n\t\t\tif (colorTransform) {\r\n\t\t\t\t//TODO: AWDParser to write normalised color offsets\r\n\t\t\t\tthis.fragmentConstantData[this.colorTransformIndex] = colorTransform.rawData[0];\r\n\t\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 1] = colorTransform.rawData[1];\r\n\t\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 2] = colorTransform.rawData[2];\r\n\t\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 3] = colorTransform.rawData[3];\r\n\t\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 4] = colorTransform.rawData[4]/255;\r\n\t\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 5] = colorTransform.rawData[5]/255;\r\n\t\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 6] = colorTransform.rawData[6]/255;\r\n\t\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 7] = colorTransform.rawData[7]/255;\r\n\t\t\t} else {\r\n\t\t\t\tthis.fragmentConstantData[this.colorTransformIndex] = 1;\r\n\t\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 1] = 1;\r\n\t\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 2] = 1;\r\n\t\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 3] = 1;\r\n\t\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 4] = 0;\r\n\t\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 5] = 0;\r\n\t\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 6] = 0;\r\n\t\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 7] = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.sceneNormalMatrixIndex >= 0)\r\n\t\t\trenderable.sourceEntity.inverseSceneTransform.copyRawDataTo(this.vertexConstantData, this.sceneNormalMatrixIndex, false);\r\n\r\n\t\tif (this.usesTangentSpace && this.cameraPositionIndex >= 0) {\r\n\r\n\t\t\trenderable.sourceEntity.inverseSceneTransform.copyRawDataTo(this._pInverseSceneMatrix);\r\n\t\t\tvar pos:Vector3D = camera.scenePosition;\r\n\t\t\tvar x:number = pos.x;\r\n\t\t\tvar y:number = pos.y;\r\n\t\t\tvar z:number = pos.z;\r\n\r\n\t\t\tthis.vertexConstantData[this.cameraPositionIndex] = this._pInverseSceneMatrix[0]*x + this._pInverseSceneMatrix[4]*y + this._pInverseSceneMatrix[8]*z + this._pInverseSceneMatrix[12];\r\n\t\t\tthis.vertexConstantData[this.cameraPositionIndex + 1] = this._pInverseSceneMatrix[1]*x + this._pInverseSceneMatrix[5]*y + this._pInverseSceneMatrix[9]*z + this._pInverseSceneMatrix[13];\r\n\t\t\tthis.vertexConstantData[this.cameraPositionIndex + 2] = this._pInverseSceneMatrix[2]*x + this._pInverseSceneMatrix[6]*y + this._pInverseSceneMatrix[10]*z + this._pInverseSceneMatrix[14];\r\n\t\t}\r\n\t}\r\n\r\n\tpublic invalidateProgram():void\r\n\t{\r\n\t\tthis._invalidProgram = true;\r\n\t}\r\n\r\n\tpublic dispose():void\r\n\t{\r\n\t\tthis._programData.dispose();\r\n\t\tthis._programData = null;\r\n\t}\r\n\r\n\tprivate _updateProgram():void\r\n\t{\r\n\t\tthis._invalidProgram = false;\r\n\r\n\t\tvar compiler:CompilerBase = this.createCompiler(this._elementsClass, this._pass);\r\n\t\tcompiler.compile();\r\n\r\n\t\tthis._calcAnimationCode(compiler._pRegisterCache, compiler.shadedTarget, compiler._pSharedRegisters);\r\n\r\n\t\t//initialise the required shader constants\r\n\t\tthis.initConstantData(compiler._pRegisterCache);\r\n\t\t\r\n\t\tvar programData:ProgramData = this._stage.getProgramData(this._animationVertexCode + compiler.vertexCode, compiler.fragmentCode + this._animationFragmentCode + compiler.postAnimationFragmentCode);\r\n\r\n\t\t//check program data hasn't changed, keep count of program usages\r\n\t\tif (this._programData != programData) {\r\n\t\t\tif (this._programData)\r\n\t\t\t\tthis._programData.dispose();\r\n\r\n\t\t\tthis._programData = programData;\r\n\r\n\t\t\tprogramData.usages++;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _calcAnimationCode(registerCache:ShaderRegisterCache, shadedTarget:ShaderRegisterElement, sharedRegisters:ShaderRegisterData):void\r\n\t{\r\n\t\t//reset code\r\n\t\tthis._animationVertexCode = \"\";\r\n\t\tthis._animationFragmentCode = \"\";\r\n\r\n\t\t//check to see if GPU animation is used\r\n\t\tif (this.usesAnimation) {\r\n\r\n\t\t\tvar animationSet:AnimationSetBase = <AnimationSetBase> this._pass.animationSet;\r\n\r\n\t\t\tthis._animationVertexCode += animationSet.getAGALVertexCode(this, registerCache, sharedRegisters);\r\n\r\n\t\t\tif (this.uvDependencies > 0 && !this.usesUVTransform)\r\n\t\t\t\tthis._animationVertexCode += animationSet.getAGALUVCode(this, registerCache, sharedRegisters);\r\n\r\n\t\t\tif (this.usesFragmentAnimation)\r\n\t\t\t\tthis._animationFragmentCode += animationSet.getAGALFragmentCode(this, registerCache, shadedTarget);\r\n\t\t} else {\r\n\t\t\t// simply write attributes to targets, do not animate them\r\n\t\t\t// projection will pick up on targets[0] to do the projection\r\n\t\t\tvar len:number = sharedRegisters.animatableAttributes.length;\r\n\t\t\tfor (var i:number = 0; i < len; ++i)\r\n\t\t\t\tthis._animationVertexCode += \"mov \" + sharedRegisters.animationTargetRegisters[i] + \", \" + sharedRegisters.animatableAttributes[i] + \"\\n\";\r\n\r\n\t\t\tif (this.uvDependencies > 0 && !this.usesUVTransform)\r\n\t\t\t\tthis._animationVertexCode += \"mov \" + sharedRegisters.uvTarget + \",\" + sharedRegisters.uvSource + \"\\n\";\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tpublic setVertexConst(index:number, x:number = 0, y:number = 0, z:number = 0, w:number = 0):void\r\n\t{\r\n\t\tindex *= 4;\r\n\t\tthis.vertexConstantData[index++] = x;\r\n\t\tthis.vertexConstantData[index++] = y;\r\n\t\tthis.vertexConstantData[index++] = z;\r\n\t\tthis.vertexConstantData[index] = w;\r\n\t}\r\n\r\n\tpublic setVertexConstFromArray(index:number, data:Float32Array):void\r\n\t{\r\n\t\tindex *= 4;\r\n\t\tfor (var i:number /*int*/ = 0; i < data.length; i++)\r\n\t\t\tthis.vertexConstantData[index++] = data[i];\r\n\t}\r\n\r\n\tpublic setVertexConstFromMatrix(index:number, matrix:Matrix3D):void\r\n\t{\r\n\t\tindex *= 4;\r\n\t\tvar rawData:Float32Array = matrix.rawData;\r\n\t\tthis.vertexConstantData[index++] = rawData[0];\r\n\t\tthis.vertexConstantData[index++] = rawData[4];\r\n\t\tthis.vertexConstantData[index++] = rawData[8];\r\n\t\tthis.vertexConstantData[index++] = rawData[12];\r\n\t\tthis.vertexConstantData[index++] = rawData[1];\r\n\t\tthis.vertexConstantData[index++] = rawData[5];\r\n\t\tthis.vertexConstantData[index++] = rawData[9];\r\n\t\tthis.vertexConstantData[index++] = rawData[13];\r\n\t\tthis.vertexConstantData[index++] = rawData[2];\r\n\t\tthis.vertexConstantData[index++] = rawData[6];\r\n\t\tthis.vertexConstantData[index++] = rawData[10];\r\n\t\tthis.vertexConstantData[index++] = rawData[14];\r\n\t\tthis.vertexConstantData[index++] = rawData[3];\r\n\t\tthis.vertexConstantData[index++] = rawData[7];\r\n\t\tthis.vertexConstantData[index++] = rawData[11];\r\n\t\tthis.vertexConstantData[index] = rawData[15];\r\n\r\n\t}\r\n\r\n\tpublic setFragmentConst(index:number, x:number = 0, y:number = 0, z:number = 0, w:number = 0):void\r\n\t{\r\n\t\tindex *= 4;\r\n\t\tthis.fragmentConstantData[index++] = x;\r\n\t\tthis.fragmentConstantData[index++] = y;\r\n\t\tthis.fragmentConstantData[index++] = z;\r\n\t\tthis.fragmentConstantData[index] = w;\r\n\t}\r\n}",
    "import {RegisterPool}\t\t\t\t\tfrom \"../shaders/RegisterPool\";\r\nimport {ShaderRegisterElement}\t\tfrom \"../shaders/ShaderRegisterElement\";\r\n\r\n/**\r\n * ShaderRegister Cache provides the usage management system for all registers during shading compilers.\r\n */\r\nexport class ShaderRegisterCache\r\n{\r\n\tprivate _fragmentTempCache:RegisterPool;\r\n\tprivate _vertexTempCache:RegisterPool;\r\n\tprivate _varyingCache:RegisterPool;\r\n\tprivate _fragmentConstantsCache:RegisterPool;\r\n\tprivate _vertexConstantsCache:RegisterPool;\r\n\tprivate _textureCache:RegisterPool;\r\n\tprivate _vertexAttributesCache:RegisterPool;\r\n\r\n\tprivate _fragmentOutputRegister:ShaderRegisterElement;\r\n\tprivate _vertexOutputRegister:ShaderRegisterElement;\r\n\tprivate _numUsedVertexConstants:number = 0;\r\n\tprivate _numUsedFragmentConstants:number = 0;\r\n\tprivate _numUsedStreams:number = 0;\r\n\tprivate _numUsedTextures:number = 0;\r\n\tprivate _numUsedVaryings:number = 0;\r\n\tprivate _profile:string;\r\n\r\n\t/**\r\n\t * Create a new ShaderRegisterCache object.\r\n\t *\r\n\t * @param profile The compatibility profile used by the renderer.\r\n\t */\r\n\tconstructor(profile:string)\r\n\t{\r\n\t\tthis._profile = profile;\r\n\t\t\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\t/**\r\n\t * Resets all registers.\r\n\t */\r\n\tpublic reset():void\r\n\t{\r\n\t\tthis._fragmentTempCache = new RegisterPool(\"ft\", 8, false);\r\n\t\tthis._vertexTempCache = new RegisterPool(\"vt\", 8, false);\r\n\t\tthis._varyingCache = new RegisterPool(\"v\", 8);\r\n\t\tthis._textureCache = new RegisterPool(\"fs\", 8);\r\n\t\tthis._vertexAttributesCache = new RegisterPool(\"va\", 8);\r\n\t\tthis._fragmentConstantsCache = new RegisterPool(\"fc\", 28);\r\n\t\tthis._vertexConstantsCache = new RegisterPool(\"vc\", 128);\r\n\t\tthis._fragmentOutputRegister = new ShaderRegisterElement(\"oc\", -1);\r\n\t\tthis._vertexOutputRegister = new ShaderRegisterElement(\"op\", -1);\r\n\t\tthis._numUsedVertexConstants = 0;\r\n\t\tthis._numUsedStreams = 0;\r\n\t\tthis._numUsedTextures = 0;\r\n\t\tthis._numUsedVaryings = 0;\r\n\t\tthis._numUsedFragmentConstants = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Disposes all resources used.\r\n\t */\r\n\tpublic dispose():void\r\n\t{\r\n\t\tthis._fragmentTempCache.dispose();\r\n\t\tthis._vertexTempCache.dispose();\r\n\t\tthis._varyingCache.dispose();\r\n\t\tthis._fragmentConstantsCache.dispose();\r\n\t\tthis._vertexAttributesCache.dispose();\r\n\r\n\t\tthis._fragmentTempCache = null;\r\n\t\tthis._vertexTempCache = null;\r\n\t\tthis._varyingCache = null;\r\n\t\tthis._fragmentConstantsCache = null;\r\n\t\tthis._vertexAttributesCache = null;\r\n\t\tthis._fragmentOutputRegister = null;\r\n\t\tthis._vertexOutputRegister = null;\r\n\t}\r\n\r\n\t/**\r\n\t * Marks a fragment temporary register as used, so it cannot be retrieved. The register won't be able to be used until removeUsage\r\n\t * has been called usageCount times again.\r\n\t * @param register The register to mark as used.\r\n\t * @param usageCount The amount of usages to add.\r\n\t */\r\n\tpublic addFragmentTempUsages(register:ShaderRegisterElement, usageCount:number):void\r\n\t{\r\n\t\tthis._fragmentTempCache.addUsage(register, usageCount);\r\n\t}\r\n\r\n\t/**\r\n\t * Removes a usage from a fragment temporary register. When usages reach 0, the register is freed again.\r\n\t * @param register The register for which to remove a usage.\r\n\t */\r\n\tpublic removeFragmentTempUsage(register:ShaderRegisterElement):void\r\n\t{\r\n\t\tthis._fragmentTempCache.removeUsage(register);\r\n\t}\r\n\r\n\t/**\r\n\t * Marks a vertex temporary register as used, so it cannot be retrieved. The register won't be able to be used\r\n\t * until removeUsage has been called usageCount times again.\r\n\t * @param register The register to mark as used.\r\n\t * @param usageCount The amount of usages to add.\r\n\t */\r\n\tpublic addVertexTempUsages(register:ShaderRegisterElement, usageCount:number):void\r\n\t{\r\n\t\tthis._vertexTempCache.addUsage(register, usageCount);\r\n\t}\r\n\r\n\t/**\r\n\t * Removes a usage from a vertex temporary register. When usages reach 0, the register is freed again.\r\n\t * @param register The register for which to remove a usage.\r\n\t */\r\n\tpublic removeVertexTempUsage(register:ShaderRegisterElement):void\r\n\t{\r\n\t\tthis._vertexTempCache.removeUsage(register);\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieve an entire fragment temporary register that's still available. The register won't be able to be used until removeUsage\r\n\t * has been called usageCount times again.\r\n\t */\r\n\tpublic getFreeFragmentVectorTemp():ShaderRegisterElement\r\n\t{\r\n\t\treturn this._fragmentTempCache.requestFreeVectorReg();\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieve a single component from a fragment temporary register that's still available.\r\n\t */\r\n\tpublic getFreeFragmentSingleTemp():ShaderRegisterElement\r\n\t{\r\n\t\treturn this._fragmentTempCache.requestFreeRegComponent();\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieve an available varying register\r\n\t */\r\n\tpublic getFreeVarying():ShaderRegisterElement\r\n\t{\r\n\t\t++this._numUsedVaryings;\r\n\t\treturn this._varyingCache.requestFreeVectorReg();\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieve an available fragment constant register\r\n\t */\r\n\tpublic getFreeFragmentConstant():ShaderRegisterElement\r\n\t{\r\n\t\t++this._numUsedFragmentConstants;\r\n\t\treturn this._fragmentConstantsCache.requestFreeVectorReg();\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieve an available vertex constant register\r\n\t */\r\n\tpublic getFreeVertexConstant():ShaderRegisterElement\r\n\t{\r\n\t\t++this._numUsedVertexConstants;\r\n\t\treturn this._vertexConstantsCache.requestFreeVectorReg();\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieve an entire vertex temporary register that's still available.\r\n\t */\r\n\tpublic getFreeVertexVectorTemp():ShaderRegisterElement\r\n\t{\r\n\t\treturn this._vertexTempCache.requestFreeVectorReg();\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieve a single component from a vertex temporary register that's still available.\r\n\t */\r\n\tpublic getFreeVertexSingleTemp():ShaderRegisterElement\r\n\t{\r\n\t\treturn this._vertexTempCache.requestFreeRegComponent();\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieve an available vertex attribute register\r\n\t */\r\n\tpublic getFreeVertexAttribute():ShaderRegisterElement\r\n\t{\r\n\t\t++this._numUsedStreams;\r\n\t\treturn this._vertexAttributesCache.requestFreeVectorReg();\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieve an available texture register\r\n\t */\r\n\tpublic getFreeTextureReg():ShaderRegisterElement\r\n\t{\r\n\t\t++this._numUsedTextures;\r\n\t\treturn this._textureCache.requestFreeVectorReg();\r\n\t}\r\n\r\n\t/**\r\n\t * The fragment output register.\r\n\t */\r\n\tpublic get fragmentOutputRegister():ShaderRegisterElement\r\n\t{\r\n\t\treturn this._fragmentOutputRegister;\r\n\t}\r\n\r\n\t/**\r\n\t * The amount of used vertex constant registers.\r\n\t */\r\n\tpublic get numUsedVertexConstants():number\r\n\t{\r\n\t\treturn this._numUsedVertexConstants;\r\n\t}\r\n\r\n\t/**\r\n\t * The amount of used fragment constant registers.\r\n\t */\r\n\tpublic get numUsedFragmentConstants():number\r\n\t{\r\n\t\treturn this._numUsedFragmentConstants;\r\n\t}\r\n\r\n\t/**\r\n\t * The amount of used vertex streams.\r\n\t */\r\n\tpublic get numUsedStreams():number\r\n\t{\r\n\t\treturn this._numUsedStreams;\r\n\t}\r\n\r\n\t/**\r\n\t * The amount of used texture slots.\r\n\t */\r\n\tpublic get numUsedTextures():number\r\n\t{\r\n\t\treturn this._numUsedTextures;\r\n\t}\r\n\r\n\t/**\r\n\t * The amount of used varying registers.\r\n\t */\r\n\tpublic get numUsedVaryings():number\r\n\t{\r\n\t\treturn this._numUsedVaryings;\r\n\t}\r\n}",
    "import {ShaderRegisterElement}\t\tfrom \"../shaders/ShaderRegisterElement\";\r\n\r\n/**\r\n * ShaderRegisterData contains the \"named\" registers, generated by the compiler and to be passed on to the methods.\r\n */\r\nexport class ShaderRegisterData\r\n{\r\n\tpublic uvVarying:ShaderRegisterElement;\r\n\tpublic secondaryUVVarying:ShaderRegisterElement;\r\n\tpublic shadowTarget:ShaderRegisterElement;\r\n\tpublic shadedTarget:ShaderRegisterElement;\r\n\tpublic globalPositionVertex:ShaderRegisterElement;\r\n\tpublic globalPositionVarying:ShaderRegisterElement;\r\n\r\n\tpublic animatedPosition:ShaderRegisterElement;\r\n\tpublic positionVarying:ShaderRegisterElement;\r\n\r\n\tpublic curvesInput:ShaderRegisterElement;\r\n\tpublic curvesVarying:ShaderRegisterElement;\r\n\r\n\tpublic normalInput:ShaderRegisterElement;\r\n\tpublic animatedNormal:ShaderRegisterElement;\r\n\tpublic normalVarying:ShaderRegisterElement;\r\n\tpublic normalFragment:ShaderRegisterElement;\r\n\r\n\tpublic tangentInput:ShaderRegisterElement;\r\n\tpublic animatedTangent:ShaderRegisterElement;\r\n\tpublic tangentVarying:ShaderRegisterElement;\r\n\tpublic bitangentVarying:ShaderRegisterElement;\r\n\r\n\tpublic colorInput:ShaderRegisterElement;\r\n\tpublic colorVarying:ShaderRegisterElement;\r\n\r\n\tpublic commons:ShaderRegisterElement;\r\n\tpublic projectionFragment:ShaderRegisterElement;\r\n\r\n\tpublic viewDirVarying:ShaderRegisterElement;\r\n\tpublic viewDirFragment:ShaderRegisterElement;\r\n\tpublic bitangent:ShaderRegisterElement;\r\n\r\n\tpublic textures:Array<ShaderRegisterElement> = new Array<ShaderRegisterElement>();\r\n\r\n\tpublic animatableAttributes:Array<ShaderRegisterElement> = new Array<ShaderRegisterElement>();\r\n\tpublic animationTargetRegisters:Array<ShaderRegisterElement> = new Array<ShaderRegisterElement>();\r\n\tpublic uvSource:ShaderRegisterElement;\r\n\tpublic uvTarget:ShaderRegisterElement;\r\n\r\n\tconstructor()\r\n\t{\r\n\r\n\t}\r\n}",
    "/**\r\n * A single register element (an entire register or a single register's component) used by the RegisterPool.\r\n */\r\nexport class ShaderRegisterElement\r\n{\r\n\tprivate _regName:string;\r\n\tprivate _index:number;\r\n\tprivate _toStr:string;\r\n\r\n\tprivate static COMPONENTS = [\"x\", \"y\", \"z\", \"w\"];\r\n\r\n\tpublic _component:number;\r\n\r\n\t/**\r\n\t * Creates a new ShaderRegisterElement object.\r\n\t *\r\n\t * @param regName The name of the register.\r\n\t * @param index The index of the register.\r\n\t * @param component The register's component, if not the entire register is represented.\r\n\t */\r\n\tconstructor(regName:string, index:number, component:number = -1)\r\n\t{\r\n\t\tthis._component = component;\r\n\t\tthis._regName = regName;\r\n\t\tthis._index = index;\r\n\r\n\t\tthis._toStr = this._regName;\r\n\r\n\t\tif (this._index >= 0)\r\n\t\t\tthis._toStr += this._index;\r\n\r\n\t\tif (component > -1)\r\n\t\t\tthis._toStr += \".\" + ShaderRegisterElement.COMPONENTS[component];\r\n\t}\r\n\r\n\t/**\r\n\t * Converts the register or the components AGAL string representation.\r\n\t */\r\n\tpublic toString():string\r\n\t{\r\n\t\treturn this._toStr;\r\n\t}\r\n\r\n\t/**\r\n\t * The register's name.\r\n\t */\r\n\tpublic get regName():string\r\n\t{\r\n\t\treturn this._regName;\r\n\t}\r\n\r\n\t/**\r\n\t * The register's index.\r\n\t */\r\n\tpublic get index():number\r\n\t{\r\n\t\treturn this._index;\r\n\t}\r\n}",
    "import {ShaderBase}\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\nimport {ShaderRegisterCache}\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterData}\t\t\tfrom \"../../shaders/ShaderRegisterData\";\r\nimport {ShaderRegisterElement}\t\tfrom \"../../shaders/ShaderRegisterElement\";\r\nimport {IPass}\t\t\t\t\t\tfrom \"../../surfaces/passes/IPass\";\r\nimport {IElementsClassGL}\t\t\t\tfrom \"../../elements/IElementsClassGL\";\r\n\r\n/**\r\n * CompilerBase is an abstract base class for shader compilers that use modular shader methods to assemble a\r\n * material. Concrete subclasses are used by the default materials.\r\n *\r\n * @see away.materials.ShadingMethodBase\r\n */\r\nexport class CompilerBase\r\n{\r\n\tpublic _pShader:ShaderBase;\r\n\tpublic _pSharedRegisters:ShaderRegisterData;\r\n\tpublic _pRegisterCache:ShaderRegisterCache;\r\n\tpublic _pElementsClass:IElementsClassGL;\r\n\tpublic _pRenderPass:IPass;\r\n\r\n\tpublic _pVertexCode:string = ''; // Changed to emtpy string- AwayTS\r\n\tpublic _pFragmentCode:string = '';// Changed to emtpy string - AwayTS\r\n\tpublic _pPostAnimationFragmentCode:string = '';// Changed to emtpy string - AwayTS\r\n\r\n\t/**\r\n\t * Creates a new CompilerBase object.\r\n\t * @param profile The compatibility profile of the renderer.\r\n\t */\r\n\tconstructor(elementsClass:IElementsClassGL, pass:IPass, shader:ShaderBase)\r\n\t{\r\n\t\tthis._pElementsClass = elementsClass;\r\n\t\tthis._pRenderPass = pass;\r\n\t\tthis._pShader = shader;\r\n\r\n\t\tthis._pSharedRegisters = new ShaderRegisterData();\r\n\r\n\t\tthis._pRegisterCache = new ShaderRegisterCache(shader.profile);\r\n\t}\r\n\r\n\t/**\r\n\t * Compiles the code after all setup on the compiler has finished.\r\n\t */\r\n\tpublic compile():void\r\n\t{\r\n\t\tthis._pShader.reset();\r\n\r\n\t\tthis._pShader._iIncludeDependencies();\r\n\r\n\t\tthis.pInitRegisterIndices();\r\n\r\n\t\tthis.pCompileDependencies();\r\n\r\n\t\t//compile custom vertex & fragment codes\r\n\t\tthis._pVertexCode += this._pRenderPass._iGetVertexCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\r\n\t\tthis._pPostAnimationFragmentCode += this._pRenderPass._iGetFragmentCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\r\n\r\n\t\tif (this._pShader.usesColorTransform)\r\n\t\t\tthis.compileColorTransformCode();\r\n\t\telse\r\n\t\t\tthis._pShader.colorTransformIndex = -1;\r\n\r\n\t\t//assign the final output color to the output register\r\n\t\tthis._pPostAnimationFragmentCode += \"mov \" + this._pRegisterCache.fragmentOutputRegister + \", \" + this._pSharedRegisters.shadedTarget + \"\\n\";\r\n\t\tthis._pRegisterCache.removeFragmentTempUsage(this._pSharedRegisters.shadedTarget);\r\n\t}\r\n\t/**\r\n\t * Calculate the transformed colours\r\n\t */\r\n\tprivate compileColorTransformCode():void\r\n\t{\r\n\t\t// rm, gm, bm, am - multiplier\r\n\t\t// ro, go, bo, ao - offset\r\n\t\tvar ct1:ShaderRegisterElement = this._pRegisterCache.getFreeFragmentConstant();\r\n\t\tvar ct2:ShaderRegisterElement = this._pRegisterCache.getFreeFragmentConstant();\r\n\t\tthis._pShader.colorTransformIndex = ct1.index*4;\r\n\t\tthis._pPostAnimationFragmentCode += \"mul \" + this._pSharedRegisters.shadedTarget + \", \" + this._pSharedRegisters.shadedTarget + \", \" + ct1 + \"\\n\";\r\n\t\tthis._pPostAnimationFragmentCode += \"add \" + this._pSharedRegisters.shadedTarget + \", \" + this._pSharedRegisters.shadedTarget + \", \" + ct2 + \"\\n\";\r\n\t}\r\n\t/**\r\n\t * Compile the code for the methods.\r\n\t */\r\n\tpublic pCompileDependencies():void\r\n\t{\r\n\t\tthis._pSharedRegisters.shadedTarget = this._pRegisterCache.getFreeFragmentVectorTemp();\r\n\t\tthis._pRegisterCache.addFragmentTempUsages(this._pSharedRegisters.shadedTarget, 1);\r\n\r\n\t\t//compile the world-space position if required\r\n\t\tif (this._pShader.globalPosDependencies > 0)\r\n\t\t\tthis.compileGlobalPositionCode();\r\n\r\n        //compile the local-space position if required\r\n        if (this._pShader.usesPositionFragment)\r\n            this.compilePositionCode();\r\n\r\n\t\tif (this._pShader.usesCurves)\r\n\t\t\tthis.compileCurvesCode();\r\n\r\n\t\t//Calculate the (possibly animated) UV coordinates.\r\n\t\tif (this._pShader.uvDependencies > 0)\r\n\t\t\tthis.compileUVCode();\r\n\r\n\t\tif (this._pShader.secondaryUVDependencies > 0)\r\n\t\t\tthis.compileSecondaryUVCode();\r\n\r\n\t\tif (this._pShader.normalDependencies > 0)\r\n\t\t\tthis.compileNormalCode();\r\n\r\n\t\tif (this._pShader.viewDirDependencies > 0)\r\n\t\t\tthis.compileViewDirCode();\r\n\r\n\t\t//collect code from material\r\n\t\tthis._pVertexCode += this._pElementsClass._iGetVertexCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\r\n\t\tthis._pFragmentCode += this._pElementsClass._iGetFragmentCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\r\n\r\n\t\t//collect code from pass\r\n\t\tthis._pVertexCode += this._pRenderPass._iGetPreLightingVertexCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\r\n\t\tthis._pFragmentCode += this._pRenderPass._iGetPreLightingFragmentCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\r\n\t}\r\n\r\n\tprivate compileGlobalPositionCode():void\r\n\t{\r\n\t\tthis._pRegisterCache.addVertexTempUsages(this._pSharedRegisters.globalPositionVertex = this._pRegisterCache.getFreeVertexVectorTemp(), this._pShader.globalPosDependencies);\r\n\r\n\t\tvar sceneMatrixReg:ShaderRegisterElement = this._pRegisterCache.getFreeVertexConstant();\r\n\t\tthis._pRegisterCache.getFreeVertexConstant();\r\n\t\tthis._pRegisterCache.getFreeVertexConstant();\r\n\t\tthis._pRegisterCache.getFreeVertexConstant();\r\n\r\n\t\tthis._pShader.sceneMatrixIndex = sceneMatrixReg.index*4;\r\n\r\n\t\tthis._pVertexCode += \"m44 \" + this._pSharedRegisters.globalPositionVertex + \", \" + this._pSharedRegisters.animatedPosition + \", \" + sceneMatrixReg + \"\\n\";\r\n\r\n\t\tif (this._pShader.usesGlobalPosFragment) {\r\n\t\t\tthis._pSharedRegisters.globalPositionVarying = this._pRegisterCache.getFreeVarying();\r\n\t\t\tthis._pVertexCode += \"mov \" + this._pSharedRegisters.globalPositionVarying + \", \" + this._pSharedRegisters.globalPositionVertex + \"\\n\";\r\n\t\t}\r\n\t}\r\n\r\n    private compilePositionCode()\r\n    {\r\n        this._pSharedRegisters.positionVarying = this._pRegisterCache.getFreeVarying();\r\n        this._pVertexCode += \"mov \" + this._pSharedRegisters.positionVarying + \", \" + this._pSharedRegisters.animatedPosition + \"\\n\";\r\n    }\r\n\r\n\r\n\tprivate compileCurvesCode():void\r\n\t{\r\n\t\tthis._pSharedRegisters.curvesInput = this._pRegisterCache.getFreeVertexAttribute();\r\n\t\tthis._pShader.curvesIndex = this._pSharedRegisters.curvesInput.index;\r\n\r\n\t\tthis._pSharedRegisters.curvesVarying = this._pRegisterCache.getFreeVarying();\r\n\t\tthis._pVertexCode += \"mov \" + this._pSharedRegisters.curvesVarying + \", \" + this._pSharedRegisters.curvesInput + \"\\n\";\r\n\r\n\t\tvar temp:ShaderRegisterElement = this._pRegisterCache.getFreeFragmentSingleTemp();\r\n\r\n\t\tthis._pFragmentCode += \"mul \" + temp + \", \" + this._pSharedRegisters.curvesVarying + \".y, \" + this._pSharedRegisters.curvesVarying + \".y\\n\" +\r\n\t\t\t\t\t\t\t\"sub \" + temp + \", \" + temp + \", \" + this._pSharedRegisters.curvesVarying + \".z\\n\" +\r\n\t\t\t\t\t\t\t\"mul \" + temp + \", \" + temp + \", \" + this._pSharedRegisters.curvesVarying + \".x\\n\" +\r\n\t\t\t\t\t\t\t\"kil \" + temp + \"\\n\";\r\n\t}\r\n\r\n\t/**\r\n\t * Calculate the (possibly animated) UV coordinates.\r\n\t */\r\n\tprivate compileUVCode():void\r\n\t{\r\n\t\tvar uvAttributeReg:ShaderRegisterElement = this._pRegisterCache.getFreeVertexAttribute();\r\n\t\tthis._pShader.uvIndex = uvAttributeReg.index;\r\n\r\n\t\tvar varying:ShaderRegisterElement = this._pSharedRegisters.uvVarying = this._pRegisterCache.getFreeVarying();\r\n\r\n\t\tif (this._pShader.usesUVTransform) {\r\n\t\t\t// a, b, 0, tx\r\n\t\t\t// c, d, 0, ty\r\n\t\t\tvar uvTransform1:ShaderRegisterElement = this._pRegisterCache.getFreeVertexConstant();\r\n\t\t\tvar uvTransform2:ShaderRegisterElement = this._pRegisterCache.getFreeVertexConstant();\r\n\t\t\tthis._pShader.uvMatrixIndex = uvTransform1.index*4;\r\n\r\n\t\t\tthis._pVertexCode += \"dp4 \" + varying + \".x, \" + uvAttributeReg + \", \" + uvTransform1 + \"\\n\" +\r\n\t\t\t\t\t\t\t\t \"dp4 \" + varying + \".y, \" + uvAttributeReg + \", \" + uvTransform2 + \"\\n\" +\r\n\t\t\t\t\t\t\t\t \"mov \" + varying + \".zw, \" + uvAttributeReg + \".zw \\n\";\r\n\t\t} else {\r\n\t\t\tthis._pShader.uvMatrixIndex = -1;\r\n\t\t\tthis._pSharedRegisters.uvTarget = varying;\r\n\t\t\tthis._pSharedRegisters.uvSource = uvAttributeReg;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Provide the secondary UV coordinates.\r\n\t */\r\n\tprivate compileSecondaryUVCode():void\r\n\t{\r\n\t\tvar uvAttributeReg:ShaderRegisterElement = this._pRegisterCache.getFreeVertexAttribute();\r\n\t\tthis._pShader.secondaryUVIndex = uvAttributeReg.index;\r\n\t\tthis._pSharedRegisters.secondaryUVVarying = this._pRegisterCache.getFreeVarying();\r\n\t\tthis._pVertexCode += \"mov \" + this._pSharedRegisters.secondaryUVVarying + \", \" + uvAttributeReg + \"\\n\";\r\n\t}\r\n\r\n\t/**\r\n\t * Calculate the view direction.\r\n\t */\r\n\tpublic compileViewDirCode():void\r\n\t{\r\n\t\tvar cameraPositionReg:ShaderRegisterElement = this._pRegisterCache.getFreeVertexConstant();\r\n\t\tthis._pSharedRegisters.viewDirVarying = this._pRegisterCache.getFreeVarying();\r\n\t\tthis._pSharedRegisters.viewDirFragment = this._pRegisterCache.getFreeFragmentVectorTemp();\r\n\t\tthis._pRegisterCache.addFragmentTempUsages(this._pSharedRegisters.viewDirFragment, this._pShader.viewDirDependencies);\r\n\r\n\t\tthis._pShader.cameraPositionIndex = cameraPositionReg.index*4;\r\n\r\n\t\tif (this._pShader.usesTangentSpace) {\r\n\t\t\tvar temp:ShaderRegisterElement = this._pRegisterCache.getFreeVertexVectorTemp();\r\n\t\t\tthis._pVertexCode += \"sub \" + temp + \", \" + cameraPositionReg + \", \" + this._pSharedRegisters.animatedPosition + \"\\n\" +\r\n\t\t\t\t\"m33 \" + this._pSharedRegisters.viewDirVarying + \".xyz, \" + temp + \", \" + this._pSharedRegisters.animatedTangent + \"\\n\" +\r\n\t\t\t\t\"mov \" + this._pSharedRegisters.viewDirVarying + \".w, \" + this._pSharedRegisters.animatedPosition + \".w\\n\";\r\n\t\t} else {\r\n\t\t\tthis._pVertexCode += \"sub \" + this._pSharedRegisters.viewDirVarying + \", \" + cameraPositionReg + \", \" + this._pSharedRegisters.globalPositionVertex + \"\\n\";\r\n\t\t\tthis._pRegisterCache.removeVertexTempUsage(this._pSharedRegisters.globalPositionVertex);\r\n\t\t}\r\n\r\n\t\t//TODO is this required in all cases? (re: distancemappass)\r\n\t\tthis._pFragmentCode += \"nrm \" + this._pSharedRegisters.viewDirFragment + \".xyz, \" + this._pSharedRegisters.viewDirVarying + \"\\n\" +\r\n\t\t\t\"mov \" + this._pSharedRegisters.viewDirFragment + \".w,   \" + this._pSharedRegisters.viewDirVarying + \".w\\n\";\r\n\t}\r\n\r\n\t/**\r\n\t * Calculate the normal.\r\n\t */\r\n\tpublic compileNormalCode():void\r\n\t{\r\n\t\tthis._pSharedRegisters.normalFragment = this._pRegisterCache.getFreeFragmentVectorTemp();\r\n\t\tthis._pRegisterCache.addFragmentTempUsages(this._pSharedRegisters.normalFragment, this._pShader.normalDependencies);\r\n\r\n\t\t//simple normal aquisition if no tangent space is being used\r\n\t\tif (this._pShader.outputsNormals && !this._pShader.outputsTangentNormals) {\r\n\t\t\tthis._pVertexCode += this._pRenderPass._iGetNormalVertexCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\r\n\t\t\tthis._pFragmentCode += this._pRenderPass._iGetNormalFragmentCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar normalMatrix:Array<ShaderRegisterElement>;\r\n\r\n\t\tif (!this._pShader.outputsNormals || !this._pShader.usesTangentSpace) {\r\n\t\t\tnormalMatrix = new Array<ShaderRegisterElement>(3);\r\n\t\t\tnormalMatrix[0] = this._pRegisterCache.getFreeVertexConstant();\r\n\t\t\tnormalMatrix[1] = this._pRegisterCache.getFreeVertexConstant();\r\n\t\t\tnormalMatrix[2] = this._pRegisterCache.getFreeVertexConstant();\r\n\r\n\t\t\tthis._pRegisterCache.getFreeVertexConstant();\r\n\r\n\t\t\tthis._pShader.sceneNormalMatrixIndex = normalMatrix[0].index*4;\r\n\r\n\t\t\tthis._pSharedRegisters.normalVarying = this._pRegisterCache.getFreeVarying();\r\n\t\t}\r\n\r\n\t\tif (this._pShader.outputsNormals) {\r\n\t\t\tif (this._pShader.usesTangentSpace) {\r\n\t\t\t\t// normalize normal + tangent vector and generate (approximated) bitangent used in m33 operation for view\r\n\t\t\t\tthis._pVertexCode += \"nrm \" + this._pSharedRegisters.animatedNormal + \".xyz, \" + this._pSharedRegisters.animatedNormal + \"\\n\" +\r\n\t\t\t\t\t\"nrm \" + this._pSharedRegisters.animatedTangent + \".xyz, \" + this._pSharedRegisters.animatedTangent + \"\\n\" +\r\n\t\t\t\t\t\"crs \" + this._pSharedRegisters.bitangent + \".xyz, \" + this._pSharedRegisters.animatedNormal + \", \" + this._pSharedRegisters.animatedTangent + \"\\n\";\r\n\r\n\t\t\t\tthis._pFragmentCode += this._pRenderPass._iGetNormalFragmentCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\r\n\t\t\t} else {\r\n\t\t\t\t//Compiles the vertex shader code for tangent-space normal maps.\r\n\t\t\t\tthis._pSharedRegisters.tangentVarying = this._pRegisterCache.getFreeVarying();\r\n\t\t\t\tthis._pSharedRegisters.bitangentVarying = this._pRegisterCache.getFreeVarying();\r\n\t\t\t\tvar temp:ShaderRegisterElement = this._pRegisterCache.getFreeVertexVectorTemp();\r\n\r\n\t\t\t\tthis._pVertexCode += \"m33 \" + temp + \".xyz, \" + this._pSharedRegisters.animatedNormal + \", \" + normalMatrix[0] + \"\\n\" +\r\n\t\t\t\t\t\"nrm \" + this._pSharedRegisters.animatedNormal + \".xyz, \" + temp + \"\\n\" +\r\n\t\t\t\t\t\"m33 \" + temp + \".xyz, \" + this._pSharedRegisters.animatedTangent + \", \" + normalMatrix[0] + \"\\n\" +\r\n\t\t\t\t\t\"nrm \" + this._pSharedRegisters.animatedTangent + \".xyz, \" + temp + \"\\n\" +\r\n\t\t\t\t\t\"mov \" + this._pSharedRegisters.tangentVarying + \".x, \" + this._pSharedRegisters.animatedTangent + \".x  \\n\" +\r\n\t\t\t\t\t\"mov \" + this._pSharedRegisters.tangentVarying + \".z, \" + this._pSharedRegisters.animatedNormal + \".x  \\n\" +\r\n\t\t\t\t\t\"mov \" + this._pSharedRegisters.tangentVarying + \".w, \" + this._pSharedRegisters.normalInput + \".w  \\n\" +\r\n\t\t\t\t\t\"mov \" + this._pSharedRegisters.bitangentVarying + \".x, \" + this._pSharedRegisters.animatedTangent + \".y  \\n\" +\r\n\t\t\t\t\t\"mov \" + this._pSharedRegisters.bitangentVarying + \".z, \" + this._pSharedRegisters.animatedNormal + \".y  \\n\" +\r\n\t\t\t\t\t\"mov \" + this._pSharedRegisters.bitangentVarying + \".w, \" + this._pSharedRegisters.normalInput + \".w  \\n\" +\r\n\t\t\t\t\t\"mov \" + this._pSharedRegisters.normalVarying + \".x, \" + this._pSharedRegisters.animatedTangent + \".z  \\n\" +\r\n\t\t\t\t\t\"mov \" + this._pSharedRegisters.normalVarying + \".z, \" + this._pSharedRegisters.animatedNormal + \".z  \\n\" +\r\n\t\t\t\t\t\"mov \" + this._pSharedRegisters.normalVarying + \".w, \" + this._pSharedRegisters.normalInput + \".w  \\n\" +\r\n\t\t\t\t\t\"crs \" + temp + \".xyz, \" + this._pSharedRegisters.animatedNormal + \", \" + this._pSharedRegisters.animatedTangent + \"\\n\" +\r\n\t\t\t\t\t\"mov \" + this._pSharedRegisters.tangentVarying + \".y, \" + temp + \".x    \\n\" +\r\n\t\t\t\t\t\"mov \" + this._pSharedRegisters.bitangentVarying + \".y, \" + temp + \".y  \\n\" +\r\n\t\t\t\t\t\"mov \" + this._pSharedRegisters.normalVarying + \".y, \" + temp + \".z    \\n\";\r\n\r\n\t\t\t\tthis._pRegisterCache.removeVertexTempUsage(this._pSharedRegisters.animatedTangent);\r\n\r\n\t\t\t\t//Compiles the fragment shader code for tangent-space normal maps.\r\n\t\t\t\tvar t:ShaderRegisterElement;\r\n\t\t\t\tvar b:ShaderRegisterElement;\r\n\t\t\t\tvar n:ShaderRegisterElement;\r\n\r\n\t\t\t\tt = this._pRegisterCache.getFreeFragmentVectorTemp();\r\n\t\t\t\tthis._pRegisterCache.addFragmentTempUsages(t, 1);\r\n\t\t\t\tb = this._pRegisterCache.getFreeFragmentVectorTemp();\r\n\t\t\t\tthis._pRegisterCache.addFragmentTempUsages(b, 1);\r\n\t\t\t\tn = this._pRegisterCache.getFreeFragmentVectorTemp();\r\n\t\t\t\tthis._pRegisterCache.addFragmentTempUsages(n, 1);\r\n\r\n\t\t\t\tthis._pFragmentCode += \"nrm \" + t + \".xyz, \" + this._pSharedRegisters.tangentVarying + \"\\n\" +\r\n\t\t\t\t\t\"mov \" + t + \".w, \" + this._pSharedRegisters.tangentVarying + \".w\t\\n\" +\r\n\t\t\t\t\t\"nrm \" + b + \".xyz, \" + this._pSharedRegisters.bitangentVarying + \"\\n\" +\r\n\t\t\t\t\t\"nrm \" + n + \".xyz, \" + this._pSharedRegisters.normalVarying + \"\\n\";\r\n\r\n\t\t\t\t//compile custom fragment code for normal calcs\r\n\t\t\t\tthis._pFragmentCode += this._pRenderPass._iGetNormalFragmentCode(this._pShader, this._pRegisterCache, this._pSharedRegisters) +\r\n\t\t\t\t\t\"m33 \" + this._pSharedRegisters.normalFragment + \".xyz, \" + this._pSharedRegisters.normalFragment + \", \" + t + \"\\n\" +\r\n\t\t\t\t\t\"mov \" + this._pSharedRegisters.normalFragment + \".w, \" + this._pSharedRegisters.normalVarying + \".w\\n\";\r\n\r\n\t\t\t\tthis._pRegisterCache.removeFragmentTempUsage(b);\r\n\t\t\t\tthis._pRegisterCache.removeFragmentTempUsage(t);\r\n\t\t\t\tthis._pRegisterCache.removeFragmentTempUsage(n);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// no output, world space is enough\r\n\t\t\tthis._pVertexCode += \"m33 \" + this._pSharedRegisters.normalVarying + \".xyz, \" + this._pSharedRegisters.animatedNormal + \", \" + normalMatrix[0] + \"\\n\" +\r\n\t\t\t\t\"mov \" + this._pSharedRegisters.normalVarying + \".w, \" + this._pSharedRegisters.animatedNormal + \".w\\n\";\r\n\r\n\t\t\tthis._pFragmentCode += \"nrm \" + this._pSharedRegisters.normalFragment + \".xyz, \" + this._pSharedRegisters.normalVarying + \"\\n\" +\r\n\t\t\t\t\"mov \" + this._pSharedRegisters.normalFragment + \".w, \" + this._pSharedRegisters.normalVarying + \".w\\n\";\r\n\r\n\t\t\tif (this._pShader.tangentDependencies > 0) {\r\n\t\t\t\tthis._pSharedRegisters.tangentVarying = this._pRegisterCache.getFreeVarying();\r\n\r\n\t\t\t\tthis._pVertexCode += \"m33 \" + this._pSharedRegisters.tangentVarying + \".xyz, \" + this._pSharedRegisters.animatedTangent + \", \" + normalMatrix[0] + \"\\n\" +\r\n\t\t\t\t\t\"mov \" + this._pSharedRegisters.tangentVarying + \".w, \" + this._pSharedRegisters.animatedTangent + \".w\\n\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!this._pShader.usesTangentSpace)\r\n\t\t\tthis._pRegisterCache.removeVertexTempUsage(this._pSharedRegisters.animatedNormal);\r\n\t}\r\n\r\n\t/**\r\n\t * Reset all the indices to \"unused\".\r\n\t */\r\n\tpublic pInitRegisterIndices():void\r\n\t{\r\n\t\tthis._pShader.pInitRegisterIndices();\r\n\r\n\t\tthis._pSharedRegisters.animatedPosition = this._pRegisterCache.getFreeVertexVectorTemp();\r\n\t\tthis._pRegisterCache.addVertexTempUsages(this._pSharedRegisters.animatedPosition, 1);\r\n\r\n\t\tthis._pSharedRegisters.animatableAttributes.push(this._pRegisterCache.getFreeVertexAttribute());\r\n\t\tthis._pSharedRegisters.animationTargetRegisters.push(this._pSharedRegisters.animatedPosition);\r\n\t\tthis._pVertexCode = \"\";\r\n\t\tthis._pFragmentCode = \"\";\r\n\t\tthis._pPostAnimationFragmentCode = \"\";\r\n\r\n\r\n\t\t//create commonly shared constant registers\r\n\t\tif (this._pShader.usesCommonData || this._pShader.normalDependencies > 0) {\r\n\t\t\tthis._pSharedRegisters.commons = this._pRegisterCache.getFreeFragmentConstant();\r\n\t\t\tthis._pShader.commonsDataIndex = this._pSharedRegisters.commons.index*4;\r\n\t\t}\r\n\r\n\t\t//Creates the registers to contain the tangent data.\r\n\t\t//Needs to be created FIRST and in this order (for when using tangent space)\r\n\t\tif (this._pShader.tangentDependencies > 0 || this._pShader.outputsNormals) {\r\n\t\t\tthis._pSharedRegisters.tangentInput = this._pRegisterCache.getFreeVertexAttribute();\r\n\t\t\tthis._pShader.tangentIndex = this._pSharedRegisters.tangentInput.index;\r\n\r\n\t\t\tthis._pSharedRegisters.animatedTangent = this._pRegisterCache.getFreeVertexVectorTemp();\r\n\t\t\tthis._pRegisterCache.addVertexTempUsages(this._pSharedRegisters.animatedTangent, 1);\r\n\r\n\t\t\tif (this._pShader.usesTangentSpace) {\r\n\t\t\t\tthis._pSharedRegisters.bitangent = this._pRegisterCache.getFreeVertexVectorTemp();\r\n\t\t\t\tthis._pRegisterCache.addVertexTempUsages(this._pSharedRegisters.bitangent, 1);\r\n\t\t\t}\r\n\r\n\t\t\tthis._pSharedRegisters.animatableAttributes.push(this._pSharedRegisters.tangentInput);\r\n\t\t\tthis._pSharedRegisters.animationTargetRegisters.push(this._pSharedRegisters.animatedTangent);\r\n\t\t}\r\n\r\n\t\tif (this._pShader.normalDependencies > 0) {\r\n\t\t\tthis._pSharedRegisters.normalInput = this._pRegisterCache.getFreeVertexAttribute();\r\n\t\t\tthis._pShader.normalIndex = this._pSharedRegisters.normalInput.index;\r\n\r\n\t\t\tthis._pSharedRegisters.animatedNormal = this._pRegisterCache.getFreeVertexVectorTemp();\r\n\t\t\tthis._pRegisterCache.addVertexTempUsages(this._pSharedRegisters.animatedNormal, 1);\r\n\r\n\t\t\tthis._pSharedRegisters.animatableAttributes.push(this._pSharedRegisters.normalInput);\r\n\t\t\tthis._pSharedRegisters.animationTargetRegisters.push(this._pSharedRegisters.animatedNormal);\r\n\t\t}\r\n\r\n\t\tif (this._pShader.colorDependencies > 0) {\r\n\t\t\tthis._pSharedRegisters.colorInput = this._pRegisterCache.getFreeVertexAttribute();\r\n\t\t\tthis._pShader.colorBufferIndex = this._pSharedRegisters.colorInput.index;\r\n\r\n\t\t\tthis._pSharedRegisters.colorVarying = this._pRegisterCache.getFreeVarying();\r\n\t\t\tthis._pVertexCode += \"mov \" + this._pSharedRegisters.colorVarying + \", \" + this._pSharedRegisters.colorInput + \"\\n\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Disposes all resources used by the compiler.\r\n\t */\r\n\tpublic dispose():void\r\n\t{\r\n\t\tthis._pRegisterCache.dispose();\r\n\t\tthis._pRegisterCache = null;\r\n\t\tthis._pSharedRegisters = null;\r\n\t}\r\n\r\n\t/**\r\n\t * The generated vertex code.\r\n\t */\r\n\tpublic get vertexCode():string\r\n\t{\r\n\t\treturn this._pVertexCode;\r\n\t}\r\n\r\n\t/**\r\n\t * The generated fragment code.\r\n\t */\r\n\tpublic get fragmentCode():string\r\n\t{\r\n\t\treturn this._pFragmentCode;\r\n\t}\r\n\r\n\t/**\r\n\t * The generated fragment code.\r\n\t */\r\n\tpublic get postAnimationFragmentCode():string\r\n\t{\r\n\t\treturn this._pPostAnimationFragmentCode;\r\n\t}\r\n\r\n\t/**\r\n\t * The register containing the final shaded colour.\r\n\t */\r\n\tpublic get shadedTarget():ShaderRegisterElement\r\n\t{\r\n\t\treturn this._pSharedRegisters.shadedTarget;\r\n\t}\r\n}",
    "import {LightingShader}\t\t\t\tfrom \"../../shaders/LightingShader\";\r\nimport {CompilerBase}\t\t\t\t\tfrom \"../../shaders/compilers/CompilerBase\";\r\nimport {ShaderRegisterElement}\t\tfrom \"../../shaders/ShaderRegisterElement\";\r\nimport {ILightingPass}\t\t\t\tfrom \"../../surfaces/passes/ILightingPass\";\r\nimport {IElementsClassGL}\t\t\t\tfrom \"../../elements/IElementsClassGL\";\r\n\r\n/**\r\n * CompilerBase is an abstract base class for shader compilers that use modular shader methods to assemble a\r\n * material. Concrete subclasses are used by the default materials.\r\n *\r\n * @see away.materials.ShadingMethodBase\r\n */\r\nexport class LightingCompiler extends CompilerBase\r\n{\r\n\tprivate _shaderLightingObject:LightingShader;\r\n\tprivate _lightingPass:ILightingPass;\r\n\tpublic _pointLightFragmentConstants:Array<ShaderRegisterElement>;\r\n\tpublic _pointLightVertexConstants:Array<ShaderRegisterElement>;\r\n\tpublic _dirLightFragmentConstants:Array<ShaderRegisterElement>;\r\n\tpublic _dirLightVertexConstants:Array<ShaderRegisterElement>;\r\n\r\n\tpublic _pNumProbeRegisters:number;\r\n\r\n\t/**\r\n\t * Creates a new CompilerBase object.\r\n\t * @param profile The compatibility profile of the renderer.\r\n\t */\r\n\tconstructor(elementsClass:IElementsClassGL, lightingPass:ILightingPass, shaderLightingObject:LightingShader)\r\n\t{\r\n\t\tsuper(elementsClass, lightingPass, shaderLightingObject);\r\n\r\n\t\tthis._shaderLightingObject = shaderLightingObject;\r\n\t\tthis._lightingPass = lightingPass;\r\n\t}\r\n\r\n\t/**\r\n\t * Compile the code for the methods.\r\n\t */\r\n\tpublic pCompileDependencies():void\r\n\t{\r\n\t\tsuper.pCompileDependencies();\r\n\r\n\t\t//compile the lighting code\r\n\t\tif (this._shaderLightingObject.usesShadows)\r\n\t\t\tthis.pCompileShadowCode();\r\n\r\n\t\tif (this._shaderLightingObject.usesLights) {\r\n\t\t\tthis.initLightRegisters();\r\n\t\t\tthis.compileLightCode();\r\n\t\t}\r\n\r\n\t\tif (this._shaderLightingObject.usesProbes)\r\n\t\t\tthis.compileLightProbeCode();\r\n\r\n\t\tthis._pVertexCode += this._lightingPass._iGetPostLightingVertexCode(this._shaderLightingObject, this._pRegisterCache, this._pSharedRegisters);\r\n\t\tthis._pFragmentCode += this._lightingPass._iGetPostLightingFragmentCode(this._shaderLightingObject, this._pRegisterCache, this._pSharedRegisters);\r\n\t}\r\n\r\n\t/**\r\n\t * Provides the code to provide shadow mapping.\r\n\t */\r\n\tpublic pCompileShadowCode():void\r\n\t{\r\n\t\tif (this._shaderLightingObject.normalDependencies > 0) {\r\n\t\t\tthis._pSharedRegisters.shadowTarget = this._pSharedRegisters.normalFragment;\r\n\t\t} else {\r\n\t\t\tthis._pSharedRegisters.shadowTarget = this._pRegisterCache.getFreeFragmentVectorTemp();\r\n\t\t\tthis._pRegisterCache.addFragmentTempUsages(this._pSharedRegisters.shadowTarget, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes constant registers to contain light data.\r\n\t */\r\n\tprivate initLightRegisters():void\r\n\t{\r\n\t\t// init these first so we're sure they're in sequence\r\n\t\tvar i:number, len:number;\r\n\r\n\t\tif (this._dirLightVertexConstants) {\r\n\t\t\tlen = this._dirLightVertexConstants.length;\r\n\t\t\tfor (i = 0; i < len; ++i) {\r\n\t\t\t\tthis._dirLightVertexConstants[i] = this._pRegisterCache.getFreeVertexConstant();\r\n\r\n\t\t\t\tif (this._shaderLightingObject.lightVertexConstantIndex == -1)\r\n\t\t\t\t\tthis._shaderLightingObject.lightVertexConstantIndex = this._dirLightVertexConstants[i].index*4;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._pointLightVertexConstants) {\r\n\t\t\tlen = this._pointLightVertexConstants.length;\r\n\t\t\tfor (i = 0; i < len; ++i) {\r\n\t\t\t\tthis._pointLightVertexConstants[i] = this._pRegisterCache.getFreeVertexConstant();\r\n\r\n\t\t\t\tif (this._shaderLightingObject.lightVertexConstantIndex == -1)\r\n\t\t\t\t\tthis._shaderLightingObject.lightVertexConstantIndex = this._pointLightVertexConstants[i].index*4;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlen = this._dirLightFragmentConstants.length;\r\n\t\tfor (i = 0; i < len; ++i) {\r\n\t\t\tthis._dirLightFragmentConstants[i] = this._pRegisterCache.getFreeFragmentConstant();\r\n\r\n\t\t\tif (this._shaderLightingObject.lightFragmentConstantIndex == -1)\r\n\t\t\t\tthis._shaderLightingObject.lightFragmentConstantIndex = this._dirLightFragmentConstants[i].index*4;\r\n\t\t}\r\n\r\n\t\tlen = this._pointLightFragmentConstants.length;\r\n\t\tfor (i = 0; i < len; ++i) {\r\n\t\t\tthis._pointLightFragmentConstants[i] = this._pRegisterCache.getFreeFragmentConstant();\r\n\r\n\t\t\tif (this._shaderLightingObject.lightFragmentConstantIndex == -1)\r\n\t\t\t\tthis._shaderLightingObject.lightFragmentConstantIndex = this._pointLightFragmentConstants[i].index*4;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Compiles the shading code for directional and point lights.\r\n\t */\r\n\tprivate compileLightCode():void\r\n\t{\r\n\t\tvar diffuseColorReg:ShaderRegisterElement;\r\n\t\tvar specularColorReg:ShaderRegisterElement;\r\n\t\tvar lightPosReg:ShaderRegisterElement;\r\n\t\tvar lightDirReg:ShaderRegisterElement;\r\n\t\tvar vertexRegIndex:number = 0;\r\n\t\tvar fragmentRegIndex:number = 0;\r\n\t\tvar addSpec:boolean = this._shaderLightingObject.usesLightsForSpecular;\r\n\t\tvar addDiff:boolean = this._shaderLightingObject.usesLightsForDiffuse;\r\n\r\n\t\t//compile the shading code for directional lights.\r\n\t\tfor (var i:number = 0; i < this._shaderLightingObject.numDirectionalLights; ++i) {\r\n\t\t\tif (this._shaderLightingObject.usesTangentSpace) {\r\n\t\t\t\tlightDirReg = this._dirLightVertexConstants[vertexRegIndex++];\r\n\r\n\t\t\t\tvar lightVarying:ShaderRegisterElement = this._pRegisterCache.getFreeVarying();\r\n\r\n\t\t\t\tthis._pVertexCode += \"m33 \" + lightVarying + \".xyz, \" + lightDirReg + \", \" + this._pSharedRegisters.animatedTangent + \"\\n\" +\r\n\t\t\t\t\t\"mov \" + lightVarying + \".w, \" + lightDirReg + \".w\\n\";\r\n\r\n\t\t\t\tlightDirReg = this._pRegisterCache.getFreeFragmentVectorTemp();\r\n\t\t\t\tthis._pRegisterCache.addVertexTempUsages(lightDirReg, 1);\r\n\r\n\t\t\t\tthis._pFragmentCode += \"nrm \" + lightDirReg + \".xyz, \" + lightVarying + \"\\n\" +\r\n\t\t\t\t\t\"mov \" + lightDirReg + \".w, \" + lightVarying + \".w\\n\";\r\n\r\n\t\t\t} else {\r\n\t\t\t\tlightDirReg = this._dirLightFragmentConstants[fragmentRegIndex++];\r\n\t\t\t}\r\n\r\n\t\t\tdiffuseColorReg = this._dirLightFragmentConstants[fragmentRegIndex++];\r\n\t\t\tspecularColorReg = this._dirLightFragmentConstants[fragmentRegIndex++];\r\n\r\n\t\t\tif (addDiff)\r\n\t\t\t\tthis._pFragmentCode += this._lightingPass._iGetPerLightDiffuseFragmentCode(this._shaderLightingObject, lightDirReg, diffuseColorReg, this._pRegisterCache, this._pSharedRegisters);\r\n\r\n\t\t\tif (addSpec)\r\n\t\t\t\tthis._pFragmentCode += this._lightingPass._iGetPerLightSpecularFragmentCode(this._shaderLightingObject, lightDirReg, specularColorReg, this._pRegisterCache, this._pSharedRegisters);\r\n\r\n\t\t\tif (this._shaderLightingObject.usesTangentSpace)\r\n\t\t\t\tthis._pRegisterCache.removeVertexTempUsage(lightDirReg);\r\n\t\t}\r\n\r\n\t\tvertexRegIndex = 0;\r\n\t\tfragmentRegIndex = 0;\r\n\r\n\t\t//compile the shading code for point lights\r\n\t\tfor (var i:number = 0; i < this._shaderLightingObject.numPointLights; ++i) {\r\n\r\n\t\t\tif (this._shaderLightingObject.usesTangentSpace || !this._shaderLightingObject.usesGlobalPosFragment)\r\n\t\t\t\tlightPosReg = this._pointLightVertexConstants[vertexRegIndex++];\r\n\t\t\telse\r\n\t\t\t\tlightPosReg = this._pointLightFragmentConstants[fragmentRegIndex++];\r\n\r\n\t\t\tdiffuseColorReg = this._pointLightFragmentConstants[fragmentRegIndex++];\r\n\t\t\tspecularColorReg = this._pointLightFragmentConstants[fragmentRegIndex++];\r\n\r\n\t\t\tlightDirReg = this._pRegisterCache.getFreeFragmentVectorTemp();\r\n\t\t\tthis._pRegisterCache.addFragmentTempUsages(lightDirReg, 1);\r\n\r\n\t\t\tvar lightVarying:ShaderRegisterElement;\r\n\r\n\t\t\tif (this._shaderLightingObject.usesTangentSpace) {\r\n\t\t\t\tlightVarying = this._pRegisterCache.getFreeVarying();\r\n\t\t\t\tvar temp:ShaderRegisterElement = this._pRegisterCache.getFreeVertexVectorTemp();\r\n\t\t\t\tthis._pVertexCode += \"sub \" + temp + \", \" + lightPosReg + \", \" + this._pSharedRegisters.animatedPosition + \"\\n\" +\r\n\t\t\t\t\t\"m33 \" + lightVarying + \".xyz, \" + temp + \", \" + this._pSharedRegisters.animatedTangent + \"\\n\" +\r\n\t\t\t\t\t\"mov \" + lightVarying + \".w, \" + this._pSharedRegisters.animatedPosition + \".w\\n\";\r\n\t\t\t} else if (!this._shaderLightingObject.usesGlobalPosFragment) {\r\n\t\t\t\tlightVarying = this._pRegisterCache.getFreeVarying();\r\n\t\t\t\tthis._pVertexCode += \"sub \" + lightVarying + \", \" + lightPosReg + \", \" + this._pSharedRegisters.globalPositionVertex + \"\\n\";\r\n\t\t\t} else {\r\n\t\t\t\tlightVarying = lightDirReg;\r\n\t\t\t\tthis._pFragmentCode += \"sub \" + lightDirReg + \", \" + lightPosReg + \", \" + this._pSharedRegisters.globalPositionVarying + \"\\n\";\r\n\t\t\t}\r\n\r\n\t\t\tif (this._shaderLightingObject.usesLightFallOff) {\r\n\t\t\t\t// calculate attenuation\r\n\t\t\t\tthis._pFragmentCode += // attenuate\r\n\t\t\t\t\t\"dp3 \" + lightDirReg + \".w, \" + lightVarying + \", \" + lightVarying + \"\\n\" + // w = d - radius\r\n\t\t\t\t\t\"sub \" + lightDirReg + \".w, \" + lightDirReg + \".w, \" + diffuseColorReg + \".w\\n\" + // w = (d - radius)/(max-min)\r\n\t\t\t\t\t\"mul \" + lightDirReg + \".w, \" + lightDirReg + \".w, \" + specularColorReg + \".w\\n\" + // w = clamp(w, 0, 1)\r\n\t\t\t\t\t\"sat \" + lightDirReg + \".w, \" + lightDirReg + \".w\\n\" + // w = 1-w\r\n\t\t\t\t\t\"sub \" + lightDirReg + \".w, \" + this._pSharedRegisters.commons + \".w, \" + lightDirReg + \".w\\n\" + // normalize\r\n\t\t\t\t\t\"nrm \" + lightDirReg + \".xyz, \" + lightVarying + \"\\n\";\r\n\t\t\t} else {\r\n\t\t\t\tthis._pFragmentCode += \"nrm \" + lightDirReg + \".xyz, \" + lightVarying + \"\\n\" +\r\n\t\t\t\t\t\"mov \" + lightDirReg + \".w, \" + lightVarying + \".w\\n\";\r\n\t\t\t}\r\n\r\n\t\t\tif (this._shaderLightingObject.lightFragmentConstantIndex == -1)\r\n\t\t\t\tthis._shaderLightingObject.lightFragmentConstantIndex = lightPosReg.index*4;\r\n\r\n\t\t\tif (addDiff)\r\n\t\t\t\tthis._pFragmentCode += this._lightingPass._iGetPerLightDiffuseFragmentCode(this._shaderLightingObject, lightDirReg, diffuseColorReg, this._pRegisterCache, this._pSharedRegisters);\r\n\r\n\t\t\tif (addSpec)\r\n\t\t\t\tthis._pFragmentCode += this._lightingPass._iGetPerLightSpecularFragmentCode(this._shaderLightingObject, lightDirReg, specularColorReg, this._pRegisterCache, this._pSharedRegisters);\r\n\r\n\t\t\tthis._pRegisterCache.removeFragmentTempUsage(lightDirReg);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Compiles shading code for light probes.\r\n\t */\r\n\tprivate compileLightProbeCode():void\r\n\t{\r\n\t\tvar weightReg:string;\r\n\t\tvar weightComponents = [ \".x\", \".y\", \".z\", \".w\" ];\r\n\t\tvar weightRegisters:Array<ShaderRegisterElement> = new Array<ShaderRegisterElement>();\r\n\t\tvar i:number;\r\n\t\tvar texReg:ShaderRegisterElement;\r\n\t\tvar addSpec:boolean = this._shaderLightingObject.usesProbesForSpecular;\r\n\t\tvar addDiff:boolean = this._shaderLightingObject.usesProbesForDiffuse;\r\n\r\n\t\tif (addDiff)\r\n\t\t\tthis._shaderLightingObject.lightProbeDiffuseIndices = new Array<number>();\r\n\r\n\t\tif (addSpec)\r\n\t\t\tthis._shaderLightingObject.lightProbeSpecularIndices = new Array<number>();\r\n\r\n\t\tfor (i = 0; i < this._pNumProbeRegisters; ++i) {\r\n\t\t\tweightRegisters[i] = this._pRegisterCache.getFreeFragmentConstant();\r\n\r\n\t\t\tif (i == 0)\r\n\t\t\t\tthis._shaderLightingObject.probeWeightsIndex = weightRegisters[i].index*4;\r\n\t\t}\r\n\r\n\t\tfor (i = 0; i < this._shaderLightingObject.numLightProbes; ++i) {\r\n\t\t\tweightReg = weightRegisters[Math.floor(i/4)].toString() + weightComponents[i%4];\r\n\r\n\t\t\tif (addDiff) {\r\n\t\t\t\ttexReg = this._pRegisterCache.getFreeTextureReg();\r\n\t\t\t\tthis._shaderLightingObject.lightProbeDiffuseIndices[i] = texReg.index;\r\n\t\t\t\tthis._pFragmentCode += this._lightingPass._iGetPerProbeDiffuseFragmentCode(this._shaderLightingObject, texReg, weightReg, this._pRegisterCache, this._pSharedRegisters);\r\n\t\t\t}\r\n\r\n\t\t\tif (addSpec) {\r\n\t\t\t\ttexReg = this._pRegisterCache.getFreeTextureReg();\r\n\t\t\t\tthis._shaderLightingObject.lightProbeSpecularIndices[i] = texReg.index;\r\n\t\t\t\tthis._pFragmentCode += this._lightingPass._iGetPerProbeSpecularFragmentCode(this._shaderLightingObject, texReg, weightReg, this._pRegisterCache, this._pSharedRegisters);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Reset all the indices to \"unused\".\r\n\t */\r\n\tpublic pInitRegisterIndices():void\r\n\t{\r\n\t\tsuper.pInitRegisterIndices();\r\n\r\n\t\tthis._shaderLightingObject.lightVertexConstantIndex = -1;\r\n\t\tthis._shaderLightingObject.lightFragmentConstantIndex = -1;\r\n\t\tthis._shaderLightingObject.probeWeightsIndex = -1;\r\n\r\n\t\tthis._pNumProbeRegisters = Math.ceil(this._shaderLightingObject.numLightProbes/4);\r\n\r\n\t\t//init light data\r\n\t\tif (this._shaderLightingObject.usesTangentSpace || !this._shaderLightingObject.usesGlobalPosFragment) {\r\n\t\t\tthis._pointLightVertexConstants = new Array<ShaderRegisterElement>(this._shaderLightingObject.numPointLights);\r\n\t\t\tthis._pointLightFragmentConstants = new Array<ShaderRegisterElement>(this._shaderLightingObject.numPointLights*2);\r\n\t\t} else {\r\n\t\t\tthis._pointLightFragmentConstants = new Array<ShaderRegisterElement>(this._shaderLightingObject.numPointLights*3);\r\n\t\t}\r\n\r\n\t\tif (this._shaderLightingObject.usesTangentSpace) {\r\n\t\t\tthis._dirLightVertexConstants = new Array<ShaderRegisterElement>(this._shaderLightingObject.numDirectionalLights);\r\n\t\t\tthis._dirLightFragmentConstants = new Array<ShaderRegisterElement>(this._shaderLightingObject.numDirectionalLights*2);\r\n\t\t} else {\r\n\t\t\tthis._dirLightFragmentConstants = new Array<ShaderRegisterElement>(this._shaderLightingObject.numDirectionalLights*3);\r\n\t\t}\r\n\t}\r\n}",
    "export {CompilerBase}\t\t\t\t\tfrom \"./shaders/compilers/CompilerBase\";\r\nexport {LightingCompiler}\t\t\t\tfrom \"./shaders/compilers/LightingCompiler\";\r\nexport {LightingShader}\t\t\t\t\tfrom \"./shaders/LightingShader\";\r\nexport {RegisterPool}\t\t\t\t\tfrom \"./shaders/RegisterPool\";\r\nexport {ShaderBase}\t\t\t\t\t\tfrom \"./shaders/ShaderBase\";\r\nexport {ShaderRegisterCache}\t\t\t\tfrom \"./shaders/ShaderRegisterCache\";\r\nexport {ShaderRegisterData}\t\t\t\tfrom \"./shaders/ShaderRegisterData\";\r\nexport {ShaderRegisterElement}\t\t\tfrom \"./shaders/ShaderRegisterElement\";",
    "import {IEntitySorter}\t\t\t\tfrom \"../sort/IEntitySorter\";\r\n\r\nimport {GL_RenderableBase}\t\t\tfrom \"../renderables/GL_RenderableBase\";\r\n/**\r\n * @class away.sort.RenderableMergeSort\r\n */\r\nexport class RenderableMergeSort implements IEntitySorter\r\n{\r\n\tpublic sortBlendedRenderables(head:GL_RenderableBase):GL_RenderableBase\r\n\t{\r\n\t\tvar headB:GL_RenderableBase;\r\n\t\tvar fast:GL_RenderableBase;\r\n\t\tvar slow:GL_RenderableBase;\r\n\r\n\t\tif (!head || !head.next) {\r\n\t\t\treturn head;\r\n\t\t}\r\n\r\n\t\t// split in two sublists\r\n\t\tslow = head;\r\n\t\tfast = head.next;\r\n\r\n\t\twhile (fast) {\r\n\t\t\tfast = fast.next;\r\n\t\t\tif (fast) {\r\n\t\t\t\tslow = slow.next;\r\n\t\t\t\tfast = fast.next;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\theadB = slow.next;\r\n\t\tslow.next = null;\r\n\r\n\t\t// recurse\r\n\t\thead = this.sortBlendedRenderables(head);\r\n\t\theadB = this.sortBlendedRenderables(headB);\r\n\r\n\t\t// merge sublists while respecting order\r\n\t\tvar result:GL_RenderableBase;\r\n\t\tvar curr:GL_RenderableBase;\r\n\t\tvar l:GL_RenderableBase;\r\n\r\n\t\tif (!head)\r\n\t\t\treturn headB;\r\n\t\tif (!headB)\r\n\t\t\treturn head;\r\n\r\n\t\twhile (head && headB) {\r\n\t\t\tif (head.zIndex < headB.zIndex) {\r\n\t\t\t\tl = head;\r\n\t\t\t\thead = head.next;\r\n\t\t\t} else {\r\n\t\t\t\tl = headB;\r\n\t\t\t\theadB = headB.next;\r\n\t\t\t}\r\n\r\n\t\t\tif (!result)\r\n\t\t\t\tresult = l; else\r\n\t\t\t\tcurr.next = l;\r\n\r\n\t\t\tcurr = l;\r\n\t\t}\r\n\r\n\t\tif (head)\r\n\t\t\tcurr.next = head; else if (headB)\r\n\t\t\tcurr.next = headB;\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tpublic sortOpaqueRenderables(head:GL_RenderableBase):GL_RenderableBase\r\n\t{\r\n\t\tvar headB:GL_RenderableBase;\r\n\t\tvar fast:GL_RenderableBase, slow:GL_RenderableBase;\r\n\r\n\t\tif (!head || !head.next) {\r\n\t\t\treturn head;\r\n\t\t}\r\n\r\n\t\t// split in two sublists\r\n\t\tslow = head;\r\n\t\tfast = head.next;\r\n\r\n\t\twhile (fast) {\r\n\t\t\tfast = fast.next;\r\n\t\t\tif (fast) {\r\n\t\t\t\tslow = slow.next;\r\n\t\t\t\tfast = fast.next;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\theadB = slow.next;\r\n\t\tslow.next = null;\r\n\r\n\t\t// recurse\r\n\t\thead = this.sortOpaqueRenderables(head);\r\n\t\theadB = this.sortOpaqueRenderables(headB);\r\n\r\n\t\t// merge sublists while respecting order\r\n\t\tvar result:GL_RenderableBase;\r\n\t\tvar curr:GL_RenderableBase;\r\n\t\tvar l:GL_RenderableBase;\r\n\t\tvar cmp:number = 0;\r\n\r\n\t\tif (!head)\r\n\t\t\treturn headB;\r\n\t\tif (!headB)\r\n\t\t\treturn head;\r\n\r\n\t\twhile (head && headB && head != null && headB != null) {\r\n\r\n\t\t\t// first sort per render order id (reduces program3D switches),\r\n\t\t\t// then on render object id (reduces setting props),\r\n\t\t\t// then on zIndex (reduces overdraw)\r\n\t\t\tvar aid:number = head.renderOrderId;\r\n\t\t\tvar bid:number = headB.renderOrderId;\r\n\r\n\t\t\tif (aid == bid) {\r\n\t\t\t\tvar ma:number = head.surfaceID;\r\n\t\t\t\tvar mb:number = headB.surfaceID;\r\n\r\n\t\t\t\tif (ma == mb) {\r\n\t\t\t\t\tif (head.zIndex < headB.zIndex)\r\n\t\t\t\t\t\tcmp = 1; else\r\n\t\t\t\t\t\tcmp = -1;\r\n\t\t\t\t} else if (ma > mb) {\r\n\t\t\t\t\tcmp = 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcmp = -1;\r\n\t\t\t\t}\r\n\t\t\t} else if (aid > bid) {\r\n\t\t\t\tcmp = 1;\r\n\t\t\t} else {\r\n\t\t\t\tcmp = -1;\r\n\t\t\t}\r\n\r\n\t\t\tif (cmp < 0) {\r\n\t\t\t\tl = head;\r\n\t\t\t\thead = head.next;\r\n\t\t\t} else {\r\n\t\t\t\tl = headB;\r\n\t\t\t\theadB = headB.next;\r\n\t\t\t}\r\n\r\n\t\t\tif (!result) {\r\n\t\t\t\tresult = l;\r\n\t\t\t\tcurr = l;\r\n\t\t\t} else {\r\n\t\t\t\tcurr.next = l;\r\n\t\t\t\tcurr = l;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (head)\r\n\t\t\tcurr.next = head; else if (headB)\r\n\t\t\tcurr.next = headB;\r\n\r\n\t\treturn result;\r\n\t}\r\n}",
    "import {IEntitySorter}\t\t\t\tfrom \"../sort/IEntitySorter\";\r\n\r\nimport {GL_RenderableBase}\t\t\tfrom \"../renderables/GL_RenderableBase\";\r\n\r\n/**\r\n * @class away.sort.NullSort\r\n */\r\nexport class RenderableNullSort implements IEntitySorter\r\n{\r\n\tpublic sortBlendedRenderables(head:GL_RenderableBase):GL_RenderableBase\r\n\t{\r\n\t\treturn head;\r\n\t}\r\n\r\n\tpublic sortOpaqueRenderables(head:GL_RenderableBase):GL_RenderableBase\r\n\t{\r\n\t\treturn head;\r\n\t}\r\n}",
    "export {IEntitySorter}\t\t\t\t\tfrom \"./sort/IEntitySorter\";\r\nexport {RenderableMergeSort}\t\t\t\tfrom \"./sort/RenderableMergeSort\";\r\nexport {RenderableNullSort}\t\t\t\tfrom \"./sort/RenderableNullSort\";",
    "import {AssetEvent}\t\t\t\t\tfrom \"awayjs-core/lib/events/AssetEvent\";\r\nimport {BlendMode}\t\t\t\t\tfrom \"awayjs-core/lib/image/BlendMode\";\r\n\r\nimport {BasicMaterial}\t\t\t\tfrom \"awayjs-display/lib/materials/BasicMaterial\";\r\n\r\nimport {BasicMaterialPass}\t\t\tfrom \"../surfaces/passes/BasicMaterialPass\";\r\nimport {IElementsClassGL}\t\t\t\tfrom \"../elements/IElementsClassGL\";\r\nimport {GL_SurfaceBase}\t\t\t\tfrom \"../surfaces/GL_SurfaceBase\";\r\nimport {SurfacePool}\t\t\t\t\tfrom \"../surfaces/SurfacePool\";\r\n\r\n/**\r\n * RenderMaterialObject forms an abstract base class for the default shaded materials provided by Stage,\r\n * using material methods to define their appearance.\r\n */\r\nexport class GL_BasicMaterialSurface extends GL_SurfaceBase\r\n{\r\n\tprivate _material:BasicMaterial;\r\n\tprivate _pass:BasicMaterialPass;\r\n\r\n\r\n\tconstructor(material:BasicMaterial, elementsClass:IElementsClassGL, renderPool:SurfacePool)\r\n\t{\r\n\t\tsuper(material, elementsClass, renderPool);\r\n\r\n\t\tthis._material = material;\r\n\r\n\t\tthis._pAddPass(this._pass = new BasicMaterialPass(this, material, elementsClass, this._stage));\r\n\t}\r\n\r\n\tpublic onClear(event:AssetEvent):void\r\n\t{\r\n\t\tsuper.onClear(event);\r\n\r\n\t\tthis._material = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pUpdateRender():void\r\n\t{\r\n\t\tsuper._pUpdateRender();\r\n\r\n\t\tthis._pRequiresBlending = (this._material.blendMode != BlendMode.NORMAL || this._material.alphaBlending || (this._material.colorTransform && this._material.colorTransform.alphaMultiplier < 1));\r\n\t\tthis._pass.preserveAlpha = this._material.preserveAlpha;//this._pRequiresBlending;\r\n\t\tthis._pass.shader.setBlendMode((this._surface.blendMode == BlendMode.NORMAL && this._pRequiresBlending)? BlendMode.LAYER : this._material.blendMode);\r\n\t\t//this._pass.forceSeparateMVP = false;\r\n\t}\r\n}",
    "import {ISurface}\t\t\t\t\t\tfrom \"awayjs-display/lib/base/ISurface\";\r\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\n\r\nimport {IElementsClassGL}\t\t\t\tfrom \"../elements/IElementsClassGL\";\r\nimport {GL_SurfacePassBase}\t\t\tfrom \"../surfaces/GL_SurfacePassBase\";\r\nimport {SurfacePool}\t\t\t\t\tfrom \"../surfaces/SurfacePool\";\r\nimport {ShaderBase}\t\t\t\t\tfrom \"../shaders/ShaderBase\";\r\nimport {ShaderRegisterCache}\t\t\tfrom \"../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterData}\t\t\tfrom \"../shaders/ShaderRegisterData\";\r\nimport {ShaderRegisterElement}\t\tfrom \"../shaders/ShaderRegisterElement\";\r\nimport {GL_TextureBase}\t\t\t\tfrom \"../textures/GL_TextureBase\";\r\n\r\n/**\r\n * GL_DepthSurface forms an abstract base class for the default shaded materials provided by Stage,\r\n * using material methods to define their appearance.\r\n */\r\nexport class GL_DepthSurface extends GL_SurfacePassBase\r\n{\r\n\tprivate _fragmentConstantsIndex:number;\r\n\tprivate _textureVO:GL_TextureBase;\r\n\r\n\t/**\r\n\t *\r\n\t * @param pool\r\n\t * @param surface\r\n\t * @param elementsClass\r\n\t * @param stage\r\n\t */\r\n\tconstructor(surface:ISurface, elementsClass:IElementsClassGL, renderPool:SurfacePool)\r\n\t{\r\n\t\tsuper(surface, elementsClass, renderPool);\r\n\r\n\t\tthis._shader = new ShaderBase(elementsClass, this, this._stage);\r\n\r\n\t\tthis._pAddPass(this);\r\n\t}\r\n\r\n\tpublic invalidate():void\r\n\t{\r\n\t\tsuper.invalidate();\r\n\r\n\t\tthis._textureVO = this._surface.getTextureAt(0)? <GL_TextureBase> this._shader.getAbstraction(this._surface.getTextureAt(0)) : null;\r\n\t}\r\n\r\n\tpublic _iIncludeDependencies(shader:ShaderBase):void\r\n\t{\r\n\t\tsuper._iIncludeDependencies(shader);\r\n\r\n\t\tshader.projectionDependencies++;\r\n\r\n\t\tif (shader.alphaThreshold > 0)\r\n\t\t\tshader.uvDependencies++;\r\n\t}\r\n\r\n\r\n\tpublic _iInitConstantData(shader:ShaderBase):void\r\n\t{\r\n\t\tsuper._iInitConstantData(shader);\r\n\r\n\t\tvar index:number = this._fragmentConstantsIndex;\r\n\t\tvar data:Float32Array = shader.fragmentConstantData;\r\n\t\tdata[index] = 1.0;\r\n\t\tdata[index + 1] = 255.0;\r\n\t\tdata[index + 2] = 65025.0;\r\n\t\tdata[index + 3] = 16581375.0;\r\n\t\tdata[index + 4] = 1.0/255.0;\r\n\t\tdata[index + 5] = 1.0/255.0;\r\n\t\tdata[index + 6] = 1.0/255.0;\r\n\t\tdata[index + 7] = 0.0;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iGetFragmentCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\r\n\t{\r\n\t\tvar code:string = \"\";\r\n\t\tvar targetReg:ShaderRegisterElement = sharedRegisters.shadedTarget;\r\n\t\tvar dataReg1:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\r\n\t\tvar dataReg2:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\r\n\r\n\t\tthis._fragmentConstantsIndex = dataReg1.index*4;\r\n\r\n\t\tvar temp1:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\r\n\t\tregisterCache.addFragmentTempUsages(temp1, 1);\r\n\t\tvar temp2:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\r\n\t\tregisterCache.addFragmentTempUsages(temp2, 1);\r\n\r\n\t\tcode += \"div \" + temp1 + \", \" + sharedRegisters.projectionFragment + \", \" + sharedRegisters.projectionFragment + \".w\\n\" + //\"sub ft2.z, fc0.x, ft2.z\\n\" +    //invert\r\n\t\t\t\"mul \" + temp1 + \", \" + dataReg1 + \", \" + temp1 + \".z\\n\" +\r\n\t\t\t\"frc \" + temp1 + \", \" + temp1 + \"\\n\" +\r\n\t\t\t\"mul \" + temp2 + \", \" + temp1 + \".yzww, \" + dataReg2 + \"\\n\";\r\n\r\n\t\t//codeF += \"mov ft1.w, fc1.w\t\\n\" +\r\n\t\t//    \"mov ft0.w, fc0.x\t\\n\";\r\n\r\n\t\tif (this._textureVO && shader.alphaThreshold > 0) {\r\n\r\n\t\t\tvar albedo:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\r\n\t\t\tcode += this._textureVO._iGetFragmentCode(albedo, registerCache, sharedRegisters, sharedRegisters.uvVarying);\r\n\r\n\t\t\tvar cutOffReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\r\n\r\n\t\t\tcode += \"sub \" + albedo + \".w, \" + albedo + \".w, \" + cutOffReg + \".x\\n\" +\r\n\t\t\t\t\"kil \" + albedo + \".w\\n\";\r\n\t\t}\r\n\r\n\t\tcode += \"sub \" + targetReg + \", \" + temp1 + \", \" + temp2 + \"\\n\";\r\n\r\n\t\tregisterCache.removeFragmentTempUsage(temp1);\r\n\t\tregisterCache.removeFragmentTempUsage(temp2);\r\n\r\n\t\treturn code;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iActivate(camera:Camera):void\r\n\t{\r\n\t\tsuper._iActivate(camera);\r\n\r\n\t\tif (this._textureVO && this._shader.alphaThreshold > 0) {\r\n\t\t\tthis._textureVO.activate(this);\r\n\r\n\t\t\tthis._shader.fragmentConstantData[this._fragmentConstantsIndex + 8] = this._shader.alphaThreshold;\r\n\t\t}\r\n\t}\r\n}",
    "﻿import {ISurface}\t\t\t\t\t\tfrom \"awayjs-display/lib/base/ISurface\";\r\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\n\r\nimport {SurfacePool}\t\t\t\t\tfrom \"../surfaces/SurfacePool\";\r\nimport {GL_SurfacePassBase}\t\t\tfrom \"../surfaces/GL_SurfacePassBase\";\r\nimport {IElementsClassGL}\t\t\t\tfrom \"../elements/IElementsClassGL\";\r\nimport {ShaderBase}\t\t\t\t\tfrom \"../shaders/ShaderBase\";\r\nimport {ShaderRegisterCache}\t\t\tfrom \"../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterData}\t\t\tfrom \"../shaders/ShaderRegisterData\";\r\nimport {ShaderRegisterElement}\t\tfrom \"../shaders/ShaderRegisterElement\";\r\nimport {GL_TextureBase}\t\t\t\tfrom \"../textures/GL_TextureBase\";\r\n\r\n/**\r\n * DistanceRender is a pass that writes distance values to a depth map as a 32-bit value exploded over the 4 texture channels.\r\n * This is used to render omnidirectional shadow maps.\r\n */\r\nexport class GL_DistanceSurface extends GL_SurfacePassBase\r\n{\r\n\tprivate _textureVO:GL_TextureBase;\r\n\tprivate _fragmentConstantsIndex:number;\r\n\r\n\t/**\r\n\t * Creates a new DistanceRender object.\r\n\t *\r\n\t * @param material The material to which this pass belongs.\r\n\t */\r\n\tconstructor(surface:ISurface, elementsClass:IElementsClassGL, renderPool:SurfacePool)\r\n\t{\r\n\t\tsuper(surface, elementsClass, renderPool);\r\n\r\n\t\tthis._shader = new ShaderBase(elementsClass, this, this._stage);\r\n\r\n\t\tthis._pAddPass(this);\r\n\t}\r\n\r\n\tpublic invalidate():void\r\n\t{\r\n\t\tsuper.invalidate();\r\n\r\n\t\tthis._textureVO = this._surface.getTextureAt(0)? <GL_TextureBase> this._shader.getAbstraction(this._surface.getTextureAt(0)) : null;\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes the unchanging constant data for this material.\r\n\t */\r\n\tpublic _iInitConstantData(shader:ShaderBase):void\r\n\t{\r\n\t\tsuper._iInitConstantData(shader);\r\n\r\n\t\tvar index:number = this._fragmentConstantsIndex;\r\n\t\tvar data:Float32Array = shader.fragmentConstantData;\r\n\t\tdata[index + 4] = 1.0/255.0;\r\n\t\tdata[index + 5] = 1.0/255.0;\r\n\t\tdata[index + 6] = 1.0/255.0;\r\n\t\tdata[index + 7] = 0.0;\r\n\t}\r\n\r\n\tpublic _iIncludeDependencies(shader:ShaderBase):void\r\n\t{\r\n\t\tsuper._iIncludeDependencies(shader);\r\n\r\n\t\tshader.projectionDependencies++;\r\n\t\tshader.viewDirDependencies++;\r\n\r\n\t\tif (shader.alphaThreshold > 0)\r\n\t\t\tshader.uvDependencies++;\r\n\r\n\t\tif (shader.viewDirDependencies > 0)\r\n\t\t\tshader.globalPosDependencies++;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iGetFragmentCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\r\n\t{\r\n\t\tvar code:string;\r\n\t\tvar targetReg:ShaderRegisterElement = sharedRegisters.shadedTarget;\r\n\t\tvar dataReg1:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\r\n\t\tvar dataReg2:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\r\n\r\n\t\tthis._fragmentConstantsIndex = dataReg1.index*4;\r\n\r\n\t\tvar temp1:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\r\n\t\tregisterCache.addFragmentTempUsages(temp1, 1);\r\n\t\tvar temp2:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\r\n\t\tregisterCache.addFragmentTempUsages(temp2, 1);\r\n\r\n\t\t// squared distance to view\r\n\t\tcode = \"dp3 \" + temp1 + \".z, \" + sharedRegisters.viewDirVarying + \".xyz, \" + sharedRegisters.viewDirVarying + \".xyz\\n\" +\r\n\t\t\t\"mul \" + temp1 + \", \" + dataReg1 + \", \" + temp1 + \".z\\n\" +\r\n\t\t\t\"frc \" + temp1 + \", \" + temp1 + \"\\n\" +\r\n\t\t\t\"mul \" + temp2 + \", \" + temp1 + \".yzww, \" + dataReg2 + \"\\n\";\r\n\r\n\t\tif (this._textureVO && shader.alphaThreshold > 0) {\r\n\r\n\t\t\tvar albedo:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\r\n\t\t\tcode += this._textureVO._iGetFragmentCode(albedo, registerCache, sharedRegisters, sharedRegisters.uvVarying);\r\n\r\n\t\t\tvar cutOffReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\r\n\r\n\t\t\tcode += \"sub \" + albedo + \".w, \" + albedo + \".w, \" + cutOffReg + \".x\\n\" +\r\n\t\t\t\t\"kil \" + albedo + \".w\\n\";\r\n\t\t}\r\n\r\n\t\tcode += \"sub \" + targetReg + \", \" + temp1 + \", \" + temp2 + \"\\n\";\r\n\r\n\t\treturn code;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iActivate(camera:Camera):void\r\n\t{\r\n\t\tsuper._iActivate(camera);\r\n\r\n\t\tvar f:number = camera.projection.far;\r\n\r\n\t\tf = 1/(2*f*f);\r\n\t\t// sqrt(f*f+f*f) is largest possible distance for any frustum, so we need to divide by it. Rarely a tight fit, but with 32 bits precision, it's enough.\r\n\t\tvar index:number = this._fragmentConstantsIndex;\r\n\t\tvar data:Float32Array = this._shader.fragmentConstantData;\r\n\t\tdata[index] = 1.0*f;\r\n\t\tdata[index + 1] = 255.0*f;\r\n\t\tdata[index + 2] = 65025.0*f;\r\n\t\tdata[index + 3] = 16581375.0*f;\r\n\r\n\t\tif (this._textureVO && this._shader.alphaThreshold > 0) {\r\n\t\t\tthis._textureVO.activate(this);\r\n\r\n\t\t\tdata[index + 8] = this._shader.alphaThreshold;\r\n\t\t}\r\n\t}\r\n}",
    "import {AssetEvent}\t\t\t\t\tfrom \"awayjs-core/lib/events/AssetEvent\";\r\nimport {Matrix3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\r\nimport {BlendMode}\t\t\t\t\tfrom \"awayjs-core/lib/image/BlendMode\";\r\n\r\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\nimport {Skybox}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Skybox\";\r\n\r\nimport {ContextGLCompareMode}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLCompareMode\";\r\n\r\nimport {GL_RenderableBase}\t\t\tfrom \"../renderables/GL_RenderableBase\";\r\nimport {IElementsClassGL}\t\t\t\tfrom \"../elements/IElementsClassGL\";\r\nimport {GL_SurfacePassBase}\t\t\tfrom \"../surfaces/GL_SurfacePassBase\";\r\nimport {SurfacePool}\t\t\t\t\tfrom \"../surfaces/SurfacePool\";\r\nimport {ShaderBase}\t\t\t\t\tfrom \"../shaders/ShaderBase\";\r\nimport {ShaderRegisterCache}\t\t\tfrom \"../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterData}\t\t\tfrom \"../shaders/ShaderRegisterData\";\r\nimport {GL_TextureBase}\t\t\t\tfrom \"../textures/GL_TextureBase\";\r\n\r\n/**\r\n * GL_SkyboxSurface forms an abstract base class for the default shaded materials provided by Stage,\r\n * using material methods to define their appearance.\r\n */\r\nexport class GL_SkyboxSurface extends GL_SurfacePassBase\r\n{\r\n\tpublic _skybox:Skybox;\r\n\tpublic _texture:GL_TextureBase;\r\n\r\n\tconstructor(skybox:Skybox, elementsClass:IElementsClassGL, renderPool:SurfacePool)\r\n\t{\r\n\t\tsuper(skybox, elementsClass, renderPool);\r\n\r\n\t\tthis._skybox = skybox;\r\n\r\n\t\tthis._shader = new ShaderBase(elementsClass, this, this._stage);\r\n\r\n\t\tthis._texture = <GL_TextureBase> this._shader.getAbstraction(this._skybox.texture);\r\n\r\n\t\tthis._pAddPass(this);\r\n\t}\r\n\r\n\tpublic onClear(event:AssetEvent):void\r\n\t{\r\n\t\tsuper.onClear(event);\r\n\r\n\t\tthis._texture.onClear(new AssetEvent(AssetEvent.CLEAR, this._skybox.texture));\r\n\t\tthis._texture = null;\r\n\r\n\t\tthis._skybox = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _pUpdateRender():void\r\n\t{\r\n\t\tsuper._pUpdateRender();\r\n\r\n\t\tthis._pRequiresBlending = (this._surface.blendMode != BlendMode.NORMAL);\r\n\r\n\t\tthis.shader.setBlendMode((this._surface.blendMode == BlendMode.NORMAL && this._pRequiresBlending)? BlendMode.LAYER : this._surface.blendMode);\r\n\t}\r\n\r\n\tpublic _iIncludeDependencies(shader:ShaderBase):void\r\n\t{\r\n\t\tsuper._iIncludeDependencies(shader);\r\n\r\n\t\tshader.usesPositionFragment = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iGetFragmentCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\r\n\t{\r\n\t\treturn this._texture._iGetFragmentCode(sharedRegisters.shadedTarget, registerCache, sharedRegisters, sharedRegisters.positionVarying);\r\n\t}\r\n\r\n\r\n\tpublic _setRenderState(renderable:GL_RenderableBase, camera:Camera, viewProjection:Matrix3D):void\r\n\t{\r\n\t\tsuper._setRenderState(renderable, camera, viewProjection);\r\n\r\n\t\tthis._texture._setRenderState(renderable);\r\n\t}\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iActivate(camera:Camera):void\r\n\t{\r\n\t\tsuper._iActivate(camera);\r\n\r\n\t\tthis._stage.context.setDepthTest(false, ContextGLCompareMode.LESS);\r\n\r\n\t\tthis._texture.activate(this);\r\n\t}\r\n}",
    "import {Matrix3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\r\nimport {AssetEvent}\t\t\t\t\tfrom \"awayjs-core/lib/events/AssetEvent\";\r\nimport {ImageBase}\t\t\t\t\tfrom \"awayjs-core/lib/image/ImageBase\";\r\nimport {SamplerBase}\t\t\t\t\tfrom \"awayjs-core/lib/image/SamplerBase\";\r\nimport {Sampler2D}\t\t\t\t\tfrom \"awayjs-core/lib/image/Sampler2D\";\r\n\r\nimport {AbstractionBase}\t\t\t\tfrom \"awayjs-core/lib/library/AbstractionBase\";\r\n\r\nimport {ISurface}\t\t\t\t\t\tfrom \"awayjs-display/lib/base/ISurface\";\r\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\nimport {SurfaceEvent}\t\t\t\t\tfrom \"awayjs-display/lib/events/SurfaceEvent\";\r\nimport {IRenderable}\t\t\t\t\tfrom \"awayjs-display/lib/base/IRenderable\";\r\nimport {MaterialBase}\t\t\t\t\tfrom \"awayjs-display/lib/materials/MaterialBase\";\r\nimport {DefaultMaterialManager}\t\tfrom \"awayjs-display/lib/managers/DefaultMaterialManager\";\r\nimport {TextureBase}\t\t\t\t\tfrom \"awayjs-display/lib/textures/TextureBase\";\r\n\r\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\nimport {GL_ImageBase}\t\t\t\t\tfrom \"awayjs-stagegl/lib/image/GL_ImageBase\";\r\nimport {GL_SamplerBase}\t\t\t\tfrom \"awayjs-stagegl/lib/image/GL_SamplerBase\";\r\n\r\nimport {AnimatorBase}\t\t\t\t\tfrom \"../animators/AnimatorBase\";\r\nimport {PassEvent}\t\t\t\t\tfrom \"../events/PassEvent\";\r\nimport {ShaderBase}\t\t\t\t\tfrom \"../shaders/ShaderBase\";\r\nimport {ShaderRegisterCache}\t\t\tfrom \"../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterData}\t\t\tfrom \"../shaders/ShaderRegisterData\";\r\nimport {SurfacePool}\t\t\t\t\tfrom \"../surfaces/SurfacePool\";\r\nimport {IPass}\t\t\t\t\t\tfrom \"../surfaces/passes/IPass\";\r\nimport {IElementsClassGL}\t\t\t\tfrom \"../elements/IElementsClassGL\";\r\nimport {GL_TextureBase}\t\t\t\tfrom \"../textures/GL_TextureBase\";\r\n\r\n/**\r\n *\r\n * @class away.pool.Passes\r\n */\r\nexport class GL_SurfaceBase extends AbstractionBase\r\n{\r\n\tprivate _onInvalidateAnimationDelegate:(event:SurfaceEvent) => void;\r\n\tprivate _onInvalidatePassesDelegate:(event:SurfaceEvent) => void;\r\n\r\n\tpublic usages:number = 0;\r\n\tpublic _forceSeparateMVP:boolean = false;\r\n\r\n\tpublic _surface:ISurface;\r\n\tpublic _elementsClass:IElementsClassGL;\r\n\tpublic _stage:Stage;\r\n\r\n\tprivate _renderOrderId:number;\r\n\tprivate _usesAnimation:boolean = true;\r\n\tprivate _invalidAnimation:boolean = true;\r\n\tprivate _invalidRender:boolean = true;\r\n\tprivate _invalidImages:boolean = true;\r\n\tprivate _passes:Array<IPass> = new Array<IPass>();\r\n\tprivate _imageIndices:Object = new Object();\r\n\tprivate _numImages:number;\r\n\r\n\r\n\r\n\r\n\tpublic _pRequiresBlending:boolean = false;\r\n\r\n\tprivate _onPassInvalidateDelegate:(event:PassEvent) => void;\r\n\r\n\tpublic surfaceID:number;\r\n\r\n\tpublic images:Array<GL_ImageBase> = new Array<GL_ImageBase>();\r\n\tpublic samplers:Array<GL_SamplerBase> = new Array<GL_SamplerBase>();\r\n\r\n\t/**\r\n\t * Indicates whether or not the renderable requires alpha blending during rendering.\r\n\t */\r\n\tpublic get requiresBlending():boolean\r\n\t{\r\n\t\treturn this._pRequiresBlending;\r\n\t}\r\n\r\n\tpublic get renderOrderId():number\r\n\t{\r\n\t\tif (this._invalidAnimation)\r\n\t\t\tthis._updateAnimation();\r\n\r\n\t\treturn this._renderOrderId;\r\n\t}\r\n\r\n\tpublic get passes():Array<IPass>\r\n\t{\r\n\t\tif (this._invalidAnimation)\r\n\t\t\tthis._updateAnimation();\r\n\r\n\t\treturn this._passes;\r\n\t}\r\n\r\n\tpublic get surface():ISurface\r\n\t{\r\n\t\treturn this._surface;\r\n\t}\r\n\r\n\tpublic get numImages():number\r\n\t{\r\n\t\tif (this._invalidImages)\r\n\t\t\tthis._updateImages();\r\n\r\n\t\treturn this._numImages;\r\n\t}\r\n\r\n\tconstructor(surface:ISurface, elementsClass:IElementsClassGL, renderPool:SurfacePool)\r\n\t{\r\n\t\tsuper(surface, renderPool);\r\n\r\n\t\tthis._onInvalidateAnimationDelegate = (event:SurfaceEvent) => this.onInvalidateAnimation(event);\r\n\t\tthis._onInvalidatePassesDelegate = (event:SurfaceEvent) => this.onInvalidatePasses(event);\r\n\r\n\t\tthis.surfaceID = surface.id;\r\n\t\tthis._surface = surface;\r\n\t\tthis._elementsClass = elementsClass;\r\n\t\tthis._stage = renderPool.stage;\r\n\r\n\t\tthis._surface.addEventListener(SurfaceEvent.INVALIDATE_ANIMATION, this._onInvalidateAnimationDelegate);\r\n\t\tthis._surface.addEventListener(SurfaceEvent.INVALIDATE_PASSES, this._onInvalidatePassesDelegate);\r\n\r\n\t\tthis._onPassInvalidateDelegate = (event:PassEvent) => this.onPassInvalidate(event);\r\n\t}\r\n\r\n\tpublic _iIncludeDependencies(shader:ShaderBase):void\r\n\t{\r\n\t\tthis._elementsClass._iIncludeDependencies(shader);\r\n\r\n\t\tshader.alphaThreshold = this._surface.alphaThreshold;\r\n\t\tshader.useImageRect = this._surface.imageRect;\r\n\t\tshader.usesCurves = this._surface.curves;\r\n\r\n\t\tif (this._surface instanceof MaterialBase) {\r\n\t\t\tvar material:MaterialBase = <MaterialBase> this._surface;\r\n\t\t\tshader.useAlphaPremultiplied = material.alphaPremultiplied;\r\n\t\t\tshader.useBothSides = material.bothSides;\r\n\t\t\tshader.usesUVTransform = material.animateUVs;\r\n\t\t\tshader.usesColorTransform = material.useColorTransform;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getImageIndex(texture:TextureBase, index:number = 0):number\r\n\t{\r\n\t\tif (this._invalidImages)\r\n\t\t\tthis._updateImages();\r\n\r\n\t\treturn this._imageIndices[texture.id][index];\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic onClear(event:AssetEvent):void\r\n\t{\r\n\t\tsuper.onClear(event);\r\n\r\n\t\tthis._surface = null;\r\n\t\tthis._elementsClass = null;\r\n\t\tthis._stage = null;\r\n\r\n\t\tvar len:number = this._passes.length;\r\n\t\tfor (var i:number = 0; i < len; i++) {\r\n\t\t\tthis._passes[i].removeEventListener(PassEvent.INVALIDATE, this._onPassInvalidateDelegate);\r\n\t\t\tthis._passes[i].dispose();\r\n\t\t}\r\n\r\n\t\tthis._passes = null;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic onInvalidate(event:AssetEvent):void\r\n\t{\r\n\t\tsuper.onInvalidate(event);\r\n\r\n\t\tthis._invalidRender = true;\r\n\t\tthis._invalidAnimation = true;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic onInvalidatePasses(event:SurfaceEvent):void\r\n\t{\r\n\t\tvar len:number = this._passes.length;\r\n\t\tfor (var i:number = 0; i < len; i++)\r\n\t\t\tthis._passes[i].invalidate();\r\n\r\n\t\tthis._invalidAnimation = true;\r\n\t\tthis._invalidImages = true;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic onInvalidateAnimation(event:SurfaceEvent):void\r\n\t{\r\n\t\tthis._invalidAnimation = true;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param surface\r\n\t */\r\n\tprivate _updateAnimation():void\r\n\t{\r\n\t\tif (this._invalidRender)\r\n\t\t\tthis._pUpdateRender();\r\n\r\n\t\tthis._invalidAnimation = false;\r\n\r\n\t\tvar usesAnimation:boolean = this._getEnabledGPUAnimation();\r\n\r\n\t\tvar renderOrderId = 0;\r\n\t\tvar mult:number = 1;\r\n\t\tvar shader:ShaderBase;\r\n\t\tvar len:number = this._passes.length;\r\n\t\tfor (var i:number = 0; i < len; i++) {\r\n\t\t\tshader = this._passes[i].shader;\r\n\t\t\tshader.usesAnimation = usesAnimation;\r\n\r\n\t\t\trenderOrderId += shader.programData.id*mult;\r\n\t\t\tmult *= 1000;\r\n\t\t}\r\n\t\t\r\n\t\tif (this._usesAnimation != usesAnimation) {\r\n\t\t\tthis._usesAnimation = usesAnimation;\r\n\r\n\t\t\tvar renderables:Array<IRenderable> = this._surface.iOwners;\r\n\t\t\tvar numOwners:number = renderables.length;\r\n\t\t\tfor (var j:number = 0; j < numOwners; j++)\r\n\t\t\t\trenderables[j].invalidateElements();\r\n\t\t}\r\n\r\n\t\tthis._renderOrderId = renderOrderId;\r\n\t}\r\n\r\n\tprivate _updateImages():void\r\n\t{\r\n\t\tthis._invalidImages = false;\r\n\r\n\t\tvar numTextures:number = this._surface.getNumTextures();\r\n\t\tvar texture:TextureBase;\r\n\t\tvar numImages:number;\r\n\t\tvar images:Array<number>;\r\n\t\tvar image:ImageBase;\r\n\t\tvar sampler:SamplerBase;\r\n\t\tvar index:number = 0;\r\n\r\n\t\tfor (var i:number = 0; i < numTextures; i++) {\r\n\t\t\ttexture = this._surface.getTextureAt(i);\r\n\t\t\tnumImages = texture.getNumImages();\r\n\t\t\timages = this._imageIndices[texture.id] = new Array<number>();\r\n\t\t\tfor (var j:number = 0; j < numImages; j++) {\r\n\t\t\t\timage = texture.getImageAt(j) || (this._surface.style? this._surface.style.getImageAt(texture, j) : null) || DefaultMaterialManager.getDefaultImage2D();\r\n\t\t\t\tthis.images[index] = <GL_ImageBase> this._stage.getAbstraction(image);\r\n\r\n\t\t\t\tsampler = texture.getSamplerAt(j) || (this._surface.style? this._surface.style.getSamplerAt(texture, j) : null) || DefaultMaterialManager.getDefaultSampler();\r\n\t\t\t\tthis.samplers[index] = <GL_SamplerBase> this._stage.getAbstraction(sampler);\r\n\r\n\t\t\t\timages[j] = index++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._numImages = index;\r\n\t}\r\n\r\n\t/**\r\n\t * Performs any processing that needs to occur before any of its passes are used.\r\n\t *\r\n\t * @private\r\n\t */\r\n\tpublic _pUpdateRender():void\r\n\t{\r\n\t\tthis._invalidRender = false;\r\n\r\n\t\t//overrride to update shader object properties\r\n\t}\r\n\r\n\t/**\r\n\t * Removes a pass from the surface.\r\n\t * @param pass The pass to be removed.\r\n\t */\r\n\tpublic _pRemovePass(pass:IPass):void\r\n\t{\r\n\t\tpass.removeEventListener(PassEvent.INVALIDATE, this._onPassInvalidateDelegate);\r\n\t\tthis._passes.splice(this._passes.indexOf(pass), 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Removes all passes from the surface\r\n\t */\r\n\tpublic _pClearPasses():void\r\n\t{\r\n\t\tvar len:number = this._passes.length;\r\n\t\tfor (var i:number = 0; i < len; ++i)\r\n\t\t\tthis._passes[i].removeEventListener(PassEvent.INVALIDATE, this._onPassInvalidateDelegate);\r\n\r\n\t\tthis._passes.length = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a pass to the surface\r\n\t * @param pass\r\n\t */\r\n\tpublic _pAddPass(pass:IPass):void\r\n\t{\r\n\t\tthis._passes.push(pass);\r\n\t\tpass.addEventListener(PassEvent.INVALIDATE, this._onPassInvalidateDelegate);\r\n\t}\r\n\r\n\t/**\r\n\t * Listener for when a pass's shader code changes. It recalculates the render order id.\r\n\t */\r\n\tprivate onPassInvalidate(event:PassEvent):void\r\n\t{\r\n\t\tthis._invalidAnimation = true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * test if animation will be able to run on gpu BEFORE compiling materials\r\n\t * test if the shader objects supports animating the animation set in the vertex shader\r\n\t * if any object using this material fails to support accelerated animations for any of the shader objects,\r\n\t * we should do everything on cpu (otherwise we have the cost of both gpu + cpu animations)\r\n\t */\r\n\tprivate _getEnabledGPUAnimation():boolean\r\n\t{\r\n\t\tif (this._surface.animationSet) {\r\n\t\t\tthis._surface.animationSet.resetGPUCompatibility();\r\n\r\n\t\t\tvar renderables:Array<IRenderable> = this._surface.iOwners;\r\n\t\t\tvar numOwners:number = renderables.length;\r\n\r\n\t\t\tvar len:number = this._passes.length;\r\n\t\t\tvar shader:ShaderBase;\r\n\t\t\tfor (var i:number = 0; i < len; i++) {\r\n\t\t\t\tshader = this._passes[i].shader;\r\n\t\t\t\tshader.usesAnimation = false;\r\n\t\t\t\tfor (var j:number = 0; j < numOwners; j++)\r\n\t\t\t\t\tif (renderables[j].animator)\r\n\t\t\t\t\t\t(<AnimatorBase> renderables[j].animator).testGPUCompatibility(shader);\r\n\t\t\t}\r\n\r\n\r\n\t\t\treturn !this._surface.animationSet.usesCPU;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n}",
    "import {AssetEvent}\t\t\t\t\tfrom \"awayjs-core/lib/events/AssetEvent\";\r\nimport {ImageBase}\t\t\t\t\tfrom \"awayjs-core/lib/image/ImageBase\";\r\nimport {Matrix3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\r\n\r\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\n\r\nimport {AnimationSetBase}\t\t\t\tfrom \"../animators/AnimationSetBase\";\r\nimport {PassEvent}\t\t\t\t\tfrom \"../events/PassEvent\";\r\nimport {ShaderBase}\t\t\t\t\tfrom \"../shaders/ShaderBase\";\r\nimport {ShaderRegisterCache}\t\t\tfrom \"../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterData}\t\t\tfrom \"../shaders/ShaderRegisterData\";\r\nimport {IPass}\t\t\t\t\t\tfrom \"../surfaces/passes/IPass\";\r\nimport {GL_RenderableBase}\t\t\tfrom \"../renderables/GL_RenderableBase\";\r\nimport {GL_SurfaceBase}\t\t\t\tfrom \"../surfaces/GL_SurfaceBase\";\r\n\r\n/**\r\n * GL_SurfacePassBase provides an abstract base class for material shader passes. A material pass constitutes at least\r\n * a render call per required renderable.\r\n */\r\nexport class GL_SurfacePassBase extends GL_SurfaceBase implements IPass\r\n{\r\n\tpublic _shader:ShaderBase;\r\n\r\n\tpublic get shader():ShaderBase\r\n\t{\r\n\t\treturn this._shader;\r\n\t}\r\n\r\n\tpublic get animationSet():AnimationSetBase\r\n\t{\r\n\t\treturn <AnimationSetBase> this._surface.animationSet;\r\n\t}\r\n\r\n\t/**\r\n\t * Marks the shader program as invalid, so it will be recompiled before the next render.\r\n\t */\r\n\tpublic invalidate():void\r\n\t{\r\n\t\tthis._shader.invalidateProgram();\r\n\r\n\t\tthis.dispatchEvent(new PassEvent(PassEvent.INVALIDATE, this));\r\n\t}\r\n\r\n\tpublic dispose():void\r\n\t{\r\n\t\tif (this._shader) {\r\n\t\t\tthis._shader.dispose();\r\n\t\t\tthis._shader = null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Renders the current pass. Before calling pass, activatePass needs to be called with the same index.\r\n\t * @param pass The pass used to render the renderable.\r\n\t * @param renderable The IRenderable object to draw.\r\n\t * @param stage The Stage object used for rendering.\r\n\t * @param entityCollector The EntityCollector object that contains the visible scene data.\r\n\t * @param viewProjection The view-projection matrix used to project to the screen. This is not the same as\r\n\t * camera.viewProjection as it includes the scaling factors when rendering to textures.\r\n\t *\r\n\t * @internal\r\n\t */\r\n\tpublic _setRenderState(renderable:GL_RenderableBase, camera:Camera, viewProjection:Matrix3D):void\r\n\t{\r\n\t\tthis._shader._setRenderState(renderable, camera, viewProjection);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the render state for the pass that is independent of the rendered object. This needs to be called before\r\n\t * calling pass. Before activating a pass, the previously used pass needs to be deactivated.\r\n\t * @param stage The Stage object which is currently used for rendering.\r\n\t * @param camera The camera from which the scene is viewed.\r\n\t * @private\r\n\t */\r\n\tpublic _iActivate(camera:Camera):void\r\n\t{\r\n\t\tthis._shader._iActivate(camera);\r\n\t}\r\n\r\n\t/**\r\n\t * Clears the render state for the pass. This needs to be called before activating another pass.\r\n\t * @param stage The Stage used for rendering\r\n\t *\r\n\t * @private\r\n\t */\r\n\tpublic _iDeactivate():void\r\n\t{\r\n\t\tthis._shader._iDeactivate();\r\n\t}\r\n\r\n\tpublic _iInitConstantData(shader:ShaderBase):void\r\n\t{\r\n\r\n\t}\r\n\r\n\tpublic _iGetPreLightingVertexCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\r\n\t{\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\tpublic _iGetPreLightingFragmentCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\r\n\t{\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\tpublic _iGetVertexCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\r\n\t{\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\tpublic _iGetFragmentCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\r\n\t{\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\tpublic _iGetNormalVertexCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\r\n\t{\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\tpublic _iGetNormalFragmentCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\r\n\t{\r\n\t\treturn \"\";\r\n\t}\r\n}",
    "import {IAssetClass}\t\t\t\t\tfrom \"awayjs-core/lib/library/IAssetClass\";\r\nimport {IAbstractionPool}\t\t\t\tfrom \"awayjs-core/lib/library/IAbstractionPool\";\r\n\r\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\n\r\nimport {ISurface}\t\t\t\t\t\tfrom \"awayjs-display/lib/base/ISurface\";\r\n\r\nimport {IElementsClassGL}\t\t\t\tfrom \"../elements/IElementsClassGL\";\r\nimport {ISurfaceClassGL}\t\t\t\tfrom \"../surfaces/ISurfaceClassGL\";\r\nimport {GL_SurfaceBase}\t\t\t\tfrom \"../surfaces/GL_SurfaceBase\";\r\n\r\n/**\r\n * @class away.pool.SurfacePool\r\n */\r\nexport class SurfacePool implements IAbstractionPool\r\n{\r\n\tprivate static _abstractionClassPool:Object = new Object();\r\n\r\n\tprivate _abstractionPool:Object = new Object();\r\n\tprivate _elementsClass:IElementsClassGL;\r\n\tprivate _stage:Stage;\r\n\tprivate _surfaceClassGL:ISurfaceClassGL;\r\n\r\n\tget stage():Stage\r\n\t{\r\n\t\treturn this._stage;\r\n\t}\r\n\r\n\t/**\r\n\t * //TODO\r\n\t *\r\n\t * @param surfaceClassGL\r\n\t */\r\n\tconstructor(elementsClass:IElementsClassGL, stage:Stage, surfaceClassGL:ISurfaceClassGL = null)\r\n\t{\r\n\t\tthis._elementsClass = elementsClass;\r\n\t\tthis._stage = stage;\r\n\t\tthis._surfaceClassGL = surfaceClassGL;\r\n\t}\r\n\r\n\t/**\r\n\t * //TODO\r\n\t *\r\n\t * @param elementsOwner\r\n\t * @returns IElements\r\n\t */\r\n\tpublic getAbstraction(surface:ISurface):GL_SurfaceBase\r\n\t{\r\n\t\treturn (this._abstractionPool[surface.id] || (this._abstractionPool[surface.id] = new (<ISurfaceClassGL> this._surfaceClassGL || SurfacePool._abstractionClassPool[surface.assetType])(surface, this._elementsClass, this)));\r\n\t}\r\n\r\n\t/**\r\n\t * //TODO\r\n\t *\r\n\t * @param elementsOwner\r\n\t */\r\n\tpublic clearAbstraction(surface:ISurface):void\r\n\t{\r\n\t\tdelete this._abstractionPool[surface.id];\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param imageObjectClass\r\n\t */\r\n\tpublic static registerAbstraction(surfaceClassGL:ISurfaceClassGL, assetClass:IAssetClass):void\r\n\t{\r\n\t\tSurfacePool._abstractionClassPool[assetClass.assetType] = surfaceClassGL;\r\n\t}\r\n}",
    "import {AssetEvent}\t\t\t\t\tfrom \"awayjs-core/lib/events/AssetEvent\";\r\nimport {Matrix3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\r\n\r\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\nimport {ISurface}\t\t\t\t\t\tfrom \"awayjs-display/lib/base/ISurface\";\r\n\r\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\n\r\nimport {GL_RenderableBase}\t\t\tfrom \"../../renderables/GL_RenderableBase\";\r\nimport {GL_SurfaceBase}\t\t\t\tfrom \"../../surfaces/GL_SurfaceBase\";\r\nimport {ShaderBase}\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\nimport {ShaderRegisterCache}\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterData}\t\t\tfrom \"../../shaders/ShaderRegisterData\";\r\nimport {ShaderRegisterElement}\t\tfrom \"../../shaders/ShaderRegisterElement\";\r\nimport {IElementsClassGL}\t\t\t\tfrom \"../../elements/IElementsClassGL\";\r\nimport {PassBase}\t\t\t\t\t\tfrom \"../../surfaces/passes/PassBase\";\r\nimport {GL_TextureBase}\t\t\t\tfrom \"../../textures/GL_TextureBase\";\r\n\r\n/**\r\n * BasicMaterialPass forms an abstract base class for the default shaded materials provided by Stage,\r\n * using material methods to define their appearance.\r\n */\r\nexport class BasicMaterialPass extends PassBase\r\n{\r\n\tprivate _textureVO:GL_TextureBase;\r\n\tprivate _diffuseR:number = 1;\r\n\tprivate _diffuseG:number = 1;\r\n\tprivate _diffuseB:number = 1;\r\n\tprivate _diffuseA:number = 1;\r\n\r\n\tprivate _fragmentConstantsIndex:number;\r\n\r\n\tconstructor(render:GL_SurfaceBase, surface:ISurface, elementsClass:IElementsClassGL, stage:Stage)\r\n\t{\r\n\t\tsuper(render, surface, elementsClass, stage);\r\n\r\n\t\tthis._shader = new ShaderBase(elementsClass, this, this._stage);\r\n\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\tpublic _iIncludeDependencies(shader:ShaderBase):void\r\n\t{\r\n\t\tsuper._iIncludeDependencies(shader);\r\n\r\n\t\tif (this._textureVO != null)\r\n\t\t\tshader.uvDependencies++;\r\n    }\r\n\r\n\tpublic invalidate():void\r\n\t{\r\n\t\tsuper.invalidate();\r\n\r\n\t\tthis._textureVO = this._surface.getTextureAt(0)? <GL_TextureBase> this._shader.getAbstraction(this._surface.getTextureAt(0)) : null;\r\n\t}\r\n\r\n\tpublic dispose():void\r\n\t{\r\n\t\tif (this._textureVO) {\r\n\t\t\tthis._textureVO.onClear(new AssetEvent(AssetEvent.CLEAR, this._surface.getTextureAt(0)));\r\n\t\t\tthis._textureVO = null;\r\n\t\t}\r\n\r\n\t\tsuper.dispose();\r\n\t}\r\n\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iGetFragmentCode(shader:ShaderBase, regCache:ShaderRegisterCache, sharedReg:ShaderRegisterData):string\r\n\t{\r\n\t\tvar code:string = \"\";\r\n\r\n        var alphaReg:ShaderRegisterElement;\r\n\r\n        if (this.preserveAlpha) {\r\n            alphaReg = regCache.getFreeFragmentSingleTemp();\r\n            regCache.addFragmentTempUsages(alphaReg, 1);\r\n            code += \"mov \" + alphaReg + \", \" + sharedReg.shadedTarget + \".w\\n\";\r\n        }\r\n\r\n\t\tvar targetReg:ShaderRegisterElement = sharedReg.shadedTarget;\r\n\r\n\t\tif (this._textureVO != null) {\r\n\r\n\t\t\tcode += this._textureVO._iGetFragmentCode(targetReg, regCache, sharedReg, sharedReg.uvVarying);\r\n\r\n\t\t\tif (shader.alphaThreshold > 0) {\r\n\t\t\t\tvar cutOffReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\r\n\t\t\t\tthis._fragmentConstantsIndex = cutOffReg.index*4;\r\n\r\n\t\t\t\tcode += \"sub \" + targetReg + \".w, \" + targetReg + \".w, \" + cutOffReg + \".x\\n\" + \"kil \" + targetReg + \".w\\n\" + \"add \" + targetReg + \".w, \" + targetReg + \".w, \" + cutOffReg + \".x\\n\";\r\n\t\t\t}\r\n\t\t} else if (shader.colorBufferIndex != -1) {\r\n\r\n\t\t\tcode += \"mov \" + targetReg + \", \" + sharedReg.colorVarying + \"\\n\";\r\n\t\t} else {\r\n\t\t\tvar diffuseInputReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\r\n\r\n\t\t\tthis._fragmentConstantsIndex = diffuseInputReg.index*4;\r\n\r\n\t\t\tcode += \"mov \" + targetReg + \", \" + diffuseInputReg + \"\\n\";\r\n\t\t}\r\n\r\n        if (this.preserveAlpha) {\r\n            code += \"mul \" + sharedReg.shadedTarget + \".w, \" + sharedReg.shadedTarget + \".w, \" + alphaReg + \"\\n\";\r\n            regCache.removeFragmentTempUsage(alphaReg);\r\n        }\r\n\r\n\t\treturn code;\r\n\t}\r\n\r\n\tpublic _setRenderState(renderable:GL_RenderableBase, camera:Camera, viewProjection:Matrix3D):void\r\n\t{\r\n\t\tsuper._setRenderState(renderable, camera, viewProjection);\r\n\r\n\t\tif (this._textureVO != null)\r\n\t\t\tthis._textureVO._setRenderState(renderable);\r\n\t}\r\n\t/**\r\n\t * @inheritDoc\r\n\t */\r\n\tpublic _iActivate(camera:Camera):void\r\n\t{\r\n\t\tsuper._iActivate(camera);\r\n\r\n\t\tif (this._textureVO != null) {\r\n\t\t\tthis._textureVO.activate(this._render);\r\n\r\n\t\t\tif (this._shader.alphaThreshold > 0)\r\n\t\t\t\tthis._shader.fragmentConstantData[this._fragmentConstantsIndex] = this._shader.alphaThreshold;\r\n\t\t} else if (this._shader.colorBufferIndex == -1) {\r\n\t\t\tvar index:number = this._fragmentConstantsIndex;\r\n\t\t\tvar data:Float32Array = this._shader.fragmentConstantData;\r\n\t\t\tdata[index] = this._diffuseR;\r\n\t\t\tdata[index + 1] = this._diffuseG;\r\n\t\t\tdata[index + 2] = this._diffuseB;\r\n\t\t\tdata[index + 3] = this._diffuseA;\r\n\t\t}\r\n\t}\r\n}",
    "import {Matrix3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\r\nimport {EventDispatcher}\t\t\t\tfrom \"awayjs-core/lib/events/EventDispatcher\";\r\n\r\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\r\nimport {ISurface}\t\t\t\t\t\tfrom \"awayjs-display/lib/base/ISurface\";\r\nimport {TextureBase}\t\t\t\t\tfrom \"awayjs-display/lib/textures/TextureBase\";\r\n\r\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\n\r\nimport {AnimationSetBase}\t\t\t\tfrom \"../../animators/AnimationSetBase\";\r\nimport {PassEvent}\t\t\t\t\tfrom \"../../events/PassEvent\";\r\nimport {ShaderBase}\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\r\nimport {ShaderRegisterCache}\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterData}\t\t\tfrom \"../../shaders/ShaderRegisterData\";\r\nimport {IPass}\t\t\t\t\t\tfrom \"../../surfaces/passes/IPass\";\r\nimport {IElementsClassGL}\t\t\t\tfrom \"../../elements/IElementsClassGL\";\r\nimport {GL_RenderableBase}\t\t\tfrom \"../../renderables/GL_RenderableBase\";\r\nimport {GL_SurfaceBase}\t\t\t\tfrom \"../../surfaces/GL_SurfaceBase\";\r\n\r\n/**\r\n * PassBase provides an abstract base class for material shader passes. A material pass constitutes at least\r\n * a render call per required renderable.\r\n */\r\nexport class PassBase extends EventDispatcher implements IPass\r\n{\r\n\tpublic _render:GL_SurfaceBase;\r\n\tpublic _surface:ISurface;\r\n\tpublic _elementsClass:IElementsClassGL;\r\n\tpublic _stage:Stage;\r\n\t\r\n\tpublic _shader:ShaderBase;\r\n\r\n\tprivate _preserveAlpha:boolean = true;\r\n\tprivate _forceSeparateMVP:boolean = false;\r\n\r\n\tpublic get shader():ShaderBase\r\n\t{\r\n\t\treturn this._shader;\r\n\t}\r\n\r\n\tpublic get animationSet():AnimationSetBase\r\n\t{\r\n\t\treturn <AnimationSetBase> this._surface.animationSet;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether the output alpha value should remain unchanged compared to the material's original alpha.\r\n\t */\r\n\tpublic get preserveAlpha():boolean\r\n\t{\r\n\t\treturn this._preserveAlpha;\r\n\t}\r\n\r\n\tpublic set preserveAlpha(value:boolean)\r\n\t{\r\n\t\tif (this._preserveAlpha == value)\r\n\t\t\treturn;\r\n\r\n\t\tthis._preserveAlpha = value;\r\n\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether the screen projection should be calculated by forcing a separate scene matrix and\r\n\t * view-projection matrix. This is used to prevent rounding errors when using multiple passes with different\r\n\t * projection code.\r\n\t */\r\n\tpublic get forceSeparateMVP():boolean\r\n\t{\r\n\t\treturn this._forceSeparateMVP;\r\n\t}\r\n\r\n\tpublic set forceSeparateMVP(value:boolean)\r\n\t{\r\n\t\tif (this._forceSeparateMVP == value)\r\n\t\t\treturn;\r\n\r\n\t\tthis._forceSeparateMVP = value;\r\n\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new PassBase object.\r\n\t */\r\n\tconstructor(render:GL_SurfaceBase, surface:ISurface, elementsClass:IElementsClassGL, stage:Stage)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tthis._render = render;\r\n\t\tthis._surface = surface;\r\n\t\tthis._elementsClass = elementsClass;\r\n\t\tthis._stage = stage;\r\n\t}\r\n\r\n\tpublic getImageIndex(texture:TextureBase, index:number = 0):number\r\n\t{\r\n\t\treturn this._render.getImageIndex(texture, index);\r\n\t}\r\n\r\n\t/**\r\n\t * Marks the shader program as invalid, so it will be recompiled before the next render.\r\n\t */\r\n\tpublic invalidate():void\r\n\t{\r\n\t\tthis._shader.invalidateProgram();\r\n\r\n\t\tthis.dispatchEvent(new PassEvent(PassEvent.INVALIDATE, this));\r\n\t}\r\n\r\n\t/**\r\n\t * Cleans up any resources used by the current object.\r\n\t * @param deep Indicates whether other resources should be cleaned up, that could potentially be shared across different instances.\r\n\t */\r\n\tpublic dispose():void\r\n\t{\r\n\t\tthis._render = null;\r\n\t\tthis._surface = null;\r\n\t\tthis._elementsClass = null;\r\n\t\tthis._stage = null;\r\n\r\n\t\tif (this._shader) {\r\n\t\t\tthis._shader.dispose();\r\n\t\t\tthis._shader = null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Renders the current pass. Before calling pass, activatePass needs to be called with the same index.\r\n\t * @param pass The pass used to render the renderable.\r\n\t * @param renderable The IRenderable object to draw.\r\n\t * @param stage The Stage object used for rendering.\r\n\t * @param entityCollector The EntityCollector object that contains the visible scene data.\r\n\t * @param viewProjection The view-projection matrix used to project to the screen. This is not the same as\r\n\t * camera.viewProjection as it includes the scaling factors when rendering to textures.\r\n\t *\r\n\t * @internal\r\n\t */\r\n\tpublic _setRenderState(renderable:GL_RenderableBase, camera:Camera, viewProjection:Matrix3D):void\r\n\t{\r\n\t\tthis._shader._setRenderState(renderable, camera, viewProjection);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the render state for the pass that is independent of the rendered object. This needs to be called before\r\n\t * calling pass. Before activating a pass, the previously used pass needs to be deactivated.\r\n\t * @param stage The Stage object which is currently used for rendering.\r\n\t * @param camera The camera from which the scene is viewed.\r\n\t * @private\r\n\t */\r\n\tpublic _iActivate(camera:Camera):void\r\n\t{\r\n\t\tthis._shader._iActivate(camera);\r\n\t}\r\n\r\n\t/**\r\n\t * Clears the render state for the pass. This needs to be called before activating another pass.\r\n\t * @param stage The Stage used for rendering\r\n\t *\r\n\t * @private\r\n\t */\r\n\tpublic _iDeactivate():void\r\n\t{\r\n\t\tthis._shader._iDeactivate();\r\n\t}\r\n\r\n\tpublic _iIncludeDependencies(shader:ShaderBase):void\r\n\t{\r\n\t\tthis._render._iIncludeDependencies(shader);\r\n\t\t\r\n\t\tif (this._forceSeparateMVP)\r\n\t\t\tshader.globalPosDependencies++;\r\n\t}\r\n\r\n\r\n\tpublic _iInitConstantData(shader:ShaderBase):void\r\n\t{\r\n\r\n\t}\r\n\r\n\tpublic _iGetPreLightingVertexCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\r\n\t{\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\tpublic _iGetPreLightingFragmentCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\r\n\t{\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\tpublic _iGetVertexCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\r\n\t{\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\tpublic _iGetFragmentCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\r\n\t{\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\tpublic _iGetNormalVertexCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\r\n\t{\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\tpublic _iGetNormalFragmentCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\r\n\t{\r\n\t\treturn \"\";\r\n\t}\r\n}",
    "export {BasicMaterialPass}\t\t\t\tfrom \"./surfaces/passes/BasicMaterialPass\";\r\nexport {ILightingPass}\t\t\t\t\tfrom \"./surfaces/passes/ILightingPass\";\r\nexport {IPass}\t\t\t\t\t\t\tfrom \"./surfaces/passes/IPass\";\r\nexport {PassBase}\t\t\t\t\t\tfrom \"./surfaces/passes/PassBase\";\r\nexport {GL_BasicMaterialSurface}\t\t\tfrom \"./surfaces/GL_BasicMaterialSurface\";\r\nexport {GL_DepthSurface}\t\t\t\t\tfrom \"./surfaces/GL_DepthSurface\";\r\nexport {GL_DistanceSurface}\t\t\t\tfrom \"./surfaces/GL_DistanceSurface\";\r\nexport {GL_SkyboxSurface}\t\t\t\tfrom \"./surfaces/GL_SkyboxSurface\";\r\nexport {GL_SurfaceBase}\t\t\t\t\tfrom \"./surfaces/GL_SurfaceBase\";\r\nexport {GL_SurfacePassBase}\t\t\t\tfrom \"./surfaces/GL_SurfacePassBase\";\r\nexport {ISurfaceClassGL}\t\t\t\t\tfrom \"./surfaces/ISurfaceClassGL\";\r\nexport {SurfacePool}\t\t\t\t\t\tfrom \"./surfaces/SurfacePool\";",
    "import {AssetEvent}\t\t\t\t\tfrom \"awayjs-core/lib/events/AssetEvent\";\r\nimport {Image2D}\t\t\t\t\t\tfrom \"awayjs-core/lib/image/Image2D\";\r\n\r\nimport {GL_Image2D}\t\t\t\t\tfrom \"awayjs-stagegl/lib/image/GL_Image2D\";\r\nimport {GL_Sampler2D}\t\t\t\t\tfrom \"awayjs-stagegl/lib/image/GL_Sampler2D\";\r\n\r\nimport {MappingMode}\t\t\t\t\tfrom \"awayjs-display/lib/textures/MappingMode\";\r\nimport {Single2DTexture}\t\t\t\tfrom \"awayjs-display/lib/textures/Single2DTexture\";\r\n\r\nimport {GL_SurfaceBase}\t\t\t\tfrom \"../surfaces/GL_SurfaceBase\";\r\nimport {GL_RenderableBase}\t\t\tfrom \"../renderables/GL_RenderableBase\";\r\nimport {ShaderBase}\t\t\t\t\tfrom \"../shaders/ShaderBase\";\r\nimport {ShaderRegisterCache}\t\t\tfrom \"../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterData}\t\t\tfrom \"../shaders/ShaderRegisterData\";\r\nimport {ShaderRegisterElement}\t\tfrom \"../shaders/ShaderRegisterElement\";\r\nimport {GL_TextureBase}\t\t\t\tfrom \"../textures/GL_TextureBase\";\r\n\r\n/**\r\n *\r\n * @class away.pool.GL_Single2DTexture\r\n */\r\nexport class GL_Single2DTexture extends GL_TextureBase\r\n{\r\n\r\n\tprivate _single2DTexture:Single2DTexture;\r\n\tprivate _textureIndex:number;\r\n\tprivate _imageIndex:number;\r\n\tprivate _samplerIndex:number;\r\n\r\n\tconstructor(single2DTexture:Single2DTexture, shader:ShaderBase)\r\n\t{\r\n\t\tsuper(single2DTexture, shader);\r\n\r\n\t\tthis._single2DTexture = single2DTexture;\r\n\t}\r\n\r\n\tpublic onClear(event:AssetEvent):void\r\n\t{\r\n\t\tsuper.onClear(event);\r\n\r\n\t\tthis._single2DTexture = null;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param shader\r\n\t * @param regCache\r\n\t * @param targetReg The register in which to store the sampled colour.\r\n\t * @param uvReg The uv coordinate vector with which to sample the texture map.\r\n\t * @returns {string}\r\n\t * @private\r\n\t */\r\n\tpublic _iGetFragmentCode(targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedReg:ShaderRegisterData, inputReg:ShaderRegisterElement):string\r\n\t{\r\n\t\tvar code:string = \"\";\r\n\t\tvar wrap:string = \"wrap\";\r\n\t\tvar format:string = \"\";//this.getFormatString(this._single2DTexture.image2D);\r\n\t\tvar filter:string = \"linear,miplinear\";\r\n\r\n\t\tvar temp:ShaderRegisterElement;\r\n\r\n\t\t//modify depending on mapping mode\r\n\t\tif (this._single2DTexture.mappingMode == MappingMode.RADIAL_GRADIENT) {\r\n\t\t\ttemp = regCache.getFreeFragmentVectorTemp();\r\n\t\t\tcode += \"mul \" + temp + \".xy, \" + inputReg + \", \" + inputReg + \"\\n\";\r\n\t\t\tcode += \"mul \" + temp + \".xy, \" + inputReg + \", \" + inputReg + \"\\n\";\r\n\t\t\tcode += \"add \" + temp + \".x, \" + temp + \".x, \" + temp + \".y\\n\";\r\n\t\t\tcode += \"sub \" + temp + \".y, \" + temp + \".y, \" + temp + \".y\\n\";\r\n\t\t\tcode += \"sqt \" + temp + \".x, \" + temp + \".x, \" + temp + \".x\\n\";\r\n\t\t\tinputReg = temp;\r\n\t\t}\r\n\r\n\t\t//handles texture atlasing\r\n\t\tif (this._shader.useImageRect) {\r\n\t\t\tvar samplerReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\r\n\t\t\tthis._samplerIndex = samplerReg.index*4;\r\n\t\t\ttemp = regCache.getFreeFragmentVectorTemp();\r\n\r\n\t\t\tcode += \"mul \" + temp + \", \" + inputReg + \", \" + samplerReg + \".xy\\n\";\r\n\t\t\tcode += \"add \" + temp + \", \" + temp + \", \" + samplerReg + \".zw\\n\";\r\n\t\t\tinputReg = temp;\r\n\t\t}\r\n\r\n\t\tthis._imageIndex = this._shader.getImageIndex(this._single2DTexture, 0);\r\n\r\n\t\tvar textureReg:ShaderRegisterElement = this.getTextureReg(this._imageIndex, regCache, sharedReg);\r\n\t\tthis._textureIndex = textureReg.index;\r\n\r\n\t\tcode += \"tex \" + targetReg + \", \" + inputReg + \", \" + textureReg + \" <2d,\" + filter + \",\" + format + wrap + \">\\n\";\r\n\r\n\t\treturn code;\r\n\t}\r\n\r\n\tpublic activate(render:GL_SurfaceBase):void\r\n\t{\r\n\t\tvar sampler:GL_Sampler2D = <GL_Sampler2D> render.samplers[this._imageIndex];\r\n\t\tsampler.activate(this._textureIndex);\r\n\r\n\t\tvar image:GL_Image2D = render.images[this._imageIndex];\r\n\t\timage.activate(this._textureIndex, sampler._sampler.mipmap);\r\n\r\n\t\tif (this._shader.useImageRect) {\r\n\t\t\tvar index:number = this._samplerIndex;\r\n\t\t\tvar data:Float32Array = this._shader.fragmentConstantData;\r\n\t\t\tif (!sampler._sampler.imageRect) {\r\n\t\t\t\tdata[index] = 1;\r\n\t\t\t\tdata[index + 1] = 1;\r\n\t\t\t\tdata[index + 2] = 0;\r\n\t\t\t\tdata[index + 3] = 0;\r\n\t\t\t} else {\r\n\t\t\t\tdata[index] = sampler._sampler.imageRect.width;\r\n\t\t\t\tdata[index + 1] = sampler._sampler.imageRect.height;\r\n\t\t\t\tdata[index + 2] = sampler._sampler.imageRect.x;\r\n\t\t\t\tdata[index + 3] = sampler._sampler.imageRect.y;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tpublic _setRenderState(renderable:GL_RenderableBase):void\r\n\t{\r\n\t\tvar sampler:GL_Sampler2D = <GL_Sampler2D> renderable.samplers[this._imageIndex];\r\n\r\n\t\tif (sampler)\r\n\t\t\tsampler.activate(this._textureIndex);\r\n\r\n\t\tvar image:GL_Image2D = renderable.images[this._imageIndex];\r\n\r\n\t\tif (image)\r\n\t\t\timage.activate(this._textureIndex, sampler._sampler.mipmap);\r\n\r\n\t\tif (this._shader.useImageRect && sampler) {\r\n\t\t\tvar index:number = this._samplerIndex;\r\n\t\t\tvar data:Float32Array = this._shader.fragmentConstantData;\r\n\t\t\tif (!sampler._sampler.imageRect) {\r\n\t\t\t\tdata[index] = 1;\r\n\t\t\t\tdata[index + 1] = 1;\r\n\t\t\t\tdata[index + 2] = 0;\r\n\t\t\t\tdata[index + 3] = 0;\r\n\t\t\t} else {\r\n\t\t\t\tdata[index] = sampler._sampler.imageRect.width;\r\n\t\t\t\tdata[index + 1] = sampler._sampler.imageRect.height;\r\n\t\t\t\tdata[index + 2] = sampler._sampler.imageRect.x;\r\n\t\t\t\tdata[index + 3] = sampler._sampler.imageRect.y;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
    "import {AssetEvent}\t\t\t\t\tfrom \"awayjs-core/lib/events/AssetEvent\";\r\n\r\nimport {GL_SamplerCube}\t\t\t\tfrom \"awayjs-stagegl/lib/image/GL_SamplerCube\";\r\n\r\nimport {SingleCubeTexture}\t\t\tfrom \"awayjs-display/lib/textures/SingleCubeTexture\";\r\n\r\nimport {GL_SurfaceBase}\t\t\t\tfrom \"../surfaces/GL_SurfaceBase\";\r\nimport {GL_RenderableBase}\t\t\tfrom \"../renderables/GL_RenderableBase\";\r\nimport {ShaderBase}\t\t\t\t\tfrom \"../shaders/ShaderBase\";\r\nimport {ShaderRegisterCache}\t\t\tfrom \"../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterData}\t\t\tfrom \"../shaders/ShaderRegisterData\";\r\nimport {ShaderRegisterElement}\t\tfrom \"../shaders/ShaderRegisterElement\";\r\nimport {GL_TextureBase}\t\t\t\tfrom \"../textures/GL_TextureBase\";\r\n\r\n/**\r\n *\r\n * @class away.pool.TextureDataBase\r\n */\r\nexport class GL_SingleCubeTexture extends GL_TextureBase\r\n{\r\n\tprivate _singleCubeTexture:SingleCubeTexture;\r\n\tprivate _textureIndex:number;\r\n\tprivate _imageIndex:number;\r\n\r\n\tconstructor(singleCubeTexture:SingleCubeTexture, shader:ShaderBase)\r\n\t{\r\n\t\tsuper(singleCubeTexture, shader);\r\n\r\n\t\tthis._singleCubeTexture = singleCubeTexture;\r\n\t}\r\n\r\n\r\n\tpublic onClear(event:AssetEvent):void\r\n\t{\r\n\t\tsuper.onClear(event);\r\n\r\n\t\tthis._singleCubeTexture = null;\r\n\t}\r\n\r\n\tpublic _iIncludeDependencies(includeInput:boolean = true):void\r\n\t{\r\n\t\tif (includeInput)\r\n\t\t\tthis._shader.usesPositionFragment = true;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param shader\r\n\t * @param regCache\r\n\t * @param targetReg The register in which to store the sampled colour.\r\n\t * @param uvReg The direction vector with which to sample the cube map.\r\n\t * @returns {string}\r\n\t * @private\r\n\t */\r\n\tpublic _iGetFragmentCode(targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedReg:ShaderRegisterData, inputReg:ShaderRegisterElement):string\r\n\t{\r\n\t\tvar format:string = \"\";//this.getFormatString(this._singleCubeTexture.imageCube);\r\n\t\tvar filter:string = \"linear,miplinear\";\r\n\r\n\t\tthis._imageIndex = this._shader.getImageIndex(this._singleCubeTexture, 0);\r\n\r\n\t\tvar textureReg:ShaderRegisterElement = this.getTextureReg(this._imageIndex, regCache, sharedReg);\r\n\t\tthis._textureIndex = textureReg.index;\r\n\r\n\t\treturn \"tex \" + targetReg + \", \" + inputReg + \", \" + textureReg + \" <cube,\" + format + filter + \">\\n\";\r\n\t}\r\n\r\n\r\n\tpublic activate(render:GL_SurfaceBase):void\r\n\t{\r\n\t\tvar sampler:GL_SamplerCube = <GL_SamplerCube> render.samplers[this._imageIndex];\r\n\r\n\t\tif (sampler)\r\n\t\t\tsampler.activate(this._textureIndex);\r\n\r\n\t\tif (render.images[this._imageIndex])\r\n\t\t\trender.images[this._imageIndex].activate(this._textureIndex, sampler._sampler.mipmap);\r\n\r\n\t}\r\n\r\n\tpublic _setRenderState(renderable:GL_RenderableBase):void\r\n\t{\r\n\t\tvar sampler:GL_SamplerCube = <GL_SamplerCube> renderable.samplers[this._imageIndex];\r\n\r\n\t\tif (sampler)\r\n\t\t\tsampler.activate(this._textureIndex);\r\n\r\n\t\tif (renderable.images[this._imageIndex] && sampler) //TODO: allow image to be re-written without accompanying sampler on the renderable\r\n\t\t\trenderable.images[this._imageIndex].activate(this._textureIndex, sampler._sampler.mipmap);\r\n\t}\r\n}",
    "import {AbstractMethodError}\t\t\tfrom \"awayjs-core/lib/errors/AbstractMethodError\";\r\nimport {AssetEvent}\t\t\t\t\tfrom \"awayjs-core/lib/events/AssetEvent\";\r\nimport {ImageBase}\t\t\t\t\tfrom \"awayjs-core/lib/image/ImageBase\";\r\nimport {SamplerBase}\t\t\t\t\tfrom \"awayjs-core/lib/image/SamplerBase\";\r\nimport {AbstractionBase}\t\t\t\tfrom \"awayjs-core/lib/library/AbstractionBase\";\r\n\r\nimport {ContextGLTextureFormat}\t\tfrom \"awayjs-stagegl/lib/base/ContextGLTextureFormat\";\r\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\r\n\r\nimport {TextureBase}\t\t\t\t\tfrom \"awayjs-display/lib/textures/TextureBase\";\r\n\r\nimport {GL_SurfaceBase}\t\t\t\tfrom \"../surfaces/GL_SurfaceBase\";\r\nimport {GL_RenderableBase}\t\t\tfrom \"../renderables/GL_RenderableBase\";\r\nimport {ShaderBase}\t\t\t\t\tfrom \"../shaders/ShaderBase\";\r\nimport {ShaderRegisterCache}\t\t\tfrom \"../shaders/ShaderRegisterCache\";\r\nimport {ShaderRegisterData}\t\t\tfrom \"../shaders/ShaderRegisterData\";\r\nimport {ShaderRegisterElement}\t\tfrom \"../shaders/ShaderRegisterElement\";\r\n\r\n/**\r\n *\r\n * @class away.pool.GL_TextureBaseBase\r\n */\r\nexport class GL_TextureBase extends AbstractionBase\r\n{\r\n\tprivate _texture:TextureBase;\r\n\tpublic _shader:ShaderBase;\r\n\tpublic _stage:Stage;\r\n\r\n\tconstructor(texture:TextureBase, shader:ShaderBase)\r\n\t{\r\n\t\tsuper(texture, shader);\r\n\r\n\t\tthis._texture = texture;\r\n\t\tthis._shader = shader;\r\n\t\tthis._stage = shader._stage;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\tpublic onClear(event:AssetEvent):void\r\n\t{\r\n\t\tsuper.onClear(event);\r\n\r\n\t\tthis._texture = null;\r\n\t\tthis._shader = null;\r\n\t\tthis._stage = null;\r\n\t}\r\n\r\n\tpublic _iGetFragmentCode(targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedReg:ShaderRegisterData, inputReg:ShaderRegisterElement = null):string\r\n\t{\r\n\t\tthrow new AbstractMethodError();\r\n\t}\r\n\r\n\tpublic _setRenderState(renderable:GL_RenderableBase):void\r\n\t{\r\n\t\t//overidden for state logic\r\n\t}\r\n\r\n\tpublic activate(render:GL_SurfaceBase):void\r\n\t{\r\n\t\t//overridden for activation logic\r\n\t}\r\n\r\n\tpublic getTextureReg(imageIndex:number, regCache:ShaderRegisterCache, sharedReg:ShaderRegisterData):ShaderRegisterElement\r\n\t{\r\n\t\tvar index:number = this._shader.imageIndices.indexOf(imageIndex); //todo: collapse the index based on duplicate image objects to save registrations\r\n\r\n\t\tif (index == -1) {\r\n\t\t\tvar textureReg:ShaderRegisterElement = regCache.getFreeTextureReg();\r\n\t\t\tsharedReg.textures.push(textureReg);\r\n\t\t\tthis._shader.imageIndices.push(imageIndex);\r\n\r\n\t\t\treturn textureReg;\r\n\t\t}\r\n\r\n\t\treturn sharedReg.textures[index];\r\n\t}\r\n\r\n\tpublic getFormatString(image:ImageBase):string\r\n\t{\r\n\t\tswitch (image.format) {\r\n\t\t\tcase ContextGLTextureFormat.COMPRESSED:\r\n\t\t\t\treturn \"dxt1,\";\r\n\t\t\tcase ContextGLTextureFormat.COMPRESSED_ALPHA:\r\n\t\t\t\treturn \"dxt5,\";\r\n\t\t\tdefault:\r\n\t\t\t\treturn \"\";\r\n\t\t}\r\n\t}\r\n}",
    "export {GL_Single2DTexture}\t\t\t\tfrom \"./textures/GL_Single2DTexture\";\r\nexport {GL_SingleCubeTexture}\t\t\tfrom \"./textures/GL_SingleCubeTexture\";\r\nexport {GL_TextureBase}\t\t\t\t\tfrom \"./textures/GL_TextureBase\";",
    "import {AttributesBuffer}\t\t\t\t\tfrom \"awayjs-core/lib/attributes/AttributesBuffer\";\r\nimport {Matrix3DUtils}\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3DUtils\";\r\n\r\nimport {DisplayObjectContainer}\t\t\tfrom \"awayjs-display/lib/display/DisplayObjectContainer\";\r\nimport {Graphics}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphics\";\r\nimport {TriangleElements}\t\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\r\nimport {Sprite}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Sprite\";\r\nimport {MaterialBase}\t\t\t\t\t\tfrom \"awayjs-display/lib/materials/MaterialBase\";\r\nimport {AttributesView} from \"awayjs-core/lib/attributes/AttributesView\";\r\n\r\n/**\r\n *  Class Merge merges two or more static sprites into one.<code>Merge</code>\r\n */\r\nexport class Merge\r\n{\r\n\r\n\t//private const LIMIT:uint = 196605;\r\n\tprivate _objectSpace:boolean;\r\n\tprivate _keepMaterial:boolean;\r\n\tprivate _disposeSources:boolean;\r\n\tprivate _graphicVOs:Array<GraphicVO>;\r\n\tprivate _toDispose:Array<Sprite>;\r\n\r\n\t/**\r\n\t * @param    keepMaterial    [optional]    Determines if the merged object uses the recevier sprite material information or keeps its source material(s). Defaults to false.\r\n\t * If false and receiver object has multiple materials, the last material found in receiver subsprites is applied to the merged subsprite(es).\r\n\t * @param    disposeSources  [optional]    Determines if the sprite and geometry source(s) used for the merging are disposed. Defaults to false.\r\n\t * If true, only receiver geometry and resulting sprite are kept in  memory.\r\n\t * @param    objectSpace     [optional]    Determines if source sprite(es) is/are merged using objectSpace or worldspace. Defaults to false.\r\n\t */\r\n\tconstructor(keepMaterial:boolean = false, disposeSources:boolean = false, objectSpace:boolean = false)\r\n\t{\r\n\t\tthis._keepMaterial = keepMaterial;\r\n\t\tthis._disposeSources = disposeSources;\r\n\t\tthis._objectSpace = objectSpace;\r\n\t}\r\n\r\n\t/**\r\n\t * Determines if the sprite and geometry source(s) used for the merging are disposed. Defaults to false.\r\n\t */\r\n\tpublic set disposeSources(b:boolean)\r\n\t{\r\n\t\tthis._disposeSources = b;\r\n\t}\r\n\r\n\tpublic get disposeSources():boolean\r\n\t{\r\n\t\treturn this._disposeSources;\r\n\t}\r\n\r\n\t/**\r\n\t * Determines if the material source(s) used for the merging are disposed. Defaults to false.\r\n\t */\r\n\tpublic set keepMaterial(b:boolean)\r\n\t{\r\n\t\tthis._keepMaterial = b;\r\n\t}\r\n\r\n\tpublic get keepMaterial():boolean\r\n\t{\r\n\t\treturn this._keepMaterial;\r\n\t}\r\n\r\n\t/**\r\n\t * Determines if source sprite(es) is/are merged using objectSpace or worldspace. Defaults to false.\r\n\t */\r\n\tpublic set objectSpace(b:boolean)\r\n\t{\r\n\t\tthis._objectSpace = b;\r\n\t}\r\n\r\n\tpublic get objectSpace():boolean\r\n\t{\r\n\t\treturn this._objectSpace;\r\n\t}\r\n\r\n\t/**\r\n\t * Merges all the children of a container into a single Sprite. If no Sprite object is found, method returns the receiver without modification.\r\n\t *\r\n\t * @param    receiver           The Sprite to receive the merged contents of the container.\r\n\t * @param    objectContainer    The DisplayObjectContainer holding the sprites to be mergd.\r\n\t *\r\n\t * @return The merged Sprite instance.\r\n\t */\r\n\tpublic applyToContainer(receiver:Sprite, objectContainer:DisplayObjectContainer):void\r\n\t{\r\n\t\tthis.reset();\r\n\r\n\t\t//collect container sprites\r\n\t\tthis.parseContainer(receiver, objectContainer);\r\n\r\n\t\t//collect receiver\r\n\t\tthis.collect(receiver, false);\r\n\r\n\t\t//merge to receiver\r\n\t\tthis.merge(receiver, this._disposeSources);\r\n\t}\r\n\r\n\t/**\r\n\t * Merges all the sprites found in the Array&lt;Sprite&gt; into a single Sprite.\r\n\t *\r\n\t * @param    receiver    The Sprite to receive the merged contents of the sprites.\r\n\t * @param    sprites      A series of Sprites to be merged with the reciever sprite.\r\n\t */\r\n\tpublic applyToSprites(receiver:Sprite, sprites:Array<Sprite>):void\r\n\t{\r\n\t\tthis.reset();\r\n\r\n\t\tif (!sprites.length)\r\n\t\t\treturn;\r\n\r\n\t\t//collect sprites in vector\r\n\t\tfor (var i:number = 0; i < sprites.length; i++)\r\n\t\t\tif (sprites[i] != receiver)\r\n\t\t\t\tthis.collect(sprites[i], this._disposeSources);\r\n\r\n\t\t//collect receiver\r\n\t\tthis.collect(receiver, false);\r\n\r\n\t\t//merge to receiver\r\n\t\tthis.merge(receiver, this._disposeSources);\r\n\t}\r\n\r\n\t/**\r\n\t *  Merges 2 sprites into one. It is recommand to use apply when 2 sprites are to be merged. If more need to be merged, use either applyToSprites or applyToContainer methods.\r\n\t *\r\n\t * @param    receiver    The Sprite to receive the merged contents of both sprites.\r\n\t * @param    sprite        The Sprite to be merged with the receiver sprite\r\n\t */\r\n\tpublic apply(receiver:Sprite, sprite:Sprite):void\r\n\t{\r\n\t\tthis.reset();\r\n\r\n\t\t//collect sprite\r\n\t\tthis.collect(sprite, this._disposeSources);\r\n\r\n\t\t//collect receiver\r\n\t\tthis.collect(receiver, false);\r\n\r\n\t\t//merge to receiver\r\n\t\tthis.merge(receiver, this._disposeSources);\r\n\t}\r\n\r\n\tprivate reset():void\r\n\t{\r\n\t\tthis._toDispose  = new Array<Sprite>();\r\n\t\tthis._graphicVOs = new Array<GraphicVO>();\r\n\t}\r\n\r\n\tprivate merge(destSprite:Sprite, dispose:boolean):void\r\n\t{\r\n\t\tvar i:number;\r\n\t\t//var oldGraphics:Graphics;\r\n\t\tvar destGraphics:Graphics;\r\n\t\tvar useSubMaterials:boolean;\r\n\r\n\t\t//oldGraphics = destSprite.graphics.clone();\r\n\t\tdestGraphics = destSprite.graphics;\r\n\r\n\t\t// Only apply materials directly to sub-sprites if necessary,\r\n\t\t// i.e. if there is more than one material available.\r\n\t\tuseSubMaterials = (this._graphicVOs.length > 1);\r\n\r\n\t\tfor (i = 0; i < this._graphicVOs.length; i++) {\r\n\t\t\tvar elements:TriangleElements = new TriangleElements(new AttributesBuffer());\r\n\t\t\telements.autoDeriveNormals = false;\r\n\t\t\telements.autoDeriveTangents = false;\r\n\r\n\t\t\tvar data:GraphicVO = this._graphicVOs[i];\r\n\t\t\telements.setIndices(data.indices);\r\n\t\t\telements.setPositions(data.vertices);\r\n\t\t\telements.setNormals(data.normals);\r\n\t\t\telements.setTangents(data.tangents);\r\n\t\t\telements.setUVs(data.uvs);\r\n\r\n\t\t\tif (this._keepMaterial && useSubMaterials)\r\n\t\t\t\tdestGraphics.addGraphic(elements, data.material);\r\n\t\t\telse\r\n\t\t\t\tdestGraphics.addGraphic(elements);\r\n\t\t}\r\n\r\n\t\tif (this._keepMaterial && !useSubMaterials && this._graphicVOs.length)\r\n\t\t\tdestSprite.material = this._graphicVOs[0].material;\r\n\r\n\t\tif (dispose) {\r\n\t\t\tvar len:number = this._toDispose.length;\r\n\t\t\tfor (var i:number; i < len; i++)\r\n\t\t\t\tthis._toDispose[i].dispose();\r\n\t\t}\r\n\r\n\t\tthis._toDispose = null;\r\n\t}\r\n\r\n\tprivate collect(sprite:Sprite, dispose:boolean):void\r\n\t{\r\n\t\tvar subIdx:number;\r\n\t\tvar calc:number;\r\n\t\tfor (subIdx = 0; subIdx < sprite.graphics.count; subIdx++) {\r\n\t\t\tvar i:number;\r\n\t\t\tvar len:number;\r\n\t\t\tvar iIdx:number, vIdx:number, nIdx:number, tIdx:number, uIdx:number;\r\n\t\t\tvar indexOffset:number;\r\n\t\t\tvar elements:TriangleElements;\r\n\t\t\tvar vo:GraphicVO;\r\n\t\t\tvar vertices:Array<number>;\r\n\t\t\tvar normals:Array<number>;\r\n\t\t\tvar tangents:Array<number>;\r\n\t\t\tvar ind:Uint16Array;\r\n\r\n\t\t\telements = <TriangleElements> sprite.graphics.getGraphicAt(subIdx).elements;\r\n\r\n\t\t\t// Get (or create) a VO for this material\r\n\t\t\tvo = this.getGraphicData(sprite.graphics.getGraphicAt(subIdx).material);\r\n\r\n\t\t\t// Vertices and normals are copied to temporary vectors, to be transformed\r\n\t\t\t// before concatenated onto those of the data. This is unnecessary if no\r\n\t\t\t// transformation will be performed, i.e. for object space merging.\r\n\t\t\tvertices = (this._objectSpace)? vo.vertices : new Array<number>();\r\n\t\t\tnormals = (this._objectSpace)? vo.normals : new Array<number>();\r\n\t\t\ttangents = (this._objectSpace)? vo.tangents : new Array<number>();\r\n\r\n\t\t\t// Copy over vertex attributes\r\n\t\t\tvIdx = vertices.length;\r\n\t\t\tnIdx = normals.length;\r\n\t\t\ttIdx = tangents.length;\r\n\t\t\tuIdx = vo.uvs.length;\r\n\t\t\t\r\n\t\t\tthis.copyAttributes(elements.positions, vertices, elements.numVertices, vIdx);\r\n\t\t\tthis.copyAttributes(elements.normals, normals, elements.numVertices, nIdx);\r\n\t\t\tthis.copyAttributes(elements.tangents, tangents, elements.numVertices, tIdx);\r\n\t\t\tthis.copyAttributes(elements.uvs, vo.uvs, elements.numVertices, uIdx);\r\n\r\n\t\t\t// Copy over triangle indices\r\n\t\t\tindexOffset = (!this._objectSpace)? vo.vertices.length/3 :0;\r\n\t\t\tiIdx = vo.indices.length;\r\n\t\t\tlen = elements.numElements;\r\n\t\t\tind = elements.indices.get(len);\r\n\t\t\tfor (i = 0; i < len; i++) {\r\n\t\t\t\tcalc = i*3;\r\n\t\t\t\tvo.indices[iIdx++] = ind[calc] + indexOffset;\r\n\t\t\t\tvo.indices[iIdx++] = ind[calc + 1] + indexOffset;\r\n\t\t\t\tvo.indices[iIdx++] = ind[calc + 2] + indexOffset;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this._objectSpace) {\r\n\t\t\t\tsprite.sceneTransform.transformVectors(vertices, vertices);\r\n\t\t\t\tMatrix3DUtils.deltaTransformVectors(sprite.sceneTransform, normals, normals);\r\n\t\t\t\tMatrix3DUtils.deltaTransformVectors(sprite.sceneTransform, tangents, tangents);\r\n\r\n\t\t\t\t// Copy vertex data from temporary (transformed) vectors\r\n\t\t\t\tvIdx = vo.vertices.length;\r\n\t\t\t\tnIdx = vo.normals.length;\r\n\t\t\t\ttIdx = vo.tangents.length;\r\n\t\t\t\tlen = vertices.length;\r\n\t\t\t\tfor (i = 0; i < len; i++) {\r\n\t\t\t\t\tvo.vertices[vIdx++] = vertices[i];\r\n\t\t\t\t\tvo.normals[nIdx++] = normals[i];\r\n\t\t\t\t\tvo.tangents[tIdx++] = tangents[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (dispose)\r\n\t\t\tthis._toDispose.push(sprite);\r\n\t}\r\n\t\r\n\tprivate copyAttributes(attributes:AttributesView, array:Array<number>, count:number, startIndex:number)\r\n\t{\r\n\t\tvar vertices:ArrayBufferView = attributes.get(count);\r\n\t\tvar dim:number = attributes.dimensions;\r\n\t\tvar stride:number = attributes.stride;\r\n\t\tvar len:number = count*stride;\r\n\t\t\r\n\t\tfor (var i:number = 0; i < len; i += stride)\r\n\t\t\tfor (var j:number = 0; j < dim; j++)\r\n\t\t\t\tarray[startIndex++] = vertices[i + j];\r\n\t}\r\n\r\n\tprivate getGraphicData(material:MaterialBase):GraphicVO\r\n\t{\r\n\t\tvar data:GraphicVO;\r\n\r\n\t\tif (this._keepMaterial) {\r\n\t\t\tvar i:number;\r\n\t\t\tvar len:number;\r\n\r\n\t\t\tlen = this._graphicVOs.length;\r\n\t\t\tfor (i = 0; i < len; i++) {\r\n\t\t\t\tif (this._graphicVOs[i].material == material) {\r\n\t\t\t\t\tdata = this._graphicVOs[i];\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (this._graphicVOs.length) {\r\n\t\t\t// If materials are not to be kept, all data can be\r\n\t\t\t// put into a single VO, so return that one.\r\n\t\t\tdata = this._graphicVOs[0];\r\n\t\t}\r\n\r\n\t\t// No data (for this material) found, create new.\r\n\t\tif (!data) {\r\n\t\t\tdata = new GraphicVO();\r\n\t\t\tdata.vertices = new Array<number>();\r\n\t\t\tdata.normals = new Array<number>();\r\n\t\t\tdata.tangents = new Array<number>();\r\n\t\t\tdata.uvs = new Array<number>();\r\n\t\t\tdata.indices = new Array<number>();\r\n\t\t\tdata.material = material;\r\n\r\n\t\t\tthis._graphicVOs.push(data);\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\t}\r\n\r\n\tprivate parseContainer(receiver:Sprite, object:DisplayObjectContainer):void\r\n\t{\r\n\t\tvar child:DisplayObjectContainer;\r\n\t\tvar i:number;\r\n\r\n\t\tif (object instanceof Sprite && object != (<DisplayObjectContainer> receiver))\r\n\t\t\tthis.collect(<Sprite> object, this._disposeSources);\r\n\r\n\t\tfor (i = 0; i < object.numChildren; ++i) {\r\n\t\t\tchild = <DisplayObjectContainer> object.getChildAt(i);\r\n\t\t\tthis.parseContainer(receiver, child);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class GraphicVO\r\n{\r\n\tpublic uvs:Array<number>;\r\n\tpublic vertices:Array<number>;\r\n\tpublic normals:Array<number>;\r\n\tpublic tangents:Array<number>;\r\n\tpublic indices:Array<number>;\r\n\tpublic material:MaterialBase;\r\n}\r\n",
    "import {Matrix}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix\";\r\nimport {Matrix3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\r\n\r\n/**\r\n * ...\r\n */\r\nexport class ParticleGraphicsTransform\r\n{\r\n\tprivate _defaultVertexTransform:Matrix3D;\r\n\tprivate _defaultInvVertexTransform:Matrix3D;\r\n\tprivate _defaultUVTransform:Matrix;\r\n\r\n\tpublic set vertexTransform(value:Matrix3D)\r\n\t{\r\n\t\tthis._defaultVertexTransform = value;\r\n\t\tthis._defaultInvVertexTransform = value.clone();\r\n\t\tthis._defaultInvVertexTransform.invert();\r\n\t\tthis._defaultInvVertexTransform.transpose();\r\n\t}\r\n\r\n\tpublic set UVTransform(value:Matrix)\r\n\t{\r\n\t\tthis._defaultUVTransform = value;\r\n\t}\r\n\r\n\tpublic get UVTransform():Matrix\r\n\t{\r\n\t\treturn this._defaultUVTransform;\r\n\t}\r\n\r\n\tpublic get vertexTransform():Matrix3D\r\n\t{\r\n\t\treturn this._defaultVertexTransform;\r\n\t}\r\n\r\n\tpublic get invVertexTransform():Matrix3D\r\n\t{\r\n\t\treturn this._defaultInvVertexTransform;\r\n\t}\r\n}",
    "export {Merge}\t\t\t\t\t\t\tfrom \"./tools/commands/Merge\";\r\nexport {ParticleGraphicsTransform}\t\tfrom \"./tools/data/ParticleGraphicsTransform\";",
    "import {AttributesBuffer}\t\t\t\t\tfrom \"awayjs-core/lib/attributes/AttributesBuffer\";\r\nimport {Matrix}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix\";\r\nimport {Matrix3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\r\nimport {Point}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Point\";\r\nimport {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\r\n\r\nimport {ParticleData}\t\t\t\t\t\tfrom \"awayjs-display/lib/animators/data/ParticleData\";\r\nimport {Graphics}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphics\";\r\nimport {TriangleElements}\t\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\r\nimport {Sprite}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Sprite\";\r\n\r\nimport {ParticleGraphicsTransform}\t\tfrom \"../tools/data/ParticleGraphicsTransform\";\r\n\r\n/**\r\n * ...\r\n */\r\nexport class ParticleGraphicsHelper\r\n{\r\n\tpublic static MAX_VERTEX:number = 65535;\r\n\r\n\tpublic static generateGraphics(output:Graphics, graphicsArray:Array<Graphics>, transforms:Array<ParticleGraphicsTransform> = null):void\r\n\t{\r\n\t\tvar indicesVector:Array<Array<number>> = new Array<Array<number>>();\r\n\t\tvar positionsVector:Array<Array<number>> = new Array<Array<number>>();\r\n\t\tvar normalsVector:Array<Array<number>> = new Array<Array<number>>();\r\n\t\tvar tangentsVector:Array<Array<number>> = new Array<Array<number>>();\r\n\t\tvar uvsVector:Array<Array<number>> = new Array<Array<number>>();\r\n\t\tvar vertexCounters:Array<number> = new Array<number>();\r\n\t\tvar particles:Array<ParticleData> = new Array<ParticleData>();\r\n\t\tvar elementsArray:Array<TriangleElements> = new Array<TriangleElements>();\r\n\t\tvar numParticles:number = graphicsArray.length;\r\n\r\n\t\tvar sourceGraphics:Graphics;\r\n\t\tvar sourceElements:TriangleElements;\r\n\t\tvar numGraphics:number;\r\n\t\tvar indices:Array<number>;\r\n\t\tvar positions:Array<number>;\r\n\t\tvar normals:Array<number>;\r\n\t\tvar tangents:Array<number>;\r\n\t\tvar uvs:Array<number>;\r\n\t\tvar vertexCounter:number;\r\n\t\tvar elements:TriangleElements;\r\n\t\tvar i:number;\r\n\t\tvar j:number;\r\n\t\tvar sub2SubMap:Array<number> = new Array<number>();\r\n\r\n\t\tvar tempVertex:Vector3D = new Vector3D;\r\n\t\tvar tempNormal:Vector3D = new Vector3D;\r\n\t\tvar tempTangents:Vector3D = new Vector3D;\r\n\t\tvar tempUV:Point = new Point;\r\n\r\n\t\tfor (i = 0; i < numParticles; i++) {\r\n\t\t\tsourceGraphics = graphicsArray[i];\r\n\t\t\tnumGraphics = sourceGraphics.count;\r\n\t\t\tfor (var srcIndex:number = 0; srcIndex < numGraphics; srcIndex++) {\r\n\t\t\t\t//create a different particle subgeometry group for each source subgeometry in a particle.\r\n\t\t\t\tif (sub2SubMap.length <= srcIndex) {\r\n\t\t\t\t\tsub2SubMap.push(elementsArray.length);\r\n\t\t\t\t\tindicesVector.push(new Array<number>());\r\n\t\t\t\t\tpositionsVector.push(new Array<number>());\r\n\t\t\t\t\tnormalsVector.push(new Array<number>());\r\n\t\t\t\t\ttangentsVector.push(new Array<number>());\r\n\t\t\t\t\tuvsVector.push(new Array<number>());\r\n\t\t\t\t\telementsArray.push(new TriangleElements(new AttributesBuffer()));\r\n\t\t\t\t\tvertexCounters.push(0);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsourceElements = <TriangleElements> sourceGraphics.getGraphicAt(srcIndex).elements;\r\n\r\n\t\t\t\t//add a new particle subgeometry if this source subgeometry will take us over the maxvertex limit\r\n\t\t\t\tif (sourceElements.numVertices + vertexCounters[sub2SubMap[srcIndex]] > ParticleGraphicsHelper.MAX_VERTEX) {\r\n\t\t\t\t\t//update submap and add new subgeom vectors\r\n\t\t\t\t\tsub2SubMap[srcIndex] = elementsArray.length;\r\n\t\t\t\t\tindicesVector.push(new Array<number>());\r\n\t\t\t\t\tpositionsVector.push(new Array<number>());\r\n\t\t\t\t\tnormalsVector.push(new Array<number>());\r\n\t\t\t\t\ttangentsVector.push(new Array<number>());\r\n\t\t\t\t\tuvsVector.push(new Array<number>());\r\n\t\t\t\t\telementsArray.push(new TriangleElements(new AttributesBuffer()));\r\n\t\t\t\t\tvertexCounters.push(0);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tj = sub2SubMap[srcIndex];\r\n\r\n\t\t\t\t//select the correct vector\r\n\t\t\t\tindices = indicesVector[j];\r\n\t\t\t\tpositions = positionsVector[j];\r\n\t\t\t\tnormals = normalsVector[j];\r\n\t\t\t\ttangents = tangentsVector[j];\r\n\t\t\t\tuvs = uvsVector[j];\r\n\t\t\t\tvertexCounter = vertexCounters[j];\r\n\t\t\t\telements = elementsArray[j];\r\n\r\n\t\t\t\tvar particleData:ParticleData = new ParticleData();\r\n\t\t\t\tparticleData.numVertices = sourceElements.numVertices;\r\n\t\t\t\tparticleData.startVertexIndex = vertexCounter;\r\n\t\t\t\tparticleData.particleIndex = i;\r\n\t\t\t\tparticleData.elements = elements;\r\n\t\t\t\tparticles.push(particleData);\r\n\r\n\t\t\t\tvertexCounters[j] += sourceElements.numVertices;\r\n\r\n\t\t\t\tvar k:number;\r\n\t\t\t\tvar index:number;\r\n\t\t\t\tvar posIndex:number;\r\n\t\t\t\tvar normalIndex:number;\r\n\t\t\t\tvar tangentIndex:number;\r\n\t\t\t\tvar uvIndex:number;\r\n\r\n\t\t\t\tvar tempLen:number;\r\n\t\t\t\tvar compact:TriangleElements = sourceElements;\r\n\t\t\t\tvar sourcePositions:ArrayBufferView;\r\n\t\t\t\tvar posStride:number;\r\n\t\t\t\tvar sourceNormals:Float32Array;\r\n\t\t\t\tvar normalStride:number;\r\n\t\t\t\tvar sourceTangents:Float32Array;\r\n\t\t\t\tvar tangentStride:number;\r\n\t\t\t\tvar sourceUVs:ArrayBufferView;\r\n\t\t\t\tvar uvStride:number;\r\n\r\n\t\t\t\tif (compact) {\r\n\t\t\t\t\ttempLen = compact.numVertices;\r\n\t\t\t\t\tsourcePositions = compact.positions.get(tempLen);\r\n\t\t\t\t\tposStride = compact.positions.stride;\r\n\t\t\t\t\tsourceNormals = compact.normals.get(tempLen);\r\n\t\t\t\t\tnormalStride = compact.normals.stride;\r\n\t\t\t\t\tsourceTangents = compact.tangents.get(tempLen);\r\n\t\t\t\t\ttangentStride = compact.tangents.stride;\r\n\t\t\t\t\tsourceUVs = compact.uvs.get(tempLen);\r\n\t\t\t\t\tuvStride = compact.uvs.stride;\r\n\r\n\t\t\t\t\tif (transforms) {\r\n\t\t\t\t\t\tvar particleGraphicsTransform:ParticleGraphicsTransform = transforms[i];\r\n\t\t\t\t\t\tvar vertexTransform:Matrix3D = particleGraphicsTransform.vertexTransform;\r\n\t\t\t\t\t\tvar invVertexTransform:Matrix3D = particleGraphicsTransform.invVertexTransform;\r\n\t\t\t\t\t\tvar UVTransform:Matrix = particleGraphicsTransform.UVTransform;\r\n\r\n\t\t\t\t\t\tfor (k = 0; k < tempLen; k++) {\r\n\t\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t\t * 0 - 2: vertex position X, Y, Z\r\n\t\t\t\t\t\t\t * 3 - 5: normal X, Y, Z\r\n\t\t\t\t\t\t\t * 6 - 8: tangent X, Y, Z\r\n\t\t\t\t\t\t\t * 9 - 10: U V\r\n\t\t\t\t\t\t\t * 11 - 12: Secondary U V*/\r\n\t\t\t\t\t\t\tposIndex = k*posStride;\r\n\t\t\t\t\t\t\ttempVertex.x = sourcePositions[posIndex];\r\n\t\t\t\t\t\t\ttempVertex.y = sourcePositions[posIndex + 1];\r\n\t\t\t\t\t\t\ttempVertex.z = sourcePositions[posIndex + 2];\r\n\t\t\t\t\t\t\tnormalIndex = k*normalStride;\r\n\t\t\t\t\t\t\ttempNormal.x = sourceNormals[normalIndex];\r\n\t\t\t\t\t\t\ttempNormal.y = sourceNormals[normalIndex + 1];\r\n\t\t\t\t\t\t\ttempNormal.z = sourceNormals[normalIndex + 2];\r\n\t\t\t\t\t\t\ttangentIndex = k*tangentStride;\r\n\t\t\t\t\t\t\ttempTangents.x = sourceTangents[tangentIndex];\r\n\t\t\t\t\t\t\ttempTangents.y = sourceTangents[tangentIndex + 1];\r\n\t\t\t\t\t\t\ttempTangents.z = sourceTangents[tangentIndex + 2];\r\n\t\t\t\t\t\t\tuvIndex = k*uvStride;\r\n\t\t\t\t\t\t\ttempUV.x = sourceUVs[uvIndex];\r\n\t\t\t\t\t\t\ttempUV.y = sourceUVs[uvIndex + 1];\r\n\t\t\t\t\t\t\tif (vertexTransform) {\r\n\t\t\t\t\t\t\t\ttempVertex = vertexTransform.transformVector(tempVertex);\r\n\t\t\t\t\t\t\t\ttempNormal = invVertexTransform.deltaTransformVector(tempNormal);\r\n\t\t\t\t\t\t\t\ttempTangents = invVertexTransform.deltaTransformVector(tempNormal);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (UVTransform)\r\n\t\t\t\t\t\t\t\ttempUV = UVTransform.transformPoint(tempUV);\r\n\t\t\t\t\t\t\t//this is faster than that only push one data\r\n\t\t\t\t\t\t\tpositions.push(tempVertex.x, tempVertex.y, tempVertex.z);\r\n\t\t\t\t\t\t\tnormals.push(tempNormal.x, tempNormal.y, tempNormal.z);\r\n\t\t\t\t\t\t\ttangents.push(tempTangents.x, tempTangents.y, tempTangents.z);\r\n\t\t\t\t\t\t\tuvs.push(tempUV.x, tempUV.y);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tfor (k = 0; k < tempLen; k++) {\r\n\t\t\t\t\t\t\tposIndex = k*posStride;\r\n\t\t\t\t\t\t\tnormalIndex = k*normalStride;\r\n\t\t\t\t\t\t\ttangentIndex = k*tangentStride;\r\n\t\t\t\t\t\t\tuvIndex = k*uvStride;\r\n\t\t\t\t\t\t\t//this is faster than that only push one data\r\n\t\t\t\t\t\t\tpositions.push(sourcePositions[posIndex], sourcePositions[posIndex + 1], sourcePositions[posIndex + 2]);\r\n\t\t\t\t\t\t\tnormals.push(sourceNormals[normalIndex], sourceNormals[normalIndex + 1], sourceNormals[normalIndex + 2]);\r\n\t\t\t\t\t\t\ttangents.push(sourceTangents[tangentIndex], sourceTangents[tangentIndex + 1], sourceTangents[tangentIndex + 2]);\r\n\t\t\t\t\t\t\tuvs.push(sourceUVs[uvIndex], sourceUVs[uvIndex + 1]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//Todo\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttempLen = sourceElements.numElements;\r\n\t\t\t\tvar sourceIndices:Uint16Array = sourceElements.indices.get(tempLen);\r\n\t\t\t\tfor (k = 0; k < tempLen; k++) {\r\n\t\t\t\t\tindex = k*3;\r\n\t\t\t\t\tindices.push(sourceIndices[index] + vertexCounter, sourceIndices[index + 1] + vertexCounter, sourceIndices[index + 2] + vertexCounter);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\toutput.particles = particles;\r\n\t\toutput.numParticles = numParticles;\r\n\r\n\t\tnumParticles = elementsArray.length;\r\n\t\tfor (i = 0; i < numParticles; i++) {\r\n\t\t\telements = elementsArray[i];\r\n\t\t\telements.autoDeriveNormals = false;\r\n\t\t\telements.autoDeriveTangents = false;\r\n\t\t\telements.setIndices(indicesVector[i]);\r\n\t\t\telements.setPositions(positionsVector[i]);\r\n\t\t\telements.setNormals(normalsVector[i]);\r\n\t\t\telements.setTangents(tangentsVector[i]);\r\n\t\t\telements.setUVs(uvsVector[i]);\r\n\t\t\toutput.addGraphic(elements);\r\n\t\t}\r\n\t}\r\n}",
    "import {Matrix3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\r\n\r\n/**\r\n *\r\n */\r\nexport class PerspectiveMatrix3D extends Matrix3D\r\n{\r\n\tconstructor(v:Float32Array = null)\r\n\t{\r\n\t\tsuper(v);\r\n\t}\r\n\r\n\tpublic perspectiveFieldOfViewLH(fieldOfViewY:number, aspectRatio:number, zNear:number, zFar:number):void\r\n\t{\r\n\t\tvar yScale:number = 1/Math.tan(fieldOfViewY/2);\r\n\t\tvar xScale:number = yScale/aspectRatio;\r\n\r\n\t\tthis.rawData[0] = xScale;\r\n\t\tthis.rawData[1] = 0.0;\r\n\t\tthis.rawData[2] = 0.0;\r\n\t\tthis.rawData[3] = 0.0;\r\n\r\n\t\tthis.rawData[4] = 0.0;\r\n\t\tthis.rawData[5] = yScale;\r\n\t\tthis.rawData[6] = 0.0;\r\n\t\tthis.rawData[7] = 0.0;\r\n\r\n\t\tthis.rawData[8] = 0.0;\r\n\t\tthis.rawData[9] = 0.0;\r\n\t\tthis.rawData[10] = zFar/(zFar - zNear);\r\n\t\tthis.rawData[11] = 1.0;\r\n\r\n\t\tthis.rawData[12] = 0.0;\r\n\t\tthis.rawData[13] = 0.0;\r\n\t\tthis.rawData[14] = (zNear*zFar)/(zNear - zFar);\r\n\t\tthis.rawData[15] = 0.0;\r\n\t}\r\n}",
    "export {ParticleGraphicsHelper}\t\t\tfrom \"./utils/ParticleGraphicsHelper\";\r\nexport {PerspectiveMatrix3D}\t\t\t\tfrom \"./utils/PerspectiveMatrix3D\";"
  ],
  "sourceRoot": ""
}