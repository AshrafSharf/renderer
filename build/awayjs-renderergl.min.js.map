{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "awayjs-renderergl.js",
    "../index.ts",
    "lib/DefaultRenderer.ts",
    "lib/DepthRenderer.ts",
    "lib/DistanceRenderer.ts",
    "lib/Filter3DRenderer.ts",
    "lib/RendererBase.ts",
    "lib/lib/animators/AnimationSetBase.ts",
    "lib/lib/animators/AnimatorBase.ts",
    "lib/lib/animators/ParticleAnimationSet.ts",
    "lib/lib/animators/ParticleAnimator.ts",
    "lib/lib/animators/SkeletonAnimationSet.ts",
    "lib/lib/animators/SkeletonAnimator.ts",
    "lib/lib/animators/VertexAnimationSet.ts",
    "lib/lib/animators/VertexAnimator.ts",
    "lib/animators/lib/animators/data/AnimationElements.ts",
    "lib/animators/lib/animators/data/AnimationRegisterData.ts",
    "lib/animators/lib/animators/data/ColorSegmentPoint.ts",
    "lib/animators/lib/animators/data/JointPose.ts",
    "lib/animators/lib/animators/data/ParticleAnimationData.ts",
    "lib/animators/lib/animators/data/ParticlePropertiesMode.ts",
    "lib/animators/lib/animators/data/ParticleProperties.ts",
    "lib/animators/lib/animators/data/SkeletonJoint.ts",
    "lib/animators/lib/animators/data/SkeletonPose.ts",
    "lib/animators/lib/animators/data/Skeleton.ts",
    "lib/animators/lib/animators/data/VertexAnimationMode.ts",
    "lib/animators/lib/animators/nodes/AnimationClipNodeBase.ts",
    "lib/animators/lib/animators/nodes/ParticleAccelerationNode.ts",
    "lib/animators/lib/animators/nodes/ParticleBezierCurveNode.ts",
    "lib/animators/lib/animators/nodes/ParticleBillboardNode.ts",
    "lib/animators/lib/animators/nodes/ParticleColorNode.ts",
    "lib/animators/lib/animators/nodes/ParticleFollowNode.ts",
    "lib/animators/lib/animators/nodes/ParticleInitialColorNode.ts",
    "lib/animators/lib/animators/nodes/ParticleNodeBase.ts",
    "lib/animators/lib/animators/nodes/ParticleOrbitNode.ts",
    "lib/animators/lib/animators/nodes/ParticleOscillatorNode.ts",
    "lib/animators/lib/animators/nodes/ParticlePositionNode.ts",
    "lib/animators/lib/animators/nodes/ParticleRotateToHeadingNode.ts",
    "lib/animators/lib/animators/nodes/ParticleRotateToPositionNode.ts",
    "lib/animators/lib/animators/nodes/ParticleRotationalVelocityNode.ts",
    "lib/animators/lib/animators/nodes/ParticleScaleNode.ts",
    "lib/animators/lib/animators/nodes/ParticleSegmentedColorNode.ts",
    "lib/animators/lib/animators/nodes/ParticleSpriteSheetNode.ts",
    "lib/animators/lib/animators/nodes/ParticleTimeNode.ts",
    "lib/animators/lib/animators/nodes/ParticleUVNode.ts",
    "lib/animators/lib/animators/nodes/ParticleVelocityNode.ts",
    "lib/animators/lib/animators/nodes/SkeletonBinaryLERPNode.ts",
    "lib/animators/lib/animators/nodes/SkeletonClipNode.ts",
    "lib/animators/lib/animators/nodes/SkeletonDifferenceNode.ts",
    "lib/animators/lib/animators/nodes/SkeletonDirectionalNode.ts",
    "lib/animators/lib/animators/nodes/SkeletonNaryLERPNode.ts",
    "lib/animators/lib/animators/nodes/VertexClipNode.ts",
    "lib/animators/lib/animators/states/AnimationClipState.ts",
    "lib/animators/lib/animators/states/AnimationStateBase.ts",
    "lib/animators/lib/animators/states/ParticleAccelerationState.ts",
    "lib/animators/lib/animators/states/ParticleBezierCurveState.ts",
    "lib/animators/lib/animators/states/ParticleBillboardState.ts",
    "lib/animators/lib/animators/states/ParticleColorState.ts",
    "lib/animators/lib/animators/states/ParticleFollowState.ts",
    "lib/animators/lib/animators/states/ParticleInitialColorState.ts",
    "lib/animators/lib/animators/states/ParticleOrbitState.ts",
    "lib/animators/lib/animators/states/ParticleOscillatorState.ts",
    "lib/animators/lib/animators/states/ParticlePositionState.ts",
    "lib/animators/lib/animators/states/ParticleRotateToHeadingState.ts",
    "lib/animators/lib/animators/states/ParticleRotateToPositionState.ts",
    "lib/animators/lib/animators/states/ParticleRotationalVelocityState.ts",
    "lib/animators/lib/animators/states/ParticleScaleState.ts",
    "lib/animators/lib/animators/states/ParticleSegmentedColorState.ts",
    "lib/animators/lib/animators/states/ParticleSpriteSheetState.ts",
    "lib/animators/lib/animators/states/ParticleStateBase.ts",
    "lib/animators/lib/animators/states/ParticleTimeState.ts",
    "lib/animators/lib/animators/states/ParticleUVState.ts",
    "lib/animators/lib/animators/states/ParticleVelocityState.ts",
    "lib/animators/lib/animators/states/SkeletonBinaryLERPState.ts",
    "lib/animators/lib/animators/states/SkeletonClipState.ts",
    "lib/animators/lib/animators/states/SkeletonDifferenceState.ts",
    "lib/animators/lib/animators/states/SkeletonDirectionalState.ts",
    "lib/animators/lib/animators/states/SkeletonNaryLERPState.ts",
    "lib/animators/lib/animators/states/VertexClipState.ts",
    "lib/animators/lib/animators/transitions/CrossfadeTransitionNode.ts",
    "lib/animators/lib/animators/transitions/CrossfadeTransitionState.ts",
    "lib/animators/lib/animators/transitions/CrossfadeTransition.ts",
    "lib/animators.ts",
    "lib/lib/elements/GL_ElementsBase.ts",
    "lib/lib/elements/GL_LineElements.ts",
    "lib/lib/elements/GL_SkyboxElements.ts",
    "lib/lib/elements/GL_TriangleElements.ts",
    "lib/elements.ts",
    "lib/lib/errors/AnimationSetError.ts",
    "lib/errors.ts",
    "lib/lib/events/AnimationStateEvent.ts",
    "lib/lib/events/AnimatorEvent.ts",
    "lib/lib/events/PassEvent.ts",
    "lib/lib/events/RTTEvent.ts",
    "lib/lib/events/ShadingMethodEvent.ts",
    "lib/events.ts",
    "lib/lib/filters/BlurFilter3D.ts",
    "lib/lib/filters/CompositeFilter3D.ts",
    "lib/lib/filters/FXAAFilter3D.ts",
    "lib/lib/filters/Filter3DBase.ts",
    "lib/filters/lib/filters/tasks/Filter3DCompositeTask.ts",
    "lib/filters/lib/filters/tasks/Filter3DFXAATask.ts",
    "lib/filters/lib/filters/tasks/Filter3DHBlurTask.ts",
    "lib/filters/lib/filters/tasks/Filter3DTaskBase.ts",
    "lib/filters/lib/filters/tasks/Filter3DVBlurTask.ts",
    "lib/filters.ts",
    "lib/lib/managers/RTTBufferManager.ts",
    "lib/managers.ts",
    "lib/lib/renderables/GL_BillboardRenderable.ts",
    "lib/lib/renderables/GL_GraphicRenderable.ts",
    "lib/lib/renderables/GL_LineSegmentRenderable.ts",
    "lib/lib/renderables/GL_RenderableBase.ts",
    "lib/lib/renderables/GL_SkyboxRenderable.ts",
    "lib/renderables.ts",
    "lib/lib/shaders/LightingShader.ts",
    "lib/lib/shaders/RegisterPool.ts",
    "lib/lib/shaders/ShaderBase.ts",
    "lib/lib/shaders/ShaderRegisterCache.ts",
    "lib/lib/shaders/ShaderRegisterData.ts",
    "lib/lib/shaders/ShaderRegisterElement.ts",
    "lib/shaders/lib/shaders/compilers/CompilerBase.ts",
    "lib/shaders/lib/shaders/compilers/LightingCompiler.ts",
    "lib/shaders.ts",
    "lib/lib/sort/RenderableMergeSort.ts",
    "lib/lib/sort/RenderableNullSort.ts",
    "lib/sort.ts",
    "lib/lib/surfaces/GL_BasicMaterialSurface.ts",
    "lib/lib/surfaces/GL_DepthSurface.ts",
    "lib/lib/surfaces/GL_DistanceSurface.ts",
    "lib/lib/surfaces/GL_SkyboxSurface.ts",
    "lib/lib/surfaces/GL_SurfaceBase.ts",
    "lib/lib/surfaces/GL_SurfacePassBase.ts",
    "lib/lib/surfaces/SurfacePool.ts",
    "lib/surfaces/lib/surfaces/passes/BasicMaterialPass.ts",
    "lib/surfaces/lib/surfaces/passes/PassBase.ts",
    "lib/surfaces.ts",
    "lib/lib/textures/GL_Single2DTexture.ts",
    "lib/lib/textures/GL_SingleCubeTexture.ts",
    "lib/lib/textures/GL_TextureBase.ts",
    "lib/textures.ts",
    "lib/tools/lib/tools/commands/Merge.ts",
    "lib/tools/lib/tools/data/ParticleGraphicsTransform.ts",
    "lib/tools.ts",
    "lib/lib/utils/ParticleGraphicsHelper.ts",
    "lib/lib/utils/PerspectiveMatrix3D.ts",
    "lib/utils.ts"
  ],
  "names": [
    "require",
    "e",
    "t",
    "n",
    "r",
    "s",
    "o",
    "u",
    "a",
    "i",
    "f",
    "Error",
    "code",
    "l",
    "exports",
    "call",
    "length",
    1,
    "module",
    "animators",
    "elements",
    "errors",
    "events",
    "filters",
    "managers",
    "renderables",
    "shaders",
    "sort",
    "surfaces",
    "textures",
    "tools",
    "utils",
    "DefaultRenderer_1",
    "DefaultRenderer",
    "DepthRenderer_1",
    "DepthRenderer",
    "DistanceRenderer_1",
    "DistanceRenderer",
    "Filter3DRenderer_1",
    "Filter3DRenderer",
    "RendererBase_1",
    "RendererBase",
    "BasicMaterial_1",
    "Skybox_1",
    "Billboard_1",
    "LineSegment_1",
    "LineElements_1",
    "TriangleElements_1",
    "Graphic_1",
    "Single2DTexture_1",
    "SingleCubeTexture_1",
    "Stage_1",
    "SurfacePool",
    "registerAbstraction",
    "GL_BasicMaterialSurface",
    "BasicMaterial",
    "GL_SkyboxSurface",
    "Skybox",
    "Stage",
    "GL_LineElements",
    "LineElements",
    "GL_TriangleElements",
    "TriangleElements",
    "ShaderBase",
    "GL_Single2DTexture",
    "Single2DTexture",
    "GL_SingleCubeTexture",
    "SingleCubeTexture",
    "GL_BillboardRenderable",
    "Billboard",
    "GL_LineSegmentRenderable",
    "LineSegment",
    "GL_GraphicRenderable",
    "Graphic",
    "GL_SkyboxRenderable",
    "./lib/DefaultRenderer",
    "./lib/DepthRenderer",
    "./lib/DistanceRenderer",
    "./lib/Filter3DRenderer",
    "./lib/RendererBase",
    "./lib/animators",
    "./lib/elements",
    "./lib/errors",
    "./lib/events",
    "./lib/filters",
    "./lib/managers",
    "./lib/renderables",
    "./lib/shaders",
    "./lib/sort",
    "./lib/surfaces",
    "./lib/textures",
    "./lib/tools",
    "./lib/utils",
    "awayjs-display/lib/display/Billboard",
    "undefined",
    "awayjs-display/lib/display/LineSegment",
    "awayjs-display/lib/display/Skybox",
    "awayjs-display/lib/graphics/Graphic",
    "awayjs-display/lib/graphics/LineElements",
    "awayjs-display/lib/graphics/TriangleElements",
    "awayjs-display/lib/materials/BasicMaterial",
    "awayjs-display/lib/textures/Single2DTexture",
    "awayjs-display/lib/textures/SingleCubeTexture",
    "awayjs-stagegl/lib/base/Stage",
    "awayjs-renderergl/lib/DefaultRenderer",
    "__extends",
    "this",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "__",
    "constructor",
    "prototype",
    "Object",
    "create",
    "BitmapImage2D_1",
    "ContextGLClearMask_1",
    "RTTBufferManager_1",
    "_super",
    "stage",
    "forceSoftware",
    "profile",
    "mode",
    "_antiAlias",
    "_directionalLights",
    "Array",
    "_pointLights",
    "_lightProbes",
    "shareContext",
    "_pRttBufferManager",
    "RTTBufferManager",
    "getInstance",
    "_pStage",
    "_pDepthRenderer",
    "_pDistanceRenderer",
    "_width",
    "width",
    "window",
    "innerWidth",
    "viewWidth",
    "_height",
    "height",
    "innerHeight",
    "viewHeight",
    "defineProperty",
    "get",
    "set",
    "value",
    "_pBackBufferInvalid",
    "enumerable",
    "configurable",
    "_depthPrepass",
    "_pFilter3DRenderer",
    "dispose",
    "_pRequireDepthRender",
    "requireDepthRender",
    "_pDepthRender",
    "enterNode",
    "node",
    "enter",
    "debugVisible",
    "applyEntity",
    "bounds",
    "boundsPrimitive",
    "render",
    "camera",
    "scene",
    "recoverFromDisposal",
    "pUpdateBackBuffer",
    "_pContext",
    "clear",
    "ContextGLClearMask",
    "DEPTH",
    "textureRatioX",
    "textureRatioY",
    "pRenderSceneDepthToTexture",
    "pRenderDepthPrepass",
    "_iRender",
    "getMainInputTexture",
    "renderToTextureRect",
    "_pScissorRect",
    "present",
    "bufferClear",
    "pExecuteRender",
    "target",
    "scissorRect",
    "surfaceSelector",
    "updateLights",
    "len",
    "light",
    "shadowMapper",
    "shadowsEnabled",
    "autoUpdateShadows",
    "_iShadowsInvalid",
    "iRenderDepthMap",
    "applyDirectionalLight",
    "entity",
    "push",
    "applyLightProbe",
    "applyPointLight",
    "disableColor",
    "_pDepthTextureInvalid",
    "initDepthTexture",
    "context",
    "configureBackBuffer",
    "BitmapImage2D",
    "textureWidth",
    "textureHeight",
    "./DepthRenderer",
    "./DistanceRenderer",
    "./Filter3DRenderer",
    "./RendererBase",
    "./managers/RTTBufferManager",
    "awayjs-core/lib/image/BitmapImage2D",
    "awayjs-stagegl/lib/base/ContextGLClearMask",
    "awayjs-renderergl/lib/DepthRenderer",
    "GL_DepthSurface_1",
    "GL_DepthSurface",
    "_iBackgroundR",
    "_iBackgroundG",
    "_iBackgroundB",
    "_iCollectionMark",
    "isCastingShadow",
    "./surfaces/GL_DepthSurface",
    "awayjs-renderergl/lib/DistanceRenderer",
    "GL_DistanceSurface_1",
    "GL_DistanceSurface",
    "./surfaces/GL_DistanceSurface",
    "awayjs-renderergl/lib/Filter3DRenderer",
    "ContextGLDrawMode_1",
    "ContextGLBlendFactor_1",
    "ContextGLVertexBufferFormat_1",
    "RTTEvent_1",
    "_this",
    "_filterSizesInvalid",
    "_onRTTResizeDelegate",
    "event",
    "onRTTResize",
    "_stage",
    "_rttManager",
    "addEventListener",
    "RTTEvent",
    "RESIZE",
    "_requireDepthRender",
    "_filterTasksInvalid",
    "updateFilterTasks",
    "_mainInputTexture",
    "_filters",
    "updateFilterSizes",
    "_tasks",
    "filter",
    "setRenderTargets",
    "concat",
    "tasks",
    "depthTexture",
    "task",
    "indexBuffer",
    "vertexBuffer",
    "renderToTextureVertexBuffer",
    "update",
    "setProgram",
    "getProgram",
    "setVertexBufferAt",
    "_positionIndex",
    "ContextGLVertexBufferFormat",
    "FLOAT_2",
    "_uvIndex",
    "setRenderTarget",
    "getAbstraction",
    "activate",
    "_inputTextureIndex",
    "renderToScreenVertexBuffer",
    "setBlendFactors",
    "ContextGLBlendFactor",
    "ONE",
    "ZERO",
    "drawIndices",
    "ContextGLDrawMode",
    "TRIANGLES",
    "deactivate",
    "setTextureAt",
    "rttManager",
    "removeEventListener",
    "./events/RTTEvent",
    "awayjs-stagegl/lib/base/ContextGLBlendFactor",
    "awayjs-stagegl/lib/base/ContextGLDrawMode",
    "awayjs-stagegl/lib/base/ContextGLVertexBufferFormat",
    "awayjs-renderergl/lib/RendererBase",
    "Matrix3D_1",
    "Matrix3DUtils_1",
    "Point_1",
    "Rectangle_1",
    "Vector3D_1",
    "EventDispatcher_1",
    "RendererEvent_1",
    "AGALMiniAssembler_1",
    "ContextGLCompareMode_1",
    "StageEvent_1",
    "StageManager_1",
    "SurfacePool_1",
    "RenderableMergeSort_1",
    "surfaceClassGL",
    "_objectPools",
    "_abstractionPool",
    "_activeMasksConfig",
    "_registeredMasks",
    "_numUsedStreams",
    "_numUsedTextures",
    "_cameraForward",
    "Vector3D",
    "_viewPort",
    "Rectangle",
    "_backgroundR",
    "_backgroundG",
    "_backgroundB",
    "_backgroundAlpha",
    "_pRttViewProjectionMatrix",
    "Matrix3D",
    "_localPos",
    "Point",
    "_globalPos",
    "_pNumElements",
    "_disableColor",
    "_renderBlended",
    "_numCullPlanes",
    "_onViewportUpdatedDelegate",
    "onViewportUpdated",
    "_onContextUpdateDelegate",
    "onContextUpdate",
    "renderableSorter",
    "RenderableMergeSort",
    "StageManager",
    "getFreeStage",
    "StageEvent",
    "CONTEXT_CREATED",
    "CONTEXT_RECREATED",
    "VIEWPORT_UPDATED",
    "_surfaceClassGL",
    "_customCullPlanes",
    "x",
    "updateGlobalPos",
    "y",
    "notifyScissorUpdate",
    "renderable",
    "id",
    "_abstractionClassPool",
    "assetType",
    "clearAbstraction",
    "getSurfacePool",
    "elementsType",
    "elementsClass",
    "renderableClass",
    "assetClass",
    "activatePass",
    "pass",
    "shader",
    "numUsedStreams",
    "numUsedTextures",
    "programData",
    "program",
    "createProgram",
    "vertexByteCode",
    "AGALMiniAssembler",
    "assemble",
    "vertexString",
    "data",
    "fragmentByteCode",
    "fragmentString",
    "upload",
    "_iActivate",
    "deactivatePass",
    "_iDeactivate",
    "_viewportDirty",
    "_scissorDirty",
    "_pBlendedRenderableHead",
    "_pOpaqueRenderableHead",
    "_cullPlanes",
    "frustumPlanes",
    "_cameraPosition",
    "scenePosition",
    "_cameraTransform",
    "sceneTransform",
    "Matrix3DUtils",
    "getForward",
    "traversePartitions",
    "sortOpaqueRenderables",
    "sortBlendedRenderables",
    "copyFrom",
    "viewProjection",
    "appendScale",
    "_iRenderCascades",
    "numCascades",
    "scissorRects",
    "cameras",
    "setDepthTest",
    "ContextGLCompareMode",
    "LESS",
    "head",
    "first",
    "LESS_EQUAL",
    "pDraw",
    "_snapshotRequired",
    "_snapshotBitmapImage2D",
    "drawToBitmapImage2D",
    "queueSnapshot",
    "bmd",
    "setColorMask",
    "drawRenderables",
    "renderableGL",
    "renderableGL2",
    "surfaceGL",
    "passes",
    "setStencilActions",
    "gl",
    "disable",
    "STENCIL_TEST",
    "_maskConfig",
    "_surface",
    "alphaThreshold",
    "next",
    "_activeMasksDirty",
    "_checkMasksConfig",
    "masksConfig",
    "stencilFunc",
    "ALWAYS",
    "stencilOp",
    "KEEP",
    "_renderMasks",
    "sourceEntity",
    "_iAssignedMasks",
    "maskId",
    "_registerMask",
    "_scissorUpdated",
    "RendererEvent",
    "SCISSOR_UPDATED",
    "dispatchEvent",
    "notifyViewportUpdate",
    "_viewPortUpdated",
    "viewPort",
    "isRenderable",
    "isInFrustum",
    "_sourceEntity",
    "_zIndex",
    "zOffset",
    "subtract",
    "dotProduct",
    "_renderSceneTransform",
    "getRenderSceneTransform",
    "_acceptTraverser",
    "applyRenderable",
    "surfaceID",
    "renderOrderId",
    "cascaded",
    "zIndex",
    "_iAssignedMaskId",
    "_iMasksConfig",
    "renderSceneTransform",
    "requiresBlending",
    "elementsGL",
    "numElements",
    "applySkybox",
    "obj",
    "masks",
    "enable",
    "REPLACE",
    "numLayers",
    "numRenderables",
    "children",
    "numChildren",
    "mask",
    "EQUAL",
    "INCR",
    "j",
    "k",
    "_drawMask",
    "childConfig",
    "activeNumChildren",
    "activeChildConfig",
    "EventDispatcher",
    "./sort/RenderableMergeSort",
    "./surfaces/SurfacePool",
    "awayjs-core/lib/events/EventDispatcher",
    "awayjs-core/lib/geom/Matrix3D",
    "awayjs-core/lib/geom/Matrix3DUtils",
    "awayjs-core/lib/geom/Point",
    "awayjs-core/lib/geom/Rectangle",
    "awayjs-core/lib/geom/Vector3D",
    "awayjs-display/lib/events/RendererEvent",
    "awayjs-stagegl/lib/aglsl/assembler/AGALMiniAssembler",
    "awayjs-stagegl/lib/base/ContextGLCompareMode",
    "awayjs-stagegl/lib/events/StageEvent",
    "awayjs-stagegl/lib/managers/StageManager",
    "awayjs-renderergl/lib/animators/AnimationSetBase",
    "AssetBase_1",
    "AbstractMethodError_1",
    "AnimationSetError_1",
    "AnimationSetBase",
    "_animations",
    "_animationNames",
    "_animationDictionary",
    "_pFindTempReg",
    "exclude",
    "excludeAnother",
    "reg",
    "indexOf",
    "_usesCPU",
    "resetGPUCompatibility",
    "cancelGPUCompatibility",
    "getAGALVertexCode",
    "registerCache",
    "sharedRegisters",
    "AbstractMethodError",
    "getAGALFragmentCode",
    "shadedTarget",
    "getAGALUVCode",
    "doneAGALCode",
    "hasAnimation",
    "name",
    "getAnimation",
    "addAnimation",
    "AnimationSetError",
    "AssetBase",
    "../errors/AnimationSetError",
    "awayjs-core/lib/errors/AbstractMethodError",
    "awayjs-core/lib/library/AssetBase",
    "awayjs-renderergl/lib/animators/AnimatorBase",
    "RequestAnimationFrame_1",
    "getTimer_1",
    "AnimatorEvent_1",
    "AnimatorBase",
    "animationSet",
    "_autoUpdate",
    "_time",
    "_playbackSpeed",
    "_pOwners",
    "_pAbsoluteTime",
    "_animationStates",
    "updatePosition",
    "_pAnimationSet",
    "_broadcaster",
    "RequestAnimationFrame",
    "onEnterFrame",
    "getAnimationState",
    "className",
    "stateClass",
    "uID",
    "getAnimationStateByName",
    "_pActiveState",
    "_pActiveAnimationName",
    "start",
    "stop",
    "phase",
    "setRenderState",
    "_isPlaying",
    "getTimer",
    "hasEventListener",
    "AnimatorEvent",
    "START",
    "_startEvent",
    "STOP",
    "_stopEvent",
    "time",
    "dt",
    "playbackSpeed",
    "_pUpdateDeltaTime",
    "reset",
    "offset",
    "addOwner",
    "sprite",
    "removeOwner",
    "splice",
    "applyPositionDelta",
    "delta",
    "positionDelta",
    "dist",
    "transform",
    "translateLocal",
    "dispatchCycleEvent",
    "CYCLE_COMPLETE",
    "_cycleEvent",
    "clone",
    "invalidateElements",
    "graphics",
    "testGPUCompatibility",
    "getRenderableElements",
    "sourceElements",
    "../events/AnimatorEvent",
    "awayjs-core/lib/utils/RequestAnimationFrame",
    "awayjs-core/lib/utils/getTimer",
    "awayjs-renderergl/lib/animators/ParticleAnimationSet",
    "AnimationSetBase_1",
    "AnimationRegisterData_1",
    "AnimationElements_1",
    "ParticleAnimationData_1",
    "ParticleProperties_1",
    "ParticlePropertiesMode_1",
    "ParticleTimeNode_1",
    "ParticleAnimationSet",
    "usesDuration",
    "usesLooping",
    "usesDelay",
    "_animationElements",
    "_particleNodes",
    "_localDynamicNodes",
    "_localStaticNodes",
    "_totalLenOfOneVertex",
    "shareAnimationGraphics",
    "_timeNode",
    "ParticleTimeNode",
    "_iProcessAnimationSetting",
    "ParticlePropertiesMode",
    "LOCAL_STATIC",
    "_iDataOffset",
    "dataLength",
    "LOCAL_DYNAMIC",
    "priority",
    "_iAnimationRegisterData",
    "animationRegisterData",
    "AnimationRegisterData",
    "needVelocity",
    "animatableAttributes",
    "animationTargetRegisters",
    "positionTarget",
    "vertexZeroConst",
    "velocityTarget",
    "POST_PRIORITY",
    "scaleAndRotateTarget",
    "COLOR_PRIORITY",
    "hasColorMulNode",
    "colorMulTarget",
    "getFreeVertexVectorTemp",
    "addVertexTempUsages",
    "colorMulVary",
    "getFreeVarying",
    "vertexOneConst",
    "hasColorAddNode",
    "colorAddTarget",
    "colorAddVary",
    "usesFragmentAnimation",
    "hasUVNode",
    "setUVSourceAndTarget",
    "uvTarget",
    "uvAttribute",
    "toString",
    "uvVar",
    "uvSource",
    "setVertexConst",
    "index",
    "key",
    "getAnimationElements",
    "graphic",
    "animationElements",
    "_iGenerateAnimationElements",
    "parent",
    "initParticleFunc",
    "newAnimationElements",
    "localNode",
    "count",
    "getGraphicAt",
    "AnimationElements",
    "createVertexData",
    "numVertices",
    "particles",
    "particlesLength",
    "numParticles",
    "particleProperties",
    "ParticleProperties",
    "particle",
    "oneDataLen",
    "oneDataOffset",
    "counterForVertex",
    "counterForOneData",
    "oneData",
    "vertexData",
    "vertexLength",
    "startingOffset",
    "vertexOffset",
    "total",
    "startTime",
    "duration",
    "delay",
    "initParticleScope",
    "_iGeneratePropertyOfOneParticle",
    "particleIndex",
    "numProcessedVertices",
    "animationParticles",
    "ParticleAnimationData",
    "../animators/AnimationSetBase",
    "../animators/data/AnimationElements",
    "../animators/data/AnimationRegisterData",
    "../animators/data/ParticleAnimationData",
    "../animators/data/ParticleProperties",
    "../animators/data/ParticlePropertiesMode",
    "../animators/nodes/ParticleTimeNode",
    "awayjs-renderergl/lib/animators/ParticleAnimator",
    "AnimatorBase_1",
    "ParticleAnimator",
    "particleAnimationSet",
    "_animationParticleStates",
    "_animatorParticleStates",
    "_timeParticleStates",
    "_animatorSubGeometries",
    "_particleAnimationSet",
    "state",
    "particleNodes",
    "needUpdateTime",
    "animatorElements",
    "getAnimatorElements",
    "resetTime",
    "../animators/AnimatorBase",
    "awayjs-renderergl/lib/animators/SkeletonAnimationSet",
    "SkeletonAnimationSet",
    "jointsPerVertex",
    "_jointsPerVertex",
    "_matricesIndex",
    "numUsedVertexConstants",
    "indexOffset0",
    "indexOffset1",
    "indexOffset2",
    "indexStream",
    "getFreeVertexAttribute",
    "jointIndexIndex",
    "weightStream",
    "jointWeightIndex",
    "indices",
    "weights",
    "temp1",
    "dot",
    "source",
    "getFreeVertexConstant",
    "awayjs-renderergl/lib/animators/SkeletonAnimator",
    "ElementsEvent_1",
    "JointPose_1",
    "SkeletonPose_1",
    "AnimationStateEvent_1",
    "SkeletonAnimator",
    "skeleton",
    "forceCPU",
    "_globalPose",
    "SkeletonPose",
    "_morphedElements",
    "_morphedElementsDirty",
    "_skeletonAnimationSet",
    "_skeleton",
    "_forceCPU",
    "_numJoints",
    "numJoints",
    "_globalMatrices",
    "Float32Array",
    "_onTransitionCompleteDelegate",
    "onTransitionComplete",
    "_onIndicesUpdateDelegate",
    "onIndicesUpdate",
    "_onVerticesUpdateDelegate",
    "onVerticesUpdate",
    "_globalPropertiesDirty",
    "updateGlobalProperties",
    "_useCondensedIndices",
    "play",
    "transition",
    "NaN",
    "_pActiveNode",
    "getAnimationNode",
    "AnimationStateEvent",
    "TRANSITION_COMPLETE",
    "_activeSkeletonState",
    "isNaN",
    "useCondensedIndices",
    "updateCondensedMatrices",
    "condensedIndexLookUp",
    "setVertexConstFromArray",
    "matricesIndex",
    "_condensedMatrices",
    "usesCPU",
    "morphElements",
    "srcIndex",
    "localToGlobalPose",
    "getSkeletonPose",
    "mtxOffset",
    "globalPoses",
    "jointPoses",
    "raw",
    "ox",
    "oy",
    "oz",
    "ow",
    "xy2",
    "xz2",
    "xw2",
    "yz2",
    "yw2",
    "zw2",
    "n11",
    "n12",
    "n13",
    "n21",
    "n22",
    "n23",
    "n31",
    "n32",
    "n33",
    "m11",
    "m12",
    "m13",
    "m14",
    "m21",
    "m22",
    "m23",
    "m24",
    "m31",
    "m32",
    "m33",
    "m34",
    "joints",
    "pose",
    "quat",
    "vec",
    "orientation",
    "translation",
    "z",
    "w",
    "inverseBindPose",
    "targetElements",
    "normals",
    "tangents",
    "autoDeriveNormals",
    "autoDeriveTangents",
    "ElementsEvent",
    "INVALIDATE_INDICES",
    "INVALIDATE_VERTICES",
    "sourcePositions",
    "positions",
    "sourceNormals",
    "sourceTangents",
    "posDim",
    "dimensions",
    "jointIndices",
    "jointWeights",
    "targetPositions",
    "targetNormals",
    "targetTangents",
    "i0",
    "i1",
    "vx",
    "vy",
    "vz",
    "nx",
    "ny",
    "nz",
    "tx",
    "ty",
    "tz",
    "weight",
    "vertX",
    "vertY",
    "vertZ",
    "normX",
    "normY",
    "normZ",
    "tangX",
    "tangY",
    "tangZ",
    "setPositions",
    "setNormals",
    "setTangents",
    "sourcePose",
    "targetPose",
    "globalJointPose",
    "numJointPoses",
    "parentIndex",
    "joint",
    "parentPose",
    "or",
    "tr",
    "q",
    "x1",
    "y1",
    "z1",
    "w1",
    "x2",
    "y2",
    "z2",
    "w2",
    "x3",
    "y3",
    "z3",
    "JointPose",
    "type",
    "animationNode",
    "animationState",
    "setIndices",
    "morphGraphics",
    "attributesView",
    "uvs",
    "setUVs",
    "getCustomAtributes",
    "setCustomAttributes",
    "../animators/data/JointPose",
    "../animators/data/SkeletonPose",
    "../events/AnimationStateEvent",
    "awayjs-display/lib/events/ElementsEvent",
    "awayjs-renderergl/lib/animators/VertexAnimationSet",
    "VertexAnimationMode_1",
    "VertexAnimationSet",
    "numPoses",
    "blendMode",
    "_numPoses",
    "_blendMode",
    "VertexAnimationMode",
    "ABSOLUTE",
    "getAbsoluteAGALCode",
    "getAdditiveAGALCode",
    "temp2",
    "regs",
    "constantReg",
    "weightsIndex",
    "poseIndices",
    "poseInput",
    "tangentDependencies",
    "outputsNormals",
    "normalDependencies",
    "../animators/data/VertexAnimationMode",
    "awayjs-renderergl/lib/animators/VertexAnimator",
    "VertexAnimator",
    "vertexAnimationSet",
    "_poses",
    "_weights",
    "_vertexAnimationSet",
    "_activeVertexState",
    "geometryFlag",
    "currentGraphics",
    "nextGraphics",
    "blendWeight",
    "setNullPose",
    "_iIndex",
    "_indexMappings",
    "getIndexMappings",
    "isAsset",
    "activateVertexBufferVO",
    "awayjs-renderergl/lib/animators/data/AnimationElements",
    "_pVertexBuffer",
    "_pBufferContext",
    "_pBufferDirty",
    "previousTime",
    "Number",
    "NEGATIVE_INFINITY",
    "_iUniqueId",
    "SUBGEOM_ID_COUNT",
    "totalLenOfOneVertex",
    "_numVertices",
    "_pVertexData",
    "activateVertexBuffer",
    "bufferOffset",
    "format",
    "contextIndex",
    "stageIndex",
    "buffer",
    "createVertexBuffer",
    "uploadFromArray",
    "pop",
    "invalidateBuffer",
    "awayjs-renderergl/lib/animators/data/AnimationRegisterData",
    "ShaderRegisterElement_1",
    "indexDictionary",
    "rotationRegisters",
    "positionAttribute",
    "ShaderRegisterElement",
    "regName",
    "vertexTwoConst",
    "vertexTime",
    "vertexLife",
    "tempTime",
    "setRegisterIndex",
    "parameterIndex",
    "registerIndex",
    "getRegisterIndex",
    "../../shaders/ShaderRegisterElement",
    "awayjs-renderergl/lib/animators/data/ColorSegmentPoint",
    "ColorSegmentPoint",
    "life",
    "color",
    "_life",
    "_color",
    "awayjs-renderergl/lib/animators/data/JointPose",
    "Quaternion_1",
    "Quaternion",
    "toMatrix3D",
    "appendTranslation",
    "awayjs-core/lib/geom/Quaternion",
    "awayjs-renderergl/lib/animators/data/ParticleAnimationData",
    "totalTime",
    "startVertexIndex",
    "awayjs-renderergl/lib/animators/data/ParticlePropertiesMode",
    "GLOBAL",
    "awayjs-renderergl/lib/animators/data/ParticleProperties",
    "awayjs-renderergl/lib/animators/data/SkeletonJoint",
    "SkeletonJoint",
    "awayjs-renderergl/lib/animators/data/SkeletonPose",
    "jointPoseFromName",
    "jointName",
    "jointPoseIndex",
    "jointPoseIndexFromName",
    "jointPose",
    "cloneJointPose",
    "thisJointPose",
    "../../animators/data/JointPose",
    "awayjs-renderergl/lib/animators/data/Skeleton",
    "Skeleton",
    "jointFromName",
    "jointIndex",
    "jointIndexFromName",
    "awayjs-renderergl/lib/animators/data/VertexAnimationMode",
    "ADDITIVE",
    "awayjs-renderergl/lib/animators/nodes/AnimationClipNodeBase",
    "AnimationNodeBase_1",
    "AnimationClipNodeBase",
    "_pLooping",
    "_pTotalDuration",
    "_pStitchDirty",
    "_pStitchFinalFrame",
    "_pNumFrames",
    "_pDurations",
    "_pTotalDelta",
    "fixedFrameRate",
    "_pUpdateStitch",
    "_pLastFrame",
    "AnimationNodeBase",
    "awayjs-display/lib/animators/nodes/AnimationNodeBase",
    "awayjs-renderergl/lib/animators/nodes/ParticleAccelerationNode",
    "ParticleNodeBase_1",
    "ParticleAccelerationState_1",
    "ParticleAccelerationNode",
    "acceleration",
    "_pStateClass",
    "ParticleAccelerationState",
    "_acceleration",
    "accelerationValue",
    "_pMode",
    "ACCELERATION_INDEX",
    "temp",
    "removeVertexTempUsage",
    "animator",
    "param",
    "tempAcceleration",
    "ACCELERATION_VECTOR3D",
    "_pOneData",
    "ParticleNodeBase",
    "../../animators/data/ParticlePropertiesMode",
    "../../animators/nodes/ParticleNodeBase",
    "../../animators/states/ParticleAccelerationState",
    "awayjs-renderergl/lib/animators/nodes/ParticleBezierCurveNode",
    "ParticleBezierCurveState_1",
    "ParticleBezierCurveNode",
    "controlPoint",
    "endPoint",
    "ParticleBezierCurveState",
    "_iControlPoint",
    "_iEndPoint",
    "controlValue",
    "BEZIER_CONTROL_INDEX",
    "endValue",
    "BEZIER_END_INDEX",
    "rev_time",
    "time_2",
    "time_temp",
    "distance",
    "bezierControl",
    "BEZIER_CONTROL_VECTOR3D",
    "bezierEnd",
    "BEZIER_END_VECTOR3D",
    "../../animators/states/ParticleBezierCurveState",
    "awayjs-renderergl/lib/animators/nodes/ParticleBillboardNode",
    "ParticleBillboardState_1",
    "ParticleBillboardNode",
    "billboardAxis",
    "ParticleBillboardState",
    "_iBillboardAxis",
    "rotationMatrixRegister",
    "MATRIX_INDEX",
    "shaderRegisterElement",
    "hasBillboard",
    "../../animators/states/ParticleBillboardState",
    "awayjs-renderergl/lib/animators/nodes/ParticleColorNode",
    "ColorTransform_1",
    "ParticleAnimationSet_1",
    "ParticleColorState_1",
    "ParticleColorNode",
    "usesMultiplier",
    "usesOffset",
    "usesCycle",
    "usesPhase",
    "startColor",
    "endColor",
    "cycleDuration",
    "cyclePhase",
    "ParticleColorState",
    "_iUsesMultiplier",
    "_iUsesOffset",
    "_iUsesCycle",
    "_iUsesPhase",
    "_iStartColor",
    "ColorTransform",
    "_iEndColor",
    "_iCycleDuration",
    "_iCyclePhase",
    "cycleConst",
    "CYCLE_INDEX",
    "sin",
    "getFreeVertexSingleTemp",
    "startMultiplierValue",
    "deltaMultiplierValue",
    "START_MULTIPLIER_INDEX",
    "DELTA_MULTIPLIER_INDEX",
    "startOffsetValue",
    "deltaOffsetValue",
    "START_OFFSET_INDEX",
    "DELTA_OFFSET_INDEX",
    "COLOR_START_COLORTRANSFORM",
    "COLOR_END_COLORTRANSFORM",
    "redMultiplier",
    "greenMultiplier",
    "blueMultiplier",
    "alphaMultiplier",
    "redOffset",
    "greenOffset",
    "blueOffset",
    "alphaOffset",
    "../../animators/ParticleAnimationSet",
    "../../animators/states/ParticleColorState",
    "awayjs-core/lib/geom/ColorTransform",
    "awayjs-renderergl/lib/animators/nodes/ParticleFollowNode",
    "ParticleFollowState_1",
    "ParticleFollowNode",
    "usesPosition",
    "usesRotation",
    "smooth",
    "ParticleFollowState",
    "_iUsesPosition",
    "_iUsesRotation",
    "_iSmooth",
    "rotationAttribute",
    "FOLLOW_ROTATION_INDEX",
    "temp3",
    "temp4",
    "FOLLOW_POSITION_INDEX",
    "../../animators/states/ParticleFollowState",
    "awayjs-renderergl/lib/animators/nodes/ParticleInitialColorNode",
    "ParticleInitialColorState_1",
    "ParticleInitialColorNode",
    "initialColor",
    "ParticleInitialColorState",
    "_iInitialColor",
    "multiplierValue",
    "MULTIPLIER_INDEX",
    "offsetValue",
    "OFFSET_INDEX",
    "COLOR_INITIAL_COLORTRANSFORM",
    "../../animators/states/ParticleInitialColorState",
    "awayjs-renderergl/lib/animators/nodes/ParticleNodeBase",
    "_pDataLength",
    "MODES",
    "_priority",
    0,
    2,
    "awayjs-renderergl/lib/animators/nodes/ParticleOrbitNode",
    "ParticleOrbitState_1",
    "ParticleOrbitNode",
    "usesEulers",
    "radius",
    "eulers",
    "ParticleOrbitState",
    "_iUsesEulers",
    "_iRadius",
    "_iEulers",
    "orbitRegister",
    "ORBIT_INDEX",
    "eulersMatrixRegister",
    "EULERS_INDEX",
    "cos",
    "degree",
    "orbit",
    "ORBIT_VECTOR3D",
    "Math",
    "PI",
    "../../animators/states/ParticleOrbitState",
    "awayjs-renderergl/lib/animators/nodes/ParticleOscillatorNode",
    "ParticleOscillatorState_1",
    "ParticleOscillatorNode",
    "oscillator",
    "ParticleOscillatorState",
    "_iOscillator",
    "oscillatorRegister",
    "OSCILLATOR_INDEX",
    "dgree",
    "drift",
    "OSCILLATOR_VECTOR3D",
    "../../animators/states/ParticleOscillatorState",
    "awayjs-renderergl/lib/animators/nodes/ParticlePositionNode",
    "ParticlePositionState_1",
    "ParticlePositionNode",
    "position",
    "ParticlePositionState",
    "_iPosition",
    "POSITION_INDEX",
    "POSITION_VECTOR3D",
    "../../animators/states/ParticlePositionState",
    "awayjs-renderergl/lib/animators/nodes/ParticleRotateToHeadingNode",
    "ParticleRotateToHeadingState_1",
    "ParticleRotateToHeadingNode",
    "ParticleRotateToHeadingState",
    "nrmVel",
    "xAxis",
    "R",
    "R_rev",
    "cos2",
    "tempSingle",
    "../../animators/states/ParticleRotateToHeadingState",
    "awayjs-renderergl/lib/animators/nodes/ParticleRotateToPositionNode",
    "ParticleRotateToPositionState_1",
    "ParticleRotateToPositionNode",
    "ParticleRotateToPositionState",
    "nrmDirection",
    "o_temp",
    "../../animators/states/ParticleRotateToPositionState",
    "awayjs-renderergl/lib/animators/nodes/ParticleRotationalVelocityNode",
    "ParticleRotationalVelocityState_1",
    "ParticleRotationalVelocityNode",
    "rotationalVelocity",
    "ParticleRotationalVelocityState",
    "_iRotationalVelocity",
    "rotationRegister",
    "ROTATIONALVELOCITY_INDEX",
    "Rtemp",
    "rotate",
    "ROTATIONALVELOCITY_VECTOR3D",
    "normalize",
    "../../animators/states/ParticleRotationalVelocityState",
    "awayjs-renderergl/lib/animators/nodes/ParticleScaleNode",
    "ParticleScaleState_1",
    "ParticleScaleNode",
    "minScale",
    "maxScale",
    "ParticleScaleState",
    "_iMinScale",
    "_iMaxScale",
    "scaleRegister",
    "SCALE_INDEX",
    "scale",
    "SCALE_VECTOR3D",
    "abs",
    "../../animators/states/ParticleScaleState",
    "awayjs-renderergl/lib/animators/nodes/ParticleSegmentedColorNode",
    "ParticleSegmentedColorState_1",
    "ParticleSegmentedColorNode",
    "numSegmentPoint",
    "segmentPoints",
    "ParticleSegmentedColorState",
    "_iNumSegmentPoint",
    "_iSegmentPoints",
    "accMultiplierColor",
    "tempColor",
    "accTime",
    "lifeTimeRegister",
    "TIME_DATA_INDEX",
    "startMulValue",
    "deltaMulValues",
    "deltaOffsetValues",
    "../../animators/states/ParticleSegmentedColorState",
    "awayjs-renderergl/lib/animators/nodes/ParticleSpriteSheetNode",
    "ParticleSpriteSheetState_1",
    "ParticleSpriteSheetNode",
    "numColumns",
    "numRows",
    "totalFrames",
    "MAX_VALUE",
    "ParticleSpriteSheetState",
    "_iNumColumns",
    "_iNumRows",
    "_iTotalFrames",
    "min",
    "uvParamConst1",
    "uvParamConst2",
    "UV_INDEX_0",
    "UV_INDEX_1",
    "uTotal",
    "uStep",
    "vStep",
    "uSpeed",
    "cycle",
    "phaseTime",
    "vOffset",
    "v",
    "uvCycle",
    "UV_VECTOR3D",
    "../../animators/states/ParticleSpriteSheetState",
    "awayjs-renderergl/lib/animators/nodes/ParticleTimeNode",
    "ParticleTimeState_1",
    "ParticleTimeState",
    "_iUsesDuration",
    "_iUsesLooping",
    "_iUsesDelay",
    "timeStreamRegister",
    "TIME_STREAM_INDEX",
    "timeConst",
    "TIME_CONSTANT_INDEX",
    "div",
    "sge",
    "../../animators/states/ParticleTimeState",
    "awayjs-renderergl/lib/animators/nodes/ParticleUVNode",
    "ParticleUVState_1",
    "ParticleUVNode",
    "axis",
    "ParticleUVState",
    "_cycle",
    "_scale",
    "_axis",
    "updateUVData",
    "uvConst",
    "UV_INDEX",
    "axisIndex",
    "_iUvData",
    "U_AXIS",
    "V_AXIS",
    "../../animators/states/ParticleUVState",
    "awayjs-renderergl/lib/animators/nodes/ParticleVelocityNode",
    "ParticleVelocityState_1",
    "ParticleVelocityNode",
    "velocity",
    "ParticleVelocityState",
    "_iVelocity",
    "velocityValue",
    "VELOCITY_INDEX",
    "_tempVelocity",
    "VELOCITY_VECTOR3D",
    "../../animators/states/ParticleVelocityState",
    "awayjs-renderergl/lib/animators/nodes/SkeletonBinaryLERPNode",
    "SkeletonBinaryLERPState_1",
    "SkeletonBinaryLERPNode",
    "SkeletonBinaryLERPState",
    "../../animators/states/SkeletonBinaryLERPState",
    "awayjs-renderergl/lib/animators/nodes/SkeletonClipNode",
    "AnimationClipNodeBase_1",
    "SkeletonClipState_1",
    "SkeletonClipNode",
    "_frames",
    "highQuality",
    "SkeletonClipState",
    "addFrame",
    "skeletonPose",
    "p1",
    "p2",
    "../../animators/nodes/AnimationClipNodeBase",
    "../../animators/states/SkeletonClipState",
    "awayjs-renderergl/lib/animators/nodes/SkeletonDifferenceNode",
    "SkeletonDifferenceState_1",
    "SkeletonDifferenceNode",
    "SkeletonDifferenceState",
    "default",
    "../../animators/states/SkeletonDifferenceState",
    "awayjs-renderergl/lib/animators/nodes/SkeletonDirectionalNode",
    "SkeletonDirectionalState_1",
    "SkeletonDirectionalNode",
    "SkeletonDirectionalState",
    "../../animators/states/SkeletonDirectionalState",
    "awayjs-renderergl/lib/animators/nodes/SkeletonNaryLERPNode",
    "SkeletonNaryLERPState_1",
    "SkeletonNaryLERPNode",
    "_iInputs",
    "SkeletonNaryLERPState",
    "_numInputs",
    "getInputIndex",
    "input",
    "getInputAt",
    "addInput",
    "../../animators/states/SkeletonNaryLERPState",
    "awayjs-renderergl/lib/animators/nodes/VertexClipNode",
    "VertexClipState_1",
    "VertexClipNode",
    "_translations",
    "VertexClipState",
    "geometry",
    "../../animators/states/VertexClipState",
    "awayjs-renderergl/lib/animators/states/AnimationClipState",
    "AnimationStateBase_1",
    "AnimationClipState",
    "animationClipNode",
    "_pFramesDirty",
    "_animationClipNode",
    "_pUpdateFrames",
    "_pBlendWeight",
    "_pCurrentFrame",
    "_pNextFrame",
    "looping",
    "_pStartTime",
    "totalDuration",
    "_pTime",
    "_pUpdateTime",
    "_pTimeDir",
    "lastFrame",
    "notifyPlaybackComplete",
    "floor",
    "dur",
    "frameTime",
    "durations",
    "_animationStatePlaybackComplete",
    "PLAYBACK_COMPLETE",
    "_pAnimator",
    "AnimationStateBase",
    "../../animators/states/AnimationStateBase",
    "../../events/AnimationStateEvent",
    "awayjs-renderergl/lib/animators/states/AnimationStateBase",
    "_pRootDelta",
    "_pPositionDeltaDirty",
    "_pAnimationNode",
    "_pUpdatePositionDelta",
    "awayjs-renderergl/lib/animators/states/IAnimationState",
    "awayjs-renderergl/lib/animators/states/ISkeletonAnimationState",
    "awayjs-renderergl/lib/animators/states/IVertexAnimationState",
    "awayjs-renderergl/lib/animators/states/ParticleAccelerationState",
    "ParticleStateBase_1",
    "particleAccelerationNode",
    "_particleAccelerationNode",
    "updateAccelerationData",
    "FLOAT_3",
    "_halfAcceleration",
    "ParticleStateBase",
    "../../animators/states/ParticleStateBase",
    "awayjs-renderergl/lib/animators/states/ParticleBezierCurveState",
    "particleBezierCurveNode",
    "_particleBezierCurveNode",
    "_controlPoint",
    "_endPoint",
    "controlIndex",
    "endIndex",
    "awayjs-renderergl/lib/animators/states/ParticleBillboardState",
    "MathConsts_1",
    "Orientation3D_1",
    "particleNode",
    "_matrix",
    "_billboardAxis",
    "comps",
    "pos",
    "look",
    "right",
    "crossProduct",
    "decompose",
    "Orientation3D",
    "AXIS_ANGLE",
    "copyColumnFrom",
    "appendRotation",
    "MathConsts",
    "RADIANS_TO_DEGREES",
    "append",
    "inverseSceneTransform",
    "identity",
    "setVertexConstFromMatrix",
    "awayjs-core/lib/geom/MathConsts",
    "awayjs-core/lib/geom/Orientation3D",
    "awayjs-renderergl/lib/animators/states/ParticleColorState",
    "particleColorNode",
    "_particleColorNode",
    "_usesMultiplier",
    "_usesOffset",
    "_usesCycle",
    "_usesPhase",
    "_startColor",
    "_endColor",
    "_cycleDuration",
    "_cyclePhase",
    "updateColorData",
    "dataOffset",
    "_cycleData",
    "FLOAT_4",
    "_startMultiplierData",
    "_deltaMultiplierData",
    "_startOffsetData",
    "_deltaOffsetData",
    "awayjs-renderergl/lib/animators/states/ParticleFollowState",
    "particleFollowNode",
    "_targetPos",
    "_targetEuler",
    "_temp",
    "_particleFollowNode",
    "_smooth",
    "_followTarget",
    "scaleX",
    "scaleY",
    "scaleZ",
    "rotationX",
    "rotationY",
    "rotationZ",
    "scaleBy",
    "DEGREES_TO_RADIANS",
    "_prePos",
    "_preEuler",
    "currentTime",
    "deltaTime",
    "needProcess",
    "processPositionAndRotation",
    "processPosition",
    "precessRotation",
    "changed",
    "interpolatedPos",
    "posVelocity",
    "inc",
    "add",
    "interpolatedRotation",
    "rotationVelocity",
    "awayjs-renderergl/lib/animators/states/ParticleInitialColorState",
    "particleInitialColorNode",
    "_particleInitialColorNode",
    "_initialColor",
    "_multiplierData",
    "_offsetData",
    "awayjs-renderergl/lib/animators/states/ParticleOrbitState",
    "particleOrbitNode",
    "_particleOrbitNode",
    "_usesEulers",
    "_eulers",
    "_radius",
    "updateOrbitData",
    "_orbitData",
    "_eulersMatrix",
    "X_AXIS",
    "Y_AXIS",
    "Z_AXIS",
    "awayjs-renderergl/lib/animators/states/ParticleOscillatorState",
    "particleOscillatorNode",
    "_particleOscillatorNode",
    "_oscillator",
    "updateOscillatorData",
    "_oscillatorData",
    "awayjs-renderergl/lib/animators/states/ParticlePositionState",
    "particlePositionNode",
    "_particlePositionNode",
    "_position",
    "getPositions",
    "_pDynamicProperties",
    "_pDynamicPropertiesDirty",
    "_pUpdateDynamicProperties",
    "awayjs-renderergl/lib/animators/states/ParticleRotateToHeadingState",
    "_pParticleAnimator",
    "awayjs-renderergl/lib/animators/states/ParticleRotateToPositionState",
    "particleRotateToPositionNode",
    "_particleRotateToPositionNode",
    "_offset",
    "transformVector",
    "awayjs-renderergl/lib/animators/states/ParticleRotationalVelocityState",
    "particleRotationNode",
    "_particleRotationalVelocityNode",
    "_rotationalVelocity",
    "updateRotationalVelocityData",
    "getRotationalVelocities",
    "setRotationalVelocities",
    "_rotationalVelocityData",
    "rotation",
    "awayjs-renderergl/lib/animators/states/ParticleScaleState",
    "particleScaleNode",
    "_particleScaleNode",
    "_minScale",
    "_maxScale",
    "updateScaleData",
    "_scaleData",
    "awayjs-renderergl/lib/animators/states/ParticleSegmentedColorState",
    "particleSegmentedColorNode",
    "_segmentPoints",
    "_numSegmentPoint",
    "_timeLifeData",
    "awayjs-renderergl/lib/animators/states/ParticleSpriteSheetState",
    "particleSpriteSheetNode",
    "_particleSpriteSheetNode",
    "_totalFrames",
    "_numColumns",
    "_numRows",
    "updateSpriteSheetData",
    "usesUVTransform",
    "_spriteSheetData",
    "awayjs-renderergl/lib/animators/states/ParticleStateBase",
    "_particleNode",
    "_pNeedUpdateTime",
    "animationParticle",
    "awayjs-renderergl/lib/animators/states/ParticleTimeState",
    "particleTimeNode",
    "_particleTimeNode",
    "particleTime",
    "awayjs-renderergl/lib/animators/states/ParticleUVState",
    "particleUVNode",
    "_particleUVNode",
    "awayjs-renderergl/lib/animators/states/ParticleVelocityState",
    "particleVelocityNode",
    "_particleVelocityNode",
    "_velocity",
    "getVelocities",
    "setVelocities",
    "awayjs-renderergl/lib/animators/states/SkeletonBinaryLERPState",
    "skeletonAnimationNode",
    "_blendWeight",
    "_skeletonPose",
    "_skeletonPoseDirty",
    "_skeletonAnimationNode",
    "_inputA",
    "inputA",
    "_inputB",
    "inputB",
    "updateSkeletonPose",
    "deltA",
    "deltB",
    "endPose",
    "endPoses",
    "poses1",
    "poses2",
    "pose1",
    "pose2",
    "lerp",
    "../../animators/data/SkeletonPose",
    "awayjs-renderergl/lib/animators/states/SkeletonClipState",
    "AnimationClipState_1",
    "skeletonClipNode",
    "_rootPos",
    "_skeletonClipNode",
    "frames",
    "_currentPose",
    "_nextPose",
    "currentPose",
    "nextPose",
    "slerp",
    "p3",
    "totalDelta",
    "_pOldFrame",
    "dx",
    "dy",
    "dz",
    "stitchFinalFrame",
    "../../animators/states/AnimationClipState",
    "awayjs-renderergl/lib/animators/states/SkeletonDifferenceState",
    "_baseInput",
    "baseInput",
    "_differenceInput",
    "differenceInput",
    "basePoses",
    "diffPoses",
    "base",
    "diff",
    "basePos",
    "diffPos",
    "_tempQuat",
    "multiply",
    "awayjs-renderergl/lib/animators/states/SkeletonDirectionalState",
    "_direction",
    "_blendDirty",
    "_forward",
    "forward",
    "_backward",
    "backward",
    "_left",
    "left",
    "_right",
    "updateBlend",
    "_pUdateTime",
    "awayjs-renderergl/lib/animators/states/SkeletonNaryLERPState",
    "_blendWeights",
    "_inputs",
    "numInputs",
    "getBlendWeightAt",
    "setBlendWeightAt",
    "poses",
    "endTr",
    "endQuat",
    "firstPose",
    "w0",
    "x0",
    "y0",
    "z0",
    "awayjs-renderergl/lib/animators/states/VertexClipState",
    "vertexClipNode",
    "_vertexClipNode",
    "_currentGraphics",
    "_nextGraphics",
    "awayjs-renderergl/lib/animators/transitions/CrossfadeTransitionNode",
    "SkeletonBinaryLERPNode_1",
    "CrossfadeTransitionState_1",
    "CrossfadeTransitionNode",
    "CrossfadeTransitionState",
    "../../animators/nodes/SkeletonBinaryLERPNode",
    "../../animators/transitions/CrossfadeTransitionState",
    "awayjs-renderergl/lib/animators/transitions/CrossfadeTransitionState",
    "_crossfadeTransitionNode",
    "startBlend",
    "blendSpeed",
    "_animationStateTransitionComplete",
    "../../animators/../events/AnimationStateEvent",
    "awayjs-renderergl/lib/animators/transitions/CrossfadeTransition",
    "CrossfadeTransitionNode_1",
    "CrossfadeTransition",
    "startNode",
    "endNode",
    "crossFadeTransitionNode",
    "../../animators/transitions/CrossfadeTransitionNode",
    "awayjs-renderergl/lib/animators/transitions/IAnimationTransition",
    "awayjs-renderergl/lib/animators",
    "ColorSegmentPoint_1",
    "Skeleton_1",
    "SkeletonJoint_1",
    "ParticleAccelerationNode_1",
    "ParticleBezierCurveNode_1",
    "ParticleBillboardNode_1",
    "ParticleColorNode_1",
    "ParticleFollowNode_1",
    "ParticleInitialColorNode_1",
    "ParticleOrbitNode_1",
    "ParticleOscillatorNode_1",
    "ParticlePositionNode_1",
    "ParticleRotateToHeadingNode_1",
    "ParticleRotateToPositionNode_1",
    "ParticleRotationalVelocityNode_1",
    "ParticleScaleNode_1",
    "ParticleSegmentedColorNode_1",
    "ParticleSpriteSheetNode_1",
    "ParticleUVNode_1",
    "ParticleVelocityNode_1",
    "SkeletonClipNode_1",
    "SkeletonDifferenceNode_1",
    "SkeletonDirectionalNode_1",
    "SkeletonNaryLERPNode_1",
    "VertexClipNode_1",
    "CrossfadeTransition_1",
    "ParticleAnimator_1",
    "SkeletonAnimationSet_1",
    "SkeletonAnimator_1",
    "VertexAnimationSet_1",
    "VertexAnimator_1",
    "./animators/AnimationSetBase",
    "./animators/AnimatorBase",
    "./animators/ParticleAnimationSet",
    "./animators/ParticleAnimator",
    "./animators/SkeletonAnimationSet",
    "./animators/SkeletonAnimator",
    "./animators/VertexAnimationSet",
    "./animators/VertexAnimator",
    "./animators/data/AnimationElements",
    "./animators/data/AnimationRegisterData",
    "./animators/data/ColorSegmentPoint",
    "./animators/data/JointPose",
    "./animators/data/ParticleAnimationData",
    "./animators/data/ParticleProperties",
    "./animators/data/ParticlePropertiesMode",
    "./animators/data/Skeleton",
    "./animators/data/SkeletonJoint",
    "./animators/data/SkeletonPose",
    "./animators/data/VertexAnimationMode",
    "./animators/nodes/AnimationClipNodeBase",
    "./animators/nodes/ParticleAccelerationNode",
    "./animators/nodes/ParticleBezierCurveNode",
    "./animators/nodes/ParticleBillboardNode",
    "./animators/nodes/ParticleColorNode",
    "./animators/nodes/ParticleFollowNode",
    "./animators/nodes/ParticleInitialColorNode",
    "./animators/nodes/ParticleNodeBase",
    "./animators/nodes/ParticleOrbitNode",
    "./animators/nodes/ParticleOscillatorNode",
    "./animators/nodes/ParticlePositionNode",
    "./animators/nodes/ParticleRotateToHeadingNode",
    "./animators/nodes/ParticleRotateToPositionNode",
    "./animators/nodes/ParticleRotationalVelocityNode",
    "./animators/nodes/ParticleScaleNode",
    "./animators/nodes/ParticleSegmentedColorNode",
    "./animators/nodes/ParticleSpriteSheetNode",
    "./animators/nodes/ParticleTimeNode",
    "./animators/nodes/ParticleUVNode",
    "./animators/nodes/ParticleVelocityNode",
    "./animators/nodes/SkeletonBinaryLERPNode",
    "./animators/nodes/SkeletonClipNode",
    "./animators/nodes/SkeletonDifferenceNode",
    "./animators/nodes/SkeletonDirectionalNode",
    "./animators/nodes/SkeletonNaryLERPNode",
    "./animators/nodes/VertexClipNode",
    "./animators/states/AnimationClipState",
    "./animators/states/AnimationStateBase",
    "./animators/states/ParticleAccelerationState",
    "./animators/states/ParticleBezierCurveState",
    "./animators/states/ParticleBillboardState",
    "./animators/states/ParticleColorState",
    "./animators/states/ParticleFollowState",
    "./animators/states/ParticleInitialColorState",
    "./animators/states/ParticleOrbitState",
    "./animators/states/ParticleOscillatorState",
    "./animators/states/ParticlePositionState",
    "./animators/states/ParticleRotateToHeadingState",
    "./animators/states/ParticleRotateToPositionState",
    "./animators/states/ParticleRotationalVelocityState",
    "./animators/states/ParticleScaleState",
    "./animators/states/ParticleSegmentedColorState",
    "./animators/states/ParticleSpriteSheetState",
    "./animators/states/ParticleStateBase",
    "./animators/states/ParticleTimeState",
    "./animators/states/ParticleUVState",
    "./animators/states/ParticleVelocityState",
    "./animators/states/SkeletonBinaryLERPState",
    "./animators/states/SkeletonClipState",
    "./animators/states/SkeletonDifferenceState",
    "./animators/states/SkeletonDirectionalState",
    "./animators/states/SkeletonNaryLERPState",
    "./animators/states/VertexClipState",
    "./animators/transitions/CrossfadeTransition",
    "./animators/transitions/CrossfadeTransitionNode",
    "./animators/transitions/CrossfadeTransitionState",
    "awayjs-renderergl/lib/elements/GL_ElementsBase",
    "AbstractionBase_1",
    "AssetEvent_1",
    "ElementsUtils_1",
    "GL_ElementsBase",
    "usages",
    "_vertices",
    "_verticesUpdated",
    "_numIndices",
    "_elements",
    "_onInvalidateIndicesDelegate",
    "_onInvalidateIndices",
    "_onClearIndicesDelegate",
    "_onClearIndices",
    "_onInvalidateVerticesDelegate",
    "_onInvalidateVertices",
    "_onClearVerticesDelegate",
    "_onClearVertices",
    "CLEAR_INDICES",
    "CLEAR_VERTICES",
    "_indicesUpdated",
    "_updateIndices",
    "getIndexBufferGL",
    "_indices",
    "getVertexBufferGL",
    "bufferId",
    "_updateVertices",
    "size",
    "unsigned",
    "onClear",
    "_overflow",
    "_setRenderState",
    "draw",
    "indexOffset",
    "ElementsUtils",
    "getSubIndices",
    "_attributesBuffer",
    "_pGetOverflowElements",
    "AssetEvent",
    "CLEAR",
    "getSubVertices",
    "AbstractionBase",
    "awayjs-core/lib/events/AssetEvent",
    "awayjs-core/lib/library/AbstractionBase",
    "awayjs-display/lib/utils/ElementsUtils",
    "awayjs-renderergl/lib/elements/GL_LineElements",
    "ContextGLProgramType_1",
    "GL_ElementsBase_1",
    "lineElements",
    "_calcMatrix",
    "_thickness",
    "_lineElements",
    "_iIncludeDependencies",
    "colorDependencies",
    "_iGetVertexCode",
    "position0",
    "globalPosDependencies",
    "globalPositionVertex",
    "animatedPosition",
    "position1",
    "thickness",
    "viewMatrixReg",
    "viewMatrixIndex",
    "constOne",
    "constNegOne",
    "misc",
    "sceneMatrixReg",
    "sceneMatrixIndex",
    "q0",
    "q1",
    "behind",
    "qclipped",
    "_iGetFragmentCode",
    "colorBufferIndex",
    "colors",
    "vertexConstantData",
    "projection",
    "near",
    "matrix",
    "copyRawDataTo",
    "setProgramConstantsFromArray",
    "ContextGLProgramType",
    "VERTEX",
    "numIndices",
    "drawVertices",
    "../elements/GL_ElementsBase",
    "awayjs-stagegl/lib/base/ContextGLProgramType",
    "awayjs-renderergl/lib/elements/GL_SkyboxElements",
    "GL_TriangleElements_1",
    "GL_SkyboxElements",
    "apply",
    "arguments",
    "_skyboxProjection",
    "scenePositionIndex",
    "skyboxScale",
    "projectionDependencies",
    "projectionFragment",
    "far",
    "sqrt",
    "copyRowTo",
    "camPos",
    "cx",
    "cy",
    "cz",
    "cw",
    "signX",
    "signY",
    "inverse",
    "invert",
    "copyRowFrom",
    "FRAGMENT",
    "fragmentConstantData",
    "../elements/GL_TriangleElements",
    "awayjs-renderergl/lib/elements/GL_TriangleElements",
    "triangleElements",
    "_triangleElements",
    "normalIndex",
    "tangentIndex",
    "curvesIndex",
    "uvIndex",
    "secondaryUVIndex",
    "matrix3D",
    "CALCULATION_MATRIX",
    "awayjs-renderergl/lib/elements/IElementsClassGL",
    "awayjs-renderergl/lib/elements",
    "GL_LineElements_1",
    "GL_SkyboxElements_1",
    "./elements/GL_ElementsBase",
    "./elements/GL_LineElements",
    "./elements/GL_SkyboxElements",
    "./elements/GL_TriangleElements",
    "awayjs-renderergl/lib/errors/AnimationSetError",
    "ErrorBase_1",
    "message",
    "ErrorBase",
    "awayjs-core/lib/errors/ErrorBase",
    "awayjs-renderergl/lib/errors",
    "./errors/AnimationSetError",
    "awayjs-renderergl/lib/events/AnimationStateEvent",
    "EventBase_1",
    "_animator",
    "_animationState",
    "_animationNode",
    "EventBase",
    "awayjs-core/lib/events/EventBase",
    "awayjs-renderergl/lib/events/AnimatorEvent",
    "awayjs-renderergl/lib/events/PassEvent",
    "PassEvent",
    "_pass",
    "INVALIDATE",
    "awayjs-renderergl/lib/events/RTTEvent",
    "awayjs-renderergl/lib/events/ShadingMethodEvent",
    "ShadingMethodEvent",
    "SHADER_INVALIDATED",
    "awayjs-renderergl/lib/events",
    "PassEvent_1",
    "ShadingMethodEvent_1",
    "./events/AnimationStateEvent",
    "./events/AnimatorEvent",
    "./events/PassEvent",
    "./events/ShadingMethodEvent",
    "awayjs-renderergl/lib/filters/BlurFilter3D",
    "Filter3DHBlurTask_1",
    "Filter3DVBlurTask_1",
    "Filter3DBase_1",
    "BlurFilter3D",
    "blurX",
    "blurY",
    "stepSize",
    "_hBlurTask",
    "Filter3DHBlurTask",
    "_vBlurTask",
    "Filter3DVBlurTask",
    "addTask",
    "amount",
    "mainTarget",
    "Filter3DBase",
    "../filters/Filter3DBase",
    "../filters/tasks/Filter3DHBlurTask",
    "../filters/tasks/Filter3DVBlurTask",
    "awayjs-renderergl/lib/filters/CompositeFilter3D",
    "Filter3DCompositeTask_1",
    "CompositeFilter3D",
    "exposure",
    "_compositeTask",
    "Filter3DCompositeTask",
    "overlayTexture",
    "../filters/tasks/Filter3DCompositeTask",
    "awayjs-renderergl/lib/filters/FXAAFilter3D",
    "Filter3DFXAATask_1",
    "FXAAFilter3D",
    "_fxaaTask",
    "Filter3DFXAATask",
    "../filters/tasks/Filter3DFXAATask",
    "awayjs-renderergl/lib/filters/Filter3DBase",
    "_textureWidth",
    "_textureHeight",
    "awayjs-renderergl/lib/filters/tasks/Filter3DCompositeTask",
    "Filter3DTaskBase_1",
    "_data",
    "_overlayTexture",
    "_overlayWidth",
    "_overlayHeight",
    "getFragmentCode",
    "_registerCache",
    "getFreeFragmentVectorTemp",
    "addFragmentTempUsages",
    "inputTexture",
    "getFreeTextureReg",
    "_overlayTextureIndex",
    "getFreeFragmentConstant",
    "_exposureIndex",
    "scaling",
    "_scalingIndex",
    "_uvVarying",
    "camera3D",
    "_scaledTextureWidth",
    "_scaledTextureHeight",
    "Filter3DTaskBase",
    "../../filters/tasks/Filter3DTaskBase",
    "awayjs-renderergl/lib/filters/tasks/Filter3DFXAATask",
    "_stepSize",
    "_amount",
    "invalidateProgram",
    "updateBlurData",
    "calculateStepSize",
    "lum",
    "_0",
    "_025",
    "_05",
    "_075",
    "_1",
    "pix",
    "mOne",
    "mul",
    "fxaaReduceMin",
    "fxaaReduceMul",
    "fxaaSpanMax",
    "delta1",
    "delta2",
    "delta3",
    "delta4",
    "uv_in",
    "uv",
    "uvx",
    "uvy",
    "TL",
    "TR",
    "BL",
    "BR",
    "M",
    "tempf1",
    "tempf2",
    "tempf3",
    "tex",
    "dir",
    "dirx",
    "diry",
    "dirxy",
    "dirReduce",
    "inverseDirAdjustment",
    "result1",
    "result2",
    "lumaMin",
    "lumaMax",
    "sample",
    "tempxy",
    "join",
    "updateTextures",
    "_realStepSize",
    "MAX_AUTO_SAMPLES",
    "awayjs-renderergl/lib/filters/tasks/Filter3DHBlurTask",
    "numSamples",
    "invW",
    "awayjs-renderergl/lib/filters/tasks/Filter3DTaskBase",
    "Image2D_1",
    "ShaderRegisterCache_1",
    "_textureDimensionsInvalid",
    "_program3DInvalid",
    "_textureScale",
    "ShaderRegisterCache",
    "_target",
    "_program3D",
    "updateProgram",
    "getVertexCode",
    "Image2D",
    "../../shaders/ShaderRegisterCache",
    "awayjs-core/lib/image/Image2D",
    "awayjs-renderergl/lib/filters/tasks/Filter3DVBlurTask",
    "invH",
    "awayjs-renderergl/lib/filters",
    "BlurFilter3D_1",
    "CompositeFilter3D_1",
    "FXAAFilter3D_1",
    "./filters/BlurFilter3D",
    "./filters/CompositeFilter3D",
    "./filters/FXAAFilter3D",
    "./filters/Filter3DBase",
    "./filters/tasks/Filter3DCompositeTask",
    "./filters/tasks/Filter3DFXAATask",
    "./filters/tasks/Filter3DHBlurTask",
    "./filters/tasks/Filter3DTaskBase",
    "./filters/tasks/Filter3DVBlurTask",
    "awayjs-renderergl/lib/managers/RTTBufferManager",
    "ImageUtils_1",
    "_viewWidth",
    "_viewHeight",
    "_buffersInvalid",
    "_renderToTextureRect",
    "_instances",
    "rttBufferManager",
    "getRTTBufferManagerFromStage",
    "vo",
    "RTTBufferManagerVO",
    "stage3d",
    "rttbfm",
    "c",
    "deleteRTTBufferManager",
    "updateRTTBuffers",
    "_textureRatioX",
    "_textureRatioY",
    "ImageUtils",
    "getBestPowerOf2",
    "_renderToTextureVertexBuffer",
    "_renderToScreenVertexBuffer",
    "_indexBuffer",
    "textureVerts",
    "screenVerts",
    "createIndexBuffer",
    "u1",
    "u2",
    "v1",
    "v2",
    "../events/RTTEvent",
    "awayjs-core/lib/utils/ImageUtils",
    "awayjs-renderergl/lib/managers",
    "awayjs-renderergl/lib/renderables/GL_BillboardRenderable",
    "AttributesBuffer_1",
    "DefaultMaterialManager_1",
    "GL_RenderableBase_1",
    "billboard",
    "renderer",
    "_billboard",
    "_pGetElements",
    "texture",
    "material",
    "getTextureAt",
    "style",
    "getSamplerAt",
    "DefaultMaterialManager",
    "getDefaultSampler",
    "_id",
    "_samplerElements",
    "billboardWidth",
    "billboardHeight",
    "billboardRect",
    "AttributesBuffer",
    "_pGetSurface",
    "_renderer",
    "getDefaultMaterial",
    "GL_RenderableBase",
    "../renderables/GL_RenderableBase",
    "awayjs-core/lib/attributes/AttributesBuffer",
    "awayjs-display/lib/managers/DefaultMaterialManager",
    "awayjs-renderergl/lib/renderables/GL_GraphicRenderable",
    "_count",
    "awayjs-renderergl/lib/renderables/GL_LineSegmentRenderable",
    "lineSegment",
    "_lineSegment",
    "_lineGraphics",
    "startPostion",
    "end",
    "endPosition",
    "setThickness",
    "_pGetOverflowRenderable",
    "awayjs-renderergl/lib/renderables/GL_RenderableBase",
    "RenderableEvent_1",
    "_elementsDirty",
    "_surfaceDirty",
    "images",
    "samplers",
    "_onInvalidateSurfaceDelegate",
    "_onInvalidateSurface",
    "_onInvalidateElementsDelegate",
    "onInvalidateElements",
    "RenderableEvent",
    "INVALIDATE_SURFACE",
    "INVALIDATE_ELEMENTS",
    "_updateElements",
    "_elementsGL",
    "_updateSurface",
    "_surfaceGL",
    "surface",
    "activeElements",
    "numImages",
    "uvMatrix",
    "numTextures",
    "getNumTextures",
    "image",
    "sampler",
    "getNumImages",
    "getImageIndex",
    "getImageAt",
    "awayjs-display/lib/events/RenderableEvent",
    "awayjs-renderergl/lib/renderables/GL_SkyboxRenderable",
    "skybox",
    "_skybox",
    "../elements/GL_SkyboxElements",
    "awayjs-renderergl/lib/renderables",
    "GL_BillboardRenderable_1",
    "GL_GraphicRenderable_1",
    "GL_LineSegmentRenderable_1",
    "GL_SkyboxRenderable_1",
    "./renderables/GL_BillboardRenderable",
    "./renderables/GL_GraphicRenderable",
    "./renderables/GL_LineSegmentRenderable",
    "./renderables/GL_RenderableBase",
    "./renderables/GL_SkyboxRenderable",
    "awayjs-renderergl/lib/shaders/LightingShader",
    "LightSources_1",
    "ContextGLProfile_1",
    "ShaderBase_1",
    "LightingCompiler_1",
    "LightingShader",
    "lightingPass",
    "_includeCasters",
    "_lightingPass",
    "numPointLights",
    "numDirectionalLights",
    "numLightProbes",
    "numAllLights",
    "diffuseLightSources",
    "_iUsesDiffuse",
    "specularLightSources",
    "_iUsesSpecular",
    "combinedLightSources",
    "usesLightFallOff",
    "enableLightFallOff",
    "ContextGLProfile",
    "BASELINE_CONSTRAINED",
    "usesCommonData",
    "numLights",
    "usesLights",
    "LightSources",
    "LIGHTS",
    "usesProbes",
    "PROBES",
    "usesLightsForSpecular",
    "usesProbesForSpecular",
    "usesLightsForDiffuse",
    "usesProbesForDiffuse",
    "usesShadows",
    "_iUsesShadows",
    "createCompiler",
    "LightingCompiler",
    "lightPicker",
    "collectLights",
    "updateProbes",
    "dirLight",
    "pointLight",
    "dirPos",
    "numLightTypes",
    "ambientR",
    "ambientG",
    "ambientB",
    "lightVertexConstantIndex",
    "lightFragmentConstantIndex",
    "cast",
    "dirLights",
    "directionalLights",
    "directionalLightsOffset",
    "castingDirectionalLights",
    "sceneDirection",
    "_iAmbientR",
    "_iAmbientG",
    "_iAmbientB",
    "usesTangentSpace",
    "_pInverseSceneMatrix",
    "_iDiffuseR",
    "_iDiffuseG",
    "_iDiffuseB",
    "_iSpecularR",
    "_iSpecularG",
    "_iSpecularB",
    "pointLights",
    "pointLightsOffset",
    "castingPointLights",
    "usesGlobalPosFragment",
    "_pRadius",
    "_pFallOffFactor",
    "probe",
    "lightProbes",
    "lightProbeWeights",
    "lightProbesOffset",
    "addDiff",
    "addSpec",
    "diffuseMap",
    "lightProbeDiffuseIndices",
    "diffuseSampler",
    "mipmap",
    "specularMap",
    "lightProbeSpecularIndices",
    "probeWeightsIndex",
    "../shaders/ShaderBase",
    "../shaders/compilers/LightingCompiler",
    "awayjs-display/lib/materials/LightSources",
    "awayjs-stagegl/lib/base/ContextGLProfile",
    "awayjs-renderergl/lib/shaders/RegisterPool",
    "RegisterPool",
    "regCount",
    "persistent",
    "_regName",
    "_regCount",
    "_persistent",
    "initRegisters",
    "requestFreeVectorReg",
    "isRegisterUsed",
    "_usedVectorCount",
    "_vectorRegisters",
    "requestFreeRegComponent",
    "_usedSingleCount",
    "_registerComponents",
    "addUsage",
    "register",
    "usageCount",
    "_component",
    "removeUsage",
    "hasRegisteredRegs",
    "hash",
    "_initPool",
    "_regPool",
    "_regCompsPool",
    "_initArray",
    "vectorRegisters",
    "registerComponents",
    "val",
    "../shaders/ShaderRegisterElement",
    "awayjs-renderergl/lib/shaders/ShaderBase",
    "BlendMode_1",
    "ArgumentError_1",
    "ContextGLTriangleFace_1",
    "CompilerBase_1",
    "_blendFactorSource",
    "_blendFactorDest",
    "_invalidProgram",
    "_animationVertexCode",
    "_animationFragmentCode",
    "usesBlending",
    "useImageRect",
    "usesCurves",
    "depthCompareMode",
    "writeDepth",
    "_defaultCulling",
    "ContextGLTriangleFace",
    "BACK",
    "usesPositionFragment",
    "imageIndices",
    "_elementsClass",
    "_updateProgram",
    "_programData",
    "_usesAnimation",
    "_numUsedVertexConstants",
    "_numUsedFragmentConstants",
    "gl_assetClass",
    "CompilerBase",
    "viewDirDependencies",
    "uvDependencies",
    "secondaryUVDependencies",
    "outputsTangentNormals",
    "pInitRegisterIndices",
    "commonsDataIndex",
    "cameraPositionIndex",
    "uvMatrixIndex",
    "colorTransformIndex",
    "sceneNormalMatrixIndex",
    "initConstantData",
    "numUsedFragmentConstants",
    "_iInitConstantData",
    "usesAnimation",
    "setBlendMode",
    "BlendMode",
    "NORMAL",
    "LAYER",
    "SOURCE_ALPHA",
    "ONE_MINUS_SOURCE_ALPHA",
    "MULTIPLY",
    "SOURCE_COLOR",
    "ADD",
    "ALPHA",
    "ArgumentError",
    "setCulling",
    "useBothSides",
    "NONE",
    "coordinateSystem",
    "usesColorTransform",
    "colorTransform",
    "_iAssignedColorTransform",
    "compiler",
    "compile",
    "_calcAnimationCode",
    "_pRegisterCache",
    "_pSharedRegisters",
    "getProgramData",
    "vertexCode",
    "fragmentCode",
    "postAnimationFragmentCode",
    "rawData",
    "setFragmentConst",
    "../shaders/compilers/CompilerBase",
    "awayjs-core/lib/errors/ArgumentError",
    "awayjs-core/lib/image/BlendMode",
    "awayjs-stagegl/lib/base/ContextGLTriangleFace",
    "awayjs-renderergl/lib/shaders/ShaderRegisterCache",
    "RegisterPool_1",
    "_numUsedVaryings",
    "_profile",
    "_fragmentTempCache",
    "_vertexTempCache",
    "_varyingCache",
    "_textureCache",
    "_vertexAttributesCache",
    "_fragmentConstantsCache",
    "_vertexConstantsCache",
    "_fragmentOutputRegister",
    "_vertexOutputRegister",
    "removeFragmentTempUsage",
    "getFreeFragmentSingleTemp",
    "../shaders/RegisterPool",
    "awayjs-renderergl/lib/shaders/ShaderRegisterData",
    "ShaderRegisterData",
    "awayjs-renderergl/lib/shaders/ShaderRegisterElement",
    "component",
    "_index",
    "_toStr",
    "COMPONENTS",
    "awayjs-renderergl/lib/shaders/compilers/CompilerBase",
    "ShaderRegisterData_1",
    "_pVertexCode",
    "_pFragmentCode",
    "_pPostAnimationFragmentCode",
    "_pElementsClass",
    "_pRenderPass",
    "_pShader",
    "pCompileDependencies",
    "compileColorTransformCode",
    "fragmentOutputRegister",
    "ct1",
    "ct2",
    "compileGlobalPositionCode",
    "compilePositionCode",
    "compileCurvesCode",
    "compileUVCode",
    "compileSecondaryUVCode",
    "compileNormalCode",
    "compileViewDirCode",
    "_iGetPreLightingVertexCode",
    "_iGetPreLightingFragmentCode",
    "globalPositionVarying",
    "positionVarying",
    "curvesInput",
    "curvesVarying",
    "uvAttributeReg",
    "varying",
    "uvVarying",
    "uvTransform1",
    "uvTransform2",
    "secondaryUVVarying",
    "cameraPositionReg",
    "viewDirVarying",
    "viewDirFragment",
    "animatedTangent",
    "normalFragment",
    "_iGetNormalVertexCode",
    "_iGetNormalFragmentCode",
    "normalMatrix",
    "normalVarying",
    "animatedNormal",
    "bitangent",
    "tangentVarying",
    "bitangentVarying",
    "normalInput",
    "commons",
    "tangentInput",
    "colorInput",
    "colorVarying",
    "../../shaders/ShaderRegisterData",
    "awayjs-renderergl/lib/shaders/compilers/LightingCompiler",
    "shaderLightingObject",
    "_shaderLightingObject",
    "pCompileShadowCode",
    "initLightRegisters",
    "compileLightCode",
    "compileLightProbeCode",
    "_iGetPostLightingVertexCode",
    "_iGetPostLightingFragmentCode",
    "shadowTarget",
    "_dirLightVertexConstants",
    "_pointLightVertexConstants",
    "_dirLightFragmentConstants",
    "_pointLightFragmentConstants",
    "diffuseColorReg",
    "specularColorReg",
    "lightPosReg",
    "lightDirReg",
    "vertexRegIndex",
    "fragmentRegIndex",
    "lightVarying",
    "_iGetPerLightDiffuseFragmentCode",
    "_iGetPerLightSpecularFragmentCode",
    "weightReg",
    "weightComponents",
    "weightRegisters",
    "texReg",
    "_pNumProbeRegisters",
    "_iGetPerProbeDiffuseFragmentCode",
    "_iGetPerProbeSpecularFragmentCode",
    "ceil",
    "../../shaders/compilers/CompilerBase",
    "awayjs-renderergl/lib/shaders",
    "LightingShader_1",
    "./shaders/LightingShader",
    "./shaders/RegisterPool",
    "./shaders/ShaderBase",
    "./shaders/ShaderRegisterCache",
    "./shaders/ShaderRegisterData",
    "./shaders/ShaderRegisterElement",
    "./shaders/compilers/CompilerBase",
    "./shaders/compilers/LightingCompiler",
    "awayjs-renderergl/lib/sort/IEntitySorter",
    "awayjs-renderergl/lib/sort/RenderableMergeSort",
    "headB",
    "fast",
    "slow",
    "result",
    "curr",
    "cmp",
    "aid",
    "bid",
    "ma",
    "mb",
    "awayjs-renderergl/lib/sort/RenderableNullSort",
    "RenderableNullSort",
    "awayjs-renderergl/lib/sort",
    "RenderableNullSort_1",
    "./sort/RenderableNullSort",
    "awayjs-renderergl/lib/surfaces/GL_BasicMaterialSurface",
    "BasicMaterialPass_1",
    "GL_SurfaceBase_1",
    "renderPool",
    "_material",
    "_pAddPass",
    "BasicMaterialPass",
    "_pUpdateRender",
    "_pRequiresBlending",
    "alphaBlending",
    "preserveAlpha",
    "GL_SurfaceBase",
    "../surfaces/GL_SurfaceBase",
    "../surfaces/passes/BasicMaterialPass",
    "awayjs-renderergl/lib/surfaces/GL_DepthSurface",
    "GL_SurfacePassBase_1",
    "_shader",
    "invalidate",
    "_textureVO",
    "_fragmentConstantsIndex",
    "targetReg",
    "dataReg1",
    "dataReg2",
    "albedo",
    "cutOffReg",
    "GL_SurfacePassBase",
    "../surfaces/GL_SurfacePassBase",
    "awayjs-renderergl/lib/surfaces/GL_DistanceSurface",
    "awayjs-renderergl/lib/surfaces/GL_SkyboxSurface",
    "_texture",
    "awayjs-renderergl/lib/surfaces/GL_SurfaceBase",
    "SurfaceEvent_1",
    "MaterialBase_1",
    "_forceSeparateMVP",
    "_invalidAnimation",
    "_invalidRender",
    "_invalidImages",
    "_passes",
    "_imageIndices",
    "_onInvalidateAnimationDelegate",
    "onInvalidateAnimation",
    "_onInvalidatePassesDelegate",
    "onInvalidatePasses",
    "SurfaceEvent",
    "INVALIDATE_ANIMATION",
    "INVALIDATE_PASSES",
    "_onPassInvalidateDelegate",
    "onPassInvalidate",
    "_updateAnimation",
    "_renderOrderId",
    "_updateImages",
    "_numImages",
    "imageRect",
    "curves",
    "MaterialBase",
    "useAlphaPremultiplied",
    "alphaPremultiplied",
    "bothSides",
    "animateUVs",
    "useColorTransform",
    "onInvalidate",
    "_getEnabledGPUAnimation",
    "mult",
    "iOwners",
    "numOwners",
    "getDefaultImage2D",
    "_pRemovePass",
    "_pClearPasses",
    "../events/PassEvent",
    "awayjs-display/lib/events/SurfaceEvent",
    "awayjs-display/lib/materials/MaterialBase",
    "awayjs-renderergl/lib/surfaces/GL_SurfacePassBase",
    "awayjs-renderergl/lib/surfaces/ISurfaceClassGL",
    "awayjs-renderergl/lib/surfaces/SurfacePool",
    "awayjs-renderergl/lib/surfaces/passes/BasicMaterialPass",
    "PassBase_1",
    "_diffuseR",
    "_diffuseG",
    "_diffuseB",
    "_diffuseA",
    "regCache",
    "sharedReg",
    "alphaReg",
    "diffuseInputReg",
    "_render",
    "PassBase",
    "../../shaders/ShaderBase",
    "../../surfaces/passes/PassBase",
    "awayjs-renderergl/lib/surfaces/passes/ILightingPass",
    "awayjs-renderergl/lib/surfaces/passes/IPass",
    "awayjs-renderergl/lib/surfaces/passes/PassBase",
    "_preserveAlpha",
    "../../events/PassEvent",
    "awayjs-renderergl/lib/surfaces",
    "GL_BasicMaterialSurface_1",
    "GL_SkyboxSurface_1",
    "./surfaces/GL_BasicMaterialSurface",
    "./surfaces/GL_SkyboxSurface",
    "./surfaces/GL_SurfaceBase",
    "./surfaces/GL_SurfacePassBase",
    "./surfaces/passes/BasicMaterialPass",
    "./surfaces/passes/PassBase",
    "awayjs-renderergl/lib/textures/GL_Single2DTexture",
    "MappingMode_1",
    "GL_TextureBase_1",
    "single2DTexture",
    "_single2DTexture",
    "inputReg",
    "wrap",
    "mappingMode",
    "MappingMode",
    "RADIAL_GRADIENT",
    "samplerReg",
    "_samplerIndex",
    "_imageIndex",
    "textureReg",
    "getTextureReg",
    "_textureIndex",
    "_sampler",
    "GL_TextureBase",
    "../textures/GL_TextureBase",
    "awayjs-display/lib/textures/MappingMode",
    "awayjs-renderergl/lib/textures/GL_SingleCubeTexture",
    "singleCubeTexture",
    "_singleCubeTexture",
    "includeInput",
    "awayjs-renderergl/lib/textures/GL_TextureBase",
    "ContextGLTextureFormat_1",
    "imageIndex",
    "getFormatString",
    "ContextGLTextureFormat",
    "COMPRESSED",
    "COMPRESSED_ALPHA",
    "awayjs-stagegl/lib/base/ContextGLTextureFormat",
    "awayjs-renderergl/lib/textures",
    "GL_Single2DTexture_1",
    "GL_SingleCubeTexture_1",
    "./textures/GL_Single2DTexture",
    "./textures/GL_SingleCubeTexture",
    "./textures/GL_TextureBase",
    "awayjs-renderergl/lib/tools/commands/Merge",
    "Sprite_1",
    "Merge",
    "keepMaterial",
    "disposeSources",
    "objectSpace",
    "_keepMaterial",
    "_disposeSources",
    "_objectSpace",
    "applyToContainer",
    "receiver",
    "objectContainer",
    "parseContainer",
    "collect",
    "merge",
    "applyToSpritees",
    "sprites",
    "_toDispose",
    "_graphicVOs",
    "destSprite",
    "destGraphics",
    "useSubMaterials",
    "vertices",
    "addGraphic",
    "subIdx",
    "calc",
    "iIdx",
    "vIdx",
    "nIdx",
    "tIdx",
    "uIdx",
    "ind",
    "pd",
    "nd",
    "td",
    "ud",
    "getGraphicData",
    "transformVectors",
    "deltaTransformVectors",
    "GraphicVO",
    "object",
    "child",
    "Sprite",
    "getChildAt",
    "awayjs-display/lib/display/Sprite",
    "awayjs-renderergl/lib/tools/data/ParticleGraphicsTransform",
    "ParticleGraphicsTransform",
    "_defaultVertexTransform",
    "_defaultInvVertexTransform",
    "transpose",
    "_defaultUVTransform",
    "awayjs-renderergl/lib/tools",
    "Merge_1",
    "ParticleGraphicsTransform_1",
    "./tools/commands/Merge",
    "./tools/data/ParticleGraphicsTransform",
    "awayjs-renderergl/lib/utils/ParticleGraphicsHelper",
    "ParticleData_1",
    "ParticleGraphicsHelper",
    "generateGraphics",
    "output",
    "graphicsArray",
    "transforms",
    "indicesVector",
    "positionsVector",
    "normalsVector",
    "tangentsVector",
    "uvsVector",
    "vertexCounters",
    "elementsArray",
    "sourceGraphics",
    "numGraphics",
    "vertexCounter",
    "sub2SubMap",
    "tempVertex",
    "tempNormal",
    "tempTangents",
    "tempUV",
    "MAX_VERTEX",
    "particleData",
    "ParticleData",
    "tempLen",
    "compact",
    "product",
    "sourceUVs",
    "particleGraphicsTransform",
    "vertexTransform",
    "invVertexTransform",
    "UVTransform",
    "deltaTransformVector",
    "transformPoint",
    "sourceIndices",
    "awayjs-display/lib/animators/data/ParticleData",
    "awayjs-renderergl/lib/utils/PerspectiveMatrix3D",
    "PerspectiveMatrix3D",
    "perspectiveFieldOfViewLH",
    "fieldOfViewY",
    "aspectRatio",
    "zNear",
    "zFar",
    "yScale",
    "tan",
    "xScale",
    "awayjs-renderergl/lib/utils",
    "ParticleGraphicsHelper_1",
    "PerspectiveMatrix3D_1",
    "./utils/ParticleGraphicsHelper",
    "./utils/PerspectiveMatrix3D"
  ],
  "mappings": "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",
  "file": "awayjs-renderergl.min.js",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\nvar animators = require(\"./lib/animators\");\nexports.animators = animators;\nvar elements = require(\"./lib/elements\");\nexports.elements = elements;\nvar errors = require(\"./lib/errors\");\nexports.errors = errors;\nvar events = require(\"./lib/events\");\nexports.events = events;\nvar filters = require(\"./lib/filters\");\nexports.filters = filters;\nvar managers = require(\"./lib/managers\");\nexports.managers = managers;\nvar renderables = require(\"./lib/renderables\");\nexports.renderables = renderables;\nvar shaders = require(\"./lib/shaders\");\nexports.shaders = shaders;\nvar sort = require(\"./lib/sort\");\nexports.sort = sort;\nvar surfaces = require(\"./lib/surfaces\");\nexports.surfaces = surfaces;\nvar textures = require(\"./lib/textures\");\nexports.textures = textures;\nvar tools = require(\"./lib/tools\");\nexports.tools = tools;\nvar utils = require(\"./lib/utils\");\nexports.utils = utils;\nvar DefaultRenderer_1 = require(\"./lib/DefaultRenderer\");\nexports.DefaultRenderer = DefaultRenderer_1.DefaultRenderer;\nvar DepthRenderer_1 = require(\"./lib/DepthRenderer\");\nexports.DepthRenderer = DepthRenderer_1.DepthRenderer;\nvar DistanceRenderer_1 = require(\"./lib/DistanceRenderer\");\nexports.DistanceRenderer = DistanceRenderer_1.DistanceRenderer;\nvar Filter3DRenderer_1 = require(\"./lib/Filter3DRenderer\");\nexports.Filter3DRenderer = Filter3DRenderer_1.Filter3DRenderer;\nvar RendererBase_1 = require(\"./lib/RendererBase\");\nexports.RendererBase = RendererBase_1.RendererBase;\nvar BasicMaterial_1 = require(\"awayjs-display/lib/materials/BasicMaterial\");\nvar Skybox_1 = require(\"awayjs-display/lib/display/Skybox\");\nvar Billboard_1 = require(\"awayjs-display/lib/display/Billboard\");\nvar LineSegment_1 = require(\"awayjs-display/lib/display/LineSegment\");\nvar LineElements_1 = require(\"awayjs-display/lib/graphics/LineElements\");\nvar TriangleElements_1 = require(\"awayjs-display/lib/graphics/TriangleElements\");\nvar Graphic_1 = require(\"awayjs-display/lib/graphics/Graphic\");\nvar Single2DTexture_1 = require(\"awayjs-display/lib/textures/Single2DTexture\");\nvar SingleCubeTexture_1 = require(\"awayjs-display/lib/textures/SingleCubeTexture\");\nvar Stage_1 = require(\"awayjs-stagegl/lib/base/Stage\");\nsurfaces.SurfacePool.registerAbstraction(surfaces.GL_BasicMaterialSurface, BasicMaterial_1.BasicMaterial);\nsurfaces.SurfacePool.registerAbstraction(surfaces.GL_SkyboxSurface, Skybox_1.Skybox);\nStage_1.Stage.registerAbstraction(elements.GL_LineElements, LineElements_1.LineElements);\nStage_1.Stage.registerAbstraction(elements.GL_TriangleElements, TriangleElements_1.TriangleElements);\nshaders.ShaderBase.registerAbstraction(textures.GL_Single2DTexture, Single2DTexture_1.Single2DTexture);\nshaders.ShaderBase.registerAbstraction(textures.GL_SingleCubeTexture, SingleCubeTexture_1.SingleCubeTexture);\nRendererBase_1.RendererBase.registerAbstraction(renderables.GL_BillboardRenderable, Billboard_1.Billboard);\nRendererBase_1.RendererBase.registerAbstraction(renderables.GL_LineSegmentRenderable, LineSegment_1.LineSegment);\nRendererBase_1.RendererBase.registerAbstraction(renderables.GL_GraphicRenderable, Graphic_1.Graphic);\nRendererBase_1.RendererBase.registerAbstraction(renderables.GL_SkyboxRenderable, Skybox_1.Skybox);\n\n},{\"./lib/DefaultRenderer\":\"awayjs-renderergl/lib/DefaultRenderer\",\"./lib/DepthRenderer\":\"awayjs-renderergl/lib/DepthRenderer\",\"./lib/DistanceRenderer\":\"awayjs-renderergl/lib/DistanceRenderer\",\"./lib/Filter3DRenderer\":\"awayjs-renderergl/lib/Filter3DRenderer\",\"./lib/RendererBase\":\"awayjs-renderergl/lib/RendererBase\",\"./lib/animators\":\"awayjs-renderergl/lib/animators\",\"./lib/elements\":\"awayjs-renderergl/lib/elements\",\"./lib/errors\":\"awayjs-renderergl/lib/errors\",\"./lib/events\":\"awayjs-renderergl/lib/events\",\"./lib/filters\":\"awayjs-renderergl/lib/filters\",\"./lib/managers\":\"awayjs-renderergl/lib/managers\",\"./lib/renderables\":\"awayjs-renderergl/lib/renderables\",\"./lib/shaders\":\"awayjs-renderergl/lib/shaders\",\"./lib/sort\":\"awayjs-renderergl/lib/sort\",\"./lib/surfaces\":\"awayjs-renderergl/lib/surfaces\",\"./lib/textures\":\"awayjs-renderergl/lib/textures\",\"./lib/tools\":\"awayjs-renderergl/lib/tools\",\"./lib/utils\":\"awayjs-renderergl/lib/utils\",\"awayjs-display/lib/display/Billboard\":undefined,\"awayjs-display/lib/display/LineSegment\":undefined,\"awayjs-display/lib/display/Skybox\":undefined,\"awayjs-display/lib/graphics/Graphic\":undefined,\"awayjs-display/lib/graphics/LineElements\":undefined,\"awayjs-display/lib/graphics/TriangleElements\":undefined,\"awayjs-display/lib/materials/BasicMaterial\":undefined,\"awayjs-display/lib/textures/Single2DTexture\":undefined,\"awayjs-display/lib/textures/SingleCubeTexture\":undefined,\"awayjs-stagegl/lib/base/Stage\":undefined}],\"awayjs-renderergl/lib/DefaultRenderer\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar BitmapImage2D_1 = require(\"awayjs-core/lib/image/BitmapImage2D\");\nvar ContextGLClearMask_1 = require(\"awayjs-stagegl/lib/base/ContextGLClearMask\");\nvar RendererBase_1 = require(\"./RendererBase\");\nvar DepthRenderer_1 = require(\"./DepthRenderer\");\nvar DistanceRenderer_1 = require(\"./DistanceRenderer\");\nvar Filter3DRenderer_1 = require(\"./Filter3DRenderer\");\nvar RTTBufferManager_1 = require(\"./managers/RTTBufferManager\");\n/**\n * The DefaultRenderer class provides the default rendering method. It renders the scene graph objects using the\n * materials assigned to them.\n *\n * @class away.render.DefaultRenderer\n */\nvar DefaultRenderer = (function (_super) {\n    __extends(DefaultRenderer, _super);\n    /**\n     * Creates a new DefaultRenderer object.\n     *\n     * @param antiAlias The amount of anti-aliasing to use.\n     * @param renderMode The render mode to use.\n     */\n    function DefaultRenderer(stage, forceSoftware, profile, mode) {\n        if (stage === void 0) { stage = null; }\n        if (forceSoftware === void 0) { forceSoftware = false; }\n        if (profile === void 0) { profile = \"baseline\"; }\n        if (mode === void 0) { mode = \"auto\"; }\n        _super.call(this, stage, null, forceSoftware, profile, mode);\n        this._antiAlias = 0;\n        this._directionalLights = new Array();\n        this._pointLights = new Array();\n        this._lightProbes = new Array();\n        if (stage)\n            this.shareContext = true;\n        this._pRttBufferManager = RTTBufferManager_1.RTTBufferManager.getInstance(this._pStage);\n        this._pDepthRenderer = new DepthRenderer_1.DepthRenderer(this._pStage);\n        this._pDistanceRenderer = new DistanceRenderer_1.DistanceRenderer(this._pStage);\n        if (this._width == 0)\n            this.width = window.innerWidth;\n        else\n            this._pRttBufferManager.viewWidth = this._width;\n        if (this._height == 0)\n            this.height = window.innerHeight;\n        else\n            this._pRttBufferManager.viewHeight = this._height;\n    }\n    Object.defineProperty(DefaultRenderer.prototype, \"antiAlias\", {\n        get: function () {\n            return this._antiAlias;\n        },\n        set: function (value) {\n            if (this._antiAlias == value)\n                return;\n            this._antiAlias = value;\n            this._pBackBufferInvalid = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DefaultRenderer.prototype, \"depthPrepass\", {\n        /**\n         *\n         */\n        get: function () {\n            return this._depthPrepass;\n        },\n        set: function (value) {\n            this._depthPrepass = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DefaultRenderer.prototype, \"filters3d\", {\n        /**\n         *\n         * @returns {*}\n         */\n        get: function () {\n            return this._pFilter3DRenderer ? this._pFilter3DRenderer.filters : null;\n        },\n        set: function (value) {\n            if (value && value.length == 0)\n                value = null;\n            if (this._pFilter3DRenderer && !value) {\n                this._pFilter3DRenderer.dispose();\n                this._pFilter3DRenderer = null;\n            }\n            else if (!this._pFilter3DRenderer && value) {\n                this._pFilter3DRenderer = new Filter3DRenderer_1.Filter3DRenderer(this._pStage);\n                this._pFilter3DRenderer.filters = value;\n            }\n            if (this._pFilter3DRenderer) {\n                this._pFilter3DRenderer.filters = value;\n                this._pRequireDepthRender = this._pFilter3DRenderer.requireDepthRender;\n            }\n            else {\n                this._pRequireDepthRender = false;\n                if (this._pDepthRender) {\n                    this._pDepthRender.dispose();\n                    this._pDepthRender = null;\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     *\n     */\n    DefaultRenderer.prototype.enterNode = function (node) {\n        var enter = _super.prototype.enterNode.call(this, node);\n        if (enter && node.debugVisible)\n            this.applyEntity(node.bounds.boundsPrimitive);\n        return enter;\n    };\n    DefaultRenderer.prototype.render = function (camera, scene) {\n        _super.prototype.render.call(this, camera, scene);\n        if (!this._pStage.recoverFromDisposal()) {\n            this._pBackBufferInvalid = true;\n            return;\n        }\n        if (this._pBackBufferInvalid)\n            this.pUpdateBackBuffer();\n        if (this.shareContext && this._pContext)\n            this._pContext.clear(0, 0, 0, 1, 1, 0, ContextGLClearMask_1.ContextGLClearMask.DEPTH);\n        if (this._pFilter3DRenderer) {\n            this.textureRatioX = this._pRttBufferManager.textureRatioX;\n            this.textureRatioY = this._pRttBufferManager.textureRatioY;\n        }\n        else {\n            this.textureRatioX = 1;\n            this.textureRatioY = 1;\n        }\n        if (this._pRequireDepthRender)\n            this.pRenderSceneDepthToTexture(camera, scene);\n        if (this._depthPrepass)\n            this.pRenderDepthPrepass(camera, scene);\n        //reset lights\n        this._directionalLights.length = 0;\n        this._pointLights.length = 0;\n        this._lightProbes.length = 0;\n        if (this._pFilter3DRenderer && this._pContext) {\n            this._iRender(camera, scene, this._pFilter3DRenderer.getMainInputTexture(this._pStage), this._pRttBufferManager.renderToTextureRect);\n            this._pFilter3DRenderer.render(this._pStage, camera, this._pDepthRender);\n        }\n        else {\n            if (this.shareContext)\n                this._iRender(camera, scene, null, this._pScissorRect);\n            else\n                this._iRender(camera, scene);\n        }\n        if (!this.shareContext && this._pContext)\n            this._pContext.present();\n        // register that a view has been rendered\n        this._pStage.bufferClear = false;\n    };\n    DefaultRenderer.prototype.pExecuteRender = function (camera, target, scissorRect, surfaceSelector) {\n        if (target === void 0) { target = null; }\n        if (scissorRect === void 0) { scissorRect = null; }\n        if (surfaceSelector === void 0) { surfaceSelector = 0; }\n        this.updateLights(camera);\n        _super.prototype.pExecuteRender.call(this, camera, target, scissorRect, surfaceSelector);\n    };\n    DefaultRenderer.prototype.updateLights = function (camera) {\n        var len, i;\n        var light;\n        var shadowMapper;\n        len = this._directionalLights.length;\n        for (i = 0; i < len; ++i) {\n            light = this._directionalLights[i];\n            shadowMapper = light.shadowMapper;\n            if (light.shadowsEnabled && (shadowMapper.autoUpdateShadows || shadowMapper._iShadowsInvalid))\n                shadowMapper.iRenderDepthMap(camera, light.scene, this._pDepthRenderer);\n        }\n        len = this._pointLights.length;\n        for (i = 0; i < len; ++i) {\n            light = this._pointLights[i];\n            shadowMapper = light.shadowMapper;\n            if (light.shadowsEnabled && (shadowMapper.autoUpdateShadows || shadowMapper._iShadowsInvalid))\n                shadowMapper.iRenderDepthMap(camera, light.scene, this._pDistanceRenderer);\n        }\n    };\n    /**\n     *\n     * @param entity\n     */\n    DefaultRenderer.prototype.applyDirectionalLight = function (entity) {\n        this._directionalLights.push(entity);\n    };\n    /**\n     *\n     * @param entity\n     */\n    DefaultRenderer.prototype.applyLightProbe = function (entity) {\n        this._lightProbes.push(entity);\n    };\n    /**\n     *\n     * @param entity\n     */\n    DefaultRenderer.prototype.applyPointLight = function (entity) {\n        this._pointLights.push(entity);\n    };\n    DefaultRenderer.prototype.dispose = function () {\n        if (!this.shareContext)\n            this._pStage.dispose();\n        this._pRttBufferManager.dispose();\n        this._pRttBufferManager = null;\n        this._pDepthRenderer.dispose();\n        this._pDistanceRenderer.dispose();\n        this._pDepthRenderer = null;\n        this._pDistanceRenderer = null;\n        this._pDepthRender = null;\n        _super.prototype.dispose.call(this);\n    };\n    /**\n     *\n     */\n    DefaultRenderer.prototype.pRenderDepthPrepass = function (camera, scene) {\n        this._pDepthRenderer.disableColor = true;\n        if (this._pFilter3DRenderer) {\n            this._pDepthRenderer.textureRatioX = this._pRttBufferManager.textureRatioX;\n            this._pDepthRenderer.textureRatioY = this._pRttBufferManager.textureRatioY;\n            this._pDepthRenderer._iRender(camera, scene, this._pFilter3DRenderer.getMainInputTexture(this._pStage), this._pRttBufferManager.renderToTextureRect);\n        }\n        else {\n            this._pDepthRenderer.textureRatioX = 1;\n            this._pDepthRenderer.textureRatioY = 1;\n            this._pDepthRenderer._iRender(camera, scene);\n        }\n        this._pDepthRenderer.disableColor = false;\n    };\n    /**\n     *\n     */\n    DefaultRenderer.prototype.pRenderSceneDepthToTexture = function (camera, scene) {\n        if (this._pDepthTextureInvalid || !this._pDepthRender)\n            this.initDepthTexture(this._pStage.context);\n        this._pDepthRenderer.textureRatioX = this._pRttBufferManager.textureRatioX;\n        this._pDepthRenderer.textureRatioY = this._pRttBufferManager.textureRatioY;\n        this._pDepthRenderer._iRender(camera, scene, this._pDepthRender);\n    };\n    /**\n     * Updates the backbuffer dimensions.\n     */\n    DefaultRenderer.prototype.pUpdateBackBuffer = function () {\n        // No reason trying to configure back buffer if there is no context available.\n        // Doing this anyway (and relying on _stage to cache width/height for\n        // context does get available) means usesSoftwareRendering won't be reliable.\n        if (this._pStage.context && !this.shareContext) {\n            if (this._width && this._height) {\n                this._pStage.configureBackBuffer(this._width, this._height, this._antiAlias, true);\n                this._pBackBufferInvalid = false;\n            }\n        }\n    };\n    /**\n     *\n     */\n    DefaultRenderer.prototype.initDepthTexture = function (context) {\n        this._pDepthTextureInvalid = false;\n        if (this._pDepthRender)\n            this._pDepthRender.dispose();\n        this._pDepthRender = new BitmapImage2D_1.BitmapImage2D(this._pRttBufferManager.textureWidth, this._pRttBufferManager.textureHeight);\n    };\n    return DefaultRenderer;\n}(RendererBase_1.RendererBase));\nexports.DefaultRenderer = DefaultRenderer;\n\n},{\"./DepthRenderer\":\"awayjs-renderergl/lib/DepthRenderer\",\"./DistanceRenderer\":\"awayjs-renderergl/lib/DistanceRenderer\",\"./Filter3DRenderer\":\"awayjs-renderergl/lib/Filter3DRenderer\",\"./RendererBase\":\"awayjs-renderergl/lib/RendererBase\",\"./managers/RTTBufferManager\":\"awayjs-renderergl/lib/managers/RTTBufferManager\",\"awayjs-core/lib/image/BitmapImage2D\":undefined,\"awayjs-stagegl/lib/base/ContextGLClearMask\":undefined}],\"awayjs-renderergl/lib/DepthRenderer\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar RendererBase_1 = require(\"./RendererBase\");\nvar GL_DepthSurface_1 = require(\"./surfaces/GL_DepthSurface\");\n/**\n * The DepthRenderer class renders 32-bit depth information encoded as RGBA\n *\n * @class away.render.DepthRenderer\n */\nvar DepthRenderer = (function (_super) {\n    __extends(DepthRenderer, _super);\n    /**\n     * Creates a new DepthRenderer object.\n     * @param renderBlended Indicates whether semi-transparent objects should be rendered.\n     * @param distanceBased Indicates whether the written depth value is distance-based or projected depth-based\n     */\n    function DepthRenderer(stage) {\n        if (stage === void 0) { stage = null; }\n        _super.call(this, stage, GL_DepthSurface_1.GL_DepthSurface);\n        this._iBackgroundR = 1;\n        this._iBackgroundG = 1;\n        this._iBackgroundB = 1;\n    }\n    /**\n     *\n     */\n    DepthRenderer.prototype.enterNode = function (node) {\n        var enter = node._iCollectionMark != RendererBase_1.RendererBase._iCollectionMark && node.isCastingShadow();\n        if (!enter) {\n            node._iCollectionMark = RendererBase_1.RendererBase._iCollectionMark;\n            return false;\n        }\n        return _super.prototype.enterNode.call(this, node);\n    };\n    return DepthRenderer;\n}(RendererBase_1.RendererBase));\nexports.DepthRenderer = DepthRenderer;\n\n},{\"./RendererBase\":\"awayjs-renderergl/lib/RendererBase\",\"./surfaces/GL_DepthSurface\":\"awayjs-renderergl/lib/surfaces/GL_DepthSurface\"}],\"awayjs-renderergl/lib/DistanceRenderer\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar RendererBase_1 = require(\"./RendererBase\");\nvar GL_DistanceSurface_1 = require(\"./surfaces/GL_DistanceSurface\");\n/**\n * The DistanceRenderer class renders 32-bit depth information encoded as RGBA\n *\n * @class away.render.DistanceRenderer\n */\nvar DistanceRenderer = (function (_super) {\n    __extends(DistanceRenderer, _super);\n    /**\n     * Creates a new DistanceRenderer object.\n     * @param renderBlended Indicates whether semi-transparent objects should be rendered.\n     * @param distanceBased Indicates whether the written depth value is distance-based or projected depth-based\n     */\n    function DistanceRenderer(stage) {\n        if (stage === void 0) { stage = null; }\n        _super.call(this, stage, GL_DistanceSurface_1.GL_DistanceSurface);\n        this._iBackgroundR = 1;\n        this._iBackgroundG = 1;\n        this._iBackgroundB = 1;\n    }\n    /**\n     *\n     */\n    DistanceRenderer.prototype.enterNode = function (node) {\n        var enter = node._iCollectionMark != RendererBase_1.RendererBase._iCollectionMark && node.isCastingShadow();\n        if (!enter) {\n            node._iCollectionMark = RendererBase_1.RendererBase._iCollectionMark;\n            return false;\n        }\n        return _super.prototype.enterNode.call(this, node);\n    };\n    return DistanceRenderer;\n}(RendererBase_1.RendererBase));\nexports.DistanceRenderer = DistanceRenderer;\n\n},{\"./RendererBase\":\"awayjs-renderergl/lib/RendererBase\",\"./surfaces/GL_DistanceSurface\":\"awayjs-renderergl/lib/surfaces/GL_DistanceSurface\"}],\"awayjs-renderergl/lib/Filter3DRenderer\":[function(require,module,exports){\n\"use strict\";\nvar ContextGLDrawMode_1 = require(\"awayjs-stagegl/lib/base/ContextGLDrawMode\");\nvar ContextGLBlendFactor_1 = require(\"awayjs-stagegl/lib/base/ContextGLBlendFactor\");\nvar ContextGLVertexBufferFormat_1 = require(\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\");\nvar RTTEvent_1 = require(\"./events/RTTEvent\");\nvar RTTBufferManager_1 = require(\"./managers/RTTBufferManager\");\n/**\n * @class away.render.Filter3DRenderer\n */\nvar Filter3DRenderer = (function () {\n    function Filter3DRenderer(stage) {\n        var _this = this;\n        this._filterSizesInvalid = true;\n        this._onRTTResizeDelegate = function (event) { return _this.onRTTResize(event); };\n        this._stage = stage;\n        this._rttManager = RTTBufferManager_1.RTTBufferManager.getInstance(stage);\n        this._rttManager.addEventListener(RTTEvent_1.RTTEvent.RESIZE, this._onRTTResizeDelegate);\n    }\n    Filter3DRenderer.prototype.onRTTResize = function (event) {\n        this._filterSizesInvalid = true;\n    };\n    Object.defineProperty(Filter3DRenderer.prototype, \"requireDepthRender\", {\n        get: function () {\n            return this._requireDepthRender;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Filter3DRenderer.prototype.getMainInputTexture = function (stage) {\n        if (this._filterTasksInvalid)\n            this.updateFilterTasks(stage);\n        return this._mainInputTexture;\n    };\n    Object.defineProperty(Filter3DRenderer.prototype, \"filters\", {\n        get: function () {\n            return this._filters;\n        },\n        set: function (value) {\n            this._filters = value;\n            this._filterTasksInvalid = true;\n            this._requireDepthRender = false;\n            if (!this._filters)\n                return;\n            for (var i = 0; i < this._filters.length; ++i)\n                if (this._filters[i].requireDepthRender)\n                    this._requireDepthRender = true;\n            this._filterSizesInvalid = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Filter3DRenderer.prototype.updateFilterTasks = function (stage) {\n        var len;\n        if (this._filterSizesInvalid)\n            this.updateFilterSizes();\n        if (!this._filters) {\n            this._tasks = null;\n            return;\n        }\n        this._tasks = new Array();\n        len = this._filters.length - 1;\n        var filter;\n        for (var i = 0; i <= len; ++i) {\n            // make sure all internal tasks are linked together\n            filter = this._filters[i];\n            filter.setRenderTargets(i == len ? null : this._filters[i + 1].getMainInputTexture(stage), stage);\n            this._tasks = this._tasks.concat(filter.tasks);\n        }\n        this._mainInputTexture = this._filters[0].getMainInputTexture(stage);\n    };\n    Filter3DRenderer.prototype.render = function (stage, camera, depthTexture) {\n        var len;\n        var i;\n        var task;\n        var context = stage.context;\n        var indexBuffer = this._rttManager.indexBuffer;\n        var vertexBuffer = this._rttManager.renderToTextureVertexBuffer;\n        if (!this._filters)\n            return;\n        if (this._filterSizesInvalid)\n            this.updateFilterSizes();\n        if (this._filterTasksInvalid)\n            this.updateFilterTasks(stage);\n        len = this._filters.length;\n        for (i = 0; i < len; ++i)\n            this._filters[i].update(stage, camera);\n        len = this._tasks.length;\n        if (len > 1) {\n            context.setProgram(this._tasks[0].getProgram(stage));\n            context.setVertexBufferAt(this._tasks[0]._positionIndex, vertexBuffer, 0, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_2);\n            context.setVertexBufferAt(this._tasks[0]._uvIndex, vertexBuffer, 8, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_2);\n        }\n        for (i = 0; i < len; ++i) {\n            task = this._tasks[i];\n            stage.setRenderTarget(task.target);\n            context.setProgram(task.getProgram(stage));\n            stage.getAbstraction(task.getMainInputTexture(stage)).activate(task._inputTextureIndex, false);\n            if (!task.target) {\n                stage.scissorRect = null;\n                vertexBuffer = this._rttManager.renderToScreenVertexBuffer;\n                context.setVertexBufferAt(task._positionIndex, vertexBuffer, 0, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_2);\n                context.setVertexBufferAt(task._uvIndex, vertexBuffer, 8, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_2);\n            }\n            context.clear(0.0, 0.0, 0.0, 0.0);\n            task.activate(stage, camera, depthTexture);\n            context.setBlendFactors(ContextGLBlendFactor_1.ContextGLBlendFactor.ONE, ContextGLBlendFactor_1.ContextGLBlendFactor.ZERO);\n            context.drawIndices(ContextGLDrawMode_1.ContextGLDrawMode.TRIANGLES, indexBuffer, 0, 6);\n            task.deactivate(stage);\n        }\n        context.setTextureAt(0, null);\n        context.setVertexBufferAt(0, null);\n        context.setVertexBufferAt(1, null);\n    };\n    Filter3DRenderer.prototype.updateFilterSizes = function () {\n        for (var i = 0; i < this._filters.length; ++i) {\n            this._filters[i].textureWidth = this._rttManager.textureWidth;\n            this._filters[i].textureHeight = this._rttManager.textureHeight;\n            this._filters[i].rttManager = this._rttManager;\n        }\n        this._filterSizesInvalid = true;\n    };\n    Filter3DRenderer.prototype.dispose = function () {\n        this._rttManager.removeEventListener(RTTEvent_1.RTTEvent.RESIZE, this._onRTTResizeDelegate);\n        this._rttManager = null;\n        this._stage = null;\n    };\n    return Filter3DRenderer;\n}());\nexports.Filter3DRenderer = Filter3DRenderer;\n\n},{\"./events/RTTEvent\":\"awayjs-renderergl/lib/events/RTTEvent\",\"./managers/RTTBufferManager\":\"awayjs-renderergl/lib/managers/RTTBufferManager\",\"awayjs-stagegl/lib/base/ContextGLBlendFactor\":undefined,\"awayjs-stagegl/lib/base/ContextGLDrawMode\":undefined,\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\":undefined}],\"awayjs-renderergl/lib/RendererBase\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Matrix3D_1 = require(\"awayjs-core/lib/geom/Matrix3D\");\nvar Matrix3DUtils_1 = require(\"awayjs-core/lib/geom/Matrix3DUtils\");\nvar Point_1 = require(\"awayjs-core/lib/geom/Point\");\nvar Rectangle_1 = require(\"awayjs-core/lib/geom/Rectangle\");\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\nvar EventDispatcher_1 = require(\"awayjs-core/lib/events/EventDispatcher\");\nvar RendererEvent_1 = require(\"awayjs-display/lib/events/RendererEvent\");\nvar AGALMiniAssembler_1 = require(\"awayjs-stagegl/lib/aglsl/assembler/AGALMiniAssembler\");\nvar ContextGLBlendFactor_1 = require(\"awayjs-stagegl/lib/base/ContextGLBlendFactor\");\nvar ContextGLCompareMode_1 = require(\"awayjs-stagegl/lib/base/ContextGLCompareMode\");\nvar StageEvent_1 = require(\"awayjs-stagegl/lib/events/StageEvent\");\nvar StageManager_1 = require(\"awayjs-stagegl/lib/managers/StageManager\");\nvar SurfacePool_1 = require(\"./surfaces/SurfacePool\");\nvar RenderableMergeSort_1 = require(\"./sort/RenderableMergeSort\");\n/**\n * RendererBase forms an abstract base class for classes that are used in the rendering pipeline to render the\n * contents of a partition\n *\n * @class away.render.RendererBase\n */\nvar RendererBase = (function (_super) {\n    __extends(RendererBase, _super);\n    /**\n     * Creates a new RendererBase object.\n     */\n    function RendererBase(stage, surfaceClassGL, forceSoftware, profile, mode) {\n        var _this = this;\n        if (stage === void 0) { stage = null; }\n        if (surfaceClassGL === void 0) { surfaceClassGL = null; }\n        if (forceSoftware === void 0) { forceSoftware = false; }\n        if (profile === void 0) { profile = \"baseline\"; }\n        if (mode === void 0) { mode = \"auto\"; }\n        _super.call(this);\n        this._objectPools = new Object();\n        this._abstractionPool = new Object();\n        this._activeMasksConfig = new Array();\n        this._registeredMasks = new Array();\n        this._numUsedStreams = 0;\n        this._numUsedTextures = 0;\n        this._cameraForward = new Vector3D_1.Vector3D();\n        this._viewPort = new Rectangle_1.Rectangle();\n        this._pBackBufferInvalid = true;\n        this._pDepthTextureInvalid = true;\n        this._depthPrepass = false;\n        this._backgroundR = 0;\n        this._backgroundG = 0;\n        this._backgroundB = 0;\n        this._backgroundAlpha = 1;\n        this.textureRatioX = 1;\n        this.textureRatioY = 1;\n        this._pRttViewProjectionMatrix = new Matrix3D_1.Matrix3D();\n        this._localPos = new Point_1.Point();\n        this._globalPos = new Point_1.Point();\n        this._pScissorRect = new Rectangle_1.Rectangle();\n        this._pNumElements = 0;\n        this._disableColor = false;\n        this._renderBlended = true;\n        this._numCullPlanes = 0;\n        this._onViewportUpdatedDelegate = function (event) { return _this.onViewportUpdated(event); };\n        this._onContextUpdateDelegate = function (event) { return _this.onContextUpdate(event); };\n        //default sorting algorithm\n        this.renderableSorter = new RenderableMergeSort_1.RenderableMergeSort();\n        //set stage\n        this._pStage = stage || StageManager_1.StageManager.getInstance().getFreeStage(forceSoftware, profile, mode);\n        this._pStage.addEventListener(StageEvent_1.StageEvent.CONTEXT_CREATED, this._onContextUpdateDelegate);\n        this._pStage.addEventListener(StageEvent_1.StageEvent.CONTEXT_RECREATED, this._onContextUpdateDelegate);\n        this._pStage.addEventListener(StageEvent_1.StageEvent.VIEWPORT_UPDATED, this._onViewportUpdatedDelegate);\n        this._surfaceClassGL = surfaceClassGL;\n        /*\n         if (_backgroundImageRenderer)\n         _backgroundImageRenderer.stage = value;\n         */\n        if (this._pStage.context)\n            this._pContext = this._pStage.context;\n    }\n    Object.defineProperty(RendererBase.prototype, \"cullPlanes\", {\n        /**\n         *\n         */\n        get: function () {\n            return this._customCullPlanes;\n        },\n        set: function (value) {\n            this._customCullPlanes = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RendererBase.prototype, \"renderBlended\", {\n        get: function () {\n            return this._renderBlended;\n        },\n        set: function (value) {\n            this._renderBlended = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RendererBase.prototype, \"disableColor\", {\n        get: function () {\n            return this._disableColor;\n        },\n        set: function (value) {\n            this._disableColor = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RendererBase.prototype, \"numElements\", {\n        /**\n         *\n         */\n        get: function () {\n            return this._pNumElements;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RendererBase.prototype, \"viewPort\", {\n        /**\n         * A viewPort rectangle equivalent of the Stage size and position.\n         */\n        get: function () {\n            return this._viewPort;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RendererBase.prototype, \"scissorRect\", {\n        /**\n         * A scissor rectangle equivalent of the view size and position.\n         */\n        get: function () {\n            return this._pScissorRect;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RendererBase.prototype, \"x\", {\n        /**\n         *\n         */\n        get: function () {\n            return this._localPos.x;\n        },\n        set: function (value) {\n            if (this.x == value)\n                return;\n            this._globalPos.x = this._localPos.x = value;\n            this.updateGlobalPos();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RendererBase.prototype, \"y\", {\n        /**\n         *\n         */\n        get: function () {\n            return this._localPos.y;\n        },\n        set: function (value) {\n            if (this.y == value)\n                return;\n            this._globalPos.y = this._localPos.y = value;\n            this.updateGlobalPos();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RendererBase.prototype, \"width\", {\n        /**\n         *\n         */\n        get: function () {\n            return this._width;\n        },\n        set: function (value) {\n            if (this._width == value)\n                return;\n            this._width = value;\n            this._pScissorRect.width = value;\n            if (this._pRttBufferManager)\n                this._pRttBufferManager.viewWidth = value;\n            this._pBackBufferInvalid = true;\n            this._pDepthTextureInvalid = true;\n            this.notifyScissorUpdate();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RendererBase.prototype, \"height\", {\n        /**\n         *\n         */\n        get: function () {\n            return this._height;\n        },\n        set: function (value) {\n            if (this._height == value)\n                return;\n            this._height = value;\n            this._pScissorRect.height = value;\n            if (this._pRttBufferManager)\n                this._pRttBufferManager.viewHeight = value;\n            this._pBackBufferInvalid = true;\n            this._pDepthTextureInvalid = true;\n            this.notifyScissorUpdate();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    RendererBase.prototype.getAbstraction = function (renderable) {\n        return this._abstractionPool[renderable.id] || (this._abstractionPool[renderable.id] = new RendererBase._abstractionClassPool[renderable.assetType](renderable, this));\n    };\n    /**\n     *\n     * @param image\n     */\n    RendererBase.prototype.clearAbstraction = function (renderable) {\n        this._abstractionPool[renderable.id] = null;\n    };\n    /**\n     * //TODO\n     *\n     * @param elementsClass\n     * @returns SurfacePool\n     */\n    RendererBase.prototype.getSurfacePool = function (elements) {\n        return this._objectPools[elements.elementsType] || (this._objectPools[elements.elementsType] = new SurfacePool_1.SurfacePool(elements.elementsClass, this._pStage, this._surfaceClassGL));\n    };\n    /**\n     *\n     * @param imageObjectClass\n     */\n    RendererBase.registerAbstraction = function (renderableClass, assetClass) {\n        RendererBase._abstractionClassPool[assetClass.assetType] = renderableClass;\n    };\n    RendererBase.prototype.activatePass = function (pass, camera) {\n        //clear unused vertex streams\n        var i;\n        for (i = pass.shader.numUsedStreams; i < this._numUsedStreams; i++)\n            this._pContext.setVertexBufferAt(i, null);\n        //clear unused texture streams\n        for (i = pass.shader.numUsedTextures; i < this._numUsedTextures; i++)\n            this._pContext.setTextureAt(i, null);\n        //check program data is uploaded\n        var programData = pass.shader.programData;\n        if (!programData.program) {\n            programData.program = this._pContext.createProgram();\n            var vertexByteCode = (new AGALMiniAssembler_1.AGALMiniAssembler().assemble(\"part vertex 1\\n\" + programData.vertexString + \"endpart\"))['vertex'].data;\n            var fragmentByteCode = (new AGALMiniAssembler_1.AGALMiniAssembler().assemble(\"part fragment 1\\n\" + programData.fragmentString + \"endpart\"))['fragment'].data;\n            programData.program.upload(vertexByteCode, fragmentByteCode);\n        }\n        //set program data\n        this._pContext.setProgram(programData.program);\n        //activate shader object through pass\n        pass._iActivate(camera);\n    };\n    RendererBase.prototype.deactivatePass = function (pass) {\n        //deactivate shader object through pass\n        pass._iDeactivate();\n        this._numUsedStreams = pass.shader.numUsedStreams;\n        this._numUsedTextures = pass.shader.numUsedTextures;\n    };\n    Object.defineProperty(RendererBase.prototype, \"_iBackgroundR\", {\n        /**\n         * The background color's red component, used when clearing.\n         *\n         * @private\n         */\n        get: function () {\n            return this._backgroundR;\n        },\n        set: function (value) {\n            if (this._backgroundR == value)\n                return;\n            this._backgroundR = value;\n            this._pBackBufferInvalid = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RendererBase.prototype, \"_iBackgroundG\", {\n        /**\n         * The background color's green component, used when clearing.\n         *\n         * @private\n         */\n        get: function () {\n            return this._backgroundG;\n        },\n        set: function (value) {\n            if (this._backgroundG == value)\n                return;\n            this._backgroundG = value;\n            this._pBackBufferInvalid = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RendererBase.prototype, \"_iBackgroundB\", {\n        /**\n         * The background color's blue component, used when clearing.\n         *\n         * @private\n         */\n        get: function () {\n            return this._backgroundB;\n        },\n        set: function (value) {\n            if (this._backgroundB == value)\n                return;\n            this._backgroundB = value;\n            this._pBackBufferInvalid = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RendererBase.prototype, \"context\", {\n        get: function () {\n            return this._pContext;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RendererBase.prototype, \"stage\", {\n        /**\n         * The Stage that will provide the ContextGL used for rendering.\n         */\n        get: function () {\n            return this._pStage;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Disposes the resources used by the RendererBase.\n     */\n    RendererBase.prototype.dispose = function () {\n        for (var id in this._abstractionPool)\n            this._abstractionPool[id].clear();\n        this._abstractionPool = null;\n        this._pStage.removeEventListener(StageEvent_1.StageEvent.CONTEXT_CREATED, this._onContextUpdateDelegate);\n        this._pStage.removeEventListener(StageEvent_1.StageEvent.CONTEXT_RECREATED, this._onContextUpdateDelegate);\n        this._pStage.removeEventListener(StageEvent_1.StageEvent.VIEWPORT_UPDATED, this._onViewportUpdatedDelegate);\n        this._pStage = null;\n        this._pContext = null;\n        /*\n         if (_backgroundImageRenderer) {\n         _backgroundImageRenderer.dispose();\n         _backgroundImageRenderer = null;\n         }\n         */\n    };\n    RendererBase.prototype.render = function (camera, scene) {\n        this._viewportDirty = false;\n        this._scissorDirty = false;\n    };\n    /**\n     * Renders the potentially visible geometry to the back buffer or texture.\n     * @param target An option target texture to render to.\n     * @param surfaceSelector The index of a CubeTexture's face to render to.\n     * @param additionalClearMask Additional clear mask information, in case extra clear channels are to be omitted.\n     */\n    RendererBase.prototype._iRender = function (camera, scene, target, scissorRect, surfaceSelector) {\n        if (target === void 0) { target = null; }\n        if (scissorRect === void 0) { scissorRect = null; }\n        if (surfaceSelector === void 0) { surfaceSelector = 0; }\n        //TODO refactor setTarget so that rendertextures are created before this check\n        if (!this._pStage || !this._pContext)\n            return;\n        //reset head values\n        this._pBlendedRenderableHead = null;\n        this._pOpaqueRenderableHead = null;\n        this._pNumElements = 0;\n        this._cullPlanes = this._customCullPlanes ? this._customCullPlanes : camera.frustumPlanes;\n        this._numCullPlanes = this._cullPlanes ? this._cullPlanes.length : 0;\n        this._cameraPosition = camera.scenePosition;\n        this._cameraTransform = camera.sceneTransform;\n        this._cameraForward = Matrix3DUtils_1.Matrix3DUtils.getForward(camera.sceneTransform, this._cameraForward);\n        RendererBase._iCollectionMark++;\n        scene.traversePartitions(this);\n        //sort the resulting renderables\n        if (this.renderableSorter) {\n            this._pOpaqueRenderableHead = this.renderableSorter.sortOpaqueRenderables(this._pOpaqueRenderableHead);\n            this._pBlendedRenderableHead = this.renderableSorter.sortBlendedRenderables(this._pBlendedRenderableHead);\n        }\n        this._pRttViewProjectionMatrix.copyFrom(camera.viewProjection);\n        this._pRttViewProjectionMatrix.appendScale(this.textureRatioX, this.textureRatioY, 1);\n        this.pExecuteRender(camera, target, scissorRect, surfaceSelector);\n        // generate mip maps on target (if target exists) //TODO\n        //if (target)\n        //\t(<Texture>target).generateMipmaps();\n        // clear buffers\n        for (var i = 0; i < 8; ++i) {\n            this._pContext.setVertexBufferAt(i, null);\n            this._pContext.setTextureAt(i, null);\n        }\n    };\n    RendererBase.prototype._iRenderCascades = function (camera, scene, target, numCascades, scissorRects, cameras) {\n        this._pStage.setRenderTarget(target, true, 0);\n        this._pContext.clear(1, 1, 1, 1, 1, 0);\n        this._pContext.setBlendFactors(ContextGLBlendFactor_1.ContextGLBlendFactor.ONE, ContextGLBlendFactor_1.ContextGLBlendFactor.ZERO);\n        this._pContext.setDepthTest(true, ContextGLCompareMode_1.ContextGLCompareMode.LESS);\n        var head = this._pOpaqueRenderableHead;\n        var first = true;\n        //TODO cascades must have separate collectors, rather than separate draw commands\n        for (var i = numCascades - 1; i >= 0; --i) {\n            this._pStage.scissorRect = scissorRects[i];\n            //this.drawCascadeRenderables(head, cameras[i], first? null : cameras[i].frustumPlanes);\n            first = false;\n        }\n        //line required for correct rendering when using away3d with starling. DO NOT REMOVE UNLESS STARLING INTEGRATION IS RETESTED!\n        this._pContext.setDepthTest(false, ContextGLCompareMode_1.ContextGLCompareMode.LESS_EQUAL);\n        this._pStage.scissorRect = null;\n    };\n    /**\n     * Renders the potentially visible geometry to the back buffer or texture. Only executed if everything is set up.\n     *\n     * @param target An option target texture to render to.\n     * @param surfaceSelector The index of a CubeTexture's face to render to.\n     * @param additionalClearMask Additional clear mask information, in case extra clear channels are to be omitted.\n     */\n    RendererBase.prototype.pExecuteRender = function (camera, target, scissorRect, surfaceSelector) {\n        if (target === void 0) { target = null; }\n        if (scissorRect === void 0) { scissorRect = null; }\n        if (surfaceSelector === void 0) { surfaceSelector = 0; }\n        this._pStage.setRenderTarget(target, true, surfaceSelector);\n        if ((target || !this.shareContext) && !this._depthPrepass)\n            this._pContext.clear(this._backgroundR, this._backgroundG, this._backgroundB, this._backgroundAlpha, 1, 0);\n        this._pStage.scissorRect = scissorRect;\n        /*\n         if (_backgroundImageRenderer)\n         _backgroundImageRenderer.render();\n         */\n        this._pContext.setBlendFactors(ContextGLBlendFactor_1.ContextGLBlendFactor.ONE, ContextGLBlendFactor_1.ContextGLBlendFactor.ZERO);\n        this.pDraw(camera);\n        //line required for correct rendering when using away3d with starling. DO NOT REMOVE UNLESS STARLING INTEGRATION IS RETESTED!\n        //this._pContext.setDepthTest(false, ContextGLCompareMode.LESS_EQUAL); //oopsie\n        if (!this.shareContext) {\n            if (this._snapshotRequired && this._snapshotBitmapImage2D) {\n                this._pContext.drawToBitmapImage2D(this._snapshotBitmapImage2D);\n                this._snapshotRequired = false;\n            }\n        }\n        this._pStage.scissorRect = null;\n    };\n    /*\n     * Will draw the renderer's output on next render to the provided bitmap data.\n     * */\n    RendererBase.prototype.queueSnapshot = function (bmd) {\n        this._snapshotRequired = true;\n        this._snapshotBitmapImage2D = bmd;\n    };\n    /**\n     * Performs the actual drawing of geometry to the target.\n     */\n    RendererBase.prototype.pDraw = function (camera) {\n        this._pContext.setDepthTest(true, ContextGLCompareMode_1.ContextGLCompareMode.LESS);\n        if (this._disableColor)\n            this._pContext.setColorMask(false, false, false, false);\n        this.drawRenderables(camera, this._pOpaqueRenderableHead);\n        if (this._renderBlended)\n            this.drawRenderables(camera, this._pBlendedRenderableHead);\n        if (this._disableColor)\n            this._pContext.setColorMask(true, true, true, true);\n    };\n    //private drawCascadeRenderables(renderableGL:GL_RenderableBase, camera:Camera, cullPlanes:Array<Plane3D>)\n    //{\n    //\tvar renderableGL2:GL_RenderableBase;\n    //\tvar render:GL_SurfaceBase;\n    //\tvar pass:IPass;\n    //\n    //\twhile (renderableGL) {\n    //\t\trenderableGL2 = renderableGL;\n    //\t\trender = renderableGL.render;\n    //\t\tpass = render.passes[0] //assuming only one pass per material\n    //\n    //\t\tthis.activatePass(renderableGL, pass, camera);\n    //\n    //\t\tdo {\n    //\t\t\t// if completely in front, it will fall in a different cascade\n    //\t\t\t// do not use near and far planes\n    //\t\t\tif (!cullPlanes || renderableGL2.sourceEntity.worldBounds.isInFrustum(cullPlanes, 4)) {\n    //\t\t\t\trenderableGL2._iRender(pass, camera, this._pRttViewProjectionMatrix);\n    //\t\t\t} else {\n    //\t\t\t\trenderableGL2.cascaded = true;\n    //\t\t\t}\n    //\n    //\t\t\trenderableGL2 = renderableGL2.next;\n    //\n    //\t\t} while (renderableGL2 && renderableGL2.render == render && !renderableGL2.cascaded);\n    //\n    //\t\tthis.deactivatePass(renderableGL, pass);\n    //\n    //\t\trenderableGL = renderableGL2;\n    //\t}\n    //}\n    /**\n     * Draw a list of renderables.\n     *\n     * @param renderables The renderables to draw.\n     */\n    RendererBase.prototype.drawRenderables = function (camera, renderableGL) {\n        var i;\n        var len;\n        var renderableGL2;\n        var surfaceGL;\n        var passes;\n        var pass;\n        this._pContext.setStencilActions(\"frontAndBack\", \"always\", \"keep\", \"keep\", \"keep\");\n        this._registeredMasks.length = 0;\n        var gl = this._pContext[\"_gl\"];\n        if (gl) {\n            gl.disable(gl.STENCIL_TEST);\n        }\n        this._maskConfig = 0;\n        while (renderableGL) {\n            surfaceGL = renderableGL.surfaceGL;\n            passes = surfaceGL.passes;\n            // otherwise this would result in depth rendered anyway because fragment shader kil is ignored\n            if (this._disableColor && surfaceGL._surface.alphaThreshold != 0) {\n                renderableGL2 = renderableGL;\n                // fast forward\n                do {\n                    renderableGL2 = renderableGL2.next;\n                } while (renderableGL2 && renderableGL2.surfaceGL == surfaceGL);\n            }\n            else {\n                if (this._activeMasksDirty || this._checkMasksConfig(renderableGL.masksConfig)) {\n                    this._activeMasksConfig = renderableGL.masksConfig;\n                    if (!this._activeMasksConfig.length) {\n                        // disable stencil\n                        if (gl) {\n                            gl.disable(gl.STENCIL_TEST);\n                            gl.stencilFunc(gl.ALWAYS, 0, 0xff);\n                            gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n                        }\n                    }\n                    else {\n                        this._renderMasks(camera, renderableGL.sourceEntity._iAssignedMasks());\n                    }\n                    this._activeMasksDirty = false;\n                }\n                //iterate through each shader object\n                len = passes.length;\n                for (i = 0; i < len; i++) {\n                    renderableGL2 = renderableGL;\n                    pass = passes[i];\n                    this.activatePass(pass, camera);\n                    do {\n                        if (renderableGL2.maskId !== -1) {\n                            if (i == 0)\n                                this._registerMask(renderableGL2);\n                        }\n                        else {\n                            renderableGL2._iRender(pass, camera, this._pRttViewProjectionMatrix);\n                        }\n                        renderableGL2 = renderableGL2.next;\n                    } while (renderableGL2 && renderableGL2.surfaceGL == surfaceGL && !(this._activeMasksDirty = this._checkMasksConfig(renderableGL2.masksConfig)));\n                    this.deactivatePass(pass);\n                }\n            }\n            renderableGL = renderableGL2;\n        }\n    };\n    /**\n     * Assign the context once retrieved\n     */\n    RendererBase.prototype.onContextUpdate = function (event) {\n        this._pContext = this._pStage.context;\n    };\n    Object.defineProperty(RendererBase.prototype, \"_iBackgroundAlpha\", {\n        get: function () {\n            return this._backgroundAlpha;\n        },\n        set: function (value) {\n            if (this._backgroundAlpha == value)\n                return;\n            this._backgroundAlpha = value;\n            this._pBackBufferInvalid = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /*\n     public get iBackground():Texture2DBase\n     {\n     return this._background;\n     }\n     */\n    /*\n     public set iBackground(value:Texture2DBase)\n     {\n     if (this._backgroundImageRenderer && !value) {\n     this._backgroundImageRenderer.dispose();\n     this._backgroundImageRenderer = null;\n     }\n\n     if (!this._backgroundImageRenderer && value)\n     {\n\n     this._backgroundImageRenderer = new BackgroundImageRenderer(this._pStage);\n\n     }\n\n\n     this._background = value;\n\n     if (this._backgroundImageRenderer)\n     this._backgroundImageRenderer.texture = value;\n     }\n     */\n    /*\n     public get backgroundImageRenderer():BackgroundImageRenderer\n     {\n     return _backgroundImageRenderer;\n     }\n     */\n    /**\n     * @private\n     */\n    RendererBase.prototype.notifyScissorUpdate = function () {\n        if (this._scissorDirty)\n            return;\n        this._scissorDirty = true;\n        if (!this._scissorUpdated)\n            this._scissorUpdated = new RendererEvent_1.RendererEvent(RendererEvent_1.RendererEvent.SCISSOR_UPDATED);\n        this.dispatchEvent(this._scissorUpdated);\n    };\n    /**\n     * @private\n     */\n    RendererBase.prototype.notifyViewportUpdate = function () {\n        if (this._viewportDirty)\n            return;\n        this._viewportDirty = true;\n        if (!this._viewPortUpdated)\n            this._viewPortUpdated = new RendererEvent_1.RendererEvent(RendererEvent_1.RendererEvent.VIEWPORT_UPDATED);\n        this.dispatchEvent(this._viewPortUpdated);\n    };\n    /**\n     *\n     */\n    RendererBase.prototype.onViewportUpdated = function (event) {\n        this._viewPort = this._pStage.viewPort;\n        //TODO stop firing viewport updated for every stagegl viewport change\n        if (this.shareContext) {\n            this._pScissorRect.x = this._globalPos.x - this._pStage.x;\n            this._pScissorRect.y = this._globalPos.y - this._pStage.y;\n            this.notifyScissorUpdate();\n        }\n        this.notifyViewportUpdate();\n    };\n    /**\n     *\n     */\n    RendererBase.prototype.updateGlobalPos = function () {\n        if (this.shareContext) {\n            this._pScissorRect.x = this._globalPos.x - this._viewPort.x;\n            this._pScissorRect.y = this._globalPos.y - this._viewPort.y;\n        }\n        else {\n            this._pScissorRect.x = 0;\n            this._pScissorRect.y = 0;\n            this._viewPort.x = this._globalPos.x;\n            this._viewPort.y = this._globalPos.y;\n        }\n        this.notifyScissorUpdate();\n    };\n    /**\n     *\n     * @param node\n     * @returns {boolean}\n     */\n    RendererBase.prototype.enterNode = function (node) {\n        var enter = node._iCollectionMark != RendererBase._iCollectionMark && node.isRenderable() && node.isInFrustum(this._cullPlanes, this._numCullPlanes);\n        node._iCollectionMark = RendererBase._iCollectionMark;\n        return enter;\n    };\n    RendererBase.prototype.applyEntity = function (entity) {\n        this._sourceEntity = entity;\n        // project onto camera's z-axis\n        this._zIndex = entity.zOffset + this._cameraPosition.subtract(entity.scenePosition).dotProduct(this._cameraForward);\n        //save sceneTransform\n        this._renderSceneTransform = entity.getRenderSceneTransform(this._cameraTransform);\n        //collect renderables\n        entity._acceptTraverser(this);\n    };\n    RendererBase.prototype.applyRenderable = function (renderable) {\n        var renderableGL = this.getAbstraction(renderable);\n        var surfaceGL = renderableGL.surfaceGL;\n        //set local vars for faster referencing\n        renderableGL.surfaceID = surfaceGL.surfaceID;\n        renderableGL.renderOrderId = surfaceGL.renderOrderId;\n        renderableGL.cascaded = false;\n        renderableGL.sourceEntity = this._sourceEntity;\n        renderableGL.zIndex = this._zIndex;\n        renderableGL.maskId = this._sourceEntity._iAssignedMaskId();\n        renderableGL.masksConfig = this._sourceEntity._iMasksConfig();\n        //store reference to scene transform\n        renderableGL.renderSceneTransform = this._renderSceneTransform;\n        if (surfaceGL.requiresBlending) {\n            renderableGL.next = this._pBlendedRenderableHead;\n            this._pBlendedRenderableHead = renderableGL;\n        }\n        else {\n            renderableGL.next = this._pOpaqueRenderableHead;\n            this._pOpaqueRenderableHead = renderableGL;\n        }\n        this._pNumElements += renderableGL.elementsGL.elements.numElements;\n    };\n    /**\n     *\n     * @param entity\n     */\n    RendererBase.prototype.applyDirectionalLight = function (entity) {\n        //don't do anything here\n    };\n    /**\n     *\n     * @param entity\n     */\n    RendererBase.prototype.applyLightProbe = function (entity) {\n        //don't do anything here\n    };\n    /**\n     *\n     * @param entity\n     */\n    RendererBase.prototype.applyPointLight = function (entity) {\n        //don't do anything here\n    };\n    /**\n     *\n     * @param entity\n     */\n    RendererBase.prototype.applySkybox = function (entity) {\n        //don't do anything here\n    };\n    RendererBase.prototype._registerMask = function (obj) {\n        //console.log(\"registerMask\");\n        this._registeredMasks.push(obj);\n    };\n    RendererBase.prototype._renderMasks = function (camera, masks) {\n        var gl = this._pContext[\"_gl\"];\n        //var oldRenderTarget = this._stage.renderTarget;\n        //this._stage.setRenderTarget(this._image);\n        //this._stage.clear();\n        this._pContext.setColorMask(false, false, false, false);\n        // TODO: Could we create masks within masks by providing a previous configID, and supply \"clear/keep\" on stencil fail\n        //context.setStencilActions(\"frontAndBack\", \"always\", \"set\", \"set\", \"set\");\n        gl.enable(gl.STENCIL_TEST);\n        this._maskConfig++;\n        gl.stencilFunc(gl.ALWAYS, this._maskConfig, 0xff);\n        gl.stencilOp(gl.REPLACE, gl.REPLACE, gl.REPLACE);\n        var numLayers = masks.length;\n        var numRenderables = this._registeredMasks.length;\n        var renderableGL;\n        var children;\n        var numChildren;\n        var mask;\n        for (var i = 0; i < numLayers; ++i) {\n            if (i != 0) {\n                gl.stencilFunc(gl.EQUAL, this._maskConfig, 0xff);\n                gl.stencilOp(gl.KEEP, gl.INCR, gl.INCR);\n                this._maskConfig++;\n            }\n            children = masks[i];\n            numChildren = children.length;\n            for (var j = 0; j < numChildren; ++j) {\n                mask = children[j];\n                for (var k = 0; k < numRenderables; ++k) {\n                    renderableGL = this._registeredMasks[k];\n                    //console.log(\"testing for \" + mask[\"hierarchicalMaskID\"] + \", \" + mask.name);\n                    if (renderableGL.maskId == mask.id) {\n                        //console.log(\"Rendering hierarchicalMaskID \" + mask[\"hierarchicalMaskID\"]);\n                        this._drawMask(camera, renderableGL);\n                    }\n                }\n            }\n        }\n        gl.stencilFunc(gl.EQUAL, this._maskConfig, 0xff);\n        gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n        this._pContext.setColorMask(true, true, true, true);\n        this._pContext.setDepthTest(true, ContextGLCompareMode_1.ContextGLCompareMode.LESS);\n        //this._stage.setRenderTarget(oldRenderTarget);\n    };\n    RendererBase.prototype._drawMask = function (camera, renderableGL) {\n        var surfaceGL = renderableGL.surfaceGL;\n        var passes = surfaceGL.passes;\n        var len = passes.length;\n        var pass = passes[len - 1];\n        this.activatePass(pass, camera);\n        this._pContext.setDepthTest(false, ContextGLCompareMode_1.ContextGLCompareMode.LESS); //TODO: setup so as not to override activate\n        // only render last pass for now\n        renderableGL._iRender(pass, camera, this._pRttViewProjectionMatrix);\n        this.deactivatePass(pass);\n    };\n    RendererBase.prototype._checkMasksConfig = function (masksConfig) {\n        if (this._activeMasksConfig.length != masksConfig.length)\n            return true;\n        var numLayers = masksConfig.length;\n        var numChildren;\n        var childConfig;\n        var activeNumChildren;\n        var activeChildConfig;\n        for (var i = 0; i < numLayers; i++) {\n            childConfig = masksConfig[i];\n            numChildren = childConfig.length;\n            activeChildConfig = this._activeMasksConfig[i];\n            activeNumChildren = activeChildConfig.length;\n            if (activeNumChildren != numChildren)\n                return true;\n            for (var j = 0; j < numChildren; j++) {\n                if (activeChildConfig[j] != childConfig[j])\n                    return true;\n            }\n        }\n        return false;\n    };\n    RendererBase._iCollectionMark = 0;\n    RendererBase._abstractionClassPool = new Object();\n    return RendererBase;\n}(EventDispatcher_1.EventDispatcher));\nexports.RendererBase = RendererBase;\n\n},{\"./sort/RenderableMergeSort\":\"awayjs-renderergl/lib/sort/RenderableMergeSort\",\"./surfaces/SurfacePool\":\"awayjs-renderergl/lib/surfaces/SurfacePool\",\"awayjs-core/lib/events/EventDispatcher\":undefined,\"awayjs-core/lib/geom/Matrix3D\":undefined,\"awayjs-core/lib/geom/Matrix3DUtils\":undefined,\"awayjs-core/lib/geom/Point\":undefined,\"awayjs-core/lib/geom/Rectangle\":undefined,\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-display/lib/events/RendererEvent\":undefined,\"awayjs-stagegl/lib/aglsl/assembler/AGALMiniAssembler\":undefined,\"awayjs-stagegl/lib/base/ContextGLBlendFactor\":undefined,\"awayjs-stagegl/lib/base/ContextGLCompareMode\":undefined,\"awayjs-stagegl/lib/events/StageEvent\":undefined,\"awayjs-stagegl/lib/managers/StageManager\":undefined}],\"awayjs-renderergl/lib/animators/AnimationSetBase\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AssetBase_1 = require(\"awayjs-core/lib/library/AssetBase\");\nvar AbstractMethodError_1 = require(\"awayjs-core/lib/errors/AbstractMethodError\");\nvar AnimationSetError_1 = require(\"../errors/AnimationSetError\");\n/**\n * Provides an abstract base class for data set classes that hold animation data for use in animator classes.\n *\n * @see away.animators.AnimatorBase\n */\nvar AnimationSetBase = (function (_super) {\n    __extends(AnimationSetBase, _super);\n    function AnimationSetBase() {\n        _super.call(this);\n        this._animations = new Array();\n        this._animationNames = new Array();\n        this._animationDictionary = new Object();\n    }\n    /**\n     * Retrieves a temporary GPU register that's still free.\n     *\n     * @param exclude An array of non-free temporary registers.\n     * @param excludeAnother An additional register that's not free.\n     * @return A temporary register that can be used.\n     */\n    AnimationSetBase.prototype._pFindTempReg = function (exclude, excludeAnother) {\n        if (excludeAnother === void 0) { excludeAnother = null; }\n        var i = 0;\n        var reg;\n        while (true) {\n            reg = \"vt\" + i;\n            if (exclude.indexOf(reg) == -1 && excludeAnother != reg)\n                return reg;\n            ++i;\n        }\n    };\n    Object.defineProperty(AnimationSetBase.prototype, \"usesCPU\", {\n        /**\n         * Indicates whether the properties of the animation data contained within the set combined with\n         * the vertex registers already in use on shading materials allows the animation data to utilise\n         * GPU calls.\n         */\n        get: function () {\n            return this._usesCPU;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Called by the material to reset the GPU indicator before testing whether register space in the shader\n     * is available for running GPU-based animation code.\n     *\n     * @private\n     */\n    AnimationSetBase.prototype.resetGPUCompatibility = function () {\n        this._usesCPU = false;\n    };\n    AnimationSetBase.prototype.cancelGPUCompatibility = function () {\n        this._usesCPU = true;\n    };\n    /**\n     * @inheritDoc\n     */\n    AnimationSetBase.prototype.getAGALVertexCode = function (shader, registerCache, sharedRegisters) {\n        throw new AbstractMethodError_1.AbstractMethodError();\n    };\n    /**\n     * @inheritDoc\n     */\n    AnimationSetBase.prototype.getAGALFragmentCode = function (shader, registerCache, shadedTarget) {\n        throw new AbstractMethodError_1.AbstractMethodError();\n    };\n    /**\n     * @inheritDoc\n     */\n    AnimationSetBase.prototype.getAGALUVCode = function (shader, registerCache, sharedRegisters) {\n        throw new AbstractMethodError_1.AbstractMethodError();\n    };\n    /**\n     * @inheritDoc\n     */\n    AnimationSetBase.prototype.doneAGALCode = function (shader) {\n        throw new AbstractMethodError_1.AbstractMethodError();\n    };\n    Object.defineProperty(AnimationSetBase.prototype, \"assetType\", {\n        /**\n         * @inheritDoc\n         */\n        get: function () {\n            return AnimationSetBase.assetType;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimationSetBase.prototype, \"animations\", {\n        /**\n         * Returns a vector of animation state objects that make up the contents of the animation data set.\n         */\n        get: function () {\n            return this._animations;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimationSetBase.prototype, \"animationNames\", {\n        /**\n         * Returns a vector of animation state objects that make up the contents of the animation data set.\n         */\n        get: function () {\n            return this._animationNames;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Check to determine whether a state is registered in the animation set under the given name.\n     *\n     * @param stateName The name of the animation state object to be checked.\n     */\n    AnimationSetBase.prototype.hasAnimation = function (name) {\n        return this._animationDictionary[name] != null;\n    };\n    /**\n     * Retrieves the animation state object registered in the animation data set under the given name.\n     *\n     * @param stateName The name of the animation state object to be retrieved.\n     */\n    AnimationSetBase.prototype.getAnimation = function (name) {\n        return this._animationDictionary[name];\n    };\n    /**\n     * Adds an animation state object to the aniamtion data set under the given name.\n     *\n     * @param stateName The name under which the animation state object will be stored.\n     * @param animationState The animation state object to be staored in the set.\n     */\n    AnimationSetBase.prototype.addAnimation = function (node) {\n        if (this._animationDictionary[node.name])\n            throw new AnimationSetError_1.AnimationSetError(\"root node name '\" + node.name + \"' already exists in the set\");\n        this._animationDictionary[node.name] = node;\n        this._animations.push(node);\n        this._animationNames.push(node.name);\n    };\n    /**\n     * Cleans up any resources used by the current object.\n     */\n    AnimationSetBase.prototype.dispose = function () {\n    };\n    AnimationSetBase.assetType = \"[asset AnimationSet]\";\n    return AnimationSetBase;\n}(AssetBase_1.AssetBase));\nexports.AnimationSetBase = AnimationSetBase;\n\n},{\"../errors/AnimationSetError\":\"awayjs-renderergl/lib/errors/AnimationSetError\",\"awayjs-core/lib/errors/AbstractMethodError\":undefined,\"awayjs-core/lib/library/AssetBase\":undefined}],\"awayjs-renderergl/lib/animators/AnimatorBase\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AssetBase_1 = require(\"awayjs-core/lib/library/AssetBase\");\nvar AbstractMethodError_1 = require(\"awayjs-core/lib/errors/AbstractMethodError\");\nvar RequestAnimationFrame_1 = require(\"awayjs-core/lib/utils/RequestAnimationFrame\");\nvar getTimer_1 = require(\"awayjs-core/lib/utils/getTimer\");\nvar AnimatorEvent_1 = require(\"../events/AnimatorEvent\");\n/**\n * Dispatched when playback of an animation inside the animator object starts.\n *\n * @eventType away3d.events.AnimatorEvent\n */\n//[Event(name=\"start\", type=\"away3d.events.AnimatorEvent\")]\n/**\n * Dispatched when playback of an animation inside the animator object stops.\n *\n * @eventType away3d.events.AnimatorEvent\n */\n//[Event(name=\"stop\", type=\"away3d.events.AnimatorEvent\")]\n/**\n * Dispatched when playback of an animation reaches the end of an animation.\n *\n * @eventType away3d.events.AnimatorEvent\n */\n//[Event(name=\"cycle_complete\", type=\"away3d.events.AnimatorEvent\")]\n/**\n * Provides an abstract base class for animator classes that control animation output from a data set subtype of <code>AnimationSetBase</code>.\n *\n * @see away.animators.AnimationSetBase\n */\nvar AnimatorBase = (function (_super) {\n    __extends(AnimatorBase, _super);\n    /**\n     * Creates a new <code>AnimatorBase</code> object.\n     *\n     * @param animationSet The animation data set to be used by the animator object.\n     */\n    function AnimatorBase(animationSet) {\n        _super.call(this);\n        this._autoUpdate = true;\n        this._time = 0;\n        this._playbackSpeed = 1;\n        this._pOwners = new Array();\n        this._pAbsoluteTime = 0;\n        this._animationStates = new Object();\n        /**\n         * Enables translation of the animated sprite from data returned per frame via the positionDelta property of the active animation node. Defaults to true.\n         *\n         * @see away.animators.IAnimationState#positionDelta\n         */\n        this.updatePosition = true;\n        this._pAnimationSet = animationSet;\n        this._broadcaster = new RequestAnimationFrame_1.RequestAnimationFrame(this.onEnterFrame, this);\n    }\n    AnimatorBase.prototype.getAnimationState = function (node) {\n        var className = node.stateClass;\n        var uID = node.id;\n        if (this._animationStates[uID] == null)\n            this._animationStates[uID] = new className(this, node);\n        return this._animationStates[uID];\n    };\n    AnimatorBase.prototype.getAnimationStateByName = function (name) {\n        return this.getAnimationState(this._pAnimationSet.getAnimation(name));\n    };\n    Object.defineProperty(AnimatorBase.prototype, \"absoluteTime\", {\n        /**\n         * Returns the internal absolute time of the animator, calculated by the current time and the playback speed.\n         *\n         * @see #time\n         * @see #playbackSpeed\n         */\n        get: function () {\n            return this._pAbsoluteTime;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatorBase.prototype, \"animationSet\", {\n        /**\n         * Returns the animation data set in use by the animator.\n         */\n        get: function () {\n            return this._pAnimationSet;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatorBase.prototype, \"activeState\", {\n        /**\n         * Returns the current active animation state.\n         */\n        get: function () {\n            return this._pActiveState;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatorBase.prototype, \"activeAnimation\", {\n        /**\n         * Returns the current active animation node.\n         */\n        get: function () {\n            return this._pAnimationSet.getAnimation(this._pActiveAnimationName);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatorBase.prototype, \"activeAnimationName\", {\n        /**\n         * Returns the current active animation node.\n         */\n        get: function () {\n            return this._pActiveAnimationName;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatorBase.prototype, \"autoUpdate\", {\n        /**\n         * Determines whether the animators internal update mechanisms are active. Used in cases\n         * where manual updates are required either via the <code>time</code> property or <code>update()</code> method.\n         * Defaults to true.\n         *\n         * @see #time\n         * @see #update()\n         */\n        get: function () {\n            return this._autoUpdate;\n        },\n        set: function (value) {\n            if (this._autoUpdate == value)\n                return;\n            this._autoUpdate = value;\n            if (this._autoUpdate)\n                this.start();\n            else\n                this.stop();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimatorBase.prototype, \"time\", {\n        /**\n         * Gets and sets the internal time clock of the animator.\n         */\n        get: function () {\n            return this._time;\n        },\n        set: function (value) {\n            if (this._time == value)\n                return;\n            this.update(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the animation phase of the current active state's animation clip(s).\n     *\n     * @param value The phase value to use. 0 represents the beginning of an animation clip, 1 represents the end.\n     */\n    AnimatorBase.prototype.phase = function (value) {\n        this._pActiveState.phase(value);\n    };\n    Object.defineProperty(AnimatorBase.prototype, \"playbackSpeed\", {\n        /**\n         * The amount by which passed time should be scaled. Used to slow down or speed up animations. Defaults to 1.\n         */\n        get: function () {\n            return this._playbackSpeed;\n        },\n        set: function (value) {\n            this._playbackSpeed = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AnimatorBase.prototype.setRenderState = function (shader, renderable, stage, camera) {\n        throw new AbstractMethodError_1.AbstractMethodError();\n    };\n    /**\n     * Resumes the automatic playback clock controling the active state of the animator.\n     */\n    AnimatorBase.prototype.start = function () {\n        if (this._isPlaying || !this._autoUpdate)\n            return;\n        this._time = this._pAbsoluteTime = getTimer_1.getTimer();\n        this._isPlaying = true;\n        this._broadcaster.start();\n        if (!this.hasEventListener(AnimatorEvent_1.AnimatorEvent.START))\n            return;\n        if (this._startEvent == null)\n            this._startEvent = new AnimatorEvent_1.AnimatorEvent(AnimatorEvent_1.AnimatorEvent.START, this);\n        this.dispatchEvent(this._startEvent);\n    };\n    /**\n     * Pauses the automatic playback clock of the animator, in case manual updates are required via the\n     * <code>time</code> property or <code>update()</code> method.\n     *\n     * @see #time\n     * @see #update()\n     */\n    AnimatorBase.prototype.stop = function () {\n        if (!this._isPlaying)\n            return;\n        this._isPlaying = false;\n        this._broadcaster.stop();\n        if (!this.hasEventListener(AnimatorEvent_1.AnimatorEvent.STOP))\n            return;\n        if (this._stopEvent == null)\n            this._stopEvent = new AnimatorEvent_1.AnimatorEvent(AnimatorEvent_1.AnimatorEvent.STOP, this);\n        this.dispatchEvent(this._stopEvent);\n    };\n    /**\n     * Provides a way to manually update the active state of the animator when automatic\n     * updates are disabled.\n     *\n     * @see #stop()\n     * @see #autoUpdate\n     */\n    AnimatorBase.prototype.update = function (time) {\n        var dt = (time - this._time) * this.playbackSpeed;\n        this._pUpdateDeltaTime(dt);\n        this._time = time;\n    };\n    AnimatorBase.prototype.reset = function (name, offset) {\n        if (offset === void 0) { offset = 0; }\n        this.getAnimationState(this._pAnimationSet.getAnimation(name)).offset(offset + this._pAbsoluteTime);\n    };\n    /**\n     * Used by the sprite object to which the animator is applied, registers the owner for internal use.\n     *\n     * @private\n     */\n    AnimatorBase.prototype.addOwner = function (sprite) {\n        this._pOwners.push(sprite);\n    };\n    /**\n     * Used by the sprite object from which the animator is removed, unregisters the owner for internal use.\n     *\n     * @private\n     */\n    AnimatorBase.prototype.removeOwner = function (sprite) {\n        this._pOwners.splice(this._pOwners.indexOf(sprite), 1);\n    };\n    /**\n     * Internal abstract method called when the time delta property of the animator's contents requires updating.\n     *\n     * @private\n     */\n    AnimatorBase.prototype._pUpdateDeltaTime = function (dt) {\n        this._pAbsoluteTime += dt;\n        this._pActiveState.update(this._pAbsoluteTime);\n        if (this.updatePosition)\n            this.applyPositionDelta();\n    };\n    /**\n     * Enter frame event handler for automatically updating the active state of the animator.\n     */\n    AnimatorBase.prototype.onEnterFrame = function (event) {\n        if (event === void 0) { event = null; }\n        this.update(getTimer_1.getTimer());\n    };\n    AnimatorBase.prototype.applyPositionDelta = function () {\n        var delta = this._pActiveState.positionDelta;\n        var dist = delta.length;\n        var len;\n        if (dist > 0) {\n            len = this._pOwners.length;\n            for (var i = 0; i < len; ++i)\n                this._pOwners[i].transform.translateLocal(delta, dist);\n        }\n    };\n    /**\n     *  for internal use.\n     *\n     * @private\n     */\n    AnimatorBase.prototype.dispatchCycleEvent = function () {\n        if (this.hasEventListener(AnimatorEvent_1.AnimatorEvent.CYCLE_COMPLETE)) {\n            if (this._cycleEvent == null)\n                this._cycleEvent = new AnimatorEvent_1.AnimatorEvent(AnimatorEvent_1.AnimatorEvent.CYCLE_COMPLETE, this);\n            this.dispatchEvent(this._cycleEvent);\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    AnimatorBase.prototype.clone = function () {\n        throw new AbstractMethodError_1.AbstractMethodError();\n    };\n    /**\n     * @inheritDoc\n     */\n    AnimatorBase.prototype.dispose = function () {\n    };\n    AnimatorBase.prototype.invalidateElements = function () {\n        var sprite;\n        var len = this._pOwners.length;\n        for (var i = 0; i < len; i++) {\n            sprite = this._pOwners[i];\n            sprite.graphics.invalidateElements();\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    AnimatorBase.prototype.testGPUCompatibility = function (shader) {\n        throw new AbstractMethodError_1.AbstractMethodError();\n    };\n    Object.defineProperty(AnimatorBase.prototype, \"assetType\", {\n        /**\n         * @inheritDoc\n         */\n        get: function () {\n            return AnimatorBase.assetType;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AnimatorBase.prototype.getRenderableElements = function (renderable, sourceElements) {\n        //nothing to do here\n        return sourceElements;\n    };\n    AnimatorBase.assetType = \"[asset Animator]\";\n    return AnimatorBase;\n}(AssetBase_1.AssetBase));\nexports.AnimatorBase = AnimatorBase;\n\n},{\"../events/AnimatorEvent\":\"awayjs-renderergl/lib/events/AnimatorEvent\",\"awayjs-core/lib/errors/AbstractMethodError\":undefined,\"awayjs-core/lib/library/AssetBase\":undefined,\"awayjs-core/lib/utils/RequestAnimationFrame\":undefined,\"awayjs-core/lib/utils/getTimer\":undefined}],\"awayjs-renderergl/lib/animators/ParticleAnimationSet\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AnimationSetBase_1 = require(\"../animators/AnimationSetBase\");\nvar AnimationRegisterData_1 = require(\"../animators/data/AnimationRegisterData\");\nvar AnimationElements_1 = require(\"../animators/data/AnimationElements\");\nvar ParticleAnimationData_1 = require(\"../animators/data/ParticleAnimationData\");\nvar ParticleProperties_1 = require(\"../animators/data/ParticleProperties\");\nvar ParticlePropertiesMode_1 = require(\"../animators/data/ParticlePropertiesMode\");\nvar ParticleTimeNode_1 = require(\"../animators/nodes/ParticleTimeNode\");\n/**\n * The animation data set used by particle-based animators, containing particle animation data.\n *\n * @see away.animators.ParticleAnimator\n */\nvar ParticleAnimationSet = (function (_super) {\n    __extends(ParticleAnimationSet, _super);\n    /**\n     * Creates a new <code>ParticleAnimationSet</code>\n     *\n     * @param    [optional] usesDuration    Defines whether the animation set uses the <code>duration</code> data in its static properties to determine how long a particle is visible for. Defaults to false.\n     * @param    [optional] usesLooping     Defines whether the animation set uses a looping timeframe for each particle determined by the <code>startTime</code>, <code>duration</code> and <code>delay</code> data in its static properties function. Defaults to false. Requires <code>usesDuration</code> to be true.\n     * @param    [optional] usesDelay       Defines whether the animation set uses the <code>delay</code> data in its static properties to determine how long a particle is hidden for. Defaults to false. Requires <code>usesLooping</code> to be true.\n     */\n    function ParticleAnimationSet(usesDuration, usesLooping, usesDelay) {\n        if (usesDuration === void 0) { usesDuration = false; }\n        if (usesLooping === void 0) { usesLooping = false; }\n        if (usesDelay === void 0) { usesDelay = false; }\n        _super.call(this);\n        this._animationElements = new Object();\n        this._particleNodes = new Array();\n        this._localDynamicNodes = new Array();\n        this._localStaticNodes = new Array();\n        this._totalLenOfOneVertex = 0;\n        /**\n         *\n         */\n        this.shareAnimationGraphics = true;\n        //automatically add a particle time node to the set\n        this.addAnimation(this._timeNode = new ParticleTimeNode_1.ParticleTimeNode(usesDuration, usesLooping, usesDelay));\n    }\n    Object.defineProperty(ParticleAnimationSet.prototype, \"particleNodes\", {\n        /**\n         * Returns a vector of the particle animation nodes contained within the set.\n         */\n        get: function () {\n            return this._particleNodes;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @inheritDoc\n     */\n    ParticleAnimationSet.prototype.addAnimation = function (node) {\n        var i;\n        var n = node;\n        n._iProcessAnimationSetting(this);\n        if (n.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_STATIC) {\n            n._iDataOffset = this._totalLenOfOneVertex;\n            this._totalLenOfOneVertex += n.dataLength;\n            this._localStaticNodes.push(n);\n        }\n        else if (n.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_DYNAMIC)\n            this._localDynamicNodes.push(n);\n        for (i = this._particleNodes.length - 1; i >= 0; i--) {\n            if (this._particleNodes[i].priority <= n.priority)\n                break;\n        }\n        this._particleNodes.splice(i + 1, 0, n);\n        _super.prototype.addAnimation.call(this, node);\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleAnimationSet.prototype.getAGALVertexCode = function (shader, registerCache, sharedRegisters) {\n        //grab animationRegisterData from the materialpassbase or create a new one if the first time\n        this._iAnimationRegisterData = shader.animationRegisterData;\n        if (this._iAnimationRegisterData == null)\n            this._iAnimationRegisterData = shader.animationRegisterData = new AnimationRegisterData_1.AnimationRegisterData();\n        //reset animationRegisterData\n        this._iAnimationRegisterData.reset(registerCache, sharedRegisters, this.needVelocity);\n        var code = \"\";\n        var len = sharedRegisters.animatableAttributes.length;\n        for (var i = 0; i < len; i++)\n            code += \"mov \" + sharedRegisters.animationTargetRegisters[i] + \",\" + sharedRegisters.animatableAttributes[i] + \"\\n\";\n        code += \"mov \" + this._iAnimationRegisterData.positionTarget + \".xyz,\" + this._iAnimationRegisterData.vertexZeroConst + \"\\n\";\n        if (this.needVelocity)\n            code += \"mov \" + this._iAnimationRegisterData.velocityTarget + \".xyz,\" + this._iAnimationRegisterData.vertexZeroConst + \"\\n\";\n        var node;\n        var i;\n        for (i = 0; i < this._particleNodes.length; i++) {\n            node = this._particleNodes[i];\n            if (node.priority < ParticleAnimationSet.POST_PRIORITY)\n                code += node.getAGALVertexCode(shader, this, registerCache, this._iAnimationRegisterData);\n        }\n        code += \"add \" + this._iAnimationRegisterData.scaleAndRotateTarget + \".xyz,\" + this._iAnimationRegisterData.scaleAndRotateTarget + \".xyz,\" + this._iAnimationRegisterData.positionTarget + \".xyz\\n\";\n        for (i = 0; i < this._particleNodes.length; i++) {\n            node = this._particleNodes[i];\n            if (node.priority >= ParticleAnimationSet.POST_PRIORITY && node.priority < ParticleAnimationSet.COLOR_PRIORITY)\n                code += node.getAGALVertexCode(shader, this, registerCache, this._iAnimationRegisterData);\n        }\n        if (this.hasColorMulNode) {\n            this._iAnimationRegisterData.colorMulTarget = registerCache.getFreeVertexVectorTemp();\n            registerCache.addVertexTempUsages(this._iAnimationRegisterData.colorMulTarget, 1);\n            this._iAnimationRegisterData.colorMulVary = registerCache.getFreeVarying();\n            code += \"mov \" + this._iAnimationRegisterData.colorMulTarget + \",\" + this._iAnimationRegisterData.vertexOneConst + \"\\n\";\n        }\n        if (this.hasColorAddNode) {\n            this._iAnimationRegisterData.colorAddTarget = registerCache.getFreeVertexVectorTemp();\n            registerCache.addVertexTempUsages(this._iAnimationRegisterData.colorAddTarget, 1);\n            this._iAnimationRegisterData.colorAddVary = registerCache.getFreeVarying();\n            code += \"mov \" + this._iAnimationRegisterData.colorAddTarget + \",\" + this._iAnimationRegisterData.vertexZeroConst + \"\\n\";\n        }\n        for (i = 0; i < this._particleNodes.length; i++) {\n            node = this._particleNodes[i];\n            if (node.priority >= ParticleAnimationSet.COLOR_PRIORITY)\n                code += node.getAGALVertexCode(shader, this, registerCache, this._iAnimationRegisterData);\n        }\n        if (shader.usesFragmentAnimation && (this.hasColorAddNode || this.hasColorMulNode)) {\n            if (this.hasColorMulNode)\n                code += \"mov \" + this._iAnimationRegisterData.colorMulVary + \",\" + this._iAnimationRegisterData.colorMulTarget + \"\\n\";\n            if (this.hasColorAddNode)\n                code += \"mov \" + this._iAnimationRegisterData.colorAddVary + \",\" + this._iAnimationRegisterData.colorAddTarget + \"\\n\";\n        }\n        return code;\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleAnimationSet.prototype.getAGALUVCode = function (shader, registerCache, sharedRegisters) {\n        var code = \"\";\n        if (this.hasUVNode) {\n            this._iAnimationRegisterData.setUVSourceAndTarget(sharedRegisters);\n            code += \"mov \" + this._iAnimationRegisterData.uvTarget + \".xy,\" + this._iAnimationRegisterData.uvAttribute.toString() + \"\\n\";\n            var node;\n            for (var i = 0; i < this._particleNodes.length; i++)\n                node = this._particleNodes[i];\n            code += node.getAGALUVCode(shader, this, registerCache, this._iAnimationRegisterData);\n            code += \"mov \" + this._iAnimationRegisterData.uvVar + \",\" + this._iAnimationRegisterData.uvTarget + \".xy\\n\";\n        }\n        else\n            code += \"mov \" + sharedRegisters.uvTarget + \",\" + sharedRegisters.uvSource + \"\\n\";\n        return code;\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleAnimationSet.prototype.getAGALFragmentCode = function (shader, registerCache, shadedTarget) {\n        var code = \"\";\n        if (shader.usesFragmentAnimation && (this.hasColorAddNode || this.hasColorMulNode)) {\n            if (this.hasColorMulNode)\n                code += \"mul \" + shadedTarget + \",\" + shadedTarget + \",\" + this._iAnimationRegisterData.colorMulVary + \"\\n\";\n            if (this.hasColorAddNode)\n                code += \"add \" + shadedTarget + \",\" + shadedTarget + \",\" + this._iAnimationRegisterData.colorAddVary + \"\\n\";\n        }\n        return code;\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleAnimationSet.prototype.doneAGALCode = function (shader) {\n        //set vertexZeroConst,vertexOneConst,vertexTwoConst\n        shader.setVertexConst(this._iAnimationRegisterData.vertexZeroConst.index, 0, 1, 2, 0);\n    };\n    Object.defineProperty(ParticleAnimationSet.prototype, \"usesCPU\", {\n        /**\n         * @inheritDoc\n         */\n        get: function () {\n            return false;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @inheritDoc\n     */\n    ParticleAnimationSet.prototype.cancelGPUCompatibility = function () {\n    };\n    ParticleAnimationSet.prototype.dispose = function () {\n        for (var key in this._animationElements)\n            this._animationElements[key].dispose();\n        _super.prototype.dispose.call(this);\n    };\n    ParticleAnimationSet.prototype.getAnimationElements = function (graphic) {\n        var animationElements = (this.shareAnimationGraphics) ? this._animationElements[graphic.elements.id] : this._animationElements[graphic.id];\n        if (animationElements)\n            return animationElements;\n        this._iGenerateAnimationElements(graphic.parent);\n        return (this.shareAnimationGraphics) ? this._animationElements[graphic.elements.id] : this._animationElements[graphic.id];\n    };\n    /** @private */\n    ParticleAnimationSet.prototype._iGenerateAnimationElements = function (graphics) {\n        if (this.initParticleFunc == null)\n            throw (new Error(\"no initParticleFunc set\"));\n        var i, j, k;\n        var animationElements;\n        var newAnimationElements = false;\n        var elements;\n        var graphic;\n        var localNode;\n        for (i = 0; i < graphics.count; i++) {\n            graphic = graphics.getGraphicAt(i);\n            elements = graphic.elements;\n            if (this.shareAnimationGraphics) {\n                animationElements = this._animationElements[elements.id];\n                if (animationElements)\n                    continue;\n            }\n            animationElements = new AnimationElements_1.AnimationElements();\n            if (this.shareAnimationGraphics)\n                this._animationElements[elements.id] = animationElements;\n            else\n                this._animationElements[graphic.id] = animationElements;\n            newAnimationElements = true;\n            //create the vertexData vector that will be used for local node data\n            animationElements.createVertexData(elements.numVertices, this._totalLenOfOneVertex);\n        }\n        if (!newAnimationElements)\n            return;\n        var particles = graphics.particles;\n        var particlesLength = particles.length;\n        var numParticles = graphics.numParticles;\n        var particleProperties = new ParticleProperties_1.ParticleProperties();\n        var particle;\n        var oneDataLen;\n        var oneDataOffset;\n        var counterForVertex;\n        var counterForOneData;\n        var oneData;\n        var numVertices;\n        var vertexData;\n        var vertexLength;\n        var startingOffset;\n        var vertexOffset;\n        //default values for particle param\n        particleProperties.total = numParticles;\n        particleProperties.startTime = 0;\n        particleProperties.duration = 1000;\n        particleProperties.delay = 0.1;\n        i = 0;\n        j = 0;\n        while (i < numParticles) {\n            particleProperties.index = i;\n            //call the init on the particle parameters\n            this.initParticleFunc.call(this.initParticleScope, particleProperties);\n            //create the next set of node properties for the particle\n            for (k = 0; k < this._localStaticNodes.length; k++)\n                this._localStaticNodes[k]._iGeneratePropertyOfOneParticle(particleProperties);\n            //loop through all particle data for the curent particle\n            while (j < particlesLength && (particle = particles[j]).particleIndex == i) {\n                //find the target animationElements\n                for (k = 0; k < graphics.count; k++) {\n                    graphic = graphics.getGraphicAt(k);\n                    if (graphic.elements == particle.elements) {\n                        animationElements = (this.shareAnimationGraphics) ? this._animationElements[graphic.elements.id] : this._animationElements[graphic.id];\n                        break;\n                    }\n                }\n                numVertices = particle.numVertices;\n                vertexData = animationElements.vertexData;\n                vertexLength = numVertices * this._totalLenOfOneVertex;\n                startingOffset = animationElements.numProcessedVertices * this._totalLenOfOneVertex;\n                //loop through each static local node in the animation set\n                for (k = 0; k < this._localStaticNodes.length; k++) {\n                    localNode = this._localStaticNodes[k];\n                    oneData = localNode.oneData;\n                    oneDataLen = localNode.dataLength;\n                    oneDataOffset = startingOffset + localNode._iDataOffset;\n                    //loop through each vertex set in the vertex data\n                    for (counterForVertex = 0; counterForVertex < vertexLength; counterForVertex += this._totalLenOfOneVertex) {\n                        vertexOffset = oneDataOffset + counterForVertex;\n                        //add the data for the local node to the vertex data\n                        for (counterForOneData = 0; counterForOneData < oneDataLen; counterForOneData++)\n                            vertexData[vertexOffset + counterForOneData] = oneData[counterForOneData];\n                    }\n                }\n                //store particle properties if they need to be retreived for dynamic local nodes\n                if (this._localDynamicNodes.length)\n                    animationElements.animationParticles.push(new ParticleAnimationData_1.ParticleAnimationData(i, particleProperties.startTime, particleProperties.duration, particleProperties.delay, particle));\n                animationElements.numProcessedVertices += numVertices;\n                //next index\n                j++;\n            }\n            //next particle\n            i++;\n        }\n    };\n    /**\n     * Property used by particle nodes that require compilers at the end of the shader\n     */\n    ParticleAnimationSet.POST_PRIORITY = 9;\n    /**\n     * Property used by particle nodes that require color compilers\n     */\n    ParticleAnimationSet.COLOR_PRIORITY = 18;\n    return ParticleAnimationSet;\n}(AnimationSetBase_1.AnimationSetBase));\nexports.ParticleAnimationSet = ParticleAnimationSet;\n\n},{\"../animators/AnimationSetBase\":\"awayjs-renderergl/lib/animators/AnimationSetBase\",\"../animators/data/AnimationElements\":\"awayjs-renderergl/lib/animators/data/AnimationElements\",\"../animators/data/AnimationRegisterData\":\"awayjs-renderergl/lib/animators/data/AnimationRegisterData\",\"../animators/data/ParticleAnimationData\":\"awayjs-renderergl/lib/animators/data/ParticleAnimationData\",\"../animators/data/ParticleProperties\":\"awayjs-renderergl/lib/animators/data/ParticleProperties\",\"../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../animators/nodes/ParticleTimeNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleTimeNode\"}],\"awayjs-renderergl/lib/animators/ParticleAnimator\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AnimatorBase_1 = require(\"../animators/AnimatorBase\");\nvar AnimationElements_1 = require(\"../animators/data/AnimationElements\");\nvar ParticlePropertiesMode_1 = require(\"../animators/data/ParticlePropertiesMode\");\n/**\n * Provides an interface for assigning paricle-based animation data sets to sprite-based entity objects\n * and controlling the various available states of animation through an interative playhead that can be\n * automatically updated or manually triggered.\n *\n * Requires that the containing geometry of the parent sprite is particle geometry\n *\n * @see away.base.ParticleGraphics\n */\nvar ParticleAnimator = (function (_super) {\n    __extends(ParticleAnimator, _super);\n    /**\n     * Creates a new <code>ParticleAnimator</code> object.\n     *\n     * @param particleAnimationSet The animation data set containing the particle animations used by the animator.\n     */\n    function ParticleAnimator(particleAnimationSet) {\n        _super.call(this, particleAnimationSet);\n        this._animationParticleStates = new Array();\n        this._animatorParticleStates = new Array();\n        this._timeParticleStates = new Array();\n        this._totalLenOfOneVertex = 0;\n        this._animatorSubGeometries = new Object();\n        this._particleAnimationSet = particleAnimationSet;\n        var state;\n        var node;\n        for (var i = 0; i < this._particleAnimationSet.particleNodes.length; i++) {\n            node = this._particleAnimationSet.particleNodes[i];\n            state = this.getAnimationState(node);\n            if (node.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_DYNAMIC) {\n                this._animatorParticleStates.push(state);\n                node._iDataOffset = this._totalLenOfOneVertex;\n                this._totalLenOfOneVertex += node.dataLength;\n            }\n            else {\n                this._animationParticleStates.push(state);\n            }\n            if (state.needUpdateTime)\n                this._timeParticleStates.push(state);\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    ParticleAnimator.prototype.clone = function () {\n        return new ParticleAnimator(this._particleAnimationSet);\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleAnimator.prototype.setRenderState = function (shader, renderable, stage, camera) {\n        var animationRegisterData = this._particleAnimationSet._iAnimationRegisterData;\n        var graphic = renderable.graphic;\n        if (!graphic)\n            throw (new Error(\"Must be graphic\"));\n        //process animation sub geometries\n        var animationElements = this._particleAnimationSet.getAnimationElements(graphic);\n        var i;\n        for (i = 0; i < this._animationParticleStates.length; i++)\n            this._animationParticleStates[i].setRenderState(shader, renderable, animationElements, animationRegisterData, camera, stage);\n        //process animator subgeometries\n        var animatorElements = this.getAnimatorElements(graphic);\n        for (i = 0; i < this._animatorParticleStates.length; i++)\n            this._animatorParticleStates[i].setRenderState(shader, renderable, animatorElements, animationRegisterData, camera, stage);\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleAnimator.prototype.testGPUCompatibility = function (shader) {\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleAnimator.prototype.start = function () {\n        _super.prototype.start.call(this);\n        for (var i = 0; i < this._timeParticleStates.length; i++)\n            this._timeParticleStates[i].offset(this._pAbsoluteTime);\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleAnimator.prototype._pUpdateDeltaTime = function (dt) {\n        this._pAbsoluteTime += dt;\n        for (var i = 0; i < this._timeParticleStates.length; i++)\n            this._timeParticleStates[i].update(this._pAbsoluteTime);\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleAnimator.prototype.resetTime = function (offset) {\n        if (offset === void 0) { offset = 0; }\n        for (var i = 0; i < this._timeParticleStates.length; i++)\n            this._timeParticleStates[i].offset(this._pAbsoluteTime + offset);\n        this.update(this.time);\n    };\n    ParticleAnimator.prototype.dispose = function () {\n        for (var key in this._animatorSubGeometries)\n            this._animatorSubGeometries[key].dispose();\n    };\n    ParticleAnimator.prototype.getAnimatorElements = function (graphic) {\n        if (!this._animatorParticleStates.length)\n            return;\n        var elements = graphic.elements;\n        var animatorElements = this._animatorSubGeometries[elements.id] = new AnimationElements_1.AnimationElements();\n        //create the vertexData vector that will be used for local state data\n        animatorElements.createVertexData(elements.numVertices, this._totalLenOfOneVertex);\n        //pass the particles data to the animator elements\n        animatorElements.animationParticles = this._particleAnimationSet.getAnimationElements(graphic).animationParticles;\n    };\n    return ParticleAnimator;\n}(AnimatorBase_1.AnimatorBase));\nexports.ParticleAnimator = ParticleAnimator;\n\n},{\"../animators/AnimatorBase\":\"awayjs-renderergl/lib/animators/AnimatorBase\",\"../animators/data/AnimationElements\":\"awayjs-renderergl/lib/animators/data/AnimationElements\",\"../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\"}],\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AnimationSetBase_1 = require(\"../animators/AnimationSetBase\");\n/**\n * The animation data set used by skeleton-based animators, containing skeleton animation data.\n *\n * @see away.animators.SkeletonAnimator\n */\nvar SkeletonAnimationSet = (function (_super) {\n    __extends(SkeletonAnimationSet, _super);\n    /**\n     * Creates a new <code>SkeletonAnimationSet</code> object.\n     *\n     * @param jointsPerVertex Sets the amount of skeleton joints that can be linked to a single vertex via skinned weight values. For GPU-base animation, the maximum allowed value is 4. Defaults to 4.\n     */\n    function SkeletonAnimationSet(jointsPerVertex) {\n        if (jointsPerVertex === void 0) { jointsPerVertex = 4; }\n        _super.call(this);\n        this._jointsPerVertex = jointsPerVertex;\n    }\n    Object.defineProperty(SkeletonAnimationSet.prototype, \"jointsPerVertex\", {\n        /**\n         * Returns the amount of skeleton joints that can be linked to a single vertex via skinned weight values. For GPU-base animation, the\n         * maximum allowed value is 4.\n         */\n        get: function () {\n            return this._jointsPerVertex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SkeletonAnimationSet.prototype, \"matricesIndex\", {\n        get: function () {\n            return this._matricesIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @inheritDoc\n     */\n    SkeletonAnimationSet.prototype.getAGALVertexCode = function (shader, registerCache, sharedRegisters) {\n        this._matricesIndex = registerCache.numUsedVertexConstants;\n        var indexOffset0 = this._matricesIndex;\n        var indexOffset1 = this._matricesIndex + 1;\n        var indexOffset2 = this._matricesIndex + 2;\n        var indexStream = registerCache.getFreeVertexAttribute();\n        shader.jointIndexIndex = indexStream.index;\n        var weightStream = registerCache.getFreeVertexAttribute();\n        shader.jointWeightIndex = weightStream.index;\n        var indices = [indexStream + \".x\", indexStream + \".y\", indexStream + \".z\", indexStream + \".w\"];\n        var weights = [weightStream + \".x\", weightStream + \".y\", weightStream + \".z\", weightStream + \".w\"];\n        var temp1 = registerCache.getFreeVertexVectorTemp();\n        var dot = \"dp4\";\n        var code = \"\";\n        var len = sharedRegisters.animatableAttributes.length;\n        for (var i = 0; i < len; ++i) {\n            var source = sharedRegisters.animatableAttributes[i];\n            var target = sharedRegisters.animationTargetRegisters[i];\n            for (var j = 0; j < this._jointsPerVertex; ++j) {\n                registerCache.getFreeVertexConstant();\n                registerCache.getFreeVertexConstant();\n                registerCache.getFreeVertexConstant();\n                code += dot + \" \" + temp1 + \".x, \" + source + \", vc[\" + indices[j] + \"+\" + indexOffset0 + \"]\\n\" +\n                    dot + \" \" + temp1 + \".y, \" + source + \", vc[\" + indices[j] + \"+\" + indexOffset1 + \"]\\n\" +\n                    dot + \" \" + temp1 + \".z, \" + source + \", vc[\" + indices[j] + \"+\" + indexOffset2 + \"]\\n\" +\n                    \"mov \" + temp1 + \".w, \" + source + \".w\\n\" +\n                    \"mul \" + temp1 + \", \" + temp1 + \", \" + weights[j] + \"\\n\"; // apply weight\n                // add or mov to target. Need to write to a temp reg first, because an output can be a target\n                if (j == 0)\n                    code += \"mov \" + target + \", \" + temp1 + \"\\n\";\n                else\n                    code += \"add \" + target + \", \" + target + \", \" + temp1 + \"\\n\";\n            }\n            // switch to dp3 once positions have been transformed, from now on, it should only be vectors instead of points\n            dot = \"dp3\";\n        }\n        return code;\n    };\n    /**\n     * @inheritDoc\n     */\n    SkeletonAnimationSet.prototype.getAGALFragmentCode = function (shader, registerCache, shadedTarget) {\n        return \"\";\n    };\n    /**\n     * @inheritDoc\n     */\n    SkeletonAnimationSet.prototype.getAGALUVCode = function (shader, registerCache, sharedRegisters) {\n        return \"mov \" + sharedRegisters.uvTarget + \",\" + sharedRegisters.uvSource + \"\\n\";\n    };\n    /**\n     * @inheritDoc\n     */\n    SkeletonAnimationSet.prototype.doneAGALCode = function (shader) {\n    };\n    return SkeletonAnimationSet;\n}(AnimationSetBase_1.AnimationSetBase));\nexports.SkeletonAnimationSet = SkeletonAnimationSet;\n\n},{\"../animators/AnimationSetBase\":\"awayjs-renderergl/lib/animators/AnimationSetBase\"}],\"awayjs-renderergl/lib/animators/SkeletonAnimator\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ElementsEvent_1 = require(\"awayjs-display/lib/events/ElementsEvent\");\nvar AnimatorBase_1 = require(\"../animators/AnimatorBase\");\nvar JointPose_1 = require(\"../animators/data/JointPose\");\nvar SkeletonPose_1 = require(\"../animators/data/SkeletonPose\");\nvar AnimationStateEvent_1 = require(\"../events/AnimationStateEvent\");\n/**\n * Provides an interface for assigning skeleton-based animation data sets to sprite-based entity objects\n * and controlling the various available states of animation through an interative playhead that can be\n * automatically updated or manually triggered.\n */\nvar SkeletonAnimator = (function (_super) {\n    __extends(SkeletonAnimator, _super);\n    /**\n     * Creates a new <code>SkeletonAnimator</code> object.\n     *\n     * @param skeletonAnimationSet The animation data set containing the skeleton animations used by the animator.\n     * @param skeleton The skeleton object used for calculating the resulting global matrices for transforming skinned sprite data.\n     * @param forceCPU Optional value that only allows the animator to perform calculation on the CPU. Defaults to false.\n     */\n    function SkeletonAnimator(animationSet, skeleton, forceCPU) {\n        var _this = this;\n        if (forceCPU === void 0) { forceCPU = false; }\n        _super.call(this, animationSet);\n        this._globalPose = new SkeletonPose_1.SkeletonPose();\n        this._morphedElements = new Object();\n        this._morphedElementsDirty = new Object();\n        this._skeletonAnimationSet = animationSet;\n        this._skeleton = skeleton;\n        this._forceCPU = forceCPU;\n        this._jointsPerVertex = animationSet.jointsPerVertex;\n        this._numJoints = this._skeleton.numJoints;\n        this._globalMatrices = new Float32Array(this._numJoints * 12);\n        var j = 0;\n        for (var i = 0; i < this._numJoints; ++i) {\n            this._globalMatrices[j++] = 1;\n            this._globalMatrices[j++] = 0;\n            this._globalMatrices[j++] = 0;\n            this._globalMatrices[j++] = 0;\n            this._globalMatrices[j++] = 0;\n            this._globalMatrices[j++] = 1;\n            this._globalMatrices[j++] = 0;\n            this._globalMatrices[j++] = 0;\n            this._globalMatrices[j++] = 0;\n            this._globalMatrices[j++] = 0;\n            this._globalMatrices[j++] = 1;\n            this._globalMatrices[j++] = 0;\n        }\n        this._onTransitionCompleteDelegate = function (event) { return _this.onTransitionComplete(event); };\n        this._onIndicesUpdateDelegate = function (event) { return _this.onIndicesUpdate(event); };\n        this._onVerticesUpdateDelegate = function (event) { return _this.onVerticesUpdate(event); };\n    }\n    Object.defineProperty(SkeletonAnimator.prototype, \"globalMatrices\", {\n        /**\n         * returns the calculated global matrices of the current skeleton pose.\n         *\n         * @see #globalPose\n         */\n        get: function () {\n            if (this._globalPropertiesDirty)\n                this.updateGlobalProperties();\n            return this._globalMatrices;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SkeletonAnimator.prototype, \"globalPose\", {\n        /**\n         * returns the current skeleton pose output from the animator.\n         *\n         * @see away.animators.data.SkeletonPose\n         */\n        get: function () {\n            if (this._globalPropertiesDirty)\n                this.updateGlobalProperties();\n            return this._globalPose;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SkeletonAnimator.prototype, \"skeleton\", {\n        /**\n         * Returns the skeleton object in use by the animator - this defines the number and heirarchy of joints used by the\n         * skinned geoemtry to which skeleon animator is applied.\n         */\n        get: function () {\n            return this._skeleton;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SkeletonAnimator.prototype, \"forceCPU\", {\n        /**\n         * Indicates whether the skeleton animator is disabled by default for GPU rendering, something that allows the animator to perform calculation on the GPU.\n         * Defaults to false.\n         */\n        get: function () {\n            return this._forceCPU;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SkeletonAnimator.prototype, \"useCondensedIndices\", {\n        /**\n         * Offers the option of enabling GPU accelerated animation on skeletons larger than 32 joints\n         * by condensing the number of joint index values required per sprite. Only applicable to\n         * skeleton animations that utilise more than one sprite object. Defaults to false.\n         */\n        get: function () {\n            return this._useCondensedIndices;\n        },\n        set: function (value) {\n            this._useCondensedIndices = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @inheritDoc\n     */\n    SkeletonAnimator.prototype.clone = function () {\n        return new SkeletonAnimator(this._skeletonAnimationSet, this._skeleton, this._forceCPU);\n    };\n    /**\n     * Plays an animation state registered with the given name in the animation data set.\n     *\n     * @param name The data set name of the animation state to be played.\n     * @param transition An optional transition object that determines how the animator will transition from the currently active animation state.\n     * @param offset An option offset time (in milliseconds) that resets the state's internal clock to the absolute time of the animator plus the offset value. Required for non-looping animation states.\n     */\n    SkeletonAnimator.prototype.play = function (name, transition, offset) {\n        if (transition === void 0) { transition = null; }\n        if (offset === void 0) { offset = NaN; }\n        if (this._pActiveAnimationName == name)\n            return;\n        this._pActiveAnimationName = name;\n        if (!this._pAnimationSet.hasAnimation(name))\n            throw new Error(\"Animation root node \" + name + \" not found!\");\n        if (transition && this._pActiveNode) {\n            //setup the transition\n            this._pActiveNode = transition.getAnimationNode(this, this._pActiveNode, this._pAnimationSet.getAnimation(name), this._pAbsoluteTime);\n            this._pActiveNode.addEventListener(AnimationStateEvent_1.AnimationStateEvent.TRANSITION_COMPLETE, this._onTransitionCompleteDelegate);\n        }\n        else\n            this._pActiveNode = this._pAnimationSet.getAnimation(name);\n        this._pActiveState = this.getAnimationState(this._pActiveNode);\n        if (this.updatePosition) {\n            //update straight away to reset position deltas\n            this._pActiveState.update(this._pAbsoluteTime);\n            this._pActiveState.positionDelta;\n        }\n        this._activeSkeletonState = this._pActiveState;\n        this.start();\n        //apply a time offset if specified\n        if (!isNaN(offset))\n            this.reset(name, offset);\n    };\n    /**\n     * @inheritDoc\n     */\n    SkeletonAnimator.prototype.setRenderState = function (shader, renderable, stage, camera) {\n        // do on request of globalProperties\n        if (this._globalPropertiesDirty)\n            this.updateGlobalProperties();\n        var elements = renderable.graphic.elements;\n        elements.useCondensedIndices = this._useCondensedIndices;\n        if (this._useCondensedIndices) {\n            // using a condensed data set\n            this.updateCondensedMatrices(elements.condensedIndexLookUp);\n            shader.setVertexConstFromArray(this._skeletonAnimationSet.matricesIndex, this._condensedMatrices);\n        }\n        else {\n            if (this._pAnimationSet.usesCPU) {\n                if (this._morphedElementsDirty[elements.id])\n                    this.morphElements(renderable, elements);\n                return;\n            }\n            shader.setVertexConstFromArray(this._skeletonAnimationSet.matricesIndex, this._globalMatrices);\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    SkeletonAnimator.prototype.testGPUCompatibility = function (shader) {\n        if (!this._useCondensedIndices && (this._forceCPU || this._jointsPerVertex > 4 || shader.numUsedVertexConstants + this._numJoints * 3 > 128))\n            this._pAnimationSet.cancelGPUCompatibility();\n    };\n    /**\n     * Applies the calculated time delta to the active animation state node or state transition object.\n     */\n    SkeletonAnimator.prototype._pUpdateDeltaTime = function (dt) {\n        _super.prototype._pUpdateDeltaTime.call(this, dt);\n        //invalidate pose matrices\n        this._globalPropertiesDirty = true;\n        //trigger geometry invalidation if using CPU animation\n        if (this._pAnimationSet.usesCPU)\n            this.invalidateElements();\n    };\n    SkeletonAnimator.prototype.updateCondensedMatrices = function (condensedIndexLookUp) {\n        var j = 0, k = 0;\n        var len = condensedIndexLookUp.length;\n        var srcIndex;\n        this._condensedMatrices = new Float32Array(len * 12);\n        for (var i = 0; i < len; i++) {\n            srcIndex = condensedIndexLookUp[i] * 12; //12 required for the three 4-component vectors that store the matrix\n            k = 12;\n            // copy into condensed\n            while (k--)\n                this._condensedMatrices[j++] = this._globalMatrices[srcIndex++];\n        }\n    };\n    SkeletonAnimator.prototype.updateGlobalProperties = function () {\n        this._globalPropertiesDirty = false;\n        //get global pose\n        this.localToGlobalPose(this._activeSkeletonState.getSkeletonPose(this._skeleton), this._globalPose, this._skeleton);\n        // convert pose to matrix\n        var mtxOffset = 0;\n        var globalPoses = this._globalPose.jointPoses;\n        var raw;\n        var ox, oy, oz, ow;\n        var xy2, xz2, xw2;\n        var yz2, yw2, zw2;\n        var n11, n12, n13;\n        var n21, n22, n23;\n        var n31, n32, n33;\n        var m11, m12, m13, m14;\n        var m21, m22, m23, m24;\n        var m31, m32, m33, m34;\n        var joints = this._skeleton.joints;\n        var pose;\n        var quat;\n        var vec;\n        var t;\n        for (var i = 0; i < this._numJoints; ++i) {\n            pose = globalPoses[i];\n            quat = pose.orientation;\n            vec = pose.translation;\n            ox = quat.x;\n            oy = quat.y;\n            oz = quat.z;\n            ow = quat.w;\n            xy2 = (t = 2.0 * ox) * oy;\n            xz2 = t * oz;\n            xw2 = t * ow;\n            yz2 = (t = 2.0 * oy) * oz;\n            yw2 = t * ow;\n            zw2 = 2.0 * oz * ow;\n            yz2 = 2.0 * oy * oz;\n            yw2 = 2.0 * oy * ow;\n            zw2 = 2.0 * oz * ow;\n            ox *= ox;\n            oy *= oy;\n            oz *= oz;\n            ow *= ow;\n            n11 = (t = ox - oy) - oz + ow;\n            n12 = xy2 - zw2;\n            n13 = xz2 + yw2;\n            n21 = xy2 + zw2;\n            n22 = -t - oz + ow;\n            n23 = yz2 - xw2;\n            n31 = xz2 - yw2;\n            n32 = yz2 + xw2;\n            n33 = -ox - oy + oz + ow;\n            // prepend inverse bind pose\n            raw = joints[i].inverseBindPose;\n            m11 = raw[0];\n            m12 = raw[4];\n            m13 = raw[8];\n            m14 = raw[12];\n            m21 = raw[1];\n            m22 = raw[5];\n            m23 = raw[9];\n            m24 = raw[13];\n            m31 = raw[2];\n            m32 = raw[6];\n            m33 = raw[10];\n            m34 = raw[14];\n            this._globalMatrices[mtxOffset] = n11 * m11 + n12 * m21 + n13 * m31;\n            this._globalMatrices[mtxOffset + 1] = n11 * m12 + n12 * m22 + n13 * m32;\n            this._globalMatrices[mtxOffset + 2] = n11 * m13 + n12 * m23 + n13 * m33;\n            this._globalMatrices[mtxOffset + 3] = n11 * m14 + n12 * m24 + n13 * m34 + vec.x;\n            this._globalMatrices[mtxOffset + 4] = n21 * m11 + n22 * m21 + n23 * m31;\n            this._globalMatrices[mtxOffset + 5] = n21 * m12 + n22 * m22 + n23 * m32;\n            this._globalMatrices[mtxOffset + 6] = n21 * m13 + n22 * m23 + n23 * m33;\n            this._globalMatrices[mtxOffset + 7] = n21 * m14 + n22 * m24 + n23 * m34 + vec.y;\n            this._globalMatrices[mtxOffset + 8] = n31 * m11 + n32 * m21 + n33 * m31;\n            this._globalMatrices[mtxOffset + 9] = n31 * m12 + n32 * m22 + n33 * m32;\n            this._globalMatrices[mtxOffset + 10] = n31 * m13 + n32 * m23 + n33 * m33;\n            this._globalMatrices[mtxOffset + 11] = n31 * m14 + n32 * m24 + n33 * m34 + vec.z;\n            mtxOffset = mtxOffset + 12;\n        }\n    };\n    SkeletonAnimator.prototype.getRenderableElements = function (renderable, sourceElements) {\n        this._morphedElementsDirty[sourceElements.id] = true;\n        //early out for GPU animations\n        if (!this._pAnimationSet.usesCPU)\n            return sourceElements;\n        var targetElements;\n        if (!(targetElements = this._morphedElements[sourceElements.id])) {\n            //not yet stored\n            sourceElements.normals;\n            sourceElements.tangents;\n            targetElements = this._morphedElements[sourceElements.id] = sourceElements.clone();\n            //turn off auto calculations on the morphed geometry\n            targetElements.autoDeriveNormals = false;\n            targetElements.autoDeriveTangents = false;\n            //add event listeners for any changes in UV values on the source geometry\n            sourceElements.addEventListener(ElementsEvent_1.ElementsEvent.INVALIDATE_INDICES, this._onIndicesUpdateDelegate);\n            sourceElements.addEventListener(ElementsEvent_1.ElementsEvent.INVALIDATE_VERTICES, this._onVerticesUpdateDelegate);\n        }\n        return targetElements;\n    };\n    /**\n     * If the animation can't be performed on GPU, transform vertices manually\n     * @param subGeom The subgeometry containing the weights and joint index data per vertex.\n     * @param pass The material pass for which we need to transform the vertices\n     */\n    SkeletonAnimator.prototype.morphElements = function (renderable, sourceElements) {\n        this._morphedElementsDirty[sourceElements.id] = false;\n        var numVertices = sourceElements.numVertices;\n        var sourcePositions = sourceElements.positions.get(numVertices);\n        var sourceNormals = sourceElements.normals.get(numVertices);\n        var sourceTangents = sourceElements.tangents.get(numVertices);\n        var posDim = sourceElements.positions.dimensions;\n        var jointIndices = sourceElements.jointIndices.get(numVertices);\n        var jointWeights = sourceElements.jointWeights.get(numVertices);\n        var targetElements = this._morphedElements[sourceElements.id];\n        var targetPositions = targetElements.positions.get(numVertices);\n        var targetNormals = targetElements.normals.get(numVertices);\n        var targetTangents = targetElements.tangents.get(numVertices);\n        var index = 0;\n        var i0 = 0;\n        var i1 = 0;\n        var j = 0;\n        var k;\n        var vx, vy, vz;\n        var nx, ny, nz;\n        var tx, ty, tz;\n        var weight;\n        var vertX, vertY, vertZ;\n        var normX, normY, normZ;\n        var tangX, tangY, tangZ;\n        var m11, m12, m13, m14;\n        var m21, m22, m23, m24;\n        var m31, m32, m33, m34;\n        while (index < numVertices) {\n            i0 = index * posDim;\n            vertX = sourcePositions[i0];\n            vertY = sourcePositions[i0 + 1];\n            vertZ = (posDim == 3) ? sourcePositions[i0 + 2] : 0;\n            i1 = index * 3;\n            normX = sourceNormals[i1];\n            normY = sourceNormals[i1 + 1];\n            normZ = sourceNormals[i1 + 2];\n            tangX = sourceTangents[i1];\n            tangY = sourceTangents[i1 + 1];\n            tangZ = sourceTangents[i1 + 2];\n            vx = 0;\n            vy = 0;\n            vz = 0;\n            nx = 0;\n            ny = 0;\n            nz = 0;\n            tx = 0;\n            ty = 0;\n            tz = 0;\n            k = 0;\n            while (k < this._jointsPerVertex) {\n                weight = jointWeights[j];\n                if (weight > 0) {\n                    // implicit /3*12 (/3 because indices are multiplied by 3 for gpu matrix access, *12 because it's the matrix size)\n                    var mtxOffset = jointIndices[j++] << 2;\n                    m11 = this._globalMatrices[mtxOffset];\n                    m12 = this._globalMatrices[mtxOffset + 1];\n                    m13 = this._globalMatrices[mtxOffset + 2];\n                    m14 = this._globalMatrices[mtxOffset + 3];\n                    m21 = this._globalMatrices[mtxOffset + 4];\n                    m22 = this._globalMatrices[mtxOffset + 5];\n                    m23 = this._globalMatrices[mtxOffset + 6];\n                    m24 = this._globalMatrices[mtxOffset + 7];\n                    m31 = this._globalMatrices[mtxOffset + 8];\n                    m32 = this._globalMatrices[mtxOffset + 9];\n                    m33 = this._globalMatrices[mtxOffset + 10];\n                    m34 = this._globalMatrices[mtxOffset + 11];\n                    vx += weight * (m11 * vertX + m12 * vertY + m13 * vertZ + m14);\n                    vy += weight * (m21 * vertX + m22 * vertY + m23 * vertZ + m24);\n                    vz += weight * (m31 * vertX + m32 * vertY + m33 * vertZ + m34);\n                    nx += weight * (m11 * normX + m12 * normY + m13 * normZ);\n                    ny += weight * (m21 * normX + m22 * normY + m23 * normZ);\n                    nz += weight * (m31 * normX + m32 * normY + m33 * normZ);\n                    tx += weight * (m11 * tangX + m12 * tangY + m13 * tangZ);\n                    ty += weight * (m21 * tangX + m22 * tangY + m23 * tangZ);\n                    tz += weight * (m31 * tangX + m32 * tangY + m33 * tangZ);\n                    ++k;\n                }\n                else {\n                    j += (this._jointsPerVertex - k);\n                    k = this._jointsPerVertex;\n                }\n            }\n            targetPositions[i0] = vx;\n            targetPositions[i0 + 1] = vy;\n            if (posDim == 3)\n                targetPositions[i0 + 2] = vz;\n            targetNormals[i1] = nx;\n            targetNormals[i1 + 1] = ny;\n            targetNormals[i1 + 2] = nz;\n            targetTangents[i1] = tx;\n            targetTangents[i1 + 1] = ty;\n            targetTangents[i1 + 2] = tz;\n            index++;\n        }\n        targetElements.setPositions(targetPositions);\n        targetElements.setNormals(targetNormals);\n        targetElements.setTangents(targetTangents);\n    };\n    /**\n     * Converts a local hierarchical skeleton pose to a global pose\n     * @param targetPose The SkeletonPose object that will contain the global pose.\n     * @param skeleton The skeleton containing the joints, and as such, the hierarchical data to transform to global poses.\n     */\n    SkeletonAnimator.prototype.localToGlobalPose = function (sourcePose, targetPose, skeleton) {\n        var globalPoses = targetPose.jointPoses;\n        var globalJointPose;\n        var joints = skeleton.joints;\n        var len = sourcePose.numJointPoses;\n        var jointPoses = sourcePose.jointPoses;\n        var parentIndex;\n        var joint;\n        var parentPose;\n        var pose;\n        var or;\n        var tr;\n        var t;\n        var q;\n        var x1, y1, z1, w1;\n        var x2, y2, z2, w2;\n        var x3, y3, z3;\n        // :s\n        if (globalPoses.length != len)\n            globalPoses.length = len;\n        for (var i = 0; i < len; ++i) {\n            globalJointPose = globalPoses[i];\n            if (globalJointPose == null)\n                globalJointPose = globalPoses[i] = new JointPose_1.JointPose();\n            joint = joints[i];\n            parentIndex = joint.parentIndex;\n            pose = jointPoses[i];\n            q = globalJointPose.orientation;\n            t = globalJointPose.translation;\n            if (parentIndex < 0) {\n                tr = pose.translation;\n                or = pose.orientation;\n                q.x = or.x;\n                q.y = or.y;\n                q.z = or.z;\n                q.w = or.w;\n                t.x = tr.x;\n                t.y = tr.y;\n                t.z = tr.z;\n            }\n            else {\n                // append parent pose\n                parentPose = globalPoses[parentIndex];\n                // rotate point\n                or = parentPose.orientation;\n                tr = pose.translation;\n                x2 = or.x;\n                y2 = or.y;\n                z2 = or.z;\n                w2 = or.w;\n                x3 = tr.x;\n                y3 = tr.y;\n                z3 = tr.z;\n                w1 = -x2 * x3 - y2 * y3 - z2 * z3;\n                x1 = w2 * x3 + y2 * z3 - z2 * y3;\n                y1 = w2 * y3 - x2 * z3 + z2 * x3;\n                z1 = w2 * z3 + x2 * y3 - y2 * x3;\n                // append parent translation\n                tr = parentPose.translation;\n                t.x = -w1 * x2 + x1 * w2 - y1 * z2 + z1 * y2 + tr.x;\n                t.y = -w1 * y2 + x1 * z2 + y1 * w2 - z1 * x2 + tr.y;\n                t.z = -w1 * z2 - x1 * y2 + y1 * x2 + z1 * w2 + tr.z;\n                // append parent orientation\n                x1 = or.x;\n                y1 = or.y;\n                z1 = or.z;\n                w1 = or.w;\n                or = pose.orientation;\n                x2 = or.x;\n                y2 = or.y;\n                z2 = or.z;\n                w2 = or.w;\n                q.w = w1 * w2 - x1 * x2 - y1 * y2 - z1 * z2;\n                q.x = w1 * x2 + x1 * w2 + y1 * z2 - z1 * y2;\n                q.y = w1 * y2 - x1 * z2 + y1 * w2 + z1 * x2;\n                q.z = w1 * z2 + x1 * y2 - y1 * x2 + z1 * w2;\n            }\n        }\n    };\n    SkeletonAnimator.prototype.onTransitionComplete = function (event) {\n        if (event.type == AnimationStateEvent_1.AnimationStateEvent.TRANSITION_COMPLETE) {\n            event.animationNode.removeEventListener(AnimationStateEvent_1.AnimationStateEvent.TRANSITION_COMPLETE, this._onTransitionCompleteDelegate);\n            //if this is the current active state transition, revert control to the active node\n            if (this._pActiveState == event.animationState) {\n                this._pActiveNode = this._pAnimationSet.getAnimation(this._pActiveAnimationName);\n                this._pActiveState = this.getAnimationState(this._pActiveNode);\n                this._activeSkeletonState = this._pActiveState;\n            }\n        }\n    };\n    SkeletonAnimator.prototype.onIndicesUpdate = function (event) {\n        var elements = event.target;\n        this._morphedElements[elements.id].setIndices(elements.indices);\n    };\n    SkeletonAnimator.prototype.onVerticesUpdate = function (event) {\n        var elements = event.target;\n        var morphGraphics = this._morphedElements[elements.id];\n        switch (event.attributesView) {\n            case elements.uvs:\n                morphGraphics.setUVs(elements.uvs.get(elements.numVertices));\n                break;\n            case elements.getCustomAtributes(\"secondaryUVs\"):\n                morphGraphics.setCustomAttributes(\"secondaryUVs\", elements.getCustomAtributes(\"secondaryUVs\").get(elements.numVertices));\n                break;\n        }\n    };\n    return SkeletonAnimator;\n}(AnimatorBase_1.AnimatorBase));\nexports.SkeletonAnimator = SkeletonAnimator;\n\n},{\"../animators/AnimatorBase\":\"awayjs-renderergl/lib/animators/AnimatorBase\",\"../animators/data/JointPose\":\"awayjs-renderergl/lib/animators/data/JointPose\",\"../animators/data/SkeletonPose\":\"awayjs-renderergl/lib/animators/data/SkeletonPose\",\"../events/AnimationStateEvent\":\"awayjs-renderergl/lib/events/AnimationStateEvent\",\"awayjs-display/lib/events/ElementsEvent\":undefined}],\"awayjs-renderergl/lib/animators/VertexAnimationSet\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AnimationSetBase_1 = require(\"../animators/AnimationSetBase\");\nvar AnimationRegisterData_1 = require(\"../animators/data/AnimationRegisterData\");\nvar VertexAnimationMode_1 = require(\"../animators/data/VertexAnimationMode\");\n/**\n * The animation data set used by vertex-based animators, containing vertex animation state data.\n *\n * @see VertexAnimator\n */\nvar VertexAnimationSet = (function (_super) {\n    __extends(VertexAnimationSet, _super);\n    /**\n     * Returns whether or not normal data is used in last set GPU pass of the vertex shader.\n     */\n    //\t\tpublic get useNormals():boolean\n    //\t\t{\n    //\t\t\treturn this._uploadNormals;\n    //\t\t}\n    /**\n     * Creates a new <code>VertexAnimationSet</code> object.\n     *\n     * @param numPoses The number of poses made available at once to the GPU animation code.\n     * @param blendMode Optional value for setting the animation mode of the vertex animator object.\n     *\n     * @see away3d.animators.data.VertexAnimationMode\n     */\n    function VertexAnimationSet(numPoses, blendMode) {\n        if (numPoses === void 0) { numPoses = 2; }\n        if (blendMode === void 0) { blendMode = \"absolute\"; }\n        _super.call(this);\n        this._numPoses = numPoses;\n        this._blendMode = blendMode;\n    }\n    Object.defineProperty(VertexAnimationSet.prototype, \"numPoses\", {\n        /**\n         * Returns the number of poses made available at once to the GPU animation code.\n         */\n        get: function () {\n            return this._numPoses;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VertexAnimationSet.prototype, \"blendMode\", {\n        /**\n         * Returns the active blend mode of the vertex animator object.\n         */\n        get: function () {\n            return this._blendMode;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @inheritDoc\n     */\n    VertexAnimationSet.prototype.getAGALVertexCode = function (shader, registerCache, sharedRegisters) {\n        //grab animationRegisterData from the materialpassbase or create a new one if the first time\n        this._iAnimationRegisterData = shader.animationRegisterData;\n        if (this._iAnimationRegisterData == null)\n            this._iAnimationRegisterData = shader.animationRegisterData = new AnimationRegisterData_1.AnimationRegisterData();\n        if (this._blendMode == VertexAnimationMode_1.VertexAnimationMode.ABSOLUTE)\n            return this.getAbsoluteAGALCode(shader, registerCache, sharedRegisters);\n        else\n            return this.getAdditiveAGALCode(shader, registerCache, sharedRegisters);\n    };\n    /**\n     * @inheritDoc\n     */\n    VertexAnimationSet.prototype.getAGALFragmentCode = function (shader, registerCache, shadedTarget) {\n        return \"\";\n    };\n    /**\n     * @inheritDoc\n     */\n    VertexAnimationSet.prototype.getAGALUVCode = function (shader, registerCache, sharedRegisters) {\n        return \"mov \" + sharedRegisters.uvTarget + \",\" + sharedRegisters.uvSource + \"\\n\";\n    };\n    /**\n     * @inheritDoc\n     */\n    VertexAnimationSet.prototype.doneAGALCode = function (shader) {\n    };\n    /**\n     * Generates the vertex AGAL code for absolute blending.\n     */\n    VertexAnimationSet.prototype.getAbsoluteAGALCode = function (shader, registerCache, sharedRegisters) {\n        var code = \"\";\n        var temp1 = registerCache.getFreeVertexVectorTemp();\n        registerCache.addVertexTempUsages(temp1, 1);\n        var temp2 = registerCache.getFreeVertexVectorTemp();\n        var regs = new Array(\".x\", \".y\", \".z\", \".w\");\n        var len = sharedRegisters.animatableAttributes.length;\n        var constantReg = registerCache.getFreeVertexConstant();\n        this._iAnimationRegisterData.weightsIndex = constantReg.index;\n        this._iAnimationRegisterData.poseIndices = new Array(this._numPoses);\n        var poseInput;\n        var k = 0;\n        if (len > 2)\n            len = 2;\n        for (var i = 0; i < len; ++i) {\n            code += \"mul \" + temp1 + \", \" + sharedRegisters.animatableAttributes[i] + \", \" + constantReg + regs[0] + \"\\n\";\n            for (var j = 1; j < this._numPoses; ++j) {\n                poseInput = registerCache.getFreeVertexAttribute();\n                this._iAnimationRegisterData.poseIndices[k++] = poseInput.index;\n                code += \"mul \" + temp2 + \", \" + poseInput + \", \" + constantReg + regs[j] + \"\\n\";\n                if (j < this._numPoses - 1)\n                    code += \"add \" + temp1 + \", \" + temp1 + \", \" + temp2 + \"\\n\";\n            }\n            code += \"add \" + sharedRegisters.animationTargetRegisters[i] + \", \" + temp1 + \", \" + temp2 + \"\\n\";\n        }\n        // add code for bitangents if tangents are used\n        if (shader.tangentDependencies > 0 || shader.outputsNormals) {\n            code += \"dp3 \" + temp1 + \".x, \" + sharedRegisters.animatableAttributes[2] + \", \" + sharedRegisters.animationTargetRegisters[1] + \"\\n\" +\n                \"mul \" + temp1 + \", \" + sharedRegisters.animationTargetRegisters[1] + \", \" + temp1 + \".x\\n\" +\n                \"sub \" + sharedRegisters.animationTargetRegisters[2] + \", \" + sharedRegisters.animationTargetRegisters[2] + \", \" + temp1 + \"\\n\";\n        }\n        //\n        // // simply write attributes to targets, do not animate them\n        // // projection will pick up on targets[0] to do the projection\n        // var len:number = sharedRegisters.animatableAttributes.length;\n        // for (var i:number = 0; i < len; ++i)\n        // \tcode += \"mov \" + sharedRegisters.animationTargetRegisters[i] + \", \" + sharedRegisters.animatableAttributes[i] + \"\\n\";\n        return code;\n    };\n    /**\n     * Generates the vertex AGAL code for additive blending.\n     */\n    VertexAnimationSet.prototype.getAdditiveAGALCode = function (shader, registerCache, sharedRegisters) {\n        var code = \"\";\n        var len = sharedRegisters.animatableAttributes.length;\n        var regs = [\".x\", \".y\", \".z\", \".w\"];\n        var temp1 = registerCache.getFreeVertexVectorTemp();\n        var constantReg = registerCache.getFreeVertexConstant();\n        this._iAnimationRegisterData.weightsIndex = constantReg.index;\n        this._iAnimationRegisterData.poseIndices = new Array(this._numPoses);\n        var poseInput;\n        var k = 0;\n        if (len > 2)\n            len = 2;\n        code += \"mov  \" + sharedRegisters.animationTargetRegisters[0] + \", \" + sharedRegisters.animatableAttributes[0] + \"\\n\";\n        if (shader.normalDependencies > 0)\n            code += \"mov \" + sharedRegisters.animationTargetRegisters[1] + \", \" + sharedRegisters.animatableAttributes[1] + \"\\n\";\n        for (var i = 0; i < len; ++i) {\n            for (var j = 0; j < this._numPoses; ++j) {\n                poseInput = registerCache.getFreeVertexAttribute();\n                this._iAnimationRegisterData.poseIndices[k++] = poseInput.index;\n                code += \"mul \" + temp1 + \", \" + poseInput + \", \" + constantReg + regs[j] + \"\\n\" +\n                    \"add \" + sharedRegisters.animationTargetRegisters[i] + \", \" + sharedRegisters.animationTargetRegisters[i] + \", \" + temp1 + \"\\n\";\n            }\n        }\n        if (shader.tangentDependencies > 0 || shader.outputsNormals) {\n            code += \"dp3 \" + temp1 + \".x, \" + sharedRegisters.animatableAttributes[2] + \", \" + sharedRegisters.animationTargetRegisters[1] + \"\\n\" +\n                \"mul \" + temp1 + \", \" + sharedRegisters.animationTargetRegisters[1] + \", \" + temp1 + \".x\\n\" +\n                \"sub \" + sharedRegisters.animationTargetRegisters[2] + \", \" + sharedRegisters.animatableAttributes[2] + \", \" + temp1 + \"\\n\";\n        }\n        return code;\n    };\n    return VertexAnimationSet;\n}(AnimationSetBase_1.AnimationSetBase));\nexports.VertexAnimationSet = VertexAnimationSet;\n\n},{\"../animators/AnimationSetBase\":\"awayjs-renderergl/lib/animators/AnimationSetBase\",\"../animators/data/AnimationRegisterData\":\"awayjs-renderergl/lib/animators/data/AnimationRegisterData\",\"../animators/data/VertexAnimationMode\":\"awayjs-renderergl/lib/animators/data/VertexAnimationMode\"}],\"awayjs-renderergl/lib/animators/VertexAnimator\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar TriangleElements_1 = require(\"awayjs-display/lib/graphics/TriangleElements\");\nvar AnimatorBase_1 = require(\"../animators/AnimatorBase\");\nvar VertexAnimationMode_1 = require(\"../animators/data/VertexAnimationMode\");\n/**\n * Provides an interface for assigning vertex-based animation data sets to sprite-based entity objects\n * and controlling the various available states of animation through an interative playhead that can be\n * automatically updated or manually triggered.\n */\nvar VertexAnimator = (function (_super) {\n    __extends(VertexAnimator, _super);\n    /**\n     * Creates a new <code>VertexAnimator</code> object.\n     *\n     * @param vertexAnimationSet The animation data set containing the vertex animations used by the animator.\n     */\n    function VertexAnimator(vertexAnimationSet) {\n        _super.call(this, vertexAnimationSet);\n        this._poses = new Array();\n        this._weights = new Float32Array([1, 0, 0, 0]);\n        this._vertexAnimationSet = vertexAnimationSet;\n    }\n    /**\n     * @inheritDoc\n     */\n    VertexAnimator.prototype.clone = function () {\n        return new VertexAnimator(this._vertexAnimationSet);\n    };\n    /**\n     * Plays a sequence with a given name. If the sequence is not found, it may not be loaded yet, and it will retry every frame.\n     * @param sequenceName The name of the clip to be played.\n     */\n    VertexAnimator.prototype.play = function (name, transition, offset) {\n        if (transition === void 0) { transition = null; }\n        if (offset === void 0) { offset = NaN; }\n        if (this._pActiveAnimationName == name)\n            return;\n        this._pActiveAnimationName = name;\n        //TODO: implement transitions in vertex animator\n        if (!this._pAnimationSet.hasAnimation(name))\n            throw new Error(\"Animation root node \" + name + \" not found!\");\n        this._pActiveNode = this._pAnimationSet.getAnimation(name);\n        this._pActiveState = this.getAnimationState(this._pActiveNode);\n        if (this.updatePosition) {\n            //update straight away to reset position deltas\n            this._pActiveState.update(this._pAbsoluteTime);\n            this._pActiveState.positionDelta;\n        }\n        this._activeVertexState = this._pActiveState;\n        this.start();\n        //apply a time offset if specified\n        if (!isNaN(offset))\n            this.reset(name, offset);\n    };\n    /**\n     * @inheritDoc\n     */\n    VertexAnimator.prototype._pUpdateDeltaTime = function (dt) {\n        _super.prototype._pUpdateDeltaTime.call(this, dt);\n        var geometryFlag = false;\n        if (this._poses[0] != this._activeVertexState.currentGraphics) {\n            this._poses[0] = this._activeVertexState.currentGraphics;\n            geometryFlag = true;\n        }\n        if (this._poses[1] != this._activeVertexState.nextGraphics)\n            this._poses[1] = this._activeVertexState.nextGraphics;\n        this._weights[0] = 1 - (this._weights[1] = this._activeVertexState.blendWeight);\n        if (geometryFlag)\n            this.invalidateElements();\n    };\n    /**\n     * @inheritDoc\n     */\n    VertexAnimator.prototype.setRenderState = function (shader, renderable, stage, camera) {\n        // todo: add code for when running on cpu\n        // this type of animation can only be SubSprite\n        var graphic = renderable.graphic;\n        var elements = graphic.elements;\n        // if no poses defined, set temp data\n        if (!this._poses.length) {\n            this.setNullPose(shader, elements, stage);\n            return;\n        }\n        var animationRegisterData = shader.animationRegisterData;\n        var i;\n        var len = this._vertexAnimationSet.numPoses;\n        shader.setVertexConstFromArray(animationRegisterData.weightsIndex, this._weights);\n        if (this._vertexAnimationSet.blendMode == VertexAnimationMode_1.VertexAnimationMode.ABSOLUTE)\n            i = 1;\n        else\n            i = 0;\n        var elementsGL;\n        var k = 0;\n        for (; i < len; ++i) {\n            elements = this._poses[i].getGraphicAt(graphic._iIndex).elements || graphic.elements;\n            elementsGL = stage.getAbstraction(elements);\n            elementsGL._indexMappings = stage.getAbstraction(graphic.elements).getIndexMappings();\n            if (elements.isAsset(TriangleElements_1.TriangleElements)) {\n                elementsGL.activateVertexBufferVO(animationRegisterData.poseIndices[k++], elements.positions);\n                if (shader.normalDependencies > 0)\n                    elementsGL.activateVertexBufferVO(animationRegisterData.poseIndices[k++], elements.normals);\n            }\n        }\n    };\n    VertexAnimator.prototype.setNullPose = function (shader, elements, stage) {\n        var animationRegisterData = shader.animationRegisterData;\n        shader.setVertexConstFromArray(animationRegisterData.weightsIndex, this._weights);\n        var elementsGL = stage.getAbstraction(elements);\n        var k = 0;\n        if (this._vertexAnimationSet.blendMode == VertexAnimationMode_1.VertexAnimationMode.ABSOLUTE) {\n            var len = this._vertexAnimationSet.numPoses;\n            for (var i = 1; i < len; ++i) {\n                if (elements.isAsset(TriangleElements_1.TriangleElements)) {\n                    elementsGL.activateVertexBufferVO(animationRegisterData.poseIndices[k++], elements.positions);\n                    if (shader.normalDependencies > 0)\n                        elementsGL.activateVertexBufferVO(animationRegisterData.poseIndices[k++], elements.normals);\n                }\n            }\n        }\n        // todo: set temp data for additive?\n    };\n    /**\n     * Verifies if the animation will be used on cpu. Needs to be true for all passes for a material to be able to use it on gpu.\n     * Needs to be called if gpu code is potentially required.\n     */\n    VertexAnimator.prototype.testGPUCompatibility = function (shader) {\n    };\n    VertexAnimator.prototype.getRenderableElements = function (renderable, sourceElements) {\n        if (this._vertexAnimationSet.blendMode == VertexAnimationMode_1.VertexAnimationMode.ABSOLUTE && this._poses.length)\n            return this._poses[0].getGraphicAt(renderable.graphic._iIndex).elements || sourceElements;\n        //nothing to do here\n        return sourceElements;\n    };\n    return VertexAnimator;\n}(AnimatorBase_1.AnimatorBase));\nexports.VertexAnimator = VertexAnimator;\n\n},{\"../animators/AnimatorBase\":\"awayjs-renderergl/lib/animators/AnimatorBase\",\"../animators/data/VertexAnimationMode\":\"awayjs-renderergl/lib/animators/data/VertexAnimationMode\",\"awayjs-display/lib/graphics/TriangleElements\":undefined}],\"awayjs-renderergl/lib/animators/data/AnimationElements\":[function(require,module,exports){\n\"use strict\";\n/**\n * ...\n */\nvar AnimationElements = (function () {\n    function AnimationElements() {\n        this._pVertexBuffer = new Array(8);\n        this._pBufferContext = new Array(8);\n        this._pBufferDirty = new Array(8);\n        this.numProcessedVertices = 0;\n        this.previousTime = Number.NEGATIVE_INFINITY;\n        this.animationParticles = new Array();\n        for (var i = 0; i < 8; i++)\n            this._pBufferDirty[i] = true;\n        this._iUniqueId = AnimationElements.SUBGEOM_ID_COUNT++;\n    }\n    AnimationElements.prototype.createVertexData = function (numVertices, totalLenOfOneVertex) {\n        this._numVertices = numVertices;\n        this._totalLenOfOneVertex = totalLenOfOneVertex;\n        this._pVertexData = new Array(numVertices * totalLenOfOneVertex);\n    };\n    AnimationElements.prototype.activateVertexBuffer = function (index, bufferOffset, stage, format) {\n        var contextIndex = stage.stageIndex;\n        var context = stage.context;\n        var buffer = this._pVertexBuffer[contextIndex];\n        if (!buffer || this._pBufferContext[contextIndex] != context) {\n            buffer = this._pVertexBuffer[contextIndex] = context.createVertexBuffer(this._numVertices, this._totalLenOfOneVertex * 4);\n            this._pBufferContext[contextIndex] = context;\n            this._pBufferDirty[contextIndex] = true;\n        }\n        if (this._pBufferDirty[contextIndex]) {\n            buffer.uploadFromArray(this._pVertexData, 0, this._numVertices);\n            this._pBufferDirty[contextIndex] = false;\n        }\n        context.setVertexBufferAt(index, buffer, bufferOffset * 4, format);\n    };\n    AnimationElements.prototype.dispose = function () {\n        while (this._pVertexBuffer.length) {\n            var vertexBuffer = this._pVertexBuffer.pop();\n            if (vertexBuffer)\n                vertexBuffer.dispose();\n        }\n    };\n    AnimationElements.prototype.invalidateBuffer = function () {\n        for (var i = 0; i < 8; i++)\n            this._pBufferDirty[i] = true;\n    };\n    Object.defineProperty(AnimationElements.prototype, \"vertexData\", {\n        get: function () {\n            return this._pVertexData;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimationElements.prototype, \"numVertices\", {\n        get: function () {\n            return this._numVertices;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimationElements.prototype, \"totalLenOfOneVertex\", {\n        get: function () {\n            return this._totalLenOfOneVertex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AnimationElements.SUBGEOM_ID_COUNT = 0;\n    return AnimationElements;\n}());\nexports.AnimationElements = AnimationElements;\n\n},{}],\"awayjs-renderergl/lib/animators/data/AnimationRegisterData\":[function(require,module,exports){\n\"use strict\";\nvar ShaderRegisterElement_1 = require(\"../../shaders/ShaderRegisterElement\");\n/**\n * ...\n */\nvar AnimationRegisterData = (function () {\n    function AnimationRegisterData() {\n        this.indexDictionary = new Object();\n    }\n    AnimationRegisterData.prototype.reset = function (registerCache, sharedRegisters, needVelocity) {\n        this.rotationRegisters = new Array();\n        this.positionAttribute = sharedRegisters.animatableAttributes[0];\n        this.scaleAndRotateTarget = sharedRegisters.animationTargetRegisters[0];\n        for (var i = 1; i < sharedRegisters.animationTargetRegisters.length; i++)\n            this.rotationRegisters.push(sharedRegisters.animationTargetRegisters[i]);\n        //allot const register\n        this.vertexZeroConst = registerCache.getFreeVertexConstant();\n        this.vertexZeroConst = new ShaderRegisterElement_1.ShaderRegisterElement(this.vertexZeroConst.regName, this.vertexZeroConst.index, 0);\n        this.vertexOneConst = new ShaderRegisterElement_1.ShaderRegisterElement(this.vertexZeroConst.regName, this.vertexZeroConst.index, 1);\n        this.vertexTwoConst = new ShaderRegisterElement_1.ShaderRegisterElement(this.vertexZeroConst.regName, this.vertexZeroConst.index, 2);\n        //allot temp register\n        this.positionTarget = registerCache.getFreeVertexVectorTemp();\n        registerCache.addVertexTempUsages(this.positionTarget, 1);\n        this.positionTarget = new ShaderRegisterElement_1.ShaderRegisterElement(this.positionTarget.regName, this.positionTarget.index);\n        if (needVelocity) {\n            this.velocityTarget = registerCache.getFreeVertexVectorTemp();\n            registerCache.addVertexTempUsages(this.velocityTarget, 1);\n            this.velocityTarget = new ShaderRegisterElement_1.ShaderRegisterElement(this.velocityTarget.regName, this.velocityTarget.index);\n            this.vertexTime = new ShaderRegisterElement_1.ShaderRegisterElement(this.velocityTarget.regName, this.velocityTarget.index, 3);\n            this.vertexLife = new ShaderRegisterElement_1.ShaderRegisterElement(this.positionTarget.regName, this.positionTarget.index, 3);\n        }\n        else {\n            var tempTime = registerCache.getFreeVertexVectorTemp();\n            registerCache.addVertexTempUsages(tempTime, 1);\n            this.vertexTime = new ShaderRegisterElement_1.ShaderRegisterElement(tempTime.regName, tempTime.index, 0);\n            this.vertexLife = new ShaderRegisterElement_1.ShaderRegisterElement(tempTime.regName, tempTime.index, 1);\n        }\n    };\n    AnimationRegisterData.prototype.setUVSourceAndTarget = function (sharedRegisters) {\n        this.uvVar = sharedRegisters.uvTarget;\n        this.uvAttribute = sharedRegisters.uvSource;\n        //uv action is processed after normal actions,so use offsetTarget as uvTarget\n        this.uvTarget = new ShaderRegisterElement_1.ShaderRegisterElement(this.positionTarget.regName, this.positionTarget.index);\n    };\n    AnimationRegisterData.prototype.setRegisterIndex = function (node, parameterIndex, registerIndex) {\n        //8 should be enough for any node.\n        var t = this.indexDictionary[node.id];\n        if (t == null)\n            t = this.indexDictionary[node.id] = new Array(8);\n        t[parameterIndex] = registerIndex;\n    };\n    AnimationRegisterData.prototype.getRegisterIndex = function (node, parameterIndex) {\n        return this.indexDictionary[node.id][parameterIndex];\n    };\n    return AnimationRegisterData;\n}());\nexports.AnimationRegisterData = AnimationRegisterData;\n\n},{\"../../shaders/ShaderRegisterElement\":\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\"}],\"awayjs-renderergl/lib/animators/data/ColorSegmentPoint\":[function(require,module,exports){\n\"use strict\";\nvar ColorSegmentPoint = (function () {\n    function ColorSegmentPoint(life, color) {\n        //0<life<1\n        if (life <= 0 || life >= 1)\n            throw (new Error(\"life exceeds range (0,1)\"));\n        this._life = life;\n        this._color = color;\n    }\n    Object.defineProperty(ColorSegmentPoint.prototype, \"color\", {\n        get: function () {\n            return this._color;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColorSegmentPoint.prototype, \"life\", {\n        get: function () {\n            return this._life;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ColorSegmentPoint;\n}());\nexports.ColorSegmentPoint = ColorSegmentPoint;\n\n},{}],\"awayjs-renderergl/lib/animators/data/JointPose\":[function(require,module,exports){\n\"use strict\";\nvar Matrix3D_1 = require(\"awayjs-core/lib/geom/Matrix3D\");\nvar Quaternion_1 = require(\"awayjs-core/lib/geom/Quaternion\");\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\n/**\n * Contains transformation data for a skeleton joint, used for skeleton animation.\n *\n * @see away.animation.Skeleton\n * @see away.animation.SkeletonJoint\n *\n * todo: support (uniform) scale\n */\nvar JointPose = (function () {\n    function JointPose() {\n        /**\n         * The rotation of the pose stored as a quaternion\n         */\n        this.orientation = new Quaternion_1.Quaternion();\n        /**\n         * The translation of the pose\n         */\n        this.translation = new Vector3D_1.Vector3D();\n    }\n    /**\n     * Converts the transformation to a Matrix3D representation.\n     *\n     * @param target An optional target matrix to store the transformation. If not provided, it will create a new instance.\n     * @return The transformation matrix of the pose.\n     */\n    JointPose.prototype.toMatrix3D = function (target) {\n        if (target === void 0) { target = null; }\n        if (target == null)\n            target = new Matrix3D_1.Matrix3D();\n        this.orientation.toMatrix3D(target);\n        target.appendTranslation(this.translation.x, this.translation.y, this.translation.z);\n        return target;\n    };\n    /**\n     * Copies the transformation data from a source pose object into the existing pose object.\n     *\n     * @param pose The source pose to copy from.\n     */\n    JointPose.prototype.copyFrom = function (pose) {\n        var or = pose.orientation;\n        var tr = pose.translation;\n        this.orientation.x = or.x;\n        this.orientation.y = or.y;\n        this.orientation.z = or.z;\n        this.orientation.w = or.w;\n        this.translation.x = tr.x;\n        this.translation.y = tr.y;\n        this.translation.z = tr.z;\n    };\n    return JointPose;\n}());\nexports.JointPose = JointPose;\n\n},{\"awayjs-core/lib/geom/Matrix3D\":undefined,\"awayjs-core/lib/geom/Quaternion\":undefined,\"awayjs-core/lib/geom/Vector3D\":undefined}],\"awayjs-renderergl/lib/animators/data/ParticleAnimationData\":[function(require,module,exports){\n\"use strict\";\n/**\n * ...\n */\nvar ParticleAnimationData = (function () {\n    function ParticleAnimationData(index, startTime, duration, delay, particle) {\n        this.index = index;\n        this.startTime = startTime;\n        this.totalTime = duration + delay;\n        this.duration = duration;\n        this.delay = delay;\n        this.startVertexIndex = particle.startVertexIndex;\n        this.numVertices = particle.numVertices;\n    }\n    return ParticleAnimationData;\n}());\nexports.ParticleAnimationData = ParticleAnimationData;\n\n},{}],\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\":[function(require,module,exports){\n\"use strict\";\n/**\n * Options for setting the properties mode of a particle animation node.\n */\nvar ParticlePropertiesMode = (function () {\n    function ParticlePropertiesMode() {\n    }\n    /**\n     * Mode that defines the particle node as acting on global properties (ie. the properties set in the node constructor or the corresponding animation state).\n     */\n    ParticlePropertiesMode.GLOBAL = 0;\n    /**\n     * Mode that defines the particle node as acting on local static properties (ie. the properties of particles set in the initialising on the animation set).\n     */\n    ParticlePropertiesMode.LOCAL_STATIC = 1;\n    /**\n     * Mode that defines the particle node as acting on local dynamic properties (ie. the properties of the particles set in the corresponding animation state).\n     */\n    ParticlePropertiesMode.LOCAL_DYNAMIC = 2;\n    return ParticlePropertiesMode;\n}());\nexports.ParticlePropertiesMode = ParticlePropertiesMode;\n\n},{}],\"awayjs-renderergl/lib/animators/data/ParticleProperties\":[function(require,module,exports){\n\"use strict\";\n/**\n * Dynamic class for holding the local properties of a particle, used for processing the static properties\n * of particles in the particle animation set before beginning upload to the GPU.\n */\nvar ParticleProperties = (function () {\n    function ParticleProperties() {\n    }\n    return ParticleProperties;\n}());\nexports.ParticleProperties = ParticleProperties;\n\n},{}],\"awayjs-renderergl/lib/animators/data/SkeletonJoint\":[function(require,module,exports){\n\"use strict\";\n/**\n * A value obect representing a single joint in a skeleton object.\n *\n * @see away.animators.Skeleton\n */\nvar SkeletonJoint = (function () {\n    /**\n     * Creates a new <code>SkeletonJoint</code> object\n     */\n    function SkeletonJoint() {\n        /**\n         * The index of the parent joint in the skeleton's joints vector.\n         *\n         * @see away.animators.Skeleton#joints\n         */\n        this.parentIndex = -1;\n    }\n    return SkeletonJoint;\n}());\nexports.SkeletonJoint = SkeletonJoint;\n\n},{}],\"awayjs-renderergl/lib/animators/data/SkeletonPose\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AssetBase_1 = require(\"awayjs-core/lib/library/AssetBase\");\nvar JointPose_1 = require(\"../../animators/data/JointPose\");\n/**\n * A collection of pose objects, determining the pose for an entire skeleton.\n * The <code>jointPoses</code> vector object corresponds to a skeleton's <code>joints</code> vector object, however, there is no\n * reference to a skeleton's instance, since several skeletons can be influenced by the same pose (eg: animation\n * clips are added to any animator with a valid skeleton)\n *\n * @see away.animators.Skeleton\n * @see away.animators.JointPose\n */\nvar SkeletonPose = (function (_super) {\n    __extends(SkeletonPose, _super);\n    /**\n     * Creates a new <code>SkeletonPose</code> object.\n     */\n    function SkeletonPose() {\n        _super.call(this);\n        this.jointPoses = new Array();\n    }\n    Object.defineProperty(SkeletonPose.prototype, \"numJointPoses\", {\n        /**\n         * The total number of joint poses in the skeleton pose.\n         */\n        get: function () {\n            return this.jointPoses.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SkeletonPose.prototype, \"assetType\", {\n        /**\n         * @inheritDoc\n         */\n        get: function () {\n            return SkeletonPose.assetType;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns the joint pose object with the given joint name, otherwise returns a null object.\n     *\n     * @param jointName The name of the joint object whose pose is to be found.\n     * @return The pose object with the given joint name.\n     */\n    SkeletonPose.prototype.jointPoseFromName = function (jointName) {\n        var jointPoseIndex = this.jointPoseIndexFromName(jointName);\n        if (jointPoseIndex != -1)\n            return this.jointPoses[jointPoseIndex];\n        else\n            return null;\n    };\n    /**\n     * Returns the pose index, given the joint name. -1 is returned if the joint name is not found in the pose.\n     *\n     * @param The name of the joint object whose pose is to be found.\n     * @return The index of the pose object in the jointPoses Array\n     *\n     * @see #jointPoses\n     */\n    SkeletonPose.prototype.jointPoseIndexFromName = function (jointName) {\n        // this is implemented as a linear search, rather than a possibly\n        // more optimal method (Dictionary lookup, for example) because:\n        // a) it is assumed that it will be called once for each joint\n        // b) it is assumed that it will be called only during load, and not during main loop\n        // c) maintaining a dictionary (for safety) would dictate an interface to access JointPoses,\n        //    rather than direct array access.  this would be sub-optimal.\n        var jointPoseIndex;\n        var jointPose;\n        for (var i; i < this.jointPoses.length; i++) {\n            jointPose = this.jointPoses[i];\n            if (jointPose.name == jointName)\n                return jointPoseIndex;\n            jointPoseIndex++;\n        }\n        return -1;\n    };\n    /**\n     * Creates a copy of the <code>SkeletonPose</code> object, with a dulpicate of its component joint poses.\n     *\n     * @return SkeletonPose\n     */\n    SkeletonPose.prototype.clone = function () {\n        var clone = new SkeletonPose();\n        var numJointPoses = this.jointPoses.length;\n        for (var i = 0; i < numJointPoses; i++) {\n            var cloneJointPose = new JointPose_1.JointPose();\n            var thisJointPose = this.jointPoses[i];\n            cloneJointPose.name = thisJointPose.name;\n            cloneJointPose.copyFrom(thisJointPose);\n            clone.jointPoses[i] = cloneJointPose;\n        }\n        return clone;\n    };\n    /**\n     * @inheritDoc\n     */\n    SkeletonPose.prototype.dispose = function () {\n        this.jointPoses.length = 0;\n    };\n    SkeletonPose.assetType = \"[asset SkeletonPose]\";\n    return SkeletonPose;\n}(AssetBase_1.AssetBase));\nexports.SkeletonPose = SkeletonPose;\n\n},{\"../../animators/data/JointPose\":\"awayjs-renderergl/lib/animators/data/JointPose\",\"awayjs-core/lib/library/AssetBase\":undefined}],\"awayjs-renderergl/lib/animators/data/Skeleton\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AssetBase_1 = require(\"awayjs-core/lib/library/AssetBase\");\n/**\n * A Skeleton object is a hierarchical grouping of joint objects that can be used for skeletal animation.\n *\n * @see away.animators.SkeletonJoint\n */\nvar Skeleton = (function (_super) {\n    __extends(Skeleton, _super);\n    /**\n     * Creates a new <code>Skeleton</code> object\n     */\n    function Skeleton() {\n        _super.call(this);\n        // in the long run, it might be a better idea to not store Joint objects, but keep all data in Vectors, that we can upload easily?\n        this.joints = new Array();\n    }\n    Object.defineProperty(Skeleton.prototype, \"numJoints\", {\n        /**\n         * The total number of joints in the skeleton.\n         */\n        get: function () {\n            return this.joints.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns the joint object in the skeleton with the given name, otherwise returns a null object.\n     *\n     * @param jointName The name of the joint object to be found.\n     * @return The joint object with the given name.\n     *\n     * @see #joints\n     */\n    Skeleton.prototype.jointFromName = function (jointName) {\n        var jointIndex = this.jointIndexFromName(jointName);\n        if (jointIndex != -1)\n            return this.joints[jointIndex];\n        else\n            return null;\n    };\n    /**\n     * Returns the joint index, given the joint name. -1 is returned if the joint name is not found.\n     *\n     * @param jointName The name of the joint object to be found.\n     * @return The index of the joint object in the joints Array\n     *\n     * @see #joints\n     */\n    Skeleton.prototype.jointIndexFromName = function (jointName) {\n        // this is implemented as a linear search, rather than a possibly\n        // more optimal method (Dictionary lookup, for example) because:\n        // a) it is assumed that it will be called once for each joint\n        // b) it is assumed that it will be called only during load, and not during main loop\n        // c) maintaining a dictionary (for safety) would dictate an interface to access SkeletonJoints,\n        //    rather than direct array access.  this would be sub-optimal.\n        var jointIndex;\n        var joint;\n        for (var i; i < this.joints.length; i++) {\n            joint = this.joints[i];\n            if (joint.name == jointName)\n                return jointIndex;\n            jointIndex++;\n        }\n        return -1;\n    };\n    /**\n     * @inheritDoc\n     */\n    Skeleton.prototype.dispose = function () {\n        this.joints.length = 0;\n    };\n    Object.defineProperty(Skeleton.prototype, \"assetType\", {\n        /**\n         * @inheritDoc\n         */\n        get: function () {\n            return Skeleton.assetType;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Skeleton.assetType = \"[asset Skeleton]\";\n    return Skeleton;\n}(AssetBase_1.AssetBase));\nexports.Skeleton = Skeleton;\n\n},{\"awayjs-core/lib/library/AssetBase\":undefined}],\"awayjs-renderergl/lib/animators/data/VertexAnimationMode\":[function(require,module,exports){\n\"use strict\";\n/**\n * Options for setting the animation mode of a vertex animator object.\n *\n * @see away.animators.VertexAnimator\n */\nvar VertexAnimationMode = (function () {\n    function VertexAnimationMode() {\n    }\n    /**\n     * Animation mode that adds all outputs from active vertex animation state to form the current vertex animation pose.\n     */\n    VertexAnimationMode.ADDITIVE = \"additive\";\n    /**\n     * Animation mode that picks the output from a single vertex animation state to form the current vertex animation pose.\n     */\n    VertexAnimationMode.ABSOLUTE = \"absolute\";\n    return VertexAnimationMode;\n}());\nexports.VertexAnimationMode = VertexAnimationMode;\n\n},{}],\"awayjs-renderergl/lib/animators/nodes/AnimationClipNodeBase\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\nvar AnimationNodeBase_1 = require(\"awayjs-display/lib/animators/nodes/AnimationNodeBase\");\n/**\n * Provides an abstract base class for nodes with time-based animation data in an animation blend tree.\n */\nvar AnimationClipNodeBase = (function (_super) {\n    __extends(AnimationClipNodeBase, _super);\n    /**\n     * Creates a new <code>AnimationClipNodeBase</code> object.\n     */\n    function AnimationClipNodeBase() {\n        _super.call(this);\n        this._pLooping = true;\n        this._pTotalDuration = 0;\n        this._pStitchDirty = true;\n        this._pStitchFinalFrame = false;\n        this._pNumFrames = 0;\n        this._pDurations = new Array();\n        /*uint*/\n        this._pTotalDelta = new Vector3D_1.Vector3D();\n        this.fixedFrameRate = true;\n    }\n    Object.defineProperty(AnimationClipNodeBase.prototype, \"looping\", {\n        /**\n         * Determines whether the contents of the animation node have looping characteristics enabled.\n         */\n        get: function () {\n            return this._pLooping;\n        },\n        set: function (value) {\n            if (this._pLooping == value)\n                return;\n            this._pLooping = value;\n            this._pStitchDirty = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimationClipNodeBase.prototype, \"stitchFinalFrame\", {\n        /**\n         * Defines if looping content blends the final frame of animation data with the first (true) or works on the\n         * assumption that both first and last frames are identical (false). Defaults to false.\n         */\n        get: function () {\n            return this._pStitchFinalFrame;\n        },\n        set: function (value) {\n            if (this._pStitchFinalFrame == value)\n                return;\n            this._pStitchFinalFrame = value;\n            this._pStitchDirty = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimationClipNodeBase.prototype, \"totalDuration\", {\n        get: function () {\n            if (this._pStitchDirty)\n                this._pUpdateStitch();\n            return this._pTotalDuration;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimationClipNodeBase.prototype, \"totalDelta\", {\n        get: function () {\n            if (this._pStitchDirty)\n                this._pUpdateStitch();\n            return this._pTotalDelta;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimationClipNodeBase.prototype, \"lastFrame\", {\n        get: function () {\n            if (this._pStitchDirty)\n                this._pUpdateStitch();\n            return this._pLastFrame;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimationClipNodeBase.prototype, \"durations\", {\n        /**\n         * Returns a vector of time values representing the duration (in milliseconds) of each animation frame in the clip.\n         */\n        get: function () {\n            return this._pDurations;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Updates the node's final frame stitch state.\n     *\n     * @see #stitchFinalFrame\n     */\n    AnimationClipNodeBase.prototype._pUpdateStitch = function () {\n        this._pStitchDirty = false;\n        this._pLastFrame = (this._pStitchFinalFrame) ? this._pNumFrames : this._pNumFrames - 1;\n        this._pTotalDuration = 0;\n        this._pTotalDelta.x = 0;\n        this._pTotalDelta.y = 0;\n        this._pTotalDelta.z = 0;\n    };\n    return AnimationClipNodeBase;\n}(AnimationNodeBase_1.AnimationNodeBase));\nexports.AnimationClipNodeBase = AnimationClipNodeBase;\n\n},{\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-display/lib/animators/nodes/AnimationNodeBase\":undefined}],\"awayjs-renderergl/lib/animators/nodes/ParticleAccelerationNode\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\nvar ParticleAccelerationState_1 = require(\"../../animators/states/ParticleAccelerationState\");\n/**\n * A particle animation node used to apply a constant acceleration vector to the motion of a particle.\n */\nvar ParticleAccelerationNode = (function (_super) {\n    __extends(ParticleAccelerationNode, _super);\n    /**\n     * Creates a new <code>ParticleAccelerationNode</code>\n     *\n     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\n     * @param    [optional] acceleration    Defines the default acceleration vector of the node, used when in global mode.\n     */\n    function ParticleAccelerationNode(mode, acceleration) {\n        if (acceleration === void 0) { acceleration = null; }\n        _super.call(this, \"ParticleAcceleration\", mode, 3);\n        this._pStateClass = ParticleAccelerationState_1.ParticleAccelerationState;\n        this._acceleration = acceleration || new Vector3D_1.Vector3D();\n    }\n    /**\n     * @inheritDoc\n     */\n    ParticleAccelerationNode.prototype.getAGALVertexCode = function (shader, animationSet, registerCache, animationRegisterData) {\n        var accelerationValue = (this._pMode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) ? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\n        animationRegisterData.setRegisterIndex(this, ParticleAccelerationState_1.ParticleAccelerationState.ACCELERATION_INDEX, accelerationValue.index);\n        var temp = registerCache.getFreeVertexVectorTemp();\n        registerCache.addVertexTempUsages(temp, 1);\n        var code = \"mul \" + temp + \",\" + animationRegisterData.vertexTime + \",\" + accelerationValue + \"\\n\";\n        if (animationSet.needVelocity) {\n            var temp2 = registerCache.getFreeVertexVectorTemp();\n            code += \"mul \" + temp2 + \",\" + temp + \",\" + animationRegisterData.vertexTwoConst + \"\\n\";\n            code += \"add \" + animationRegisterData.velocityTarget + \".xyz,\" + temp2 + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz\\n\";\n        }\n        registerCache.removeVertexTempUsage(temp);\n        code += \"mul \" + temp + \",\" + temp + \",\" + animationRegisterData.vertexTime + \"\\n\";\n        code += \"add \" + animationRegisterData.positionTarget + \".xyz,\" + temp + \",\" + animationRegisterData.positionTarget + \".xyz\\n\";\n        return code;\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleAccelerationNode.prototype.getAnimationState = function (animator) {\n        return animator.getAnimationState(this);\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleAccelerationNode.prototype._iGeneratePropertyOfOneParticle = function (param) {\n        var tempAcceleration = param[ParticleAccelerationNode.ACCELERATION_VECTOR3D];\n        if (!tempAcceleration)\n            throw new Error(\"there is no \" + ParticleAccelerationNode.ACCELERATION_VECTOR3D + \" in param!\");\n        this._pOneData[0] = tempAcceleration.x / 2;\n        this._pOneData[1] = tempAcceleration.y / 2;\n        this._pOneData[2] = tempAcceleration.z / 2;\n    };\n    /**\n     * Reference for acceleration node properties on a single particle (when in local property mode).\n     * Expects a <code>Vector3D</code> object representing the direction of acceleration on the particle.\n     */\n    ParticleAccelerationNode.ACCELERATION_VECTOR3D = \"AccelerationVector3D\";\n    return ParticleAccelerationNode;\n}(ParticleNodeBase_1.ParticleNodeBase));\nexports.ParticleAccelerationNode = ParticleAccelerationNode;\n\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticleAccelerationState\":\"awayjs-renderergl/lib/animators/states/ParticleAccelerationState\",\"awayjs-core/lib/geom/Vector3D\":undefined}],\"awayjs-renderergl/lib/animators/nodes/ParticleBezierCurveNode\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\nvar ParticleBezierCurveState_1 = require(\"../../animators/states/ParticleBezierCurveState\");\nvar ShaderRegisterElement_1 = require(\"../../shaders/ShaderRegisterElement\");\n/**\n * A particle animation node used to control the position of a particle over time along a bezier curve.\n */\nvar ParticleBezierCurveNode = (function (_super) {\n    __extends(ParticleBezierCurveNode, _super);\n    /**\n     * Creates a new <code>ParticleBezierCurveNode</code>\n     *\n     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\n     * @param    [optional] controlPoint    Defines the default control point of the node, used when in global mode.\n     * @param    [optional] endPoint        Defines the default end point of the node, used when in global mode.\n     */\n    function ParticleBezierCurveNode(mode, controlPoint, endPoint) {\n        if (controlPoint === void 0) { controlPoint = null; }\n        if (endPoint === void 0) { endPoint = null; }\n        _super.call(this, \"ParticleBezierCurve\", mode, 6);\n        this._pStateClass = ParticleBezierCurveState_1.ParticleBezierCurveState;\n        this._iControlPoint = controlPoint || new Vector3D_1.Vector3D();\n        this._iEndPoint = endPoint || new Vector3D_1.Vector3D();\n    }\n    /**\n     * @inheritDoc\n     */\n    ParticleBezierCurveNode.prototype.getAGALVertexCode = function (shader, animationSet, registerCache, animationRegisterData) {\n        var controlValue = (this._pMode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) ? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\n        animationRegisterData.setRegisterIndex(this, ParticleBezierCurveState_1.ParticleBezierCurveState.BEZIER_CONTROL_INDEX, controlValue.index);\n        var endValue = (this._pMode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) ? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\n        animationRegisterData.setRegisterIndex(this, ParticleBezierCurveState_1.ParticleBezierCurveState.BEZIER_END_INDEX, endValue.index);\n        var temp = registerCache.getFreeVertexVectorTemp();\n        var rev_time = new ShaderRegisterElement_1.ShaderRegisterElement(temp.regName, temp.index, 0);\n        var time_2 = new ShaderRegisterElement_1.ShaderRegisterElement(temp.regName, temp.index, 1);\n        var time_temp = new ShaderRegisterElement_1.ShaderRegisterElement(temp.regName, temp.index, 2);\n        registerCache.addVertexTempUsages(temp, 1);\n        var temp2 = registerCache.getFreeVertexVectorTemp();\n        var distance = new ShaderRegisterElement_1.ShaderRegisterElement(temp2.regName, temp2.index);\n        registerCache.removeVertexTempUsage(temp);\n        var code = \"\";\n        code += \"sub \" + rev_time + \",\" + animationRegisterData.vertexOneConst + \",\" + animationRegisterData.vertexLife + \"\\n\";\n        code += \"mul \" + time_2 + \",\" + animationRegisterData.vertexLife + \",\" + animationRegisterData.vertexLife + \"\\n\";\n        code += \"mul \" + time_temp + \",\" + animationRegisterData.vertexLife + \",\" + rev_time + \"\\n\";\n        code += \"mul \" + time_temp + \",\" + time_temp + \",\" + animationRegisterData.vertexTwoConst + \"\\n\";\n        code += \"mul \" + distance + \".xyz,\" + time_temp + \",\" + controlValue + \"\\n\";\n        code += \"add \" + animationRegisterData.positionTarget + \".xyz,\" + distance + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\n        code += \"mul \" + distance + \".xyz,\" + time_2 + \",\" + endValue + \"\\n\";\n        code += \"add \" + animationRegisterData.positionTarget + \".xyz,\" + distance + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\n        if (animationSet.needVelocity) {\n            code += \"mul \" + time_2 + \",\" + animationRegisterData.vertexLife + \",\" + animationRegisterData.vertexTwoConst + \"\\n\";\n            code += \"sub \" + time_temp + \",\" + animationRegisterData.vertexOneConst + \",\" + time_2 + \"\\n\";\n            code += \"mul \" + time_temp + \",\" + animationRegisterData.vertexTwoConst + \",\" + time_temp + \"\\n\";\n            code += \"mul \" + distance + \".xyz,\" + controlValue + \",\" + time_temp + \"\\n\";\n            code += \"add \" + animationRegisterData.velocityTarget + \".xyz,\" + distance + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz\\n\";\n            code += \"mul \" + distance + \".xyz,\" + endValue + \",\" + time_2 + \"\\n\";\n            code += \"add \" + animationRegisterData.velocityTarget + \".xyz,\" + distance + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz\\n\";\n        }\n        return code;\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleBezierCurveNode.prototype.getAnimationState = function (animator) {\n        return animator.getAnimationState(this);\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleBezierCurveNode.prototype._iGeneratePropertyOfOneParticle = function (param) {\n        var bezierControl = param[ParticleBezierCurveNode.BEZIER_CONTROL_VECTOR3D];\n        if (!bezierControl)\n            throw new Error(\"there is no \" + ParticleBezierCurveNode.BEZIER_CONTROL_VECTOR3D + \" in param!\");\n        var bezierEnd = param[ParticleBezierCurveNode.BEZIER_END_VECTOR3D];\n        if (!bezierEnd)\n            throw new Error(\"there is no \" + ParticleBezierCurveNode.BEZIER_END_VECTOR3D + \" in param!\");\n        this._pOneData[0] = bezierControl.x;\n        this._pOneData[1] = bezierControl.y;\n        this._pOneData[2] = bezierControl.z;\n        this._pOneData[3] = bezierEnd.x;\n        this._pOneData[4] = bezierEnd.y;\n        this._pOneData[5] = bezierEnd.z;\n    };\n    /**\n     * Reference for bezier curve node properties on a single particle (when in local property mode).\n     * Expects a <code>Vector3D</code> object representing the control point position (0, 1, 2) of the curve.\n     */\n    ParticleBezierCurveNode.BEZIER_CONTROL_VECTOR3D = \"BezierControlVector3D\";\n    /**\n     * Reference for bezier curve node properties on a single particle (when in local property mode).\n     * Expects a <code>Vector3D</code> object representing the end point position (0, 1, 2) of the curve.\n     */\n    ParticleBezierCurveNode.BEZIER_END_VECTOR3D = \"BezierEndVector3D\";\n    return ParticleBezierCurveNode;\n}(ParticleNodeBase_1.ParticleNodeBase));\nexports.ParticleBezierCurveNode = ParticleBezierCurveNode;\n\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticleBezierCurveState\":\"awayjs-renderergl/lib/animators/states/ParticleBezierCurveState\",\"../../shaders/ShaderRegisterElement\":\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\",\"awayjs-core/lib/geom/Vector3D\":undefined}],\"awayjs-renderergl/lib/animators/nodes/ParticleBillboardNode\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\nvar ParticleBillboardState_1 = require(\"../../animators/states/ParticleBillboardState\");\n/**\n * A particle animation node that controls the rotation of a particle to always face the camera.\n */\nvar ParticleBillboardNode = (function (_super) {\n    __extends(ParticleBillboardNode, _super);\n    /**\n     * Creates a new <code>ParticleBillboardNode</code>\n     */\n    function ParticleBillboardNode(billboardAxis) {\n        if (billboardAxis === void 0) { billboardAxis = null; }\n        _super.call(this, \"ParticleBillboard\", ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL, 0, 4);\n        this._pStateClass = ParticleBillboardState_1.ParticleBillboardState;\n        this._iBillboardAxis = billboardAxis;\n    }\n    /**\n     * @inheritDoc\n     */\n    ParticleBillboardNode.prototype.getAGALVertexCode = function (shader, animationSet, registerCache, animationRegisterData) {\n        var rotationMatrixRegister = registerCache.getFreeVertexConstant();\n        animationRegisterData.setRegisterIndex(this, ParticleBillboardState_1.ParticleBillboardState.MATRIX_INDEX, rotationMatrixRegister.index);\n        registerCache.getFreeVertexConstant();\n        registerCache.getFreeVertexConstant();\n        registerCache.getFreeVertexConstant();\n        var temp = registerCache.getFreeVertexVectorTemp();\n        var code = \"m33 \" + temp + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \",\" + rotationMatrixRegister + \"\\n\" +\n            \"mov \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp + \"\\n\";\n        var shaderRegisterElement;\n        for (var i = 0; i < animationRegisterData.rotationRegisters.length; i++) {\n            shaderRegisterElement = animationRegisterData.rotationRegisters[i];\n            code += \"m33 \" + temp + \".xyz,\" + shaderRegisterElement + \",\" + rotationMatrixRegister + \"\\n\" +\n                \"mov \" + shaderRegisterElement + \".xyz,\" + shaderRegisterElement + \"\\n\";\n        }\n        return code;\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleBillboardNode.prototype.getAnimationState = function (animator) {\n        return animator.getAnimationState(this);\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleBillboardNode.prototype._iProcessAnimationSetting = function (particleAnimationSet) {\n        particleAnimationSet.hasBillboard = true;\n    };\n    return ParticleBillboardNode;\n}(ParticleNodeBase_1.ParticleNodeBase));\nexports.ParticleBillboardNode = ParticleBillboardNode;\n\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticleBillboardState\":\"awayjs-renderergl/lib/animators/states/ParticleBillboardState\"}],\"awayjs-renderergl/lib/animators/nodes/ParticleColorNode\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ColorTransform_1 = require(\"awayjs-core/lib/geom/ColorTransform\");\nvar ParticleAnimationSet_1 = require(\"../../animators/ParticleAnimationSet\");\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\nvar ParticleColorState_1 = require(\"../../animators/states/ParticleColorState\");\n/**\n * A particle animation node used to control the color variation of a particle over time.\n */\nvar ParticleColorNode = (function (_super) {\n    __extends(ParticleColorNode, _super);\n    /**\n     * Creates a new <code>ParticleColorNode</code>\n     *\n     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\n     * @param    [optional] usesMultiplier  Defines whether the node uses multiplier data in the shader for its color transformations. Defaults to true.\n     * @param    [optional] usesOffset      Defines whether the node uses offset data in the shader for its color transformations. Defaults to true.\n     * @param    [optional] usesCycle       Defines whether the node uses the <code>cycleDuration</code> property in the shader to calculate the period of the animation independent of particle duration. Defaults to false.\n     * @param    [optional] usesPhase       Defines whether the node uses the <code>cyclePhase</code> property in the shader to calculate a starting offset to the cycle rotation of the particle. Defaults to false.\n     * @param    [optional] startColor      Defines the default start color transform of the node, when in global mode.\n     * @param    [optional] endColor        Defines the default end color transform of the node, when in global mode.\n     * @param    [optional] cycleDuration   Defines the duration of the animation in seconds, used as a period independent of particle duration when in global mode. Defaults to 1.\n     * @param    [optional] cyclePhase      Defines the phase of the cycle in degrees, used as the starting offset of the cycle when in global mode. Defaults to 0.\n     */\n    function ParticleColorNode(mode, usesMultiplier, usesOffset, usesCycle, usesPhase, startColor, endColor, cycleDuration, cyclePhase) {\n        if (usesMultiplier === void 0) { usesMultiplier = true; }\n        if (usesOffset === void 0) { usesOffset = true; }\n        if (usesCycle === void 0) { usesCycle = false; }\n        if (usesPhase === void 0) { usesPhase = false; }\n        if (startColor === void 0) { startColor = null; }\n        if (endColor === void 0) { endColor = null; }\n        if (cycleDuration === void 0) { cycleDuration = 1; }\n        if (cyclePhase === void 0) { cyclePhase = 0; }\n        _super.call(this, \"ParticleColor\", mode, (usesMultiplier && usesOffset) ? 16 : 8, ParticleAnimationSet_1.ParticleAnimationSet.COLOR_PRIORITY);\n        this._pStateClass = ParticleColorState_1.ParticleColorState;\n        this._iUsesMultiplier = usesMultiplier;\n        this._iUsesOffset = usesOffset;\n        this._iUsesCycle = usesCycle;\n        this._iUsesPhase = usesPhase;\n        this._iStartColor = startColor || new ColorTransform_1.ColorTransform();\n        this._iEndColor = endColor || new ColorTransform_1.ColorTransform();\n        this._iCycleDuration = cycleDuration;\n        this._iCyclePhase = cyclePhase;\n    }\n    /**\n     * @inheritDoc\n     */\n    ParticleColorNode.prototype.getAGALVertexCode = function (shader, animationSet, registerCache, animationRegisterData) {\n        var code = \"\";\n        if (shader.usesFragmentAnimation) {\n            var temp = registerCache.getFreeVertexVectorTemp();\n            if (this._iUsesCycle) {\n                var cycleConst = registerCache.getFreeVertexConstant();\n                animationRegisterData.setRegisterIndex(this, ParticleColorState_1.ParticleColorState.CYCLE_INDEX, cycleConst.index);\n                registerCache.addVertexTempUsages(temp, 1);\n                var sin = registerCache.getFreeVertexSingleTemp();\n                registerCache.removeVertexTempUsage(temp);\n                code += \"mul \" + sin + \",\" + animationRegisterData.vertexTime + \",\" + cycleConst + \".x\\n\";\n                if (this._iUsesPhase)\n                    code += \"add \" + sin + \",\" + sin + \",\" + cycleConst + \".y\\n\";\n                code += \"sin \" + sin + \",\" + sin + \"\\n\";\n            }\n            if (this._iUsesMultiplier) {\n                var startMultiplierValue = (this._pMode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) ? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\n                var deltaMultiplierValue = (this._pMode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) ? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\n                animationRegisterData.setRegisterIndex(this, ParticleColorState_1.ParticleColorState.START_MULTIPLIER_INDEX, startMultiplierValue.index);\n                animationRegisterData.setRegisterIndex(this, ParticleColorState_1.ParticleColorState.DELTA_MULTIPLIER_INDEX, deltaMultiplierValue.index);\n                code += \"mul \" + temp + \",\" + deltaMultiplierValue + \",\" + (this._iUsesCycle ? sin : animationRegisterData.vertexLife) + \"\\n\";\n                code += \"add \" + temp + \",\" + temp + \",\" + startMultiplierValue + \"\\n\";\n                code += \"mul \" + animationRegisterData.colorMulTarget + \",\" + temp + \",\" + animationRegisterData.colorMulTarget + \"\\n\";\n            }\n            if (this._iUsesOffset) {\n                var startOffsetValue = (this._pMode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_STATIC) ? registerCache.getFreeVertexAttribute() : registerCache.getFreeVertexConstant();\n                var deltaOffsetValue = (this._pMode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_STATIC) ? registerCache.getFreeVertexAttribute() : registerCache.getFreeVertexConstant();\n                animationRegisterData.setRegisterIndex(this, ParticleColorState_1.ParticleColorState.START_OFFSET_INDEX, startOffsetValue.index);\n                animationRegisterData.setRegisterIndex(this, ParticleColorState_1.ParticleColorState.DELTA_OFFSET_INDEX, deltaOffsetValue.index);\n                code += \"mul \" + temp + \",\" + deltaOffsetValue + \",\" + (this._iUsesCycle ? sin : animationRegisterData.vertexLife) + \"\\n\";\n                code += \"add \" + temp + \",\" + temp + \",\" + startOffsetValue + \"\\n\";\n                code += \"add \" + animationRegisterData.colorAddTarget + \",\" + temp + \",\" + animationRegisterData.colorAddTarget + \"\\n\";\n            }\n        }\n        return code;\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleColorNode.prototype.getAnimationState = function (animator) {\n        return animator.getAnimationState(this);\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleColorNode.prototype._iProcessAnimationSetting = function (particleAnimationSet) {\n        if (this._iUsesMultiplier)\n            particleAnimationSet.hasColorMulNode = true;\n        if (this._iUsesOffset)\n            particleAnimationSet.hasColorAddNode = true;\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleColorNode.prototype._iGeneratePropertyOfOneParticle = function (param) {\n        var startColor = param[ParticleColorNode.COLOR_START_COLORTRANSFORM];\n        if (!startColor)\n            throw (new Error(\"there is no \" + ParticleColorNode.COLOR_START_COLORTRANSFORM + \" in param!\"));\n        var endColor = param[ParticleColorNode.COLOR_END_COLORTRANSFORM];\n        if (!endColor)\n            throw (new Error(\"there is no \" + ParticleColorNode.COLOR_END_COLORTRANSFORM + \" in param!\"));\n        var i = 0;\n        if (!this._iUsesCycle) {\n            //multiplier\n            if (this._iUsesMultiplier) {\n                this._pOneData[i++] = startColor.redMultiplier;\n                this._pOneData[i++] = startColor.greenMultiplier;\n                this._pOneData[i++] = startColor.blueMultiplier;\n                this._pOneData[i++] = startColor.alphaMultiplier;\n                this._pOneData[i++] = endColor.redMultiplier - startColor.redMultiplier;\n                this._pOneData[i++] = endColor.greenMultiplier - startColor.greenMultiplier;\n                this._pOneData[i++] = endColor.blueMultiplier - startColor.blueMultiplier;\n                this._pOneData[i++] = endColor.alphaMultiplier - startColor.alphaMultiplier;\n            }\n            //offset\n            if (this._iUsesOffset) {\n                this._pOneData[i++] = startColor.redOffset / 255;\n                this._pOneData[i++] = startColor.greenOffset / 255;\n                this._pOneData[i++] = startColor.blueOffset / 255;\n                this._pOneData[i++] = startColor.alphaOffset / 255;\n                this._pOneData[i++] = (endColor.redOffset - startColor.redOffset) / 255;\n                this._pOneData[i++] = (endColor.greenOffset - startColor.greenOffset) / 255;\n                this._pOneData[i++] = (endColor.blueOffset - startColor.blueOffset) / 255;\n                this._pOneData[i++] = (endColor.alphaOffset - startColor.alphaOffset) / 255;\n            }\n        }\n        else {\n            //multiplier\n            if (this._iUsesMultiplier) {\n                this._pOneData[i++] = (startColor.redMultiplier + endColor.redMultiplier) / 2;\n                this._pOneData[i++] = (startColor.greenMultiplier + endColor.greenMultiplier) / 2;\n                this._pOneData[i++] = (startColor.blueMultiplier + endColor.blueMultiplier) / 2;\n                this._pOneData[i++] = (startColor.alphaMultiplier + endColor.alphaMultiplier) / 2;\n                this._pOneData[i++] = (startColor.redMultiplier - endColor.redMultiplier) / 2;\n                this._pOneData[i++] = (startColor.greenMultiplier - endColor.greenMultiplier) / 2;\n                this._pOneData[i++] = (startColor.blueMultiplier - endColor.blueMultiplier) / 2;\n                this._pOneData[i++] = (startColor.alphaMultiplier - endColor.alphaMultiplier) / 2;\n            }\n            //offset\n            if (this._iUsesOffset) {\n                this._pOneData[i++] = (startColor.redOffset + endColor.redOffset) / (255 * 2);\n                this._pOneData[i++] = (startColor.greenOffset + endColor.greenOffset) / (255 * 2);\n                this._pOneData[i++] = (startColor.blueOffset + endColor.blueOffset) / (255 * 2);\n                this._pOneData[i++] = (startColor.alphaOffset + endColor.alphaOffset) / (255 * 2);\n                this._pOneData[i++] = (startColor.redOffset - endColor.redOffset) / (255 * 2);\n                this._pOneData[i++] = (startColor.greenOffset - endColor.greenOffset) / (255 * 2);\n                this._pOneData[i++] = (startColor.blueOffset - endColor.blueOffset) / (255 * 2);\n                this._pOneData[i++] = (startColor.alphaOffset - endColor.alphaOffset) / (255 * 2);\n            }\n        }\n    };\n    /**\n     * Reference for color node properties on a single particle (when in local property mode).\n     * Expects a <code>ColorTransform</code> object representing the start color transform applied to the particle.\n     */\n    ParticleColorNode.COLOR_START_COLORTRANSFORM = \"ColorStartColorTransform\";\n    /**\n     * Reference for color node properties on a single particle (when in local property mode).\n     * Expects a <code>ColorTransform</code> object representing the end color transform applied to the particle.\n     */\n    ParticleColorNode.COLOR_END_COLORTRANSFORM = \"ColorEndColorTransform\";\n    return ParticleColorNode;\n}(ParticleNodeBase_1.ParticleNodeBase));\nexports.ParticleColorNode = ParticleColorNode;\n\n},{\"../../animators/ParticleAnimationSet\":\"awayjs-renderergl/lib/animators/ParticleAnimationSet\",\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticleColorState\":\"awayjs-renderergl/lib/animators/states/ParticleColorState\",\"awayjs-core/lib/geom/ColorTransform\":undefined}],\"awayjs-renderergl/lib/animators/nodes/ParticleFollowNode\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ParticleAnimationSet_1 = require(\"../../animators/ParticleAnimationSet\");\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\nvar ParticleFollowState_1 = require(\"../../animators/states/ParticleFollowState\");\n/**\n * A particle animation node used to create a follow behaviour on a particle system.\n */\nvar ParticleFollowNode = (function (_super) {\n    __extends(ParticleFollowNode, _super);\n    /**\n     * Creates a new <code>ParticleFollowNode</code>\n     *\n     * @param    [optional] usesPosition     Defines wehether the individual particle reacts to the position of the target.\n     * @param    [optional] usesRotation     Defines wehether the individual particle reacts to the rotation of the target.\n     * @param    [optional] smooth     Defines wehether the state calculate the interpolated value.\n     */\n    function ParticleFollowNode(usesPosition, usesRotation, smooth) {\n        if (usesPosition === void 0) { usesPosition = true; }\n        if (usesRotation === void 0) { usesRotation = true; }\n        if (smooth === void 0) { smooth = false; }\n        _super.call(this, \"ParticleFollow\", ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_DYNAMIC, (usesPosition && usesRotation) ? 6 : 3, ParticleAnimationSet_1.ParticleAnimationSet.POST_PRIORITY);\n        this._pStateClass = ParticleFollowState_1.ParticleFollowState;\n        this._iUsesPosition = usesPosition;\n        this._iUsesRotation = usesRotation;\n        this._iSmooth = smooth;\n    }\n    /**\n     * @inheritDoc\n     */\n    ParticleFollowNode.prototype.getAGALVertexCode = function (shader, animationSet, registerCache, animationRegisterData) {\n        //TODO: use Quaternion to implement this function\n        var code = \"\";\n        if (this._iUsesRotation) {\n            var rotationAttribute = registerCache.getFreeVertexAttribute();\n            animationRegisterData.setRegisterIndex(this, ParticleFollowState_1.ParticleFollowState.FOLLOW_ROTATION_INDEX, rotationAttribute.index);\n            var temp1 = registerCache.getFreeVertexVectorTemp();\n            registerCache.addVertexTempUsages(temp1, 1);\n            var temp2 = registerCache.getFreeVertexVectorTemp();\n            registerCache.addVertexTempUsages(temp2, 1);\n            var temp3 = registerCache.getFreeVertexVectorTemp();\n            var temp4;\n            if (animationSet.hasBillboard) {\n                registerCache.addVertexTempUsages(temp3, 1);\n                temp4 = registerCache.getFreeVertexVectorTemp();\n            }\n            registerCache.removeVertexTempUsage(temp1);\n            registerCache.removeVertexTempUsage(temp2);\n            if (animationSet.hasBillboard)\n                registerCache.removeVertexTempUsage(temp3);\n            var len = animationRegisterData.rotationRegisters.length;\n            var i;\n            //x axis\n            code += \"mov \" + temp1 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n            code += \"mov \" + temp1 + \".x,\" + animationRegisterData.vertexOneConst + \"\\n\";\n            code += \"mov \" + temp3 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n            code += \"sin \" + temp3 + \".y,\" + rotationAttribute + \".x\\n\";\n            code += \"cos \" + temp3 + \".z,\" + rotationAttribute + \".x\\n\";\n            code += \"mov \" + temp2 + \".x,\" + animationRegisterData.vertexZeroConst + \"\\n\";\n            code += \"mov \" + temp2 + \".y,\" + temp3 + \".z\\n\";\n            code += \"neg \" + temp2 + \".z,\" + temp3 + \".y\\n\";\n            if (animationSet.hasBillboard)\n                code += \"m33 \" + temp4 + \".xyz,\" + animationRegisterData.positionTarget + \".xyz,\" + temp1 + \"\\n\";\n            else {\n                code += \"m33 \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp1 + \"\\n\";\n                for (i = 0; i < len; i++)\n                    code += \"m33 \" + animationRegisterData.rotationRegisters[i] + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \",\" + temp1 + \"\\n\";\n            }\n            //y axis\n            code += \"mov \" + temp1 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n            code += \"cos \" + temp1 + \".x,\" + rotationAttribute + \".y\\n\";\n            code += \"sin \" + temp1 + \".z,\" + rotationAttribute + \".y\\n\";\n            code += \"mov \" + temp2 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n            code += \"mov \" + temp2 + \".y,\" + animationRegisterData.vertexOneConst + \"\\n\";\n            code += \"mov \" + temp3 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n            code += \"neg \" + temp3 + \".x,\" + temp1 + \".z\\n\";\n            code += \"mov \" + temp3 + \".z,\" + temp1 + \".x\\n\";\n            if (animationSet.hasBillboard)\n                code += \"m33 \" + temp4 + \".xyz,\" + temp4 + \".xyz,\" + temp1 + \"\\n\";\n            else {\n                code += \"m33 \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp1 + \"\\n\";\n                for (i = 0; i < len; i++)\n                    code += \"m33 \" + animationRegisterData.rotationRegisters[i] + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \",\" + temp1 + \"\\n\";\n            }\n            //z axis\n            code += \"mov \" + temp2 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n            code += \"sin \" + temp2 + \".x,\" + rotationAttribute + \".z\\n\";\n            code += \"cos \" + temp2 + \".y,\" + rotationAttribute + \".z\\n\";\n            code += \"mov \" + temp1 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n            code += \"mov \" + temp1 + \".x,\" + temp2 + \".y\\n\";\n            code += \"neg \" + temp1 + \".y,\" + temp2 + \".x\\n\";\n            code += \"mov \" + temp3 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n            code += \"mov \" + temp3 + \".z,\" + animationRegisterData.vertexOneConst + \"\\n\";\n            if (animationSet.hasBillboard) {\n                code += \"m33 \" + temp4 + \".xyz,\" + temp4 + \".xyz,\" + temp1 + \"\\n\";\n                code += \"sub \" + temp4 + \".xyz,\" + temp4 + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\n                code += \"add \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp4 + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz\\n\";\n            }\n            else {\n                code += \"m33 \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp1 + \"\\n\";\n                for (i = 0; i < len; i++)\n                    code += \"m33 \" + animationRegisterData.rotationRegisters[i] + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \",\" + temp1 + \"\\n\";\n            }\n        }\n        if (this._iUsesPosition) {\n            var positionAttribute = registerCache.getFreeVertexAttribute();\n            animationRegisterData.setRegisterIndex(this, ParticleFollowState_1.ParticleFollowState.FOLLOW_POSITION_INDEX, positionAttribute.index);\n            code += \"add \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + positionAttribute + \",\" + animationRegisterData.scaleAndRotateTarget + \".xyz\\n\";\n        }\n        return code;\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleFollowNode.prototype.getAnimationState = function (animator) {\n        return animator.getAnimationState(this);\n    };\n    return ParticleFollowNode;\n}(ParticleNodeBase_1.ParticleNodeBase));\nexports.ParticleFollowNode = ParticleFollowNode;\n\n},{\"../../animators/ParticleAnimationSet\":\"awayjs-renderergl/lib/animators/ParticleAnimationSet\",\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticleFollowState\":\"awayjs-renderergl/lib/animators/states/ParticleFollowState\"}],\"awayjs-renderergl/lib/animators/nodes/ParticleInitialColorNode\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ColorTransform_1 = require(\"awayjs-core/lib/geom/ColorTransform\");\nvar ParticleAnimationSet_1 = require(\"../../animators/ParticleAnimationSet\");\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\nvar ParticleInitialColorState_1 = require(\"../../animators/states/ParticleInitialColorState\");\n/**\n *\n */\nvar ParticleInitialColorNode = (function (_super) {\n    __extends(ParticleInitialColorNode, _super);\n    function ParticleInitialColorNode(mode, usesMultiplier, usesOffset, initialColor) {\n        if (usesMultiplier === void 0) { usesMultiplier = true; }\n        if (usesOffset === void 0) { usesOffset = false; }\n        if (initialColor === void 0) { initialColor = null; }\n        _super.call(this, \"ParticleInitialColor\", mode, (usesMultiplier && usesOffset) ? 8 : 4, ParticleAnimationSet_1.ParticleAnimationSet.COLOR_PRIORITY);\n        this._pStateClass = ParticleInitialColorState_1.ParticleInitialColorState;\n        this._iUsesMultiplier = usesMultiplier;\n        this._iUsesOffset = usesOffset;\n        this._iInitialColor = initialColor || new ColorTransform_1.ColorTransform();\n    }\n    /**\n     * @inheritDoc\n     */\n    ParticleInitialColorNode.prototype.getAGALVertexCode = function (shader, animationSet, registerCache, animationRegisterData) {\n        var code = \"\";\n        if (shader.usesFragmentAnimation) {\n            if (this._iUsesMultiplier) {\n                var multiplierValue = (this._pMode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) ? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\n                animationRegisterData.setRegisterIndex(this, ParticleInitialColorState_1.ParticleInitialColorState.MULTIPLIER_INDEX, multiplierValue.index);\n                code += \"mul \" + animationRegisterData.colorMulTarget + \",\" + multiplierValue + \",\" + animationRegisterData.colorMulTarget + \"\\n\";\n            }\n            if (this._iUsesOffset) {\n                var offsetValue = (this._pMode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_STATIC) ? registerCache.getFreeVertexAttribute() : registerCache.getFreeVertexConstant();\n                animationRegisterData.setRegisterIndex(this, ParticleInitialColorState_1.ParticleInitialColorState.OFFSET_INDEX, offsetValue.index);\n                code += \"add \" + animationRegisterData.colorAddTarget + \",\" + offsetValue + \",\" + animationRegisterData.colorAddTarget + \"\\n\";\n            }\n        }\n        return code;\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleInitialColorNode.prototype._iProcessAnimationSetting = function (particleAnimationSet) {\n        if (this._iUsesMultiplier)\n            particleAnimationSet.hasColorMulNode = true;\n        if (this._iUsesOffset)\n            particleAnimationSet.hasColorAddNode = true;\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleInitialColorNode.prototype._iGeneratePropertyOfOneParticle = function (param) {\n        var initialColor = param[ParticleInitialColorNode.COLOR_INITIAL_COLORTRANSFORM];\n        if (!initialColor)\n            throw (new Error(\"there is no \" + ParticleInitialColorNode.COLOR_INITIAL_COLORTRANSFORM + \" in param!\"));\n        var i = 0;\n        //multiplier\n        if (this._iUsesMultiplier) {\n            this._pOneData[i++] = initialColor.redMultiplier;\n            this._pOneData[i++] = initialColor.greenMultiplier;\n            this._pOneData[i++] = initialColor.blueMultiplier;\n            this._pOneData[i++] = initialColor.alphaMultiplier;\n        }\n        //offset\n        if (this._iUsesOffset) {\n            this._pOneData[i++] = initialColor.redOffset / 255;\n            this._pOneData[i++] = initialColor.greenOffset / 255;\n            this._pOneData[i++] = initialColor.blueOffset / 255;\n            this._pOneData[i++] = initialColor.alphaOffset / 255;\n        }\n    };\n    /**\n     * Reference for color node properties on a single particle (when in local property mode).\n     * Expects a <code>ColorTransform</code> object representing the color transform applied to the particle.\n     */\n    ParticleInitialColorNode.COLOR_INITIAL_COLORTRANSFORM = \"ColorInitialColorTransform\";\n    return ParticleInitialColorNode;\n}(ParticleNodeBase_1.ParticleNodeBase));\nexports.ParticleInitialColorNode = ParticleInitialColorNode;\n\n},{\"../../animators/ParticleAnimationSet\":\"awayjs-renderergl/lib/animators/ParticleAnimationSet\",\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticleInitialColorState\":\"awayjs-renderergl/lib/animators/states/ParticleInitialColorState\",\"awayjs-core/lib/geom/ColorTransform\":undefined}],\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AnimationNodeBase_1 = require(\"awayjs-display/lib/animators/nodes/AnimationNodeBase\");\n/**\n * Provides an abstract base class for particle animation nodes.\n */\nvar ParticleNodeBase = (function (_super) {\n    __extends(ParticleNodeBase, _super);\n    /**\n     * Creates a new <code>ParticleNodeBase</code> object.\n     *\n     * @param               name            Defines the generic name of the particle animation node.\n     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\n     * @param               dataLength      Defines the length of the data used by the node when in <code>LOCAL_STATIC</code> mode.\n     * @param    [optional] priority        the priority of the particle animation node, used to order the agal generated in a particle animation set. Defaults to 1.\n     */\n    function ParticleNodeBase(name, mode, dataLength, priority) {\n        if (priority === void 0) { priority = 1; }\n        _super.call(this);\n        this._pDataLength = 3;\n        name = name + ParticleNodeBase.MODES[mode];\n        this.name = name;\n        this._pMode = mode;\n        this._priority = priority;\n        this._pDataLength = dataLength;\n        this._pOneData = new Array(this._pDataLength);\n    }\n    Object.defineProperty(ParticleNodeBase.prototype, \"mode\", {\n        /**\n         * Returns the property mode of the particle animation node. Typically set in the node constructor\n         *\n         * @see away.animators.ParticlePropertiesMode\n         */\n        get: function () {\n            return this._pMode;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ParticleNodeBase.prototype, \"priority\", {\n        /**\n         * Returns the priority of the particle animation node, used to order the agal generated in a particle animation set. Set automatically on instantiation.\n         *\n         * @see away.animators.ParticleAnimationSet\n         * @see #getAGALVertexCode\n         */\n        get: function () {\n            return this._priority;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ParticleNodeBase.prototype, \"dataLength\", {\n        /**\n         * Returns the length of the data used by the node when in <code>LOCAL_STATIC</code> mode. Used to generate the local static data of the particle animation set.\n         *\n         * @see away.animators.ParticleAnimationSet\n         * @see #getAGALVertexCode\n         */\n        get: function () {\n            return this._pDataLength;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ParticleNodeBase.prototype, \"oneData\", {\n        /**\n         * Returns the generated data vector of the node after one particle pass during the generation of all local static data of the particle animation set.\n         *\n         * @see away.animators.ParticleAnimationSet\n         * @see #generatePropertyOfOneParticle\n         */\n        get: function () {\n            return this._pOneData;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns the AGAL code of the particle animation node for use in the vertex shader.\n     */\n    ParticleNodeBase.prototype.getAGALVertexCode = function (shader, animationSet, registerCache, animationRegisterData) {\n        return \"\";\n    };\n    /**\n     * Returns the AGAL code of the particle animation node for use in the fragment shader.\n     */\n    ParticleNodeBase.prototype.getAGALFragmentCode = function (shader, animationSet, registerCache, animationRegisterData) {\n        return \"\";\n    };\n    /**\n     * Returns the AGAL code of the particle animation node for use in the fragment shader when UV coordinates are required.\n     */\n    ParticleNodeBase.prototype.getAGALUVCode = function (shader, animationSet, registerCache, animationRegisterData) {\n        return \"\";\n    };\n    /**\n     * Called internally by the particle animation set when assigning the set of static properties originally defined by the initParticleFunc of the set.\n     *\n     * @see away.animators.ParticleAnimationSet#initParticleFunc\n     */\n    ParticleNodeBase.prototype._iGeneratePropertyOfOneParticle = function (param) {\n    };\n    /**\n     * Called internally by the particle animation set when determining the requirements of the particle animation node AGAL.\n     */\n    ParticleNodeBase.prototype._iProcessAnimationSetting = function (particleAnimationSet) {\n    };\n    //modes alias\n    ParticleNodeBase.GLOBAL = 'Global';\n    ParticleNodeBase.LOCAL_STATIC = 'LocalStatic';\n    ParticleNodeBase.LOCAL_DYNAMIC = 'LocalDynamic';\n    //modes list\n    ParticleNodeBase.MODES = {\n        0: ParticleNodeBase.GLOBAL,\n        1: ParticleNodeBase.LOCAL_STATIC,\n        2: ParticleNodeBase.LOCAL_DYNAMIC\n    };\n    return ParticleNodeBase;\n}(AnimationNodeBase_1.AnimationNodeBase));\nexports.ParticleNodeBase = ParticleNodeBase;\n\n},{\"awayjs-display/lib/animators/nodes/AnimationNodeBase\":undefined}],\"awayjs-renderergl/lib/animators/nodes/ParticleOrbitNode\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\nvar ParticleOrbitState_1 = require(\"../../animators/states/ParticleOrbitState\");\nvar ShaderRegisterElement_1 = require(\"../../shaders/ShaderRegisterElement\");\n/**\n * A particle animation node used to control the position of a particle over time around a circular orbit.\n */\nvar ParticleOrbitNode = (function (_super) {\n    __extends(ParticleOrbitNode, _super);\n    /**\n     * Creates a new <code>ParticleOrbitNode</code> object.\n     *\n     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\n     * @param    [optional] usesEulers      Defines whether the node uses the <code>eulers</code> property in the shader to calculate a rotation on the orbit. Defaults to true.\n     * @param    [optional] usesCycle       Defines whether the node uses the <code>cycleDuration</code> property in the shader to calculate the period of the orbit independent of particle duration. Defaults to false.\n     * @param    [optional] usesPhase       Defines whether the node uses the <code>cyclePhase</code> property in the shader to calculate a starting offset to the cycle rotation of the particle. Defaults to false.\n     * @param    [optional] radius          Defines the radius of the orbit when in global mode. Defaults to 100.\n     * @param    [optional] cycleDuration   Defines the duration of the orbit in seconds, used as a period independent of particle duration when in global mode. Defaults to 1.\n     * @param    [optional] cyclePhase      Defines the phase of the orbit in degrees, used as the starting offset of the cycle when in global mode. Defaults to 0.\n     * @param    [optional] eulers          Defines the euler rotation in degrees, applied to the orientation of the orbit when in global mode.\n     */\n    function ParticleOrbitNode(mode, usesEulers, usesCycle, usesPhase, radius, cycleDuration, cyclePhase, eulers) {\n        if (usesEulers === void 0) { usesEulers = true; }\n        if (usesCycle === void 0) { usesCycle = false; }\n        if (usesPhase === void 0) { usesPhase = false; }\n        if (radius === void 0) { radius = 100; }\n        if (cycleDuration === void 0) { cycleDuration = 1; }\n        if (cyclePhase === void 0) { cyclePhase = 0; }\n        if (eulers === void 0) { eulers = null; }\n        var len = 3;\n        if (usesPhase)\n            len++;\n        _super.call(this, \"ParticleOrbit\", mode, len);\n        this._pStateClass = ParticleOrbitState_1.ParticleOrbitState;\n        this._iUsesEulers = usesEulers;\n        this._iUsesCycle = usesCycle;\n        this._iUsesPhase = usesPhase;\n        this._iRadius = radius;\n        this._iCycleDuration = cycleDuration;\n        this._iCyclePhase = cyclePhase;\n        this._iEulers = eulers || new Vector3D_1.Vector3D();\n    }\n    /**\n     * @inheritDoc\n     */\n    ParticleOrbitNode.prototype.getAGALVertexCode = function (shader, animationSet, registerCache, animationRegisterData) {\n        var orbitRegister = (this._pMode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) ? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\n        animationRegisterData.setRegisterIndex(this, ParticleOrbitState_1.ParticleOrbitState.ORBIT_INDEX, orbitRegister.index);\n        var eulersMatrixRegister = registerCache.getFreeVertexConstant();\n        animationRegisterData.setRegisterIndex(this, ParticleOrbitState_1.ParticleOrbitState.EULERS_INDEX, eulersMatrixRegister.index);\n        registerCache.getFreeVertexConstant();\n        registerCache.getFreeVertexConstant();\n        registerCache.getFreeVertexConstant();\n        var temp1 = registerCache.getFreeVertexVectorTemp();\n        registerCache.addVertexTempUsages(temp1, 1);\n        var distance = new ShaderRegisterElement_1.ShaderRegisterElement(temp1.regName, temp1.index);\n        var temp2 = registerCache.getFreeVertexVectorTemp();\n        var cos = new ShaderRegisterElement_1.ShaderRegisterElement(temp2.regName, temp2.index, 0);\n        var sin = new ShaderRegisterElement_1.ShaderRegisterElement(temp2.regName, temp2.index, 1);\n        var degree = new ShaderRegisterElement_1.ShaderRegisterElement(temp2.regName, temp2.index, 2);\n        registerCache.removeVertexTempUsage(temp1);\n        var code = \"\";\n        if (this._iUsesCycle) {\n            code += \"mul \" + degree + \",\" + animationRegisterData.vertexTime + \",\" + orbitRegister + \".y\\n\";\n            if (this._iUsesPhase)\n                code += \"add \" + degree + \",\" + degree + \",\" + orbitRegister + \".w\\n\";\n        }\n        else\n            code += \"mul \" + degree + \",\" + animationRegisterData.vertexLife + \",\" + orbitRegister + \".y\\n\";\n        code += \"cos \" + cos + \",\" + degree + \"\\n\";\n        code += \"sin \" + sin + \",\" + degree + \"\\n\";\n        code += \"mul \" + distance + \".x,\" + cos + \",\" + orbitRegister + \".x\\n\";\n        code += \"mul \" + distance + \".y,\" + sin + \",\" + orbitRegister + \".x\\n\";\n        code += \"mov \" + distance + \".wz\" + animationRegisterData.vertexZeroConst + \"\\n\";\n        if (this._iUsesEulers)\n            code += \"m44 \" + distance + \",\" + distance + \",\" + eulersMatrixRegister + \"\\n\";\n        code += \"add \" + animationRegisterData.positionTarget + \".xyz,\" + distance + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\n        if (animationSet.needVelocity) {\n            code += \"neg \" + distance + \".x,\" + sin + \"\\n\";\n            code += \"mov \" + distance + \".y,\" + cos + \"\\n\";\n            code += \"mov \" + distance + \".zw,\" + animationRegisterData.vertexZeroConst + \"\\n\";\n            if (this._iUsesEulers)\n                code += \"m44 \" + distance + \",\" + distance + \",\" + eulersMatrixRegister + \"\\n\";\n            code += \"mul \" + distance + \",\" + distance + \",\" + orbitRegister + \".z\\n\";\n            code += \"div \" + distance + \",\" + distance + \",\" + orbitRegister + \".y\\n\";\n            if (!this._iUsesCycle)\n                code += \"div \" + distance + \",\" + distance + \",\" + animationRegisterData.vertexLife + \"\\n\";\n            code += \"add \" + animationRegisterData.velocityTarget + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz,\" + distance + \".xyz\\n\";\n        }\n        return code;\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleOrbitNode.prototype.getAnimationState = function (animator) {\n        return animator.getAnimationState(this);\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleOrbitNode.prototype._iGeneratePropertyOfOneParticle = function (param) {\n        //Vector3D.x is radius, Vector3D.y is cycle duration, Vector3D.z is phase\n        var orbit = param[ParticleOrbitNode.ORBIT_VECTOR3D];\n        if (!orbit)\n            throw new Error(\"there is no \" + ParticleOrbitNode.ORBIT_VECTOR3D + \" in param!\");\n        this._pOneData[0] = orbit.x;\n        if (this._iUsesCycle && orbit.y <= 0)\n            throw (new Error(\"the cycle duration must be greater than zero\"));\n        this._pOneData[1] = Math.PI * 2 / (!this._iUsesCycle ? 1 : orbit.y);\n        this._pOneData[2] = orbit.x * Math.PI * 2;\n        if (this._iUsesPhase)\n            this._pOneData[3] = orbit.z * Math.PI / 180;\n    };\n    /**\n     * Reference for orbit node properties on a single particle (when in local property mode).\n     * Expects a <code>Vector3D</code> object representing the radius (x), cycle speed (y) and cycle phase (z) of the motion on the particle.\n     */\n    ParticleOrbitNode.ORBIT_VECTOR3D = \"OrbitVector3D\";\n    return ParticleOrbitNode;\n}(ParticleNodeBase_1.ParticleNodeBase));\nexports.ParticleOrbitNode = ParticleOrbitNode;\n\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticleOrbitState\":\"awayjs-renderergl/lib/animators/states/ParticleOrbitState\",\"../../shaders/ShaderRegisterElement\":\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\",\"awayjs-core/lib/geom/Vector3D\":undefined}],\"awayjs-renderergl/lib/animators/nodes/ParticleOscillatorNode\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\nvar ParticleOscillatorState_1 = require(\"../../animators/states/ParticleOscillatorState\");\nvar ShaderRegisterElement_1 = require(\"../../shaders/ShaderRegisterElement\");\n/**\n * A particle animation node used to control the position of a particle over time using simple harmonic motion.\n */\nvar ParticleOscillatorNode = (function (_super) {\n    __extends(ParticleOscillatorNode, _super);\n    /**\n     * Creates a new <code>ParticleOscillatorNode</code>\n     *\n     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\n     * @param    [optional] oscillator      Defines the default oscillator axis (x, y, z) and cycleDuration (w) of the node, used when in global mode.\n     */\n    function ParticleOscillatorNode(mode, oscillator) {\n        if (oscillator === void 0) { oscillator = null; }\n        _super.call(this, \"ParticleOscillator\", mode, 4);\n        this._pStateClass = ParticleOscillatorState_1.ParticleOscillatorState;\n        this._iOscillator = oscillator || new Vector3D_1.Vector3D();\n    }\n    /**\n     * @inheritDoc\n     */\n    ParticleOscillatorNode.prototype.getAGALVertexCode = function (shader, animationSet, registerCache, animationRegisterData) {\n        var oscillatorRegister = (this._pMode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) ? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\n        animationRegisterData.setRegisterIndex(this, ParticleOscillatorState_1.ParticleOscillatorState.OSCILLATOR_INDEX, oscillatorRegister.index);\n        var temp = registerCache.getFreeVertexVectorTemp();\n        var dgree = new ShaderRegisterElement_1.ShaderRegisterElement(temp.regName, temp.index, 0);\n        var sin = new ShaderRegisterElement_1.ShaderRegisterElement(temp.regName, temp.index, 1);\n        var cos = new ShaderRegisterElement_1.ShaderRegisterElement(temp.regName, temp.index, 2);\n        registerCache.addVertexTempUsages(temp, 1);\n        var temp2 = registerCache.getFreeVertexVectorTemp();\n        var distance = new ShaderRegisterElement_1.ShaderRegisterElement(temp2.regName, temp2.index);\n        registerCache.removeVertexTempUsage(temp);\n        var code = \"\";\n        code += \"mul \" + dgree + \",\" + animationRegisterData.vertexTime + \",\" + oscillatorRegister + \".w\\n\";\n        code += \"sin \" + sin + \",\" + dgree + \"\\n\";\n        code += \"mul \" + distance + \".xyz,\" + sin + \",\" + oscillatorRegister + \".xyz\\n\";\n        code += \"add \" + animationRegisterData.positionTarget + \".xyz,\" + distance + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\n        if (animationSet.needVelocity) {\n            code += \"cos \" + cos + \",\" + dgree + \"\\n\";\n            code += \"mul \" + distance + \".xyz,\" + cos + \",\" + oscillatorRegister + \".xyz\\n\";\n            code += \"add \" + animationRegisterData.velocityTarget + \".xyz,\" + distance + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz\\n\";\n        }\n        return code;\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleOscillatorNode.prototype.getAnimationState = function (animator) {\n        return animator.getAnimationState(this);\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleOscillatorNode.prototype._iGeneratePropertyOfOneParticle = function (param) {\n        //(Vector3D.x,Vector3D.y,Vector3D.z) is oscillator axis, Vector3D.w is oscillator cycle duration\n        var drift = param[ParticleOscillatorNode.OSCILLATOR_VECTOR3D];\n        if (!drift)\n            throw (new Error(\"there is no \" + ParticleOscillatorNode.OSCILLATOR_VECTOR3D + \" in param!\"));\n        this._pOneData[0] = drift.x;\n        this._pOneData[1] = drift.y;\n        this._pOneData[2] = drift.z;\n        if (drift.w <= 0)\n            throw (new Error(\"the cycle duration must greater than zero\"));\n        this._pOneData[3] = Math.PI * 2 / drift.w;\n    };\n    /**\n     * Reference for ocsillator node properties on a single particle (when in local property mode).\n     * Expects a <code>Vector3D</code> object representing the axis (x,y,z) and cycle speed (w) of the motion on the particle.\n     */\n    ParticleOscillatorNode.OSCILLATOR_VECTOR3D = \"OscillatorVector3D\";\n    return ParticleOscillatorNode;\n}(ParticleNodeBase_1.ParticleNodeBase));\nexports.ParticleOscillatorNode = ParticleOscillatorNode;\n\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticleOscillatorState\":\"awayjs-renderergl/lib/animators/states/ParticleOscillatorState\",\"../../shaders/ShaderRegisterElement\":\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\",\"awayjs-core/lib/geom/Vector3D\":undefined}],\"awayjs-renderergl/lib/animators/nodes/ParticlePositionNode\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\nvar ParticlePositionState_1 = require(\"../../animators/states/ParticlePositionState\");\n/**\n * A particle animation node used to set the starting position of a particle.\n */\nvar ParticlePositionNode = (function (_super) {\n    __extends(ParticlePositionNode, _super);\n    /**\n     * Creates a new <code>ParticlePositionNode</code>\n     *\n     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\n     * @param    [optional] position        Defines the default position of the particle when in global mode. Defaults to 0,0,0.\n     */\n    function ParticlePositionNode(mode, position) {\n        if (position === void 0) { position = null; }\n        _super.call(this, \"ParticlePosition\", mode, 3);\n        this._pStateClass = ParticlePositionState_1.ParticlePositionState;\n        this._iPosition = position || new Vector3D_1.Vector3D();\n    }\n    /**\n     * @inheritDoc\n     */\n    ParticlePositionNode.prototype.getAGALVertexCode = function (shader, animationSet, registerCache, animationRegisterData) {\n        var positionAttribute = (this._pMode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) ? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\n        animationRegisterData.setRegisterIndex(this, ParticlePositionState_1.ParticlePositionState.POSITION_INDEX, positionAttribute.index);\n        return \"add \" + animationRegisterData.positionTarget + \".xyz,\" + positionAttribute + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticlePositionNode.prototype.getAnimationState = function (animator) {\n        return animator.getAnimationState(this);\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticlePositionNode.prototype._iGeneratePropertyOfOneParticle = function (param) {\n        var offset = param[ParticlePositionNode.POSITION_VECTOR3D];\n        if (!offset)\n            throw (new Error(\"there is no \" + ParticlePositionNode.POSITION_VECTOR3D + \" in param!\"));\n        this._pOneData[0] = offset.x;\n        this._pOneData[1] = offset.y;\n        this._pOneData[2] = offset.z;\n    };\n    /**\n     * Reference for position node properties on a single particle (when in local property mode).\n     * Expects a <code>Vector3D</code> object representing position of the particle.\n     */\n    ParticlePositionNode.POSITION_VECTOR3D = \"PositionVector3D\";\n    return ParticlePositionNode;\n}(ParticleNodeBase_1.ParticleNodeBase));\nexports.ParticlePositionNode = ParticlePositionNode;\n\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticlePositionState\":\"awayjs-renderergl/lib/animators/states/ParticlePositionState\",\"awayjs-core/lib/geom/Vector3D\":undefined}],\"awayjs-renderergl/lib/animators/nodes/ParticleRotateToHeadingNode\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\nvar ParticleRotateToHeadingState_1 = require(\"../../animators/states/ParticleRotateToHeadingState\");\nvar ShaderRegisterElement_1 = require(\"../../shaders/ShaderRegisterElement\");\n/**\n * A particle animation node used to control the rotation of a particle to match its heading vector.\n */\nvar ParticleRotateToHeadingNode = (function (_super) {\n    __extends(ParticleRotateToHeadingNode, _super);\n    /**\n     * Creates a new <code>ParticleBillboardNode</code>\n     */\n    function ParticleRotateToHeadingNode() {\n        _super.call(this, \"ParticleRotateToHeading\", ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL, 0, 3);\n        this._pStateClass = ParticleRotateToHeadingState_1.ParticleRotateToHeadingState;\n    }\n    /**\n     * @inheritDoc\n     */\n    ParticleRotateToHeadingNode.prototype.getAGALVertexCode = function (shader, animationSet, registerCache, animationRegisterData) {\n        var code = \"\";\n        var len = animationRegisterData.rotationRegisters.length;\n        var i;\n        if (animationSet.hasBillboard) {\n            var temp1 = registerCache.getFreeVertexVectorTemp();\n            registerCache.addVertexTempUsages(temp1, 1);\n            var temp2 = registerCache.getFreeVertexVectorTemp();\n            registerCache.addVertexTempUsages(temp2, 1);\n            var temp3 = registerCache.getFreeVertexVectorTemp();\n            var rotationMatrixRegister = registerCache.getFreeVertexConstant();\n            animationRegisterData.setRegisterIndex(this, ParticleRotateToHeadingState_1.ParticleRotateToHeadingState.MATRIX_INDEX, rotationMatrixRegister.index);\n            registerCache.getFreeVertexConstant();\n            registerCache.getFreeVertexConstant();\n            registerCache.getFreeVertexConstant();\n            registerCache.removeVertexTempUsage(temp1);\n            registerCache.removeVertexTempUsage(temp2);\n            //process the velocity\n            code += \"m33 \" + temp1 + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz,\" + rotationMatrixRegister + \"\\n\";\n            code += \"mov \" + temp3 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n            code += \"mov \" + temp3 + \".xy,\" + temp1 + \".xy\\n\";\n            code += \"nrm \" + temp3 + \".xyz,\" + temp3 + \".xyz\\n\";\n            //temp3.x=cos,temp3.y=sin\n            //only process z axis\n            code += \"mov \" + temp2 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n            code += \"mov \" + temp2 + \".x,\" + temp3 + \".y\\n\";\n            code += \"mov \" + temp2 + \".y,\" + temp3 + \".x\\n\";\n            code += \"mov \" + temp1 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n            code += \"mov \" + temp1 + \".x,\" + temp3 + \".x\\n\";\n            code += \"neg \" + temp1 + \".y,\" + temp3 + \".y\\n\";\n            code += \"mov \" + temp3 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n            code += \"mov \" + temp3 + \".z,\" + animationRegisterData.vertexOneConst + \"\\n\";\n            code += \"m33 \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp1 + \"\\n\";\n            for (i = 0; i < len; i++)\n                code += \"m33 \" + animationRegisterData.rotationRegisters[i] + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \",\" + temp1 + \"\\n\";\n        }\n        else {\n            var nrmVel = registerCache.getFreeVertexVectorTemp();\n            registerCache.addVertexTempUsages(nrmVel, 1);\n            var xAxis = registerCache.getFreeVertexVectorTemp();\n            registerCache.addVertexTempUsages(xAxis, 1);\n            var R = registerCache.getFreeVertexVectorTemp();\n            registerCache.addVertexTempUsages(R, 1);\n            var R_rev = registerCache.getFreeVertexVectorTemp();\n            var cos = new ShaderRegisterElement_1.ShaderRegisterElement(R.regName, R.index, 3);\n            var sin = new ShaderRegisterElement_1.ShaderRegisterElement(R_rev.regName, R_rev.index, 3);\n            var cos2 = new ShaderRegisterElement_1.ShaderRegisterElement(nrmVel.regName, nrmVel.index, 3);\n            var tempSingle = sin;\n            registerCache.removeVertexTempUsage(nrmVel);\n            registerCache.removeVertexTempUsage(xAxis);\n            registerCache.removeVertexTempUsage(R);\n            code += \"mov \" + xAxis + \".x,\" + animationRegisterData.vertexOneConst + \"\\n\";\n            code += \"mov \" + xAxis + \".yz,\" + animationRegisterData.vertexZeroConst + \"\\n\";\n            code += \"nrm \" + nrmVel + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz\\n\";\n            code += \"dp3 \" + cos2 + \",\" + nrmVel + \".xyz,\" + xAxis + \".xyz\\n\";\n            code += \"crs \" + nrmVel + \".xyz,\" + xAxis + \".xyz,\" + nrmVel + \".xyz\\n\";\n            code += \"nrm \" + nrmVel + \".xyz,\" + nrmVel + \".xyz\\n\";\n            //use R as temp to judge if nrm is (0,0,0).\n            //if nrm is (0,0,0) ,change it to (0,0,1).\n            code += \"dp3 \" + R + \".x,\" + nrmVel + \".xyz,\" + nrmVel + \".xyz\\n\";\n            code += \"sge \" + R + \".x,\" + animationRegisterData.vertexZeroConst + \",\" + R + \".x\\n\";\n            code += \"add \" + nrmVel + \".z,\" + R + \".x,\" + nrmVel + \".z\\n\";\n            code += \"add \" + tempSingle + \",\" + cos2 + \",\" + animationRegisterData.vertexOneConst + \"\\n\";\n            code += \"div \" + tempSingle + \",\" + tempSingle + \",\" + animationRegisterData.vertexTwoConst + \"\\n\";\n            code += \"sqt \" + cos + \",\" + tempSingle + \"\\n\";\n            code += \"sub \" + tempSingle + \",\" + animationRegisterData.vertexOneConst + \",\" + cos2 + \"\\n\";\n            code += \"div \" + tempSingle + \",\" + tempSingle + \",\" + animationRegisterData.vertexTwoConst + \"\\n\";\n            code += \"sqt \" + sin + \",\" + tempSingle + \"\\n\";\n            code += \"mul \" + R + \".xyz,\" + sin + \",\" + nrmVel + \".xyz\\n\";\n            //use cos as R.w\n            code += \"mul \" + R_rev + \".xyz,\" + sin + \",\" + nrmVel + \".xyz\\n\";\n            code += \"neg \" + R_rev + \".xyz,\" + R_rev + \".xyz\\n\";\n            //use cos as R_rev.w\n            //nrmVel and xAxis are used as temp register\n            code += \"crs \" + nrmVel + \".xyz,\" + R + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz\\n\";\n            //use cos as R.w\n            code += \"mul \" + xAxis + \".xyz,\" + cos + \",\" + animationRegisterData.scaleAndRotateTarget + \".xyz\\n\";\n            code += \"add \" + nrmVel + \".xyz,\" + nrmVel + \".xyz,\" + xAxis + \".xyz\\n\";\n            code += \"dp3 \" + xAxis + \".w,\" + R + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz\\n\";\n            code += \"neg \" + nrmVel + \".w,\" + xAxis + \".w\\n\";\n            code += \"crs \" + R + \".xyz,\" + nrmVel + \".xyz,\" + R_rev + \".xyz\\n\";\n            //code += \"mul \" + xAxis + \".xyzw,\" + nrmVel + \".xyzw,\" +R_rev + \".w\\n\";\n            code += \"mul \" + xAxis + \".xyzw,\" + nrmVel + \".xyzw,\" + cos + \"\\n\";\n            code += \"add \" + R + \".xyz,\" + R + \".xyz,\" + xAxis + \".xyz\\n\";\n            code += \"mul \" + xAxis + \".xyz,\" + nrmVel + \".w,\" + R_rev + \".xyz\\n\";\n            code += \"add \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + R + \".xyz,\" + xAxis + \".xyz\\n\";\n            for (i = 0; i < len; i++) {\n                //just repeat the calculate above\n                //because of the limited registers, no need to optimise\n                code += \"mov \" + xAxis + \".x,\" + animationRegisterData.vertexOneConst + \"\\n\";\n                code += \"mov \" + xAxis + \".yz,\" + animationRegisterData.vertexZeroConst + \"\\n\";\n                code += \"nrm \" + nrmVel + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz\\n\";\n                code += \"dp3 \" + cos2 + \",\" + nrmVel + \".xyz,\" + xAxis + \".xyz\\n\";\n                code += \"crs \" + nrmVel + \".xyz,\" + xAxis + \".xyz,\" + nrmVel + \".xyz\\n\";\n                code += \"nrm \" + nrmVel + \".xyz,\" + nrmVel + \".xyz\\n\";\n                code += \"dp3 \" + R + \".x,\" + nrmVel + \".xyz,\" + nrmVel + \".xyz\\n\";\n                code += \"sge \" + R + \".x,\" + animationRegisterData.vertexZeroConst + \",\" + R + \".x\\n\";\n                code += \"add \" + nrmVel + \".z,\" + R + \".x,\" + nrmVel + \".z\\n\";\n                code += \"add \" + tempSingle + \",\" + cos2 + \",\" + animationRegisterData.vertexOneConst + \"\\n\";\n                code += \"div \" + tempSingle + \",\" + tempSingle + \",\" + animationRegisterData.vertexTwoConst + \"\\n\";\n                code += \"sqt \" + cos + \",\" + tempSingle + \"\\n\";\n                code += \"sub \" + tempSingle + \",\" + animationRegisterData.vertexOneConst + \",\" + cos2 + \"\\n\";\n                code += \"div \" + tempSingle + \",\" + tempSingle + \",\" + animationRegisterData.vertexTwoConst + \"\\n\";\n                code += \"sqt \" + sin + \",\" + tempSingle + \"\\n\";\n                code += \"mul \" + R + \".xyz,\" + sin + \",\" + nrmVel + \".xyz\\n\";\n                code += \"mul \" + R_rev + \".xyz,\" + sin + \",\" + nrmVel + \".xyz\\n\";\n                code += \"neg \" + R_rev + \".xyz,\" + R_rev + \".xyz\\n\";\n                code += \"crs \" + nrmVel + \".xyz,\" + R + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \".xyz\\n\";\n                code += \"mul \" + xAxis + \".xyz,\" + cos + \",\" + animationRegisterData.rotationRegisters[i] + \".xyz\\n\";\n                code += \"add \" + nrmVel + \".xyz,\" + nrmVel + \".xyz,\" + xAxis + \".xyz\\n\";\n                code += \"dp3 \" + xAxis + \".w,\" + R + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \".xyz\\n\";\n                code += \"neg \" + nrmVel + \".w,\" + xAxis + \".w\\n\";\n                code += \"crs \" + R + \".xyz,\" + nrmVel + \".xyz,\" + R_rev + \".xyz\\n\";\n                code += \"mul \" + xAxis + \".xyzw,\" + nrmVel + \".xyzw,\" + cos + \"\\n\";\n                code += \"add \" + R + \".xyz,\" + R + \".xyz,\" + xAxis + \".xyz\\n\";\n                code += \"mul \" + xAxis + \".xyz,\" + nrmVel + \".w,\" + R_rev + \".xyz\\n\";\n                code += \"add \" + animationRegisterData.rotationRegisters[i] + \".xyz,\" + R + \".xyz,\" + xAxis + \".xyz\\n\";\n            }\n        }\n        return code;\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleRotateToHeadingNode.prototype.getAnimationState = function (animator) {\n        return animator.getAnimationState(this);\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleRotateToHeadingNode.prototype._iProcessAnimationSetting = function (particleAnimationSet) {\n        particleAnimationSet.needVelocity = true;\n    };\n    return ParticleRotateToHeadingNode;\n}(ParticleNodeBase_1.ParticleNodeBase));\nexports.ParticleRotateToHeadingNode = ParticleRotateToHeadingNode;\n\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticleRotateToHeadingState\":\"awayjs-renderergl/lib/animators/states/ParticleRotateToHeadingState\",\"../../shaders/ShaderRegisterElement\":\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\"}],\"awayjs-renderergl/lib/animators/nodes/ParticleRotateToPositionNode\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\nvar ParticleRotateToPositionState_1 = require(\"../../animators/states/ParticleRotateToPositionState\");\nvar ShaderRegisterElement_1 = require(\"../../shaders/ShaderRegisterElement\");\n/**\n * A particle animation node used to control the rotation of a particle to face to a position\n */\nvar ParticleRotateToPositionNode = (function (_super) {\n    __extends(ParticleRotateToPositionNode, _super);\n    /**\n     * Creates a new <code>ParticleRotateToPositionNode</code>\n     */\n    function ParticleRotateToPositionNode(mode, position) {\n        if (position === void 0) { position = null; }\n        _super.call(this, \"ParticleRotateToPosition\", mode, 3, 3);\n        this._pStateClass = ParticleRotateToPositionState_1.ParticleRotateToPositionState;\n        this._iPosition = position || new Vector3D_1.Vector3D();\n    }\n    /**\n     * @inheritDoc\n     */\n    ParticleRotateToPositionNode.prototype.getAGALVertexCode = function (shader, animationSet, registerCache, animationRegisterData) {\n        var positionAttribute = (this._pMode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) ? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\n        animationRegisterData.setRegisterIndex(this, ParticleRotateToPositionState_1.ParticleRotateToPositionState.POSITION_INDEX, positionAttribute.index);\n        var code = \"\";\n        var len = animationRegisterData.rotationRegisters.length;\n        var i;\n        if (animationSet.hasBillboard) {\n            var temp1 = registerCache.getFreeVertexVectorTemp();\n            registerCache.addVertexTempUsages(temp1, 1);\n            var temp2 = registerCache.getFreeVertexVectorTemp();\n            registerCache.addVertexTempUsages(temp2, 1);\n            var temp3 = registerCache.getFreeVertexVectorTemp();\n            var rotationMatrixRegister = registerCache.getFreeVertexConstant();\n            animationRegisterData.setRegisterIndex(this, ParticleRotateToPositionState_1.ParticleRotateToPositionState.MATRIX_INDEX, rotationMatrixRegister.index);\n            registerCache.getFreeVertexConstant();\n            registerCache.getFreeVertexConstant();\n            registerCache.getFreeVertexConstant();\n            registerCache.removeVertexTempUsage(temp1);\n            registerCache.removeVertexTempUsage(temp2);\n            //process the position\n            code += \"sub \" + temp1 + \".xyz,\" + positionAttribute + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\n            code += \"m33 \" + temp1 + \".xyz,\" + temp1 + \".xyz,\" + rotationMatrixRegister + \"\\n\";\n            code += \"mov \" + temp3 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n            code += \"mov \" + temp3 + \".xy,\" + temp1 + \".xy\\n\";\n            code += \"nrm \" + temp3 + \".xyz,\" + temp3 + \".xyz\\n\";\n            //temp3.x=cos,temp3.y=sin\n            //only process z axis\n            code += \"mov \" + temp2 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n            code += \"mov \" + temp2 + \".x,\" + temp3 + \".y\\n\";\n            code += \"mov \" + temp2 + \".y,\" + temp3 + \".x\\n\";\n            code += \"mov \" + temp1 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n            code += \"mov \" + temp1 + \".x,\" + temp3 + \".x\\n\";\n            code += \"neg \" + temp1 + \".y,\" + temp3 + \".y\\n\";\n            code += \"mov \" + temp3 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n            code += \"mov \" + temp3 + \".z,\" + animationRegisterData.vertexOneConst + \"\\n\";\n            code += \"m33 \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp1 + \"\\n\";\n            for (i = 0; i < len; i++)\n                code += \"m33 \" + animationRegisterData.rotationRegisters[i] + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \",\" + temp1 + \"\\n\";\n        }\n        else {\n            var nrmDirection = registerCache.getFreeVertexVectorTemp();\n            registerCache.addVertexTempUsages(nrmDirection, 1);\n            var temp = registerCache.getFreeVertexVectorTemp();\n            registerCache.addVertexTempUsages(temp, 1);\n            var cos = new ShaderRegisterElement_1.ShaderRegisterElement(temp.regName, temp.index, 0);\n            var sin = new ShaderRegisterElement_1.ShaderRegisterElement(temp.regName, temp.index, 1);\n            var o_temp = new ShaderRegisterElement_1.ShaderRegisterElement(temp.regName, temp.index, 2);\n            var tempSingle = new ShaderRegisterElement_1.ShaderRegisterElement(temp.regName, temp.index, 3);\n            var R = registerCache.getFreeVertexVectorTemp();\n            registerCache.addVertexTempUsages(R, 1);\n            registerCache.removeVertexTempUsage(nrmDirection);\n            registerCache.removeVertexTempUsage(temp);\n            registerCache.removeVertexTempUsage(R);\n            code += \"sub \" + nrmDirection + \".xyz,\" + positionAttribute + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\n            code += \"nrm \" + nrmDirection + \".xyz,\" + nrmDirection + \".xyz\\n\";\n            code += \"mov \" + sin + \",\" + nrmDirection + \".y\\n\";\n            code += \"mul \" + cos + \",\" + sin + \",\" + sin + \"\\n\";\n            code += \"sub \" + cos + \",\" + animationRegisterData.vertexOneConst + \",\" + cos + \"\\n\";\n            code += \"sqt \" + cos + \",\" + cos + \"\\n\";\n            code += \"mul \" + R + \".x,\" + cos + \",\" + animationRegisterData.scaleAndRotateTarget + \".y\\n\";\n            code += \"mul \" + R + \".y,\" + sin + \",\" + animationRegisterData.scaleAndRotateTarget + \".z\\n\";\n            code += \"mul \" + R + \".z,\" + sin + \",\" + animationRegisterData.scaleAndRotateTarget + \".y\\n\";\n            code += \"mul \" + R + \".w,\" + cos + \",\" + animationRegisterData.scaleAndRotateTarget + \".z\\n\";\n            code += \"sub \" + animationRegisterData.scaleAndRotateTarget + \".y,\" + R + \".x,\" + R + \".y\\n\";\n            code += \"add \" + animationRegisterData.scaleAndRotateTarget + \".z,\" + R + \".z,\" + R + \".w\\n\";\n            code += \"abs \" + R + \".y,\" + nrmDirection + \".y\\n\";\n            code += \"sge \" + R + \".z,\" + R + \".y,\" + animationRegisterData.vertexOneConst + \"\\n\";\n            code += \"mul \" + R + \".x,\" + R + \".y,\" + nrmDirection + \".y\\n\";\n            //judgu if nrmDirection=(0,1,0);\n            code += \"mov \" + nrmDirection + \".y,\" + animationRegisterData.vertexZeroConst + \"\\n\";\n            code += \"dp3 \" + sin + \",\" + nrmDirection + \".xyz,\" + nrmDirection + \".xyz\\n\";\n            code += \"sge \" + tempSingle + \",\" + animationRegisterData.vertexZeroConst + \",\" + sin + \"\\n\";\n            code += \"mov \" + nrmDirection + \".y,\" + animationRegisterData.vertexZeroConst + \"\\n\";\n            code += \"nrm \" + nrmDirection + \".xyz,\" + nrmDirection + \".xyz\\n\";\n            code += \"sub \" + sin + \",\" + animationRegisterData.vertexOneConst + \",\" + tempSingle + \"\\n\";\n            code += \"mul \" + sin + \",\" + sin + \",\" + nrmDirection + \".x\\n\";\n            code += \"mov \" + cos + \",\" + nrmDirection + \".z\\n\";\n            code += \"neg \" + cos + \",\" + cos + \"\\n\";\n            code += \"sub \" + o_temp + \",\" + animationRegisterData.vertexOneConst + \",\" + cos + \"\\n\";\n            code += \"mul \" + o_temp + \",\" + R + \".x,\" + tempSingle + \"\\n\";\n            code += \"add \" + cos + \",\" + cos + \",\" + o_temp + \"\\n\";\n            code += \"mul \" + R + \".x,\" + cos + \",\" + animationRegisterData.scaleAndRotateTarget + \".x\\n\";\n            code += \"mul \" + R + \".y,\" + sin + \",\" + animationRegisterData.scaleAndRotateTarget + \".z\\n\";\n            code += \"mul \" + R + \".z,\" + sin + \",\" + animationRegisterData.scaleAndRotateTarget + \".x\\n\";\n            code += \"mul \" + R + \".w,\" + cos + \",\" + animationRegisterData.scaleAndRotateTarget + \".z\\n\";\n            code += \"sub \" + animationRegisterData.scaleAndRotateTarget + \".x,\" + R + \".x,\" + R + \".y\\n\";\n            code += \"add \" + animationRegisterData.scaleAndRotateTarget + \".z,\" + R + \".z,\" + R + \".w\\n\";\n            for (i = 0; i < len; i++) {\n                //just repeat the calculate above\n                //because of the limited registers, no need to optimise\n                code += \"sub \" + nrmDirection + \".xyz,\" + positionAttribute + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\n                code += \"nrm \" + nrmDirection + \".xyz,\" + nrmDirection + \".xyz\\n\";\n                code += \"mov \" + sin + \",\" + nrmDirection + \".y\\n\";\n                code += \"mul \" + cos + \",\" + sin + \",\" + sin + \"\\n\";\n                code += \"sub \" + cos + \",\" + animationRegisterData.vertexOneConst + \",\" + cos + \"\\n\";\n                code += \"sqt \" + cos + \",\" + cos + \"\\n\";\n                code += \"mul \" + R + \".x,\" + cos + \",\" + animationRegisterData.rotationRegisters[i] + \".y\\n\";\n                code += \"mul \" + R + \".y,\" + sin + \",\" + animationRegisterData.rotationRegisters[i] + \".z\\n\";\n                code += \"mul \" + R + \".z,\" + sin + \",\" + animationRegisterData.rotationRegisters[i] + \".y\\n\";\n                code += \"mul \" + R + \".w,\" + cos + \",\" + animationRegisterData.rotationRegisters[i] + \".z\\n\";\n                code += \"sub \" + animationRegisterData.rotationRegisters[i] + \".y,\" + R + \".x,\" + R + \".y\\n\";\n                code += \"add \" + animationRegisterData.rotationRegisters[i] + \".z,\" + R + \".z,\" + R + \".w\\n\";\n                code += \"abs \" + R + \".y,\" + nrmDirection + \".y\\n\";\n                code += \"sge \" + R + \".z,\" + R + \".y,\" + animationRegisterData.vertexOneConst + \"\\n\";\n                code += \"mul \" + R + \".x,\" + R + \".y,\" + nrmDirection + \".y\\n\";\n                code += \"mov \" + nrmDirection + \".y,\" + animationRegisterData.vertexZeroConst + \"\\n\";\n                code += \"dp3 \" + sin + \",\" + nrmDirection + \".xyz,\" + nrmDirection + \".xyz\\n\";\n                code += \"sge \" + tempSingle + \",\" + animationRegisterData.vertexZeroConst + \",\" + sin + \"\\n\";\n                code += \"mov \" + nrmDirection + \".y,\" + animationRegisterData.vertexZeroConst + \"\\n\";\n                code += \"nrm \" + nrmDirection + \".xyz,\" + nrmDirection + \".xyz\\n\";\n                code += \"sub \" + sin + \",\" + animationRegisterData.vertexOneConst + \",\" + tempSingle + \"\\n\";\n                code += \"mul \" + sin + \",\" + sin + \",\" + nrmDirection + \".x\\n\";\n                code += \"mov \" + cos + \",\" + nrmDirection + \".z\\n\";\n                code += \"neg \" + cos + \",\" + cos + \"\\n\";\n                code += \"sub \" + o_temp + \",\" + animationRegisterData.vertexOneConst + \",\" + cos + \"\\n\";\n                code += \"mul \" + o_temp + \",\" + R + \".x,\" + tempSingle + \"\\n\";\n                code += \"add \" + cos + \",\" + cos + \",\" + o_temp + \"\\n\";\n                code += \"mul \" + R + \".x,\" + cos + \",\" + animationRegisterData.rotationRegisters[i] + \".x\\n\";\n                code += \"mul \" + R + \".y,\" + sin + \",\" + animationRegisterData.rotationRegisters[i] + \".z\\n\";\n                code += \"mul \" + R + \".z,\" + sin + \",\" + animationRegisterData.rotationRegisters[i] + \".x\\n\";\n                code += \"mul \" + R + \".w,\" + cos + \",\" + animationRegisterData.rotationRegisters[i] + \".z\\n\";\n                code += \"sub \" + animationRegisterData.rotationRegisters[i] + \".x,\" + R + \".x,\" + R + \".y\\n\";\n                code += \"add \" + animationRegisterData.rotationRegisters[i] + \".z,\" + R + \".z,\" + R + \".w\\n\";\n            }\n        }\n        return code;\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleRotateToPositionNode.prototype.getAnimationState = function (animator) {\n        return animator.getAnimationState(this);\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleRotateToPositionNode.prototype._iGeneratePropertyOfOneParticle = function (param) {\n        var offset = param[ParticleRotateToPositionNode.POSITION_VECTOR3D];\n        if (!offset)\n            throw (new Error(\"there is no \" + ParticleRotateToPositionNode.POSITION_VECTOR3D + \" in param!\"));\n        this._pOneData[0] = offset.x;\n        this._pOneData[1] = offset.y;\n        this._pOneData[2] = offset.z;\n    };\n    /**\n     * Reference for the position the particle will rotate to face for a single particle (when in local property mode).\n     * Expects a <code>Vector3D</code> object representing the position that the particle must face.\n     */\n    ParticleRotateToPositionNode.POSITION_VECTOR3D = \"RotateToPositionVector3D\";\n    return ParticleRotateToPositionNode;\n}(ParticleNodeBase_1.ParticleNodeBase));\nexports.ParticleRotateToPositionNode = ParticleRotateToPositionNode;\n\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticleRotateToPositionState\":\"awayjs-renderergl/lib/animators/states/ParticleRotateToPositionState\",\"../../shaders/ShaderRegisterElement\":\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\",\"awayjs-core/lib/geom/Vector3D\":undefined}],\"awayjs-renderergl/lib/animators/nodes/ParticleRotationalVelocityNode\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\nvar ParticleRotationalVelocityState_1 = require(\"../../animators/states/ParticleRotationalVelocityState\");\nvar ShaderRegisterElement_1 = require(\"../../shaders/ShaderRegisterElement\");\n/**\n * A particle animation node used to set the starting rotational velocity of a particle.\n */\nvar ParticleRotationalVelocityNode = (function (_super) {\n    __extends(ParticleRotationalVelocityNode, _super);\n    /**\n     * Creates a new <code>ParticleRotationalVelocityNode</code>\n     *\n     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\n     */\n    function ParticleRotationalVelocityNode(mode, rotationalVelocity) {\n        if (rotationalVelocity === void 0) { rotationalVelocity = null; }\n        _super.call(this, \"ParticleRotationalVelocity\", mode, 4);\n        this._pStateClass = ParticleRotationalVelocityState_1.ParticleRotationalVelocityState;\n        this._iRotationalVelocity = rotationalVelocity || new Vector3D_1.Vector3D();\n    }\n    /**\n     * @inheritDoc\n     */\n    ParticleRotationalVelocityNode.prototype.getAGALVertexCode = function (shader, animationSet, registerCache, animationRegisterData) {\n        var rotationRegister = (this._pMode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) ? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\n        animationRegisterData.setRegisterIndex(this, ParticleRotationalVelocityState_1.ParticleRotationalVelocityState.ROTATIONALVELOCITY_INDEX, rotationRegister.index);\n        var nrmVel = registerCache.getFreeVertexVectorTemp();\n        registerCache.addVertexTempUsages(nrmVel, 1);\n        var xAxis = registerCache.getFreeVertexVectorTemp();\n        registerCache.addVertexTempUsages(xAxis, 1);\n        var temp = registerCache.getFreeVertexVectorTemp();\n        registerCache.addVertexTempUsages(temp, 1);\n        var Rtemp = new ShaderRegisterElement_1.ShaderRegisterElement(temp.regName, temp.index);\n        var R_rev = registerCache.getFreeVertexVectorTemp();\n        R_rev = new ShaderRegisterElement_1.ShaderRegisterElement(R_rev.regName, R_rev.index);\n        var cos = new ShaderRegisterElement_1.ShaderRegisterElement(Rtemp.regName, Rtemp.index, 3);\n        var sin = new ShaderRegisterElement_1.ShaderRegisterElement(R_rev.regName, R_rev.index, 3);\n        registerCache.removeVertexTempUsage(nrmVel);\n        registerCache.removeVertexTempUsage(xAxis);\n        registerCache.removeVertexTempUsage(temp);\n        var code = \"\";\n        code += \"mov \" + nrmVel + \".xyz,\" + rotationRegister + \".xyz\\n\";\n        code += \"mov \" + nrmVel + \".w,\" + animationRegisterData.vertexZeroConst + \"\\n\";\n        code += \"mul \" + cos + \",\" + animationRegisterData.vertexTime + \",\" + rotationRegister + \".w\\n\";\n        code += \"sin \" + sin + \",\" + cos + \"\\n\";\n        code += \"cos \" + cos + \",\" + cos + \"\\n\";\n        code += \"mul \" + Rtemp + \".xyz,\" + sin + \",\" + nrmVel + \".xyz\\n\";\n        code += \"mul \" + R_rev + \".xyz,\" + sin + \",\" + nrmVel + \".xyz\\n\";\n        code += \"neg \" + R_rev + \".xyz,\" + R_rev + \".xyz\\n\";\n        //nrmVel and xAxis are used as temp register\n        code += \"crs \" + nrmVel + \".xyz,\" + Rtemp + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz\\n\";\n        code += \"mul \" + xAxis + \".xyz,\" + cos + \",\" + animationRegisterData.scaleAndRotateTarget + \".xyz\\n\";\n        code += \"add \" + nrmVel + \".xyz,\" + nrmVel + \".xyz,\" + xAxis + \".xyz\\n\";\n        code += \"dp3 \" + xAxis + \".w,\" + Rtemp + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz\\n\";\n        code += \"neg \" + nrmVel + \".w,\" + xAxis + \".w\\n\";\n        code += \"crs \" + Rtemp + \".xyz,\" + nrmVel + \".xyz,\" + R_rev + \".xyz\\n\";\n        //use cos as R_rev.w\n        code += \"mul \" + xAxis + \".xyzw,\" + nrmVel + \".xyzw,\" + cos + \"\\n\";\n        code += \"add \" + Rtemp + \".xyz,\" + Rtemp + \".xyz,\" + xAxis + \".xyz\\n\";\n        code += \"mul \" + xAxis + \".xyz,\" + nrmVel + \".w,\" + R_rev + \".xyz\\n\";\n        code += \"add \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + Rtemp + \".xyz,\" + xAxis + \".xyz\\n\";\n        var len = animationRegisterData.rotationRegisters.length;\n        for (var i = 0; i < len; i++) {\n            code += \"mov \" + nrmVel + \".xyz,\" + rotationRegister + \".xyz\\n\";\n            code += \"mov \" + nrmVel + \".w,\" + animationRegisterData.vertexZeroConst + \"\\n\";\n            code += \"mul \" + cos + \",\" + animationRegisterData.vertexTime + \",\" + rotationRegister + \".w\\n\";\n            code += \"sin \" + sin + \",\" + cos + \"\\n\";\n            code += \"cos \" + cos + \",\" + cos + \"\\n\";\n            code += \"mul \" + Rtemp + \".xyz,\" + sin + \",\" + nrmVel + \".xyz\\n\";\n            code += \"mul \" + R_rev + \".xyz,\" + sin + \",\" + nrmVel + \".xyz\\n\";\n            code += \"neg \" + R_rev + \".xyz,\" + R_rev + \".xyz\\n\";\n            code += \"crs \" + nrmVel + \".xyz,\" + Rtemp + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \".xyz\\n\";\n            code += \"mul \" + xAxis + \".xyz,\" + cos + \",\" + animationRegisterData.rotationRegisters[i] + \"\\n\";\n            code += \"add \" + nrmVel + \".xyz,\" + nrmVel + \".xyz,\" + xAxis + \".xyz\\n\";\n            code += \"dp3 \" + xAxis + \".w,\" + Rtemp + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \"\\n\";\n            code += \"neg \" + nrmVel + \".w,\" + xAxis + \".w\\n\";\n            code += \"crs \" + Rtemp + \".xyz,\" + nrmVel + \".xyz,\" + R_rev + \".xyz\\n\";\n            code += \"mul \" + xAxis + \".xyzw,\" + nrmVel + \".xyzw,\" + cos + \"\\n\";\n            code += \"add \" + Rtemp + \".xyz,\" + Rtemp + \".xyz,\" + xAxis + \".xyz\\n\";\n            code += \"mul \" + xAxis + \".xyz,\" + nrmVel + \".w,\" + R_rev + \".xyz\\n\";\n            code += \"add \" + animationRegisterData.rotationRegisters[i] + \",\" + Rtemp + \".xyz,\" + xAxis + \".xyz\\n\";\n        }\n        return code;\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleRotationalVelocityNode.prototype.getAnimationState = function (animator) {\n        return animator.getAnimationState(this);\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleRotationalVelocityNode.prototype._iGeneratePropertyOfOneParticle = function (param) {\n        //(Vector3d.x,Vector3d.y,Vector3d.z) is rotation axis,Vector3d.w is cycle duration\n        var rotate = param[ParticleRotationalVelocityNode.ROTATIONALVELOCITY_VECTOR3D];\n        if (!rotate)\n            throw (new Error(\"there is no \" + ParticleRotationalVelocityNode.ROTATIONALVELOCITY_VECTOR3D + \" in param!\"));\n        if (rotate.length <= 0)\n            rotate.z = 1; //set the default direction\n        else\n            rotate.normalize();\n        this._pOneData[0] = rotate.x;\n        this._pOneData[1] = rotate.y;\n        this._pOneData[2] = rotate.z;\n        if (rotate.w <= 0)\n            throw (new Error(\"the cycle duration must greater than zero\"));\n        // it's used as angle/2 in agal\n        this._pOneData[3] = Math.PI / rotate.w;\n    };\n    /**\n     * Reference for rotational velocity node properties on a single particle (when in local property mode).\n     * Expects a <code>Vector3D</code> object representing the rotational velocity around an axis of the particle.\n     */\n    ParticleRotationalVelocityNode.ROTATIONALVELOCITY_VECTOR3D = \"RotationalVelocityVector3D\";\n    return ParticleRotationalVelocityNode;\n}(ParticleNodeBase_1.ParticleNodeBase));\nexports.ParticleRotationalVelocityNode = ParticleRotationalVelocityNode;\n\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticleRotationalVelocityState\":\"awayjs-renderergl/lib/animators/states/ParticleRotationalVelocityState\",\"../../shaders/ShaderRegisterElement\":\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\",\"awayjs-core/lib/geom/Vector3D\":undefined}],\"awayjs-renderergl/lib/animators/nodes/ParticleScaleNode\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\nvar ParticleScaleState_1 = require(\"../../animators/states/ParticleScaleState\");\n/**\n * A particle animation node used to control the scale variation of a particle over time.\n */\nvar ParticleScaleNode = (function (_super) {\n    __extends(ParticleScaleNode, _super);\n    /**\n     * Creates a new <code>ParticleScaleNode</code>\n     *\n     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\n     * @param    [optional] usesCycle       Defines whether the node uses the <code>cycleDuration</code> property in the shader to calculate the period of animation independent of particle duration. Defaults to false.\n     * @param    [optional] usesPhase       Defines whether the node uses the <code>cyclePhase</code> property in the shader to calculate a starting offset to the animation cycle. Defaults to false.\n     * @param    [optional] minScale        Defines the default min scale transform of the node, when in global mode. Defaults to 1.\n     * @param    [optional] maxScale        Defines the default max color transform of the node, when in global mode. Defaults to 1.\n     * @param    [optional] cycleDuration   Defines the default duration of the animation in seconds, used as a period independent of particle duration when in global mode. Defaults to 1.\n     * @param    [optional] cyclePhase      Defines the default phase of the cycle in degrees, used as the starting offset of the cycle when in global mode. Defaults to 0.\n     */\n    function ParticleScaleNode(mode, usesCycle, usesPhase, minScale, maxScale, cycleDuration, cyclePhase) {\n        if (minScale === void 0) { minScale = 1; }\n        if (maxScale === void 0) { maxScale = 1; }\n        if (cycleDuration === void 0) { cycleDuration = 1; }\n        if (cyclePhase === void 0) { cyclePhase = 0; }\n        _super.call(this, \"ParticleScale\", mode, (usesCycle && usesPhase) ? 4 : ((usesCycle || usesPhase) ? 3 : 2), 3);\n        this._pStateClass = ParticleScaleState_1.ParticleScaleState;\n        this._iUsesCycle = usesCycle;\n        this._iUsesPhase = usesPhase;\n        this._iMinScale = minScale;\n        this._iMaxScale = maxScale;\n        this._iCycleDuration = cycleDuration;\n        this._iCyclePhase = cyclePhase;\n    }\n    /**\n     * @inheritDoc\n     */\n    ParticleScaleNode.prototype.getAGALVertexCode = function (shader, animationSet, registerCache, animationRegisterData) {\n        var code = \"\";\n        var temp = registerCache.getFreeVertexSingleTemp();\n        var scaleRegister = (this._pMode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) ? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\n        animationRegisterData.setRegisterIndex(this, ParticleScaleState_1.ParticleScaleState.SCALE_INDEX, scaleRegister.index);\n        if (this._iUsesCycle) {\n            code += \"mul \" + temp + \",\" + animationRegisterData.vertexTime + \",\" + scaleRegister + \".z\\n\";\n            if (this._iUsesPhase)\n                code += \"add \" + temp + \",\" + temp + \",\" + scaleRegister + \".w\\n\";\n            code += \"sin \" + temp + \",\" + temp + \"\\n\";\n        }\n        code += \"mul \" + temp + \",\" + scaleRegister + \".y,\" + ((this._iUsesCycle) ? temp : animationRegisterData.vertexLife) + \"\\n\";\n        code += \"add \" + temp + \",\" + scaleRegister + \".x,\" + temp + \"\\n\";\n        code += \"mul \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp + \"\\n\";\n        return code;\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleScaleNode.prototype.getAnimationState = function (animator) {\n        return animator.getAnimationState(this);\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleScaleNode.prototype._iGeneratePropertyOfOneParticle = function (param) {\n        var scale = param[ParticleScaleNode.SCALE_VECTOR3D];\n        if (!scale)\n            throw (new Error(\"there is no \" + ParticleScaleNode.SCALE_VECTOR3D + \" in param!\"));\n        if (this._iUsesCycle) {\n            this._pOneData[0] = (scale.x + scale.y) / 2;\n            this._pOneData[1] = Math.abs(scale.x - scale.y) / 2;\n            if (scale.z <= 0)\n                throw (new Error(\"the cycle duration must be greater than zero\"));\n            this._pOneData[2] = Math.PI * 2 / scale.z;\n            if (this._iUsesPhase)\n                this._pOneData[3] = scale.w * Math.PI / 180;\n        }\n        else {\n            this._pOneData[0] = scale.x;\n            this._pOneData[1] = scale.y - scale.x;\n        }\n    };\n    /**\n     * Reference for scale node properties on a single particle (when in local property mode).\n     * Expects a <code>Vector3D</code> representing the min scale (x), max scale(y), optional cycle speed (z) and phase offset (w) applied to the particle.\n     */\n    ParticleScaleNode.SCALE_VECTOR3D = \"ScaleVector3D\";\n    return ParticleScaleNode;\n}(ParticleNodeBase_1.ParticleNodeBase));\nexports.ParticleScaleNode = ParticleScaleNode;\n\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticleScaleState\":\"awayjs-renderergl/lib/animators/states/ParticleScaleState\"}],\"awayjs-renderergl/lib/animators/nodes/ParticleSegmentedColorNode\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ParticleAnimationSet_1 = require(\"../../animators/ParticleAnimationSet\");\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\nvar ParticleSegmentedColorState_1 = require(\"../../animators/states/ParticleSegmentedColorState\");\nvar ShaderRegisterElement_1 = require(\"../../shaders/ShaderRegisterElement\");\n/**\n *\n */\nvar ParticleSegmentedColorNode = (function (_super) {\n    __extends(ParticleSegmentedColorNode, _super);\n    function ParticleSegmentedColorNode(usesMultiplier, usesOffset, numSegmentPoint, startColor, endColor, segmentPoints) {\n        //because of the stage3d register limitation, it only support the global mode\n        _super.call(this, \"ParticleSegmentedColor\", ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL, 0, ParticleAnimationSet_1.ParticleAnimationSet.COLOR_PRIORITY);\n        this._pStateClass = ParticleSegmentedColorState_1.ParticleSegmentedColorState;\n        if (numSegmentPoint > 4)\n            throw (new Error(\"the numSegmentPoint must be less or equal 4\"));\n        this._iUsesMultiplier = usesMultiplier;\n        this._iUsesOffset = usesOffset;\n        this._iNumSegmentPoint = numSegmentPoint;\n        this._iStartColor = startColor;\n        this._iEndColor = endColor;\n        this._iSegmentPoints = segmentPoints;\n    }\n    /**\n     * @inheritDoc\n     */\n    ParticleSegmentedColorNode.prototype._iProcessAnimationSetting = function (particleAnimationSet) {\n        if (this._iUsesMultiplier)\n            particleAnimationSet.hasColorMulNode = true;\n        if (this._iUsesOffset)\n            particleAnimationSet.hasColorAddNode = true;\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleSegmentedColorNode.prototype.getAGALVertexCode = function (shader, animationSet, registerCache, animationRegisterData) {\n        var code = \"\";\n        if (shader.usesFragmentAnimation) {\n            var accMultiplierColor;\n            //var accOffsetColor:ShaderRegisterElement;\n            if (this._iUsesMultiplier) {\n                accMultiplierColor = registerCache.getFreeVertexVectorTemp();\n                registerCache.addVertexTempUsages(accMultiplierColor, 1);\n            }\n            var tempColor = registerCache.getFreeVertexVectorTemp();\n            registerCache.addVertexTempUsages(tempColor, 1);\n            var temp = registerCache.getFreeVertexVectorTemp();\n            var accTime = new ShaderRegisterElement_1.ShaderRegisterElement(temp.regName, temp.index, 0);\n            var tempTime = new ShaderRegisterElement_1.ShaderRegisterElement(temp.regName, temp.index, 1);\n            if (this._iUsesMultiplier)\n                registerCache.removeVertexTempUsage(accMultiplierColor);\n            registerCache.removeVertexTempUsage(tempColor);\n            //for saving all the life values (at most 4)\n            var lifeTimeRegister = registerCache.getFreeVertexConstant();\n            animationRegisterData.setRegisterIndex(this, ParticleSegmentedColorState_1.ParticleSegmentedColorState.TIME_DATA_INDEX, lifeTimeRegister.index);\n            var i;\n            var startMulValue;\n            var deltaMulValues;\n            if (this._iUsesMultiplier) {\n                startMulValue = registerCache.getFreeVertexConstant();\n                animationRegisterData.setRegisterIndex(this, ParticleSegmentedColorState_1.ParticleSegmentedColorState.START_MULTIPLIER_INDEX, startMulValue.index);\n                deltaMulValues = new Array();\n                for (i = 0; i < this._iNumSegmentPoint + 1; i++)\n                    deltaMulValues.push(registerCache.getFreeVertexConstant());\n            }\n            var startOffsetValue;\n            var deltaOffsetValues;\n            if (this._iUsesOffset) {\n                startOffsetValue = registerCache.getFreeVertexConstant();\n                animationRegisterData.setRegisterIndex(this, ParticleSegmentedColorState_1.ParticleSegmentedColorState.START_OFFSET_INDEX, startOffsetValue.index);\n                deltaOffsetValues = new Array();\n                for (i = 0; i < this._iNumSegmentPoint + 1; i++)\n                    deltaOffsetValues.push(registerCache.getFreeVertexConstant());\n            }\n            if (this._iUsesMultiplier)\n                code += \"mov \" + accMultiplierColor + \",\" + startMulValue + \"\\n\";\n            if (this._iUsesOffset)\n                code += \"add \" + animationRegisterData.colorAddTarget + \",\" + animationRegisterData.colorAddTarget + \",\" + startOffsetValue + \"\\n\";\n            for (i = 0; i < this._iNumSegmentPoint; i++) {\n                switch (i) {\n                    case 0:\n                        code += \"min \" + tempTime + \",\" + animationRegisterData.vertexLife + \",\" + lifeTimeRegister + \".x\\n\";\n                        break;\n                    case 1:\n                        code += \"sub \" + accTime + \",\" + animationRegisterData.vertexLife + \",\" + lifeTimeRegister + \".x\\n\";\n                        code += \"max \" + tempTime + \",\" + accTime + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n                        code += \"min \" + tempTime + \",\" + tempTime + \",\" + lifeTimeRegister + \".y\\n\";\n                        break;\n                    case 2:\n                        code += \"sub \" + accTime + \",\" + accTime + \",\" + lifeTimeRegister + \".y\\n\";\n                        code += \"max \" + tempTime + \",\" + accTime + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n                        code += \"min \" + tempTime + \",\" + tempTime + \",\" + lifeTimeRegister + \".z\\n\";\n                        break;\n                    case 3:\n                        code += \"sub \" + accTime + \",\" + accTime + \",\" + lifeTimeRegister + \".z\\n\";\n                        code += \"max \" + tempTime + \",\" + accTime + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n                        code += \"min \" + tempTime + \",\" + tempTime + \",\" + lifeTimeRegister + \".w\\n\";\n                        break;\n                }\n                if (this._iUsesMultiplier) {\n                    code += \"mul \" + tempColor + \",\" + tempTime + \",\" + deltaMulValues[i] + \"\\n\";\n                    code += \"add \" + accMultiplierColor + \",\" + accMultiplierColor + \",\" + tempColor + \"\\n\";\n                }\n                if (this._iUsesOffset) {\n                    code += \"mul \" + tempColor + \",\" + tempTime + \",\" + deltaOffsetValues[i] + \"\\n\";\n                    code += \"add \" + animationRegisterData.colorAddTarget + \",\" + animationRegisterData.colorAddTarget + \",\" + tempColor + \"\\n\";\n                }\n            }\n            //for the last segment:\n            if (this._iNumSegmentPoint == 0)\n                tempTime = animationRegisterData.vertexLife;\n            else {\n                switch (this._iNumSegmentPoint) {\n                    case 1:\n                        code += \"sub \" + accTime + \",\" + animationRegisterData.vertexLife + \",\" + lifeTimeRegister + \".x\\n\";\n                        break;\n                    case 2:\n                        code += \"sub \" + accTime + \",\" + accTime + \",\" + lifeTimeRegister + \".y\\n\";\n                        break;\n                    case 3:\n                        code += \"sub \" + accTime + \",\" + accTime + \",\" + lifeTimeRegister + \".z\\n\";\n                        break;\n                    case 4:\n                        code += \"sub \" + accTime + \",\" + accTime + \",\" + lifeTimeRegister + \".w\\n\";\n                        break;\n                }\n                code += \"max \" + tempTime + \",\" + accTime + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n            }\n            if (this._iUsesMultiplier) {\n                code += \"mul \" + tempColor + \",\" + tempTime + \",\" + deltaMulValues[this._iNumSegmentPoint] + \"\\n\";\n                code += \"add \" + accMultiplierColor + \",\" + accMultiplierColor + \",\" + tempColor + \"\\n\";\n                code += \"mul \" + animationRegisterData.colorMulTarget + \",\" + animationRegisterData.colorMulTarget + \",\" + accMultiplierColor + \"\\n\";\n            }\n            if (this._iUsesOffset) {\n                code += \"mul \" + tempColor + \",\" + tempTime + \",\" + deltaOffsetValues[this._iNumSegmentPoint] + \"\\n\";\n                code += \"add \" + animationRegisterData.colorAddTarget + \",\" + animationRegisterData.colorAddTarget + \",\" + tempColor + \"\\n\";\n            }\n        }\n        return code;\n    };\n    return ParticleSegmentedColorNode;\n}(ParticleNodeBase_1.ParticleNodeBase));\nexports.ParticleSegmentedColorNode = ParticleSegmentedColorNode;\n\n},{\"../../animators/ParticleAnimationSet\":\"awayjs-renderergl/lib/animators/ParticleAnimationSet\",\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticleSegmentedColorState\":\"awayjs-renderergl/lib/animators/states/ParticleSegmentedColorState\",\"../../shaders/ShaderRegisterElement\":\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\"}],\"awayjs-renderergl/lib/animators/nodes/ParticleSpriteSheetNode\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ParticleAnimationSet_1 = require(\"../../animators/ParticleAnimationSet\");\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\nvar ParticleSpriteSheetState_1 = require(\"../../animators/states/ParticleSpriteSheetState\");\nvar ShaderRegisterElement_1 = require(\"../../shaders/ShaderRegisterElement\");\n/**\n * A particle animation node used when a spritesheet texture is required to animate the particle.\n * NB: to enable use of this node, the <code>repeat</code> property on the material has to be set to true.\n */\nvar ParticleSpriteSheetNode = (function (_super) {\n    __extends(ParticleSpriteSheetNode, _super);\n    /**\n     * Creates a new <code>ParticleSpriteSheetNode</code>\n     *\n     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\n     * @param    [optional] numColumns      Defines the number of columns in the spritesheet, when in global mode. Defaults to 1.\n     * @param    [optional] numRows         Defines the number of rows in the spritesheet, when in global mode. Defaults to 1.\n     * @param    [optional] cycleDuration   Defines the default cycle duration in seconds, when in global mode. Defaults to 1.\n     * @param    [optional] cyclePhase      Defines the default cycle phase, when in global mode. Defaults to 0.\n     * @param    [optional] totalFrames     Defines the total number of frames used by the spritesheet, when in global mode. Defaults to the number defined by numColumns and numRows.\n     * @param    [optional] looping         Defines whether the spritesheet animation is set to loop indefinitely. Defaults to true.\n     */\n    function ParticleSpriteSheetNode(mode, usesCycle, usesPhase, numColumns, numRows, cycleDuration, cyclePhase, totalFrames) {\n        if (numColumns === void 0) { numColumns = 1; }\n        if (numRows === void 0) { numRows = 1; }\n        if (cycleDuration === void 0) { cycleDuration = 1; }\n        if (cyclePhase === void 0) { cyclePhase = 0; }\n        if (totalFrames === void 0) { totalFrames = Number.MAX_VALUE; }\n        _super.call(this, \"ParticleSpriteSheet\", mode, usesCycle ? (usesPhase ? 3 : 2) : 1, ParticleAnimationSet_1.ParticleAnimationSet.POST_PRIORITY + 1);\n        this._pStateClass = ParticleSpriteSheetState_1.ParticleSpriteSheetState;\n        this._iUsesCycle = usesCycle;\n        this._iUsesPhase = usesPhase;\n        this._iNumColumns = numColumns;\n        this._iNumRows = numRows;\n        this._iCyclePhase = cyclePhase;\n        this._iCycleDuration = cycleDuration;\n        this._iTotalFrames = Math.min(totalFrames, numColumns * numRows);\n    }\n    Object.defineProperty(ParticleSpriteSheetNode.prototype, \"numColumns\", {\n        /**\n         * Defines the number of columns in the spritesheet, when in global mode. Defaults to 1. Read only.\n         */\n        get: function () {\n            return this._iNumColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ParticleSpriteSheetNode.prototype, \"numRows\", {\n        /**\n         * Defines the number of rows in the spritesheet, when in global mode. Defaults to 1. Read only.\n         */\n        get: function () {\n            return this._iNumRows;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ParticleSpriteSheetNode.prototype, \"totalFrames\", {\n        /**\n         * Defines the total number of frames used by the spritesheet, when in global mode. Defaults to the number defined by numColumns and numRows. Read only.\n         */\n        get: function () {\n            return this._iTotalFrames;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @inheritDoc\n     */\n    ParticleSpriteSheetNode.prototype.getAGALUVCode = function (shader, animationSet, registerCache, animationRegisterData) {\n        //get 2 vc\n        var uvParamConst1 = registerCache.getFreeVertexConstant();\n        var uvParamConst2 = (this._pMode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) ? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\n        animationRegisterData.setRegisterIndex(this, ParticleSpriteSheetState_1.ParticleSpriteSheetState.UV_INDEX_0, uvParamConst1.index);\n        animationRegisterData.setRegisterIndex(this, ParticleSpriteSheetState_1.ParticleSpriteSheetState.UV_INDEX_1, uvParamConst2.index);\n        var uTotal = new ShaderRegisterElement_1.ShaderRegisterElement(uvParamConst1.regName, uvParamConst1.index, 0);\n        var uStep = new ShaderRegisterElement_1.ShaderRegisterElement(uvParamConst1.regName, uvParamConst1.index, 1);\n        var vStep = new ShaderRegisterElement_1.ShaderRegisterElement(uvParamConst1.regName, uvParamConst1.index, 2);\n        var uSpeed = new ShaderRegisterElement_1.ShaderRegisterElement(uvParamConst2.regName, uvParamConst2.index, 0);\n        var cycle = new ShaderRegisterElement_1.ShaderRegisterElement(uvParamConst2.regName, uvParamConst2.index, 1);\n        var phaseTime = new ShaderRegisterElement_1.ShaderRegisterElement(uvParamConst2.regName, uvParamConst2.index, 2);\n        var temp = registerCache.getFreeVertexVectorTemp();\n        var time = new ShaderRegisterElement_1.ShaderRegisterElement(temp.regName, temp.index, 0);\n        var vOffset = new ShaderRegisterElement_1.ShaderRegisterElement(temp.regName, temp.index, 1);\n        temp = new ShaderRegisterElement_1.ShaderRegisterElement(temp.regName, temp.index, 2);\n        var temp2 = new ShaderRegisterElement_1.ShaderRegisterElement(temp.regName, temp.index, 3);\n        var u = new ShaderRegisterElement_1.ShaderRegisterElement(animationRegisterData.uvTarget.regName, animationRegisterData.uvTarget.index, 0);\n        var v = new ShaderRegisterElement_1.ShaderRegisterElement(animationRegisterData.uvTarget.regName, animationRegisterData.uvTarget.index, 1);\n        var code = \"\";\n        //scale uv\n        code += \"mul \" + u + \",\" + u + \",\" + uStep + \"\\n\";\n        if (this._iNumRows > 1)\n            code += \"mul \" + v + \",\" + v + \",\" + vStep + \"\\n\";\n        if (this._iUsesCycle) {\n            if (this._iUsesPhase)\n                code += \"add \" + time + \",\" + animationRegisterData.vertexTime + \",\" + phaseTime + \"\\n\";\n            else\n                code += \"mov \" + time + \",\" + animationRegisterData.vertexTime + \"\\n\";\n            code += \"div \" + time + \",\" + time + \",\" + cycle + \"\\n\";\n            code += \"frc \" + time + \",\" + time + \"\\n\";\n            code += \"mul \" + time + \",\" + time + \",\" + cycle + \"\\n\";\n            code += \"mul \" + temp + \",\" + time + \",\" + uSpeed + \"\\n\";\n        }\n        else\n            code += \"mul \" + temp.toString() + \",\" + animationRegisterData.vertexLife + \",\" + uTotal + \"\\n\";\n        if (this._iNumRows > 1) {\n            code += \"frc \" + temp2 + \",\" + temp + \"\\n\";\n            code += \"sub \" + vOffset + \",\" + temp + \",\" + temp2 + \"\\n\";\n            code += \"mul \" + vOffset + \",\" + vOffset + \",\" + vStep + \"\\n\";\n            code += \"add \" + v + \",\" + v + \",\" + vOffset + \"\\n\";\n        }\n        code += \"div \" + temp2 + \",\" + temp + \",\" + uStep + \"\\n\";\n        code += \"frc \" + temp + \",\" + temp2 + \"\\n\";\n        code += \"sub \" + temp2 + \",\" + temp2 + \",\" + temp + \"\\n\";\n        code += \"mul \" + temp + \",\" + temp2 + \",\" + uStep + \"\\n\";\n        if (this._iNumRows > 1)\n            code += \"frc \" + temp + \",\" + temp + \"\\n\";\n        code += \"add \" + u + \",\" + u + \",\" + temp + \"\\n\";\n        return code;\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleSpriteSheetNode.prototype.getAnimationState = function (animator) {\n        return animator.getAnimationState(this);\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleSpriteSheetNode.prototype._iProcessAnimationSetting = function (particleAnimationSet) {\n        particleAnimationSet.hasUVNode = true;\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleSpriteSheetNode.prototype._iGeneratePropertyOfOneParticle = function (param) {\n        if (this._iUsesCycle) {\n            var uvCycle = param[ParticleSpriteSheetNode.UV_VECTOR3D];\n            if (!uvCycle)\n                throw (new Error(\"there is no \" + ParticleSpriteSheetNode.UV_VECTOR3D + \" in param!\"));\n            if (uvCycle.x <= 0)\n                throw (new Error(\"the cycle duration must be greater than zero\"));\n            var uTotal = this._iTotalFrames / this._iNumColumns;\n            this._pOneData[0] = uTotal / uvCycle.x;\n            this._pOneData[1] = uvCycle.x;\n            if (this._iUsesPhase)\n                this._pOneData[2] = uvCycle.y;\n        }\n    };\n    /**\n     * Reference for spritesheet node properties on a single particle (when in local property mode).\n     * Expects a <code>Vector3D</code> representing the cycleDuration (x), optional phaseTime (y).\n     */\n    ParticleSpriteSheetNode.UV_VECTOR3D = \"UVVector3D\";\n    return ParticleSpriteSheetNode;\n}(ParticleNodeBase_1.ParticleNodeBase));\nexports.ParticleSpriteSheetNode = ParticleSpriteSheetNode;\n\n},{\"../../animators/ParticleAnimationSet\":\"awayjs-renderergl/lib/animators/ParticleAnimationSet\",\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticleSpriteSheetState\":\"awayjs-renderergl/lib/animators/states/ParticleSpriteSheetState\",\"../../shaders/ShaderRegisterElement\":\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\"}],\"awayjs-renderergl/lib/animators/nodes/ParticleTimeNode\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\nvar ParticleTimeState_1 = require(\"../../animators/states/ParticleTimeState\");\n/**\n * A particle animation node used as the base node for timekeeping inside a particle. Automatically added to a particle animation set on instatiation.\n */\nvar ParticleTimeNode = (function (_super) {\n    __extends(ParticleTimeNode, _super);\n    /**\n     * Creates a new <code>ParticleTimeNode</code>\n     *\n     * @param    [optional] usesDuration    Defines whether the node uses the <code>duration</code> data in the static properties to determine how long a particle is visible for. Defaults to false.\n     * @param    [optional] usesDelay       Defines whether the node uses the <code>delay</code> data in the static properties to determine how long a particle is hidden for. Defaults to false. Requires <code>usesDuration</code> to be true.\n     * @param    [optional] usesLooping     Defines whether the node creates a looping timeframe for each particle determined by the <code>startTime</code>, <code>duration</code> and <code>delay</code> data in the static properties function. Defaults to false. Requires <code>usesLooping</code> to be true.\n     */\n    function ParticleTimeNode(usesDuration, usesLooping, usesDelay) {\n        if (usesDuration === void 0) { usesDuration = false; }\n        if (usesLooping === void 0) { usesLooping = false; }\n        if (usesDelay === void 0) { usesDelay = false; }\n        _super.call(this, \"ParticleTime\", ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_STATIC, 4, 0);\n        this._pStateClass = ParticleTimeState_1.ParticleTimeState;\n        this._iUsesDuration = usesDuration;\n        this._iUsesLooping = usesLooping;\n        this._iUsesDelay = usesDelay;\n    }\n    /**\n     * @inheritDoc\n     */\n    ParticleTimeNode.prototype.getAGALVertexCode = function (shader, animationSet, registerCache, animationRegisterData) {\n        var timeStreamRegister = registerCache.getFreeVertexAttribute(); //timeStreamRegister.x is start，timeStreamRegister.y is during time\n        animationRegisterData.setRegisterIndex(this, ParticleTimeState_1.ParticleTimeState.TIME_STREAM_INDEX, timeStreamRegister.index);\n        var timeConst = registerCache.getFreeVertexConstant();\n        animationRegisterData.setRegisterIndex(this, ParticleTimeState_1.ParticleTimeState.TIME_CONSTANT_INDEX, timeConst.index);\n        var code = \"\";\n        code += \"sub \" + animationRegisterData.vertexTime + \",\" + timeConst + \",\" + timeStreamRegister + \".x\\n\";\n        //if time=0,set the position to zero.\n        var temp = registerCache.getFreeVertexSingleTemp();\n        code += \"sge \" + temp + \",\" + animationRegisterData.vertexTime + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n        code += \"mul \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp + \"\\n\";\n        if (this._iUsesDuration) {\n            if (this._iUsesLooping) {\n                var div = registerCache.getFreeVertexSingleTemp();\n                if (this._iUsesDelay) {\n                    code += \"div \" + div + \",\" + animationRegisterData.vertexTime + \",\" + timeStreamRegister + \".z\\n\";\n                    code += \"frc \" + div + \",\" + div + \"\\n\";\n                    code += \"mul \" + animationRegisterData.vertexTime + \",\" + div + \",\" + timeStreamRegister + \".z\\n\";\n                    code += \"slt \" + div + \",\" + animationRegisterData.vertexTime + \",\" + timeStreamRegister + \".y\\n\";\n                    code += \"mul \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + div + \"\\n\";\n                }\n                else {\n                    code += \"mul \" + div + \",\" + animationRegisterData.vertexTime + \",\" + timeStreamRegister + \".w\\n\";\n                    code += \"frc \" + div + \",\" + div + \"\\n\";\n                    code += \"mul \" + animationRegisterData.vertexTime + \",\" + div + \",\" + timeStreamRegister + \".y\\n\";\n                }\n            }\n            else {\n                var sge = registerCache.getFreeVertexSingleTemp();\n                code += \"sge \" + sge + \",\" + timeStreamRegister + \".y,\" + animationRegisterData.vertexTime + \"\\n\";\n                code += \"mul \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + sge + \"\\n\";\n            }\n        }\n        code += \"mul \" + animationRegisterData.vertexLife + \",\" + animationRegisterData.vertexTime + \",\" + timeStreamRegister + \".w\\n\";\n        return code;\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleTimeNode.prototype.getAnimationState = function (animator) {\n        return animator.getAnimationState(this);\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleTimeNode.prototype._iGeneratePropertyOfOneParticle = function (param) {\n        this._pOneData[0] = param.startTime;\n        this._pOneData[1] = param.duration;\n        this._pOneData[2] = param.delay + param.duration;\n        this._pOneData[3] = 1 / param.duration;\n    };\n    return ParticleTimeNode;\n}(ParticleNodeBase_1.ParticleNodeBase));\nexports.ParticleTimeNode = ParticleTimeNode;\n\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticleTimeState\":\"awayjs-renderergl/lib/animators/states/ParticleTimeState\"}],\"awayjs-renderergl/lib/animators/nodes/ParticleUVNode\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\nvar ParticleAnimationSet_1 = require(\"../../animators/ParticleAnimationSet\");\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\nvar ParticleUVState_1 = require(\"../../animators/states/ParticleUVState\");\nvar ShaderRegisterElement_1 = require(\"../../shaders/ShaderRegisterElement\");\n/**\n * A particle animation node used to control the UV offset and scale of a particle over time.\n */\nvar ParticleUVNode = (function (_super) {\n    __extends(ParticleUVNode, _super);\n    /**\n     * Creates a new <code>ParticleTimeNode</code>\n     *\n     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\n     * @param    [optional] cycle           Defines whether the time track is in loop mode. Defaults to false.\n     * @param    [optional] scale           Defines whether the time track is in loop mode. Defaults to false.\n     * @param    [optional] axis            Defines whether the time track is in loop mode. Defaults to false.\n     */\n    function ParticleUVNode(mode, cycle, scale, axis) {\n        if (cycle === void 0) { cycle = 1; }\n        if (scale === void 0) { scale = 1; }\n        if (axis === void 0) { axis = \"x\"; }\n        //because of the stage3d register limitation, it only support the global mode\n        _super.call(this, \"ParticleUV\", ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL, 4, ParticleAnimationSet_1.ParticleAnimationSet.POST_PRIORITY + 1);\n        this._pStateClass = ParticleUVState_1.ParticleUVState;\n        this._cycle = cycle;\n        this._scale = scale;\n        this._axis = axis;\n        this.updateUVData();\n    }\n    Object.defineProperty(ParticleUVNode.prototype, \"cycle\", {\n        /**\n         *\n         */\n        get: function () {\n            return this._cycle;\n        },\n        set: function (value) {\n            this._cycle = value;\n            this.updateUVData();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ParticleUVNode.prototype, \"scale\", {\n        /**\n         *\n         */\n        get: function () {\n            return this._scale;\n        },\n        set: function (value) {\n            this._scale = value;\n            this.updateUVData();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ParticleUVNode.prototype, \"axis\", {\n        /**\n         *\n         */\n        get: function () {\n            return this._axis;\n        },\n        set: function (value) {\n            this._axis = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @inheritDoc\n     */\n    ParticleUVNode.prototype.getAGALUVCode = function (shader, animationSet, registerCache, animationRegisterData) {\n        var code = \"\";\n        var uvConst = registerCache.getFreeVertexConstant();\n        animationRegisterData.setRegisterIndex(this, ParticleUVState_1.ParticleUVState.UV_INDEX, uvConst.index);\n        var axisIndex = this._axis == \"x\" ? 0 : (this._axis == \"y\" ? 1 : 2);\n        var target = new ShaderRegisterElement_1.ShaderRegisterElement(animationRegisterData.uvTarget.regName, animationRegisterData.uvTarget.index, axisIndex);\n        var sin = registerCache.getFreeVertexSingleTemp();\n        if (this._scale != 1)\n            code += \"mul \" + target + \",\" + target + \",\" + uvConst + \".y\\n\";\n        code += \"mul \" + sin + \",\" + animationRegisterData.vertexTime + \",\" + uvConst + \".x\\n\";\n        code += \"sin \" + sin + \",\" + sin + \"\\n\";\n        code += \"add \" + target + \",\" + target + \",\" + sin + \"\\n\";\n        return code;\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleUVNode.prototype.getAnimationState = function (animator) {\n        return animator.getAnimationState(this);\n    };\n    ParticleUVNode.prototype.updateUVData = function () {\n        this._iUvData = new Vector3D_1.Vector3D(Math.PI * 2 / this._cycle, this._scale, 0, 0);\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleUVNode.prototype._iProcessAnimationSetting = function (particleAnimationSet) {\n        particleAnimationSet.hasUVNode = true;\n    };\n    /**\n     *\n     */\n    ParticleUVNode.U_AXIS = \"x\";\n    /**\n     *\n     */\n    ParticleUVNode.V_AXIS = \"y\";\n    return ParticleUVNode;\n}(ParticleNodeBase_1.ParticleNodeBase));\nexports.ParticleUVNode = ParticleUVNode;\n\n},{\"../../animators/ParticleAnimationSet\":\"awayjs-renderergl/lib/animators/ParticleAnimationSet\",\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticleUVState\":\"awayjs-renderergl/lib/animators/states/ParticleUVState\",\"../../shaders/ShaderRegisterElement\":\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\",\"awayjs-core/lib/geom/Vector3D\":undefined}],\"awayjs-renderergl/lib/animators/nodes/ParticleVelocityNode\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\nvar ParticleNodeBase_1 = require(\"../../animators/nodes/ParticleNodeBase\");\nvar ParticleVelocityState_1 = require(\"../../animators/states/ParticleVelocityState\");\n/**\n * A particle animation node used to set the starting velocity of a particle.\n */\nvar ParticleVelocityNode = (function (_super) {\n    __extends(ParticleVelocityNode, _super);\n    /**\n     * Creates a new <code>ParticleVelocityNode</code>\n     *\n     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\n     * @param    [optional] velocity        Defines the default velocity vector of the node, used when in global mode.\n     */\n    function ParticleVelocityNode(mode, velocity) {\n        if (velocity === void 0) { velocity = null; }\n        _super.call(this, \"ParticleVelocity\", mode, 3);\n        this._pStateClass = ParticleVelocityState_1.ParticleVelocityState;\n        this._iVelocity = velocity || new Vector3D_1.Vector3D();\n    }\n    /**\n     * @inheritDoc\n     */\n    ParticleVelocityNode.prototype.getAGALVertexCode = function (shader, animationSet, registerCache, animationRegisterData) {\n        var velocityValue = (this._pMode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) ? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\n        animationRegisterData.setRegisterIndex(this, ParticleVelocityState_1.ParticleVelocityState.VELOCITY_INDEX, velocityValue.index);\n        var distance = registerCache.getFreeVertexVectorTemp();\n        var code = \"\";\n        code += \"mul \" + distance + \",\" + animationRegisterData.vertexTime + \",\" + velocityValue + \"\\n\";\n        code += \"add \" + animationRegisterData.positionTarget + \".xyz,\" + distance + \",\" + animationRegisterData.positionTarget + \".xyz\\n\";\n        if (animationSet.needVelocity)\n            code += \"add \" + animationRegisterData.velocityTarget + \".xyz,\" + velocityValue + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz\\n\";\n        return code;\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleVelocityNode.prototype.getAnimationState = function (animator) {\n        return animator.getAnimationState(this);\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleVelocityNode.prototype._iGeneratePropertyOfOneParticle = function (param) {\n        var _tempVelocity = param[ParticleVelocityNode.VELOCITY_VECTOR3D];\n        if (!_tempVelocity)\n            throw new Error(\"there is no \" + ParticleVelocityNode.VELOCITY_VECTOR3D + \" in param!\");\n        this._pOneData[0] = _tempVelocity.x;\n        this._pOneData[1] = _tempVelocity.y;\n        this._pOneData[2] = _tempVelocity.z;\n    };\n    /**\n     * Reference for velocity node properties on a single particle (when in local property mode).\n     * Expects a <code>Vector3D</code> object representing the direction of movement on the particle.\n     */\n    ParticleVelocityNode.VELOCITY_VECTOR3D = \"VelocityVector3D\";\n    return ParticleVelocityNode;\n}(ParticleNodeBase_1.ParticleNodeBase));\nexports.ParticleVelocityNode = ParticleVelocityNode;\n\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"../../animators/states/ParticleVelocityState\":\"awayjs-renderergl/lib/animators/states/ParticleVelocityState\",\"awayjs-core/lib/geom/Vector3D\":undefined}],\"awayjs-renderergl/lib/animators/nodes/SkeletonBinaryLERPNode\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AnimationNodeBase_1 = require(\"awayjs-display/lib/animators/nodes/AnimationNodeBase\");\nvar SkeletonBinaryLERPState_1 = require(\"../../animators/states/SkeletonBinaryLERPState\");\n/**\n * A skeleton animation node that uses two animation node inputs to blend a lineraly interpolated output of a skeleton pose.\n */\nvar SkeletonBinaryLERPNode = (function (_super) {\n    __extends(SkeletonBinaryLERPNode, _super);\n    /**\n     * Creates a new <code>SkeletonBinaryLERPNode</code> object.\n     */\n    function SkeletonBinaryLERPNode() {\n        _super.call(this);\n        this._pStateClass = SkeletonBinaryLERPState_1.SkeletonBinaryLERPState;\n    }\n    /**\n     * @inheritDoc\n     */\n    SkeletonBinaryLERPNode.prototype.getAnimationState = function (animator) {\n        return animator.getAnimationState(this);\n    };\n    return SkeletonBinaryLERPNode;\n}(AnimationNodeBase_1.AnimationNodeBase));\nexports.SkeletonBinaryLERPNode = SkeletonBinaryLERPNode;\n\n},{\"../../animators/states/SkeletonBinaryLERPState\":\"awayjs-renderergl/lib/animators/states/SkeletonBinaryLERPState\",\"awayjs-display/lib/animators/nodes/AnimationNodeBase\":undefined}],\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AnimationClipNodeBase_1 = require(\"../../animators/nodes/AnimationClipNodeBase\");\nvar SkeletonClipState_1 = require(\"../../animators/states/SkeletonClipState\");\n/**\n * A skeleton animation node containing time-based animation data as individual skeleton poses.\n */\nvar SkeletonClipNode = (function (_super) {\n    __extends(SkeletonClipNode, _super);\n    /**\n     * Creates a new <code>SkeletonClipNode</code> object.\n     */\n    function SkeletonClipNode() {\n        _super.call(this);\n        this._frames = new Array();\n        /**\n         * Determines whether to use SLERP equations (true) or LERP equations (false) in the calculation\n         * of the output skeleton pose. Defaults to false.\n         */\n        this.highQuality = false;\n        this._pStateClass = SkeletonClipState_1.SkeletonClipState;\n    }\n    Object.defineProperty(SkeletonClipNode.prototype, \"frames\", {\n        /**\n         * Returns a vector of skeleton poses representing the pose of each animation frame in the clip.\n         */\n        get: function () {\n            return this._frames;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Adds a skeleton pose frame to the internal timeline of the animation node.\n     *\n     * @param skeletonPose The skeleton pose object to add to the timeline of the node.\n     * @param duration The specified duration of the frame in milliseconds.\n     */\n    SkeletonClipNode.prototype.addFrame = function (skeletonPose, duration) {\n        this._frames.push(skeletonPose);\n        this._pDurations.push(duration);\n        this._pNumFrames = this._pDurations.length;\n        this._pStitchDirty = true;\n    };\n    /**\n     * @inheritDoc\n     */\n    SkeletonClipNode.prototype.getAnimationState = function (animator) {\n        return animator.getAnimationState(this);\n    };\n    /**\n     * @inheritDoc\n     */\n    SkeletonClipNode.prototype._pUpdateStitch = function () {\n        _super.prototype._pUpdateStitch.call(this);\n        var i = this._pNumFrames - 1;\n        var p1, p2, delta;\n        while (i--) {\n            this._pTotalDuration += this._pDurations[i];\n            p1 = this._frames[i].jointPoses[0].translation;\n            p2 = this._frames[i + 1].jointPoses[0].translation;\n            delta = p2.subtract(p1);\n            this._pTotalDelta.x += delta.x;\n            this._pTotalDelta.y += delta.y;\n            this._pTotalDelta.z += delta.z;\n        }\n        if (this._pStitchFinalFrame || !this._pLooping) {\n            this._pTotalDuration += this._pDurations[this._pNumFrames - 1];\n            p1 = this._frames[0].jointPoses[0].translation;\n            p2 = this._frames[1].jointPoses[0].translation;\n            delta = p2.subtract(p1);\n            this._pTotalDelta.x += delta.x;\n            this._pTotalDelta.y += delta.y;\n            this._pTotalDelta.z += delta.z;\n        }\n    };\n    return SkeletonClipNode;\n}(AnimationClipNodeBase_1.AnimationClipNodeBase));\nexports.SkeletonClipNode = SkeletonClipNode;\n\n},{\"../../animators/nodes/AnimationClipNodeBase\":\"awayjs-renderergl/lib/animators/nodes/AnimationClipNodeBase\",\"../../animators/states/SkeletonClipState\":\"awayjs-renderergl/lib/animators/states/SkeletonClipState\"}],\"awayjs-renderergl/lib/animators/nodes/SkeletonDifferenceNode\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AnimationNodeBase_1 = require(\"awayjs-display/lib/animators/nodes/AnimationNodeBase\");\nvar SkeletonDifferenceState_1 = require(\"../../animators/states/SkeletonDifferenceState\");\n/**\n * A skeleton animation node that uses a difference input pose with a base input pose to blend a linearly interpolated output of a skeleton pose.\n */\nvar SkeletonDifferenceNode = (function (_super) {\n    __extends(SkeletonDifferenceNode, _super);\n    /**\n     * Creates a new <code>SkeletonAdditiveNode</code> object.\n     */\n    function SkeletonDifferenceNode() {\n        _super.call(this);\n        this._pStateClass = SkeletonDifferenceState_1.SkeletonDifferenceState;\n    }\n    /**\n     * @inheritDoc\n     */\n    SkeletonDifferenceNode.prototype.getAnimationState = function (animator) {\n        return animator.getAnimationState(this);\n    };\n    return SkeletonDifferenceNode;\n}(AnimationNodeBase_1.AnimationNodeBase));\nexports.SkeletonDifferenceNode = SkeletonDifferenceNode;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = SkeletonDifferenceNode;\n\n},{\"../../animators/states/SkeletonDifferenceState\":\"awayjs-renderergl/lib/animators/states/SkeletonDifferenceState\",\"awayjs-display/lib/animators/nodes/AnimationNodeBase\":undefined}],\"awayjs-renderergl/lib/animators/nodes/SkeletonDirectionalNode\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AnimationNodeBase_1 = require(\"awayjs-display/lib/animators/nodes/AnimationNodeBase\");\nvar SkeletonDirectionalState_1 = require(\"../../animators/states/SkeletonDirectionalState\");\n/**\n * A skeleton animation node that uses four directional input poses with an input direction to blend a linearly interpolated output of a skeleton pose.\n */\nvar SkeletonDirectionalNode = (function (_super) {\n    __extends(SkeletonDirectionalNode, _super);\n    function SkeletonDirectionalNode() {\n        _super.call(this);\n        this._pStateClass = SkeletonDirectionalState_1.SkeletonDirectionalState;\n    }\n    /**\n     * @inheritDoc\n     */\n    SkeletonDirectionalNode.prototype.getAnimationState = function (animator) {\n        return animator.getAnimationState(this);\n    };\n    return SkeletonDirectionalNode;\n}(AnimationNodeBase_1.AnimationNodeBase));\nexports.SkeletonDirectionalNode = SkeletonDirectionalNode;\n\n},{\"../../animators/states/SkeletonDirectionalState\":\"awayjs-renderergl/lib/animators/states/SkeletonDirectionalState\",\"awayjs-display/lib/animators/nodes/AnimationNodeBase\":undefined}],\"awayjs-renderergl/lib/animators/nodes/SkeletonNaryLERPNode\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AnimationNodeBase_1 = require(\"awayjs-display/lib/animators/nodes/AnimationNodeBase\");\nvar SkeletonNaryLERPState_1 = require(\"../../animators/states/SkeletonNaryLERPState\");\n/**\n * A skeleton animation node that uses an n-dimensional array of animation node inputs to blend a lineraly interpolated output of a skeleton pose.\n */\nvar SkeletonNaryLERPNode = (function (_super) {\n    __extends(SkeletonNaryLERPNode, _super);\n    /**\n     * Creates a new <code>SkeletonNaryLERPNode</code> object.\n     */\n    function SkeletonNaryLERPNode() {\n        _super.call(this);\n        this._iInputs = new Array();\n        this._pStateClass = SkeletonNaryLERPState_1.SkeletonNaryLERPState;\n    }\n    Object.defineProperty(SkeletonNaryLERPNode.prototype, \"numInputs\", {\n        get: function () {\n            return this._numInputs;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns an integer representing the input index of the given skeleton animation node.\n     *\n     * @param input The skeleton animation node for with the input index is requested.\n     */\n    SkeletonNaryLERPNode.prototype.getInputIndex = function (input) {\n        return this._iInputs.indexOf(input);\n    };\n    /**\n     * Returns the skeleton animation node object that resides at the given input index.\n     *\n     * @param index The input index for which the skeleton animation node is requested.\n     */\n    SkeletonNaryLERPNode.prototype.getInputAt = function (index) {\n        return this._iInputs[index];\n    };\n    /**\n     * Adds a new skeleton animation node input to the animation node.\n     */\n    SkeletonNaryLERPNode.prototype.addInput = function (input) {\n        this._iInputs[this._numInputs++] = input;\n    };\n    /**\n     * @inheritDoc\n     */\n    SkeletonNaryLERPNode.prototype.getAnimationState = function (animator) {\n        return animator.getAnimationState(this);\n    };\n    return SkeletonNaryLERPNode;\n}(AnimationNodeBase_1.AnimationNodeBase));\nexports.SkeletonNaryLERPNode = SkeletonNaryLERPNode;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = SkeletonNaryLERPNode;\n\n},{\"../../animators/states/SkeletonNaryLERPState\":\"awayjs-renderergl/lib/animators/states/SkeletonNaryLERPState\",\"awayjs-display/lib/animators/nodes/AnimationNodeBase\":undefined}],\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\nvar AnimationClipNodeBase_1 = require(\"../../animators/nodes/AnimationClipNodeBase\");\nvar VertexClipState_1 = require(\"../../animators/states/VertexClipState\");\n/**\n * A vertex animation node containing time-based animation data as individual geometry obejcts.\n */\nvar VertexClipNode = (function (_super) {\n    __extends(VertexClipNode, _super);\n    /**\n     * Creates a new <code>VertexClipNode</code> object.\n     */\n    function VertexClipNode() {\n        _super.call(this);\n        this._frames = new Array();\n        this._translations = new Array();\n        this._pStateClass = VertexClipState_1.VertexClipState;\n    }\n    Object.defineProperty(VertexClipNode.prototype, \"frames\", {\n        /**\n         * Returns a vector of geometry frames representing the vertex values of each animation frame in the clip.\n         */\n        get: function () {\n            return this._frames;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Adds a geometry object to the internal timeline of the animation node.\n     *\n     * @param geometry The geometry object to add to the timeline of the node.\n     * @param duration The specified duration of the frame in milliseconds.\n     * @param translation The absolute translation of the frame, used in root delta calculations for sprite movement.\n     */\n    VertexClipNode.prototype.addFrame = function (geometry, duration, translation) {\n        if (translation === void 0) { translation = null; }\n        this._frames.push(geometry);\n        this._pDurations.push(duration);\n        this._translations.push(translation || new Vector3D_1.Vector3D());\n        this._pNumFrames = this._pDurations.length;\n        this._pStitchDirty = true;\n    };\n    /**\n     * @inheritDoc\n     */\n    VertexClipNode.prototype._pUpdateStitch = function () {\n        _super.prototype._pUpdateStitch.call(this);\n        var i = this._pNumFrames - 1;\n        var p1, p2, delta;\n        while (i--) {\n            this._pTotalDuration += this._pDurations[i];\n            p1 = this._translations[i];\n            p2 = this._translations[i + 1];\n            delta = p2.subtract(p1);\n            this._pTotalDelta.x += delta.x;\n            this._pTotalDelta.y += delta.y;\n            this._pTotalDelta.z += delta.z;\n        }\n        if (this._pNumFrames > 1 && (this._pStitchFinalFrame || !this._pLooping)) {\n            this._pTotalDuration += this._pDurations[this._pNumFrames - 1];\n            p1 = this._translations[0];\n            p2 = this._translations[1];\n            delta = p2.subtract(p1);\n            this._pTotalDelta.x += delta.x;\n            this._pTotalDelta.y += delta.y;\n            this._pTotalDelta.z += delta.z;\n        }\n    };\n    return VertexClipNode;\n}(AnimationClipNodeBase_1.AnimationClipNodeBase));\nexports.VertexClipNode = VertexClipNode;\n\n},{\"../../animators/nodes/AnimationClipNodeBase\":\"awayjs-renderergl/lib/animators/nodes/AnimationClipNodeBase\",\"../../animators/states/VertexClipState\":\"awayjs-renderergl/lib/animators/states/VertexClipState\",\"awayjs-core/lib/geom/Vector3D\":undefined}],\"awayjs-renderergl/lib/animators/states/AnimationClipState\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AnimationStateBase_1 = require(\"../../animators/states/AnimationStateBase\");\nvar AnimationStateEvent_1 = require(\"../../events/AnimationStateEvent\");\n/**\n *\n */\nvar AnimationClipState = (function (_super) {\n    __extends(AnimationClipState, _super);\n    function AnimationClipState(animator, animationClipNode) {\n        _super.call(this, animator, animationClipNode);\n        this._pFramesDirty = true;\n        this._animationClipNode = animationClipNode;\n    }\n    Object.defineProperty(AnimationClipState.prototype, \"blendWeight\", {\n        /**\n         * Returns a fractional value between 0 and 1 representing the blending ratio of the current playhead position\n         * between the current frame (0) and next frame (1) of the animation.\n         *\n         * @see #currentFrame\n         * @see #nextFrame\n         */\n        get: function () {\n            if (this._pFramesDirty)\n                this._pUpdateFrames();\n            return this._pBlendWeight;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimationClipState.prototype, \"currentFrame\", {\n        /**\n         * Returns the current frame of animation in the clip based on the internal playhead position.\n         */\n        get: function () {\n            if (this._pFramesDirty)\n                this._pUpdateFrames();\n            return this._pCurrentFrame;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimationClipState.prototype, \"nextFrame\", {\n        /**\n         * Returns the next frame of animation in the clip based on the internal playhead position.\n         */\n        get: function () {\n            if (this._pFramesDirty)\n                this._pUpdateFrames();\n            return this._pNextFrame;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @inheritDoc\n     */\n    AnimationClipState.prototype.update = function (time) {\n        if (!this._animationClipNode.looping) {\n            if (time > this._pStartTime + this._animationClipNode.totalDuration)\n                time = this._pStartTime + this._animationClipNode.totalDuration;\n            else if (time < this._pStartTime)\n                time = this._pStartTime;\n        }\n        if (this._pTime == time - this._pStartTime)\n            return;\n        this._pUpdateTime(time);\n    };\n    /**\n     * @inheritDoc\n     */\n    AnimationClipState.prototype.phase = function (value) {\n        var time = value * this._animationClipNode.totalDuration + this._pStartTime;\n        if (this._pTime == time - this._pStartTime)\n            return;\n        this._pUpdateTime(time);\n    };\n    /**\n     * @inheritDoc\n     */\n    AnimationClipState.prototype._pUpdateTime = function (time) {\n        this._pFramesDirty = true;\n        this._pTimeDir = (time - this._pStartTime > this._pTime) ? 1 : -1;\n        _super.prototype._pUpdateTime.call(this, time);\n    };\n    /**\n     * Updates the nodes internal playhead to determine the current and next animation frame, and the blendWeight between the two.\n     *\n     * @see #currentFrame\n     * @see #nextFrame\n     * @see #blendWeight\n     */\n    AnimationClipState.prototype._pUpdateFrames = function () {\n        this._pFramesDirty = false;\n        var looping = this._animationClipNode.looping;\n        var totalDuration = this._animationClipNode.totalDuration;\n        var lastFrame = this._animationClipNode.lastFrame;\n        var time = this._pTime;\n        //trace(\"time\", time, totalDuration)\n        if (looping && (time >= totalDuration || time < 0)) {\n            time %= totalDuration;\n            if (time < 0)\n                time += totalDuration;\n        }\n        if (!looping && time >= totalDuration) {\n            this.notifyPlaybackComplete();\n            this._pCurrentFrame = lastFrame;\n            this._pNextFrame = lastFrame;\n            this._pBlendWeight = 0;\n        }\n        else if (!looping && time <= 0) {\n            this._pCurrentFrame = 0;\n            this._pNextFrame = 0;\n            this._pBlendWeight = 0;\n        }\n        else if (this._animationClipNode.fixedFrameRate) {\n            var t = time / totalDuration * lastFrame;\n            this._pCurrentFrame = Math.floor(t);\n            this._pBlendWeight = t - this._pCurrentFrame;\n            this._pNextFrame = this._pCurrentFrame + 1;\n        }\n        else {\n            this._pCurrentFrame = 0;\n            this._pNextFrame = 0;\n            var dur = 0, frameTime;\n            var durations = this._animationClipNode.durations;\n            do {\n                frameTime = dur;\n                dur += durations[this._pNextFrame];\n                this._pCurrentFrame = this._pNextFrame++;\n            } while (time > dur);\n            if (this._pCurrentFrame == lastFrame) {\n                this._pCurrentFrame = 0;\n                this._pNextFrame = 1;\n            }\n            this._pBlendWeight = (time - frameTime) / durations[this._pCurrentFrame];\n        }\n    };\n    AnimationClipState.prototype.notifyPlaybackComplete = function () {\n        if (this._animationStatePlaybackComplete == null)\n            this._animationStatePlaybackComplete = new AnimationStateEvent_1.AnimationStateEvent(AnimationStateEvent_1.AnimationStateEvent.PLAYBACK_COMPLETE, this._pAnimator, this, this._animationClipNode);\n        this._animationClipNode.dispatchEvent(this._animationStatePlaybackComplete);\n    };\n    return AnimationClipState;\n}(AnimationStateBase_1.AnimationStateBase));\nexports.AnimationClipState = AnimationClipState;\n\n},{\"../../animators/states/AnimationStateBase\":\"awayjs-renderergl/lib/animators/states/AnimationStateBase\",\"../../events/AnimationStateEvent\":\"awayjs-renderergl/lib/events/AnimationStateEvent\"}],\"awayjs-renderergl/lib/animators/states/AnimationStateBase\":[function(require,module,exports){\n\"use strict\";\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\n/**\n *\n */\nvar AnimationStateBase = (function () {\n    function AnimationStateBase(animator, animationNode) {\n        this._pRootDelta = new Vector3D_1.Vector3D();\n        this._pPositionDeltaDirty = true;\n        this._pStartTime = 0;\n        this._pAnimator = animator;\n        this._pAnimationNode = animationNode;\n    }\n    Object.defineProperty(AnimationStateBase.prototype, \"positionDelta\", {\n        /**\n         * Returns a 3d vector representing the translation delta of the animating entity for the current timestep of animation\n         */\n        get: function () {\n            if (this._pPositionDeltaDirty) {\n                this._pUpdatePositionDelta();\n            }\n            return this._pRootDelta;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Resets the start time of the node to a  new value.\n     *\n     * @param startTime The absolute start time (in milliseconds) of the node's starting time.\n     */\n    AnimationStateBase.prototype.offset = function (startTime) {\n        this._pStartTime = startTime;\n        this._pPositionDeltaDirty = true;\n    };\n    /**\n     * Updates the configuration of the node to its current state.\n     *\n     * @param time The absolute time (in milliseconds) of the animator's play head position.\n     *\n     * @see AnimatorBase#update()\n     */\n    AnimationStateBase.prototype.update = function (time) {\n        if (this._pTime == time - this._pStartTime) {\n            return;\n        }\n        this._pUpdateTime(time);\n    };\n    /**\n     * Sets the animation phase of the node.\n     *\n     * @param value The phase value to use. 0 represents the beginning of an animation clip, 1 represents the end.\n     */\n    AnimationStateBase.prototype.phase = function (value) {\n    };\n    /**\n     * Updates the node's internal playhead position.\n     *\n     * @param time The local time (in milliseconds) of the node's playhead position.\n     */\n    AnimationStateBase.prototype._pUpdateTime = function (time) {\n        this._pTime = time - this._pStartTime;\n        this._pPositionDeltaDirty = true;\n    };\n    /**\n     * Updates the node's root delta position\n     */\n    AnimationStateBase.prototype._pUpdatePositionDelta = function () {\n    };\n    return AnimationStateBase;\n}());\nexports.AnimationStateBase = AnimationStateBase;\n\n},{\"awayjs-core/lib/geom/Vector3D\":undefined}],\"awayjs-renderergl/lib/animators/states/IAnimationState\":[function(require,module,exports){\n\"use strict\";\n\n},{}],\"awayjs-renderergl/lib/animators/states/ISkeletonAnimationState\":[function(require,module,exports){\n\"use strict\";\n\n},{}],\"awayjs-renderergl/lib/animators/states/IVertexAnimationState\":[function(require,module,exports){\n\"use strict\";\n\n},{}],\"awayjs-renderergl/lib/animators/states/ParticleAccelerationState\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\nvar ContextGLVertexBufferFormat_1 = require(\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\");\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\n/**\n * ...\n */\nvar ParticleAccelerationState = (function (_super) {\n    __extends(ParticleAccelerationState, _super);\n    function ParticleAccelerationState(animator, particleAccelerationNode) {\n        _super.call(this, animator, particleAccelerationNode);\n        this._particleAccelerationNode = particleAccelerationNode;\n        this._acceleration = this._particleAccelerationNode._acceleration;\n        this.updateAccelerationData();\n    }\n    Object.defineProperty(ParticleAccelerationState.prototype, \"acceleration\", {\n        /**\n         * Defines the acceleration vector of the state, used when in global mode.\n         */\n        get: function () {\n            return this._acceleration;\n        },\n        set: function (value) {\n            this._acceleration.x = value.x;\n            this._acceleration.y = value.y;\n            this._acceleration.z = value.z;\n            this.updateAccelerationData();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @inheritDoc\n     */\n    ParticleAccelerationState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\n        var index = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleAccelerationState.ACCELERATION_INDEX);\n        if (this._particleAccelerationNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_STATIC)\n            animationElements.activateVertexBuffer(index, this._particleAccelerationNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_3);\n        else\n            shader.setVertexConst(index, this._halfAcceleration.x, this._halfAcceleration.y, this._halfAcceleration.z);\n    };\n    ParticleAccelerationState.prototype.updateAccelerationData = function () {\n        if (this._particleAccelerationNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL)\n            this._halfAcceleration = new Vector3D_1.Vector3D(this._acceleration.x / 2, this._acceleration.y / 2, this._acceleration.z / 2);\n    };\n    /** @private */\n    ParticleAccelerationState.ACCELERATION_INDEX = 0;\n    return ParticleAccelerationState;\n}(ParticleStateBase_1.ParticleStateBase));\nexports.ParticleAccelerationState = ParticleAccelerationState;\n\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\",\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\":undefined}],\"awayjs-renderergl/lib/animators/states/ParticleBezierCurveState\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ContextGLVertexBufferFormat_1 = require(\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\");\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\n/**\n * ...\n */\nvar ParticleBezierCurveState = (function (_super) {\n    __extends(ParticleBezierCurveState, _super);\n    function ParticleBezierCurveState(animator, particleBezierCurveNode) {\n        _super.call(this, animator, particleBezierCurveNode);\n        this._particleBezierCurveNode = particleBezierCurveNode;\n        this._controlPoint = this._particleBezierCurveNode._iControlPoint;\n        this._endPoint = this._particleBezierCurveNode._iEndPoint;\n    }\n    Object.defineProperty(ParticleBezierCurveState.prototype, \"controlPoint\", {\n        /**\n         * Defines the default control point of the node, used when in global mode.\n         */\n        get: function () {\n            return this._controlPoint;\n        },\n        set: function (value) {\n            this._controlPoint = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ParticleBezierCurveState.prototype, \"endPoint\", {\n        /**\n         * Defines the default end point of the node, used when in global mode.\n         */\n        get: function () {\n            return this._endPoint;\n        },\n        set: function (value) {\n            this._endPoint = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ParticleBezierCurveState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\n        var controlIndex = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleBezierCurveState.BEZIER_CONTROL_INDEX);\n        var endIndex = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleBezierCurveState.BEZIER_END_INDEX);\n        if (this._particleBezierCurveNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_STATIC) {\n            animationElements.activateVertexBuffer(controlIndex, this._particleBezierCurveNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_3);\n            animationElements.activateVertexBuffer(endIndex, this._particleBezierCurveNode._iDataOffset + 3, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_3);\n        }\n        else {\n            shader.setVertexConst(controlIndex, this._controlPoint.x, this._controlPoint.y, this._controlPoint.z);\n            shader.setVertexConst(endIndex, this._endPoint.x, this._endPoint.y, this._endPoint.z);\n        }\n    };\n    /** @private */\n    ParticleBezierCurveState.BEZIER_CONTROL_INDEX = 0;\n    /** @private */\n    ParticleBezierCurveState.BEZIER_END_INDEX = 1;\n    return ParticleBezierCurveState;\n}(ParticleStateBase_1.ParticleStateBase));\nexports.ParticleBezierCurveState = ParticleBezierCurveState;\n\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\",\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\":undefined}],\"awayjs-renderergl/lib/animators/states/ParticleBillboardState\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar MathConsts_1 = require(\"awayjs-core/lib/geom/MathConsts\");\nvar Matrix3D_1 = require(\"awayjs-core/lib/geom/Matrix3D\");\nvar Orientation3D_1 = require(\"awayjs-core/lib/geom/Orientation3D\");\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\n/**\n * ...\n */\nvar ParticleBillboardState = (function (_super) {\n    __extends(ParticleBillboardState, _super);\n    /**\n     *\n     */\n    function ParticleBillboardState(animator, particleNode) {\n        _super.call(this, animator, particleNode);\n        this._matrix = new Matrix3D_1.Matrix3D;\n        this._billboardAxis = particleNode._iBillboardAxis;\n    }\n    ParticleBillboardState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\n        var comps;\n        if (this._billboardAxis) {\n            var pos = renderable.sourceEntity.sceneTransform.position;\n            var look = camera.sceneTransform.position.subtract(pos);\n            var right = look.crossProduct(this._billboardAxis);\n            right.normalize();\n            look = this.billboardAxis.crossProduct(right);\n            look.normalize();\n            //create a quick inverse projection matrix\n            this._matrix.copyFrom(renderable.sourceEntity.sceneTransform);\n            comps = this._matrix.decompose(Orientation3D_1.Orientation3D.AXIS_ANGLE);\n            this._matrix.copyColumnFrom(0, right);\n            this._matrix.copyColumnFrom(1, this.billboardAxis);\n            this._matrix.copyColumnFrom(2, look);\n            this._matrix.copyColumnFrom(3, pos);\n            this._matrix.appendRotation(-comps[1].w * MathConsts_1.MathConsts.RADIANS_TO_DEGREES, comps[1]);\n        }\n        else {\n            //create a quick inverse projection matrix\n            this._matrix.copyFrom(renderable.sourceEntity.sceneTransform);\n            this._matrix.append(camera.inverseSceneTransform);\n            //decompose using axis angle rotations\n            comps = this._matrix.decompose(Orientation3D_1.Orientation3D.AXIS_ANGLE);\n            //recreate the matrix with just the rotation data\n            this._matrix.identity();\n            this._matrix.appendRotation(-comps[1].w * MathConsts_1.MathConsts.RADIANS_TO_DEGREES, comps[1]);\n        }\n        //set a new matrix transform constant\n        shader.setVertexConstFromMatrix(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleBillboardState.MATRIX_INDEX), this._matrix);\n    };\n    Object.defineProperty(ParticleBillboardState.prototype, \"billboardAxis\", {\n        /**\n         * Defines the billboard axis.\n         */\n        get: function () {\n            return this.billboardAxis;\n        },\n        set: function (value) {\n            this.billboardAxis = value ? value.clone() : null;\n            if (this.billboardAxis)\n                this.billboardAxis.normalize();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @private */\n    ParticleBillboardState.MATRIX_INDEX = 0;\n    return ParticleBillboardState;\n}(ParticleStateBase_1.ParticleStateBase));\nexports.ParticleBillboardState = ParticleBillboardState;\n\n},{\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\",\"awayjs-core/lib/geom/MathConsts\":undefined,\"awayjs-core/lib/geom/Matrix3D\":undefined,\"awayjs-core/lib/geom/Orientation3D\":undefined}],\"awayjs-renderergl/lib/animators/states/ParticleColorState\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\nvar ContextGLVertexBufferFormat_1 = require(\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\");\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\n/**\n * ...\n * @author ...\n */\nvar ParticleColorState = (function (_super) {\n    __extends(ParticleColorState, _super);\n    function ParticleColorState(animator, particleColorNode) {\n        _super.call(this, animator, particleColorNode);\n        this._particleColorNode = particleColorNode;\n        this._usesMultiplier = this._particleColorNode._iUsesMultiplier;\n        this._usesOffset = this._particleColorNode._iUsesOffset;\n        this._usesCycle = this._particleColorNode._iUsesCycle;\n        this._usesPhase = this._particleColorNode._iUsesPhase;\n        this._startColor = this._particleColorNode._iStartColor;\n        this._endColor = this._particleColorNode._iEndColor;\n        this._cycleDuration = this._particleColorNode._iCycleDuration;\n        this._cyclePhase = this._particleColorNode._iCyclePhase;\n        this.updateColorData();\n    }\n    Object.defineProperty(ParticleColorState.prototype, \"startColor\", {\n        /**\n         * Defines the start color transform of the state, when in global mode.\n         */\n        get: function () {\n            return this._startColor;\n        },\n        set: function (value) {\n            this._startColor = value;\n            this.updateColorData();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ParticleColorState.prototype, \"endColor\", {\n        /**\n         * Defines the end color transform of the state, when in global mode.\n         */\n        get: function () {\n            return this._endColor;\n        },\n        set: function (value) {\n            this._endColor = value;\n            this.updateColorData();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ParticleColorState.prototype, \"cycleDuration\", {\n        /**\n         * Defines the duration of the animation in seconds, used as a period independent of particle duration when in global mode. Defaults to 1.\n         */\n        get: function () {\n            return this._cycleDuration;\n        },\n        set: function (value) {\n            this._cycleDuration = value;\n            this.updateColorData();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ParticleColorState.prototype, \"cyclePhase\", {\n        /**\n         * Defines the phase of the cycle in degrees, used as the starting offset of the cycle when in global mode. Defaults to 0.\n         */\n        get: function () {\n            return this._cyclePhase;\n        },\n        set: function (value) {\n            this._cyclePhase = value;\n            this.updateColorData();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ParticleColorState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\n        if (shader.usesFragmentAnimation) {\n            var dataOffset = this._particleColorNode._iDataOffset;\n            var index;\n            if (this._usesCycle)\n                shader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.CYCLE_INDEX), this._cycleData.x, this._cycleData.y, this._cycleData.z, this._cycleData.w);\n            if (this._usesMultiplier) {\n                if (this._particleColorNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_STATIC) {\n                    animationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.START_MULTIPLIER_INDEX), dataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_4);\n                    dataOffset += 4;\n                    animationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.DELTA_MULTIPLIER_INDEX), dataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_4);\n                    dataOffset += 4;\n                }\n                else {\n                    shader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.START_MULTIPLIER_INDEX), this._startMultiplierData.x, this._startMultiplierData.y, this._startMultiplierData.z, this._startMultiplierData.w);\n                    shader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.DELTA_MULTIPLIER_INDEX), this._deltaMultiplierData.x, this._deltaMultiplierData.y, this._deltaMultiplierData.z, this._deltaMultiplierData.w);\n                }\n            }\n            if (this._usesOffset) {\n                if (this._particleColorNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_STATIC) {\n                    animationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.START_OFFSET_INDEX), dataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_4);\n                    dataOffset += 4;\n                    animationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.DELTA_OFFSET_INDEX), dataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_4);\n                }\n                else {\n                    shader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.START_OFFSET_INDEX), this._startOffsetData.x, this._startOffsetData.y, this._startOffsetData.z, this._startOffsetData.w);\n                    shader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.DELTA_OFFSET_INDEX), this._deltaOffsetData.x, this._deltaOffsetData.y, this._deltaOffsetData.z, this._deltaOffsetData.w);\n                }\n            }\n        }\n    };\n    ParticleColorState.prototype.updateColorData = function () {\n        if (this._usesCycle) {\n            if (this._cycleDuration <= 0)\n                throw (new Error(\"the cycle duration must be greater than zero\"));\n            this._cycleData = new Vector3D_1.Vector3D(Math.PI * 2 / this._cycleDuration, this._cyclePhase * Math.PI / 180, 0, 0);\n        }\n        if (this._particleColorNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) {\n            if (this._usesCycle) {\n                if (this._usesMultiplier) {\n                    this._startMultiplierData = new Vector3D_1.Vector3D((this._startColor.redMultiplier + this._endColor.redMultiplier) / 2, (this._startColor.greenMultiplier + this._endColor.greenMultiplier) / 2, (this._startColor.blueMultiplier + this._endColor.blueMultiplier) / 2, (this._startColor.alphaMultiplier + this._endColor.alphaMultiplier) / 2);\n                    this._deltaMultiplierData = new Vector3D_1.Vector3D((this._endColor.redMultiplier - this._startColor.redMultiplier) / 2, (this._endColor.greenMultiplier - this._startColor.greenMultiplier) / 2, (this._endColor.blueMultiplier - this._startColor.blueMultiplier) / 2, (this._endColor.alphaMultiplier - this._startColor.alphaMultiplier) / 2);\n                }\n                if (this._usesOffset) {\n                    this._startOffsetData = new Vector3D_1.Vector3D((this._startColor.redOffset + this._endColor.redOffset) / (255 * 2), (this._startColor.greenOffset + this._endColor.greenOffset) / (255 * 2), (this._startColor.blueOffset + this._endColor.blueOffset) / (255 * 2), (this._startColor.alphaOffset + this._endColor.alphaOffset) / (255 * 2));\n                    this._deltaOffsetData = new Vector3D_1.Vector3D((this._endColor.redOffset - this._startColor.redOffset) / (255 * 2), (this._endColor.greenOffset - this._startColor.greenOffset) / (255 * 2), (this._endColor.blueOffset - this._startColor.blueOffset) / (255 * 2), (this._endColor.alphaOffset - this._startColor.alphaOffset) / (255 * 2));\n                }\n            }\n            else {\n                if (this._usesMultiplier) {\n                    this._startMultiplierData = new Vector3D_1.Vector3D(this._startColor.redMultiplier, this._startColor.greenMultiplier, this._startColor.blueMultiplier, this._startColor.alphaMultiplier);\n                    this._deltaMultiplierData = new Vector3D_1.Vector3D((this._endColor.redMultiplier - this._startColor.redMultiplier), (this._endColor.greenMultiplier - this._startColor.greenMultiplier), (this._endColor.blueMultiplier - this._startColor.blueMultiplier), (this._endColor.alphaMultiplier - this._startColor.alphaMultiplier));\n                }\n                if (this._usesOffset) {\n                    this._startOffsetData = new Vector3D_1.Vector3D(this._startColor.redOffset / 255, this._startColor.greenOffset / 255, this._startColor.blueOffset / 255, this._startColor.alphaOffset / 255);\n                    this._deltaOffsetData = new Vector3D_1.Vector3D((this._endColor.redOffset - this._startColor.redOffset) / 255, (this._endColor.greenOffset - this._startColor.greenOffset) / 255, (this._endColor.blueOffset - this._startColor.blueOffset) / 255, (this._endColor.alphaOffset - this._startColor.alphaOffset) / 255);\n                }\n            }\n        }\n    };\n    /** @private */\n    ParticleColorState.START_MULTIPLIER_INDEX = 0;\n    /** @private */\n    ParticleColorState.DELTA_MULTIPLIER_INDEX = 1;\n    /** @private */\n    ParticleColorState.START_OFFSET_INDEX = 2;\n    /** @private */\n    ParticleColorState.DELTA_OFFSET_INDEX = 3;\n    /** @private */\n    ParticleColorState.CYCLE_INDEX = 4;\n    return ParticleColorState;\n}(ParticleStateBase_1.ParticleStateBase));\nexports.ParticleColorState = ParticleColorState;\n\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\",\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\":undefined}],\"awayjs-renderergl/lib/animators/states/ParticleFollowState\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar MathConsts_1 = require(\"awayjs-core/lib/geom/MathConsts\");\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\nvar ContextGLVertexBufferFormat_1 = require(\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\");\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\n/**\n * ...\n */\nvar ParticleFollowState = (function (_super) {\n    __extends(ParticleFollowState, _super);\n    function ParticleFollowState(animator, particleFollowNode) {\n        _super.call(this, animator, particleFollowNode, true);\n        this._targetPos = new Vector3D_1.Vector3D();\n        this._targetEuler = new Vector3D_1.Vector3D();\n        //temporary vector3D for calculation\n        this._temp = new Vector3D_1.Vector3D();\n        this._particleFollowNode = particleFollowNode;\n        this._smooth = particleFollowNode._iSmooth;\n    }\n    Object.defineProperty(ParticleFollowState.prototype, \"followTarget\", {\n        get: function () {\n            return this._followTarget;\n        },\n        set: function (value) {\n            this._followTarget = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ParticleFollowState.prototype, \"smooth\", {\n        get: function () {\n            return this._smooth;\n        },\n        set: function (value) {\n            this._smooth = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @inheritDoc\n     */\n    ParticleFollowState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\n        if (this._followTarget) {\n            if (this._particleFollowNode._iUsesPosition) {\n                this._targetPos.x = this._followTarget.transform.position.x / renderable.sourceEntity.scaleX;\n                this._targetPos.y = this._followTarget.transform.position.y / renderable.sourceEntity.scaleY;\n                this._targetPos.z = this._followTarget.transform.position.z / renderable.sourceEntity.scaleZ;\n            }\n            if (this._particleFollowNode._iUsesRotation) {\n                this._targetEuler.x = this._followTarget.rotationX;\n                this._targetEuler.y = this._followTarget.rotationY;\n                this._targetEuler.z = this._followTarget.rotationZ;\n                this._targetEuler.scaleBy(MathConsts_1.MathConsts.DEGREES_TO_RADIANS);\n            }\n        }\n        //initialization\n        if (!this._prePos)\n            this._prePos = this._targetPos.clone();\n        if (!this._preEuler)\n            this._preEuler = this._targetEuler.clone();\n        var currentTime = this._pTime / 1000;\n        var previousTime = animationElements.previousTime;\n        var deltaTime = currentTime - previousTime;\n        var needProcess = previousTime != currentTime;\n        if (this._particleFollowNode._iUsesPosition && this._particleFollowNode._iUsesRotation) {\n            if (needProcess)\n                this.processPositionAndRotation(currentTime, deltaTime, animationElements);\n            animationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleFollowState.FOLLOW_POSITION_INDEX), this._particleFollowNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_3);\n            animationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleFollowState.FOLLOW_ROTATION_INDEX), this._particleFollowNode._iDataOffset + 3, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_3);\n        }\n        else if (this._particleFollowNode._iUsesPosition) {\n            if (needProcess)\n                this.processPosition(currentTime, deltaTime, animationElements);\n            animationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleFollowState.FOLLOW_POSITION_INDEX), this._particleFollowNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_3);\n        }\n        else if (this._particleFollowNode._iUsesRotation) {\n            if (needProcess)\n                this.precessRotation(currentTime, deltaTime, animationElements);\n            animationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleFollowState.FOLLOW_ROTATION_INDEX), this._particleFollowNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_3);\n        }\n        this._prePos.copyFrom(this._targetPos);\n        this._targetEuler.copyFrom(this._targetEuler);\n        animationElements.previousTime = currentTime;\n    };\n    ParticleFollowState.prototype.processPosition = function (currentTime, deltaTime, animationElements) {\n        var data = animationElements.animationParticles;\n        var vertexData = animationElements.vertexData;\n        var changed = false;\n        var len = data.length;\n        var interpolatedPos;\n        var posVelocity;\n        if (this._smooth) {\n            posVelocity = this._prePos.subtract(this._targetPos);\n            posVelocity.scaleBy(1 / deltaTime);\n        }\n        else\n            interpolatedPos = this._targetPos;\n        for (var i = 0; i < len; i++) {\n            var k = (currentTime - data[i].startTime) / data[i].totalTime;\n            var t = (k - Math.floor(k)) * data[i].totalTime;\n            if (t - deltaTime <= 0) {\n                var inc = data[i].startVertexIndex * animationElements.totalLenOfOneVertex + this._particleFollowNode._iDataOffset;\n                if (this._smooth) {\n                    this._temp.copyFrom(posVelocity);\n                    this._temp.scaleBy(t);\n                    interpolatedPos = this._targetPos.add(this._temp);\n                }\n                if (vertexData[inc] != interpolatedPos.x || vertexData[inc + 1] != interpolatedPos.y || vertexData[inc + 2] != interpolatedPos.z) {\n                    changed = true;\n                    for (var j = 0; j < data[i].numVertices; j++) {\n                        vertexData[inc++] = interpolatedPos.x;\n                        vertexData[inc++] = interpolatedPos.y;\n                        vertexData[inc++] = interpolatedPos.z;\n                    }\n                }\n            }\n        }\n        if (changed)\n            animationElements.invalidateBuffer();\n    };\n    ParticleFollowState.prototype.precessRotation = function (currentTime, deltaTime, animationElements) {\n        var data = animationElements.animationParticles;\n        var vertexData = animationElements.vertexData;\n        var changed = false;\n        var len = data.length;\n        var interpolatedRotation;\n        var rotationVelocity;\n        if (this._smooth) {\n            rotationVelocity = this._preEuler.subtract(this._targetEuler);\n            rotationVelocity.scaleBy(1 / deltaTime);\n        }\n        else\n            interpolatedRotation = this._targetEuler;\n        for (var i = 0; i < len; i++) {\n            var k = (currentTime - data[i].startTime) / data[i].totalTime;\n            var t = (k - Math.floor(k)) * data[i].totalTime;\n            if (t - deltaTime <= 0) {\n                var inc = data[i].startVertexIndex * animationElements.totalLenOfOneVertex + this._particleFollowNode._iDataOffset;\n                if (this._smooth) {\n                    this._temp.copyFrom(rotationVelocity);\n                    this._temp.scaleBy(t);\n                    interpolatedRotation = this._targetEuler.add(this._temp);\n                }\n                if (vertexData[inc] != interpolatedRotation.x || vertexData[inc + 1] != interpolatedRotation.y || vertexData[inc + 2] != interpolatedRotation.z) {\n                    changed = true;\n                    for (var j = 0; j < data[i].numVertices; j++) {\n                        vertexData[inc++] = interpolatedRotation.x;\n                        vertexData[inc++] = interpolatedRotation.y;\n                        vertexData[inc++] = interpolatedRotation.z;\n                    }\n                }\n            }\n        }\n        if (changed)\n            animationElements.invalidateBuffer();\n    };\n    ParticleFollowState.prototype.processPositionAndRotation = function (currentTime, deltaTime, animationElements) {\n        var data = animationElements.animationParticles;\n        var vertexData = animationElements.vertexData;\n        var changed = false;\n        var len = data.length;\n        var interpolatedPos;\n        var interpolatedRotation;\n        var posVelocity;\n        var rotationVelocity;\n        if (this._smooth) {\n            posVelocity = this._prePos.subtract(this._targetPos);\n            posVelocity.scaleBy(1 / deltaTime);\n            rotationVelocity = this._preEuler.subtract(this._targetEuler);\n            rotationVelocity.scaleBy(1 / deltaTime);\n        }\n        else {\n            interpolatedPos = this._targetPos;\n            interpolatedRotation = this._targetEuler;\n        }\n        for (var i = 0; i < len; i++) {\n            var k = (currentTime - data[i].startTime) / data[i].totalTime;\n            var t = (k - Math.floor(k)) * data[i].totalTime;\n            if (t - deltaTime <= 0) {\n                var inc = data[i].startVertexIndex * animationElements.totalLenOfOneVertex + this._particleFollowNode._iDataOffset;\n                if (this._smooth) {\n                    this._temp.copyFrom(posVelocity);\n                    this._temp.scaleBy(t);\n                    interpolatedPos = this._targetPos.add(this._temp);\n                    this._temp.copyFrom(rotationVelocity);\n                    this._temp.scaleBy(t);\n                    interpolatedRotation = this._targetEuler.add(this._temp);\n                }\n                if (vertexData[inc] != interpolatedPos.x || vertexData[inc + 1] != interpolatedPos.y || vertexData[inc + 2] != interpolatedPos.z || vertexData[inc + 3] != interpolatedRotation.x || vertexData[inc + 4] != interpolatedRotation.y || vertexData[inc + 5] != interpolatedRotation.z) {\n                    changed = true;\n                    for (var j = 0; j < data[i].numVertices; j++) {\n                        vertexData[inc++] = interpolatedPos.x;\n                        vertexData[inc++] = interpolatedPos.y;\n                        vertexData[inc++] = interpolatedPos.z;\n                        vertexData[inc++] = interpolatedRotation.x;\n                        vertexData[inc++] = interpolatedRotation.y;\n                        vertexData[inc++] = interpolatedRotation.z;\n                    }\n                }\n            }\n        }\n        if (changed)\n            animationElements.invalidateBuffer();\n    };\n    /** @private */\n    ParticleFollowState.FOLLOW_POSITION_INDEX = 0;\n    /** @private */\n    ParticleFollowState.FOLLOW_ROTATION_INDEX = 1;\n    return ParticleFollowState;\n}(ParticleStateBase_1.ParticleStateBase));\nexports.ParticleFollowState = ParticleFollowState;\n\n},{\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\",\"awayjs-core/lib/geom/MathConsts\":undefined,\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\":undefined}],\"awayjs-renderergl/lib/animators/states/ParticleInitialColorState\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\nvar ContextGLVertexBufferFormat_1 = require(\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\");\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\n/**\n*\n*/\nvar ParticleInitialColorState = (function (_super) {\n    __extends(ParticleInitialColorState, _super);\n    function ParticleInitialColorState(animator, particleInitialColorNode) {\n        _super.call(this, animator, particleInitialColorNode);\n        this._particleInitialColorNode = particleInitialColorNode;\n        this._usesMultiplier = particleInitialColorNode._iUsesMultiplier;\n        this._usesOffset = particleInitialColorNode._iUsesOffset;\n        this._initialColor = particleInitialColorNode._iInitialColor;\n        this.updateColorData();\n    }\n    Object.defineProperty(ParticleInitialColorState.prototype, \"initialColor\", {\n        /**\n         * Defines the initial color transform of the state, when in global mode.\n         */\n        get: function () {\n            return this._initialColor;\n        },\n        set: function (value) {\n            this._initialColor = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @inheritDoc\n     */\n    ParticleInitialColorState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\n        if (shader.usesFragmentAnimation) {\n            var index;\n            if (this._particleInitialColorNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_STATIC) {\n                var dataOffset = this._particleInitialColorNode._iDataOffset;\n                if (this._usesMultiplier) {\n                    animationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleInitialColorState.MULTIPLIER_INDEX), dataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_4);\n                    dataOffset += 4;\n                }\n                if (this._usesOffset)\n                    animationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleInitialColorState.OFFSET_INDEX), dataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_4);\n            }\n            else {\n                if (this._usesMultiplier)\n                    shader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleInitialColorState.MULTIPLIER_INDEX), this._multiplierData.x, this._multiplierData.y, this._multiplierData.z, this._multiplierData.w);\n                if (this._usesOffset)\n                    shader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleInitialColorState.OFFSET_INDEX), this._offsetData.x, this._offsetData.y, this._offsetData.z, this._offsetData.w);\n            }\n        }\n    };\n    ParticleInitialColorState.prototype.updateColorData = function () {\n        if (this._particleInitialColorNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) {\n            if (this._usesMultiplier)\n                this._multiplierData = new Vector3D_1.Vector3D(this._initialColor.redMultiplier, this._initialColor.greenMultiplier, this._initialColor.blueMultiplier, this._initialColor.alphaMultiplier);\n            if (this._usesOffset)\n                this._offsetData = new Vector3D_1.Vector3D(this._initialColor.redOffset / 255, this._initialColor.greenOffset / 255, this._initialColor.blueOffset / 255, this._initialColor.alphaOffset / 255);\n        }\n    };\n    /** @private */\n    ParticleInitialColorState.MULTIPLIER_INDEX = 0;\n    /** @private */\n    ParticleInitialColorState.OFFSET_INDEX = 1;\n    return ParticleInitialColorState;\n}(ParticleStateBase_1.ParticleStateBase));\nexports.ParticleInitialColorState = ParticleInitialColorState;\n\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\",\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\":undefined}],\"awayjs-renderergl/lib/animators/states/ParticleOrbitState\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Matrix3D_1 = require(\"awayjs-core/lib/geom/Matrix3D\");\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\nvar ContextGLVertexBufferFormat_1 = require(\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\");\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\n/**\n * ...\n */\nvar ParticleOrbitState = (function (_super) {\n    __extends(ParticleOrbitState, _super);\n    function ParticleOrbitState(animator, particleOrbitNode) {\n        _super.call(this, animator, particleOrbitNode);\n        this._particleOrbitNode = particleOrbitNode;\n        this._usesEulers = this._particleOrbitNode._iUsesEulers;\n        this._usesCycle = this._particleOrbitNode._iUsesCycle;\n        this._usesPhase = this._particleOrbitNode._iUsesPhase;\n        this._eulers = this._particleOrbitNode._iEulers;\n        this._radius = this._particleOrbitNode._iRadius;\n        this._cycleDuration = this._particleOrbitNode._iCycleDuration;\n        this._cyclePhase = this._particleOrbitNode._iCyclePhase;\n        this.updateOrbitData();\n    }\n    Object.defineProperty(ParticleOrbitState.prototype, \"radius\", {\n        /**\n         * Defines the radius of the orbit when in global mode. Defaults to 100.\n         */\n        get: function () {\n            return this._radius;\n        },\n        set: function (value) {\n            this._radius = value;\n            this.updateOrbitData();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ParticleOrbitState.prototype, \"cycleDuration\", {\n        /**\n         * Defines the duration of the orbit in seconds, used as a period independent of particle duration when in global mode. Defaults to 1.\n         */\n        get: function () {\n            return this._cycleDuration;\n        },\n        set: function (value) {\n            this._cycleDuration = value;\n            this.updateOrbitData();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ParticleOrbitState.prototype, \"cyclePhase\", {\n        /**\n         * Defines the phase of the orbit in degrees, used as the starting offset of the cycle when in global mode. Defaults to 0.\n         */\n        get: function () {\n            return this._cyclePhase;\n        },\n        set: function (value) {\n            this._cyclePhase = value;\n            this.updateOrbitData();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ParticleOrbitState.prototype, \"eulers\", {\n        /**\n         * Defines the euler rotation in degrees, applied to the orientation of the orbit when in global mode.\n         */\n        get: function () {\n            return this._eulers;\n        },\n        set: function (value) {\n            this._eulers = value;\n            this.updateOrbitData();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ParticleOrbitState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\n        var index = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleOrbitState.ORBIT_INDEX);\n        if (this._particleOrbitNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_STATIC) {\n            if (this._usesPhase)\n                animationElements.activateVertexBuffer(index, this._particleOrbitNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_4);\n            else\n                animationElements.activateVertexBuffer(index, this._particleOrbitNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_3);\n        }\n        else\n            shader.setVertexConst(index, this._orbitData.x, this._orbitData.y, this._orbitData.z, this._orbitData.w);\n        if (this._usesEulers)\n            shader.setVertexConstFromMatrix(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleOrbitState.EULERS_INDEX), this._eulersMatrix);\n    };\n    ParticleOrbitState.prototype.updateOrbitData = function () {\n        if (this._usesEulers) {\n            this._eulersMatrix = new Matrix3D_1.Matrix3D();\n            this._eulersMatrix.appendRotation(this._eulers.x, Vector3D_1.Vector3D.X_AXIS);\n            this._eulersMatrix.appendRotation(this._eulers.y, Vector3D_1.Vector3D.Y_AXIS);\n            this._eulersMatrix.appendRotation(this._eulers.z, Vector3D_1.Vector3D.Z_AXIS);\n        }\n        if (this._particleOrbitNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) {\n            this._orbitData = new Vector3D_1.Vector3D(this._radius, 0, this._radius * Math.PI * 2, this._cyclePhase * Math.PI / 180);\n            if (this._usesCycle) {\n                if (this._cycleDuration <= 0)\n                    throw (new Error(\"the cycle duration must be greater than zero\"));\n                this._orbitData.y = Math.PI * 2 / this._cycleDuration;\n            }\n            else\n                this._orbitData.y = Math.PI * 2;\n        }\n    };\n    /** @private */\n    ParticleOrbitState.ORBIT_INDEX = 0;\n    /** @private */\n    ParticleOrbitState.EULERS_INDEX = 1;\n    return ParticleOrbitState;\n}(ParticleStateBase_1.ParticleStateBase));\nexports.ParticleOrbitState = ParticleOrbitState;\n\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\",\"awayjs-core/lib/geom/Matrix3D\":undefined,\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\":undefined}],\"awayjs-renderergl/lib/animators/states/ParticleOscillatorState\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\nvar ContextGLVertexBufferFormat_1 = require(\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\");\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\n/**\n * ...\n */\nvar ParticleOscillatorState = (function (_super) {\n    __extends(ParticleOscillatorState, _super);\n    function ParticleOscillatorState(animator, particleOscillatorNode) {\n        _super.call(this, animator, particleOscillatorNode);\n        this._particleOscillatorNode = particleOscillatorNode;\n        this._oscillator = this._particleOscillatorNode._iOscillator;\n        this.updateOscillatorData();\n    }\n    Object.defineProperty(ParticleOscillatorState.prototype, \"oscillator\", {\n        /**\n         * Defines the default oscillator axis (x, y, z) and cycleDuration (w) of the state, used when in global mode.\n         */\n        get: function () {\n            return this._oscillator;\n        },\n        set: function (value) {\n            this._oscillator = value;\n            this.updateOscillatorData();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @inheritDoc\n     */\n    ParticleOscillatorState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\n        var index = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleOscillatorState.OSCILLATOR_INDEX);\n        if (this._particleOscillatorNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_STATIC)\n            animationElements.activateVertexBuffer(index, this._particleOscillatorNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_4);\n        else\n            shader.setVertexConst(index, this._oscillatorData.x, this._oscillatorData.y, this._oscillatorData.z, this._oscillatorData.w);\n    };\n    ParticleOscillatorState.prototype.updateOscillatorData = function () {\n        if (this._particleOscillatorNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) {\n            if (this._oscillator.w <= 0)\n                throw (new Error(\"the cycle duration must greater than zero\"));\n            if (this._oscillatorData == null)\n                this._oscillatorData = new Vector3D_1.Vector3D();\n            this._oscillatorData.x = this._oscillator.x;\n            this._oscillatorData.y = this._oscillator.y;\n            this._oscillatorData.z = this._oscillator.z;\n            this._oscillatorData.w = Math.PI * 2 / this._oscillator.w;\n        }\n    };\n    /** @private */\n    ParticleOscillatorState.OSCILLATOR_INDEX = 0;\n    return ParticleOscillatorState;\n}(ParticleStateBase_1.ParticleStateBase));\nexports.ParticleOscillatorState = ParticleOscillatorState;\n\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\",\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\":undefined}],\"awayjs-renderergl/lib/animators/states/ParticlePositionState\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ContextGLVertexBufferFormat_1 = require(\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\");\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\n/**\n * ...\n * @author ...\n */\nvar ParticlePositionState = (function (_super) {\n    __extends(ParticlePositionState, _super);\n    function ParticlePositionState(animator, particlePositionNode) {\n        _super.call(this, animator, particlePositionNode);\n        this._particlePositionNode = particlePositionNode;\n        this._position = this._particlePositionNode._iPosition;\n    }\n    Object.defineProperty(ParticlePositionState.prototype, \"position\", {\n        /**\n         * Defines the position of the particle when in global mode. Defaults to 0,0,0.\n         */\n        get: function () {\n            return this._position;\n        },\n        set: function (value) {\n            this._position = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     *\n     */\n    ParticlePositionState.prototype.getPositions = function () {\n        return this._pDynamicProperties;\n    };\n    ParticlePositionState.prototype.setPositions = function (value) {\n        this._pDynamicProperties = value;\n        this._pDynamicPropertiesDirty = new Object();\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticlePositionState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\n        if (this._particlePositionNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_DYNAMIC && !this._pDynamicPropertiesDirty[animationElements._iUniqueId])\n            this._pUpdateDynamicProperties(animationElements);\n        var index = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticlePositionState.POSITION_INDEX);\n        if (this._particlePositionNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL)\n            shader.setVertexConst(index, this._position.x, this._position.y, this._position.z);\n        else\n            animationElements.activateVertexBuffer(index, this._particlePositionNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_3);\n    };\n    /** @private */\n    ParticlePositionState.POSITION_INDEX = 0;\n    return ParticlePositionState;\n}(ParticleStateBase_1.ParticleStateBase));\nexports.ParticlePositionState = ParticlePositionState;\n\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\",\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\":undefined}],\"awayjs-renderergl/lib/animators/states/ParticleRotateToHeadingState\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Matrix3D_1 = require(\"awayjs-core/lib/geom/Matrix3D\");\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\n/**\n * ...\n */\nvar ParticleRotateToHeadingState = (function (_super) {\n    __extends(ParticleRotateToHeadingState, _super);\n    function ParticleRotateToHeadingState(animator, particleNode) {\n        _super.call(this, animator, particleNode);\n        this._matrix = new Matrix3D_1.Matrix3D();\n    }\n    ParticleRotateToHeadingState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\n        if (this._pParticleAnimator.animationSet.hasBillboard) {\n            this._matrix.copyFrom(renderable.sourceEntity.sceneTransform);\n            this._matrix.append(camera.inverseSceneTransform);\n            shader.setVertexConstFromMatrix(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleRotateToHeadingState.MATRIX_INDEX), this._matrix);\n        }\n    };\n    /** @private */\n    ParticleRotateToHeadingState.MATRIX_INDEX = 0;\n    return ParticleRotateToHeadingState;\n}(ParticleStateBase_1.ParticleStateBase));\nexports.ParticleRotateToHeadingState = ParticleRotateToHeadingState;\n\n},{\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\",\"awayjs-core/lib/geom/Matrix3D\":undefined}],\"awayjs-renderergl/lib/animators/states/ParticleRotateToPositionState\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Matrix3D_1 = require(\"awayjs-core/lib/geom/Matrix3D\");\nvar ContextGLVertexBufferFormat_1 = require(\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\");\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\n/**\n * ...\n */\nvar ParticleRotateToPositionState = (function (_super) {\n    __extends(ParticleRotateToPositionState, _super);\n    function ParticleRotateToPositionState(animator, particleRotateToPositionNode) {\n        _super.call(this, animator, particleRotateToPositionNode);\n        this._matrix = new Matrix3D_1.Matrix3D();\n        this._particleRotateToPositionNode = particleRotateToPositionNode;\n        this._position = this._particleRotateToPositionNode._iPosition;\n    }\n    Object.defineProperty(ParticleRotateToPositionState.prototype, \"position\", {\n        /**\n         * Defines the position of the point the particle will rotate to face when in global mode. Defaults to 0,0,0.\n         */\n        get: function () {\n            return this._position;\n        },\n        set: function (value) {\n            this._position = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ParticleRotateToPositionState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\n        var index = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleRotateToPositionState.POSITION_INDEX);\n        if (this._pParticleAnimator.animationSet.hasBillboard) {\n            this._matrix.copyFrom(renderable.sourceEntity.sceneTransform);\n            this._matrix.append(camera.inverseSceneTransform);\n            shader.setVertexConstFromMatrix(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleRotateToPositionState.MATRIX_INDEX), this._matrix);\n        }\n        if (this._particleRotateToPositionNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) {\n            this._offset = renderable.sourceEntity.inverseSceneTransform.transformVector(this._position);\n            shader.setVertexConst(index, this._offset.x, this._offset.y, this._offset.z);\n        }\n        else\n            animationElements.activateVertexBuffer(index, this._particleRotateToPositionNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_3);\n    };\n    /** @private */\n    ParticleRotateToPositionState.MATRIX_INDEX = 0;\n    /** @private */\n    ParticleRotateToPositionState.POSITION_INDEX = 1;\n    return ParticleRotateToPositionState;\n}(ParticleStateBase_1.ParticleStateBase));\nexports.ParticleRotateToPositionState = ParticleRotateToPositionState;\n\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\",\"awayjs-core/lib/geom/Matrix3D\":undefined,\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\":undefined}],\"awayjs-renderergl/lib/animators/states/ParticleRotationalVelocityState\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\nvar ContextGLVertexBufferFormat_1 = require(\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\");\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\n/**\n * ...\n */\nvar ParticleRotationalVelocityState = (function (_super) {\n    __extends(ParticleRotationalVelocityState, _super);\n    function ParticleRotationalVelocityState(animator, particleRotationNode) {\n        _super.call(this, animator, particleRotationNode);\n        this._particleRotationalVelocityNode = particleRotationNode;\n        this._rotationalVelocity = this._particleRotationalVelocityNode._iRotationalVelocity;\n        this.updateRotationalVelocityData();\n    }\n    Object.defineProperty(ParticleRotationalVelocityState.prototype, \"rotationalVelocity\", {\n        /**\n         * Defines the default rotationalVelocity of the state, used when in global mode.\n         */\n        get: function () {\n            return this._rotationalVelocity;\n        },\n        set: function (value) {\n            this._rotationalVelocity = value;\n            this.updateRotationalVelocityData();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     *\n     */\n    ParticleRotationalVelocityState.prototype.getRotationalVelocities = function () {\n        return this._pDynamicProperties;\n    };\n    ParticleRotationalVelocityState.prototype.setRotationalVelocities = function (value) {\n        this._pDynamicProperties = value;\n        this._pDynamicPropertiesDirty = new Object();\n    };\n    /**\n     * @inheritDoc\n     */\n    ParticleRotationalVelocityState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\n        if (this._particleRotationalVelocityNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_DYNAMIC && !this._pDynamicPropertiesDirty[animationElements._iUniqueId])\n            this._pUpdateDynamicProperties(animationElements);\n        var index = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleRotationalVelocityState.ROTATIONALVELOCITY_INDEX);\n        if (this._particleRotationalVelocityNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL)\n            shader.setVertexConst(index, this._rotationalVelocityData.x, this._rotationalVelocityData.y, this._rotationalVelocityData.z, this._rotationalVelocityData.w);\n        else\n            animationElements.activateVertexBuffer(index, this._particleRotationalVelocityNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_4);\n    };\n    ParticleRotationalVelocityState.prototype.updateRotationalVelocityData = function () {\n        if (this._particleRotationalVelocityNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) {\n            if (this._rotationalVelocity.w <= 0)\n                throw (new Error(\"the cycle duration must greater than zero\"));\n            var rotation = this._rotationalVelocity.clone();\n            if (rotation.length <= 0)\n                rotation.z = 1; //set the default direction\n            else\n                rotation.normalize();\n            // w is used as angle/2 in agal\n            this._rotationalVelocityData = new Vector3D_1.Vector3D(rotation.x, rotation.y, rotation.z, Math.PI / rotation.w);\n        }\n    };\n    /** @private */\n    ParticleRotationalVelocityState.ROTATIONALVELOCITY_INDEX = 0;\n    return ParticleRotationalVelocityState;\n}(ParticleStateBase_1.ParticleStateBase));\nexports.ParticleRotationalVelocityState = ParticleRotationalVelocityState;\n\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\",\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\":undefined}],\"awayjs-renderergl/lib/animators/states/ParticleScaleState\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\nvar ContextGLVertexBufferFormat_1 = require(\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\");\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\n/**\n * ...\n */\nvar ParticleScaleState = (function (_super) {\n    __extends(ParticleScaleState, _super);\n    function ParticleScaleState(animator, particleScaleNode) {\n        _super.call(this, animator, particleScaleNode);\n        this._particleScaleNode = particleScaleNode;\n        this._usesCycle = this._particleScaleNode._iUsesCycle;\n        this._usesPhase = this._particleScaleNode._iUsesPhase;\n        this._minScale = this._particleScaleNode._iMinScale;\n        this._maxScale = this._particleScaleNode._iMaxScale;\n        this._cycleDuration = this._particleScaleNode._iCycleDuration;\n        this._cyclePhase = this._particleScaleNode._iCyclePhase;\n        this.updateScaleData();\n    }\n    Object.defineProperty(ParticleScaleState.prototype, \"minScale\", {\n        /**\n         * Defines the end scale of the state, when in global mode. Defaults to 1.\n         */\n        get: function () {\n            return this._minScale;\n        },\n        set: function (value) {\n            this._minScale = value;\n            this.updateScaleData();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ParticleScaleState.prototype, \"maxScale\", {\n        /**\n         * Defines the end scale of the state, when in global mode. Defaults to 1.\n         */\n        get: function () {\n            return this._maxScale;\n        },\n        set: function (value) {\n            this._maxScale = value;\n            this.updateScaleData();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ParticleScaleState.prototype, \"cycleDuration\", {\n        /**\n         * Defines the duration of the animation in seconds, used as a period independent of particle duration when in global mode. Defaults to 1.\n         */\n        get: function () {\n            return this._cycleDuration;\n        },\n        set: function (value) {\n            this._cycleDuration = value;\n            this.updateScaleData();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ParticleScaleState.prototype, \"cyclePhase\", {\n        /**\n         * Defines the phase of the cycle in degrees, used as the starting offset of the cycle when in global mode. Defaults to 0.\n         */\n        get: function () {\n            return this._cyclePhase;\n        },\n        set: function (value) {\n            this._cyclePhase = value;\n            this.updateScaleData();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ParticleScaleState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\n        var index = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleScaleState.SCALE_INDEX);\n        if (this._particleScaleNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_STATIC) {\n            if (this._usesCycle) {\n                if (this._usesPhase)\n                    animationElements.activateVertexBuffer(index, this._particleScaleNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_4);\n                else\n                    animationElements.activateVertexBuffer(index, this._particleScaleNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_3);\n            }\n            else\n                animationElements.activateVertexBuffer(index, this._particleScaleNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_2);\n        }\n        else\n            shader.setVertexConst(index, this._scaleData.x, this._scaleData.y, this._scaleData.z, this._scaleData.w);\n    };\n    ParticleScaleState.prototype.updateScaleData = function () {\n        if (this._particleScaleNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL) {\n            if (this._usesCycle) {\n                if (this._cycleDuration <= 0)\n                    throw (new Error(\"the cycle duration must be greater than zero\"));\n                this._scaleData = new Vector3D_1.Vector3D((this._minScale + this._maxScale) / 2, Math.abs(this._minScale - this._maxScale) / 2, Math.PI * 2 / this._cycleDuration, this._cyclePhase * Math.PI / 180);\n            }\n            else\n                this._scaleData = new Vector3D_1.Vector3D(this._minScale, this._maxScale - this._minScale, 0, 0);\n        }\n    };\n    /** @private */\n    ParticleScaleState.SCALE_INDEX = 0;\n    return ParticleScaleState;\n}(ParticleStateBase_1.ParticleStateBase));\nexports.ParticleScaleState = ParticleScaleState;\n\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\",\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\":undefined}],\"awayjs-renderergl/lib/animators/states/ParticleSegmentedColorState\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\n/**\n *\n */\nvar ParticleSegmentedColorState = (function (_super) {\n    __extends(ParticleSegmentedColorState, _super);\n    function ParticleSegmentedColorState(animator, particleSegmentedColorNode) {\n        _super.call(this, animator, particleSegmentedColorNode);\n        this._usesMultiplier = particleSegmentedColorNode._iUsesMultiplier;\n        this._usesOffset = particleSegmentedColorNode._iUsesOffset;\n        this._startColor = particleSegmentedColorNode._iStartColor;\n        this._endColor = particleSegmentedColorNode._iEndColor;\n        this._segmentPoints = particleSegmentedColorNode._iSegmentPoints;\n        this._numSegmentPoint = particleSegmentedColorNode._iNumSegmentPoint;\n        this.updateColorData();\n    }\n    Object.defineProperty(ParticleSegmentedColorState.prototype, \"startColor\", {\n        /**\n         * Defines the start color transform of the state, when in global mode.\n         */\n        get: function () {\n            return this._startColor;\n        },\n        set: function (value) {\n            this._startColor = value;\n            this.updateColorData();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ParticleSegmentedColorState.prototype, \"endColor\", {\n        /**\n         * Defines the end color transform of the state, when in global mode.\n         */\n        get: function () {\n            return this._endColor;\n        },\n        set: function (value) {\n            this._endColor = value;\n            this.updateColorData();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ParticleSegmentedColorState.prototype, \"numSegmentPoint\", {\n        /**\n         * Defines the number of segments.\n         */\n        get: function () {\n            return this._numSegmentPoint;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ParticleSegmentedColorState.prototype, \"segmentPoints\", {\n        /**\n         * Defines the key points of color\n         */\n        get: function () {\n            return this._segmentPoints;\n        },\n        set: function (value) {\n            this._segmentPoints = value;\n            this.updateColorData();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ParticleSegmentedColorState.prototype, \"usesMultiplier\", {\n        get: function () {\n            return this._usesMultiplier;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ParticleSegmentedColorState.prototype, \"usesOffset\", {\n        get: function () {\n            return this._usesOffset;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ParticleSegmentedColorState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\n        if (shader.usesFragmentAnimation) {\n            if (this._numSegmentPoint > 0)\n                shader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleSegmentedColorState.TIME_DATA_INDEX), this._timeLifeData[0], this._timeLifeData[1], this._timeLifeData[2], this._timeLifeData[3]);\n            if (this._usesMultiplier)\n                shader.setVertexConstFromArray(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleSegmentedColorState.START_MULTIPLIER_INDEX), this._multiplierData);\n            if (this._usesOffset)\n                shader.setVertexConstFromArray(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleSegmentedColorState.START_OFFSET_INDEX), this._offsetData);\n        }\n    };\n    ParticleSegmentedColorState.prototype.updateColorData = function () {\n        this._timeLifeData = new Float32Array(4);\n        this._multiplierData = new Float32Array(4 * (this._numSegmentPoint + 1));\n        this._offsetData = new Float32Array(4 * (this._numSegmentPoint + 1));\n        //cut off the time data\n        var i;\n        var j = 0;\n        var count = this._numSegmentPoint > 3 ? 3 : this._numSegmentPoint;\n        for (i = 0; i < count; i++) {\n            if (i == 0)\n                this._timeLifeData[j++] = this._segmentPoints[i].life;\n            else\n                this._timeLifeData[j++] = this._segmentPoints[i].life - this._segmentPoints[i - 1].life;\n        }\n        i = count;\n        if (this._numSegmentPoint == 0)\n            this._timeLifeData[j++] = 1;\n        else\n            this._timeLifeData[j++] = 1 - this._segmentPoints[i - 1].life;\n        if (this._usesMultiplier) {\n            j = 0;\n            this._multiplierData[j++] = this._startColor.redMultiplier;\n            this._multiplierData[j++] = this._startColor.greenMultiplier;\n            this._multiplierData[j++] = this._startColor.blueMultiplier;\n            this._multiplierData[j++] = this._startColor.alphaMultiplier;\n            for (i = 0; i < this._numSegmentPoint; i++) {\n                if (i == 0) {\n                    this._multiplierData[j++] = (this._segmentPoints[i].color.redMultiplier - this._startColor.redMultiplier) / this._timeLifeData[i];\n                    this._multiplierData[j++] = (this._segmentPoints[i].color.greenMultiplier - this._startColor.greenMultiplier) / this._timeLifeData[i];\n                    this._multiplierData[j++] = (this._segmentPoints[i].color.blueMultiplier - this._startColor.blueMultiplier) / this._timeLifeData[i];\n                    this._multiplierData[j++] = (this._segmentPoints[i].color.alphaMultiplier - this._startColor.alphaMultiplier) / this._timeLifeData[i];\n                }\n                else {\n                    this._multiplierData[j++] = (this._segmentPoints[i].color.redMultiplier - this._segmentPoints[i - 1].color.redMultiplier) / this._timeLifeData[i];\n                    this._multiplierData[j++] = (this._segmentPoints[i].color.greenMultiplier - this._segmentPoints[i - 1].color.greenMultiplier) / this._timeLifeData[i];\n                    this._multiplierData[j++] = (this._segmentPoints[i].color.blueMultiplier - this._segmentPoints[i - 1].color.blueMultiplier) / this._timeLifeData[i];\n                    this._multiplierData[j++] = (this._segmentPoints[i].color.alphaMultiplier - this._segmentPoints[i - 1].color.alphaMultiplier) / this._timeLifeData[i];\n                }\n            }\n            i = this._numSegmentPoint;\n            if (this._numSegmentPoint == 0) {\n                this._multiplierData[j++] = this._endColor.redMultiplier - this._startColor.redMultiplier;\n                this._multiplierData[j++] = this._endColor.greenMultiplier - this._startColor.greenMultiplier;\n                this._multiplierData[j++] = this._endColor.blueMultiplier - this._startColor.blueMultiplier;\n                this._multiplierData[j++] = this._endColor.alphaMultiplier - this._startColor.alphaMultiplier;\n            }\n            else {\n                this._multiplierData[j++] = (this._endColor.redMultiplier - this._segmentPoints[i - 1].color.redMultiplier) / this._timeLifeData[i];\n                this._multiplierData[j++] = (this._endColor.greenMultiplier - this._segmentPoints[i - 1].color.greenMultiplier) / this._timeLifeData[i];\n                this._multiplierData[j++] = (this._endColor.blueMultiplier - this._segmentPoints[i - 1].color.blueMultiplier) / this._timeLifeData[i];\n                this._multiplierData[j++] = (this._endColor.alphaMultiplier - this._segmentPoints[i - 1].color.alphaMultiplier) / this._timeLifeData[i];\n            }\n        }\n        if (this._usesOffset) {\n            j = 0;\n            this._offsetData[j++] = this._startColor.redOffset / 255;\n            this._offsetData[j++] = this._startColor.greenOffset / 255;\n            this._offsetData[j++] = this._startColor.blueOffset / 255;\n            this._offsetData[j++] = this._startColor.alphaOffset / 255;\n            for (i = 0; i < this._numSegmentPoint; i++) {\n                if (i == 0) {\n                    this._offsetData[j++] = (this._segmentPoints[i].color.redOffset - this._startColor.redOffset) / this._timeLifeData[i] / 255;\n                    this._offsetData[j++] = (this._segmentPoints[i].color.greenOffset - this._startColor.greenOffset) / this._timeLifeData[i] / 255;\n                    this._offsetData[j++] = (this._segmentPoints[i].color.blueOffset - this._startColor.blueOffset) / this._timeLifeData[i] / 255;\n                    this._offsetData[j++] = (this._segmentPoints[i].color.alphaOffset - this._startColor.alphaOffset) / this._timeLifeData[i] / 255;\n                }\n                else {\n                    this._offsetData[j++] = (this._segmentPoints[i].color.redOffset - this._segmentPoints[i - 1].color.redOffset) / this._timeLifeData[i] / 255;\n                    this._offsetData[j++] = (this._segmentPoints[i].color.greenOffset - this._segmentPoints[i - 1].color.greenOffset) / this._timeLifeData[i] / 255;\n                    this._offsetData[j++] = (this._segmentPoints[i].color.blueOffset - this._segmentPoints[i - 1].color.blueOffset) / this._timeLifeData[i] / 255;\n                    this._offsetData[j++] = (this._segmentPoints[i].color.alphaOffset - this._segmentPoints[i - 1].color.alphaOffset) / this._timeLifeData[i] / 255;\n                }\n            }\n            i = this._numSegmentPoint;\n            if (this._numSegmentPoint == 0) {\n                this._offsetData[j++] = (this._endColor.redOffset - this._startColor.redOffset) / 255;\n                this._offsetData[j++] = (this._endColor.greenOffset - this._startColor.greenOffset) / 255;\n                this._offsetData[j++] = (this._endColor.blueOffset - this._startColor.blueOffset) / 255;\n                this._offsetData[j++] = (this._endColor.alphaOffset - this._startColor.alphaOffset) / 255;\n            }\n            else {\n                this._offsetData[i] = (this._endColor.redOffset - this._segmentPoints[i - 1].color.redOffset) / this._timeLifeData[i] / 255;\n                this._offsetData[j++] = (this._endColor.greenOffset - this._segmentPoints[i - 1].color.greenOffset) / this._timeLifeData[i] / 255;\n                this._offsetData[j++] = (this._endColor.blueOffset - this._segmentPoints[i - 1].color.blueOffset) / this._timeLifeData[i] / 255;\n                this._offsetData[j++] = (this._endColor.alphaOffset - this._segmentPoints[i - 1].color.alphaOffset) / this._timeLifeData[i] / 255;\n            }\n        }\n    };\n    /** @private */\n    ParticleSegmentedColorState.START_MULTIPLIER_INDEX = 0;\n    /** @private */\n    ParticleSegmentedColorState.START_OFFSET_INDEX = 1;\n    /** @private */\n    ParticleSegmentedColorState.TIME_DATA_INDEX = 2;\n    return ParticleSegmentedColorState;\n}(ParticleStateBase_1.ParticleStateBase));\nexports.ParticleSegmentedColorState = ParticleSegmentedColorState;\n\n},{\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\"}],\"awayjs-renderergl/lib/animators/states/ParticleSpriteSheetState\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ContextGLVertexBufferFormat_1 = require(\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\");\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\n/**\n * ...\n */\nvar ParticleSpriteSheetState = (function (_super) {\n    __extends(ParticleSpriteSheetState, _super);\n    function ParticleSpriteSheetState(animator, particleSpriteSheetNode) {\n        _super.call(this, animator, particleSpriteSheetNode);\n        this._particleSpriteSheetNode = particleSpriteSheetNode;\n        this._usesCycle = this._particleSpriteSheetNode._iUsesCycle;\n        this._usesPhase = this._particleSpriteSheetNode._iUsesCycle;\n        this._totalFrames = this._particleSpriteSheetNode._iTotalFrames;\n        this._numColumns = this._particleSpriteSheetNode._iNumColumns;\n        this._numRows = this._particleSpriteSheetNode._iNumRows;\n        this._cycleDuration = this._particleSpriteSheetNode._iCycleDuration;\n        this._cyclePhase = this._particleSpriteSheetNode._iCyclePhase;\n        this.updateSpriteSheetData();\n    }\n    Object.defineProperty(ParticleSpriteSheetState.prototype, \"cyclePhase\", {\n        /**\n         * Defines the cycle phase, when in global mode. Defaults to zero.\n         */\n        get: function () {\n            return this._cyclePhase;\n        },\n        set: function (value) {\n            this._cyclePhase = value;\n            this.updateSpriteSheetData();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ParticleSpriteSheetState.prototype, \"cycleDuration\", {\n        /**\n         * Defines the cycle duration in seconds, when in global mode. Defaults to 1.\n         */\n        get: function () {\n            return this._cycleDuration;\n        },\n        set: function (value) {\n            this._cycleDuration = value;\n            this.updateSpriteSheetData();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ParticleSpriteSheetState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\n        if (!shader.usesUVTransform) {\n            shader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleSpriteSheetState.UV_INDEX_0), this._spriteSheetData[0], this._spriteSheetData[1], this._spriteSheetData[2], this._spriteSheetData[3]);\n            if (this._usesCycle) {\n                var index = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleSpriteSheetState.UV_INDEX_1);\n                if (this._particleSpriteSheetNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_STATIC) {\n                    if (this._usesPhase)\n                        animationElements.activateVertexBuffer(index, this._particleSpriteSheetNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_3);\n                    else\n                        animationElements.activateVertexBuffer(index, this._particleSpriteSheetNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_2);\n                }\n                else\n                    shader.setVertexConst(index, this._spriteSheetData[4], this._spriteSheetData[5]);\n            }\n        }\n    };\n    ParticleSpriteSheetState.prototype.updateSpriteSheetData = function () {\n        this._spriteSheetData = new Array(8);\n        var uTotal = this._totalFrames / this._numColumns;\n        this._spriteSheetData[0] = uTotal;\n        this._spriteSheetData[1] = 1 / this._numColumns;\n        this._spriteSheetData[2] = 1 / this._numRows;\n        if (this._usesCycle) {\n            if (this._cycleDuration <= 0)\n                throw (new Error(\"the cycle duration must be greater than zero\"));\n            this._spriteSheetData[4] = uTotal / this._cycleDuration;\n            this._spriteSheetData[5] = this._cycleDuration;\n            if (this._usesPhase)\n                this._spriteSheetData[6] = this._cyclePhase;\n        }\n    };\n    /** @private */\n    ParticleSpriteSheetState.UV_INDEX_0 = 0;\n    /** @private */\n    ParticleSpriteSheetState.UV_INDEX_1 = 1;\n    return ParticleSpriteSheetState;\n}(ParticleStateBase_1.ParticleStateBase));\nexports.ParticleSpriteSheetState = ParticleSpriteSheetState;\n\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\",\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\":undefined}],\"awayjs-renderergl/lib/animators/states/ParticleStateBase\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AnimationStateBase_1 = require(\"../../animators/states/AnimationStateBase\");\n/**\n * ...\n */\nvar ParticleStateBase = (function (_super) {\n    __extends(ParticleStateBase, _super);\n    function ParticleStateBase(animator, particleNode, needUpdateTime) {\n        if (needUpdateTime === void 0) { needUpdateTime = false; }\n        _super.call(this, animator, particleNode);\n        this._pDynamicProperties = new Array();\n        this._pDynamicPropertiesDirty = new Object();\n        this._pParticleAnimator = animator;\n        this._particleNode = particleNode;\n        this._pNeedUpdateTime = needUpdateTime;\n    }\n    Object.defineProperty(ParticleStateBase.prototype, \"needUpdateTime\", {\n        get: function () {\n            return this._pNeedUpdateTime;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ParticleStateBase.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\n    };\n    ParticleStateBase.prototype._pUpdateDynamicProperties = function (animationElements) {\n        this._pDynamicPropertiesDirty[animationElements._iUniqueId] = true;\n        var animationParticles = animationElements.animationParticles;\n        var vertexData = animationElements.vertexData;\n        var totalLenOfOneVertex = animationElements.totalLenOfOneVertex;\n        var dataLength = this._particleNode.dataLength;\n        var dataOffset = this._particleNode._iDataOffset;\n        var vertexLength;\n        //\t\t\tvar particleOffset:number;\n        var startingOffset;\n        var vertexOffset;\n        var data;\n        var animationParticle;\n        //\t\t\tvar numParticles:number = _positions.length/dataLength;\n        var numParticles = this._pDynamicProperties.length;\n        var i = 0;\n        var j = 0;\n        var k = 0;\n        //loop through all particles\n        while (i < numParticles) {\n            //loop through each particle data for the current particle\n            while (j < numParticles && (animationParticle = animationParticles[j]).index == i) {\n                data = this._pDynamicProperties[i];\n                vertexLength = animationParticle.numVertices * totalLenOfOneVertex;\n                startingOffset = animationParticle.startVertexIndex * totalLenOfOneVertex + dataOffset;\n                //loop through each vertex in the particle data\n                for (k = 0; k < vertexLength; k += totalLenOfOneVertex) {\n                    vertexOffset = startingOffset + k;\n                    //\t\t\t\t\t\tparticleOffset = i * dataLength;\n                    //loop through all vertex data for the current particle data\n                    for (k = 0; k < vertexLength; k += totalLenOfOneVertex) {\n                        vertexOffset = startingOffset + k;\n                        vertexData[vertexOffset++] = data.x;\n                        vertexData[vertexOffset++] = data.y;\n                        vertexData[vertexOffset++] = data.z;\n                        if (dataLength == 4)\n                            vertexData[vertexOffset++] = data.w;\n                    }\n                }\n                j++;\n            }\n            i++;\n        }\n        animationElements.invalidateBuffer();\n    };\n    return ParticleStateBase;\n}(AnimationStateBase_1.AnimationStateBase));\nexports.ParticleStateBase = ParticleStateBase;\n\n},{\"../../animators/states/AnimationStateBase\":\"awayjs-renderergl/lib/animators/states/AnimationStateBase\"}],\"awayjs-renderergl/lib/animators/states/ParticleTimeState\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ContextGLVertexBufferFormat_1 = require(\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\");\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\n/**\n * ...\n */\nvar ParticleTimeState = (function (_super) {\n    __extends(ParticleTimeState, _super);\n    function ParticleTimeState(animator, particleTimeNode) {\n        _super.call(this, animator, particleTimeNode, true);\n        this._particleTimeNode = particleTimeNode;\n    }\n    ParticleTimeState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\n        animationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleTimeState.TIME_STREAM_INDEX), this._particleTimeNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_4);\n        var particleTime = this._pTime / 1000;\n        shader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleTimeState.TIME_CONSTANT_INDEX), particleTime, particleTime, particleTime, particleTime);\n    };\n    /** @private */\n    ParticleTimeState.TIME_STREAM_INDEX = 0;\n    /** @private */\n    ParticleTimeState.TIME_CONSTANT_INDEX = 1;\n    return ParticleTimeState;\n}(ParticleStateBase_1.ParticleStateBase));\nexports.ParticleTimeState = ParticleTimeState;\n\n},{\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\",\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\":undefined}],\"awayjs-renderergl/lib/animators/states/ParticleUVState\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\n/**\n * ...\n */\nvar ParticleUVState = (function (_super) {\n    __extends(ParticleUVState, _super);\n    function ParticleUVState(animator, particleUVNode) {\n        _super.call(this, animator, particleUVNode);\n        this._particleUVNode = particleUVNode;\n    }\n    ParticleUVState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\n        if (!shader.usesUVTransform) {\n            var index = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleUVState.UV_INDEX);\n            var data = this._particleUVNode._iUvData;\n            shader.setVertexConst(index, data.x, data.y);\n        }\n    };\n    /** @private */\n    ParticleUVState.UV_INDEX = 0;\n    return ParticleUVState;\n}(ParticleStateBase_1.ParticleStateBase));\nexports.ParticleUVState = ParticleUVState;\n\n},{\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\"}],\"awayjs-renderergl/lib/animators/states/ParticleVelocityState\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ContextGLVertexBufferFormat_1 = require(\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\");\nvar ParticlePropertiesMode_1 = require(\"../../animators/data/ParticlePropertiesMode\");\nvar ParticleStateBase_1 = require(\"../../animators/states/ParticleStateBase\");\n/**\n * ...\n */\nvar ParticleVelocityState = (function (_super) {\n    __extends(ParticleVelocityState, _super);\n    function ParticleVelocityState(animator, particleVelocityNode) {\n        _super.call(this, animator, particleVelocityNode);\n        this._particleVelocityNode = particleVelocityNode;\n        this._velocity = this._particleVelocityNode._iVelocity;\n    }\n    Object.defineProperty(ParticleVelocityState.prototype, \"velocity\", {\n        /**\n         * Defines the default velocity vector of the state, used when in global mode.\n         */\n        get: function () {\n            return this._velocity;\n        },\n        set: function (value) {\n            this._velocity = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     *\n     */\n    ParticleVelocityState.prototype.getVelocities = function () {\n        return this._pDynamicProperties;\n    };\n    ParticleVelocityState.prototype.setVelocities = function (value) {\n        this._pDynamicProperties = value;\n        this._pDynamicPropertiesDirty = new Object();\n    };\n    ParticleVelocityState.prototype.setRenderState = function (shader, renderable, animationElements, animationRegisterData, camera, stage) {\n        if (this._particleVelocityNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.LOCAL_DYNAMIC && !this._pDynamicPropertiesDirty[animationElements._iUniqueId])\n            this._pUpdateDynamicProperties(animationElements);\n        var index = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleVelocityState.VELOCITY_INDEX);\n        if (this._particleVelocityNode.mode == ParticlePropertiesMode_1.ParticlePropertiesMode.GLOBAL)\n            shader.setVertexConst(index, this._velocity.x, this._velocity.y, this._velocity.z);\n        else\n            animationElements.activateVertexBuffer(index, this._particleVelocityNode._iDataOffset, stage, ContextGLVertexBufferFormat_1.ContextGLVertexBufferFormat.FLOAT_3);\n    };\n    /** @private */\n    ParticleVelocityState.VELOCITY_INDEX = 0;\n    return ParticleVelocityState;\n}(ParticleStateBase_1.ParticleStateBase));\nexports.ParticleVelocityState = ParticleVelocityState;\n\n},{\"../../animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"../../animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\",\"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\":undefined}],\"awayjs-renderergl/lib/animators/states/SkeletonBinaryLERPState\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar JointPose_1 = require(\"../../animators/data/JointPose\");\nvar SkeletonPose_1 = require(\"../../animators/data/SkeletonPose\");\nvar AnimationStateBase_1 = require(\"../../animators/states/AnimationStateBase\");\n/**\n *\n */\nvar SkeletonBinaryLERPState = (function (_super) {\n    __extends(SkeletonBinaryLERPState, _super);\n    function SkeletonBinaryLERPState(animator, skeletonAnimationNode) {\n        _super.call(this, animator, skeletonAnimationNode);\n        this._blendWeight = 0;\n        this._skeletonPose = new SkeletonPose_1.SkeletonPose();\n        this._skeletonPoseDirty = true;\n        this._skeletonAnimationNode = skeletonAnimationNode;\n        this._inputA = animator.getAnimationState(this._skeletonAnimationNode.inputA);\n        this._inputB = animator.getAnimationState(this._skeletonAnimationNode.inputB);\n    }\n    Object.defineProperty(SkeletonBinaryLERPState.prototype, \"blendWeight\", {\n        /**\n         * Defines a fractional value between 0 and 1 representing the blending ratio between inputA (0) and inputB (1),\n         * used to produce the skeleton pose output.\n         *\n         * @see inputA\n         * @see inputB\n         */\n        get: function () {\n            return this._blendWeight;\n        },\n        set: function (value) {\n            this._blendWeight = value;\n            this._pPositionDeltaDirty = true;\n            this._skeletonPoseDirty = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @inheritDoc\n     */\n    SkeletonBinaryLERPState.prototype.phase = function (value) {\n        this._skeletonPoseDirty = true;\n        this._pPositionDeltaDirty = true;\n        this._inputA.phase(value);\n        this._inputB.phase(value);\n    };\n    /**\n     * @inheritDoc\n     */\n    SkeletonBinaryLERPState.prototype._pUpdateTime = function (time) {\n        this._skeletonPoseDirty = true;\n        this._inputA.update(time);\n        this._inputB.update(time);\n        _super.prototype._pUpdateTime.call(this, time);\n    };\n    /**\n     * Returns the current skeleton pose of the animation in the clip based on the internal playhead position.\n     */\n    SkeletonBinaryLERPState.prototype.getSkeletonPose = function (skeleton) {\n        if (this._skeletonPoseDirty)\n            this.updateSkeletonPose(skeleton);\n        return this._skeletonPose;\n    };\n    /**\n     * @inheritDoc\n     */\n    SkeletonBinaryLERPState.prototype._pUpdatePositionDelta = function () {\n        this._pPositionDeltaDirty = false;\n        var deltA = this._inputA.positionDelta;\n        var deltB = this._inputB.positionDelta;\n        this._pRootDelta.x = deltA.x + this._blendWeight * (deltB.x - deltA.x);\n        this._pRootDelta.y = deltA.y + this._blendWeight * (deltB.y - deltA.y);\n        this._pRootDelta.z = deltA.z + this._blendWeight * (deltB.z - deltA.z);\n    };\n    /**\n     * Updates the output skeleton pose of the node based on the blendWeight value between input nodes.\n     *\n     * @param skeleton The skeleton used by the animator requesting the ouput pose.\n     */\n    SkeletonBinaryLERPState.prototype.updateSkeletonPose = function (skeleton) {\n        this._skeletonPoseDirty = false;\n        var endPose;\n        var endPoses = this._skeletonPose.jointPoses;\n        var poses1 = this._inputA.getSkeletonPose(skeleton).jointPoses;\n        var poses2 = this._inputB.getSkeletonPose(skeleton).jointPoses;\n        var pose1, pose2;\n        var p1, p2;\n        var tr;\n        var numJoints = skeleton.numJoints;\n        // :s\n        if (endPoses.length != numJoints)\n            endPoses.length = numJoints;\n        for (var i = 0; i < numJoints; ++i) {\n            endPose = endPoses[i];\n            if (endPose == null)\n                endPose = endPoses[i] = new JointPose_1.JointPose();\n            pose1 = poses1[i];\n            pose2 = poses2[i];\n            p1 = pose1.translation;\n            p2 = pose2.translation;\n            endPose.orientation.lerp(pose1.orientation, pose2.orientation, this._blendWeight);\n            tr = endPose.translation;\n            tr.x = p1.x + this._blendWeight * (p2.x - p1.x);\n            tr.y = p1.y + this._blendWeight * (p2.y - p1.y);\n            tr.z = p1.z + this._blendWeight * (p2.z - p1.z);\n        }\n    };\n    return SkeletonBinaryLERPState;\n}(AnimationStateBase_1.AnimationStateBase));\nexports.SkeletonBinaryLERPState = SkeletonBinaryLERPState;\n\n},{\"../../animators/data/JointPose\":\"awayjs-renderergl/lib/animators/data/JointPose\",\"../../animators/data/SkeletonPose\":\"awayjs-renderergl/lib/animators/data/SkeletonPose\",\"../../animators/states/AnimationStateBase\":\"awayjs-renderergl/lib/animators/states/AnimationStateBase\"}],\"awayjs-renderergl/lib/animators/states/SkeletonClipState\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\nvar JointPose_1 = require(\"../../animators/data/JointPose\");\nvar SkeletonPose_1 = require(\"../../animators/data/SkeletonPose\");\nvar AnimationClipState_1 = require(\"../../animators/states/AnimationClipState\");\n/**\n *\n */\nvar SkeletonClipState = (function (_super) {\n    __extends(SkeletonClipState, _super);\n    function SkeletonClipState(animator, skeletonClipNode) {\n        _super.call(this, animator, skeletonClipNode);\n        this._rootPos = new Vector3D_1.Vector3D();\n        this._skeletonPose = new SkeletonPose_1.SkeletonPose();\n        this._skeletonPoseDirty = true;\n        this._skeletonClipNode = skeletonClipNode;\n        this._frames = this._skeletonClipNode.frames;\n    }\n    Object.defineProperty(SkeletonClipState.prototype, \"currentPose\", {\n        /**\n         * Returns the current skeleton pose frame of animation in the clip based on the internal playhead position.\n         */\n        get: function () {\n            if (this._pFramesDirty)\n                this._pUpdateFrames();\n            return this._currentPose;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SkeletonClipState.prototype, \"nextPose\", {\n        /**\n         * Returns the next skeleton pose frame of animation in the clip based on the internal playhead position.\n         */\n        get: function () {\n            if (this._pFramesDirty)\n                this._pUpdateFrames();\n            return this._nextPose;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns the current skeleton pose of the animation in the clip based on the internal playhead position.\n     */\n    SkeletonClipState.prototype.getSkeletonPose = function (skeleton) {\n        if (this._skeletonPoseDirty)\n            this.updateSkeletonPose(skeleton);\n        return this._skeletonPose;\n    };\n    /**\n     * @inheritDoc\n     */\n    SkeletonClipState.prototype._pUpdateTime = function (time) {\n        this._skeletonPoseDirty = true;\n        _super.prototype._pUpdateTime.call(this, time);\n    };\n    /**\n     * @inheritDoc\n     */\n    SkeletonClipState.prototype._pUpdateFrames = function () {\n        _super.prototype._pUpdateFrames.call(this);\n        this._currentPose = this._frames[this._pCurrentFrame];\n        if (this._skeletonClipNode.looping && this._pNextFrame >= this._skeletonClipNode.lastFrame) {\n            this._nextPose = this._frames[0];\n            this._pAnimator.dispatchCycleEvent();\n        }\n        else\n            this._nextPose = this._frames[this._pNextFrame];\n    };\n    /**\n     * Updates the output skeleton pose of the node based on the internal playhead position.\n     *\n     * @param skeleton The skeleton used by the animator requesting the ouput pose.\n     */\n    SkeletonClipState.prototype.updateSkeletonPose = function (skeleton) {\n        this._skeletonPoseDirty = false;\n        if (!this._skeletonClipNode.totalDuration)\n            return;\n        if (this._pFramesDirty)\n            this._pUpdateFrames();\n        var currentPose = this._currentPose.jointPoses;\n        var nextPose = this._nextPose.jointPoses;\n        var numJoints = skeleton.numJoints;\n        var p1, p2;\n        var pose1, pose2;\n        var endPoses = this._skeletonPose.jointPoses;\n        var endPose;\n        var tr;\n        // :s\n        if (endPoses.length != numJoints)\n            endPoses.length = numJoints;\n        if ((numJoints != currentPose.length) || (numJoints != nextPose.length))\n            throw new Error(\"joint counts don't match!\");\n        for (var i = 0; i < numJoints; ++i) {\n            endPose = endPoses[i];\n            if (endPose == null)\n                endPose = endPoses[i] = new JointPose_1.JointPose();\n            pose1 = currentPose[i];\n            pose2 = nextPose[i];\n            p1 = pose1.translation;\n            p2 = pose2.translation;\n            if (this._skeletonClipNode.highQuality)\n                endPose.orientation.slerp(pose1.orientation, pose2.orientation, this._pBlendWeight);\n            else\n                endPose.orientation.lerp(pose1.orientation, pose2.orientation, this._pBlendWeight);\n            if (i > 0) {\n                tr = endPose.translation;\n                tr.x = p1.x + this._pBlendWeight * (p2.x - p1.x);\n                tr.y = p1.y + this._pBlendWeight * (p2.y - p1.y);\n                tr.z = p1.z + this._pBlendWeight * (p2.z - p1.z);\n            }\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    SkeletonClipState.prototype._pUpdatePositionDelta = function () {\n        this._pPositionDeltaDirty = false;\n        if (this._pFramesDirty)\n            this._pUpdateFrames();\n        var p1, p2, p3;\n        var totalDelta = this._skeletonClipNode.totalDelta;\n        // jumping back, need to reset position\n        if ((this._pTimeDir > 0 && this._pNextFrame < this._pOldFrame) || (this._pTimeDir < 0 && this._pNextFrame > this._pOldFrame)) {\n            this._rootPos.x -= totalDelta.x * this._pTimeDir;\n            this._rootPos.y -= totalDelta.y * this._pTimeDir;\n            this._rootPos.z -= totalDelta.z * this._pTimeDir;\n        }\n        var dx = this._rootPos.x;\n        var dy = this._rootPos.y;\n        var dz = this._rootPos.z;\n        if (this._skeletonClipNode.stitchFinalFrame && this._pNextFrame == this._skeletonClipNode.lastFrame) {\n            p1 = this._frames[0].jointPoses[0].translation;\n            p2 = this._frames[1].jointPoses[0].translation;\n            p3 = this._currentPose.jointPoses[0].translation;\n            this._rootPos.x = p3.x + p1.x + this._pBlendWeight * (p2.x - p1.x);\n            this._rootPos.y = p3.y + p1.y + this._pBlendWeight * (p2.y - p1.y);\n            this._rootPos.z = p3.z + p1.z + this._pBlendWeight * (p2.z - p1.z);\n        }\n        else {\n            p1 = this._currentPose.jointPoses[0].translation;\n            p2 = this._frames[this._pNextFrame].jointPoses[0].translation; //cover the instances where we wrap the pose but still want the final frame translation values\n            this._rootPos.x = p1.x + this._pBlendWeight * (p2.x - p1.x);\n            this._rootPos.y = p1.y + this._pBlendWeight * (p2.y - p1.y);\n            this._rootPos.z = p1.z + this._pBlendWeight * (p2.z - p1.z);\n        }\n        this._pRootDelta.x = this._rootPos.x - dx;\n        this._pRootDelta.y = this._rootPos.y - dy;\n        this._pRootDelta.z = this._rootPos.z - dz;\n        this._pOldFrame = this._pNextFrame;\n    };\n    return SkeletonClipState;\n}(AnimationClipState_1.AnimationClipState));\nexports.SkeletonClipState = SkeletonClipState;\n\n},{\"../../animators/data/JointPose\":\"awayjs-renderergl/lib/animators/data/JointPose\",\"../../animators/data/SkeletonPose\":\"awayjs-renderergl/lib/animators/data/SkeletonPose\",\"../../animators/states/AnimationClipState\":\"awayjs-renderergl/lib/animators/states/AnimationClipState\",\"awayjs-core/lib/geom/Vector3D\":undefined}],\"awayjs-renderergl/lib/animators/states/SkeletonDifferenceState\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Quaternion_1 = require(\"awayjs-core/lib/geom/Quaternion\");\nvar JointPose_1 = require(\"../../animators/data/JointPose\");\nvar SkeletonPose_1 = require(\"../../animators/data/SkeletonPose\");\nvar AnimationStateBase_1 = require(\"../../animators/states/AnimationStateBase\");\n/**\n *\n */\nvar SkeletonDifferenceState = (function (_super) {\n    __extends(SkeletonDifferenceState, _super);\n    function SkeletonDifferenceState(animator, skeletonAnimationNode) {\n        _super.call(this, animator, skeletonAnimationNode);\n        this._blendWeight = 0;\n        this._skeletonPose = new SkeletonPose_1.SkeletonPose();\n        this._skeletonPoseDirty = true;\n        this._skeletonAnimationNode = skeletonAnimationNode;\n        this._baseInput = animator.getAnimationState(this._skeletonAnimationNode.baseInput);\n        this._differenceInput = animator.getAnimationState(this._skeletonAnimationNode.differenceInput);\n    }\n    Object.defineProperty(SkeletonDifferenceState.prototype, \"blendWeight\", {\n        /**\n         * Defines a fractional value between 0 and 1 representing the blending ratio between the base input (0) and difference input (1),\n         * used to produce the skeleton pose output.\n         *\n         * @see #baseInput\n         * @see #differenceInput\n         */\n        get: function () {\n            return this._blendWeight;\n        },\n        set: function (value) {\n            this._blendWeight = value;\n            this._pPositionDeltaDirty = true;\n            this._skeletonPoseDirty = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @inheritDoc\n     */\n    SkeletonDifferenceState.prototype.phase = function (value) {\n        this._skeletonPoseDirty = true;\n        this._pPositionDeltaDirty = true;\n        this._baseInput.phase(value);\n        this._baseInput.phase(value);\n    };\n    /**\n     * @inheritDoc\n     */\n    SkeletonDifferenceState.prototype._pUpdateTime = function (time) {\n        this._skeletonPoseDirty = true;\n        this._baseInput.update(time);\n        this._differenceInput.update(time);\n        _super.prototype._pUpdateTime.call(this, time);\n    };\n    /**\n     * Returns the current skeleton pose of the animation in the clip based on the internal playhead position.\n     */\n    SkeletonDifferenceState.prototype.getSkeletonPose = function (skeleton) {\n        if (this._skeletonPoseDirty)\n            this.updateSkeletonPose(skeleton);\n        return this._skeletonPose;\n    };\n    /**\n     * @inheritDoc\n     */\n    SkeletonDifferenceState.prototype._pUpdatePositionDelta = function () {\n        this._pPositionDeltaDirty = false;\n        var deltA = this._baseInput.positionDelta;\n        var deltB = this._differenceInput.positionDelta;\n        this.positionDelta.x = deltA.x + this._blendWeight * deltB.x;\n        this.positionDelta.y = deltA.y + this._blendWeight * deltB.y;\n        this.positionDelta.z = deltA.z + this._blendWeight * deltB.z;\n    };\n    /**\n     * Updates the output skeleton pose of the node based on the blendWeight value between base input and difference input nodes.\n     *\n     * @param skeleton The skeleton used by the animator requesting the ouput pose.\n     */\n    SkeletonDifferenceState.prototype.updateSkeletonPose = function (skeleton) {\n        this._skeletonPoseDirty = false;\n        var endPose;\n        var endPoses = this._skeletonPose.jointPoses;\n        var basePoses = this._baseInput.getSkeletonPose(skeleton).jointPoses;\n        var diffPoses = this._differenceInput.getSkeletonPose(skeleton).jointPoses;\n        var base, diff;\n        var basePos, diffPos;\n        var tr;\n        var numJoints = skeleton.numJoints;\n        // :s\n        if (endPoses.length != numJoints)\n            endPoses.length = numJoints;\n        for (var i = 0; i < numJoints; ++i) {\n            endPose = endPoses[i];\n            if (endPose == null)\n                endPose = endPoses[i] = new JointPose_1.JointPose();\n            base = basePoses[i];\n            diff = diffPoses[i];\n            basePos = base.translation;\n            diffPos = diff.translation;\n            SkeletonDifferenceState._tempQuat.multiply(diff.orientation, base.orientation);\n            endPose.orientation.lerp(base.orientation, SkeletonDifferenceState._tempQuat, this._blendWeight);\n            tr = endPose.translation;\n            tr.x = basePos.x + this._blendWeight * diffPos.x;\n            tr.y = basePos.y + this._blendWeight * diffPos.y;\n            tr.z = basePos.z + this._blendWeight * diffPos.z;\n        }\n    };\n    SkeletonDifferenceState._tempQuat = new Quaternion_1.Quaternion();\n    return SkeletonDifferenceState;\n}(AnimationStateBase_1.AnimationStateBase));\nexports.SkeletonDifferenceState = SkeletonDifferenceState;\n\n},{\"../../animators/data/JointPose\":\"awayjs-renderergl/lib/animators/data/JointPose\",\"../../animators/data/SkeletonPose\":\"awayjs-renderergl/lib/animators/data/SkeletonPose\",\"../../animators/states/AnimationStateBase\":\"awayjs-renderergl/lib/animators/states/AnimationStateBase\",\"awayjs-core/lib/geom/Quaternion\":undefined}],\"awayjs-renderergl/lib/animators/states/SkeletonDirectionalState\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar JointPose_1 = require(\"../../animators/data/JointPose\");\nvar SkeletonPose_1 = require(\"../../animators/data/SkeletonPose\");\nvar AnimationStateBase_1 = require(\"../../animators/states/AnimationStateBase\");\n/**\n *\n */\nvar SkeletonDirectionalState = (function (_super) {\n    __extends(SkeletonDirectionalState, _super);\n    function SkeletonDirectionalState(animator, skeletonAnimationNode) {\n        _super.call(this, animator, skeletonAnimationNode);\n        this._skeletonPose = new SkeletonPose_1.SkeletonPose();\n        this._skeletonPoseDirty = true;\n        this._blendWeight = 0;\n        this._direction = 0;\n        this._blendDirty = true;\n        this._skeletonAnimationNode = skeletonAnimationNode;\n        this._forward = animator.getAnimationState(this._skeletonAnimationNode.forward);\n        this._backward = animator.getAnimationState(this._skeletonAnimationNode.backward);\n        this._left = animator.getAnimationState(this._skeletonAnimationNode.left);\n        this._right = animator.getAnimationState(this._skeletonAnimationNode.right);\n    }\n    Object.defineProperty(SkeletonDirectionalState.prototype, \"direction\", {\n        get: function () {\n            return this._direction;\n        },\n        /**\n         * Defines the direction in degrees of the aniamtion between the forwards (0), right(90) backwards (180) and left(270) input nodes,\n         * used to produce the skeleton pose output.\n         */\n        set: function (value) {\n            if (this._direction == value)\n                return;\n            this._direction = value;\n            this._blendDirty = true;\n            this._skeletonPoseDirty = true;\n            this._pPositionDeltaDirty = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @inheritDoc\n     */\n    SkeletonDirectionalState.prototype.phase = function (value) {\n        if (this._blendDirty)\n            this.updateBlend();\n        this._skeletonPoseDirty = true;\n        this._pPositionDeltaDirty = true;\n        this._inputA.phase(value);\n        this._inputB.phase(value);\n    };\n    /**\n     * @inheritDoc\n     */\n    SkeletonDirectionalState.prototype._pUdateTime = function (time) {\n        if (this._blendDirty)\n            this.updateBlend();\n        this._skeletonPoseDirty = true;\n        this._inputA.update(time);\n        this._inputB.update(time);\n        _super.prototype._pUpdateTime.call(this, time);\n    };\n    /**\n     * Returns the current skeleton pose of the animation in the clip based on the internal playhead position.\n     */\n    SkeletonDirectionalState.prototype.getSkeletonPose = function (skeleton) {\n        if (this._skeletonPoseDirty)\n            this.updateSkeletonPose(skeleton);\n        return this._skeletonPose;\n    };\n    /**\n     * @inheritDoc\n     */\n    SkeletonDirectionalState.prototype._pUpdatePositionDelta = function () {\n        this._pPositionDeltaDirty = false;\n        if (this._blendDirty)\n            this.updateBlend();\n        var deltA = this._inputA.positionDelta;\n        var deltB = this._inputB.positionDelta;\n        this.positionDelta.x = deltA.x + this._blendWeight * (deltB.x - deltA.x);\n        this.positionDelta.y = deltA.y + this._blendWeight * (deltB.y - deltA.y);\n        this.positionDelta.z = deltA.z + this._blendWeight * (deltB.z - deltA.z);\n    };\n    /**\n     * Updates the output skeleton pose of the node based on the direction value between forward, backwards, left and right input nodes.\n     *\n     * @param skeleton The skeleton used by the animator requesting the ouput pose.\n     */\n    SkeletonDirectionalState.prototype.updateSkeletonPose = function (skeleton) {\n        this._skeletonPoseDirty = false;\n        if (this._blendDirty)\n            this.updateBlend();\n        var endPose;\n        var endPoses = this._skeletonPose.jointPoses;\n        var poses1 = this._inputA.getSkeletonPose(skeleton).jointPoses;\n        var poses2 = this._inputB.getSkeletonPose(skeleton).jointPoses;\n        var pose1, pose2;\n        var p1, p2;\n        var tr;\n        var numJoints = skeleton.numJoints;\n        // :s\n        if (endPoses.length != numJoints)\n            endPoses.length = numJoints;\n        for (var i = 0; i < numJoints; ++i) {\n            endPose = endPoses[i];\n            if (endPose == null)\n                endPose = endPoses[i] = new JointPose_1.JointPose();\n            pose1 = poses1[i];\n            pose2 = poses2[i];\n            p1 = pose1.translation;\n            p2 = pose2.translation;\n            endPose.orientation.lerp(pose1.orientation, pose2.orientation, this._blendWeight);\n            tr = endPose.translation;\n            tr.x = p1.x + this._blendWeight * (p2.x - p1.x);\n            tr.y = p1.y + this._blendWeight * (p2.y - p1.y);\n            tr.z = p1.z + this._blendWeight * (p2.z - p1.z);\n        }\n    };\n    /**\n     * Updates the blend value for the animation output based on the direction value between forward, backwards, left and right input nodes.\n     *\n     * @private\n     */\n    SkeletonDirectionalState.prototype.updateBlend = function () {\n        this._blendDirty = false;\n        if (this._direction < 0 || this._direction > 360) {\n            this._direction %= 360;\n            if (this._direction < 0)\n                this._direction += 360;\n        }\n        if (this._direction < 90) {\n            this._inputA = this._forward;\n            this._inputB = this._right;\n            this._blendWeight = this._direction / 90;\n        }\n        else if (this._direction < 180) {\n            this._inputA = this._right;\n            this._inputB = this._backward;\n            this._blendWeight = (this._direction - 90) / 90;\n        }\n        else if (this._direction < 270) {\n            this._inputA = this._backward;\n            this._inputB = this._left;\n            this._blendWeight = (this._direction - 180) / 90;\n        }\n        else {\n            this._inputA = this._left;\n            this._inputB = this._forward;\n            this._blendWeight = (this._direction - 270) / 90;\n        }\n    };\n    return SkeletonDirectionalState;\n}(AnimationStateBase_1.AnimationStateBase));\nexports.SkeletonDirectionalState = SkeletonDirectionalState;\n\n},{\"../../animators/data/JointPose\":\"awayjs-renderergl/lib/animators/data/JointPose\",\"../../animators/data/SkeletonPose\":\"awayjs-renderergl/lib/animators/data/SkeletonPose\",\"../../animators/states/AnimationStateBase\":\"awayjs-renderergl/lib/animators/states/AnimationStateBase\"}],\"awayjs-renderergl/lib/animators/states/SkeletonNaryLERPState\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar JointPose_1 = require(\"../../animators/data/JointPose\");\nvar SkeletonPose_1 = require(\"../../animators/data/SkeletonPose\");\nvar AnimationStateBase_1 = require(\"../../animators/states/AnimationStateBase\");\n/**\n *\n */\nvar SkeletonNaryLERPState = (function (_super) {\n    __extends(SkeletonNaryLERPState, _super);\n    function SkeletonNaryLERPState(animator, skeletonAnimationNode) {\n        _super.call(this, animator, skeletonAnimationNode);\n        this._skeletonPose = new SkeletonPose_1.SkeletonPose();\n        this._skeletonPoseDirty = true;\n        this._blendWeights = new Array();\n        this._inputs = new Array();\n        this._skeletonAnimationNode = skeletonAnimationNode;\n        var i = this._skeletonAnimationNode.numInputs;\n        while (i--)\n            this._inputs[i] = animator.getAnimationState(this._skeletonAnimationNode._iInputs[i]);\n    }\n    /**\n     * @inheritDoc\n     */\n    SkeletonNaryLERPState.prototype.phase = function (value) {\n        this._skeletonPoseDirty = true;\n        this._pPositionDeltaDirty = true;\n        for (var j = 0; j < this._skeletonAnimationNode.numInputs; ++j) {\n            if (this._blendWeights[j])\n                this._inputs[j].update(value);\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    SkeletonNaryLERPState.prototype._pUdateTime = function (time) {\n        for (var j = 0; j < this._skeletonAnimationNode.numInputs; ++j) {\n            if (this._blendWeights[j])\n                this._inputs[j].update(time);\n        }\n        _super.prototype._pUpdateTime.call(this, time);\n    };\n    /**\n     * Returns the current skeleton pose of the animation in the clip based on the internal playhead position.\n     */\n    SkeletonNaryLERPState.prototype.getSkeletonPose = function (skeleton) {\n        if (this._skeletonPoseDirty)\n            this.updateSkeletonPose(skeleton);\n        return this._skeletonPose;\n    };\n    /**\n     * Returns the blend weight of the skeleton aniamtion node that resides at the given input index.\n     *\n     * @param index The input index for which the skeleton animation node blend weight is requested.\n     */\n    SkeletonNaryLERPState.prototype.getBlendWeightAt = function (index) {\n        return this._blendWeights[index];\n    };\n    /**\n     * Sets the blend weight of the skeleton aniamtion node that resides at the given input index.\n     *\n     * @param index The input index on which the skeleton animation node blend weight is to be set.\n     * @param blendWeight The blend weight value to use for the given skeleton animation node index.\n     */\n    SkeletonNaryLERPState.prototype.setBlendWeightAt = function (index, blendWeight) {\n        this._blendWeights[index] = blendWeight;\n        this._pPositionDeltaDirty = true;\n        this._skeletonPoseDirty = true;\n    };\n    /**\n     * @inheritDoc\n     */\n    SkeletonNaryLERPState.prototype._pUpdatePositionDelta = function () {\n        this._pPositionDeltaDirty = false;\n        var delta;\n        var weight;\n        this.positionDelta.x = 0;\n        this.positionDelta.y = 0;\n        this.positionDelta.z = 0;\n        for (var j = 0; j < this._skeletonAnimationNode.numInputs; ++j) {\n            weight = this._blendWeights[j];\n            if (weight) {\n                delta = this._inputs[j].positionDelta;\n                this.positionDelta.x += weight * delta.x;\n                this.positionDelta.y += weight * delta.y;\n                this.positionDelta.z += weight * delta.z;\n            }\n        }\n    };\n    /**\n     * Updates the output skeleton pose of the node based on the blend weight values given to the input nodes.\n     *\n     * @param skeleton The skeleton used by the animator requesting the ouput pose.\n     */\n    SkeletonNaryLERPState.prototype.updateSkeletonPose = function (skeleton) {\n        this._skeletonPoseDirty = false;\n        var weight;\n        var endPoses = this._skeletonPose.jointPoses;\n        var poses;\n        var endPose, pose;\n        var endTr, tr;\n        var endQuat, q;\n        var firstPose;\n        var i;\n        var w0, x0, y0, z0;\n        var w1, x1, y1, z1;\n        var numJoints = skeleton.numJoints;\n        // :s\n        if (endPoses.length != numJoints)\n            endPoses.length = numJoints;\n        for (var j = 0; j < this._skeletonAnimationNode.numInputs; ++j) {\n            weight = this._blendWeights[j];\n            if (!weight)\n                continue;\n            poses = this._inputs[j].getSkeletonPose(skeleton).jointPoses;\n            if (!firstPose) {\n                firstPose = poses;\n                for (i = 0; i < numJoints; ++i) {\n                    endPose = endPoses[i];\n                    if (endPose == null)\n                        endPose = endPoses[i] = new JointPose_1.JointPose();\n                    pose = poses[i];\n                    q = pose.orientation;\n                    tr = pose.translation;\n                    endQuat = endPose.orientation;\n                    endQuat.x = weight * q.x;\n                    endQuat.y = weight * q.y;\n                    endQuat.z = weight * q.z;\n                    endQuat.w = weight * q.w;\n                    endTr = endPose.translation;\n                    endTr.x = weight * tr.x;\n                    endTr.y = weight * tr.y;\n                    endTr.z = weight * tr.z;\n                }\n            }\n            else {\n                for (i = 0; i < skeleton.numJoints; ++i) {\n                    endPose = endPoses[i];\n                    pose = poses[i];\n                    q = firstPose[i].orientation;\n                    x0 = q.x;\n                    y0 = q.y;\n                    z0 = q.z;\n                    w0 = q.w;\n                    q = pose.orientation;\n                    tr = pose.translation;\n                    x1 = q.x;\n                    y1 = q.y;\n                    z1 = q.z;\n                    w1 = q.w;\n                    // find shortest direction\n                    if (x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1 < 0) {\n                        x1 = -x1;\n                        y1 = -y1;\n                        z1 = -z1;\n                        w1 = -w1;\n                    }\n                    endQuat = endPose.orientation;\n                    endQuat.x += weight * x1;\n                    endQuat.y += weight * y1;\n                    endQuat.z += weight * z1;\n                    endQuat.w += weight * w1;\n                    endTr = endPose.translation;\n                    endTr.x += weight * tr.x;\n                    endTr.y += weight * tr.y;\n                    endTr.z += weight * tr.z;\n                }\n            }\n        }\n        for (i = 0; i < skeleton.numJoints; ++i)\n            endPoses[i].orientation.normalize();\n    };\n    return SkeletonNaryLERPState;\n}(AnimationStateBase_1.AnimationStateBase));\nexports.SkeletonNaryLERPState = SkeletonNaryLERPState;\n\n},{\"../../animators/data/JointPose\":\"awayjs-renderergl/lib/animators/data/JointPose\",\"../../animators/data/SkeletonPose\":\"awayjs-renderergl/lib/animators/data/SkeletonPose\",\"../../animators/states/AnimationStateBase\":\"awayjs-renderergl/lib/animators/states/AnimationStateBase\"}],\"awayjs-renderergl/lib/animators/states/VertexClipState\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AnimationClipState_1 = require(\"../../animators/states/AnimationClipState\");\n/**\n *\n */\nvar VertexClipState = (function (_super) {\n    __extends(VertexClipState, _super);\n    function VertexClipState(animator, vertexClipNode) {\n        _super.call(this, animator, vertexClipNode);\n        this._vertexClipNode = vertexClipNode;\n        this._frames = this._vertexClipNode.frames;\n    }\n    Object.defineProperty(VertexClipState.prototype, \"currentGraphics\", {\n        /**\n         * @inheritDoc\n         */\n        get: function () {\n            if (this._pFramesDirty)\n                this._pUpdateFrames();\n            return this._currentGraphics;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(VertexClipState.prototype, \"nextGraphics\", {\n        /**\n         * @inheritDoc\n         */\n        get: function () {\n            if (this._pFramesDirty)\n                this._pUpdateFrames();\n            return this._nextGraphics;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @inheritDoc\n     */\n    VertexClipState.prototype._pUpdateFrames = function () {\n        _super.prototype._pUpdateFrames.call(this);\n        this._currentGraphics = this._frames[this._pCurrentFrame];\n        if (this._vertexClipNode.looping && this._pNextFrame >= this._vertexClipNode.lastFrame) {\n            this._nextGraphics = this._frames[0];\n            this._pAnimator.dispatchCycleEvent();\n        }\n        else\n            this._nextGraphics = this._frames[this._pNextFrame];\n    };\n    /**\n     * @inheritDoc\n     */\n    VertexClipState.prototype._pUpdatePositionDelta = function () {\n        //TODO:implement positiondelta functionality for vertex animations\n    };\n    return VertexClipState;\n}(AnimationClipState_1.AnimationClipState));\nexports.VertexClipState = VertexClipState;\n\n},{\"../../animators/states/AnimationClipState\":\"awayjs-renderergl/lib/animators/states/AnimationClipState\"}],\"awayjs-renderergl/lib/animators/transitions/CrossfadeTransitionNode\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar SkeletonBinaryLERPNode_1 = require(\"../../animators/nodes/SkeletonBinaryLERPNode\");\nvar CrossfadeTransitionState_1 = require(\"../../animators/transitions/CrossfadeTransitionState\");\n/**\n * A skeleton animation node that uses two animation node inputs to blend a lineraly interpolated output of a skeleton pose.\n */\nvar CrossfadeTransitionNode = (function (_super) {\n    __extends(CrossfadeTransitionNode, _super);\n    /**\n     * Creates a new <code>CrossfadeTransitionNode</code> object.\n     */\n    function CrossfadeTransitionNode() {\n        _super.call(this);\n        this._pStateClass = CrossfadeTransitionState_1.CrossfadeTransitionState;\n    }\n    return CrossfadeTransitionNode;\n}(SkeletonBinaryLERPNode_1.SkeletonBinaryLERPNode));\nexports.CrossfadeTransitionNode = CrossfadeTransitionNode;\n\n},{\"../../animators/nodes/SkeletonBinaryLERPNode\":\"awayjs-renderergl/lib/animators/nodes/SkeletonBinaryLERPNode\",\"../../animators/transitions/CrossfadeTransitionState\":\"awayjs-renderergl/lib/animators/transitions/CrossfadeTransitionState\"}],\"awayjs-renderergl/lib/animators/transitions/CrossfadeTransitionState\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar SkeletonBinaryLERPState_1 = require(\"../../animators/states/SkeletonBinaryLERPState\");\nvar AnimationStateEvent_1 = require(\"../../animators/../events/AnimationStateEvent\");\n/**\n *\n */\nvar CrossfadeTransitionState = (function (_super) {\n    __extends(CrossfadeTransitionState, _super);\n    function CrossfadeTransitionState(animator, skeletonAnimationNode) {\n        _super.call(this, animator, skeletonAnimationNode);\n        this._crossfadeTransitionNode = skeletonAnimationNode;\n    }\n    /**\n     * @inheritDoc\n     */\n    CrossfadeTransitionState.prototype._pUpdateTime = function (time) {\n        this.blendWeight = Math.abs(time - this._crossfadeTransitionNode.startBlend) / (1000 * this._crossfadeTransitionNode.blendSpeed);\n        if (this.blendWeight >= 1) {\n            this.blendWeight = 1;\n            if (this._animationStateTransitionComplete == null)\n                this._animationStateTransitionComplete = new AnimationStateEvent_1.AnimationStateEvent(AnimationStateEvent_1.AnimationStateEvent.TRANSITION_COMPLETE, this._pAnimator, this, this._crossfadeTransitionNode);\n            this._crossfadeTransitionNode.dispatchEvent(this._animationStateTransitionComplete);\n        }\n        _super.prototype._pUpdateTime.call(this, time);\n    };\n    return CrossfadeTransitionState;\n}(SkeletonBinaryLERPState_1.SkeletonBinaryLERPState));\nexports.CrossfadeTransitionState = CrossfadeTransitionState;\n\n},{\"../../animators/../events/AnimationStateEvent\":\"awayjs-renderergl/lib/events/AnimationStateEvent\",\"../../animators/states/SkeletonBinaryLERPState\":\"awayjs-renderergl/lib/animators/states/SkeletonBinaryLERPState\"}],\"awayjs-renderergl/lib/animators/transitions/CrossfadeTransition\":[function(require,module,exports){\n\"use strict\";\nvar CrossfadeTransitionNode_1 = require(\"../../animators/transitions/CrossfadeTransitionNode\");\n/**\n *\n */\nvar CrossfadeTransition = (function () {\n    function CrossfadeTransition(blendSpeed) {\n        this.blendSpeed = 0.5;\n        this.blendSpeed = blendSpeed;\n    }\n    CrossfadeTransition.prototype.getAnimationNode = function (animator, startNode, endNode, startBlend) {\n        var crossFadeTransitionNode = new CrossfadeTransitionNode_1.CrossfadeTransitionNode();\n        crossFadeTransitionNode.inputA = startNode;\n        crossFadeTransitionNode.inputB = endNode;\n        crossFadeTransitionNode.blendSpeed = this.blendSpeed;\n        crossFadeTransitionNode.startBlend = startBlend;\n        return crossFadeTransitionNode;\n    };\n    return CrossfadeTransition;\n}());\nexports.CrossfadeTransition = CrossfadeTransition;\n\n},{\"../../animators/transitions/CrossfadeTransitionNode\":\"awayjs-renderergl/lib/animators/transitions/CrossfadeTransitionNode\"}],\"awayjs-renderergl/lib/animators/transitions/IAnimationTransition\":[function(require,module,exports){\n\"use strict\";\n\n},{}],\"awayjs-renderergl/lib/animators\":[function(require,module,exports){\n\"use strict\";\nvar AnimationElements_1 = require(\"./animators/data/AnimationElements\");\nexports.AnimationElements = AnimationElements_1.AnimationElements;\nvar AnimationRegisterData_1 = require(\"./animators/data/AnimationRegisterData\");\nexports.AnimationRegisterData = AnimationRegisterData_1.AnimationRegisterData;\nvar ColorSegmentPoint_1 = require(\"./animators/data/ColorSegmentPoint\");\nexports.ColorSegmentPoint = ColorSegmentPoint_1.ColorSegmentPoint;\nvar JointPose_1 = require(\"./animators/data/JointPose\");\nexports.JointPose = JointPose_1.JointPose;\nvar ParticleAnimationData_1 = require(\"./animators/data/ParticleAnimationData\");\nexports.ParticleAnimationData = ParticleAnimationData_1.ParticleAnimationData;\nvar ParticleProperties_1 = require(\"./animators/data/ParticleProperties\");\nexports.ParticleProperties = ParticleProperties_1.ParticleProperties;\nvar ParticlePropertiesMode_1 = require(\"./animators/data/ParticlePropertiesMode\");\nexports.ParticlePropertiesMode = ParticlePropertiesMode_1.ParticlePropertiesMode;\nvar Skeleton_1 = require(\"./animators/data/Skeleton\");\nexports.Skeleton = Skeleton_1.Skeleton;\nvar SkeletonJoint_1 = require(\"./animators/data/SkeletonJoint\");\nexports.SkeletonJoint = SkeletonJoint_1.SkeletonJoint;\nvar SkeletonPose_1 = require(\"./animators/data/SkeletonPose\");\nexports.SkeletonPose = SkeletonPose_1.SkeletonPose;\nvar VertexAnimationMode_1 = require(\"./animators/data/VertexAnimationMode\");\nexports.VertexAnimationMode = VertexAnimationMode_1.VertexAnimationMode;\nvar AnimationClipNodeBase_1 = require(\"./animators/nodes/AnimationClipNodeBase\");\nexports.AnimationClipNodeBase = AnimationClipNodeBase_1.AnimationClipNodeBase;\nvar ParticleAccelerationNode_1 = require(\"./animators/nodes/ParticleAccelerationNode\");\nexports.ParticleAccelerationNode = ParticleAccelerationNode_1.ParticleAccelerationNode;\nvar ParticleBezierCurveNode_1 = require(\"./animators/nodes/ParticleBezierCurveNode\");\nexports.ParticleBezierCurveNode = ParticleBezierCurveNode_1.ParticleBezierCurveNode;\nvar ParticleBillboardNode_1 = require(\"./animators/nodes/ParticleBillboardNode\");\nexports.ParticleBillboardNode = ParticleBillboardNode_1.ParticleBillboardNode;\nvar ParticleColorNode_1 = require(\"./animators/nodes/ParticleColorNode\");\nexports.ParticleColorNode = ParticleColorNode_1.ParticleColorNode;\nvar ParticleFollowNode_1 = require(\"./animators/nodes/ParticleFollowNode\");\nexports.ParticleFollowNode = ParticleFollowNode_1.ParticleFollowNode;\nvar ParticleInitialColorNode_1 = require(\"./animators/nodes/ParticleInitialColorNode\");\nexports.ParticleInitialColorNode = ParticleInitialColorNode_1.ParticleInitialColorNode;\nvar ParticleNodeBase_1 = require(\"./animators/nodes/ParticleNodeBase\");\nexports.ParticleNodeBase = ParticleNodeBase_1.ParticleNodeBase;\nvar ParticleOrbitNode_1 = require(\"./animators/nodes/ParticleOrbitNode\");\nexports.ParticleOrbitNode = ParticleOrbitNode_1.ParticleOrbitNode;\nvar ParticleOscillatorNode_1 = require(\"./animators/nodes/ParticleOscillatorNode\");\nexports.ParticleOscillatorNode = ParticleOscillatorNode_1.ParticleOscillatorNode;\nvar ParticlePositionNode_1 = require(\"./animators/nodes/ParticlePositionNode\");\nexports.ParticlePositionNode = ParticlePositionNode_1.ParticlePositionNode;\nvar ParticleRotateToHeadingNode_1 = require(\"./animators/nodes/ParticleRotateToHeadingNode\");\nexports.ParticleRotateToHeadingNode = ParticleRotateToHeadingNode_1.ParticleRotateToHeadingNode;\nvar ParticleRotateToPositionNode_1 = require(\"./animators/nodes/ParticleRotateToPositionNode\");\nexports.ParticleRotateToPositionNode = ParticleRotateToPositionNode_1.ParticleRotateToPositionNode;\nvar ParticleRotationalVelocityNode_1 = require(\"./animators/nodes/ParticleRotationalVelocityNode\");\nexports.ParticleRotationalVelocityNode = ParticleRotationalVelocityNode_1.ParticleRotationalVelocityNode;\nvar ParticleScaleNode_1 = require(\"./animators/nodes/ParticleScaleNode\");\nexports.ParticleScaleNode = ParticleScaleNode_1.ParticleScaleNode;\nvar ParticleSegmentedColorNode_1 = require(\"./animators/nodes/ParticleSegmentedColorNode\");\nexports.ParticleSegmentedColorNode = ParticleSegmentedColorNode_1.ParticleSegmentedColorNode;\nvar ParticleSpriteSheetNode_1 = require(\"./animators/nodes/ParticleSpriteSheetNode\");\nexports.ParticleSpriteSheetNode = ParticleSpriteSheetNode_1.ParticleSpriteSheetNode;\nvar ParticleTimeNode_1 = require(\"./animators/nodes/ParticleTimeNode\");\nexports.ParticleTimeNode = ParticleTimeNode_1.ParticleTimeNode;\nvar ParticleUVNode_1 = require(\"./animators/nodes/ParticleUVNode\");\nexports.ParticleUVNode = ParticleUVNode_1.ParticleUVNode;\nvar ParticleVelocityNode_1 = require(\"./animators/nodes/ParticleVelocityNode\");\nexports.ParticleVelocityNode = ParticleVelocityNode_1.ParticleVelocityNode;\nvar SkeletonBinaryLERPNode_1 = require(\"./animators/nodes/SkeletonBinaryLERPNode\");\nexports.SkeletonBinaryLERPNode = SkeletonBinaryLERPNode_1.SkeletonBinaryLERPNode;\nvar SkeletonClipNode_1 = require(\"./animators/nodes/SkeletonClipNode\");\nexports.SkeletonClipNode = SkeletonClipNode_1.SkeletonClipNode;\nvar SkeletonDifferenceNode_1 = require(\"./animators/nodes/SkeletonDifferenceNode\");\nexports.SkeletonDifferenceNode = SkeletonDifferenceNode_1.SkeletonDifferenceNode;\nvar SkeletonDirectionalNode_1 = require(\"./animators/nodes/SkeletonDirectionalNode\");\nexports.SkeletonDirectionalNode = SkeletonDirectionalNode_1.SkeletonDirectionalNode;\nvar SkeletonNaryLERPNode_1 = require(\"./animators/nodes/SkeletonNaryLERPNode\");\nexports.SkeletonNaryLERPNode = SkeletonNaryLERPNode_1.SkeletonNaryLERPNode;\nvar VertexClipNode_1 = require(\"./animators/nodes/VertexClipNode\");\nexports.VertexClipNode = VertexClipNode_1.VertexClipNode;\nvar AnimationClipState_1 = require(\"./animators/states/AnimationClipState\");\nexports.AnimationClipState = AnimationClipState_1.AnimationClipState;\nvar AnimationStateBase_1 = require(\"./animators/states/AnimationStateBase\");\nexports.AnimationStateBase = AnimationStateBase_1.AnimationStateBase;\nvar ParticleAccelerationState_1 = require(\"./animators/states/ParticleAccelerationState\");\nexports.ParticleAccelerationState = ParticleAccelerationState_1.ParticleAccelerationState;\nvar ParticleBezierCurveState_1 = require(\"./animators/states/ParticleBezierCurveState\");\nexports.ParticleBezierCurveState = ParticleBezierCurveState_1.ParticleBezierCurveState;\nvar ParticleBillboardState_1 = require(\"./animators/states/ParticleBillboardState\");\nexports.ParticleBillboardState = ParticleBillboardState_1.ParticleBillboardState;\nvar ParticleColorState_1 = require(\"./animators/states/ParticleColorState\");\nexports.ParticleColorState = ParticleColorState_1.ParticleColorState;\nvar ParticleFollowState_1 = require(\"./animators/states/ParticleFollowState\");\nexports.ParticleFollowState = ParticleFollowState_1.ParticleFollowState;\nvar ParticleInitialColorState_1 = require(\"./animators/states/ParticleInitialColorState\");\nexports.ParticleInitialColorState = ParticleInitialColorState_1.ParticleInitialColorState;\nvar ParticleStateBase_1 = require(\"./animators/states/ParticleStateBase\");\nexports.ParticleStateBase = ParticleStateBase_1.ParticleStateBase;\nvar ParticleOrbitState_1 = require(\"./animators/states/ParticleOrbitState\");\nexports.ParticleOrbitState = ParticleOrbitState_1.ParticleOrbitState;\nvar ParticleOscillatorState_1 = require(\"./animators/states/ParticleOscillatorState\");\nexports.ParticleOscillatorState = ParticleOscillatorState_1.ParticleOscillatorState;\nvar ParticlePositionState_1 = require(\"./animators/states/ParticlePositionState\");\nexports.ParticlePositionState = ParticlePositionState_1.ParticlePositionState;\nvar ParticleRotateToHeadingState_1 = require(\"./animators/states/ParticleRotateToHeadingState\");\nexports.ParticleRotateToHeadingState = ParticleRotateToHeadingState_1.ParticleRotateToHeadingState;\nvar ParticleRotateToPositionState_1 = require(\"./animators/states/ParticleRotateToPositionState\");\nexports.ParticleRotateToPositionState = ParticleRotateToPositionState_1.ParticleRotateToPositionState;\nvar ParticleRotationalVelocityState_1 = require(\"./animators/states/ParticleRotationalVelocityState\");\nexports.ParticleRotationalVelocityState = ParticleRotationalVelocityState_1.ParticleRotationalVelocityState;\nvar ParticleScaleState_1 = require(\"./animators/states/ParticleScaleState\");\nexports.ParticleScaleState = ParticleScaleState_1.ParticleScaleState;\nvar ParticleSegmentedColorState_1 = require(\"./animators/states/ParticleSegmentedColorState\");\nexports.ParticleSegmentedColorState = ParticleSegmentedColorState_1.ParticleSegmentedColorState;\nvar ParticleSpriteSheetState_1 = require(\"./animators/states/ParticleSpriteSheetState\");\nexports.ParticleSpriteSheetState = ParticleSpriteSheetState_1.ParticleSpriteSheetState;\nvar ParticleTimeState_1 = require(\"./animators/states/ParticleTimeState\");\nexports.ParticleTimeState = ParticleTimeState_1.ParticleTimeState;\nvar ParticleUVState_1 = require(\"./animators/states/ParticleUVState\");\nexports.ParticleUVState = ParticleUVState_1.ParticleUVState;\nvar ParticleVelocityState_1 = require(\"./animators/states/ParticleVelocityState\");\nexports.ParticleVelocityState = ParticleVelocityState_1.ParticleVelocityState;\nvar SkeletonBinaryLERPState_1 = require(\"./animators/states/SkeletonBinaryLERPState\");\nexports.SkeletonBinaryLERPState = SkeletonBinaryLERPState_1.SkeletonBinaryLERPState;\nvar SkeletonClipState_1 = require(\"./animators/states/SkeletonClipState\");\nexports.SkeletonClipState = SkeletonClipState_1.SkeletonClipState;\nvar SkeletonDifferenceState_1 = require(\"./animators/states/SkeletonDifferenceState\");\nexports.SkeletonDifferenceState = SkeletonDifferenceState_1.SkeletonDifferenceState;\nvar SkeletonDirectionalState_1 = require(\"./animators/states/SkeletonDirectionalState\");\nexports.SkeletonDirectionalState = SkeletonDirectionalState_1.SkeletonDirectionalState;\nvar SkeletonNaryLERPState_1 = require(\"./animators/states/SkeletonNaryLERPState\");\nexports.SkeletonNaryLERPState = SkeletonNaryLERPState_1.SkeletonNaryLERPState;\nvar VertexClipState_1 = require(\"./animators/states/VertexClipState\");\nexports.VertexClipState = VertexClipState_1.VertexClipState;\nvar CrossfadeTransition_1 = require(\"./animators/transitions/CrossfadeTransition\");\nexports.CrossfadeTransition = CrossfadeTransition_1.CrossfadeTransition;\nvar CrossfadeTransitionNode_1 = require(\"./animators/transitions/CrossfadeTransitionNode\");\nexports.CrossfadeTransitionNode = CrossfadeTransitionNode_1.CrossfadeTransitionNode;\nvar CrossfadeTransitionState_1 = require(\"./animators/transitions/CrossfadeTransitionState\");\nexports.CrossfadeTransitionState = CrossfadeTransitionState_1.CrossfadeTransitionState;\nvar AnimationSetBase_1 = require(\"./animators/AnimationSetBase\");\nexports.AnimationSetBase = AnimationSetBase_1.AnimationSetBase;\nvar AnimatorBase_1 = require(\"./animators/AnimatorBase\");\nexports.AnimatorBase = AnimatorBase_1.AnimatorBase;\nvar ParticleAnimationSet_1 = require(\"./animators/ParticleAnimationSet\");\nexports.ParticleAnimationSet = ParticleAnimationSet_1.ParticleAnimationSet;\nvar ParticleAnimator_1 = require(\"./animators/ParticleAnimator\");\nexports.ParticleAnimator = ParticleAnimator_1.ParticleAnimator;\nvar SkeletonAnimationSet_1 = require(\"./animators/SkeletonAnimationSet\");\nexports.SkeletonAnimationSet = SkeletonAnimationSet_1.SkeletonAnimationSet;\nvar SkeletonAnimator_1 = require(\"./animators/SkeletonAnimator\");\nexports.SkeletonAnimator = SkeletonAnimator_1.SkeletonAnimator;\nvar VertexAnimationSet_1 = require(\"./animators/VertexAnimationSet\");\nexports.VertexAnimationSet = VertexAnimationSet_1.VertexAnimationSet;\nvar VertexAnimator_1 = require(\"./animators/VertexAnimator\");\nexports.VertexAnimator = VertexAnimator_1.VertexAnimator;\n\n},{\"./animators/AnimationSetBase\":\"awayjs-renderergl/lib/animators/AnimationSetBase\",\"./animators/AnimatorBase\":\"awayjs-renderergl/lib/animators/AnimatorBase\",\"./animators/ParticleAnimationSet\":\"awayjs-renderergl/lib/animators/ParticleAnimationSet\",\"./animators/ParticleAnimator\":\"awayjs-renderergl/lib/animators/ParticleAnimator\",\"./animators/SkeletonAnimationSet\":\"awayjs-renderergl/lib/animators/SkeletonAnimationSet\",\"./animators/SkeletonAnimator\":\"awayjs-renderergl/lib/animators/SkeletonAnimator\",\"./animators/VertexAnimationSet\":\"awayjs-renderergl/lib/animators/VertexAnimationSet\",\"./animators/VertexAnimator\":\"awayjs-renderergl/lib/animators/VertexAnimator\",\"./animators/data/AnimationElements\":\"awayjs-renderergl/lib/animators/data/AnimationElements\",\"./animators/data/AnimationRegisterData\":\"awayjs-renderergl/lib/animators/data/AnimationRegisterData\",\"./animators/data/ColorSegmentPoint\":\"awayjs-renderergl/lib/animators/data/ColorSegmentPoint\",\"./animators/data/JointPose\":\"awayjs-renderergl/lib/animators/data/JointPose\",\"./animators/data/ParticleAnimationData\":\"awayjs-renderergl/lib/animators/data/ParticleAnimationData\",\"./animators/data/ParticleProperties\":\"awayjs-renderergl/lib/animators/data/ParticleProperties\",\"./animators/data/ParticlePropertiesMode\":\"awayjs-renderergl/lib/animators/data/ParticlePropertiesMode\",\"./animators/data/Skeleton\":\"awayjs-renderergl/lib/animators/data/Skeleton\",\"./animators/data/SkeletonJoint\":\"awayjs-renderergl/lib/animators/data/SkeletonJoint\",\"./animators/data/SkeletonPose\":\"awayjs-renderergl/lib/animators/data/SkeletonPose\",\"./animators/data/VertexAnimationMode\":\"awayjs-renderergl/lib/animators/data/VertexAnimationMode\",\"./animators/nodes/AnimationClipNodeBase\":\"awayjs-renderergl/lib/animators/nodes/AnimationClipNodeBase\",\"./animators/nodes/ParticleAccelerationNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleAccelerationNode\",\"./animators/nodes/ParticleBezierCurveNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleBezierCurveNode\",\"./animators/nodes/ParticleBillboardNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleBillboardNode\",\"./animators/nodes/ParticleColorNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleColorNode\",\"./animators/nodes/ParticleFollowNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleFollowNode\",\"./animators/nodes/ParticleInitialColorNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleInitialColorNode\",\"./animators/nodes/ParticleNodeBase\":\"awayjs-renderergl/lib/animators/nodes/ParticleNodeBase\",\"./animators/nodes/ParticleOrbitNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleOrbitNode\",\"./animators/nodes/ParticleOscillatorNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleOscillatorNode\",\"./animators/nodes/ParticlePositionNode\":\"awayjs-renderergl/lib/animators/nodes/ParticlePositionNode\",\"./animators/nodes/ParticleRotateToHeadingNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleRotateToHeadingNode\",\"./animators/nodes/ParticleRotateToPositionNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleRotateToPositionNode\",\"./animators/nodes/ParticleRotationalVelocityNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleRotationalVelocityNode\",\"./animators/nodes/ParticleScaleNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleScaleNode\",\"./animators/nodes/ParticleSegmentedColorNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleSegmentedColorNode\",\"./animators/nodes/ParticleSpriteSheetNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleSpriteSheetNode\",\"./animators/nodes/ParticleTimeNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleTimeNode\",\"./animators/nodes/ParticleUVNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleUVNode\",\"./animators/nodes/ParticleVelocityNode\":\"awayjs-renderergl/lib/animators/nodes/ParticleVelocityNode\",\"./animators/nodes/SkeletonBinaryLERPNode\":\"awayjs-renderergl/lib/animators/nodes/SkeletonBinaryLERPNode\",\"./animators/nodes/SkeletonClipNode\":\"awayjs-renderergl/lib/animators/nodes/SkeletonClipNode\",\"./animators/nodes/SkeletonDifferenceNode\":\"awayjs-renderergl/lib/animators/nodes/SkeletonDifferenceNode\",\"./animators/nodes/SkeletonDirectionalNode\":\"awayjs-renderergl/lib/animators/nodes/SkeletonDirectionalNode\",\"./animators/nodes/SkeletonNaryLERPNode\":\"awayjs-renderergl/lib/animators/nodes/SkeletonNaryLERPNode\",\"./animators/nodes/VertexClipNode\":\"awayjs-renderergl/lib/animators/nodes/VertexClipNode\",\"./animators/states/AnimationClipState\":\"awayjs-renderergl/lib/animators/states/AnimationClipState\",\"./animators/states/AnimationStateBase\":\"awayjs-renderergl/lib/animators/states/AnimationStateBase\",\"./animators/states/ParticleAccelerationState\":\"awayjs-renderergl/lib/animators/states/ParticleAccelerationState\",\"./animators/states/ParticleBezierCurveState\":\"awayjs-renderergl/lib/animators/states/ParticleBezierCurveState\",\"./animators/states/ParticleBillboardState\":\"awayjs-renderergl/lib/animators/states/ParticleBillboardState\",\"./animators/states/ParticleColorState\":\"awayjs-renderergl/lib/animators/states/ParticleColorState\",\"./animators/states/ParticleFollowState\":\"awayjs-renderergl/lib/animators/states/ParticleFollowState\",\"./animators/states/ParticleInitialColorState\":\"awayjs-renderergl/lib/animators/states/ParticleInitialColorState\",\"./animators/states/ParticleOrbitState\":\"awayjs-renderergl/lib/animators/states/ParticleOrbitState\",\"./animators/states/ParticleOscillatorState\":\"awayjs-renderergl/lib/animators/states/ParticleOscillatorState\",\"./animators/states/ParticlePositionState\":\"awayjs-renderergl/lib/animators/states/ParticlePositionState\",\"./animators/states/ParticleRotateToHeadingState\":\"awayjs-renderergl/lib/animators/states/ParticleRotateToHeadingState\",\"./animators/states/ParticleRotateToPositionState\":\"awayjs-renderergl/lib/animators/states/ParticleRotateToPositionState\",\"./animators/states/ParticleRotationalVelocityState\":\"awayjs-renderergl/lib/animators/states/ParticleRotationalVelocityState\",\"./animators/states/ParticleScaleState\":\"awayjs-renderergl/lib/animators/states/ParticleScaleState\",\"./animators/states/ParticleSegmentedColorState\":\"awayjs-renderergl/lib/animators/states/ParticleSegmentedColorState\",\"./animators/states/ParticleSpriteSheetState\":\"awayjs-renderergl/lib/animators/states/ParticleSpriteSheetState\",\"./animators/states/ParticleStateBase\":\"awayjs-renderergl/lib/animators/states/ParticleStateBase\",\"./animators/states/ParticleTimeState\":\"awayjs-renderergl/lib/animators/states/ParticleTimeState\",\"./animators/states/ParticleUVState\":\"awayjs-renderergl/lib/animators/states/ParticleUVState\",\"./animators/states/ParticleVelocityState\":\"awayjs-renderergl/lib/animators/states/ParticleVelocityState\",\"./animators/states/SkeletonBinaryLERPState\":\"awayjs-renderergl/lib/animators/states/SkeletonBinaryLERPState\",\"./animators/states/SkeletonClipState\":\"awayjs-renderergl/lib/animators/states/SkeletonClipState\",\"./animators/states/SkeletonDifferenceState\":\"awayjs-renderergl/lib/animators/states/SkeletonDifferenceState\",\"./animators/states/SkeletonDirectionalState\":\"awayjs-renderergl/lib/animators/states/SkeletonDirectionalState\",\"./animators/states/SkeletonNaryLERPState\":\"awayjs-renderergl/lib/animators/states/SkeletonNaryLERPState\",\"./animators/states/VertexClipState\":\"awayjs-renderergl/lib/animators/states/VertexClipState\",\"./animators/transitions/CrossfadeTransition\":\"awayjs-renderergl/lib/animators/transitions/CrossfadeTransition\",\"./animators/transitions/CrossfadeTransitionNode\":\"awayjs-renderergl/lib/animators/transitions/CrossfadeTransitionNode\",\"./animators/transitions/CrossfadeTransitionState\":\"awayjs-renderergl/lib/animators/transitions/CrossfadeTransitionState\"}],\"awayjs-renderergl/lib/elements/GL_ElementsBase\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AbstractionBase_1 = require(\"awayjs-core/lib/library/AbstractionBase\");\nvar AbstractMethodError_1 = require(\"awayjs-core/lib/errors/AbstractMethodError\");\nvar AssetEvent_1 = require(\"awayjs-core/lib/events/AssetEvent\");\nvar ElementsEvent_1 = require(\"awayjs-display/lib/events/ElementsEvent\");\nvar ElementsUtils_1 = require(\"awayjs-display/lib/utils/ElementsUtils\");\n/**\n *\n * @class away.pool.GL_ElementsBaseBase\n */\nvar GL_ElementsBase = (function (_super) {\n    __extends(GL_ElementsBase, _super);\n    function GL_ElementsBase(elements, stage) {\n        var _this = this;\n        _super.call(this, elements, stage);\n        this.usages = 0;\n        this._vertices = new Object();\n        this._verticesUpdated = new Object();\n        this._indexMappings = Array();\n        this._numIndices = 0;\n        this._elements = elements;\n        this._stage = stage;\n        this._onInvalidateIndicesDelegate = function (event) { return _this._onInvalidateIndices(event); };\n        this._onClearIndicesDelegate = function (event) { return _this._onClearIndices(event); };\n        this._onInvalidateVerticesDelegate = function (event) { return _this._onInvalidateVertices(event); };\n        this._onClearVerticesDelegate = function (event) { return _this._onClearVertices(event); };\n        this._elements.addEventListener(ElementsEvent_1.ElementsEvent.CLEAR_INDICES, this._onClearIndicesDelegate);\n        this._elements.addEventListener(ElementsEvent_1.ElementsEvent.INVALIDATE_INDICES, this._onInvalidateIndicesDelegate);\n        this._elements.addEventListener(ElementsEvent_1.ElementsEvent.CLEAR_VERTICES, this._onClearVerticesDelegate);\n        this._elements.addEventListener(ElementsEvent_1.ElementsEvent.INVALIDATE_VERTICES, this._onInvalidateVerticesDelegate);\n    }\n    Object.defineProperty(GL_ElementsBase.prototype, \"elementsType\", {\n        get: function () {\n            throw new AbstractMethodError_1.AbstractMethodError();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GL_ElementsBase.prototype, \"elementsClass\", {\n        get: function () {\n            throw new AbstractMethodError_1.AbstractMethodError();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GL_ElementsBase.prototype, \"elements\", {\n        get: function () {\n            return this._elements;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GL_ElementsBase.prototype, \"numIndices\", {\n        /**\n         *\n         */\n        get: function () {\n            return this._numIndices;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GL_ElementsBase.prototype, \"numVertices\", {\n        /**\n         *\n         */\n        get: function () {\n            return this._numVertices;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     *\n     */\n    GL_ElementsBase.prototype.getIndexMappings = function () {\n        if (!this._indicesUpdated)\n            this._updateIndices();\n        return this._indexMappings;\n    };\n    /**\n     *\n     */\n    GL_ElementsBase.prototype.getIndexBufferGL = function () {\n        if (!this._indicesUpdated)\n            this._updateIndices();\n        return this._indices;\n    };\n    /**\n     *\n     */\n    GL_ElementsBase.prototype.getVertexBufferGL = function (attributesView) {\n        //first check if indices need updating which may affect vertices\n        if (!this._indicesUpdated)\n            this._updateIndices();\n        var bufferId = attributesView.buffer.id;\n        if (!this._verticesUpdated[bufferId])\n            this._updateVertices(attributesView);\n        return this._vertices[bufferId];\n    };\n    /**\n     *\n     */\n    GL_ElementsBase.prototype.activateVertexBufferVO = function (index, attributesView, dimensions, offset) {\n        if (dimensions === void 0) { dimensions = 0; }\n        if (offset === void 0) { offset = 0; }\n        this.getVertexBufferGL(attributesView).activate(index, attributesView.size, dimensions || attributesView.dimensions, attributesView.offset + offset, attributesView.unsigned);\n    };\n    /**\n     *\n     */\n    GL_ElementsBase.prototype.onClear = function (event) {\n        _super.prototype.onClear.call(this, event);\n        this._elements.removeEventListener(ElementsEvent_1.ElementsEvent.CLEAR_INDICES, this._onClearIndicesDelegate);\n        this._elements.removeEventListener(ElementsEvent_1.ElementsEvent.INVALIDATE_INDICES, this._onInvalidateIndicesDelegate);\n        this._elements.removeEventListener(ElementsEvent_1.ElementsEvent.CLEAR_VERTICES, this._onClearVerticesDelegate);\n        this._elements.removeEventListener(ElementsEvent_1.ElementsEvent.INVALIDATE_VERTICES, this._onInvalidateVerticesDelegate);\n        this._elements = null;\n        if (this._overflow) {\n            this._overflow.onClear(event);\n            this._overflow = null;\n        }\n    };\n    GL_ElementsBase.prototype._setRenderState = function (renderable, shader, camera, viewProjection) {\n        if (!this._verticesUpdated)\n            this._updateIndices();\n        //TODO replace overflow system with something sensible\n        //this._render(renderable, camera, viewProjection);\n        //\n        // if (this._overflow)\n        // \tthis._overflow._iRender(renderable, camera, viewProjection);\n    };\n    GL_ElementsBase.prototype.draw = function (renderable, shader, camera, viewProjection, count, offset) {\n        throw new AbstractMethodError_1.AbstractMethodError();\n    };\n    /**\n     * //TODO\n     *\n     * @private\n     */\n    GL_ElementsBase.prototype._updateIndices = function (indexOffset) {\n        if (indexOffset === void 0) { indexOffset = 0; }\n        var indices = this._elements.indices;\n        if (indices) {\n            this._indices = this._stage.getAbstraction(ElementsUtils_1.ElementsUtils.getSubIndices(indices, this._elements.numVertices, this._indexMappings, indexOffset));\n            this._numIndices = this._indices._attributesBuffer.count * indices.dimensions;\n        }\n        else {\n            this._indices = null;\n            this._numIndices = 0;\n            this._indexMappings = Array();\n        }\n        indexOffset += this._numIndices;\n        //check if there is more to split\n        if (indices && indexOffset < indices.count * this._elements.indices.dimensions) {\n            if (!this._overflow)\n                this._overflow = this._pGetOverflowElements();\n            this._overflow._updateIndices(indexOffset);\n        }\n        else if (this._overflow) {\n            this._overflow.onClear(new AssetEvent_1.AssetEvent(AssetEvent_1.AssetEvent.CLEAR, this._elements));\n            this._overflow = null;\n        }\n        this._indicesUpdated = true;\n        //invalidate vertices if index mappings exist\n        if (this._indexMappings.length)\n            for (var key in this._verticesUpdated)\n                this._verticesUpdated[key] = false;\n    };\n    /**\n     * //TODO\n     *\n     * @param attributesView\n     * @private\n     */\n    GL_ElementsBase.prototype._updateVertices = function (attributesView) {\n        this._numVertices = this._elements.numVertices;\n        var bufferId = attributesView.buffer.id;\n        this._vertices[bufferId] = this._stage.getAbstraction(ElementsUtils_1.ElementsUtils.getSubVertices(attributesView.buffer, this._indexMappings));\n        this._verticesUpdated[bufferId] = true;\n    };\n    /**\n     * //TODO\n     *\n     * @param event\n     * @private\n     */\n    GL_ElementsBase.prototype._onInvalidateIndices = function (event) {\n        if (!event.attributesView)\n            return;\n        this._indicesUpdated = false;\n    };\n    /**\n     * //TODO\n     *\n     * @param event\n     * @private\n     */\n    GL_ElementsBase.prototype._onClearIndices = function (event) {\n        if (!event.attributesView)\n            return;\n        this._indices.onClear(new AssetEvent_1.AssetEvent(AssetEvent_1.AssetEvent.CLEAR, event.attributesView));\n        this._indices = null;\n    };\n    /**\n     * //TODO\n     *\n     * @param event\n     * @private\n     */\n    GL_ElementsBase.prototype._onInvalidateVertices = function (event) {\n        if (!event.attributesView)\n            return;\n        var bufferId = event.attributesView.buffer.id;\n        this._verticesUpdated[bufferId] = false;\n    };\n    /**\n     * //TODO\n     *\n     * @param event\n     * @private\n     */\n    GL_ElementsBase.prototype._onClearVertices = function (event) {\n        if (!event.attributesView)\n            return;\n        var bufferId = event.attributesView.buffer.id;\n        if (this._vertices[bufferId]) {\n            this._vertices[bufferId].onClear(new AssetEvent_1.AssetEvent(AssetEvent_1.AssetEvent.CLEAR, event.attributesView));\n            delete this._vertices[bufferId];\n            delete this._verticesUpdated[bufferId];\n        }\n    };\n    /**\n     * //TODO\n     *\n     * @param pool\n     * @param renderable\n     * @param level\n     * @param indexOffset\n     * @returns {away.pool.GL_GraphicRenderable}\n     * @protected\n     */\n    GL_ElementsBase.prototype._pGetOverflowElements = function () {\n        throw new AbstractMethodError_1.AbstractMethodError();\n    };\n    return GL_ElementsBase;\n}(AbstractionBase_1.AbstractionBase));\nexports.GL_ElementsBase = GL_ElementsBase;\n\n},{\"awayjs-core/lib/errors/AbstractMethodError\":undefined,\"awayjs-core/lib/events/AssetEvent\":undefined,\"awayjs-core/lib/library/AbstractionBase\":undefined,\"awayjs-display/lib/events/ElementsEvent\":undefined,\"awayjs-display/lib/utils/ElementsUtils\":undefined}],\"awayjs-renderergl/lib/elements/GL_LineElements\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Matrix3D_1 = require(\"awayjs-core/lib/geom/Matrix3D\");\nvar ContextGLDrawMode_1 = require(\"awayjs-stagegl/lib/base/ContextGLDrawMode\");\nvar ContextGLProgramType_1 = require(\"awayjs-stagegl/lib/base/ContextGLProgramType\");\nvar GL_ElementsBase_1 = require(\"../elements/GL_ElementsBase\");\n/**\n *\n * @class away.pool.GL_LineElements\n */\nvar GL_LineElements = (function (_super) {\n    __extends(GL_LineElements, _super);\n    function GL_LineElements(lineElements, stage) {\n        _super.call(this, lineElements, stage);\n        this._calcMatrix = new Matrix3D_1.Matrix3D();\n        this._thickness = 1.25;\n        this._lineElements = lineElements;\n    }\n    Object.defineProperty(GL_LineElements.prototype, \"elementsType\", {\n        get: function () {\n            return GL_LineElements.elementsType;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GL_LineElements.prototype, \"elementsClass\", {\n        get: function () {\n            return GL_LineElements;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    GL_LineElements._iIncludeDependencies = function (shader) {\n        shader.colorDependencies++;\n    };\n    GL_LineElements._iGetVertexCode = function (shader, registerCache, sharedRegisters) {\n        //get the projection coordinates\n        var position0 = (shader.globalPosDependencies > 0) ? sharedRegisters.globalPositionVertex : sharedRegisters.animatedPosition;\n        var position1 = registerCache.getFreeVertexAttribute();\n        var thickness = registerCache.getFreeVertexAttribute();\n        //reserving vertex constants for projection matrix\n        var viewMatrixReg = registerCache.getFreeVertexConstant();\n        registerCache.getFreeVertexConstant();\n        registerCache.getFreeVertexConstant();\n        registerCache.getFreeVertexConstant();\n        shader.viewMatrixIndex = viewMatrixReg.index * 4;\n        registerCache.getFreeVertexConstant(); // not used\n        var constOne = registerCache.getFreeVertexConstant();\n        var constNegOne = registerCache.getFreeVertexConstant();\n        var misc = registerCache.getFreeVertexConstant();\n        var sceneMatrixReg = registerCache.getFreeVertexConstant();\n        registerCache.getFreeVertexConstant();\n        registerCache.getFreeVertexConstant();\n        registerCache.getFreeVertexConstant();\n        shader.sceneMatrixIndex = sceneMatrixReg.index * 4;\n        var q0 = registerCache.getFreeVertexVectorTemp();\n        registerCache.addVertexTempUsages(q0, 1);\n        var q1 = registerCache.getFreeVertexVectorTemp();\n        registerCache.addVertexTempUsages(q1, 1);\n        var l = registerCache.getFreeVertexVectorTemp();\n        registerCache.addVertexTempUsages(l, 1);\n        var behind = registerCache.getFreeVertexVectorTemp();\n        registerCache.addVertexTempUsages(behind, 1);\n        var qclipped = registerCache.getFreeVertexVectorTemp();\n        registerCache.addVertexTempUsages(qclipped, 1);\n        var offset = registerCache.getFreeVertexVectorTemp();\n        registerCache.addVertexTempUsages(offset, 1);\n        return \"m44 \" + q0 + \", \" + position0 + \", \" + sceneMatrixReg + \"\t\t\t\\n\" +\n            \"m44 \" + q1 + \", \" + position1 + \", \" + sceneMatrixReg + \"\t\t\t\\n\" +\n            \"sub \" + l + \", \" + q1 + \", \" + q0 + \" \t\t\t\\n\" +\n            // test if behind camera near plane\n            // if 0 - Q0.z < Camera.near then the point needs to be clipped\n            \"slt \" + behind + \".x, \" + q0 + \".z, \" + misc + \".z\t\t\t\\n\" +\n            \"sub \" + behind + \".y, \" + constOne + \".x, \" + behind + \".x\t\t\t\\n\" +\n            // p = point on the plane (0,0,-near)\n            // n = plane normal (0,0,-1)\n            // D = Q1 - Q0\n            // t = ( dot( n, ( p - Q0 ) ) / ( dot( n, d )\n            // solve for t where line crosses Camera.near\n            \"add \" + offset + \".x, \" + q0 + \".z, \" + misc + \".z\t\t\t\\n\" +\n            \"sub \" + offset + \".y, \" + q0 + \".z, \" + q1 + \".z\t\t\t\\n\" +\n            // fix divide by zero for horizontal lines\n            \"seq \" + offset + \".z, \" + offset + \".y \" + constNegOne + \".x\t\t\t\\n\" +\n            \"add \" + offset + \".y, \" + offset + \".y, \" + offset + \".z\t\t\t\\n\" +\n            \"div \" + offset + \".z, \" + offset + \".x, \" + offset + \".y\t\t\t\\n\" +\n            \"mul \" + offset + \".xyz, \" + offset + \".zzz, \" + l + \".xyz\t\\n\" +\n            \"add \" + qclipped + \".xyz, \" + q0 + \".xyz, \" + offset + \".xyz\t\\n\" +\n            \"mov \" + qclipped + \".w, \" + constOne + \".x\t\t\t\\n\" +\n            // If necessary, replace Q0 with new Qclipped\n            \"mul \" + q0 + \", \" + q0 + \", \" + behind + \".yyyy\t\t\t\\n\" +\n            \"mul \" + qclipped + \", \" + qclipped + \", \" + behind + \".xxxx\t\t\t\\n\" +\n            \"add \" + q0 + \", \" + q0 + \", \" + qclipped + \"\t\t\t\t\\n\" +\n            // calculate side vector for line\n            \"nrm \" + l + \".xyz, \" + l + \".xyz\t\t\t\\n\" +\n            \"nrm \" + behind + \".xyz, \" + q0 + \".xyz\t\t\t\\n\" +\n            \"mov \" + behind + \".w, \" + constOne + \".x\t\t\t\t\\n\" +\n            \"crs \" + qclipped + \".xyz, \" + l + \", \" + behind + \"\t\t\t\\n\" +\n            \"nrm \" + qclipped + \".xyz, \" + qclipped + \".xyz\t\t\t\\n\" +\n            // face the side vector properly for the given point\n            \"mul \" + qclipped + \".xyz, \" + qclipped + \".xyz, \" + thickness + \".xxx\t\\n\" +\n            \"mov \" + qclipped + \".w, \" + constOne + \".x\t\t\t\\n\" +\n            // calculate the amount required to move at the point's distance to correspond to the line's pixel width\n            // scale the side vector by that amount\n            \"dp3 \" + offset + \".x, \" + q0 + \", \" + constNegOne + \"\t\t\t\\n\" +\n            \"mul \" + offset + \".x, \" + offset + \".x, \" + misc + \".x\t\t\t\\n\" +\n            \"mul \" + qclipped + \".xyz, \" + qclipped + \".xyz, \" + offset + \".xxx\t\\n\" +\n            // add scaled side vector to Q0 and transform to clip space\n            \"add \" + q0 + \".xyz, \" + q0 + \".xyz, \" + qclipped + \".xyz\t\\n\" +\n            \"m44 op, \" + q0 + \", \" + viewMatrixReg + \"\t\t\t\\n\"; // transform Q0 to clip space\n    };\n    GL_LineElements._iGetFragmentCode = function (shader, registerCache, sharedRegisters) {\n        return \"\";\n    };\n    GL_LineElements.prototype.onClear = function (event) {\n        _super.prototype.onClear.call(this, event);\n        this._lineElements = null;\n    };\n    GL_LineElements.prototype._setRenderState = function (renderable, shader, camera, viewProjection) {\n        _super.prototype._setRenderState.call(this, renderable, shader, camera, viewProjection);\n        if (shader.colorBufferIndex >= 0)\n            this.activateVertexBufferVO(shader.colorBufferIndex, this._lineElements.colors);\n        this.activateVertexBufferVO(0, this._lineElements.positions, 3);\n        this.activateVertexBufferVO(2, this._lineElements.positions, 3, 12);\n        this.activateVertexBufferVO(3, this._lineElements.thickness);\n        shader.vertexConstantData[4 + 16] = 1;\n        shader.vertexConstantData[5 + 16] = 1;\n        shader.vertexConstantData[6 + 16] = 1;\n        shader.vertexConstantData[7 + 16] = 1;\n        shader.vertexConstantData[10 + 16] = -1;\n        shader.vertexConstantData[12 + 16] = this._thickness / ((this._stage.scissorRect) ? Math.min(this._stage.scissorRect.width, this._stage.scissorRect.height) : Math.min(this._stage.width, this._stage.height));\n        shader.vertexConstantData[13 + 16] = 1 / 255;\n        shader.vertexConstantData[14 + 16] = camera.projection.near;\n        var context = this._stage.context;\n    };\n    GL_LineElements.prototype.draw = function (renderable, shader, camera, viewProjection, count, offset) {\n        var context = this._stage.context;\n        // projection matrix\n        camera.projection.matrix.copyRawDataTo(shader.vertexConstantData, shader.viewMatrixIndex, true);\n        this._calcMatrix.copyFrom(renderable.sourceEntity.sceneTransform);\n        this._calcMatrix.append(camera.inverseSceneTransform);\n        this._calcMatrix.copyRawDataTo(shader.vertexConstantData, shader.sceneMatrixIndex, true);\n        context.setProgramConstantsFromArray(ContextGLProgramType_1.ContextGLProgramType.VERTEX, shader.vertexConstantData);\n        if (this._indices)\n            this.getIndexBufferGL().draw(ContextGLDrawMode_1.ContextGLDrawMode.TRIANGLES, 0, this.numIndices);\n        else\n            this._stage.context.drawVertices(ContextGLDrawMode_1.ContextGLDrawMode.TRIANGLES, offset, count || this.numVertices);\n    };\n    /**\n     * //TODO\n     *\n     * @param pool\n     * @param renderable\n     * @param level\n     * @param indexOffset\n     * @returns {away.pool.LineSubSpriteRenderable}\n     * @protected\n     */\n    GL_LineElements.prototype._pGetOverflowElements = function () {\n        return new GL_LineElements(this._lineElements, this._stage);\n    };\n    GL_LineElements.elementsType = \"[elements Line]\";\n    return GL_LineElements;\n}(GL_ElementsBase_1.GL_ElementsBase));\nexports.GL_LineElements = GL_LineElements;\n\n},{\"../elements/GL_ElementsBase\":\"awayjs-renderergl/lib/elements/GL_ElementsBase\",\"awayjs-core/lib/geom/Matrix3D\":undefined,\"awayjs-stagegl/lib/base/ContextGLDrawMode\":undefined,\"awayjs-stagegl/lib/base/ContextGLProgramType\":undefined}],\"awayjs-renderergl/lib/elements/GL_SkyboxElements\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Matrix3D_1 = require(\"awayjs-core/lib/geom/Matrix3D\");\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\nvar ContextGLDrawMode_1 = require(\"awayjs-stagegl/lib/base/ContextGLDrawMode\");\nvar ContextGLProgramType_1 = require(\"awayjs-stagegl/lib/base/ContextGLProgramType\");\nvar GL_TriangleElements_1 = require(\"../elements/GL_TriangleElements\");\n/**\n *\n * @class away.pool.GL_SkyboxElements\n */\nvar GL_SkyboxElements = (function (_super) {\n    __extends(GL_SkyboxElements, _super);\n    function GL_SkyboxElements() {\n        _super.apply(this, arguments);\n        this._skyboxProjection = new Matrix3D_1.Matrix3D();\n    }\n    Object.defineProperty(GL_SkyboxElements.prototype, \"elementsType\", {\n        get: function () {\n            return GL_SkyboxElements.elementsType;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GL_SkyboxElements.prototype, \"elementsClass\", {\n        get: function () {\n            return GL_SkyboxElements;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    GL_SkyboxElements._iIncludeDependencies = function (shader) {\n    };\n    /**\n     * @inheritDoc\n     */\n    GL_SkyboxElements._iGetVertexCode = function (shader, registerCache, sharedRegisters) {\n        var code = \"\";\n        //get the projection coordinates\n        var position = (shader.globalPosDependencies > 0) ? sharedRegisters.globalPositionVertex : sharedRegisters.animatedPosition;\n        //reserving vertex constants for projection matrix\n        var viewMatrixReg = registerCache.getFreeVertexConstant();\n        registerCache.getFreeVertexConstant();\n        registerCache.getFreeVertexConstant();\n        registerCache.getFreeVertexConstant();\n        shader.viewMatrixIndex = viewMatrixReg.index * 4;\n        var scenePosition = registerCache.getFreeVertexConstant();\n        shader.scenePositionIndex = scenePosition.index * 4;\n        var skyboxScale = registerCache.getFreeVertexConstant();\n        var temp = registerCache.getFreeVertexVectorTemp();\n        code += \"mul \" + temp + \", \" + position + \", \" + skyboxScale + \"\\n\" +\n            \"add \" + temp + \", \" + temp + \", \" + scenePosition + \"\\n\";\n        if (shader.projectionDependencies > 0) {\n            sharedRegisters.projectionFragment = registerCache.getFreeVarying();\n            code += \"m44 \" + temp + \", \" + temp + \", \" + viewMatrixReg + \"\\n\" +\n                \"mov \" + sharedRegisters.projectionFragment + \", \" + temp + \"\\n\" +\n                \"mov op, \" + temp + \"\\n\";\n        }\n        else {\n            code += \"m44 op, \" + temp + \", \" + viewMatrixReg + \"\\n\";\n        }\n        return code;\n    };\n    GL_SkyboxElements._iGetFragmentCode = function (shader, registerCache, sharedRegisters) {\n        return \"\";\n    };\n    GL_SkyboxElements.prototype.draw = function (renderable, shader, camera, viewProjection, count, offset) {\n        var index = shader.scenePositionIndex;\n        var pos = camera.scenePosition;\n        shader.vertexConstantData[index++] = 2 * pos.x;\n        shader.vertexConstantData[index++] = 2 * pos.y;\n        shader.vertexConstantData[index++] = 2 * pos.z;\n        shader.vertexConstantData[index++] = 1;\n        shader.vertexConstantData[index++] = shader.vertexConstantData[index++] = shader.vertexConstantData[index++] = camera.projection.far / Math.sqrt(3);\n        shader.vertexConstantData[index] = 1;\n        var near = new Vector3D_1.Vector3D();\n        this._skyboxProjection.copyFrom(viewProjection);\n        this._skyboxProjection.copyRowTo(2, near);\n        var camPos = camera.scenePosition;\n        var cx = near.x;\n        var cy = near.y;\n        var cz = near.z;\n        var cw = -(near.x * camPos.x + near.y * camPos.y + near.z * camPos.z + Math.sqrt(cx * cx + cy * cy + cz * cz));\n        var signX = cx >= 0 ? 1 : -1;\n        var signY = cy >= 0 ? 1 : -1;\n        var p = new Vector3D_1.Vector3D(signX, signY, 1, 1);\n        var inverse = this._skyboxProjection.clone();\n        inverse.invert();\n        var q = inverse.transformVector(p);\n        this._skyboxProjection.copyRowTo(3, p);\n        var a = (q.x * p.x + q.y * p.y + q.z * p.z + q.w * p.w) / (cx * q.x + cy * q.y + cz * q.z + cw * q.w);\n        this._skyboxProjection.copyRowFrom(2, new Vector3D_1.Vector3D(cx * a, cy * a, cz * a, cw * a));\n        //set constants\n        if (shader.sceneMatrixIndex >= 0) {\n            renderable.renderSceneTransform.copyRawDataTo(shader.vertexConstantData, shader.sceneMatrixIndex, true);\n            this._skyboxProjection.copyRawDataTo(shader.vertexConstantData, shader.viewMatrixIndex, true);\n        }\n        else {\n            this._skyboxProjection.copyRawDataTo(shader.vertexConstantData, shader.viewMatrixIndex, true);\n        }\n        var context = this._stage.context;\n        context.setProgramConstantsFromArray(ContextGLProgramType_1.ContextGLProgramType.VERTEX, shader.vertexConstantData);\n        context.setProgramConstantsFromArray(ContextGLProgramType_1.ContextGLProgramType.FRAGMENT, shader.fragmentConstantData);\n        if (this._indices)\n            this.getIndexBufferGL().draw(ContextGLDrawMode_1.ContextGLDrawMode.TRIANGLES, 0, this.numIndices);\n        else\n            this._stage.context.drawVertices(ContextGLDrawMode_1.ContextGLDrawMode.TRIANGLES, offset, count || this.numVertices);\n    };\n    GL_SkyboxElements.elementsType = \"[elements Skybox]\";\n    return GL_SkyboxElements;\n}(GL_TriangleElements_1.GL_TriangleElements));\nexports.GL_SkyboxElements = GL_SkyboxElements;\n\n},{\"../elements/GL_TriangleElements\":\"awayjs-renderergl/lib/elements/GL_TriangleElements\",\"awayjs-core/lib/geom/Matrix3D\":undefined,\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-stagegl/lib/base/ContextGLDrawMode\":undefined,\"awayjs-stagegl/lib/base/ContextGLProgramType\":undefined}],\"awayjs-renderergl/lib/elements/GL_TriangleElements\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Matrix3DUtils_1 = require(\"awayjs-core/lib/geom/Matrix3DUtils\");\nvar ContextGLDrawMode_1 = require(\"awayjs-stagegl/lib/base/ContextGLDrawMode\");\nvar ContextGLProgramType_1 = require(\"awayjs-stagegl/lib/base/ContextGLProgramType\");\nvar GL_ElementsBase_1 = require(\"../elements/GL_ElementsBase\");\n/**\n *\n * @class away.pool.GL_TriangleElements\n */\nvar GL_TriangleElements = (function (_super) {\n    __extends(GL_TriangleElements, _super);\n    function GL_TriangleElements(triangleElements, stage) {\n        _super.call(this, triangleElements, stage);\n        this._triangleElements = triangleElements;\n    }\n    Object.defineProperty(GL_TriangleElements.prototype, \"elementsType\", {\n        get: function () {\n            return GL_TriangleElements.elementsType;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GL_TriangleElements.prototype, \"elementsClass\", {\n        get: function () {\n            return GL_TriangleElements;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    GL_TriangleElements._iIncludeDependencies = function (shader) {\n    };\n    GL_TriangleElements._iGetVertexCode = function (shader, registerCache, sharedRegisters) {\n        var code = \"\";\n        //get the projection coordinates\n        var position = (shader.globalPosDependencies > 0) ? sharedRegisters.globalPositionVertex : sharedRegisters.animatedPosition;\n        //reserving vertex constants for projection matrix\n        var viewMatrixReg = registerCache.getFreeVertexConstant();\n        registerCache.getFreeVertexConstant();\n        registerCache.getFreeVertexConstant();\n        registerCache.getFreeVertexConstant();\n        shader.viewMatrixIndex = viewMatrixReg.index * 4;\n        if (shader.projectionDependencies > 0) {\n            sharedRegisters.projectionFragment = registerCache.getFreeVarying();\n            var temp = registerCache.getFreeVertexVectorTemp();\n            code += \"m44 \" + temp + \", \" + position + \", \" + viewMatrixReg + \"\\n\" +\n                \"mov \" + sharedRegisters.projectionFragment + \", \" + temp + \"\\n\" +\n                \"mov op, \" + temp + \"\\n\";\n        }\n        else {\n            code += \"m44 op, \" + position + \", \" + viewMatrixReg + \"\\n\";\n        }\n        return code;\n    };\n    GL_TriangleElements._iGetFragmentCode = function (shader, registerCache, sharedRegisters) {\n        return \"\";\n    };\n    GL_TriangleElements.prototype.onClear = function (event) {\n        _super.prototype.onClear.call(this, event);\n        this._triangleElements = null;\n    };\n    GL_TriangleElements.prototype._setRenderState = function (renderable, shader, camera, viewProjection) {\n        _super.prototype._setRenderState.call(this, renderable, shader, camera, viewProjection);\n        //set buffers\n        //TODO: find a better way to update a concatenated buffer when autoderiving\n        if (shader.normalIndex >= 0 && this._triangleElements.autoDeriveNormals)\n            this._triangleElements.normals;\n        if (shader.tangentIndex >= 0 && this._triangleElements.autoDeriveTangents)\n            this._triangleElements.tangents;\n        if (shader.curvesIndex >= 0)\n            this.activateVertexBufferVO(shader.curvesIndex, this._triangleElements.getCustomAtributes(\"curves\"));\n        if (shader.uvIndex >= 0)\n            this.activateVertexBufferVO(shader.uvIndex, this._triangleElements.uvs || this._triangleElements.positions);\n        if (shader.secondaryUVIndex >= 0)\n            this.activateVertexBufferVO(shader.secondaryUVIndex, this._triangleElements.getCustomAtributes(\"secondaryUVs\") || this._triangleElements.uvs || this._triangleElements.positions);\n        if (shader.normalIndex >= 0)\n            this.activateVertexBufferVO(shader.normalIndex, this._triangleElements.normals);\n        if (shader.tangentIndex >= 0)\n            this.activateVertexBufferVO(shader.tangentIndex, this._triangleElements.tangents);\n        if (shader.jointIndexIndex >= 0)\n            this.activateVertexBufferVO(shader.jointIndexIndex, this._triangleElements.jointIndices);\n        if (shader.jointWeightIndex >= 0)\n            this.activateVertexBufferVO(shader.jointIndexIndex, this._triangleElements.jointWeights);\n        this.activateVertexBufferVO(0, this._triangleElements.positions);\n    };\n    GL_TriangleElements.prototype.draw = function (renderable, shader, camera, viewProjection, count, offset) {\n        //set constants\n        if (shader.sceneMatrixIndex >= 0) {\n            renderable.renderSceneTransform.copyRawDataTo(shader.vertexConstantData, shader.sceneMatrixIndex, true);\n            viewProjection.copyRawDataTo(shader.vertexConstantData, shader.viewMatrixIndex, true);\n        }\n        else {\n            var matrix3D = Matrix3DUtils_1.Matrix3DUtils.CALCULATION_MATRIX;\n            matrix3D.copyFrom(renderable.renderSceneTransform);\n            matrix3D.append(viewProjection);\n            matrix3D.copyRawDataTo(shader.vertexConstantData, shader.viewMatrixIndex, true);\n        }\n        var context = this._stage.context;\n        context.setProgramConstantsFromArray(ContextGLProgramType_1.ContextGLProgramType.VERTEX, shader.vertexConstantData);\n        context.setProgramConstantsFromArray(ContextGLProgramType_1.ContextGLProgramType.FRAGMENT, shader.fragmentConstantData);\n        if (this._indices)\n            this.getIndexBufferGL().draw(ContextGLDrawMode_1.ContextGLDrawMode.TRIANGLES, 0, this.numIndices);\n        else\n            this._stage.context.drawVertices(ContextGLDrawMode_1.ContextGLDrawMode.TRIANGLES, offset, count || this.numVertices);\n    };\n    /**\n     * //TODO\n     *\n     * @param pool\n     * @param renderable\n     * @param level\n     * @param indexOffset\n     * @returns {away.pool.GL_GraphicRenderable}\n     * @protected\n     */\n    GL_TriangleElements.prototype._pGetOverflowElements = function () {\n        return new GL_TriangleElements(this._triangleElements, this._stage);\n    };\n    GL_TriangleElements.elementsType = \"[elements Triangle]\";\n    return GL_TriangleElements;\n}(GL_ElementsBase_1.GL_ElementsBase));\nexports.GL_TriangleElements = GL_TriangleElements;\n\n},{\"../elements/GL_ElementsBase\":\"awayjs-renderergl/lib/elements/GL_ElementsBase\",\"awayjs-core/lib/geom/Matrix3DUtils\":undefined,\"awayjs-stagegl/lib/base/ContextGLDrawMode\":undefined,\"awayjs-stagegl/lib/base/ContextGLProgramType\":undefined}],\"awayjs-renderergl/lib/elements/IElementsClassGL\":[function(require,module,exports){\n\"use strict\";\n\n},{}],\"awayjs-renderergl/lib/elements\":[function(require,module,exports){\n\"use strict\";\nvar GL_ElementsBase_1 = require(\"./elements/GL_ElementsBase\");\nexports.GL_ElementsBase = GL_ElementsBase_1.GL_ElementsBase;\nvar GL_LineElements_1 = require(\"./elements/GL_LineElements\");\nexports.GL_LineElements = GL_LineElements_1.GL_LineElements;\nvar GL_SkyboxElements_1 = require(\"./elements/GL_SkyboxElements\");\nexports.GL_SkyboxElements = GL_SkyboxElements_1.GL_SkyboxElements;\nvar GL_TriangleElements_1 = require(\"./elements/GL_TriangleElements\");\nexports.GL_TriangleElements = GL_TriangleElements_1.GL_TriangleElements;\n\n},{\"./elements/GL_ElementsBase\":\"awayjs-renderergl/lib/elements/GL_ElementsBase\",\"./elements/GL_LineElements\":\"awayjs-renderergl/lib/elements/GL_LineElements\",\"./elements/GL_SkyboxElements\":\"awayjs-renderergl/lib/elements/GL_SkyboxElements\",\"./elements/GL_TriangleElements\":\"awayjs-renderergl/lib/elements/GL_TriangleElements\"}],\"awayjs-renderergl/lib/errors/AnimationSetError\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ErrorBase_1 = require(\"awayjs-core/lib/errors/ErrorBase\");\nvar AnimationSetError = (function (_super) {\n    __extends(AnimationSetError, _super);\n    function AnimationSetError(message) {\n        _super.call(this, message);\n    }\n    return AnimationSetError;\n}(ErrorBase_1.ErrorBase));\nexports.AnimationSetError = AnimationSetError;\n\n},{\"awayjs-core/lib/errors/ErrorBase\":undefined}],\"awayjs-renderergl/lib/errors\":[function(require,module,exports){\n\"use strict\";\nvar AnimationSetError_1 = require(\"./errors/AnimationSetError\");\nexports.AnimationSetError = AnimationSetError_1.AnimationSetError;\n\n},{\"./errors/AnimationSetError\":\"awayjs-renderergl/lib/errors/AnimationSetError\"}],\"awayjs-renderergl/lib/events/AnimationStateEvent\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar EventBase_1 = require(\"awayjs-core/lib/events/EventBase\");\n/**\n * Dispatched to notify changes in an animation state's state.\n */\nvar AnimationStateEvent = (function (_super) {\n    __extends(AnimationStateEvent, _super);\n    /**\n     * Create a new <code>AnimatonStateEvent</code>\n     *\n     * @param type The event type.\n     * @param animator The animation state object that is the subject of this event.\n     * @param animationNode The animation node inside the animation state from which the event originated.\n     */\n    function AnimationStateEvent(type, animator, animationState, animationNode) {\n        _super.call(this, type);\n        this._animator = animator;\n        this._animationState = animationState;\n        this._animationNode = animationNode;\n    }\n    Object.defineProperty(AnimationStateEvent.prototype, \"animator\", {\n        /**\n         * The animator object that is the subject of this event.\n         */\n        get: function () {\n            return this._animator;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimationStateEvent.prototype, \"animationState\", {\n        /**\n         * The animation state object that is the subject of this event.\n         */\n        get: function () {\n            return this._animationState;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AnimationStateEvent.prototype, \"animationNode\", {\n        /**\n         * The animation node inside the animation state from which the event originated.\n         */\n        get: function () {\n            return this._animationNode;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Clones the event.\n     *\n     * @return An exact duplicate of the current object.\n     */\n    AnimationStateEvent.prototype.clone = function () {\n        return new AnimationStateEvent(this.type, this._animator, this._animationState, this._animationNode);\n    };\n    /**\n     * Dispatched when a non-looping clip node inside an animation state reaches the end of its timeline.\n     */\n    AnimationStateEvent.PLAYBACK_COMPLETE = \"playbackComplete\";\n    AnimationStateEvent.TRANSITION_COMPLETE = \"transitionComplete\";\n    return AnimationStateEvent;\n}(EventBase_1.EventBase));\nexports.AnimationStateEvent = AnimationStateEvent;\n\n},{\"awayjs-core/lib/events/EventBase\":undefined}],\"awayjs-renderergl/lib/events/AnimatorEvent\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar EventBase_1 = require(\"awayjs-core/lib/events/EventBase\");\n/**\n * Dispatched to notify changes in an animator's state.\n */\nvar AnimatorEvent = (function (_super) {\n    __extends(AnimatorEvent, _super);\n    /**\n     * Create a new <code>AnimatorEvent</code> object.\n     *\n     * @param type The event type.\n     * @param animator The animator object that is the subject of this event.\n     */\n    function AnimatorEvent(type, animator) {\n        _super.call(this, type);\n        this._animator = animator;\n    }\n    Object.defineProperty(AnimatorEvent.prototype, \"animator\", {\n        get: function () {\n            return this._animator;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Clones the event.\n     *\n     * @return An exact duplicate of the current event object.\n     */\n    AnimatorEvent.prototype.clone = function () {\n        return new AnimatorEvent(this.type, this._animator);\n    };\n    /**\n     * Defines the value of the type property of a start event object.\n     */\n    AnimatorEvent.START = \"animatorStart\";\n    /**\n     * Defines the value of the type property of a stop event object.\n     */\n    AnimatorEvent.STOP = \"animatorStop\";\n    /**\n     * Defines the value of the type property of a cycle complete event object.\n     */\n    AnimatorEvent.CYCLE_COMPLETE = \"animatorCycleComplete\";\n    return AnimatorEvent;\n}(EventBase_1.EventBase));\nexports.AnimatorEvent = AnimatorEvent;\n\n},{\"awayjs-core/lib/events/EventBase\":undefined}],\"awayjs-renderergl/lib/events/PassEvent\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar EventBase_1 = require(\"awayjs-core/lib/events/EventBase\");\nvar PassEvent = (function (_super) {\n    __extends(PassEvent, _super);\n    function PassEvent(type, pass) {\n        _super.call(this, type);\n        this._pass = pass;\n    }\n    Object.defineProperty(PassEvent.prototype, \"pass\", {\n        /**\n         *\n         */\n        get: function () {\n            return this._pass;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     *\n     */\n    PassEvent.prototype.clone = function () {\n        return new PassEvent(this.type, this._pass);\n    };\n    /**\n     *\n     */\n    PassEvent.INVALIDATE = \"invalidatePass\";\n    return PassEvent;\n}(EventBase_1.EventBase));\nexports.PassEvent = PassEvent;\n\n},{\"awayjs-core/lib/events/EventBase\":undefined}],\"awayjs-renderergl/lib/events/RTTEvent\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar EventBase_1 = require(\"awayjs-core/lib/events/EventBase\");\nvar RTTEvent = (function (_super) {\n    __extends(RTTEvent, _super);\n    function RTTEvent(type, rttManager) {\n        _super.call(this, type);\n        this._rttManager = rttManager;\n    }\n    Object.defineProperty(RTTEvent.prototype, \"rttManager\", {\n        /**\n         *\n         */\n        get: function () {\n            return this._rttManager;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     *\n     */\n    RTTEvent.prototype.clone = function () {\n        return new RTTEvent(this.type, this._rttManager);\n    };\n    /**\n     *\n     */\n    RTTEvent.RESIZE = \"rttManagerResize\";\n    return RTTEvent;\n}(EventBase_1.EventBase));\nexports.RTTEvent = RTTEvent;\n\n},{\"awayjs-core/lib/events/EventBase\":undefined}],\"awayjs-renderergl/lib/events/ShadingMethodEvent\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar EventBase_1 = require(\"awayjs-core/lib/events/EventBase\");\nvar ShadingMethodEvent = (function (_super) {\n    __extends(ShadingMethodEvent, _super);\n    function ShadingMethodEvent(type) {\n        _super.call(this, type);\n    }\n    ShadingMethodEvent.SHADER_INVALIDATED = \"ShaderInvalidated\";\n    return ShadingMethodEvent;\n}(EventBase_1.EventBase));\nexports.ShadingMethodEvent = ShadingMethodEvent;\n\n},{\"awayjs-core/lib/events/EventBase\":undefined}],\"awayjs-renderergl/lib/events\":[function(require,module,exports){\n\"use strict\";\nvar AnimationStateEvent_1 = require(\"./events/AnimationStateEvent\");\nexports.AnimationStateEvent = AnimationStateEvent_1.AnimationStateEvent;\nvar AnimatorEvent_1 = require(\"./events/AnimatorEvent\");\nexports.AnimatorEvent = AnimatorEvent_1.AnimatorEvent;\nvar PassEvent_1 = require(\"./events/PassEvent\");\nexports.PassEvent = PassEvent_1.PassEvent;\nvar RTTEvent_1 = require(\"./events/RTTEvent\");\nexports.RTTEvent = RTTEvent_1.RTTEvent;\nvar ShadingMethodEvent_1 = require(\"./events/ShadingMethodEvent\");\nexports.ShadingMethodEvent = ShadingMethodEvent_1.ShadingMethodEvent;\n\n},{\"./events/AnimationStateEvent\":\"awayjs-renderergl/lib/events/AnimationStateEvent\",\"./events/AnimatorEvent\":\"awayjs-renderergl/lib/events/AnimatorEvent\",\"./events/PassEvent\":\"awayjs-renderergl/lib/events/PassEvent\",\"./events/RTTEvent\":\"awayjs-renderergl/lib/events/RTTEvent\",\"./events/ShadingMethodEvent\":\"awayjs-renderergl/lib/events/ShadingMethodEvent\"}],\"awayjs-renderergl/lib/filters/BlurFilter3D\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Filter3DHBlurTask_1 = require(\"../filters/tasks/Filter3DHBlurTask\");\nvar Filter3DVBlurTask_1 = require(\"../filters/tasks/Filter3DVBlurTask\");\nvar Filter3DBase_1 = require(\"../filters/Filter3DBase\");\nvar BlurFilter3D = (function (_super) {\n    __extends(BlurFilter3D, _super);\n    /**\n     * Creates a new BlurFilter3D object\n     * @param blurX The amount of horizontal blur to apply\n     * @param blurY The amount of vertical blur to apply\n     * @param stepSize The distance between samples. Set to -1 to autodetect with acceptable quality.\n     */\n    function BlurFilter3D(blurX, blurY, stepSize) {\n        if (blurX === void 0) { blurX = 3; }\n        if (blurY === void 0) { blurY = 3; }\n        if (stepSize === void 0) { stepSize = -1; }\n        _super.call(this);\n        this._hBlurTask = new Filter3DHBlurTask_1.Filter3DHBlurTask(blurX, stepSize);\n        this._vBlurTask = new Filter3DVBlurTask_1.Filter3DVBlurTask(blurY, stepSize);\n        this.addTask(this._hBlurTask);\n        this.addTask(this._vBlurTask);\n    }\n    Object.defineProperty(BlurFilter3D.prototype, \"blurX\", {\n        get: function () {\n            return this._hBlurTask.amount;\n        },\n        set: function (value) {\n            this._hBlurTask.amount = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BlurFilter3D.prototype, \"blurY\", {\n        get: function () {\n            return this._vBlurTask.amount;\n        },\n        set: function (value) {\n            this._vBlurTask.amount = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BlurFilter3D.prototype, \"stepSize\", {\n        /**\n         * The distance between two blur samples. Set to -1 to autodetect with acceptable quality (default value).\n         * Higher values provide better performance at the cost of reduces quality.\n         */\n        get: function () {\n            return this._hBlurTask.stepSize;\n        },\n        set: function (value) {\n            this._hBlurTask.stepSize = value;\n            this._vBlurTask.stepSize = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    BlurFilter3D.prototype.setRenderTargets = function (mainTarget, stage) {\n        this._hBlurTask.target = this._vBlurTask.getMainInputTexture(stage);\n        _super.prototype.setRenderTargets.call(this, mainTarget, stage);\n    };\n    return BlurFilter3D;\n}(Filter3DBase_1.Filter3DBase));\nexports.BlurFilter3D = BlurFilter3D;\n\n},{\"../filters/Filter3DBase\":\"awayjs-renderergl/lib/filters/Filter3DBase\",\"../filters/tasks/Filter3DHBlurTask\":\"awayjs-renderergl/lib/filters/tasks/Filter3DHBlurTask\",\"../filters/tasks/Filter3DVBlurTask\":\"awayjs-renderergl/lib/filters/tasks/Filter3DVBlurTask\"}],\"awayjs-renderergl/lib/filters/CompositeFilter3D\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Filter3DCompositeTask_1 = require(\"../filters/tasks/Filter3DCompositeTask\");\nvar Filter3DBase_1 = require(\"../filters/Filter3DBase\");\nvar CompositeFilter3D = (function (_super) {\n    __extends(CompositeFilter3D, _super);\n    /**\n     * Creates a new CompositeFilter3D object\n     * @param blurX The amount of horizontal blur to apply\n     * @param blurY The amount of vertical blur to apply\n     * @param stepSize The distance between samples. Set to -1 to autodetect with acceptable quality.\n     */\n    function CompositeFilter3D(blendMode, exposure) {\n        if (exposure === void 0) { exposure = 1; }\n        _super.call(this);\n        this._compositeTask = new Filter3DCompositeTask_1.Filter3DCompositeTask(blendMode, exposure);\n        this.addTask(this._compositeTask);\n    }\n    Object.defineProperty(CompositeFilter3D.prototype, \"exposure\", {\n        get: function () {\n            return this._compositeTask.exposure;\n        },\n        set: function (value) {\n            this._compositeTask.exposure = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CompositeFilter3D.prototype, \"overlayTexture\", {\n        get: function () {\n            return this._compositeTask.overlayTexture;\n        },\n        set: function (value) {\n            this._compositeTask.overlayTexture = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return CompositeFilter3D;\n}(Filter3DBase_1.Filter3DBase));\nexports.CompositeFilter3D = CompositeFilter3D;\n\n},{\"../filters/Filter3DBase\":\"awayjs-renderergl/lib/filters/Filter3DBase\",\"../filters/tasks/Filter3DCompositeTask\":\"awayjs-renderergl/lib/filters/tasks/Filter3DCompositeTask\"}],\"awayjs-renderergl/lib/filters/FXAAFilter3D\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Filter3DFXAATask_1 = require(\"../filters/tasks/Filter3DFXAATask\");\nvar Filter3DBase_1 = require(\"../filters/Filter3DBase\");\nvar FXAAFilter3D = (function (_super) {\n    __extends(FXAAFilter3D, _super);\n    /**\n     * Creates a new FXAAFilter3D object\n     * @param amount\n     * @param stepSize The distance between samples. Set to -1 to autodetect with acceptable quality.\n     */\n    function FXAAFilter3D(amount, stepSize) {\n        if (stepSize === void 0) { stepSize = -1; }\n        _super.call(this);\n        this._fxaaTask = new Filter3DFXAATask_1.Filter3DFXAATask(amount, stepSize);\n        this.addTask(this._fxaaTask);\n    }\n    Object.defineProperty(FXAAFilter3D.prototype, \"amount\", {\n        get: function () {\n            return this._fxaaTask.amount;\n        },\n        set: function (value) {\n            this._fxaaTask.amount = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FXAAFilter3D.prototype, \"stepSize\", {\n        get: function () {\n            return this._fxaaTask.stepSize;\n        },\n        set: function (value) {\n            this._fxaaTask.stepSize = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return FXAAFilter3D;\n}(Filter3DBase_1.Filter3DBase));\nexports.FXAAFilter3D = FXAAFilter3D;\n\n},{\"../filters/Filter3DBase\":\"awayjs-renderergl/lib/filters/Filter3DBase\",\"../filters/tasks/Filter3DFXAATask\":\"awayjs-renderergl/lib/filters/tasks/Filter3DFXAATask\"}],\"awayjs-renderergl/lib/filters/Filter3DBase\":[function(require,module,exports){\n\"use strict\";\nvar Filter3DBase = (function () {\n    function Filter3DBase() {\n        this._tasks = new Array();\n    }\n    Object.defineProperty(Filter3DBase.prototype, \"requireDepthRender\", {\n        get: function () {\n            return this._requireDepthRender;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Filter3DBase.prototype.addTask = function (filter) {\n        this._tasks.push(filter);\n        if (this._requireDepthRender == null)\n            this._requireDepthRender = filter.requireDepthRender;\n    };\n    Object.defineProperty(Filter3DBase.prototype, \"tasks\", {\n        get: function () {\n            return this._tasks;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Filter3DBase.prototype.getMainInputTexture = function (stage) {\n        return this._tasks[0].getMainInputTexture(stage);\n    };\n    Object.defineProperty(Filter3DBase.prototype, \"textureWidth\", {\n        get: function () {\n            return this._textureWidth;\n        },\n        set: function (value) {\n            this._textureWidth = value;\n            for (var i = 0; i < this._tasks.length; ++i)\n                this._tasks[i].textureWidth = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Filter3DBase.prototype, \"rttManager\", {\n        get: function () {\n            return this._rttManager;\n        },\n        set: function (value) {\n            this._rttManager = value;\n            for (var i = 0; i < this._tasks.length; ++i)\n                this._tasks[i].rttManager = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Filter3DBase.prototype, \"textureHeight\", {\n        get: function () {\n            return this._textureHeight;\n        },\n        set: function (value) {\n            this._textureHeight = value;\n            for (var i = 0; i < this._tasks.length; ++i)\n                this._tasks[i].textureHeight = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // link up the filters correctly with the next filter\n    Filter3DBase.prototype.setRenderTargets = function (mainTarget, stage) {\n        this._tasks[this._tasks.length - 1].target = mainTarget;\n    };\n    Filter3DBase.prototype.dispose = function () {\n        for (var i = 0; i < this._tasks.length; ++i)\n            this._tasks[i].dispose();\n    };\n    Filter3DBase.prototype.update = function (stage, camera) {\n    };\n    return Filter3DBase;\n}());\nexports.Filter3DBase = Filter3DBase;\n\n},{}],\"awayjs-renderergl/lib/filters/tasks/Filter3DCompositeTask\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ContextGLProgramType_1 = require(\"awayjs-stagegl/lib/base/ContextGLProgramType\");\nvar Filter3DTaskBase_1 = require(\"../../filters/tasks/Filter3DTaskBase\");\nvar Filter3DCompositeTask = (function (_super) {\n    __extends(Filter3DCompositeTask, _super);\n    function Filter3DCompositeTask(blendMode, exposure) {\n        if (exposure === void 0) { exposure = 1; }\n        _super.call(this);\n        this._data = new Float32Array([exposure, 0.5, 2.0, -1, 0.0, 0.0, 0.0, 0.0]);\n        this._blendMode = blendMode;\n    }\n    Object.defineProperty(Filter3DCompositeTask.prototype, \"overlayTexture\", {\n        get: function () {\n            return this._overlayTexture;\n        },\n        set: function (value) {\n            this._overlayTexture = value;\n            this._overlayWidth = this._overlayTexture.width;\n            this._overlayHeight = this._overlayTexture.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Filter3DCompositeTask.prototype, \"exposure\", {\n        get: function () {\n            return this._data[0];\n        },\n        set: function (value) {\n            this._data[0] = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Filter3DCompositeTask.prototype.getFragmentCode = function () {\n        var temp1 = this._registerCache.getFreeFragmentVectorTemp();\n        this._registerCache.addFragmentTempUsages(temp1, 1);\n        var temp2 = this._registerCache.getFreeFragmentVectorTemp();\n        this._registerCache.addFragmentTempUsages(temp2, 1);\n        var temp3 = this._registerCache.getFreeFragmentVectorTemp();\n        this._registerCache.addFragmentTempUsages(temp3, 1);\n        var temp4 = this._registerCache.getFreeFragmentVectorTemp();\n        this._registerCache.addFragmentTempUsages(temp4, 1);\n        var inputTexture = this._registerCache.getFreeTextureReg();\n        this._inputTextureIndex = inputTexture.index;\n        var overlayTexture = this._registerCache.getFreeTextureReg();\n        this._overlayTextureIndex = overlayTexture.index;\n        var exposure = this._registerCache.getFreeFragmentConstant();\n        this._exposureIndex = exposure.index * 4;\n        var scaling = this._registerCache.getFreeFragmentConstant();\n        this._scalingIndex = scaling.index * 4;\n        var code;\n        code = \"tex \" + temp1 + \", \" + this._uvVarying + \", \" + inputTexture + \" <2d,linear,clamp>\\n\" +\n            \"mul \" + temp2 + \", \" + this._uvVarying + \", \" + scaling + \".zw\\n\" +\n            \"add \" + temp2 + \", \" + temp2 + \", \" + scaling + \".xy\\n\" +\n            \"tex \" + temp2 + \", \" + temp2 + \", \" + overlayTexture + \" <2d,linear,clamp>\\n\" +\n            \"mul \" + temp2 + \", \" + temp2 + \", \" + exposure + \".xxx\\n\" +\n            \"add \" + temp2 + \", \" + temp2 + \", \" + exposure + \".xxx\\n\";\n        switch (this._blendMode) {\n            case \"multiply\":\n                code += \"mul oc, \" + temp1 + \", \" + temp2 + \"\\n\";\n                break;\n            case \"add\":\n                code += \"add oc, \" + temp1 + \", \" + temp2 + \"\\n\";\n                break;\n            case \"subtract\":\n                code += \"sub oc, \" + temp1 + \", \" + temp2 + \"\\n\";\n                break;\n            case \"overlay\":\n                code += \"sge \" + temp3 + \", \" + temp1 + \", \" + exposure + \".yyy\\n\"; // t2 = (blend >= 0.5)? 1 : 0\n                code += \"sub \" + temp1 + \", \" + temp3 + \", \" + temp1 + \"\\n\"; // base = (1 : 0 - base)\n                code += \"sub \" + temp2 + \", \" + temp2 + \", \" + temp3 + \"\\n\"; // blend = (blend - 1 : 0)\n                code += \"mul \" + temp2 + \", \" + temp2 + \", \" + temp1 + \"\\n\"; // blend = blend * base\n                code += \"sub \" + temp4 + \", \" + temp3 + \", \" + exposure + \".yyy\\n\"; // t3 = (blend >= 0.5)? 0.5 : -0.5\n                code += \"div \" + temp2 + \", \" + temp2 + \", \" + temp4 + \"\\n\"; // blend = blend / ( 0.5 : -0.5)\n                code += \"add oc, \" + temp2 + \", \" + temp3 + \"\\n\";\n                break;\n            case \"normal\":\n                // for debugging purposes\n                code += \"mov oc, \" + temp1 + \"\\n\";\n                break;\n            default:\n                throw new Error(\"Unknown blend mode\");\n        }\n        return code;\n    };\n    Filter3DCompositeTask.prototype.activate = function (stage, camera3D, depthTexture) {\n        this._data[4] = -0.5 * (this._scaledTextureWidth - this._overlayWidth) / this._overlayWidth;\n        this._data[5] = -0.5 * (this._scaledTextureHeight - this._overlayHeight) / this._overlayHeight;\n        this._data[6] = this._scaledTextureWidth / this._overlayWidth;\n        this._data[7] = this._scaledTextureHeight / this._overlayHeight;\n        var context = stage.context;\n        context.setProgramConstantsFromArray(ContextGLProgramType_1.ContextGLProgramType.FRAGMENT, this._data);\n        stage.getAbstraction(this._overlayTexture).activate(this._overlayTextureIndex, false);\n    };\n    Filter3DCompositeTask.prototype.deactivate = function (stage) {\n        stage.context.setTextureAt(1, null);\n    };\n    return Filter3DCompositeTask;\n}(Filter3DTaskBase_1.Filter3DTaskBase));\nexports.Filter3DCompositeTask = Filter3DCompositeTask;\n\n},{\"../../filters/tasks/Filter3DTaskBase\":\"awayjs-renderergl/lib/filters/tasks/Filter3DTaskBase\",\"awayjs-stagegl/lib/base/ContextGLProgramType\":undefined}],\"awayjs-renderergl/lib/filters/tasks/Filter3DFXAATask\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ContextGLProgramType_1 = require(\"awayjs-stagegl/lib/base/ContextGLProgramType\");\nvar Filter3DTaskBase_1 = require(\"../../filters/tasks/Filter3DTaskBase\");\nvar Filter3DFXAATask = (function (_super) {\n    __extends(Filter3DFXAATask, _super);\n    /**\n     *\n     * @param amount\n     * @param stepSize The distance between samples. Set to -1 to autodetect with acceptable quality.\n     */\n    function Filter3DFXAATask(amount, stepSize) {\n        if (amount === void 0) { amount = 1; }\n        if (stepSize === void 0) { stepSize = -1; }\n        _super.call(this);\n        this._stepSize = 1;\n        this._data = new Float32Array(20);\n        //luma\n        this._data.set([0.299, 0.587, 0.114, 0], 0); //0.212, 0.716, 0.072\n        //helpers\n        this._data.set([0.25, 0.5, 0.75, 1], 4);\n        //settings (screen x, screen y, ...)\n        this._data.set([1 / 1024, 1 / 1024, -1, 1], 8);\n        //deltas\n        this._data.set([1 / 128, 1 / 8, 8, 0], 12);\n        //deltas\n        this._data.set([1.0 / 3.0 - 0.5, 2.0 / 3.0 - 0.5, 0.0 / 3.0 - 0.5, 3.0 / 3.0 - 0.5], 16);\n        this.amount = amount;\n        this.stepSize = stepSize;\n    }\n    Object.defineProperty(Filter3DFXAATask.prototype, \"amount\", {\n        get: function () {\n            return this._amount;\n        },\n        set: function (value) {\n            if (this._amount == value)\n                return;\n            this._amount = value;\n            this.invalidateProgram();\n            this.updateBlurData();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Filter3DFXAATask.prototype, \"stepSize\", {\n        get: function () {\n            return this._stepSize;\n        },\n        set: function (value) {\n            if (this._stepSize == value)\n                return;\n            this._stepSize = value;\n            this.calculateStepSize();\n            this.invalidateProgram();\n            this.updateBlurData();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Filter3DFXAATask.prototype.getFragmentCode = function () {\n        var lum = \"fc0\"; //\t0.299, 0.587, 0.114\n        var _0 = \"fc0.w\";\n        var _025 = \"fc1.x\";\n        var _05 = \"fc1.y\";\n        var _075 = \"fc1.z\";\n        var _1 = \"fc1.w\";\n        var pix = \"fc2.xy\";\n        var dx = \"fc2.x\"; // 1/1024\n        var dy = \"fc2.y\"; // 1/1024\n        var mOne = \"fc2.z\"; // -1.0\n        var mul = \"fc2.w\"; // 1.0  -- one for now\n        var fxaaReduceMin = \"fc3.x\"; //1/128\n        var fxaaReduceMul = \"fc3.y\"; //1/8\n        var fxaaSpanMax = \"fc3.z\"; //8\n        var delta1 = \"fc4.x\"; //1.0/3.0 - 0.5\n        var delta2 = \"fc4.y\"; //2.0/3.0 - 0.5\n        var delta3 = \"fc4.z\"; //0.0/3.0 - 0.5\n        var delta4 = \"fc4.w\"; //3.0/3.0 - 0.5\n        var uv_in = \"v0\";\n        var uv = \"ft0.xy\";\n        var uvx = \"ft0.x\";\n        var uvy = \"ft0.y\";\n        var TL = \"ft2.x\";\n        var TR = \"ft2.y\";\n        var BL = \"ft2.z\";\n        var BR = \"ft2.w\";\n        var M = \"ft3.x\";\n        var tempf1 = \"ft3.y\";\n        var tempf2 = \"ft3.z\";\n        var tempf3 = \"ft3.w\";\n        var tex = \"ft1\";\n        var dir = \"ft4\";\n        var dirx = \"ft4.x\";\n        var diry = \"ft4.y\";\n        var dirxy = \"ft4.xy\";\n        var dirReduce = \"ft5.x\";\n        var inverseDirAdjustment = \"ft5.y\";\n        var result1 = \"ft6\";\n        var result2 = \"ft7\";\n        var lumaMin = \"ft5.x\";\n        var lumaMax = \"ft5.y\";\n        var sample = \"fs0\";\n        var temp = tex;\n        var tempxy = temp + \".xy\";\n        var code = new Array();\n        //lumas\n        code.push(\"tex\", tex, uv_in, sample, \"<2d wrap linear>\", \"\\n\");\n        code.push(\"dp3\", M, tex, lum, \"\\n\");\n        code.push(\"mov\", uv, uv_in, \"\\n\");\n        code.push(\"sub\", uv, uv, pix, \"\\n\");\n        code.push(\"tex\", tex, uv, sample, \"<2d wrap linear>\", \"\\n\");\n        code.push(\"dp3\", TL, tex, lum, \"\\n\");\n        code.push(\"mov\", uv, uv_in, \"\\n\");\n        code.push(\"add\", uv, uv, pix, \"\\n\");\n        code.push(\"tex\", tex, uv, sample, \"<2d wrap linear>\", \"\\n\");\n        code.push(\"dp3\", BR, tex, lum, \"\\n\");\n        code.push(\"mov\", uv, uv_in, \"\\n\");\n        code.push(\"sub\", uvy, uvy, dy, \"\\n\");\n        code.push(\"add\", uvx, uvx, dx, \"\\n\");\n        code.push(\"tex\", tex, uv, sample, \"<2d wrap linear>\", \"\\n\");\n        code.push(\"dp3\", TR, tex, lum, \"\\n\");\n        code.push(\"mov\", uv, uv_in, \"\\n\");\n        code.push(\"add\", uvy, uvy, dy, \"\\n\");\n        code.push(\"sub\", uvx, uvx, dx, \"\\n\");\n        code.push(\"tex\", tex, uv, sample, \"<2d wrap linear>\", \"\\n\");\n        code.push(\"dp3\", BL, tex, lum, \"\\n\");\n        //dir\n        code.push(\"add\", tempf1, TL, TR, \"\\n\");\n        code.push(\"add\", tempf2, BL, BR, \"\\n\");\n        code.push(\"sub\", dirx, tempf1, tempf2, \"\\n\");\n        code.push(\"neg\", dirx, dirx, \"\\n\");\n        code.push(\"add\", tempf1, TL, BL, \"\\n\");\n        code.push(\"add\", tempf2, TR, BR, \"\\n\");\n        code.push(\"sub\", diry, tempf1, tempf2, \"\\n\");\n        code.push(\"add\", tempf1, tempf1, tempf2, \"\\n\");\n        code.push(\"mul\", tempf1, tempf1, fxaaReduceMul, \"\\n\");\n        code.push(\"mul\", tempf1, tempf1, _025, \"\\n\");\n        code.push(\"max\", dirReduce, tempf1, fxaaReduceMin, \"\\n\");\n        code.push(\"abs\", tempf1, dirx, \"\\n\");\n        code.push(\"abs\", tempf2, diry, \"\\n\");\n        code.push(\"min\", tempf1, tempf1, tempf2, \"\\n\");\n        code.push(\"add\", tempf1, tempf1, dirReduce, \"\\n\");\n        code.push(\"rcp\", inverseDirAdjustment, tempf1, \"\\n\");\n        code.push(\"mul\", tempf1, dirx, inverseDirAdjustment, \"\\n\");\n        code.push(\"mov\", tempf2, fxaaSpanMax, \"\\n\");\n        code.push(\"neg\", tempf2, tempf2, \"\\n\");\n        code.push(\"max\", tempf1, tempf1, tempf2, \"\\n\");\n        code.push(\"min\", tempf1, fxaaSpanMax, tempf1, \"\\n\");\n        code.push(\"mul\", dirx, tempf1, dx, \"\\n\");\n        code.push(\"mul\", tempf1, diry, inverseDirAdjustment, \"\\n\");\n        code.push(\"mov\", tempf2, fxaaSpanMax, \"\\n\");\n        code.push(\"neg\", tempf2, tempf2, \"\\n\");\n        code.push(\"max\", tempf1, tempf1, tempf2, \"\\n\");\n        code.push(\"min\", tempf1, fxaaSpanMax, tempf1, \"\\n\");\n        code.push(\"mul\", diry, tempf1, dy, \"\\n\");\n        code.push(\"mul\", tempxy, dirxy, delta1, \"\\n\");\n        code.push(\"add\", uv, uv_in, tempxy, \"\\n\");\n        code.push(\"tex\", result1, uv, sample, \"<2d wrap linear>\", \"\\n\");\n        code.push(\"mul\", tempxy, dirxy, delta2, \"\\n\");\n        code.push(\"add\", uv, uv_in, tempxy, \"\\n\");\n        code.push(\"tex\", tex, uv, sample, \"<2d wrap linear>\", \"\\n\");\n        code.push(\"add\", result1, result1, tex, \"\\n\");\n        code.push(\"mul\", result1, result1, _05, \"\\n\");\n        code.push(\"mul\", tempxy, dirxy, delta3, \"\\n\");\n        code.push(\"add\", uv, uv_in, tempxy, \"\\n\");\n        code.push(\"tex\", result2, uv, sample, \"<2d wrap linear>\", \"\\n\");\n        code.push(\"mul\", tempxy, dirxy, delta4, \"\\n\");\n        code.push(\"add\", uv, uv_in, tempxy, \"\\n\");\n        code.push(\"tex\", tex, uv, sample, \"<2d wrap linear>\", \"\\n\");\n        code.push(\"add\", result2, result2, tex, \"\\n\");\n        code.push(\"mul\", result2, result2, _025, \"\\n\");\n        code.push(\"mul\", tex, result1, _05, \"\\n\");\n        code.push(\"add\", result2, result2, tex, \"\\n\");\n        code.push(\"min\", tempf1, BL, BR, \"\\n\");\n        code.push(\"min\", tempf2, TL, TR, \"\\n\");\n        code.push(\"min\", tempf1, tempf1, tempf2, \"\\n\");\n        code.push(\"min\", lumaMin, tempf1, M, \"\\n\");\n        code.push(\"max\", tempf1, BL, BR, \"\\n\");\n        code.push(\"max\", tempf2, TL, TR, \"\\n\");\n        code.push(\"max\", tempf1, tempf1, tempf2, \"\\n\");\n        code.push(\"max\", lumaMax, tempf1, M, \"\\n\");\n        code.push(\"dp3\", tempf1, lum, result2, \"\\n\");\n        code.push(\"slt\", tempf2, tempf1, lumaMin, \"\\n\");\n        code.push(\"sge\", tempf3, tempf1, lumaMax, \"\\n\");\n        code.push(\"mul\", tempf2, tempf2, tempf3, \"\\n\");\n        code.push(\"mul\", result1, result1, tempf2, \"\\n\");\n        code.push(\"sub\", tempf2, _1, tempf2, \"\\n\");\n        code.push(\"mul\", result2, result2, tempf2, \"\\n\");\n        code.push(\"add\", \"oc\", result1, result2, \"\\n\");\n        //this._data[2] = 1/numSamples;\n        return code.join(\" \");\n    };\n    Filter3DFXAATask.prototype.activate = function (stage, camera3D, depthTexture) {\n        stage.context.setProgramConstantsFromArray(ContextGLProgramType_1.ContextGLProgramType.FRAGMENT, this._data);\n    };\n    Filter3DFXAATask.prototype.updateTextures = function (stage) {\n        _super.prototype.updateTextures.call(this, stage);\n        this.updateBlurData();\n    };\n    Filter3DFXAATask.prototype.updateBlurData = function () {\n        // todo: must be normalized using view size ratio instead of texture\n        if (this._rttManager) {\n            this._data[8] = 1 / this._textureWidth;\n            this._data[9] = 1 / this._textureHeight;\n        }\n    };\n    Filter3DFXAATask.prototype.calculateStepSize = function () {\n        this._realStepSize = 1; //this._stepSize > 0? this._stepSize : this._amount > Filter3DVBlurTask.MAX_AUTO_SAMPLES? this._amount/Filter3DVBlurTask.MAX_AUTO_SAMPLES : 1;\n    };\n    //TODO - remove blur variables and create setters/getters for FXAA\n    Filter3DFXAATask.MAX_AUTO_SAMPLES = 15;\n    return Filter3DFXAATask;\n}(Filter3DTaskBase_1.Filter3DTaskBase));\nexports.Filter3DFXAATask = Filter3DFXAATask;\n\n},{\"../../filters/tasks/Filter3DTaskBase\":\"awayjs-renderergl/lib/filters/tasks/Filter3DTaskBase\",\"awayjs-stagegl/lib/base/ContextGLProgramType\":undefined}],\"awayjs-renderergl/lib/filters/tasks/Filter3DHBlurTask\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ContextGLProgramType_1 = require(\"awayjs-stagegl/lib/base/ContextGLProgramType\");\nvar Filter3DTaskBase_1 = require(\"../../filters/tasks/Filter3DTaskBase\");\nvar Filter3DHBlurTask = (function (_super) {\n    __extends(Filter3DHBlurTask, _super);\n    /**\n     * Creates a new Filter3DHDepthOfFFieldTask\n     * @param amount The maximum amount of blur to apply in pixels at the most out-of-focus areas\n     * @param stepSize The distance between samples. Set to -1 to autodetect with acceptable quality.\n     */\n    function Filter3DHBlurTask(amount, stepSize) {\n        if (stepSize === void 0) { stepSize = -1; }\n        _super.call(this);\n        this._stepSize = 1;\n        this._amount = amount;\n        this._data = new Float32Array([0, 0, 0, 1]);\n        this.stepSize = stepSize;\n    }\n    Object.defineProperty(Filter3DHBlurTask.prototype, \"amount\", {\n        get: function () {\n            return this._amount;\n        },\n        set: function (value) {\n            if (this._amount == value)\n                return;\n            this._amount = value;\n            this.invalidateProgram();\n            this.updateBlurData();\n            this.calculateStepSize();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Filter3DHBlurTask.prototype, \"stepSize\", {\n        get: function () {\n            return this._stepSize;\n        },\n        set: function (value) {\n            if (this._stepSize == value)\n                return;\n            this._stepSize = value;\n            this.calculateStepSize();\n            this.invalidateProgram();\n            this.updateBlurData();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Filter3DHBlurTask.prototype.getFragmentCode = function () {\n        var code;\n        var numSamples = 1;\n        code = \"mov ft0, v0\t\\n\" +\n            \"sub ft0.x, v0.x, fc0.x\\n\";\n        code += \"tex ft1, ft0, fs0 <2d,linear,clamp>\\n\";\n        for (var x = this._realStepSize; x <= this._amount; x += this._realStepSize) {\n            code += \"add ft0.x, ft0.x, fc0.y\\n\" +\n                \"tex ft2, ft0, fs0 <2d,linear,clamp>\\n\" +\n                \"add ft1, ft1, ft2\\n\";\n            ++numSamples;\n        }\n        code += \"mul oc, ft1, fc0.z\\n\";\n        this._data[2] = 1 / numSamples;\n        return code;\n    };\n    Filter3DHBlurTask.prototype.activate = function (stage, camera3D, depthTexture) {\n        stage.context.setProgramConstantsFromArray(ContextGLProgramType_1.ContextGLProgramType.FRAGMENT, this._data);\n    };\n    Filter3DHBlurTask.prototype.updateTextures = function (stage) {\n        _super.prototype.updateTextures.call(this, stage);\n        this.updateBlurData();\n    };\n    Filter3DHBlurTask.prototype.updateBlurData = function () {\n        // todo: must be normalized using view size ratio instead of texture\n        var invW = 1 / this._textureWidth;\n        this._data[0] = this._amount * .5 * invW;\n        this._data[1] = this._realStepSize * invW;\n    };\n    Filter3DHBlurTask.prototype.calculateStepSize = function () {\n        this._realStepSize = this._stepSize > 0 ? this._stepSize : this._amount > Filter3DHBlurTask.MAX_AUTO_SAMPLES ? this._amount / Filter3DHBlurTask.MAX_AUTO_SAMPLES : 1;\n    };\n    Filter3DHBlurTask.MAX_AUTO_SAMPLES = 15;\n    return Filter3DHBlurTask;\n}(Filter3DTaskBase_1.Filter3DTaskBase));\nexports.Filter3DHBlurTask = Filter3DHBlurTask;\n\n},{\"../../filters/tasks/Filter3DTaskBase\":\"awayjs-renderergl/lib/filters/tasks/Filter3DTaskBase\",\"awayjs-stagegl/lib/base/ContextGLProgramType\":undefined}],\"awayjs-renderergl/lib/filters/tasks/Filter3DTaskBase\":[function(require,module,exports){\n\"use strict\";\nvar Image2D_1 = require(\"awayjs-core/lib/image/Image2D\");\nvar AbstractMethodError_1 = require(\"awayjs-core/lib/errors/AbstractMethodError\");\nvar AGALMiniAssembler_1 = require(\"awayjs-stagegl/lib/aglsl/assembler/AGALMiniAssembler\");\nvar ShaderRegisterCache_1 = require(\"../../shaders/ShaderRegisterCache\");\nvar Filter3DTaskBase = (function () {\n    function Filter3DTaskBase(requireDepthRender) {\n        if (requireDepthRender === void 0) { requireDepthRender = false; }\n        this._scaledTextureWidth = -1;\n        this._scaledTextureHeight = -1;\n        this._textureWidth = -1;\n        this._textureHeight = -1;\n        this._textureDimensionsInvalid = true;\n        this._program3DInvalid = true;\n        this._textureScale = 0;\n        this._requireDepthRender = requireDepthRender;\n        this._registerCache = new ShaderRegisterCache_1.ShaderRegisterCache(\"baseline\");\n    }\n    ;\n    Object.defineProperty(Filter3DTaskBase.prototype, \"textureScale\", {\n        /**\n         * The texture scale for the input of this texture. This will define the output of the previous entry in the chain\n         */\n        get: function () {\n            return this._textureScale;\n        },\n        set: function (value) {\n            if (this._textureScale == value)\n                return;\n            this._textureScale = value;\n            this._scaledTextureWidth = this._textureWidth >> this._textureScale;\n            this._scaledTextureHeight = this._textureHeight >> this._textureScale;\n            this._textureDimensionsInvalid = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Filter3DTaskBase.prototype, \"target\", {\n        get: function () {\n            return this._target;\n        },\n        set: function (value) {\n            this._target = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Filter3DTaskBase.prototype, \"rttManager\", {\n        get: function () {\n            return this._rttManager;\n        },\n        set: function (value) {\n            if (this._rttManager == value)\n                return;\n            this._rttManager = value;\n            this._textureDimensionsInvalid = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Filter3DTaskBase.prototype, \"textureWidth\", {\n        get: function () {\n            return this._textureWidth;\n        },\n        set: function (value) {\n            if (this._textureWidth == value)\n                return;\n            this._textureWidth = value;\n            this._scaledTextureWidth = this._textureWidth >> this._textureScale;\n            this._textureDimensionsInvalid = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Filter3DTaskBase.prototype, \"textureHeight\", {\n        get: function () {\n            return this._textureHeight;\n        },\n        set: function (value) {\n            if (this._textureHeight == value)\n                return;\n            this._textureHeight = value;\n            this._scaledTextureHeight = this._textureHeight >> this._textureScale;\n            this._textureDimensionsInvalid = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Filter3DTaskBase.prototype.getMainInputTexture = function (stage) {\n        if (this._textureDimensionsInvalid)\n            this.updateTextures(stage);\n        return this._mainInputTexture;\n    };\n    Filter3DTaskBase.prototype.dispose = function () {\n        if (this._mainInputTexture)\n            this._mainInputTexture.dispose();\n        if (this._program3D)\n            this._program3D.dispose();\n    };\n    Filter3DTaskBase.prototype.invalidateProgram = function () {\n        this._program3DInvalid = true;\n    };\n    Filter3DTaskBase.prototype.updateProgram = function (stage) {\n        if (this._program3D)\n            this._program3D.dispose();\n        this._program3D = stage.context.createProgram();\n        this._registerCache.reset();\n        var vertexByteCode = (new AGALMiniAssembler_1.AGALMiniAssembler().assemble(\"part vertex 1\\n\" + this.getVertexCode() + \"endpart\"))['vertex'].data;\n        var fragmentByteCode = (new AGALMiniAssembler_1.AGALMiniAssembler().assemble(\"part fragment 1\\n\" + this.getFragmentCode() + \"endpart\"))['fragment'].data;\n        this._program3D.upload(vertexByteCode, fragmentByteCode);\n        this._program3DInvalid = false;\n    };\n    Filter3DTaskBase.prototype.getVertexCode = function () {\n        var position = this._registerCache.getFreeVertexAttribute();\n        this._positionIndex = position.index;\n        var uv = this._registerCache.getFreeVertexAttribute();\n        this._uvIndex = uv.index;\n        this._uvVarying = this._registerCache.getFreeVarying();\n        var code;\n        code = \"mov op, \" + position + \"\\n\" +\n            \"mov \" + this._uvVarying + \", \" + uv + \"\\n\";\n        return code;\n    };\n    Filter3DTaskBase.prototype.getFragmentCode = function () {\n        throw new AbstractMethodError_1.AbstractMethodError();\n    };\n    Filter3DTaskBase.prototype.updateTextures = function (stage) {\n        if (this._mainInputTexture)\n            this._mainInputTexture.dispose();\n        this._mainInputTexture = new Image2D_1.Image2D(this._scaledTextureWidth, this._scaledTextureHeight);\n        this._textureDimensionsInvalid = false;\n    };\n    Filter3DTaskBase.prototype.getProgram = function (stage) {\n        if (this._program3DInvalid)\n            this.updateProgram(stage);\n        return this._program3D;\n    };\n    Filter3DTaskBase.prototype.activate = function (stage, camera, depthTexture) {\n    };\n    Filter3DTaskBase.prototype.deactivate = function (stage) {\n    };\n    Object.defineProperty(Filter3DTaskBase.prototype, \"requireDepthRender\", {\n        get: function () {\n            return this._requireDepthRender;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Filter3DTaskBase;\n}());\nexports.Filter3DTaskBase = Filter3DTaskBase;\n\n},{\"../../shaders/ShaderRegisterCache\":\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\",\"awayjs-core/lib/errors/AbstractMethodError\":undefined,\"awayjs-core/lib/image/Image2D\":undefined,\"awayjs-stagegl/lib/aglsl/assembler/AGALMiniAssembler\":undefined}],\"awayjs-renderergl/lib/filters/tasks/Filter3DVBlurTask\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ContextGLProgramType_1 = require(\"awayjs-stagegl/lib/base/ContextGLProgramType\");\nvar Filter3DTaskBase_1 = require(\"../../filters/tasks/Filter3DTaskBase\");\nvar Filter3DVBlurTask = (function (_super) {\n    __extends(Filter3DVBlurTask, _super);\n    /**\n     *\n     * @param amount\n     * @param stepSize The distance between samples. Set to -1 to autodetect with acceptable quality.\n     */\n    function Filter3DVBlurTask(amount, stepSize) {\n        if (stepSize === void 0) { stepSize = -1; }\n        _super.call(this);\n        this._stepSize = 1;\n        this._amount = amount;\n        this._data = new Float32Array([0, 0, 0, 1]);\n        this.stepSize = stepSize;\n    }\n    Object.defineProperty(Filter3DVBlurTask.prototype, \"amount\", {\n        get: function () {\n            return this._amount;\n        },\n        set: function (value) {\n            if (this._amount == value)\n                return;\n            this._amount = value;\n            this.invalidateProgram();\n            this.updateBlurData();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Filter3DVBlurTask.prototype, \"stepSize\", {\n        get: function () {\n            return this._stepSize;\n        },\n        set: function (value) {\n            if (this._stepSize == value)\n                return;\n            this._stepSize = value;\n            this.calculateStepSize();\n            this.invalidateProgram();\n            this.updateBlurData();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Filter3DVBlurTask.prototype.getFragmentCode = function () {\n        var code;\n        var numSamples = 1;\n        code = \"mov ft0, v0\t\\n\" +\n            \"sub ft0.y, v0.y, fc0.x\\n\";\n        code += \"tex ft1, ft0, fs0 <2d,linear,clamp>\\n\";\n        for (var x = this._realStepSize; x <= this._amount; x += this._realStepSize) {\n            code += \"add ft0.y, ft0.y, fc0.y\\n\";\n            code += \"tex ft2, ft0, fs0 <2d,linear,clamp>\\n\" +\n                \"add ft1, ft1, ft2\\n\";\n            ++numSamples;\n        }\n        code += \"mul oc, ft1, fc0.z\\n\";\n        this._data[2] = 1 / numSamples;\n        return code;\n    };\n    Filter3DVBlurTask.prototype.activate = function (stage, camera3D, depthTexture) {\n        stage.context.setProgramConstantsFromArray(ContextGLProgramType_1.ContextGLProgramType.FRAGMENT, this._data);\n    };\n    Filter3DVBlurTask.prototype.updateTextures = function (stage) {\n        _super.prototype.updateTextures.call(this, stage);\n        this.updateBlurData();\n    };\n    Filter3DVBlurTask.prototype.updateBlurData = function () {\n        // todo: must be normalized using view size ratio instead of texture\n        var invH = 1 / this._textureHeight;\n        this._data[0] = this._amount * .5 * invH;\n        this._data[1] = this._realStepSize * invH;\n    };\n    Filter3DVBlurTask.prototype.calculateStepSize = function () {\n        this._realStepSize = this._stepSize > 0 ? this._stepSize : this._amount > Filter3DVBlurTask.MAX_AUTO_SAMPLES ? this._amount / Filter3DVBlurTask.MAX_AUTO_SAMPLES : 1;\n    };\n    Filter3DVBlurTask.MAX_AUTO_SAMPLES = 15;\n    return Filter3DVBlurTask;\n}(Filter3DTaskBase_1.Filter3DTaskBase));\nexports.Filter3DVBlurTask = Filter3DVBlurTask;\n\n},{\"../../filters/tasks/Filter3DTaskBase\":\"awayjs-renderergl/lib/filters/tasks/Filter3DTaskBase\",\"awayjs-stagegl/lib/base/ContextGLProgramType\":undefined}],\"awayjs-renderergl/lib/filters\":[function(require,module,exports){\n\"use strict\";\nvar Filter3DCompositeTask_1 = require(\"./filters/tasks/Filter3DCompositeTask\");\nexports.Filter3DCompositeTask = Filter3DCompositeTask_1.Filter3DCompositeTask;\nvar Filter3DFXAATask_1 = require(\"./filters/tasks/Filter3DFXAATask\");\nexports.Filter3DFXAATask = Filter3DFXAATask_1.Filter3DFXAATask;\nvar Filter3DHBlurTask_1 = require(\"./filters/tasks/Filter3DHBlurTask\");\nexports.Filter3DHBlurTask = Filter3DHBlurTask_1.Filter3DHBlurTask;\nvar Filter3DTaskBase_1 = require(\"./filters/tasks/Filter3DTaskBase\");\nexports.Filter3DTaskBase = Filter3DTaskBase_1.Filter3DTaskBase;\nvar Filter3DVBlurTask_1 = require(\"./filters/tasks/Filter3DVBlurTask\");\nexports.Filter3DVBlurTask = Filter3DVBlurTask_1.Filter3DVBlurTask;\nvar BlurFilter3D_1 = require(\"./filters/BlurFilter3D\");\nexports.BlurFilter3D = BlurFilter3D_1.BlurFilter3D;\nvar CompositeFilter3D_1 = require(\"./filters/CompositeFilter3D\");\nexports.CompositeFilter3D = CompositeFilter3D_1.CompositeFilter3D;\nvar Filter3DBase_1 = require(\"./filters/Filter3DBase\");\nexports.Filter3DBase = Filter3DBase_1.Filter3DBase;\nvar FXAAFilter3D_1 = require(\"./filters/FXAAFilter3D\");\nexports.FXAAFilter3D = FXAAFilter3D_1.FXAAFilter3D;\n\n},{\"./filters/BlurFilter3D\":\"awayjs-renderergl/lib/filters/BlurFilter3D\",\"./filters/CompositeFilter3D\":\"awayjs-renderergl/lib/filters/CompositeFilter3D\",\"./filters/FXAAFilter3D\":\"awayjs-renderergl/lib/filters/FXAAFilter3D\",\"./filters/Filter3DBase\":\"awayjs-renderergl/lib/filters/Filter3DBase\",\"./filters/tasks/Filter3DCompositeTask\":\"awayjs-renderergl/lib/filters/tasks/Filter3DCompositeTask\",\"./filters/tasks/Filter3DFXAATask\":\"awayjs-renderergl/lib/filters/tasks/Filter3DFXAATask\",\"./filters/tasks/Filter3DHBlurTask\":\"awayjs-renderergl/lib/filters/tasks/Filter3DHBlurTask\",\"./filters/tasks/Filter3DTaskBase\":\"awayjs-renderergl/lib/filters/tasks/Filter3DTaskBase\",\"./filters/tasks/Filter3DVBlurTask\":\"awayjs-renderergl/lib/filters/tasks/Filter3DVBlurTask\"}],\"awayjs-renderergl/lib/managers/RTTBufferManager\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Rectangle_1 = require(\"awayjs-core/lib/geom/Rectangle\");\nvar EventDispatcher_1 = require(\"awayjs-core/lib/events/EventDispatcher\");\nvar ImageUtils_1 = require(\"awayjs-core/lib/utils/ImageUtils\");\nvar RTTEvent_1 = require(\"../events/RTTEvent\");\nvar RTTBufferManager = (function (_super) {\n    __extends(RTTBufferManager, _super);\n    function RTTBufferManager(stage) {\n        _super.call(this);\n        this._viewWidth = -1;\n        this._viewHeight = -1;\n        this._textureWidth = -1;\n        this._textureHeight = -1;\n        this._buffersInvalid = true;\n        this._renderToTextureRect = new Rectangle_1.Rectangle();\n        this._stage = stage;\n    }\n    RTTBufferManager.getInstance = function (stage) {\n        if (!stage)\n            throw new Error(\"stage key cannot be null!\");\n        if (RTTBufferManager._instances == null)\n            RTTBufferManager._instances = new Array();\n        var rttBufferManager = RTTBufferManager.getRTTBufferManagerFromStage(stage);\n        if (rttBufferManager == null) {\n            rttBufferManager = new RTTBufferManager(stage);\n            var vo = new RTTBufferManagerVO();\n            vo.stage3d = stage;\n            vo.rttbfm = rttBufferManager;\n            RTTBufferManager._instances.push(vo);\n        }\n        return rttBufferManager;\n    };\n    RTTBufferManager.getRTTBufferManagerFromStage = function (stage) {\n        var l = RTTBufferManager._instances.length;\n        var r;\n        for (var c = 0; c < l; c++) {\n            r = RTTBufferManager._instances[c];\n            if (r.stage3d === stage)\n                return r.rttbfm;\n        }\n        return null;\n    };\n    RTTBufferManager.deleteRTTBufferManager = function (stage) {\n        var l = RTTBufferManager._instances.length;\n        var r;\n        for (var c = 0; c < l; c++) {\n            r = RTTBufferManager._instances[c];\n            if (r.stage3d === stage) {\n                RTTBufferManager._instances.splice(c, 1);\n                return;\n            }\n        }\n    };\n    Object.defineProperty(RTTBufferManager.prototype, \"textureRatioX\", {\n        get: function () {\n            if (this._buffersInvalid)\n                this.updateRTTBuffers();\n            return this._textureRatioX;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RTTBufferManager.prototype, \"textureRatioY\", {\n        get: function () {\n            if (this._buffersInvalid)\n                this.updateRTTBuffers();\n            return this._textureRatioY;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RTTBufferManager.prototype, \"viewWidth\", {\n        get: function () {\n            return this._viewWidth;\n        },\n        set: function (value) {\n            if (value == this._viewWidth)\n                return;\n            this._viewWidth = value;\n            this._buffersInvalid = true;\n            this._textureWidth = ImageUtils_1.ImageUtils.getBestPowerOf2(this._viewWidth);\n            if (this._textureWidth > this._viewWidth) {\n                this._renderToTextureRect.x = Math.floor((this._textureWidth - this._viewWidth) * .5);\n                this._renderToTextureRect.width = this._viewWidth;\n            }\n            else {\n                this._renderToTextureRect.x = 0;\n                this._renderToTextureRect.width = this._textureWidth;\n            }\n            this.dispatchEvent(new RTTEvent_1.RTTEvent(RTTEvent_1.RTTEvent.RESIZE, this));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RTTBufferManager.prototype, \"viewHeight\", {\n        get: function () {\n            return this._viewHeight;\n        },\n        set: function (value) {\n            if (value == this._viewHeight)\n                return;\n            this._viewHeight = value;\n            this._buffersInvalid = true;\n            this._textureHeight = ImageUtils_1.ImageUtils.getBestPowerOf2(this._viewHeight);\n            if (this._textureHeight > this._viewHeight) {\n                this._renderToTextureRect.y = Math.floor((this._textureHeight - this._viewHeight) * .5);\n                this._renderToTextureRect.height = this._viewHeight;\n            }\n            else {\n                this._renderToTextureRect.y = 0;\n                this._renderToTextureRect.height = this._textureHeight;\n            }\n            this.dispatchEvent(new RTTEvent_1.RTTEvent(RTTEvent_1.RTTEvent.RESIZE, this));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RTTBufferManager.prototype, \"renderToTextureVertexBuffer\", {\n        get: function () {\n            if (this._buffersInvalid)\n                this.updateRTTBuffers();\n            return this._renderToTextureVertexBuffer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RTTBufferManager.prototype, \"renderToScreenVertexBuffer\", {\n        get: function () {\n            if (this._buffersInvalid)\n                this.updateRTTBuffers();\n            return this._renderToScreenVertexBuffer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RTTBufferManager.prototype, \"indexBuffer\", {\n        get: function () {\n            return this._indexBuffer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RTTBufferManager.prototype, \"renderToTextureRect\", {\n        get: function () {\n            if (this._buffersInvalid)\n                this.updateRTTBuffers();\n            return this._renderToTextureRect;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RTTBufferManager.prototype, \"textureWidth\", {\n        get: function () {\n            return this._textureWidth;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RTTBufferManager.prototype, \"textureHeight\", {\n        get: function () {\n            return this._textureHeight;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    RTTBufferManager.prototype.dispose = function () {\n        RTTBufferManager.deleteRTTBufferManager(this._stage);\n        if (this._indexBuffer) {\n            this._indexBuffer.dispose();\n            this._renderToScreenVertexBuffer.dispose();\n            this._renderToTextureVertexBuffer.dispose();\n            this._renderToScreenVertexBuffer = null;\n            this._renderToTextureVertexBuffer = null;\n            this._indexBuffer = null;\n        }\n    };\n    // todo: place all this in a separate model, since it's used all over the place\n    // maybe it even has a place in the core (together with screenRect etc)?\n    // needs to be stored per view of course\n    RTTBufferManager.prototype.updateRTTBuffers = function () {\n        var context = this._stage.context;\n        var textureVerts;\n        var screenVerts;\n        var x;\n        var y;\n        if (this._renderToTextureVertexBuffer == null)\n            this._renderToTextureVertexBuffer = context.createVertexBuffer(4, 20);\n        if (this._renderToScreenVertexBuffer == null)\n            this._renderToScreenVertexBuffer = context.createVertexBuffer(4, 20);\n        if (!this._indexBuffer) {\n            this._indexBuffer = context.createIndexBuffer(6);\n            this._indexBuffer.uploadFromArray([2, 1, 0, 3, 2, 0], 0, 6);\n        }\n        this._textureRatioX = x = Math.min(this._viewWidth / this._textureWidth, 1);\n        this._textureRatioY = y = Math.min(this._viewHeight / this._textureHeight, 1);\n        var u1 = (1 - x) * .5;\n        var u2 = (x + 1) * .5;\n        var v1 = (1 - y) * .5;\n        var v2 = (y + 1) * .5;\n        // last element contains indices for data per vertex that can be passed to the vertex shader if necessary (ie: frustum corners for deferred rendering)\n        textureVerts = [-x, -y, u1, v1, 0, x, -y, u2, v1, 1, x, y, u2, v2, 2, -x, y, u1, v2, 3];\n        screenVerts = [-1, -1, u1, v1, 0, 1, -1, u2, v1, 1, 1, 1, u2, v2, 2, -1, 1, u1, v2, 3];\n        this._renderToTextureVertexBuffer.uploadFromArray(textureVerts, 0, 4);\n        this._renderToScreenVertexBuffer.uploadFromArray(screenVerts, 0, 4);\n        this._buffersInvalid = false;\n    };\n    return RTTBufferManager;\n}(EventDispatcher_1.EventDispatcher));\nexports.RTTBufferManager = RTTBufferManager;\nvar RTTBufferManagerVO = (function () {\n    function RTTBufferManagerVO() {\n    }\n    return RTTBufferManagerVO;\n}());\n\n},{\"../events/RTTEvent\":\"awayjs-renderergl/lib/events/RTTEvent\",\"awayjs-core/lib/events/EventDispatcher\":undefined,\"awayjs-core/lib/geom/Rectangle\":undefined,\"awayjs-core/lib/utils/ImageUtils\":undefined}],\"awayjs-renderergl/lib/managers\":[function(require,module,exports){\n\"use strict\";\nvar RTTBufferManager_1 = require(\"./managers/RTTBufferManager\");\nexports.RTTBufferManager = RTTBufferManager_1.RTTBufferManager;\n\n},{\"./managers/RTTBufferManager\":\"awayjs-renderergl/lib/managers/RTTBufferManager\"}],\"awayjs-renderergl/lib/renderables/GL_BillboardRenderable\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AttributesBuffer_1 = require(\"awayjs-core/lib/attributes/AttributesBuffer\");\nvar TriangleElements_1 = require(\"awayjs-display/lib/graphics/TriangleElements\");\nvar DefaultMaterialManager_1 = require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\nvar GL_RenderableBase_1 = require(\"../renderables/GL_RenderableBase\");\n/**\n * @class away.pool.RenderableListItem\n */\nvar GL_BillboardRenderable = (function (_super) {\n    __extends(GL_BillboardRenderable, _super);\n    /**\n     * //TODO\n     *\n     * @param pool\n     * @param billboard\n     */\n    function GL_BillboardRenderable(billboard, renderer) {\n        _super.call(this, billboard, renderer);\n        this._billboard = billboard;\n    }\n    GL_BillboardRenderable.prototype.onClear = function (event) {\n        _super.prototype.onClear.call(this, event);\n        this._billboard = null;\n    };\n    /**\n     * //TODO\n     *\n     * @returns {away.base.TriangleElements}\n     */\n    GL_BillboardRenderable.prototype._pGetElements = function () {\n        var texture = this._billboard.material.getTextureAt(0);\n        var id = -1;\n        if (texture)\n            id = ((this.renderable.style ? this.renderable.style.getSamplerAt(texture) || texture.getSamplerAt(0) : texture.getSamplerAt(0)) || DefaultMaterialManager_1.DefaultMaterialManager.getDefaultSampler()).id;\n        this._id = id;\n        var elements = GL_BillboardRenderable._samplerElements[id];\n        var width = this._billboard.billboardWidth;\n        var height = this._billboard.billboardHeight;\n        var billboardRect = this._billboard.billboardRect;\n        if (!elements) {\n            elements = GL_BillboardRenderable._samplerElements[id] = new TriangleElements_1.TriangleElements(new AttributesBuffer_1.AttributesBuffer(11, 4));\n            elements.autoDeriveNormals = false;\n            elements.autoDeriveTangents = false;\n            elements.setIndices(Array(0, 1, 2, 0, 2, 3));\n            elements.setPositions(Array(-billboardRect.x, height - billboardRect.y, 0, width - billboardRect.x, height - billboardRect.y, 0, width - billboardRect.x, -billboardRect.y, 0, -billboardRect.x, -billboardRect.y, 0));\n            elements.setNormals(Array(1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0));\n            elements.setTangents(Array(0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1));\n            elements.setUVs(Array(0, 0, 1, 0, 1, 1, 0, 1));\n        }\n        else {\n            elements.setPositions(Array(-billboardRect.x, height - billboardRect.y, 0, width - billboardRect.x, height - billboardRect.y, 0, width - billboardRect.x, -billboardRect.y, 0, -billboardRect.x, -billboardRect.y, 0));\n        }\n        return this._stage.getAbstraction(elements);\n    };\n    GL_BillboardRenderable.prototype._pGetSurface = function () {\n        return this._renderer.getSurfacePool(this.elementsGL).getAbstraction(this._billboard.material || DefaultMaterialManager_1.DefaultMaterialManager.getDefaultMaterial(this.renderable));\n    };\n    GL_BillboardRenderable._samplerElements = new Object();\n    return GL_BillboardRenderable;\n}(GL_RenderableBase_1.GL_RenderableBase));\nexports.GL_BillboardRenderable = GL_BillboardRenderable;\n\n},{\"../renderables/GL_RenderableBase\":\"awayjs-renderergl/lib/renderables/GL_RenderableBase\",\"awayjs-core/lib/attributes/AttributesBuffer\":undefined,\"awayjs-display/lib/graphics/TriangleElements\":undefined,\"awayjs-display/lib/managers/DefaultMaterialManager\":undefined}],\"awayjs-renderergl/lib/renderables/GL_GraphicRenderable\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar DefaultMaterialManager_1 = require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\nvar GL_RenderableBase_1 = require(\"../renderables/GL_RenderableBase\");\n/**\n * @class away.pool.GL_GraphicRenderable\n */\nvar GL_GraphicRenderable = (function (_super) {\n    __extends(GL_GraphicRenderable, _super);\n    /**\n     * //TODO\n     *\n     * @param pool\n     * @param graphic\n     * @param level\n     * @param indexOffset\n     */\n    function GL_GraphicRenderable(graphic, renderer) {\n        _super.call(this, graphic, renderer);\n        this.graphic = graphic;\n    }\n    GL_GraphicRenderable.prototype.onClear = function (event) {\n        _super.prototype.onClear.call(this, event);\n        this.graphic = null;\n    };\n    /**\n     *\n     * @returns {ElementsBase}\n     * @protected\n     */\n    GL_GraphicRenderable.prototype._pGetElements = function () {\n        this._offset = this.graphic.offset;\n        this._count = this.graphic.count;\n        return this._stage.getAbstraction((this.renderable.animator) ? this.renderable.animator.getRenderableElements(this, this.graphic.elements) : this.graphic.elements);\n    };\n    GL_GraphicRenderable.prototype._pGetSurface = function () {\n        return this._renderer.getSurfacePool(this.elementsGL).getAbstraction(this.graphic.material || DefaultMaterialManager_1.DefaultMaterialManager.getDefaultMaterial(this.renderable));\n    };\n    return GL_GraphicRenderable;\n}(GL_RenderableBase_1.GL_RenderableBase));\nexports.GL_GraphicRenderable = GL_GraphicRenderable;\n\n},{\"../renderables/GL_RenderableBase\":\"awayjs-renderergl/lib/renderables/GL_RenderableBase\",\"awayjs-display/lib/managers/DefaultMaterialManager\":undefined}],\"awayjs-renderergl/lib/renderables/GL_LineSegmentRenderable\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar LineElements_1 = require(\"awayjs-display/lib/graphics/LineElements\");\nvar DefaultMaterialManager_1 = require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\nvar GL_RenderableBase_1 = require(\"../renderables/GL_RenderableBase\");\n/**\n * @class away.pool.GL_LineSegmentRenderable\n */\nvar GL_LineSegmentRenderable = (function (_super) {\n    __extends(GL_LineSegmentRenderable, _super);\n    /**\n     * //TODO\n     *\n     * @param pool\n     * @param graphic\n     * @param level\n     * @param dataOffset\n     */\n    function GL_LineSegmentRenderable(lineSegment, renderer) {\n        _super.call(this, lineSegment, renderer);\n        this._lineSegment = lineSegment;\n    }\n    GL_LineSegmentRenderable.prototype.onClear = function (event) {\n        _super.prototype.onClear.call(this, event);\n        this._lineSegment = null;\n    };\n    /**\n     * //TODO\n     *\n     * @returns {base.LineElements}\n     * @protected\n     */\n    GL_LineSegmentRenderable.prototype._pGetElements = function () {\n        var elements = GL_LineSegmentRenderable._lineGraphics[this._lineSegment.id] || (GL_LineSegmentRenderable._lineGraphics[this._lineSegment.id] = new LineElements_1.LineElements());\n        var start = this._lineSegment.startPostion;\n        var end = this._lineSegment.endPosition;\n        var positions = new Float32Array(6);\n        var thickness = new Float32Array(1);\n        positions[0] = start.x;\n        positions[1] = start.y;\n        positions[2] = start.z;\n        positions[3] = end.x;\n        positions[4] = end.y;\n        positions[5] = end.z;\n        thickness[0] = this._lineSegment.thickness;\n        elements.setPositions(positions);\n        elements.setThickness(thickness);\n        return this._stage.getAbstraction(elements);\n    };\n    GL_LineSegmentRenderable.prototype._pGetSurface = function () {\n        return this._renderer.getSurfacePool(this.elementsGL).getAbstraction(this._lineSegment.material || DefaultMaterialManager_1.DefaultMaterialManager.getDefaultMaterial(this.renderable));\n    };\n    /**\n     * //TODO\n     *\n     * @param pool\n     * @param renderable\n     * @param level\n     * @param indexOffset\n     * @returns {away.pool.LineSubSpriteRenderable}\n     * @private\n     */\n    GL_LineSegmentRenderable.prototype._pGetOverflowRenderable = function (indexOffset) {\n        return new GL_LineSegmentRenderable(this.renderable, this._renderer);\n    };\n    GL_LineSegmentRenderable._lineGraphics = new Object();\n    return GL_LineSegmentRenderable;\n}(GL_RenderableBase_1.GL_RenderableBase));\nexports.GL_LineSegmentRenderable = GL_LineSegmentRenderable;\n\n},{\"../renderables/GL_RenderableBase\":\"awayjs-renderergl/lib/renderables/GL_RenderableBase\",\"awayjs-display/lib/graphics/LineElements\":undefined,\"awayjs-display/lib/managers/DefaultMaterialManager\":undefined}],\"awayjs-renderergl/lib/renderables/GL_RenderableBase\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AbstractMethodError_1 = require(\"awayjs-core/lib/errors/AbstractMethodError\");\nvar AssetEvent_1 = require(\"awayjs-core/lib/events/AssetEvent\");\nvar AbstractionBase_1 = require(\"awayjs-core/lib/library/AbstractionBase\");\nvar RenderableEvent_1 = require(\"awayjs-display/lib/events/RenderableEvent\");\n/**\n * @class RenderableListItem\n */\nvar GL_RenderableBase = (function (_super) {\n    __extends(GL_RenderableBase, _super);\n    /**\n     *\n     * @param renderable\n     * @param sourceEntity\n     * @param surface\n     * @param renderer\n     */\n    function GL_RenderableBase(renderable, renderer) {\n        var _this = this;\n        _super.call(this, renderable, renderer);\n        this._count = 0;\n        this._offset = 0;\n        this._elementsDirty = true;\n        this._surfaceDirty = true;\n        this.images = new Array();\n        this.samplers = new Array();\n        this._onInvalidateSurfaceDelegate = function (event) { return _this._onInvalidateSurface(event); };\n        this._onInvalidateElementsDelegate = function (event) { return _this.onInvalidateElements(event); };\n        //store a reference to the pool for later disposal\n        this._renderer = renderer;\n        this._stage = renderer.stage;\n        this.renderable = renderable;\n        this.renderable.addEventListener(RenderableEvent_1.RenderableEvent.INVALIDATE_SURFACE, this._onInvalidateSurfaceDelegate);\n        this.renderable.addEventListener(RenderableEvent_1.RenderableEvent.INVALIDATE_ELEMENTS, this._onInvalidateElementsDelegate);\n    }\n    Object.defineProperty(GL_RenderableBase.prototype, \"elementsGL\", {\n        get: function () {\n            if (this._elementsDirty)\n                this._updateElements();\n            return this._elementsGL;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GL_RenderableBase.prototype, \"surfaceGL\", {\n        get: function () {\n            if (this._surfaceDirty)\n                this._updateSurface();\n            return this._surfaceGL;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    GL_RenderableBase.prototype.onClear = function (event) {\n        _super.prototype.onClear.call(this, event);\n        this.next = null;\n        this.masksConfig = null;\n        this.renderSceneTransform = null;\n        this._renderer = null;\n        this._stage = null;\n        this.sourceEntity = null;\n        this.renderable.removeEventListener(RenderableEvent_1.RenderableEvent.INVALIDATE_SURFACE, this._onInvalidateSurfaceDelegate);\n        this.renderable.removeEventListener(RenderableEvent_1.RenderableEvent.INVALIDATE_ELEMENTS, this._onInvalidateElementsDelegate);\n        this.renderable = null;\n        this._surfaceGL.usages--;\n        if (!this._surfaceGL.usages)\n            this._surfaceGL.onClear(new AssetEvent_1.AssetEvent(AssetEvent_1.AssetEvent.CLEAR, this._surfaceGL.surface));\n        this._surfaceGL = null;\n        this._elementsGL = null;\n    };\n    GL_RenderableBase.prototype.onInvalidateElements = function (event) {\n        this._elementsDirty = true;\n    };\n    GL_RenderableBase.prototype._onInvalidateSurface = function (event) {\n        this._surfaceDirty = true;\n    };\n    GL_RenderableBase.prototype._pGetElements = function () {\n        throw new AbstractMethodError_1.AbstractMethodError();\n    };\n    GL_RenderableBase.prototype._pGetSurface = function () {\n        throw new AbstractMethodError_1.AbstractMethodError();\n    };\n    /**\n     * Renders an object to the current render target.\n     *\n     * @private\n     */\n    GL_RenderableBase.prototype._iRender = function (pass, camera, viewProjection) {\n        this._setRenderState(pass, camera, viewProjection);\n        this._elementsGL.draw(this, pass.shader, camera, viewProjection, this._count, this._offset);\n    };\n    GL_RenderableBase.prototype._setRenderState = function (pass, camera, viewProjection) {\n        if (this._elementsDirty)\n            this._updateElements();\n        pass._setRenderState(this, camera, viewProjection);\n        if (pass.shader.activeElements != this._elementsGL) {\n            pass.shader.activeElements = this._elementsGL;\n            this._elementsGL._setRenderState(this, pass.shader, camera, viewProjection);\n        }\n    };\n    /**\n     * //TODO\n     *\n     * @private\n     */\n    GL_RenderableBase.prototype._updateElements = function () {\n        this._elementsGL = this._pGetElements();\n        this._elementsDirty = false;\n    };\n    GL_RenderableBase.prototype._updateSurface = function () {\n        var surfaceGL = this._pGetSurface();\n        if (this._surfaceGL != surfaceGL) {\n            if (this._surfaceGL) {\n                this._surfaceGL.usages--;\n                //dispose current surfaceGL object\n                if (!this._surfaceGL.usages)\n                    this._surfaceGL.onClear(new AssetEvent_1.AssetEvent(AssetEvent_1.AssetEvent.CLEAR, this._surfaceGL.surface));\n            }\n            this._surfaceGL = surfaceGL;\n            this._surfaceGL.usages++;\n        }\n        //create a cache of image & sampler objects for the renderable\n        var numImages = surfaceGL.numImages;\n        this.images.length = numImages;\n        this.samplers.length = numImages;\n        this.uvMatrix = this.renderable.style ? this.renderable.style.uvMatrix : this._surfaceGL.surface.style ? this._surfaceGL.surface.style.uvMatrix : null;\n        var numTextures = this._surfaceGL.surface.getNumTextures();\n        var texture;\n        var numImages;\n        var image;\n        var sampler;\n        var index;\n        for (var i = 0; i < numTextures; i++) {\n            texture = this._surfaceGL.surface.getTextureAt(i);\n            numImages = texture.getNumImages();\n            for (var j = 0; j < numImages; j++) {\n                index = surfaceGL.getImageIndex(texture, j);\n                image = this.renderable.style ? this.renderable.style.getImageAt(texture, j) : null;\n                this.images[index] = image ? this._stage.getAbstraction(image) : null;\n                sampler = this.renderable.style ? this.renderable.style.getSamplerAt(texture, j) : null;\n                this.samplers[index] = sampler ? this._stage.getAbstraction(sampler) : null;\n            }\n        }\n        this._surfaceDirty = false;\n    };\n    return GL_RenderableBase;\n}(AbstractionBase_1.AbstractionBase));\nexports.GL_RenderableBase = GL_RenderableBase;\n\n},{\"awayjs-core/lib/errors/AbstractMethodError\":undefined,\"awayjs-core/lib/events/AssetEvent\":undefined,\"awayjs-core/lib/library/AbstractionBase\":undefined,\"awayjs-display/lib/events/RenderableEvent\":undefined}],\"awayjs-renderergl/lib/renderables/GL_SkyboxRenderable\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AttributesBuffer_1 = require(\"awayjs-core/lib/attributes/AttributesBuffer\");\nvar TriangleElements_1 = require(\"awayjs-display/lib/graphics/TriangleElements\");\nvar GL_RenderableBase_1 = require(\"../renderables/GL_RenderableBase\");\nvar GL_SkyboxElements_1 = require(\"../elements/GL_SkyboxElements\");\n/**\n * @class away.pool.GL_SkyboxRenderable\n */\nvar GL_SkyboxRenderable = (function (_super) {\n    __extends(GL_SkyboxRenderable, _super);\n    /**\n     * //TODO\n     *\n     * @param pool\n     * @param skybox\n     */\n    function GL_SkyboxRenderable(skybox, renderer) {\n        _super.call(this, skybox, renderer);\n        this._skybox = skybox;\n    }\n    /**\n     * //TODO\n     *\n     * @returns {away.base.TriangleElements}\n     * @private\n     */\n    GL_SkyboxRenderable.prototype._pGetElements = function () {\n        var elementsGL = GL_SkyboxRenderable._elementsGL;\n        if (!elementsGL) {\n            var elements = new TriangleElements_1.TriangleElements(new AttributesBuffer_1.AttributesBuffer(11, 4));\n            elements.autoDeriveNormals = false;\n            elements.autoDeriveTangents = false;\n            elements.setIndices(Array(0, 1, 2, 2, 3, 0, 6, 5, 4, 4, 7, 6, 2, 6, 7, 7, 3, 2, 4, 5, 1, 1, 0, 4, 4, 0, 3, 3, 7, 4, 2, 1, 5, 5, 6, 2));\n            elements.setPositions(Array(-1, 1, -1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1));\n            elementsGL = GL_SkyboxRenderable._elementsGL = new GL_SkyboxElements_1.GL_SkyboxElements(elements, this._stage);\n        }\n        return elementsGL;\n    };\n    GL_SkyboxRenderable.prototype._pGetSurface = function () {\n        return this._renderer.getSurfacePool(this.elementsGL).getAbstraction(this._skybox);\n    };\n    GL_SkyboxRenderable._iIncludeDependencies = function (shader) {\n    };\n    return GL_SkyboxRenderable;\n}(GL_RenderableBase_1.GL_RenderableBase));\nexports.GL_SkyboxRenderable = GL_SkyboxRenderable;\n\n},{\"../elements/GL_SkyboxElements\":\"awayjs-renderergl/lib/elements/GL_SkyboxElements\",\"../renderables/GL_RenderableBase\":\"awayjs-renderergl/lib/renderables/GL_RenderableBase\",\"awayjs-core/lib/attributes/AttributesBuffer\":undefined,\"awayjs-display/lib/graphics/TriangleElements\":undefined}],\"awayjs-renderergl/lib/renderables\":[function(require,module,exports){\n\"use strict\";\nvar GL_BillboardRenderable_1 = require(\"./renderables/GL_BillboardRenderable\");\nexports.GL_BillboardRenderable = GL_BillboardRenderable_1.GL_BillboardRenderable;\nvar GL_GraphicRenderable_1 = require(\"./renderables/GL_GraphicRenderable\");\nexports.GL_GraphicRenderable = GL_GraphicRenderable_1.GL_GraphicRenderable;\nvar GL_LineSegmentRenderable_1 = require(\"./renderables/GL_LineSegmentRenderable\");\nexports.GL_LineSegmentRenderable = GL_LineSegmentRenderable_1.GL_LineSegmentRenderable;\nvar GL_RenderableBase_1 = require(\"./renderables/GL_RenderableBase\");\nexports.GL_RenderableBase = GL_RenderableBase_1.GL_RenderableBase;\nvar GL_SkyboxRenderable_1 = require(\"./renderables/GL_SkyboxRenderable\");\nexports.GL_SkyboxRenderable = GL_SkyboxRenderable_1.GL_SkyboxRenderable;\n\n},{\"./renderables/GL_BillboardRenderable\":\"awayjs-renderergl/lib/renderables/GL_BillboardRenderable\",\"./renderables/GL_GraphicRenderable\":\"awayjs-renderergl/lib/renderables/GL_GraphicRenderable\",\"./renderables/GL_LineSegmentRenderable\":\"awayjs-renderergl/lib/renderables/GL_LineSegmentRenderable\",\"./renderables/GL_RenderableBase\":\"awayjs-renderergl/lib/renderables/GL_RenderableBase\",\"./renderables/GL_SkyboxRenderable\":\"awayjs-renderergl/lib/renderables/GL_SkyboxRenderable\"}],\"awayjs-renderergl/lib/shaders/LightingShader\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar LightSources_1 = require(\"awayjs-display/lib/materials/LightSources\");\nvar ContextGLProfile_1 = require(\"awayjs-stagegl/lib/base/ContextGLProfile\");\nvar ShaderBase_1 = require(\"../shaders/ShaderBase\");\nvar LightingCompiler_1 = require(\"../shaders/compilers/LightingCompiler\");\n/**\n * ShaderBase keeps track of the number of dependencies for \"named registers\" used across a pass.\n * Named registers are that are not necessarily limited to a single method. They are created by the compiler and\n * passed on to methods. The compiler uses the results to reserve usages through RegisterPool, which can be removed\n * each time a method has been compiled into the shader.\n *\n * @see RegisterPool.addUsage\n */\nvar LightingShader = (function (_super) {\n    __extends(LightingShader, _super);\n    /**\n     * Creates a new MethodCompilerVO object.\n     */\n    function LightingShader(elementsClass, lightingPass, stage) {\n        _super.call(this, elementsClass, lightingPass, stage);\n        this._includeCasters = true;\n        this._lightingPass = lightingPass;\n    }\n    LightingShader.prototype._iIncludeDependencies = function () {\n        this.numPointLights = this._lightingPass.numPointLights;\n        this.numDirectionalLights = this._lightingPass.numDirectionalLights;\n        this.numLightProbes = this._lightingPass.numLightProbes;\n        var numAllLights = this._lightingPass.numPointLights + this._lightingPass.numDirectionalLights;\n        var numLightProbes = this._lightingPass.numLightProbes;\n        var diffuseLightSources = this._lightingPass._iUsesDiffuse(this) ? this._lightingPass.diffuseLightSources : 0x00;\n        var specularLightSources = this._lightingPass._iUsesSpecular(this) ? this._lightingPass.specularLightSources : 0x00;\n        var combinedLightSources = diffuseLightSources | specularLightSources;\n        this.usesLightFallOff = this._lightingPass.enableLightFallOff && this.profile != ContextGLProfile_1.ContextGLProfile.BASELINE_CONSTRAINED;\n        this.usesCommonData = this.usesLightFallOff;\n        this.numLights = numAllLights + numLightProbes;\n        this.usesLights = numAllLights > 0 && (combinedLightSources & LightSources_1.LightSources.LIGHTS) != 0;\n        this.usesProbes = numLightProbes > 0 && (combinedLightSources & LightSources_1.LightSources.PROBES) != 0;\n        this.usesLightsForSpecular = numAllLights > 0 && (specularLightSources & LightSources_1.LightSources.LIGHTS) != 0;\n        this.usesProbesForSpecular = numLightProbes > 0 && (specularLightSources & LightSources_1.LightSources.PROBES) != 0;\n        this.usesLightsForDiffuse = numAllLights > 0 && (diffuseLightSources & LightSources_1.LightSources.LIGHTS) != 0;\n        this.usesProbesForDiffuse = numLightProbes > 0 && (diffuseLightSources & LightSources_1.LightSources.PROBES) != 0;\n        this.usesShadows = this._lightingPass._iUsesShadows(this);\n        //IMPORTANT this must occur after shader lighting initialisation above\n        _super.prototype._iIncludeDependencies.call(this);\n    };\n    /**\n     * Factory method to create a concrete compiler object for this object\n     *\n     * @param materialPassVO\n     * @returns {away.materials.LightingCompiler}\n     */\n    LightingShader.prototype.createCompiler = function (elementsClass, pass) {\n        return new LightingCompiler_1.LightingCompiler(elementsClass, pass, this);\n    };\n    /**\n     *\n     *\n     * @param renderable\n     * @param stage\n     * @param camera\n     */\n    LightingShader.prototype._setRenderState = function (renderable, camera, viewProjection) {\n        _super.prototype._setRenderState.call(this, renderable, camera, viewProjection);\n        if (this._lightingPass.lightPicker)\n            this._lightingPass.lightPicker.collectLights(renderable.sourceEntity);\n        if (this.usesLights)\n            this.updateLights();\n        if (this.usesProbes)\n            this.updateProbes();\n    };\n    /**\n     * Updates constant data render state used by the lights. This method is optional for subclasses to implement.\n     */\n    LightingShader.prototype.updateLights = function () {\n        var dirLight;\n        var pointLight;\n        var i = 0;\n        var k = 0;\n        var len;\n        var dirPos;\n        var total = 0;\n        var numLightTypes = this.usesShadows ? 2 : 1;\n        var l;\n        var offset;\n        this.ambientR = this.ambientG = this.ambientB = 0;\n        l = this.lightVertexConstantIndex;\n        k = this.lightFragmentConstantIndex;\n        var cast = 0;\n        var dirLights = this._lightingPass.lightPicker.directionalLights;\n        offset = this._lightingPass.directionalLightsOffset;\n        len = this._lightingPass.lightPicker.directionalLights.length;\n        if (offset > len) {\n            cast = 1;\n            offset -= len;\n        }\n        for (; cast < numLightTypes; ++cast) {\n            if (cast)\n                dirLights = this._lightingPass.lightPicker.castingDirectionalLights;\n            len = dirLights.length;\n            if (len > this.numDirectionalLights)\n                len = this.numDirectionalLights;\n            for (i = 0; i < len; ++i) {\n                dirLight = dirLights[offset + i];\n                dirPos = dirLight.sceneDirection;\n                this.ambientR += dirLight._iAmbientR;\n                this.ambientG += dirLight._iAmbientG;\n                this.ambientB += dirLight._iAmbientB;\n                if (this.usesTangentSpace) {\n                    var x = -dirPos.x;\n                    var y = -dirPos.y;\n                    var z = -dirPos.z;\n                    this.vertexConstantData[l++] = this._pInverseSceneMatrix[0] * x + this._pInverseSceneMatrix[4] * y + this._pInverseSceneMatrix[8] * z;\n                    this.vertexConstantData[l++] = this._pInverseSceneMatrix[1] * x + this._pInverseSceneMatrix[5] * y + this._pInverseSceneMatrix[9] * z;\n                    this.vertexConstantData[l++] = this._pInverseSceneMatrix[2] * x + this._pInverseSceneMatrix[6] * y + this._pInverseSceneMatrix[10] * z;\n                    this.vertexConstantData[l++] = 1;\n                }\n                else {\n                    this.fragmentConstantData[k++] = -dirPos.x;\n                    this.fragmentConstantData[k++] = -dirPos.y;\n                    this.fragmentConstantData[k++] = -dirPos.z;\n                    this.fragmentConstantData[k++] = 1;\n                }\n                this.fragmentConstantData[k++] = dirLight._iDiffuseR;\n                this.fragmentConstantData[k++] = dirLight._iDiffuseG;\n                this.fragmentConstantData[k++] = dirLight._iDiffuseB;\n                this.fragmentConstantData[k++] = 1;\n                this.fragmentConstantData[k++] = dirLight._iSpecularR;\n                this.fragmentConstantData[k++] = dirLight._iSpecularG;\n                this.fragmentConstantData[k++] = dirLight._iSpecularB;\n                this.fragmentConstantData[k++] = 1;\n                if (++total == this.numDirectionalLights) {\n                    // break loop\n                    i = len;\n                    cast = numLightTypes;\n                }\n            }\n        }\n        // more directional supported than currently picked, need to clamp all to 0\n        if (this.numDirectionalLights > total) {\n            i = k + (this.numDirectionalLights - total) * 12;\n            while (k < i)\n                this.fragmentConstantData[k++] = 0;\n        }\n        total = 0;\n        var pointLights = this._lightingPass.lightPicker.pointLights;\n        offset = this._lightingPass.pointLightsOffset;\n        len = this._lightingPass.lightPicker.pointLights.length;\n        if (offset > len) {\n            cast = 1;\n            offset -= len;\n        }\n        else {\n            cast = 0;\n        }\n        for (; cast < numLightTypes; ++cast) {\n            if (cast)\n                pointLights = this._lightingPass.lightPicker.castingPointLights;\n            len = pointLights.length;\n            for (i = 0; i < len; ++i) {\n                pointLight = pointLights[offset + i];\n                dirPos = pointLight.scenePosition;\n                this.ambientR += pointLight._iAmbientR;\n                this.ambientG += pointLight._iAmbientG;\n                this.ambientB += pointLight._iAmbientB;\n                if (this.usesTangentSpace) {\n                    x = dirPos.x;\n                    y = dirPos.y;\n                    z = dirPos.z;\n                    this.vertexConstantData[l++] = this._pInverseSceneMatrix[0] * x + this._pInverseSceneMatrix[4] * y + this._pInverseSceneMatrix[8] * z + this._pInverseSceneMatrix[12];\n                    this.vertexConstantData[l++] = this._pInverseSceneMatrix[1] * x + this._pInverseSceneMatrix[5] * y + this._pInverseSceneMatrix[9] * z + this._pInverseSceneMatrix[13];\n                    this.vertexConstantData[l++] = this._pInverseSceneMatrix[2] * x + this._pInverseSceneMatrix[6] * y + this._pInverseSceneMatrix[10] * z + this._pInverseSceneMatrix[14];\n                    this.vertexConstantData[l++] = 1;\n                }\n                else if (!this.usesGlobalPosFragment) {\n                    this.vertexConstantData[l++] = dirPos.x;\n                    this.vertexConstantData[l++] = dirPos.y;\n                    this.vertexConstantData[l++] = dirPos.z;\n                    this.vertexConstantData[l++] = 1;\n                }\n                else {\n                    this.fragmentConstantData[k++] = dirPos.x;\n                    this.fragmentConstantData[k++] = dirPos.y;\n                    this.fragmentConstantData[k++] = dirPos.z;\n                    this.fragmentConstantData[k++] = 1;\n                }\n                this.fragmentConstantData[k++] = pointLight._iDiffuseR;\n                this.fragmentConstantData[k++] = pointLight._iDiffuseG;\n                this.fragmentConstantData[k++] = pointLight._iDiffuseB;\n                var radius = pointLight._pRadius;\n                this.fragmentConstantData[k++] = radius * radius;\n                this.fragmentConstantData[k++] = pointLight._iSpecularR;\n                this.fragmentConstantData[k++] = pointLight._iSpecularG;\n                this.fragmentConstantData[k++] = pointLight._iSpecularB;\n                this.fragmentConstantData[k++] = pointLight._pFallOffFactor;\n                if (++total == this.numPointLights) {\n                    // break loop\n                    i = len;\n                    cast = numLightTypes;\n                }\n            }\n        }\n        // more directional supported than currently picked, need to clamp all to 0\n        if (this.numPointLights > total) {\n            i = k + (total - this.numPointLights) * 12;\n            for (; k < i; ++k)\n                this.fragmentConstantData[k] = 0;\n        }\n    };\n    /**\n     * Updates constant data render state used by the light probes. This method is optional for subclasses to implement.\n     */\n    LightingShader.prototype.updateProbes = function () {\n        var probe;\n        var lightProbes = this._lightingPass.lightPicker.lightProbes;\n        var weights = this._lightingPass.lightPicker.lightProbeWeights;\n        var len = lightProbes.length - this._lightingPass.lightProbesOffset;\n        var addDiff = this.usesProbesForDiffuse;\n        var addSpec = this.usesProbesForSpecular;\n        if (!(addDiff || addSpec))\n            return;\n        if (len > this.numLightProbes)\n            len = this.numLightProbes;\n        for (var i = 0; i < len; ++i) {\n            probe = lightProbes[this._lightingPass.lightProbesOffset + i];\n            if (addDiff)\n                this._stage.getAbstraction(probe.diffuseMap).activate(this.lightProbeDiffuseIndices[i], probe.diffuseSampler.mipmap);\n            if (addSpec)\n                this._stage.getAbstraction(probe.specularMap).activate(this.lightProbeSpecularIndices[i], probe.diffuseSampler.mipmap);\n        }\n        for (i = 0; i < len; ++i)\n            this.fragmentConstantData[this.probeWeightsIndex + i] = weights[this._lightingPass.lightProbesOffset + i];\n    };\n    return LightingShader;\n}(ShaderBase_1.ShaderBase));\nexports.LightingShader = LightingShader;\n\n},{\"../shaders/ShaderBase\":\"awayjs-renderergl/lib/shaders/ShaderBase\",\"../shaders/compilers/LightingCompiler\":\"awayjs-renderergl/lib/shaders/compilers/LightingCompiler\",\"awayjs-display/lib/materials/LightSources\":undefined,\"awayjs-stagegl/lib/base/ContextGLProfile\":undefined}],\"awayjs-renderergl/lib/shaders/RegisterPool\":[function(require,module,exports){\n\"use strict\";\nvar ShaderRegisterElement_1 = require(\"../shaders/ShaderRegisterElement\");\n/**\n * RegisterPool is used by the shader compilers process to keep track of which registers of a certain type are\n * currently used and should not be allowed to be written to. Either entire registers can be requested and locked,\n * or single components (x, y, z, w) of a single register.\n * It is used by ShaderRegisterCache to track usages of individual register types.\n *\n * @see away.materials.ShaderRegisterCache\n */\nvar RegisterPool = (function () {\n    /**\n     * Creates a new RegisterPool object.\n     * @param regName The base name of the register type (\"ft\" for fragment temporaries, \"vc\" for vertex constants, etc)\n     * @param regCount The amount of available registers of this type.\n     * @param persistent Whether or not registers, once reserved, can be freed again. For example, temporaries are not persistent, but constants are.\n     */\n    function RegisterPool(regName, regCount, persistent) {\n        if (persistent === void 0) { persistent = true; }\n        this._regName = regName;\n        this._regCount = regCount;\n        this._persistent = persistent;\n        this.initRegisters(regName, regCount);\n    }\n    /**\n     * Retrieve an entire vector register that's still available.\n     */\n    RegisterPool.prototype.requestFreeVectorReg = function () {\n        for (var i = 0; i < this._regCount; ++i) {\n            if (!this.isRegisterUsed(i)) {\n                if (this._persistent)\n                    this._usedVectorCount[i]++;\n                return this._vectorRegisters[i];\n            }\n        }\n        throw new Error(\"Register overflow!\");\n    };\n    /**\n     * Retrieve a single vector component that's still available.\n     */\n    RegisterPool.prototype.requestFreeRegComponent = function () {\n        for (var i = 0; i < this._regCount; ++i) {\n            if (this._usedVectorCount[i] > 0)\n                continue;\n            for (var j = 0; j < 4; ++j) {\n                if (this._usedSingleCount[j][i] == 0) {\n                    if (this._persistent)\n                        this._usedSingleCount[j][i]++;\n                    return this._registerComponents[j][i];\n                }\n            }\n        }\n        throw new Error(\"Register overflow!\");\n    };\n    /**\n     * Marks a register as used, so it cannot be retrieved. The register won't be able to be used until removeUsage\n     * has been called usageCount times again.\n     * @param register The register to mark as used.\n     * @param usageCount The amount of usages to add.\n     */\n    RegisterPool.prototype.addUsage = function (register, usageCount) {\n        if (register._component > -1)\n            this._usedSingleCount[register._component][register.index] += usageCount;\n        else\n            this._usedVectorCount[register.index] += usageCount;\n    };\n    /**\n     * Removes a usage from a register. When usages reach 0, the register is freed again.\n     * @param register The register for which to remove a usage.\n     */\n    RegisterPool.prototype.removeUsage = function (register) {\n        if (register._component > -1) {\n            if (--this._usedSingleCount[register._component][register.index] < 0)\n                throw new Error(\"More usages removed than exist!\");\n        }\n        else {\n            if (--this._usedVectorCount[register.index] < 0)\n                throw new Error(\"More usages removed than exist!\");\n        }\n    };\n    /**\n     * Disposes any resources used by the current RegisterPool object.\n     */\n    RegisterPool.prototype.dispose = function () {\n        this._vectorRegisters = null;\n        this._registerComponents = null;\n        this._usedSingleCount = null;\n        this._usedVectorCount = null;\n    };\n    /**\n     * Indicates whether or not any registers are in use.\n     */\n    RegisterPool.prototype.hasRegisteredRegs = function () {\n        for (var i = 0; i < this._regCount; ++i)\n            if (this.isRegisterUsed(i))\n                return true;\n        return false;\n    };\n    /**\n     * Initializes all registers.\n     */\n    RegisterPool.prototype.initRegisters = function (regName, regCount) {\n        var hash = RegisterPool._initPool(regName, regCount);\n        this._vectorRegisters = RegisterPool._regPool[hash];\n        this._registerComponents = RegisterPool._regCompsPool[hash];\n        this._usedVectorCount = this._initArray(Array(regCount), 0);\n        this._usedSingleCount = new Array(4);\n        this._usedSingleCount[0] = this._initArray(new Array(regCount), 0);\n        this._usedSingleCount[1] = this._initArray(new Array(regCount), 0);\n        this._usedSingleCount[2] = this._initArray(new Array(regCount), 0);\n        this._usedSingleCount[3] = this._initArray(new Array(regCount), 0);\n    };\n    RegisterPool._initPool = function (regName, regCount) {\n        var hash = regName + regCount;\n        if (RegisterPool._regPool[hash] != undefined)\n            return hash;\n        var vectorRegisters = new Array(regCount);\n        RegisterPool._regPool[hash] = vectorRegisters;\n        var registerComponents = [\n            [],\n            [],\n            [],\n            []\n        ];\n        RegisterPool._regCompsPool[hash] = registerComponents;\n        for (var i = 0; i < regCount; ++i) {\n            vectorRegisters[i] = new ShaderRegisterElement_1.ShaderRegisterElement(regName, i);\n            for (var j = 0; j < 4; ++j)\n                registerComponents[j][i] = new ShaderRegisterElement_1.ShaderRegisterElement(regName, i, j);\n        }\n        return hash;\n    };\n    /**\n     * Check if the temp register is either used for single or vector use\n     */\n    RegisterPool.prototype.isRegisterUsed = function (index) {\n        if (this._usedVectorCount[index] > 0)\n            return true;\n        for (var i = 0; i < 4; ++i)\n            if (this._usedSingleCount[i][index] > 0)\n                return true;\n        return false;\n    };\n    RegisterPool.prototype._initArray = function (a, val) {\n        var l = a.length;\n        for (var c = 0; c < l; c++)\n            a[c] = val;\n        return a;\n    };\n    RegisterPool._regPool = new Object();\n    RegisterPool._regCompsPool = new Object();\n    return RegisterPool;\n}());\nexports.RegisterPool = RegisterPool;\n\n},{\"../shaders/ShaderRegisterElement\":\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\"}],\"awayjs-renderergl/lib/shaders/ShaderBase\":[function(require,module,exports){\n\"use strict\";\nvar BlendMode_1 = require(\"awayjs-core/lib/image/BlendMode\");\nvar ArgumentError_1 = require(\"awayjs-core/lib/errors/ArgumentError\");\nvar ContextGLBlendFactor_1 = require(\"awayjs-stagegl/lib/base/ContextGLBlendFactor\");\nvar ContextGLCompareMode_1 = require(\"awayjs-stagegl/lib/base/ContextGLCompareMode\");\nvar ContextGLTriangleFace_1 = require(\"awayjs-stagegl/lib/base/ContextGLTriangleFace\");\nvar CompilerBase_1 = require(\"../shaders/compilers/CompilerBase\");\n/**\n * ShaderBase keeps track of the number of dependencies for \"named registers\" used across a pass.\n * Named registers are that are not necessarily limited to a single method. They are created by the compiler and\n * passed on to methods. The compiler uses the results to reserve usages through RegisterPool, which can be removed\n * each time a method has been compiled into the shader.\n *\n * @see RegisterPool.addUsage\n */\nvar ShaderBase = (function () {\n    /**\n     * Creates a new MethodCompilerVO object.\n     */\n    function ShaderBase(elementsClass, pass, stage) {\n        this._abstractionPool = new Object();\n        this._blendFactorSource = ContextGLBlendFactor_1.ContextGLBlendFactor.ONE;\n        this._blendFactorDest = ContextGLBlendFactor_1.ContextGLBlendFactor.ZERO;\n        this._invalidProgram = true;\n        this._animationVertexCode = \"\";\n        this._animationFragmentCode = \"\";\n        this.usesBlending = false;\n        this.useImageRect = false;\n        this.usesCurves = false;\n        /**\n         * The depth compare mode used to render the renderables using this material.\n         *\n         * @see away.stagegl.ContextGLCompareMode\n         */\n        this.depthCompareMode = ContextGLCompareMode_1.ContextGLCompareMode.LESS;\n        /**\n         * Indicate whether the shader should write to the depth buffer or not. Ignored when blending is enabled.\n         */\n        this.writeDepth = true;\n        this._defaultCulling = ContextGLTriangleFace_1.ContextGLTriangleFace.BACK;\n        this._pInverseSceneMatrix = new Float32Array(16);\n        //set ambient values to default\n        this.ambientR = 0xFF;\n        this.ambientG = 0xFF;\n        this.ambientB = 0xFF;\n        /**\n         * Indicates whether there are any dependencies on the world-space position vector.\n         */\n        this.usesGlobalPosFragment = false;\n        /**\n         * Indicates whether there are any dependencies on the local position vector.\n         */\n        this.usesPositionFragment = false;\n        /**\n         *\n         */\n        this.imageIndices = new Array();\n        this._elementsClass = elementsClass;\n        this._pass = pass;\n        this._stage = stage;\n        this.profile = this._stage.profile;\n    }\n    Object.defineProperty(ShaderBase.prototype, \"programData\", {\n        get: function () {\n            if (this._invalidProgram)\n                this._updateProgram();\n            return this._programData;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ShaderBase.prototype, \"usesAnimation\", {\n        get: function () {\n            return this._usesAnimation;\n        },\n        set: function (value) {\n            if (this._usesAnimation == value)\n                return;\n            this._usesAnimation = value;\n            this.invalidateProgram();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ShaderBase.prototype, \"numUsedVertexConstants\", {\n        get: function () {\n            if (this._invalidProgram)\n                this._updateProgram();\n            return this._numUsedVertexConstants;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ShaderBase.prototype, \"numUsedFragmentConstants\", {\n        get: function () {\n            if (this._invalidProgram)\n                this._updateProgram();\n            return this._numUsedFragmentConstants;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ShaderBase.prototype, \"numUsedStreams\", {\n        /**\n         * The amount of used vertex streams in the vertex code. Used by the animation code generation to know from which index on streams are available.\n         */\n        get: function () {\n            if (this._invalidProgram)\n                this._updateProgram();\n            return this._numUsedStreams;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ShaderBase.prototype, \"numUsedTextures\", {\n        /**\n         *\n         */\n        get: function () {\n            if (this._invalidProgram)\n                this._updateProgram();\n            return this._numUsedTextures;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ShaderBase.prototype.getAbstraction = function (texture) {\n        return (this._abstractionPool[texture.id] || (this._abstractionPool[texture.id] = new ShaderBase._abstractionClassPool[texture.assetType](texture, this)));\n    };\n    /**\n     *\n     * @param image\n     */\n    ShaderBase.prototype.clearAbstraction = function (texture) {\n        this._abstractionPool[texture.id] = null;\n    };\n    /**\n     *\n     * @param imageObjectClass\n     */\n    ShaderBase.registerAbstraction = function (gl_assetClass, assetClass) {\n        ShaderBase._abstractionClassPool[assetClass.assetType] = gl_assetClass;\n    };\n    ShaderBase.prototype.getImageIndex = function (texture, index) {\n        if (index === void 0) { index = 0; }\n        return this._pass.getImageIndex(texture, index);\n    };\n    ShaderBase.prototype._iIncludeDependencies = function () {\n        this._pass._iIncludeDependencies(this);\n    };\n    /**\n     * Factory method to create a concrete compiler object for this object\n     *\n     * @param elementsClass\n     * @param pass\n     * @param stage\n     * @returns {CompilerBase}\n     */\n    ShaderBase.prototype.createCompiler = function (elementsClass, pass) {\n        return new CompilerBase_1.CompilerBase(elementsClass, pass, this);\n    };\n    /**\n     * Clears dependency counts for all registers. Called when recompiling a pass.\n     */\n    ShaderBase.prototype.reset = function () {\n        this.projectionDependencies = 0;\n        this.normalDependencies = 0;\n        this.colorDependencies = 0;\n        this.viewDirDependencies = 0;\n        this.uvDependencies = 0;\n        this.secondaryUVDependencies = 0;\n        this.globalPosDependencies = 0;\n        this.tangentDependencies = 0;\n        this.usesCommonData = false;\n        this.usesGlobalPosFragment = false;\n        this.usesPositionFragment = false;\n        this.usesFragmentAnimation = false;\n        this.usesTangentSpace = false;\n        this.outputsNormals = false;\n        this.outputsTangentNormals = false;\n    };\n    ShaderBase.prototype.pInitRegisterIndices = function () {\n        this.commonsDataIndex = -1;\n        this.cameraPositionIndex = -1;\n        this.curvesIndex = -1;\n        this.uvIndex = -1;\n        this.uvMatrixIndex = -1;\n        this.colorTransformIndex = -1;\n        this.secondaryUVIndex = -1;\n        this.normalIndex = -1;\n        this.colorBufferIndex = -1;\n        this.tangentIndex = -1;\n        this.sceneMatrixIndex = -1;\n        this.sceneNormalMatrixIndex = -1;\n        this.jointIndexIndex = -1;\n        this.jointWeightIndex = -1;\n        this.imageIndices.length = 0;\n    };\n    /**\n     * Initializes the unchanging constant data for this shader object.\n     */\n    ShaderBase.prototype.initConstantData = function (registerCache) {\n        //Updates the amount of used register indices.\n        this._numUsedVertexConstants = registerCache.numUsedVertexConstants;\n        this._numUsedFragmentConstants = registerCache.numUsedFragmentConstants;\n        this._numUsedStreams = registerCache.numUsedStreams;\n        this._numUsedTextures = registerCache.numUsedTextures;\n        this.vertexConstantData = new Float32Array(registerCache.numUsedVertexConstants * 4);\n        this.fragmentConstantData = new Float32Array(registerCache.numUsedFragmentConstants * 4);\n        //Initializes commonly required constant values.\n        if (this.commonsDataIndex >= 0) {\n            this.fragmentConstantData[this.commonsDataIndex] = .5;\n            this.fragmentConstantData[this.commonsDataIndex + 1] = 0;\n            this.fragmentConstantData[this.commonsDataIndex + 2] = 1 / 255;\n            this.fragmentConstantData[this.commonsDataIndex + 3] = 1;\n        }\n        //Initializes the default UV transformation matrix.\n        if (this.uvMatrixIndex >= 0) {\n            this.vertexConstantData[this.uvMatrixIndex] = 1;\n            this.vertexConstantData[this.uvMatrixIndex + 1] = 0;\n            this.vertexConstantData[this.uvMatrixIndex + 2] = 0;\n            this.vertexConstantData[this.uvMatrixIndex + 3] = 0;\n            this.vertexConstantData[this.uvMatrixIndex + 4] = 0;\n            this.vertexConstantData[this.uvMatrixIndex + 5] = 1;\n            this.vertexConstantData[this.uvMatrixIndex + 6] = 0;\n            this.vertexConstantData[this.uvMatrixIndex + 7] = 0;\n        }\n        //Initializes the default colorTransform.\n        if (this.colorTransformIndex >= 0) {\n            this.fragmentConstantData[this.colorTransformIndex] = 1;\n            this.fragmentConstantData[this.colorTransformIndex + 1] = 1;\n            this.fragmentConstantData[this.colorTransformIndex + 2] = 1;\n            this.fragmentConstantData[this.colorTransformIndex + 3] = 1;\n            this.fragmentConstantData[this.colorTransformIndex + 4] = 0;\n            this.fragmentConstantData[this.colorTransformIndex + 5] = 0;\n            this.fragmentConstantData[this.colorTransformIndex + 6] = 0;\n            this.fragmentConstantData[this.colorTransformIndex + 7] = 0;\n        }\n        if (this.cameraPositionIndex >= 0)\n            this.vertexConstantData[this.cameraPositionIndex + 3] = 1;\n        // init constant data in pass\n        this._pass._iInitConstantData(this);\n        //init constant data in animation\n        if (this.usesAnimation)\n            this._pass.animationSet.doneAGALCode(this);\n    };\n    /**\n     * The blend mode to use when drawing this renderable. The following blend modes are supported:\n     * <ul>\n     * <li>BlendMode.NORMAL: No blending, unless the material inherently needs it</li>\n     * <li>BlendMode.LAYER: Force blending. This will draw the object the same as NORMAL, but without writing depth writes.</li>\n     * <li>BlendMode.MULTIPLY</li>\n     * <li>BlendMode.ADD</li>\n     * <li>BlendMode.ALPHA</li>\n     * </ul>\n     */\n    ShaderBase.prototype.setBlendMode = function (value) {\n        switch (value) {\n            case BlendMode_1.BlendMode.NORMAL:\n                this._blendFactorSource = ContextGLBlendFactor_1.ContextGLBlendFactor.ONE;\n                this._blendFactorDest = ContextGLBlendFactor_1.ContextGLBlendFactor.ZERO;\n                this.usesBlending = false;\n                break;\n            case BlendMode_1.BlendMode.LAYER:\n                this._blendFactorSource = ContextGLBlendFactor_1.ContextGLBlendFactor.SOURCE_ALPHA;\n                this._blendFactorDest = ContextGLBlendFactor_1.ContextGLBlendFactor.ONE_MINUS_SOURCE_ALPHA;\n                this.usesBlending = true;\n                break;\n            case BlendMode_1.BlendMode.MULTIPLY:\n                this._blendFactorSource = ContextGLBlendFactor_1.ContextGLBlendFactor.ZERO;\n                this._blendFactorDest = ContextGLBlendFactor_1.ContextGLBlendFactor.SOURCE_COLOR;\n                this.usesBlending = true;\n                break;\n            case BlendMode_1.BlendMode.ADD:\n                this._blendFactorSource = ContextGLBlendFactor_1.ContextGLBlendFactor.SOURCE_ALPHA;\n                this._blendFactorDest = ContextGLBlendFactor_1.ContextGLBlendFactor.ONE;\n                this.usesBlending = true;\n                break;\n            case BlendMode_1.BlendMode.ALPHA:\n                this._blendFactorSource = ContextGLBlendFactor_1.ContextGLBlendFactor.ZERO;\n                this._blendFactorDest = ContextGLBlendFactor_1.ContextGLBlendFactor.SOURCE_ALPHA;\n                this.usesBlending = true;\n                break;\n            default:\n                throw new ArgumentError_1.ArgumentError(\"Unsupported blend mode!\");\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    ShaderBase.prototype._iActivate = function (camera) {\n        this._stage.context.setCulling(this.useBothSides ? ContextGLTriangleFace_1.ContextGLTriangleFace.NONE : this._defaultCulling, camera.projection.coordinateSystem);\n        if (!this.usesTangentSpace && this.cameraPositionIndex >= 0) {\n            var pos = camera.scenePosition;\n            this.vertexConstantData[this.cameraPositionIndex] = pos.x;\n            this.vertexConstantData[this.cameraPositionIndex + 1] = pos.y;\n            this.vertexConstantData[this.cameraPositionIndex + 2] = pos.z;\n        }\n        this._stage.context.setDepthTest((this.writeDepth && !this.usesBlending), this.depthCompareMode);\n        if (this.usesBlending)\n            this._stage.context.setBlendFactors(this._blendFactorSource, this._blendFactorDest);\n        this.activeElements = null;\n    };\n    /**\n     * @inheritDoc\n     */\n    ShaderBase.prototype._iDeactivate = function () {\n        //For the love of god don't remove this if you want your multi-material shadows to not flicker like shit\n        this._stage.context.setDepthTest(true, ContextGLCompareMode_1.ContextGLCompareMode.LESS);\n        this.activeElements = null;\n    };\n    /**\n     *\n     *\n     * @param renderable\n     * @param stage\n     * @param camera\n     */\n    ShaderBase.prototype._setRenderState = function (renderable, camera, viewProjection) {\n        if (renderable.renderable.animator)\n            renderable.renderable.animator.setRenderState(this, renderable, this._stage, camera);\n        if (this.usesUVTransform) {\n            var uvMatrix = renderable.uvMatrix;\n            if (uvMatrix) {\n                this.vertexConstantData[this.uvMatrixIndex] = uvMatrix.a;\n                this.vertexConstantData[this.uvMatrixIndex + 1] = uvMatrix.b;\n                this.vertexConstantData[this.uvMatrixIndex + 3] = uvMatrix.tx;\n                this.vertexConstantData[this.uvMatrixIndex + 4] = uvMatrix.c;\n                this.vertexConstantData[this.uvMatrixIndex + 5] = uvMatrix.d;\n                this.vertexConstantData[this.uvMatrixIndex + 7] = uvMatrix.ty;\n            }\n            else {\n                this.vertexConstantData[this.uvMatrixIndex] = 1;\n                this.vertexConstantData[this.uvMatrixIndex + 1] = 0;\n                this.vertexConstantData[this.uvMatrixIndex + 3] = 0;\n                this.vertexConstantData[this.uvMatrixIndex + 4] = 0;\n                this.vertexConstantData[this.uvMatrixIndex + 5] = 1;\n                this.vertexConstantData[this.uvMatrixIndex + 7] = 0;\n            }\n        }\n        if (this.usesColorTransform) {\n            var colorTransform = renderable.sourceEntity._iAssignedColorTransform();\n            if (colorTransform) {\n                this.fragmentConstantData[this.colorTransformIndex] = colorTransform.redMultiplier;\n                this.fragmentConstantData[this.colorTransformIndex + 1] = colorTransform.greenMultiplier;\n                this.fragmentConstantData[this.colorTransformIndex + 2] = colorTransform.blueMultiplier;\n                this.fragmentConstantData[this.colorTransformIndex + 3] = colorTransform.alphaMultiplier;\n                this.fragmentConstantData[this.colorTransformIndex + 4] = colorTransform.redOffset / 255;\n                this.fragmentConstantData[this.colorTransformIndex + 5] = colorTransform.greenOffset / 255;\n                this.fragmentConstantData[this.colorTransformIndex + 6] = colorTransform.blueOffset / 255;\n                this.fragmentConstantData[this.colorTransformIndex + 7] = colorTransform.alphaOffset / 255;\n            }\n            else {\n                this.fragmentConstantData[this.colorTransformIndex] = 1;\n                this.fragmentConstantData[this.colorTransformIndex + 1] = 1;\n                this.fragmentConstantData[this.colorTransformIndex + 2] = 1;\n                this.fragmentConstantData[this.colorTransformIndex + 3] = 1;\n                this.fragmentConstantData[this.colorTransformIndex + 4] = 0;\n                this.fragmentConstantData[this.colorTransformIndex + 5] = 0;\n                this.fragmentConstantData[this.colorTransformIndex + 6] = 0;\n                this.fragmentConstantData[this.colorTransformIndex + 7] = 0;\n            }\n        }\n        if (this.sceneNormalMatrixIndex >= 0)\n            renderable.sourceEntity.inverseSceneTransform.copyRawDataTo(this.vertexConstantData, this.sceneNormalMatrixIndex, false);\n        if (this.usesTangentSpace && this.cameraPositionIndex >= 0) {\n            renderable.sourceEntity.inverseSceneTransform.copyRawDataTo(this._pInverseSceneMatrix);\n            var pos = camera.scenePosition;\n            var x = pos.x;\n            var y = pos.y;\n            var z = pos.z;\n            this.vertexConstantData[this.cameraPositionIndex] = this._pInverseSceneMatrix[0] * x + this._pInverseSceneMatrix[4] * y + this._pInverseSceneMatrix[8] * z + this._pInverseSceneMatrix[12];\n            this.vertexConstantData[this.cameraPositionIndex + 1] = this._pInverseSceneMatrix[1] * x + this._pInverseSceneMatrix[5] * y + this._pInverseSceneMatrix[9] * z + this._pInverseSceneMatrix[13];\n            this.vertexConstantData[this.cameraPositionIndex + 2] = this._pInverseSceneMatrix[2] * x + this._pInverseSceneMatrix[6] * y + this._pInverseSceneMatrix[10] * z + this._pInverseSceneMatrix[14];\n        }\n    };\n    ShaderBase.prototype.invalidateProgram = function () {\n        this._invalidProgram = true;\n    };\n    ShaderBase.prototype.dispose = function () {\n        this._programData.dispose();\n        this._programData = null;\n    };\n    ShaderBase.prototype._updateProgram = function () {\n        this._invalidProgram = false;\n        var compiler = this.createCompiler(this._elementsClass, this._pass);\n        compiler.compile();\n        this._calcAnimationCode(compiler._pRegisterCache, compiler.shadedTarget, compiler._pSharedRegisters);\n        //initialise the required shader constants\n        this.initConstantData(compiler._pRegisterCache);\n        var programData = this._stage.getProgramData(this._animationVertexCode + compiler.vertexCode, compiler.fragmentCode + this._animationFragmentCode + compiler.postAnimationFragmentCode);\n        //check program data hasn't changed, keep count of program usages\n        if (this._programData != programData) {\n            if (this._programData)\n                this._programData.dispose();\n            this._programData = programData;\n            programData.usages++;\n        }\n    };\n    ShaderBase.prototype._calcAnimationCode = function (registerCache, shadedTarget, sharedRegisters) {\n        //reset code\n        this._animationVertexCode = \"\";\n        this._animationFragmentCode = \"\";\n        //check to see if GPU animation is used\n        if (this.usesAnimation) {\n            var animationSet = this._pass.animationSet;\n            this._animationVertexCode += animationSet.getAGALVertexCode(this, registerCache, sharedRegisters);\n            if (this.uvDependencies > 0 && !this.usesUVTransform)\n                this._animationVertexCode += animationSet.getAGALUVCode(this, registerCache, sharedRegisters);\n            if (this.usesFragmentAnimation)\n                this._animationFragmentCode += animationSet.getAGALFragmentCode(this, registerCache, shadedTarget);\n        }\n        else {\n            // simply write attributes to targets, do not animate them\n            // projection will pick up on targets[0] to do the projection\n            var len = sharedRegisters.animatableAttributes.length;\n            for (var i = 0; i < len; ++i)\n                this._animationVertexCode += \"mov \" + sharedRegisters.animationTargetRegisters[i] + \", \" + sharedRegisters.animatableAttributes[i] + \"\\n\";\n            if (this.uvDependencies > 0 && !this.usesUVTransform)\n                this._animationVertexCode += \"mov \" + sharedRegisters.uvTarget + \",\" + sharedRegisters.uvSource + \"\\n\";\n        }\n    };\n    ShaderBase.prototype.setVertexConst = function (index, x, y, z, w) {\n        if (x === void 0) { x = 0; }\n        if (y === void 0) { y = 0; }\n        if (z === void 0) { z = 0; }\n        if (w === void 0) { w = 0; }\n        index *= 4;\n        this.vertexConstantData[index++] = x;\n        this.vertexConstantData[index++] = y;\n        this.vertexConstantData[index++] = z;\n        this.vertexConstantData[index] = w;\n    };\n    ShaderBase.prototype.setVertexConstFromArray = function (index, data) {\n        index *= 4;\n        for (var i = 0; i < data.length; i++)\n            this.vertexConstantData[index++] = data[i];\n    };\n    ShaderBase.prototype.setVertexConstFromMatrix = function (index, matrix) {\n        index *= 4;\n        var rawData = matrix.rawData;\n        this.vertexConstantData[index++] = rawData[0];\n        this.vertexConstantData[index++] = rawData[4];\n        this.vertexConstantData[index++] = rawData[8];\n        this.vertexConstantData[index++] = rawData[12];\n        this.vertexConstantData[index++] = rawData[1];\n        this.vertexConstantData[index++] = rawData[5];\n        this.vertexConstantData[index++] = rawData[9];\n        this.vertexConstantData[index++] = rawData[13];\n        this.vertexConstantData[index++] = rawData[2];\n        this.vertexConstantData[index++] = rawData[6];\n        this.vertexConstantData[index++] = rawData[10];\n        this.vertexConstantData[index++] = rawData[14];\n        this.vertexConstantData[index++] = rawData[3];\n        this.vertexConstantData[index++] = rawData[7];\n        this.vertexConstantData[index++] = rawData[11];\n        this.vertexConstantData[index] = rawData[15];\n    };\n    ShaderBase.prototype.setFragmentConst = function (index, x, y, z, w) {\n        if (x === void 0) { x = 0; }\n        if (y === void 0) { y = 0; }\n        if (z === void 0) { z = 0; }\n        if (w === void 0) { w = 0; }\n        index *= 4;\n        this.fragmentConstantData[index++] = x;\n        this.fragmentConstantData[index++] = y;\n        this.fragmentConstantData[index++] = z;\n        this.fragmentConstantData[index] = w;\n    };\n    ShaderBase._abstractionClassPool = new Object();\n    return ShaderBase;\n}());\nexports.ShaderBase = ShaderBase;\n\n},{\"../shaders/compilers/CompilerBase\":\"awayjs-renderergl/lib/shaders/compilers/CompilerBase\",\"awayjs-core/lib/errors/ArgumentError\":undefined,\"awayjs-core/lib/image/BlendMode\":undefined,\"awayjs-stagegl/lib/base/ContextGLBlendFactor\":undefined,\"awayjs-stagegl/lib/base/ContextGLCompareMode\":undefined,\"awayjs-stagegl/lib/base/ContextGLTriangleFace\":undefined}],\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\":[function(require,module,exports){\n\"use strict\";\nvar RegisterPool_1 = require(\"../shaders/RegisterPool\");\nvar ShaderRegisterElement_1 = require(\"../shaders/ShaderRegisterElement\");\n/**\n * ShaderRegister Cache provides the usage management system for all registers during shading compilers.\n */\nvar ShaderRegisterCache = (function () {\n    /**\n     * Create a new ShaderRegisterCache object.\n     *\n     * @param profile The compatibility profile used by the renderer.\n     */\n    function ShaderRegisterCache(profile) {\n        this._numUsedVertexConstants = 0;\n        this._numUsedFragmentConstants = 0;\n        this._numUsedStreams = 0;\n        this._numUsedTextures = 0;\n        this._numUsedVaryings = 0;\n        this._profile = profile;\n        this.reset();\n    }\n    /**\n     * Resets all registers.\n     */\n    ShaderRegisterCache.prototype.reset = function () {\n        this._fragmentTempCache = new RegisterPool_1.RegisterPool(\"ft\", 8, false);\n        this._vertexTempCache = new RegisterPool_1.RegisterPool(\"vt\", 8, false);\n        this._varyingCache = new RegisterPool_1.RegisterPool(\"v\", 8);\n        this._textureCache = new RegisterPool_1.RegisterPool(\"fs\", 8);\n        this._vertexAttributesCache = new RegisterPool_1.RegisterPool(\"va\", 8);\n        this._fragmentConstantsCache = new RegisterPool_1.RegisterPool(\"fc\", 28);\n        this._vertexConstantsCache = new RegisterPool_1.RegisterPool(\"vc\", 128);\n        this._fragmentOutputRegister = new ShaderRegisterElement_1.ShaderRegisterElement(\"oc\", -1);\n        this._vertexOutputRegister = new ShaderRegisterElement_1.ShaderRegisterElement(\"op\", -1);\n        this._numUsedVertexConstants = 0;\n        this._numUsedStreams = 0;\n        this._numUsedTextures = 0;\n        this._numUsedVaryings = 0;\n        this._numUsedFragmentConstants = 0;\n    };\n    /**\n     * Disposes all resources used.\n     */\n    ShaderRegisterCache.prototype.dispose = function () {\n        this._fragmentTempCache.dispose();\n        this._vertexTempCache.dispose();\n        this._varyingCache.dispose();\n        this._fragmentConstantsCache.dispose();\n        this._vertexAttributesCache.dispose();\n        this._fragmentTempCache = null;\n        this._vertexTempCache = null;\n        this._varyingCache = null;\n        this._fragmentConstantsCache = null;\n        this._vertexAttributesCache = null;\n        this._fragmentOutputRegister = null;\n        this._vertexOutputRegister = null;\n    };\n    /**\n     * Marks a fragment temporary register as used, so it cannot be retrieved. The register won't be able to be used until removeUsage\n     * has been called usageCount times again.\n     * @param register The register to mark as used.\n     * @param usageCount The amount of usages to add.\n     */\n    ShaderRegisterCache.prototype.addFragmentTempUsages = function (register, usageCount) {\n        this._fragmentTempCache.addUsage(register, usageCount);\n    };\n    /**\n     * Removes a usage from a fragment temporary register. When usages reach 0, the register is freed again.\n     * @param register The register for which to remove a usage.\n     */\n    ShaderRegisterCache.prototype.removeFragmentTempUsage = function (register) {\n        this._fragmentTempCache.removeUsage(register);\n    };\n    /**\n     * Marks a vertex temporary register as used, so it cannot be retrieved. The register won't be able to be used\n     * until removeUsage has been called usageCount times again.\n     * @param register The register to mark as used.\n     * @param usageCount The amount of usages to add.\n     */\n    ShaderRegisterCache.prototype.addVertexTempUsages = function (register, usageCount) {\n        this._vertexTempCache.addUsage(register, usageCount);\n    };\n    /**\n     * Removes a usage from a vertex temporary register. When usages reach 0, the register is freed again.\n     * @param register The register for which to remove a usage.\n     */\n    ShaderRegisterCache.prototype.removeVertexTempUsage = function (register) {\n        this._vertexTempCache.removeUsage(register);\n    };\n    /**\n     * Retrieve an entire fragment temporary register that's still available. The register won't be able to be used until removeUsage\n     * has been called usageCount times again.\n     */\n    ShaderRegisterCache.prototype.getFreeFragmentVectorTemp = function () {\n        return this._fragmentTempCache.requestFreeVectorReg();\n    };\n    /**\n     * Retrieve a single component from a fragment temporary register that's still available.\n     */\n    ShaderRegisterCache.prototype.getFreeFragmentSingleTemp = function () {\n        return this._fragmentTempCache.requestFreeRegComponent();\n    };\n    /**\n     * Retrieve an available varying register\n     */\n    ShaderRegisterCache.prototype.getFreeVarying = function () {\n        ++this._numUsedVaryings;\n        return this._varyingCache.requestFreeVectorReg();\n    };\n    /**\n     * Retrieve an available fragment constant register\n     */\n    ShaderRegisterCache.prototype.getFreeFragmentConstant = function () {\n        ++this._numUsedFragmentConstants;\n        return this._fragmentConstantsCache.requestFreeVectorReg();\n    };\n    /**\n     * Retrieve an available vertex constant register\n     */\n    ShaderRegisterCache.prototype.getFreeVertexConstant = function () {\n        ++this._numUsedVertexConstants;\n        return this._vertexConstantsCache.requestFreeVectorReg();\n    };\n    /**\n     * Retrieve an entire vertex temporary register that's still available.\n     */\n    ShaderRegisterCache.prototype.getFreeVertexVectorTemp = function () {\n        return this._vertexTempCache.requestFreeVectorReg();\n    };\n    /**\n     * Retrieve a single component from a vertex temporary register that's still available.\n     */\n    ShaderRegisterCache.prototype.getFreeVertexSingleTemp = function () {\n        return this._vertexTempCache.requestFreeRegComponent();\n    };\n    /**\n     * Retrieve an available vertex attribute register\n     */\n    ShaderRegisterCache.prototype.getFreeVertexAttribute = function () {\n        ++this._numUsedStreams;\n        return this._vertexAttributesCache.requestFreeVectorReg();\n    };\n    /**\n     * Retrieve an available texture register\n     */\n    ShaderRegisterCache.prototype.getFreeTextureReg = function () {\n        ++this._numUsedTextures;\n        return this._textureCache.requestFreeVectorReg();\n    };\n    Object.defineProperty(ShaderRegisterCache.prototype, \"fragmentOutputRegister\", {\n        /**\n         * The fragment output register.\n         */\n        get: function () {\n            return this._fragmentOutputRegister;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ShaderRegisterCache.prototype, \"numUsedVertexConstants\", {\n        /**\n         * The amount of used vertex constant registers.\n         */\n        get: function () {\n            return this._numUsedVertexConstants;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ShaderRegisterCache.prototype, \"numUsedFragmentConstants\", {\n        /**\n         * The amount of used fragment constant registers.\n         */\n        get: function () {\n            return this._numUsedFragmentConstants;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ShaderRegisterCache.prototype, \"numUsedStreams\", {\n        /**\n         * The amount of used vertex streams.\n         */\n        get: function () {\n            return this._numUsedStreams;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ShaderRegisterCache.prototype, \"numUsedTextures\", {\n        /**\n         * The amount of used texture slots.\n         */\n        get: function () {\n            return this._numUsedTextures;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ShaderRegisterCache.prototype, \"numUsedVaryings\", {\n        /**\n         * The amount of used varying registers.\n         */\n        get: function () {\n            return this._numUsedVaryings;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ShaderRegisterCache;\n}());\nexports.ShaderRegisterCache = ShaderRegisterCache;\n\n},{\"../shaders/RegisterPool\":\"awayjs-renderergl/lib/shaders/RegisterPool\",\"../shaders/ShaderRegisterElement\":\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\"}],\"awayjs-renderergl/lib/shaders/ShaderRegisterData\":[function(require,module,exports){\n\"use strict\";\n/**\n * ShaderRegisterData contains the \"named\" registers, generated by the compiler and to be passed on to the methods.\n */\nvar ShaderRegisterData = (function () {\n    function ShaderRegisterData() {\n        this.textures = new Array();\n        this.animatableAttributes = new Array();\n        this.animationTargetRegisters = new Array();\n    }\n    return ShaderRegisterData;\n}());\nexports.ShaderRegisterData = ShaderRegisterData;\n\n},{}],\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\":[function(require,module,exports){\n\"use strict\";\n/**\n * A single register element (an entire register or a single register's component) used by the RegisterPool.\n */\nvar ShaderRegisterElement = (function () {\n    /**\n     * Creates a new ShaderRegisterElement object.\n     *\n     * @param regName The name of the register.\n     * @param index The index of the register.\n     * @param component The register's component, if not the entire register is represented.\n     */\n    function ShaderRegisterElement(regName, index, component) {\n        if (component === void 0) { component = -1; }\n        this._component = component;\n        this._regName = regName;\n        this._index = index;\n        this._toStr = this._regName;\n        if (this._index >= 0)\n            this._toStr += this._index;\n        if (component > -1)\n            this._toStr += \".\" + ShaderRegisterElement.COMPONENTS[component];\n    }\n    /**\n     * Converts the register or the components AGAL string representation.\n     */\n    ShaderRegisterElement.prototype.toString = function () {\n        return this._toStr;\n    };\n    Object.defineProperty(ShaderRegisterElement.prototype, \"regName\", {\n        /**\n         * The register's name.\n         */\n        get: function () {\n            return this._regName;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ShaderRegisterElement.prototype, \"index\", {\n        /**\n         * The register's index.\n         */\n        get: function () {\n            return this._index;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ShaderRegisterElement.COMPONENTS = [\"x\", \"y\", \"z\", \"w\"];\n    return ShaderRegisterElement;\n}());\nexports.ShaderRegisterElement = ShaderRegisterElement;\n\n},{}],\"awayjs-renderergl/lib/shaders/compilers/CompilerBase\":[function(require,module,exports){\n\"use strict\";\nvar ShaderRegisterCache_1 = require(\"../../shaders/ShaderRegisterCache\");\nvar ShaderRegisterData_1 = require(\"../../shaders/ShaderRegisterData\");\n/**\n * CompilerBase is an abstract base class for shader compilers that use modular shader methods to assemble a\n * material. Concrete subclasses are used by the default materials.\n *\n * @see away.materials.ShadingMethodBase\n */\nvar CompilerBase = (function () {\n    /**\n     * Creates a new CompilerBase object.\n     * @param profile The compatibility profile of the renderer.\n     */\n    function CompilerBase(elementsClass, pass, shader) {\n        this._pVertexCode = ''; // Changed to emtpy string- AwayTS\n        this._pFragmentCode = ''; // Changed to emtpy string - AwayTS\n        this._pPostAnimationFragmentCode = ''; // Changed to emtpy string - AwayTS\n        this._pElementsClass = elementsClass;\n        this._pRenderPass = pass;\n        this._pShader = shader;\n        this._pSharedRegisters = new ShaderRegisterData_1.ShaderRegisterData();\n        this._pRegisterCache = new ShaderRegisterCache_1.ShaderRegisterCache(shader.profile);\n    }\n    /**\n     * Compiles the code after all setup on the compiler has finished.\n     */\n    CompilerBase.prototype.compile = function () {\n        this._pShader.reset();\n        this._pShader._iIncludeDependencies();\n        this.pInitRegisterIndices();\n        this.pCompileDependencies();\n        //compile custom vertex & fragment codes\n        this._pVertexCode += this._pRenderPass._iGetVertexCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\n        this._pPostAnimationFragmentCode += this._pRenderPass._iGetFragmentCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\n        if (this._pShader.usesColorTransform)\n            this.compileColorTransformCode();\n        else\n            this._pShader.colorTransformIndex = -1;\n        //assign the final output color to the output register\n        this._pPostAnimationFragmentCode += \"mov \" + this._pRegisterCache.fragmentOutputRegister + \", \" + this._pSharedRegisters.shadedTarget + \"\\n\";\n        this._pRegisterCache.removeFragmentTempUsage(this._pSharedRegisters.shadedTarget);\n    };\n    /**\n     * Calculate the transformed colours\n     */\n    CompilerBase.prototype.compileColorTransformCode = function () {\n        // rm, gm, bm, am - multiplier\n        // ro, go, bo, ao - offset\n        var ct1 = this._pRegisterCache.getFreeFragmentConstant();\n        var ct2 = this._pRegisterCache.getFreeFragmentConstant();\n        this._pShader.colorTransformIndex = ct1.index * 4;\n        this._pPostAnimationFragmentCode += \"mul \" + this._pSharedRegisters.shadedTarget + \", \" + this._pSharedRegisters.shadedTarget + \", \" + ct1 + \"\\n\";\n        this._pPostAnimationFragmentCode += \"add \" + this._pSharedRegisters.shadedTarget + \", \" + this._pSharedRegisters.shadedTarget + \", \" + ct2 + \"\\n\";\n    };\n    /**\n     * Compile the code for the methods.\n     */\n    CompilerBase.prototype.pCompileDependencies = function () {\n        this._pSharedRegisters.shadedTarget = this._pRegisterCache.getFreeFragmentVectorTemp();\n        this._pRegisterCache.addFragmentTempUsages(this._pSharedRegisters.shadedTarget, 1);\n        //compile the world-space position if required\n        if (this._pShader.globalPosDependencies > 0)\n            this.compileGlobalPositionCode();\n        //compile the local-space position if required\n        if (this._pShader.usesPositionFragment)\n            this.compilePositionCode();\n        if (this._pShader.usesCurves)\n            this.compileCurvesCode();\n        //Calculate the (possibly animated) UV coordinates.\n        if (this._pShader.uvDependencies > 0)\n            this.compileUVCode();\n        if (this._pShader.secondaryUVDependencies > 0)\n            this.compileSecondaryUVCode();\n        if (this._pShader.normalDependencies > 0)\n            this.compileNormalCode();\n        if (this._pShader.viewDirDependencies > 0)\n            this.compileViewDirCode();\n        //collect code from material\n        this._pVertexCode += this._pElementsClass._iGetVertexCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\n        this._pFragmentCode += this._pElementsClass._iGetFragmentCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\n        //collect code from pass\n        this._pVertexCode += this._pRenderPass._iGetPreLightingVertexCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\n        this._pFragmentCode += this._pRenderPass._iGetPreLightingFragmentCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\n    };\n    CompilerBase.prototype.compileGlobalPositionCode = function () {\n        this._pRegisterCache.addVertexTempUsages(this._pSharedRegisters.globalPositionVertex = this._pRegisterCache.getFreeVertexVectorTemp(), this._pShader.globalPosDependencies);\n        var sceneMatrixReg = this._pRegisterCache.getFreeVertexConstant();\n        this._pRegisterCache.getFreeVertexConstant();\n        this._pRegisterCache.getFreeVertexConstant();\n        this._pRegisterCache.getFreeVertexConstant();\n        this._pShader.sceneMatrixIndex = sceneMatrixReg.index * 4;\n        this._pVertexCode += \"m44 \" + this._pSharedRegisters.globalPositionVertex + \", \" + this._pSharedRegisters.animatedPosition + \", \" + sceneMatrixReg + \"\\n\";\n        if (this._pShader.usesGlobalPosFragment) {\n            this._pSharedRegisters.globalPositionVarying = this._pRegisterCache.getFreeVarying();\n            this._pVertexCode += \"mov \" + this._pSharedRegisters.globalPositionVarying + \", \" + this._pSharedRegisters.globalPositionVertex + \"\\n\";\n        }\n    };\n    CompilerBase.prototype.compilePositionCode = function () {\n        this._pSharedRegisters.positionVarying = this._pRegisterCache.getFreeVarying();\n        this._pVertexCode += \"mov \" + this._pSharedRegisters.positionVarying + \", \" + this._pSharedRegisters.animatedPosition + \"\\n\";\n    };\n    CompilerBase.prototype.compileCurvesCode = function () {\n        this._pSharedRegisters.curvesInput = this._pRegisterCache.getFreeVertexAttribute();\n        this._pShader.curvesIndex = this._pSharedRegisters.curvesInput.index;\n        this._pSharedRegisters.curvesVarying = this._pRegisterCache.getFreeVarying();\n        this._pVertexCode += \"mov \" + this._pSharedRegisters.curvesVarying + \", \" + this._pSharedRegisters.curvesInput + \"\\n\";\n        var temp = this._pRegisterCache.getFreeFragmentSingleTemp();\n        this._pFragmentCode += \"mul \" + temp + \", \" + this._pSharedRegisters.curvesVarying + \".y, \" + this._pSharedRegisters.curvesVarying + \".y\\n\" +\n            \"sub \" + temp + \", \" + temp + \", \" + this._pSharedRegisters.curvesVarying + \".z\\n\" +\n            \"mul \" + temp + \", \" + temp + \", \" + this._pSharedRegisters.curvesVarying + \".x\\n\" +\n            \"kil \" + temp + \"\\n\";\n    };\n    /**\n     * Calculate the (possibly animated) UV coordinates.\n     */\n    CompilerBase.prototype.compileUVCode = function () {\n        var uvAttributeReg = this._pRegisterCache.getFreeVertexAttribute();\n        this._pShader.uvIndex = uvAttributeReg.index;\n        var varying = this._pSharedRegisters.uvVarying = this._pRegisterCache.getFreeVarying();\n        if (this._pShader.usesUVTransform) {\n            // a, b, 0, tx\n            // c, d, 0, ty\n            var uvTransform1 = this._pRegisterCache.getFreeVertexConstant();\n            var uvTransform2 = this._pRegisterCache.getFreeVertexConstant();\n            this._pShader.uvMatrixIndex = uvTransform1.index * 4;\n            this._pVertexCode += \"dp4 \" + varying + \".x, \" + uvAttributeReg + \", \" + uvTransform1 + \"\\n\" +\n                \"dp4 \" + varying + \".y, \" + uvAttributeReg + \", \" + uvTransform2 + \"\\n\" +\n                \"mov \" + varying + \".zw, \" + uvAttributeReg + \".zw \\n\";\n        }\n        else {\n            this._pShader.uvMatrixIndex = -1;\n            this._pSharedRegisters.uvTarget = varying;\n            this._pSharedRegisters.uvSource = uvAttributeReg;\n        }\n    };\n    /**\n     * Provide the secondary UV coordinates.\n     */\n    CompilerBase.prototype.compileSecondaryUVCode = function () {\n        var uvAttributeReg = this._pRegisterCache.getFreeVertexAttribute();\n        this._pShader.secondaryUVIndex = uvAttributeReg.index;\n        this._pSharedRegisters.secondaryUVVarying = this._pRegisterCache.getFreeVarying();\n        this._pVertexCode += \"mov \" + this._pSharedRegisters.secondaryUVVarying + \", \" + uvAttributeReg + \"\\n\";\n    };\n    /**\n     * Calculate the view direction.\n     */\n    CompilerBase.prototype.compileViewDirCode = function () {\n        var cameraPositionReg = this._pRegisterCache.getFreeVertexConstant();\n        this._pSharedRegisters.viewDirVarying = this._pRegisterCache.getFreeVarying();\n        this._pSharedRegisters.viewDirFragment = this._pRegisterCache.getFreeFragmentVectorTemp();\n        this._pRegisterCache.addFragmentTempUsages(this._pSharedRegisters.viewDirFragment, this._pShader.viewDirDependencies);\n        this._pShader.cameraPositionIndex = cameraPositionReg.index * 4;\n        if (this._pShader.usesTangentSpace) {\n            var temp = this._pRegisterCache.getFreeVertexVectorTemp();\n            this._pVertexCode += \"sub \" + temp + \", \" + cameraPositionReg + \", \" + this._pSharedRegisters.animatedPosition + \"\\n\" +\n                \"m33 \" + this._pSharedRegisters.viewDirVarying + \".xyz, \" + temp + \", \" + this._pSharedRegisters.animatedTangent + \"\\n\" +\n                \"mov \" + this._pSharedRegisters.viewDirVarying + \".w, \" + this._pSharedRegisters.animatedPosition + \".w\\n\";\n        }\n        else {\n            this._pVertexCode += \"sub \" + this._pSharedRegisters.viewDirVarying + \", \" + cameraPositionReg + \", \" + this._pSharedRegisters.globalPositionVertex + \"\\n\";\n            this._pRegisterCache.removeVertexTempUsage(this._pSharedRegisters.globalPositionVertex);\n        }\n        //TODO is this required in all cases? (re: distancemappass)\n        this._pFragmentCode += \"nrm \" + this._pSharedRegisters.viewDirFragment + \".xyz, \" + this._pSharedRegisters.viewDirVarying + \"\\n\" +\n            \"mov \" + this._pSharedRegisters.viewDirFragment + \".w,   \" + this._pSharedRegisters.viewDirVarying + \".w\\n\";\n    };\n    /**\n     * Calculate the normal.\n     */\n    CompilerBase.prototype.compileNormalCode = function () {\n        this._pSharedRegisters.normalFragment = this._pRegisterCache.getFreeFragmentVectorTemp();\n        this._pRegisterCache.addFragmentTempUsages(this._pSharedRegisters.normalFragment, this._pShader.normalDependencies);\n        //simple normal aquisition if no tangent space is being used\n        if (this._pShader.outputsNormals && !this._pShader.outputsTangentNormals) {\n            this._pVertexCode += this._pRenderPass._iGetNormalVertexCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\n            this._pFragmentCode += this._pRenderPass._iGetNormalFragmentCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\n            return;\n        }\n        var normalMatrix;\n        if (!this._pShader.outputsNormals || !this._pShader.usesTangentSpace) {\n            normalMatrix = new Array(3);\n            normalMatrix[0] = this._pRegisterCache.getFreeVertexConstant();\n            normalMatrix[1] = this._pRegisterCache.getFreeVertexConstant();\n            normalMatrix[2] = this._pRegisterCache.getFreeVertexConstant();\n            this._pRegisterCache.getFreeVertexConstant();\n            this._pShader.sceneNormalMatrixIndex = normalMatrix[0].index * 4;\n            this._pSharedRegisters.normalVarying = this._pRegisterCache.getFreeVarying();\n        }\n        if (this._pShader.outputsNormals) {\n            if (this._pShader.usesTangentSpace) {\n                // normalize normal + tangent vector and generate (approximated) bitangent used in m33 operation for view\n                this._pVertexCode += \"nrm \" + this._pSharedRegisters.animatedNormal + \".xyz, \" + this._pSharedRegisters.animatedNormal + \"\\n\" +\n                    \"nrm \" + this._pSharedRegisters.animatedTangent + \".xyz, \" + this._pSharedRegisters.animatedTangent + \"\\n\" +\n                    \"crs \" + this._pSharedRegisters.bitangent + \".xyz, \" + this._pSharedRegisters.animatedNormal + \", \" + this._pSharedRegisters.animatedTangent + \"\\n\";\n                this._pFragmentCode += this._pRenderPass._iGetNormalFragmentCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\n            }\n            else {\n                //Compiles the vertex shader code for tangent-space normal maps.\n                this._pSharedRegisters.tangentVarying = this._pRegisterCache.getFreeVarying();\n                this._pSharedRegisters.bitangentVarying = this._pRegisterCache.getFreeVarying();\n                var temp = this._pRegisterCache.getFreeVertexVectorTemp();\n                this._pVertexCode += \"m33 \" + temp + \".xyz, \" + this._pSharedRegisters.animatedNormal + \", \" + normalMatrix[0] + \"\\n\" +\n                    \"nrm \" + this._pSharedRegisters.animatedNormal + \".xyz, \" + temp + \"\\n\" +\n                    \"m33 \" + temp + \".xyz, \" + this._pSharedRegisters.animatedTangent + \", \" + normalMatrix[0] + \"\\n\" +\n                    \"nrm \" + this._pSharedRegisters.animatedTangent + \".xyz, \" + temp + \"\\n\" +\n                    \"mov \" + this._pSharedRegisters.tangentVarying + \".x, \" + this._pSharedRegisters.animatedTangent + \".x  \\n\" +\n                    \"mov \" + this._pSharedRegisters.tangentVarying + \".z, \" + this._pSharedRegisters.animatedNormal + \".x  \\n\" +\n                    \"mov \" + this._pSharedRegisters.tangentVarying + \".w, \" + this._pSharedRegisters.normalInput + \".w  \\n\" +\n                    \"mov \" + this._pSharedRegisters.bitangentVarying + \".x, \" + this._pSharedRegisters.animatedTangent + \".y  \\n\" +\n                    \"mov \" + this._pSharedRegisters.bitangentVarying + \".z, \" + this._pSharedRegisters.animatedNormal + \".y  \\n\" +\n                    \"mov \" + this._pSharedRegisters.bitangentVarying + \".w, \" + this._pSharedRegisters.normalInput + \".w  \\n\" +\n                    \"mov \" + this._pSharedRegisters.normalVarying + \".x, \" + this._pSharedRegisters.animatedTangent + \".z  \\n\" +\n                    \"mov \" + this._pSharedRegisters.normalVarying + \".z, \" + this._pSharedRegisters.animatedNormal + \".z  \\n\" +\n                    \"mov \" + this._pSharedRegisters.normalVarying + \".w, \" + this._pSharedRegisters.normalInput + \".w  \\n\" +\n                    \"crs \" + temp + \".xyz, \" + this._pSharedRegisters.animatedNormal + \", \" + this._pSharedRegisters.animatedTangent + \"\\n\" +\n                    \"mov \" + this._pSharedRegisters.tangentVarying + \".y, \" + temp + \".x    \\n\" +\n                    \"mov \" + this._pSharedRegisters.bitangentVarying + \".y, \" + temp + \".y  \\n\" +\n                    \"mov \" + this._pSharedRegisters.normalVarying + \".y, \" + temp + \".z    \\n\";\n                this._pRegisterCache.removeVertexTempUsage(this._pSharedRegisters.animatedTangent);\n                //Compiles the fragment shader code for tangent-space normal maps.\n                var t;\n                var b;\n                var n;\n                t = this._pRegisterCache.getFreeFragmentVectorTemp();\n                this._pRegisterCache.addFragmentTempUsages(t, 1);\n                b = this._pRegisterCache.getFreeFragmentVectorTemp();\n                this._pRegisterCache.addFragmentTempUsages(b, 1);\n                n = this._pRegisterCache.getFreeFragmentVectorTemp();\n                this._pRegisterCache.addFragmentTempUsages(n, 1);\n                this._pFragmentCode += \"nrm \" + t + \".xyz, \" + this._pSharedRegisters.tangentVarying + \"\\n\" +\n                    \"mov \" + t + \".w, \" + this._pSharedRegisters.tangentVarying + \".w\t\\n\" +\n                    \"nrm \" + b + \".xyz, \" + this._pSharedRegisters.bitangentVarying + \"\\n\" +\n                    \"nrm \" + n + \".xyz, \" + this._pSharedRegisters.normalVarying + \"\\n\";\n                //compile custom fragment code for normal calcs\n                this._pFragmentCode += this._pRenderPass._iGetNormalFragmentCode(this._pShader, this._pRegisterCache, this._pSharedRegisters) +\n                    \"m33 \" + this._pSharedRegisters.normalFragment + \".xyz, \" + this._pSharedRegisters.normalFragment + \", \" + t + \"\\n\" +\n                    \"mov \" + this._pSharedRegisters.normalFragment + \".w, \" + this._pSharedRegisters.normalVarying + \".w\\n\";\n                this._pRegisterCache.removeFragmentTempUsage(b);\n                this._pRegisterCache.removeFragmentTempUsage(t);\n                this._pRegisterCache.removeFragmentTempUsage(n);\n            }\n        }\n        else {\n            // no output, world space is enough\n            this._pVertexCode += \"m33 \" + this._pSharedRegisters.normalVarying + \".xyz, \" + this._pSharedRegisters.animatedNormal + \", \" + normalMatrix[0] + \"\\n\" +\n                \"mov \" + this._pSharedRegisters.normalVarying + \".w, \" + this._pSharedRegisters.animatedNormal + \".w\\n\";\n            this._pFragmentCode += \"nrm \" + this._pSharedRegisters.normalFragment + \".xyz, \" + this._pSharedRegisters.normalVarying + \"\\n\" +\n                \"mov \" + this._pSharedRegisters.normalFragment + \".w, \" + this._pSharedRegisters.normalVarying + \".w\\n\";\n            if (this._pShader.tangentDependencies > 0) {\n                this._pSharedRegisters.tangentVarying = this._pRegisterCache.getFreeVarying();\n                this._pVertexCode += \"m33 \" + this._pSharedRegisters.tangentVarying + \".xyz, \" + this._pSharedRegisters.animatedTangent + \", \" + normalMatrix[0] + \"\\n\" +\n                    \"mov \" + this._pSharedRegisters.tangentVarying + \".w, \" + this._pSharedRegisters.animatedTangent + \".w\\n\";\n            }\n        }\n        if (!this._pShader.usesTangentSpace)\n            this._pRegisterCache.removeVertexTempUsage(this._pSharedRegisters.animatedNormal);\n    };\n    /**\n     * Reset all the indices to \"unused\".\n     */\n    CompilerBase.prototype.pInitRegisterIndices = function () {\n        this._pShader.pInitRegisterIndices();\n        this._pSharedRegisters.animatedPosition = this._pRegisterCache.getFreeVertexVectorTemp();\n        this._pRegisterCache.addVertexTempUsages(this._pSharedRegisters.animatedPosition, 1);\n        this._pSharedRegisters.animatableAttributes.push(this._pRegisterCache.getFreeVertexAttribute());\n        this._pSharedRegisters.animationTargetRegisters.push(this._pSharedRegisters.animatedPosition);\n        this._pVertexCode = \"\";\n        this._pFragmentCode = \"\";\n        this._pPostAnimationFragmentCode = \"\";\n        //create commonly shared constant registers\n        if (this._pShader.usesCommonData || this._pShader.normalDependencies > 0) {\n            this._pSharedRegisters.commons = this._pRegisterCache.getFreeFragmentConstant();\n            this._pShader.commonsDataIndex = this._pSharedRegisters.commons.index * 4;\n        }\n        //Creates the registers to contain the tangent data.\n        //Needs to be created FIRST and in this order (for when using tangent space)\n        if (this._pShader.tangentDependencies > 0 || this._pShader.outputsNormals) {\n            this._pSharedRegisters.tangentInput = this._pRegisterCache.getFreeVertexAttribute();\n            this._pShader.tangentIndex = this._pSharedRegisters.tangentInput.index;\n            this._pSharedRegisters.animatedTangent = this._pRegisterCache.getFreeVertexVectorTemp();\n            this._pRegisterCache.addVertexTempUsages(this._pSharedRegisters.animatedTangent, 1);\n            if (this._pShader.usesTangentSpace) {\n                this._pSharedRegisters.bitangent = this._pRegisterCache.getFreeVertexVectorTemp();\n                this._pRegisterCache.addVertexTempUsages(this._pSharedRegisters.bitangent, 1);\n            }\n            this._pSharedRegisters.animatableAttributes.push(this._pSharedRegisters.tangentInput);\n            this._pSharedRegisters.animationTargetRegisters.push(this._pSharedRegisters.animatedTangent);\n        }\n        if (this._pShader.normalDependencies > 0) {\n            this._pSharedRegisters.normalInput = this._pRegisterCache.getFreeVertexAttribute();\n            this._pShader.normalIndex = this._pSharedRegisters.normalInput.index;\n            this._pSharedRegisters.animatedNormal = this._pRegisterCache.getFreeVertexVectorTemp();\n            this._pRegisterCache.addVertexTempUsages(this._pSharedRegisters.animatedNormal, 1);\n            this._pSharedRegisters.animatableAttributes.push(this._pSharedRegisters.normalInput);\n            this._pSharedRegisters.animationTargetRegisters.push(this._pSharedRegisters.animatedNormal);\n        }\n        if (this._pShader.colorDependencies > 0) {\n            this._pSharedRegisters.colorInput = this._pRegisterCache.getFreeVertexAttribute();\n            this._pShader.colorBufferIndex = this._pSharedRegisters.colorInput.index;\n            this._pSharedRegisters.colorVarying = this._pRegisterCache.getFreeVarying();\n            this._pVertexCode += \"mov \" + this._pSharedRegisters.colorVarying + \", \" + this._pSharedRegisters.colorInput + \"\\n\";\n        }\n    };\n    /**\n     * Disposes all resources used by the compiler.\n     */\n    CompilerBase.prototype.dispose = function () {\n        this._pRegisterCache.dispose();\n        this._pRegisterCache = null;\n        this._pSharedRegisters = null;\n    };\n    Object.defineProperty(CompilerBase.prototype, \"vertexCode\", {\n        /**\n         * The generated vertex code.\n         */\n        get: function () {\n            return this._pVertexCode;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CompilerBase.prototype, \"fragmentCode\", {\n        /**\n         * The generated fragment code.\n         */\n        get: function () {\n            return this._pFragmentCode;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CompilerBase.prototype, \"postAnimationFragmentCode\", {\n        /**\n         * The generated fragment code.\n         */\n        get: function () {\n            return this._pPostAnimationFragmentCode;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CompilerBase.prototype, \"shadedTarget\", {\n        /**\n         * The register containing the final shaded colour.\n         */\n        get: function () {\n            return this._pSharedRegisters.shadedTarget;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return CompilerBase;\n}());\nexports.CompilerBase = CompilerBase;\n\n},{\"../../shaders/ShaderRegisterCache\":\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\",\"../../shaders/ShaderRegisterData\":\"awayjs-renderergl/lib/shaders/ShaderRegisterData\"}],\"awayjs-renderergl/lib/shaders/compilers/LightingCompiler\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar CompilerBase_1 = require(\"../../shaders/compilers/CompilerBase\");\n/**\n * CompilerBase is an abstract base class for shader compilers that use modular shader methods to assemble a\n * material. Concrete subclasses are used by the default materials.\n *\n * @see away.materials.ShadingMethodBase\n */\nvar LightingCompiler = (function (_super) {\n    __extends(LightingCompiler, _super);\n    /**\n     * Creates a new CompilerBase object.\n     * @param profile The compatibility profile of the renderer.\n     */\n    function LightingCompiler(elementsClass, lightingPass, shaderLightingObject) {\n        _super.call(this, elementsClass, lightingPass, shaderLightingObject);\n        this._shaderLightingObject = shaderLightingObject;\n        this._lightingPass = lightingPass;\n    }\n    /**\n     * Compile the code for the methods.\n     */\n    LightingCompiler.prototype.pCompileDependencies = function () {\n        _super.prototype.pCompileDependencies.call(this);\n        //compile the lighting code\n        if (this._shaderLightingObject.usesShadows)\n            this.pCompileShadowCode();\n        if (this._shaderLightingObject.usesLights) {\n            this.initLightRegisters();\n            this.compileLightCode();\n        }\n        if (this._shaderLightingObject.usesProbes)\n            this.compileLightProbeCode();\n        this._pVertexCode += this._lightingPass._iGetPostLightingVertexCode(this._shaderLightingObject, this._pRegisterCache, this._pSharedRegisters);\n        this._pFragmentCode += this._lightingPass._iGetPostLightingFragmentCode(this._shaderLightingObject, this._pRegisterCache, this._pSharedRegisters);\n    };\n    /**\n     * Provides the code to provide shadow mapping.\n     */\n    LightingCompiler.prototype.pCompileShadowCode = function () {\n        if (this._shaderLightingObject.normalDependencies > 0) {\n            this._pSharedRegisters.shadowTarget = this._pSharedRegisters.normalFragment;\n        }\n        else {\n            this._pSharedRegisters.shadowTarget = this._pRegisterCache.getFreeFragmentVectorTemp();\n            this._pRegisterCache.addFragmentTempUsages(this._pSharedRegisters.shadowTarget, 1);\n        }\n    };\n    /**\n     * Initializes constant registers to contain light data.\n     */\n    LightingCompiler.prototype.initLightRegisters = function () {\n        // init these first so we're sure they're in sequence\n        var i, len;\n        if (this._dirLightVertexConstants) {\n            len = this._dirLightVertexConstants.length;\n            for (i = 0; i < len; ++i) {\n                this._dirLightVertexConstants[i] = this._pRegisterCache.getFreeVertexConstant();\n                if (this._shaderLightingObject.lightVertexConstantIndex == -1)\n                    this._shaderLightingObject.lightVertexConstantIndex = this._dirLightVertexConstants[i].index * 4;\n            }\n        }\n        if (this._pointLightVertexConstants) {\n            len = this._pointLightVertexConstants.length;\n            for (i = 0; i < len; ++i) {\n                this._pointLightVertexConstants[i] = this._pRegisterCache.getFreeVertexConstant();\n                if (this._shaderLightingObject.lightVertexConstantIndex == -1)\n                    this._shaderLightingObject.lightVertexConstantIndex = this._pointLightVertexConstants[i].index * 4;\n            }\n        }\n        len = this._dirLightFragmentConstants.length;\n        for (i = 0; i < len; ++i) {\n            this._dirLightFragmentConstants[i] = this._pRegisterCache.getFreeFragmentConstant();\n            if (this._shaderLightingObject.lightFragmentConstantIndex == -1)\n                this._shaderLightingObject.lightFragmentConstantIndex = this._dirLightFragmentConstants[i].index * 4;\n        }\n        len = this._pointLightFragmentConstants.length;\n        for (i = 0; i < len; ++i) {\n            this._pointLightFragmentConstants[i] = this._pRegisterCache.getFreeFragmentConstant();\n            if (this._shaderLightingObject.lightFragmentConstantIndex == -1)\n                this._shaderLightingObject.lightFragmentConstantIndex = this._pointLightFragmentConstants[i].index * 4;\n        }\n    };\n    /**\n     * Compiles the shading code for directional and point lights.\n     */\n    LightingCompiler.prototype.compileLightCode = function () {\n        var diffuseColorReg;\n        var specularColorReg;\n        var lightPosReg;\n        var lightDirReg;\n        var vertexRegIndex = 0;\n        var fragmentRegIndex = 0;\n        var addSpec = this._shaderLightingObject.usesLightsForSpecular;\n        var addDiff = this._shaderLightingObject.usesLightsForDiffuse;\n        //compile the shading code for directional lights.\n        for (var i = 0; i < this._shaderLightingObject.numDirectionalLights; ++i) {\n            if (this._shaderLightingObject.usesTangentSpace) {\n                lightDirReg = this._dirLightVertexConstants[vertexRegIndex++];\n                var lightVarying = this._pRegisterCache.getFreeVarying();\n                this._pVertexCode += \"m33 \" + lightVarying + \".xyz, \" + lightDirReg + \", \" + this._pSharedRegisters.animatedTangent + \"\\n\" +\n                    \"mov \" + lightVarying + \".w, \" + lightDirReg + \".w\\n\";\n                lightDirReg = this._pRegisterCache.getFreeFragmentVectorTemp();\n                this._pRegisterCache.addVertexTempUsages(lightDirReg, 1);\n                this._pFragmentCode += \"nrm \" + lightDirReg + \".xyz, \" + lightVarying + \"\\n\" +\n                    \"mov \" + lightDirReg + \".w, \" + lightVarying + \".w\\n\";\n            }\n            else {\n                lightDirReg = this._dirLightFragmentConstants[fragmentRegIndex++];\n            }\n            diffuseColorReg = this._dirLightFragmentConstants[fragmentRegIndex++];\n            specularColorReg = this._dirLightFragmentConstants[fragmentRegIndex++];\n            if (addDiff)\n                this._pFragmentCode += this._lightingPass._iGetPerLightDiffuseFragmentCode(this._shaderLightingObject, lightDirReg, diffuseColorReg, this._pRegisterCache, this._pSharedRegisters);\n            if (addSpec)\n                this._pFragmentCode += this._lightingPass._iGetPerLightSpecularFragmentCode(this._shaderLightingObject, lightDirReg, specularColorReg, this._pRegisterCache, this._pSharedRegisters);\n            if (this._shaderLightingObject.usesTangentSpace)\n                this._pRegisterCache.removeVertexTempUsage(lightDirReg);\n        }\n        vertexRegIndex = 0;\n        fragmentRegIndex = 0;\n        //compile the shading code for point lights\n        for (var i = 0; i < this._shaderLightingObject.numPointLights; ++i) {\n            if (this._shaderLightingObject.usesTangentSpace || !this._shaderLightingObject.usesGlobalPosFragment)\n                lightPosReg = this._pointLightVertexConstants[vertexRegIndex++];\n            else\n                lightPosReg = this._pointLightFragmentConstants[fragmentRegIndex++];\n            diffuseColorReg = this._pointLightFragmentConstants[fragmentRegIndex++];\n            specularColorReg = this._pointLightFragmentConstants[fragmentRegIndex++];\n            lightDirReg = this._pRegisterCache.getFreeFragmentVectorTemp();\n            this._pRegisterCache.addFragmentTempUsages(lightDirReg, 1);\n            var lightVarying;\n            if (this._shaderLightingObject.usesTangentSpace) {\n                lightVarying = this._pRegisterCache.getFreeVarying();\n                var temp = this._pRegisterCache.getFreeVertexVectorTemp();\n                this._pVertexCode += \"sub \" + temp + \", \" + lightPosReg + \", \" + this._pSharedRegisters.animatedPosition + \"\\n\" +\n                    \"m33 \" + lightVarying + \".xyz, \" + temp + \", \" + this._pSharedRegisters.animatedTangent + \"\\n\" +\n                    \"mov \" + lightVarying + \".w, \" + this._pSharedRegisters.animatedPosition + \".w\\n\";\n            }\n            else if (!this._shaderLightingObject.usesGlobalPosFragment) {\n                lightVarying = this._pRegisterCache.getFreeVarying();\n                this._pVertexCode += \"sub \" + lightVarying + \", \" + lightPosReg + \", \" + this._pSharedRegisters.globalPositionVertex + \"\\n\";\n            }\n            else {\n                lightVarying = lightDirReg;\n                this._pFragmentCode += \"sub \" + lightDirReg + \", \" + lightPosReg + \", \" + this._pSharedRegisters.globalPositionVarying + \"\\n\";\n            }\n            if (this._shaderLightingObject.usesLightFallOff) {\n                // calculate attenuation\n                this._pFragmentCode +=\n                    \"dp3 \" + lightDirReg + \".w, \" + lightVarying + \", \" + lightVarying + \"\\n\" +\n                        \"sub \" + lightDirReg + \".w, \" + lightDirReg + \".w, \" + diffuseColorReg + \".w\\n\" +\n                        \"mul \" + lightDirReg + \".w, \" + lightDirReg + \".w, \" + specularColorReg + \".w\\n\" +\n                        \"sat \" + lightDirReg + \".w, \" + lightDirReg + \".w\\n\" +\n                        \"sub \" + lightDirReg + \".w, \" + this._pSharedRegisters.commons + \".w, \" + lightDirReg + \".w\\n\" +\n                        \"nrm \" + lightDirReg + \".xyz, \" + lightVarying + \"\\n\";\n            }\n            else {\n                this._pFragmentCode += \"nrm \" + lightDirReg + \".xyz, \" + lightVarying + \"\\n\" +\n                    \"mov \" + lightDirReg + \".w, \" + lightVarying + \".w\\n\";\n            }\n            if (this._shaderLightingObject.lightFragmentConstantIndex == -1)\n                this._shaderLightingObject.lightFragmentConstantIndex = lightPosReg.index * 4;\n            if (addDiff)\n                this._pFragmentCode += this._lightingPass._iGetPerLightDiffuseFragmentCode(this._shaderLightingObject, lightDirReg, diffuseColorReg, this._pRegisterCache, this._pSharedRegisters);\n            if (addSpec)\n                this._pFragmentCode += this._lightingPass._iGetPerLightSpecularFragmentCode(this._shaderLightingObject, lightDirReg, specularColorReg, this._pRegisterCache, this._pSharedRegisters);\n            this._pRegisterCache.removeFragmentTempUsage(lightDirReg);\n        }\n    };\n    /**\n     * Compiles shading code for light probes.\n     */\n    LightingCompiler.prototype.compileLightProbeCode = function () {\n        var weightReg;\n        var weightComponents = [\".x\", \".y\", \".z\", \".w\"];\n        var weightRegisters = new Array();\n        var i;\n        var texReg;\n        var addSpec = this._shaderLightingObject.usesProbesForSpecular;\n        var addDiff = this._shaderLightingObject.usesProbesForDiffuse;\n        if (addDiff)\n            this._shaderLightingObject.lightProbeDiffuseIndices = new Array();\n        if (addSpec)\n            this._shaderLightingObject.lightProbeSpecularIndices = new Array();\n        for (i = 0; i < this._pNumProbeRegisters; ++i) {\n            weightRegisters[i] = this._pRegisterCache.getFreeFragmentConstant();\n            if (i == 0)\n                this._shaderLightingObject.probeWeightsIndex = weightRegisters[i].index * 4;\n        }\n        for (i = 0; i < this._shaderLightingObject.numLightProbes; ++i) {\n            weightReg = weightRegisters[Math.floor(i / 4)].toString() + weightComponents[i % 4];\n            if (addDiff) {\n                texReg = this._pRegisterCache.getFreeTextureReg();\n                this._shaderLightingObject.lightProbeDiffuseIndices[i] = texReg.index;\n                this._pFragmentCode += this._lightingPass._iGetPerProbeDiffuseFragmentCode(this._shaderLightingObject, texReg, weightReg, this._pRegisterCache, this._pSharedRegisters);\n            }\n            if (addSpec) {\n                texReg = this._pRegisterCache.getFreeTextureReg();\n                this._shaderLightingObject.lightProbeSpecularIndices[i] = texReg.index;\n                this._pFragmentCode += this._lightingPass._iGetPerProbeSpecularFragmentCode(this._shaderLightingObject, texReg, weightReg, this._pRegisterCache, this._pSharedRegisters);\n            }\n        }\n    };\n    /**\n     * Reset all the indices to \"unused\".\n     */\n    LightingCompiler.prototype.pInitRegisterIndices = function () {\n        _super.prototype.pInitRegisterIndices.call(this);\n        this._shaderLightingObject.lightVertexConstantIndex = -1;\n        this._shaderLightingObject.lightFragmentConstantIndex = -1;\n        this._shaderLightingObject.probeWeightsIndex = -1;\n        this._pNumProbeRegisters = Math.ceil(this._shaderLightingObject.numLightProbes / 4);\n        //init light data\n        if (this._shaderLightingObject.usesTangentSpace || !this._shaderLightingObject.usesGlobalPosFragment) {\n            this._pointLightVertexConstants = new Array(this._shaderLightingObject.numPointLights);\n            this._pointLightFragmentConstants = new Array(this._shaderLightingObject.numPointLights * 2);\n        }\n        else {\n            this._pointLightFragmentConstants = new Array(this._shaderLightingObject.numPointLights * 3);\n        }\n        if (this._shaderLightingObject.usesTangentSpace) {\n            this._dirLightVertexConstants = new Array(this._shaderLightingObject.numDirectionalLights);\n            this._dirLightFragmentConstants = new Array(this._shaderLightingObject.numDirectionalLights * 2);\n        }\n        else {\n            this._dirLightFragmentConstants = new Array(this._shaderLightingObject.numDirectionalLights * 3);\n        }\n    };\n    return LightingCompiler;\n}(CompilerBase_1.CompilerBase));\nexports.LightingCompiler = LightingCompiler;\n\n},{\"../../shaders/compilers/CompilerBase\":\"awayjs-renderergl/lib/shaders/compilers/CompilerBase\"}],\"awayjs-renderergl/lib/shaders\":[function(require,module,exports){\n\"use strict\";\nvar CompilerBase_1 = require(\"./shaders/compilers/CompilerBase\");\nexports.CompilerBase = CompilerBase_1.CompilerBase;\nvar LightingCompiler_1 = require(\"./shaders/compilers/LightingCompiler\");\nexports.LightingCompiler = LightingCompiler_1.LightingCompiler;\nvar LightingShader_1 = require(\"./shaders/LightingShader\");\nexports.LightingShader = LightingShader_1.LightingShader;\nvar RegisterPool_1 = require(\"./shaders/RegisterPool\");\nexports.RegisterPool = RegisterPool_1.RegisterPool;\nvar ShaderBase_1 = require(\"./shaders/ShaderBase\");\nexports.ShaderBase = ShaderBase_1.ShaderBase;\nvar ShaderRegisterCache_1 = require(\"./shaders/ShaderRegisterCache\");\nexports.ShaderRegisterCache = ShaderRegisterCache_1.ShaderRegisterCache;\nvar ShaderRegisterData_1 = require(\"./shaders/ShaderRegisterData\");\nexports.ShaderRegisterData = ShaderRegisterData_1.ShaderRegisterData;\nvar ShaderRegisterElement_1 = require(\"./shaders/ShaderRegisterElement\");\nexports.ShaderRegisterElement = ShaderRegisterElement_1.ShaderRegisterElement;\n\n},{\"./shaders/LightingShader\":\"awayjs-renderergl/lib/shaders/LightingShader\",\"./shaders/RegisterPool\":\"awayjs-renderergl/lib/shaders/RegisterPool\",\"./shaders/ShaderBase\":\"awayjs-renderergl/lib/shaders/ShaderBase\",\"./shaders/ShaderRegisterCache\":\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\",\"./shaders/ShaderRegisterData\":\"awayjs-renderergl/lib/shaders/ShaderRegisterData\",\"./shaders/ShaderRegisterElement\":\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\",\"./shaders/compilers/CompilerBase\":\"awayjs-renderergl/lib/shaders/compilers/CompilerBase\",\"./shaders/compilers/LightingCompiler\":\"awayjs-renderergl/lib/shaders/compilers/LightingCompiler\"}],\"awayjs-renderergl/lib/sort/IEntitySorter\":[function(require,module,exports){\n\"use strict\";\n\n},{}],\"awayjs-renderergl/lib/sort/RenderableMergeSort\":[function(require,module,exports){\n\"use strict\";\n/**\n * @class away.sort.RenderableMergeSort\n */\nvar RenderableMergeSort = (function () {\n    function RenderableMergeSort() {\n    }\n    RenderableMergeSort.prototype.sortBlendedRenderables = function (head) {\n        var headB;\n        var fast;\n        var slow;\n        if (!head || !head.next) {\n            return head;\n        }\n        // split in two sublists\n        slow = head;\n        fast = head.next;\n        while (fast) {\n            fast = fast.next;\n            if (fast) {\n                slow = slow.next;\n                fast = fast.next;\n            }\n        }\n        headB = slow.next;\n        slow.next = null;\n        // recurse\n        head = this.sortBlendedRenderables(head);\n        headB = this.sortBlendedRenderables(headB);\n        // merge sublists while respecting order\n        var result;\n        var curr;\n        var l;\n        if (!head)\n            return headB;\n        if (!headB)\n            return head;\n        while (head && headB) {\n            if (head.zIndex < headB.zIndex) {\n                l = head;\n                head = head.next;\n            }\n            else {\n                l = headB;\n                headB = headB.next;\n            }\n            if (!result)\n                result = l;\n            else\n                curr.next = l;\n            curr = l;\n        }\n        if (head)\n            curr.next = head;\n        else if (headB)\n            curr.next = headB;\n        return result;\n    };\n    RenderableMergeSort.prototype.sortOpaqueRenderables = function (head) {\n        var headB;\n        var fast, slow;\n        if (!head || !head.next) {\n            return head;\n        }\n        // split in two sublists\n        slow = head;\n        fast = head.next;\n        while (fast) {\n            fast = fast.next;\n            if (fast) {\n                slow = slow.next;\n                fast = fast.next;\n            }\n        }\n        headB = slow.next;\n        slow.next = null;\n        // recurse\n        head = this.sortOpaqueRenderables(head);\n        headB = this.sortOpaqueRenderables(headB);\n        // merge sublists while respecting order\n        var result;\n        var curr;\n        var l;\n        var cmp = 0;\n        if (!head)\n            return headB;\n        if (!headB)\n            return head;\n        while (head && headB && head != null && headB != null) {\n            // first sort per render order id (reduces program3D switches),\n            // then on render object id (reduces setting props),\n            // then on zIndex (reduces overdraw)\n            var aid = head.renderOrderId;\n            var bid = headB.renderOrderId;\n            if (aid == bid) {\n                var ma = head.surfaceID;\n                var mb = headB.surfaceID;\n                if (ma == mb) {\n                    if (head.zIndex < headB.zIndex)\n                        cmp = 1;\n                    else\n                        cmp = -1;\n                }\n                else if (ma > mb) {\n                    cmp = 1;\n                }\n                else {\n                    cmp = -1;\n                }\n            }\n            else if (aid > bid) {\n                cmp = 1;\n            }\n            else {\n                cmp = -1;\n            }\n            if (cmp < 0) {\n                l = head;\n                head = head.next;\n            }\n            else {\n                l = headB;\n                headB = headB.next;\n            }\n            if (!result) {\n                result = l;\n                curr = l;\n            }\n            else {\n                curr.next = l;\n                curr = l;\n            }\n        }\n        if (head)\n            curr.next = head;\n        else if (headB)\n            curr.next = headB;\n        return result;\n    };\n    return RenderableMergeSort;\n}());\nexports.RenderableMergeSort = RenderableMergeSort;\n\n},{}],\"awayjs-renderergl/lib/sort/RenderableNullSort\":[function(require,module,exports){\n\"use strict\";\n/**\n * @class away.sort.NullSort\n */\nvar RenderableNullSort = (function () {\n    function RenderableNullSort() {\n    }\n    RenderableNullSort.prototype.sortBlendedRenderables = function (head) {\n        return head;\n    };\n    RenderableNullSort.prototype.sortOpaqueRenderables = function (head) {\n        return head;\n    };\n    return RenderableNullSort;\n}());\nexports.RenderableNullSort = RenderableNullSort;\n\n},{}],\"awayjs-renderergl/lib/sort\":[function(require,module,exports){\n\"use strict\";\nvar RenderableMergeSort_1 = require(\"./sort/RenderableMergeSort\");\nexports.RenderableMergeSort = RenderableMergeSort_1.RenderableMergeSort;\nvar RenderableNullSort_1 = require(\"./sort/RenderableNullSort\");\nexports.RenderableNullSort = RenderableNullSort_1.RenderableNullSort;\n\n},{\"./sort/RenderableMergeSort\":\"awayjs-renderergl/lib/sort/RenderableMergeSort\",\"./sort/RenderableNullSort\":\"awayjs-renderergl/lib/sort/RenderableNullSort\"}],\"awayjs-renderergl/lib/surfaces/GL_BasicMaterialSurface\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar BlendMode_1 = require(\"awayjs-core/lib/image/BlendMode\");\nvar BasicMaterialPass_1 = require(\"../surfaces/passes/BasicMaterialPass\");\nvar GL_SurfaceBase_1 = require(\"../surfaces/GL_SurfaceBase\");\n/**\n * RenderMaterialObject forms an abstract base class for the default shaded materials provided by Stage,\n * using material methods to define their appearance.\n */\nvar GL_BasicMaterialSurface = (function (_super) {\n    __extends(GL_BasicMaterialSurface, _super);\n    function GL_BasicMaterialSurface(material, elementsClass, renderPool) {\n        _super.call(this, material, elementsClass, renderPool);\n        this._material = material;\n        this._pAddPass(this._pass = new BasicMaterialPass_1.BasicMaterialPass(this, material, elementsClass, this._stage));\n    }\n    GL_BasicMaterialSurface.prototype.onClear = function (event) {\n        _super.prototype.onClear.call(this, event);\n        this._material = null;\n    };\n    /**\n     * @inheritDoc\n     */\n    GL_BasicMaterialSurface.prototype._pUpdateRender = function () {\n        _super.prototype._pUpdateRender.call(this);\n        this._pRequiresBlending = (this._material.blendMode != BlendMode_1.BlendMode.NORMAL || this._material.alphaBlending || (this._material.colorTransform && this._material.colorTransform.alphaMultiplier < 1));\n        this._pass.preserveAlpha = this._material.preserveAlpha; //this._pRequiresBlending;\n        this._pass.shader.setBlendMode((this._surface.blendMode == BlendMode_1.BlendMode.NORMAL && this._pRequiresBlending) ? BlendMode_1.BlendMode.LAYER : this._material.blendMode);\n        //this._pass.forceSeparateMVP = false;\n    };\n    return GL_BasicMaterialSurface;\n}(GL_SurfaceBase_1.GL_SurfaceBase));\nexports.GL_BasicMaterialSurface = GL_BasicMaterialSurface;\n\n},{\"../surfaces/GL_SurfaceBase\":\"awayjs-renderergl/lib/surfaces/GL_SurfaceBase\",\"../surfaces/passes/BasicMaterialPass\":\"awayjs-renderergl/lib/surfaces/passes/BasicMaterialPass\",\"awayjs-core/lib/image/BlendMode\":undefined}],\"awayjs-renderergl/lib/surfaces/GL_DepthSurface\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar GL_SurfacePassBase_1 = require(\"../surfaces/GL_SurfacePassBase\");\nvar ShaderBase_1 = require(\"../shaders/ShaderBase\");\n/**\n * GL_DepthSurface forms an abstract base class for the default shaded materials provided by Stage,\n * using material methods to define their appearance.\n */\nvar GL_DepthSurface = (function (_super) {\n    __extends(GL_DepthSurface, _super);\n    /**\n     *\n     * @param pool\n     * @param surface\n     * @param elementsClass\n     * @param stage\n     */\n    function GL_DepthSurface(surface, elementsClass, renderPool) {\n        _super.call(this, surface, elementsClass, renderPool);\n        this._shader = new ShaderBase_1.ShaderBase(elementsClass, this, this._stage);\n        this._pAddPass(this);\n    }\n    GL_DepthSurface.prototype.invalidate = function () {\n        _super.prototype.invalidate.call(this);\n        this._textureVO = this._surface.getTextureAt(0) ? this._shader.getAbstraction(this._surface.getTextureAt(0)) : null;\n    };\n    GL_DepthSurface.prototype._iIncludeDependencies = function (shader) {\n        _super.prototype._iIncludeDependencies.call(this, shader);\n        shader.projectionDependencies++;\n        if (shader.alphaThreshold > 0)\n            shader.uvDependencies++;\n    };\n    GL_DepthSurface.prototype._iInitConstantData = function (shader) {\n        _super.prototype._iInitConstantData.call(this, shader);\n        var index = this._fragmentConstantsIndex;\n        var data = shader.fragmentConstantData;\n        data[index] = 1.0;\n        data[index + 1] = 255.0;\n        data[index + 2] = 65025.0;\n        data[index + 3] = 16581375.0;\n        data[index + 4] = 1.0 / 255.0;\n        data[index + 5] = 1.0 / 255.0;\n        data[index + 6] = 1.0 / 255.0;\n        data[index + 7] = 0.0;\n    };\n    /**\n     * @inheritDoc\n     */\n    GL_DepthSurface.prototype._iGetFragmentCode = function (shader, registerCache, sharedRegisters) {\n        var code = \"\";\n        var targetReg = sharedRegisters.shadedTarget;\n        var dataReg1 = registerCache.getFreeFragmentConstant();\n        var dataReg2 = registerCache.getFreeFragmentConstant();\n        this._fragmentConstantsIndex = dataReg1.index * 4;\n        var temp1 = registerCache.getFreeFragmentVectorTemp();\n        registerCache.addFragmentTempUsages(temp1, 1);\n        var temp2 = registerCache.getFreeFragmentVectorTemp();\n        registerCache.addFragmentTempUsages(temp2, 1);\n        code += \"div \" + temp1 + \", \" + sharedRegisters.projectionFragment + \", \" + sharedRegisters.projectionFragment + \".w\\n\" +\n            \"mul \" + temp1 + \", \" + dataReg1 + \", \" + temp1 + \".z\\n\" +\n            \"frc \" + temp1 + \", \" + temp1 + \"\\n\" +\n            \"mul \" + temp2 + \", \" + temp1 + \".yzww, \" + dataReg2 + \"\\n\";\n        //codeF += \"mov ft1.w, fc1.w\t\\n\" +\n        //    \"mov ft0.w, fc0.x\t\\n\";\n        if (this._textureVO && shader.alphaThreshold > 0) {\n            var albedo = registerCache.getFreeFragmentVectorTemp();\n            code += this._textureVO._iGetFragmentCode(albedo, registerCache, sharedRegisters, sharedRegisters.uvVarying);\n            var cutOffReg = registerCache.getFreeFragmentConstant();\n            code += \"sub \" + albedo + \".w, \" + albedo + \".w, \" + cutOffReg + \".x\\n\" +\n                \"kil \" + albedo + \".w\\n\";\n        }\n        code += \"sub \" + targetReg + \", \" + temp1 + \", \" + temp2 + \"\\n\";\n        registerCache.removeFragmentTempUsage(temp1);\n        registerCache.removeFragmentTempUsage(temp2);\n        return code;\n    };\n    /**\n     * @inheritDoc\n     */\n    GL_DepthSurface.prototype._iActivate = function (camera) {\n        _super.prototype._iActivate.call(this, camera);\n        if (this._textureVO && this._shader.alphaThreshold > 0) {\n            this._textureVO.activate(this);\n            this._shader.fragmentConstantData[this._fragmentConstantsIndex + 8] = this._shader.alphaThreshold;\n        }\n    };\n    return GL_DepthSurface;\n}(GL_SurfacePassBase_1.GL_SurfacePassBase));\nexports.GL_DepthSurface = GL_DepthSurface;\n\n},{\"../shaders/ShaderBase\":\"awayjs-renderergl/lib/shaders/ShaderBase\",\"../surfaces/GL_SurfacePassBase\":\"awayjs-renderergl/lib/surfaces/GL_SurfacePassBase\"}],\"awayjs-renderergl/lib/surfaces/GL_DistanceSurface\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar GL_SurfacePassBase_1 = require(\"../surfaces/GL_SurfacePassBase\");\nvar ShaderBase_1 = require(\"../shaders/ShaderBase\");\n/**\n * DistanceRender is a pass that writes distance values to a depth map as a 32-bit value exploded over the 4 texture channels.\n * This is used to render omnidirectional shadow maps.\n */\nvar GL_DistanceSurface = (function (_super) {\n    __extends(GL_DistanceSurface, _super);\n    /**\n     * Creates a new DistanceRender object.\n     *\n     * @param material The material to which this pass belongs.\n     */\n    function GL_DistanceSurface(surface, elementsClass, renderPool) {\n        _super.call(this, surface, elementsClass, renderPool);\n        this._shader = new ShaderBase_1.ShaderBase(elementsClass, this, this._stage);\n        this._pAddPass(this);\n    }\n    GL_DistanceSurface.prototype.invalidate = function () {\n        _super.prototype.invalidate.call(this);\n        this._textureVO = this._surface.getTextureAt(0) ? this._shader.getAbstraction(this._surface.getTextureAt(0)) : null;\n    };\n    /**\n     * Initializes the unchanging constant data for this material.\n     */\n    GL_DistanceSurface.prototype._iInitConstantData = function (shader) {\n        _super.prototype._iInitConstantData.call(this, shader);\n        var index = this._fragmentConstantsIndex;\n        var data = shader.fragmentConstantData;\n        data[index + 4] = 1.0 / 255.0;\n        data[index + 5] = 1.0 / 255.0;\n        data[index + 6] = 1.0 / 255.0;\n        data[index + 7] = 0.0;\n    };\n    GL_DistanceSurface.prototype._iIncludeDependencies = function (shader) {\n        _super.prototype._iIncludeDependencies.call(this, shader);\n        shader.projectionDependencies++;\n        shader.viewDirDependencies++;\n        if (shader.alphaThreshold > 0)\n            shader.uvDependencies++;\n        if (shader.viewDirDependencies > 0)\n            shader.globalPosDependencies++;\n    };\n    /**\n     * @inheritDoc\n     */\n    GL_DistanceSurface.prototype._iGetFragmentCode = function (shader, registerCache, sharedRegisters) {\n        var code;\n        var targetReg = sharedRegisters.shadedTarget;\n        var dataReg1 = registerCache.getFreeFragmentConstant();\n        var dataReg2 = registerCache.getFreeFragmentConstant();\n        this._fragmentConstantsIndex = dataReg1.index * 4;\n        var temp1 = registerCache.getFreeFragmentVectorTemp();\n        registerCache.addFragmentTempUsages(temp1, 1);\n        var temp2 = registerCache.getFreeFragmentVectorTemp();\n        registerCache.addFragmentTempUsages(temp2, 1);\n        // squared distance to view\n        code = \"dp3 \" + temp1 + \".z, \" + sharedRegisters.viewDirVarying + \".xyz, \" + sharedRegisters.viewDirVarying + \".xyz\\n\" +\n            \"mul \" + temp1 + \", \" + dataReg1 + \", \" + temp1 + \".z\\n\" +\n            \"frc \" + temp1 + \", \" + temp1 + \"\\n\" +\n            \"mul \" + temp2 + \", \" + temp1 + \".yzww, \" + dataReg2 + \"\\n\";\n        if (this._textureVO && shader.alphaThreshold > 0) {\n            var albedo = registerCache.getFreeFragmentVectorTemp();\n            code += this._textureVO._iGetFragmentCode(albedo, registerCache, sharedRegisters, sharedRegisters.uvVarying);\n            var cutOffReg = registerCache.getFreeFragmentConstant();\n            code += \"sub \" + albedo + \".w, \" + albedo + \".w, \" + cutOffReg + \".x\\n\" +\n                \"kil \" + albedo + \".w\\n\";\n        }\n        code += \"sub \" + targetReg + \", \" + temp1 + \", \" + temp2 + \"\\n\";\n        return code;\n    };\n    /**\n     * @inheritDoc\n     */\n    GL_DistanceSurface.prototype._iActivate = function (camera) {\n        _super.prototype._iActivate.call(this, camera);\n        var f = camera.projection.far;\n        f = 1 / (2 * f * f);\n        // sqrt(f*f+f*f) is largest possible distance for any frustum, so we need to divide by it. Rarely a tight fit, but with 32 bits precision, it's enough.\n        var index = this._fragmentConstantsIndex;\n        var data = this._shader.fragmentConstantData;\n        data[index] = 1.0 * f;\n        data[index + 1] = 255.0 * f;\n        data[index + 2] = 65025.0 * f;\n        data[index + 3] = 16581375.0 * f;\n        if (this._textureVO && this._shader.alphaThreshold > 0) {\n            this._textureVO.activate(this);\n            data[index + 8] = this._shader.alphaThreshold;\n        }\n    };\n    return GL_DistanceSurface;\n}(GL_SurfacePassBase_1.GL_SurfacePassBase));\nexports.GL_DistanceSurface = GL_DistanceSurface;\n\n},{\"../shaders/ShaderBase\":\"awayjs-renderergl/lib/shaders/ShaderBase\",\"../surfaces/GL_SurfacePassBase\":\"awayjs-renderergl/lib/surfaces/GL_SurfacePassBase\"}],\"awayjs-renderergl/lib/surfaces/GL_SkyboxSurface\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AssetEvent_1 = require(\"awayjs-core/lib/events/AssetEvent\");\nvar BlendMode_1 = require(\"awayjs-core/lib/image/BlendMode\");\nvar ContextGLCompareMode_1 = require(\"awayjs-stagegl/lib/base/ContextGLCompareMode\");\nvar GL_SurfacePassBase_1 = require(\"../surfaces/GL_SurfacePassBase\");\nvar ShaderBase_1 = require(\"../shaders/ShaderBase\");\n/**\n * GL_SkyboxSurface forms an abstract base class for the default shaded materials provided by Stage,\n * using material methods to define their appearance.\n */\nvar GL_SkyboxSurface = (function (_super) {\n    __extends(GL_SkyboxSurface, _super);\n    function GL_SkyboxSurface(skybox, elementsClass, renderPool) {\n        _super.call(this, skybox, elementsClass, renderPool);\n        this._skybox = skybox;\n        this._shader = new ShaderBase_1.ShaderBase(elementsClass, this, this._stage);\n        this._texture = this._shader.getAbstraction(this._skybox.texture);\n        this._pAddPass(this);\n    }\n    GL_SkyboxSurface.prototype.onClear = function (event) {\n        _super.prototype.onClear.call(this, event);\n        this._texture.onClear(new AssetEvent_1.AssetEvent(AssetEvent_1.AssetEvent.CLEAR, this._skybox.texture));\n        this._texture = null;\n        this._skybox = null;\n    };\n    /**\n     * @inheritDoc\n     */\n    GL_SkyboxSurface.prototype._pUpdateRender = function () {\n        _super.prototype._pUpdateRender.call(this);\n        this._pRequiresBlending = (this._surface.blendMode != BlendMode_1.BlendMode.NORMAL);\n        this.shader.setBlendMode((this._surface.blendMode == BlendMode_1.BlendMode.NORMAL && this._pRequiresBlending) ? BlendMode_1.BlendMode.LAYER : this._surface.blendMode);\n    };\n    GL_SkyboxSurface.prototype._iIncludeDependencies = function (shader) {\n        _super.prototype._iIncludeDependencies.call(this, shader);\n        shader.usesPositionFragment = true;\n    };\n    /**\n     * @inheritDoc\n     */\n    GL_SkyboxSurface.prototype._iGetFragmentCode = function (shader, registerCache, sharedRegisters) {\n        return this._texture._iGetFragmentCode(sharedRegisters.shadedTarget, registerCache, sharedRegisters, sharedRegisters.positionVarying);\n    };\n    GL_SkyboxSurface.prototype._setRenderState = function (renderable, camera, viewProjection) {\n        _super.prototype._setRenderState.call(this, renderable, camera, viewProjection);\n        this._texture._setRenderState(renderable);\n    };\n    /**\n     * @inheritDoc\n     */\n    GL_SkyboxSurface.prototype._iActivate = function (camera) {\n        _super.prototype._iActivate.call(this, camera);\n        this._stage.context.setDepthTest(false, ContextGLCompareMode_1.ContextGLCompareMode.LESS);\n        this._texture.activate(this);\n    };\n    return GL_SkyboxSurface;\n}(GL_SurfacePassBase_1.GL_SurfacePassBase));\nexports.GL_SkyboxSurface = GL_SkyboxSurface;\n\n},{\"../shaders/ShaderBase\":\"awayjs-renderergl/lib/shaders/ShaderBase\",\"../surfaces/GL_SurfacePassBase\":\"awayjs-renderergl/lib/surfaces/GL_SurfacePassBase\",\"awayjs-core/lib/events/AssetEvent\":undefined,\"awayjs-core/lib/image/BlendMode\":undefined,\"awayjs-stagegl/lib/base/ContextGLCompareMode\":undefined}],\"awayjs-renderergl/lib/surfaces/GL_SurfaceBase\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AbstractionBase_1 = require(\"awayjs-core/lib/library/AbstractionBase\");\nvar SurfaceEvent_1 = require(\"awayjs-display/lib/events/SurfaceEvent\");\nvar MaterialBase_1 = require(\"awayjs-display/lib/materials/MaterialBase\");\nvar DefaultMaterialManager_1 = require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\nvar PassEvent_1 = require(\"../events/PassEvent\");\n/**\n *\n * @class away.pool.Passes\n */\nvar GL_SurfaceBase = (function (_super) {\n    __extends(GL_SurfaceBase, _super);\n    function GL_SurfaceBase(surface, elementsClass, renderPool) {\n        var _this = this;\n        _super.call(this, surface, renderPool);\n        this.usages = 0;\n        this._forceSeparateMVP = false;\n        this._usesAnimation = true;\n        this._invalidAnimation = true;\n        this._invalidRender = true;\n        this._invalidImages = true;\n        this._passes = new Array();\n        this._imageIndices = new Object();\n        this._pRequiresBlending = false;\n        this.images = new Array();\n        this.samplers = new Array();\n        this._onInvalidateAnimationDelegate = function (event) { return _this.onInvalidateAnimation(event); };\n        this._onInvalidatePassesDelegate = function (event) { return _this.onInvalidatePasses(event); };\n        this.surfaceID = surface.id;\n        this._surface = surface;\n        this._elementsClass = elementsClass;\n        this._stage = renderPool.stage;\n        this._surface.addEventListener(SurfaceEvent_1.SurfaceEvent.INVALIDATE_ANIMATION, this._onInvalidateAnimationDelegate);\n        this._surface.addEventListener(SurfaceEvent_1.SurfaceEvent.INVALIDATE_PASSES, this._onInvalidatePassesDelegate);\n        this._onPassInvalidateDelegate = function (event) { return _this.onPassInvalidate(event); };\n    }\n    Object.defineProperty(GL_SurfaceBase.prototype, \"requiresBlending\", {\n        /**\n         * Indicates whether or not the renderable requires alpha blending during rendering.\n         */\n        get: function () {\n            return this._pRequiresBlending;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GL_SurfaceBase.prototype, \"renderOrderId\", {\n        get: function () {\n            if (this._invalidAnimation)\n                this._updateAnimation();\n            return this._renderOrderId;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GL_SurfaceBase.prototype, \"passes\", {\n        get: function () {\n            if (this._invalidAnimation)\n                this._updateAnimation();\n            return this._passes;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GL_SurfaceBase.prototype, \"surface\", {\n        get: function () {\n            return this._surface;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GL_SurfaceBase.prototype, \"numImages\", {\n        get: function () {\n            if (this._invalidImages)\n                this._updateImages();\n            return this._numImages;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    GL_SurfaceBase.prototype._iIncludeDependencies = function (shader) {\n        this._elementsClass._iIncludeDependencies(shader);\n        shader.alphaThreshold = this._surface.alphaThreshold;\n        shader.useImageRect = this._surface.imageRect;\n        shader.usesCurves = this._surface.curves;\n        if (this._surface instanceof MaterialBase_1.MaterialBase) {\n            var material = this._surface;\n            shader.useAlphaPremultiplied = material.alphaPremultiplied;\n            shader.useBothSides = material.bothSides;\n            shader.usesUVTransform = material.animateUVs;\n            shader.usesColorTransform = material.useColorTransform;\n        }\n    };\n    GL_SurfaceBase.prototype.getImageIndex = function (texture, index) {\n        if (index === void 0) { index = 0; }\n        if (this._invalidImages)\n            this._updateImages();\n        return this._imageIndices[texture.id][index];\n    };\n    /**\n     *\n     */\n    GL_SurfaceBase.prototype.onClear = function (event) {\n        _super.prototype.onClear.call(this, event);\n        this._surface = null;\n        this._elementsClass = null;\n        this._stage = null;\n        var len = this._passes.length;\n        for (var i = 0; i < len; i++) {\n            this._passes[i].removeEventListener(PassEvent_1.PassEvent.INVALIDATE, this._onPassInvalidateDelegate);\n            this._passes[i].dispose();\n        }\n        this._passes = null;\n    };\n    /**\n     *\n     */\n    GL_SurfaceBase.prototype.onInvalidate = function (event) {\n        _super.prototype.onInvalidate.call(this, event);\n        this._invalidRender = true;\n        this._invalidAnimation = true;\n    };\n    /**\n     *\n     */\n    GL_SurfaceBase.prototype.onInvalidatePasses = function (event) {\n        var len = this._passes.length;\n        for (var i = 0; i < len; i++)\n            this._passes[i].invalidate();\n        this._invalidAnimation = true;\n        this._invalidImages = true;\n    };\n    /**\n     *\n     */\n    GL_SurfaceBase.prototype.onInvalidateAnimation = function (event) {\n        this._invalidAnimation = true;\n    };\n    /**\n     *\n     * @param surface\n     */\n    GL_SurfaceBase.prototype._updateAnimation = function () {\n        if (this._invalidRender)\n            this._pUpdateRender();\n        this._invalidAnimation = false;\n        var usesAnimation = this._getEnabledGPUAnimation();\n        var renderOrderId = 0;\n        var mult = 1;\n        var shader;\n        var len = this._passes.length;\n        for (var i = 0; i < len; i++) {\n            shader = this._passes[i].shader;\n            shader.usesAnimation = usesAnimation;\n            renderOrderId += shader.programData.id * mult;\n            mult *= 1000;\n        }\n        if (this._usesAnimation != usesAnimation) {\n            this._usesAnimation = usesAnimation;\n            var renderables = this._surface.iOwners;\n            var numOwners = renderables.length;\n            for (var j = 0; j < numOwners; j++)\n                renderables[j].invalidateElements();\n        }\n        this._renderOrderId = renderOrderId;\n    };\n    GL_SurfaceBase.prototype._updateImages = function () {\n        this._invalidImages = false;\n        var numTextures = this._surface.getNumTextures();\n        var texture;\n        var numImages;\n        var images;\n        var image;\n        var sampler;\n        var index = 0;\n        for (var i = 0; i < numTextures; i++) {\n            texture = this._surface.getTextureAt(i);\n            numImages = texture.getNumImages();\n            images = this._imageIndices[texture.id] = new Array();\n            for (var j = 0; j < numImages; j++) {\n                image = texture.getImageAt(j) || (this._surface.style ? this._surface.style.getImageAt(texture, j) : null) || DefaultMaterialManager_1.DefaultMaterialManager.getDefaultImage2D();\n                this.images[index] = this._stage.getAbstraction(image);\n                sampler = texture.getSamplerAt(j) || (this._surface.style ? this._surface.style.getSamplerAt(texture, j) : null) || DefaultMaterialManager_1.DefaultMaterialManager.getDefaultSampler();\n                this.samplers[index] = this._stage.getAbstraction(sampler);\n                images[j] = index++;\n            }\n        }\n        this._numImages = index;\n    };\n    /**\n     * Performs any processing that needs to occur before any of its passes are used.\n     *\n     * @private\n     */\n    GL_SurfaceBase.prototype._pUpdateRender = function () {\n        this._invalidRender = false;\n        //overrride to update shader object properties\n    };\n    /**\n     * Removes a pass from the surface.\n     * @param pass The pass to be removed.\n     */\n    GL_SurfaceBase.prototype._pRemovePass = function (pass) {\n        pass.removeEventListener(PassEvent_1.PassEvent.INVALIDATE, this._onPassInvalidateDelegate);\n        this._passes.splice(this._passes.indexOf(pass), 1);\n    };\n    /**\n     * Removes all passes from the surface\n     */\n    GL_SurfaceBase.prototype._pClearPasses = function () {\n        var len = this._passes.length;\n        for (var i = 0; i < len; ++i)\n            this._passes[i].removeEventListener(PassEvent_1.PassEvent.INVALIDATE, this._onPassInvalidateDelegate);\n        this._passes.length = 0;\n    };\n    /**\n     * Adds a pass to the surface\n     * @param pass\n     */\n    GL_SurfaceBase.prototype._pAddPass = function (pass) {\n        this._passes.push(pass);\n        pass.addEventListener(PassEvent_1.PassEvent.INVALIDATE, this._onPassInvalidateDelegate);\n    };\n    /**\n     * Listener for when a pass's shader code changes. It recalculates the render order id.\n     */\n    GL_SurfaceBase.prototype.onPassInvalidate = function (event) {\n        this._invalidAnimation = true;\n    };\n    /**\n     * test if animation will be able to run on gpu BEFORE compiling materials\n     * test if the shader objects supports animating the animation set in the vertex shader\n     * if any object using this material fails to support accelerated animations for any of the shader objects,\n     * we should do everything on cpu (otherwise we have the cost of both gpu + cpu animations)\n     */\n    GL_SurfaceBase.prototype._getEnabledGPUAnimation = function () {\n        if (this._surface.animationSet) {\n            this._surface.animationSet.resetGPUCompatibility();\n            var renderables = this._surface.iOwners;\n            var numOwners = renderables.length;\n            var len = this._passes.length;\n            var shader;\n            for (var i = 0; i < len; i++) {\n                shader = this._passes[i].shader;\n                shader.usesAnimation = false;\n                for (var j = 0; j < numOwners; j++)\n                    if (renderables[j].animator)\n                        renderables[j].animator.testGPUCompatibility(shader);\n            }\n            return !this._surface.animationSet.usesCPU;\n        }\n        return false;\n    };\n    return GL_SurfaceBase;\n}(AbstractionBase_1.AbstractionBase));\nexports.GL_SurfaceBase = GL_SurfaceBase;\n\n},{\"../events/PassEvent\":\"awayjs-renderergl/lib/events/PassEvent\",\"awayjs-core/lib/library/AbstractionBase\":undefined,\"awayjs-display/lib/events/SurfaceEvent\":undefined,\"awayjs-display/lib/managers/DefaultMaterialManager\":undefined,\"awayjs-display/lib/materials/MaterialBase\":undefined}],\"awayjs-renderergl/lib/surfaces/GL_SurfacePassBase\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar PassEvent_1 = require(\"../events/PassEvent\");\nvar GL_SurfaceBase_1 = require(\"../surfaces/GL_SurfaceBase\");\n/**\n * GL_SurfacePassBase provides an abstract base class for material shader passes. A material pass constitutes at least\n * a render call per required renderable.\n */\nvar GL_SurfacePassBase = (function (_super) {\n    __extends(GL_SurfacePassBase, _super);\n    function GL_SurfacePassBase() {\n        _super.apply(this, arguments);\n    }\n    Object.defineProperty(GL_SurfacePassBase.prototype, \"shader\", {\n        get: function () {\n            return this._shader;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GL_SurfacePassBase.prototype, \"animationSet\", {\n        get: function () {\n            return this._surface.animationSet;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Marks the shader program as invalid, so it will be recompiled before the next render.\n     */\n    GL_SurfacePassBase.prototype.invalidate = function () {\n        this._shader.invalidateProgram();\n        this.dispatchEvent(new PassEvent_1.PassEvent(PassEvent_1.PassEvent.INVALIDATE, this));\n    };\n    GL_SurfacePassBase.prototype.dispose = function () {\n        if (this._shader) {\n            this._shader.dispose();\n            this._shader = null;\n        }\n    };\n    /**\n     * Renders the current pass. Before calling pass, activatePass needs to be called with the same index.\n     * @param pass The pass used to render the renderable.\n     * @param renderable The IRenderable object to draw.\n     * @param stage The Stage object used for rendering.\n     * @param entityCollector The EntityCollector object that contains the visible scene data.\n     * @param viewProjection The view-projection matrix used to project to the screen. This is not the same as\n     * camera.viewProjection as it includes the scaling factors when rendering to textures.\n     *\n     * @internal\n     */\n    GL_SurfacePassBase.prototype._setRenderState = function (renderable, camera, viewProjection) {\n        this._shader._setRenderState(renderable, camera, viewProjection);\n    };\n    /**\n     * Sets the render state for the pass that is independent of the rendered object. This needs to be called before\n     * calling pass. Before activating a pass, the previously used pass needs to be deactivated.\n     * @param stage The Stage object which is currently used for rendering.\n     * @param camera The camera from which the scene is viewed.\n     * @private\n     */\n    GL_SurfacePassBase.prototype._iActivate = function (camera) {\n        this._shader._iActivate(camera);\n    };\n    /**\n     * Clears the render state for the pass. This needs to be called before activating another pass.\n     * @param stage The Stage used for rendering\n     *\n     * @private\n     */\n    GL_SurfacePassBase.prototype._iDeactivate = function () {\n        this._shader._iDeactivate();\n    };\n    GL_SurfacePassBase.prototype._iInitConstantData = function (shader) {\n    };\n    GL_SurfacePassBase.prototype._iGetPreLightingVertexCode = function (shader, registerCache, sharedRegisters) {\n        return \"\";\n    };\n    GL_SurfacePassBase.prototype._iGetPreLightingFragmentCode = function (shader, registerCache, sharedRegisters) {\n        return \"\";\n    };\n    GL_SurfacePassBase.prototype._iGetVertexCode = function (shader, registerCache, sharedRegisters) {\n        return \"\";\n    };\n    GL_SurfacePassBase.prototype._iGetFragmentCode = function (shader, registerCache, sharedRegisters) {\n        return \"\";\n    };\n    GL_SurfacePassBase.prototype._iGetNormalVertexCode = function (shader, registerCache, sharedRegisters) {\n        return \"\";\n    };\n    GL_SurfacePassBase.prototype._iGetNormalFragmentCode = function (shader, registerCache, sharedRegisters) {\n        return \"\";\n    };\n    return GL_SurfacePassBase;\n}(GL_SurfaceBase_1.GL_SurfaceBase));\nexports.GL_SurfacePassBase = GL_SurfacePassBase;\n\n},{\"../events/PassEvent\":\"awayjs-renderergl/lib/events/PassEvent\",\"../surfaces/GL_SurfaceBase\":\"awayjs-renderergl/lib/surfaces/GL_SurfaceBase\"}],\"awayjs-renderergl/lib/surfaces/ISurfaceClassGL\":[function(require,module,exports){\n\"use strict\";\n\n},{}],\"awayjs-renderergl/lib/surfaces/SurfacePool\":[function(require,module,exports){\n\"use strict\";\n/**\n * @class away.pool.SurfacePool\n */\nvar SurfacePool = (function () {\n    /**\n     * //TODO\n     *\n     * @param surfaceClassGL\n     */\n    function SurfacePool(elementsClass, stage, surfaceClassGL) {\n        if (surfaceClassGL === void 0) { surfaceClassGL = null; }\n        this._abstractionPool = new Object();\n        this._elementsClass = elementsClass;\n        this._stage = stage;\n        this._surfaceClassGL = surfaceClassGL;\n    }\n    Object.defineProperty(SurfacePool.prototype, \"stage\", {\n        get: function () {\n            return this._stage;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * //TODO\n     *\n     * @param elementsOwner\n     * @returns IElements\n     */\n    SurfacePool.prototype.getAbstraction = function (surface) {\n        return (this._abstractionPool[surface.id] || (this._abstractionPool[surface.id] = new (this._surfaceClassGL || SurfacePool._abstractionClassPool[surface.assetType])(surface, this._elementsClass, this)));\n    };\n    /**\n     * //TODO\n     *\n     * @param elementsOwner\n     */\n    SurfacePool.prototype.clearAbstraction = function (surface) {\n        delete this._abstractionPool[surface.id];\n    };\n    /**\n     *\n     * @param imageObjectClass\n     */\n    SurfacePool.registerAbstraction = function (surfaceClassGL, assetClass) {\n        SurfacePool._abstractionClassPool[assetClass.assetType] = surfaceClassGL;\n    };\n    SurfacePool._abstractionClassPool = new Object();\n    return SurfacePool;\n}());\nexports.SurfacePool = SurfacePool;\n\n},{}],\"awayjs-renderergl/lib/surfaces/passes/BasicMaterialPass\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AssetEvent_1 = require(\"awayjs-core/lib/events/AssetEvent\");\nvar ShaderBase_1 = require(\"../../shaders/ShaderBase\");\nvar PassBase_1 = require(\"../../surfaces/passes/PassBase\");\n/**\n * BasicMaterialPass forms an abstract base class for the default shaded materials provided by Stage,\n * using material methods to define their appearance.\n */\nvar BasicMaterialPass = (function (_super) {\n    __extends(BasicMaterialPass, _super);\n    function BasicMaterialPass(render, surface, elementsClass, stage) {\n        _super.call(this, render, surface, elementsClass, stage);\n        this._diffuseR = 1;\n        this._diffuseG = 1;\n        this._diffuseB = 1;\n        this._diffuseA = 1;\n        this._shader = new ShaderBase_1.ShaderBase(elementsClass, this, this._stage);\n        this.invalidate();\n    }\n    BasicMaterialPass.prototype._iIncludeDependencies = function (shader) {\n        _super.prototype._iIncludeDependencies.call(this, shader);\n        if (this._textureVO != null)\n            shader.uvDependencies++;\n    };\n    BasicMaterialPass.prototype.invalidate = function () {\n        _super.prototype.invalidate.call(this);\n        this._textureVO = this._surface.getTextureAt(0) ? this._shader.getAbstraction(this._surface.getTextureAt(0)) : null;\n    };\n    BasicMaterialPass.prototype.dispose = function () {\n        if (this._textureVO) {\n            this._textureVO.onClear(new AssetEvent_1.AssetEvent(AssetEvent_1.AssetEvent.CLEAR, this._surface.getTextureAt(0)));\n            this._textureVO = null;\n        }\n        _super.prototype.dispose.call(this);\n    };\n    /**\n     * @inheritDoc\n     */\n    BasicMaterialPass.prototype._iGetFragmentCode = function (shader, regCache, sharedReg) {\n        var code = \"\";\n        var alphaReg;\n        if (this.preserveAlpha) {\n            alphaReg = regCache.getFreeFragmentSingleTemp();\n            regCache.addFragmentTempUsages(alphaReg, 1);\n            code += \"mov \" + alphaReg + \", \" + sharedReg.shadedTarget + \".w\\n\";\n        }\n        var targetReg = sharedReg.shadedTarget;\n        if (this._textureVO != null) {\n            code += this._textureVO._iGetFragmentCode(targetReg, regCache, sharedReg, sharedReg.uvVarying);\n            if (shader.alphaThreshold > 0) {\n                var cutOffReg = regCache.getFreeFragmentConstant();\n                this._fragmentConstantsIndex = cutOffReg.index * 4;\n                code += \"sub \" + targetReg + \".w, \" + targetReg + \".w, \" + cutOffReg + \".x\\n\" + \"kil \" + targetReg + \".w\\n\" + \"add \" + targetReg + \".w, \" + targetReg + \".w, \" + cutOffReg + \".x\\n\";\n            }\n        }\n        else if (shader.colorBufferIndex != -1) {\n            code += \"mov \" + targetReg + \", \" + sharedReg.colorVarying + \"\\n\";\n        }\n        else {\n            var diffuseInputReg = regCache.getFreeFragmentConstant();\n            this._fragmentConstantsIndex = diffuseInputReg.index * 4;\n            code += \"mov \" + targetReg + \", \" + diffuseInputReg + \"\\n\";\n        }\n        if (this.preserveAlpha) {\n            code += \"mul \" + sharedReg.shadedTarget + \".w, \" + sharedReg.shadedTarget + \".w, \" + alphaReg + \"\\n\";\n            regCache.removeFragmentTempUsage(alphaReg);\n        }\n        return code;\n    };\n    BasicMaterialPass.prototype._setRenderState = function (renderable, camera, viewProjection) {\n        _super.prototype._setRenderState.call(this, renderable, camera, viewProjection);\n        if (this._textureVO != null)\n            this._textureVO._setRenderState(renderable);\n    };\n    /**\n     * @inheritDoc\n     */\n    BasicMaterialPass.prototype._iActivate = function (camera) {\n        _super.prototype._iActivate.call(this, camera);\n        if (this._textureVO != null) {\n            this._textureVO.activate(this._render);\n            if (this._shader.alphaThreshold > 0)\n                this._shader.fragmentConstantData[this._fragmentConstantsIndex] = this._shader.alphaThreshold;\n        }\n        else if (this._shader.colorBufferIndex == -1) {\n            var index = this._fragmentConstantsIndex;\n            var data = this._shader.fragmentConstantData;\n            data[index] = this._diffuseR;\n            data[index + 1] = this._diffuseG;\n            data[index + 2] = this._diffuseB;\n            data[index + 3] = this._diffuseA;\n        }\n    };\n    return BasicMaterialPass;\n}(PassBase_1.PassBase));\nexports.BasicMaterialPass = BasicMaterialPass;\n\n},{\"../../shaders/ShaderBase\":\"awayjs-renderergl/lib/shaders/ShaderBase\",\"../../surfaces/passes/PassBase\":\"awayjs-renderergl/lib/surfaces/passes/PassBase\",\"awayjs-core/lib/events/AssetEvent\":undefined}],\"awayjs-renderergl/lib/surfaces/passes/ILightingPass\":[function(require,module,exports){\n\"use strict\";\n\n},{}],\"awayjs-renderergl/lib/surfaces/passes/IPass\":[function(require,module,exports){\n\"use strict\";\n\n},{}],\"awayjs-renderergl/lib/surfaces/passes/PassBase\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar EventDispatcher_1 = require(\"awayjs-core/lib/events/EventDispatcher\");\nvar PassEvent_1 = require(\"../../events/PassEvent\");\n/**\n * PassBase provides an abstract base class for material shader passes. A material pass constitutes at least\n * a render call per required renderable.\n */\nvar PassBase = (function (_super) {\n    __extends(PassBase, _super);\n    /**\n     * Creates a new PassBase object.\n     */\n    function PassBase(render, surface, elementsClass, stage) {\n        _super.call(this);\n        this._preserveAlpha = true;\n        this._forceSeparateMVP = false;\n        this._render = render;\n        this._surface = surface;\n        this._elementsClass = elementsClass;\n        this._stage = stage;\n    }\n    Object.defineProperty(PassBase.prototype, \"shader\", {\n        get: function () {\n            return this._shader;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PassBase.prototype, \"animationSet\", {\n        get: function () {\n            return this._surface.animationSet;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PassBase.prototype, \"preserveAlpha\", {\n        /**\n         * Indicates whether the output alpha value should remain unchanged compared to the material's original alpha.\n         */\n        get: function () {\n            return this._preserveAlpha;\n        },\n        set: function (value) {\n            if (this._preserveAlpha == value)\n                return;\n            this._preserveAlpha = value;\n            this.invalidate();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PassBase.prototype, \"forceSeparateMVP\", {\n        /**\n         * Indicates whether the screen projection should be calculated by forcing a separate scene matrix and\n         * view-projection matrix. This is used to prevent rounding errors when using multiple passes with different\n         * projection code.\n         */\n        get: function () {\n            return this._forceSeparateMVP;\n        },\n        set: function (value) {\n            if (this._forceSeparateMVP == value)\n                return;\n            this._forceSeparateMVP = value;\n            this.invalidate();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PassBase.prototype.getImageIndex = function (texture, index) {\n        if (index === void 0) { index = 0; }\n        return this._render.getImageIndex(texture, index);\n    };\n    /**\n     * Marks the shader program as invalid, so it will be recompiled before the next render.\n     */\n    PassBase.prototype.invalidate = function () {\n        this._shader.invalidateProgram();\n        this.dispatchEvent(new PassEvent_1.PassEvent(PassEvent_1.PassEvent.INVALIDATE, this));\n    };\n    /**\n     * Cleans up any resources used by the current object.\n     * @param deep Indicates whether other resources should be cleaned up, that could potentially be shared across different instances.\n     */\n    PassBase.prototype.dispose = function () {\n        this._render = null;\n        this._surface = null;\n        this._elementsClass = null;\n        this._stage = null;\n        if (this._shader) {\n            this._shader.dispose();\n            this._shader = null;\n        }\n    };\n    /**\n     * Renders the current pass. Before calling pass, activatePass needs to be called with the same index.\n     * @param pass The pass used to render the renderable.\n     * @param renderable The IRenderable object to draw.\n     * @param stage The Stage object used for rendering.\n     * @param entityCollector The EntityCollector object that contains the visible scene data.\n     * @param viewProjection The view-projection matrix used to project to the screen. This is not the same as\n     * camera.viewProjection as it includes the scaling factors when rendering to textures.\n     *\n     * @internal\n     */\n    PassBase.prototype._setRenderState = function (renderable, camera, viewProjection) {\n        this._shader._setRenderState(renderable, camera, viewProjection);\n    };\n    /**\n     * Sets the render state for the pass that is independent of the rendered object. This needs to be called before\n     * calling pass. Before activating a pass, the previously used pass needs to be deactivated.\n     * @param stage The Stage object which is currently used for rendering.\n     * @param camera The camera from which the scene is viewed.\n     * @private\n     */\n    PassBase.prototype._iActivate = function (camera) {\n        this._shader._iActivate(camera);\n    };\n    /**\n     * Clears the render state for the pass. This needs to be called before activating another pass.\n     * @param stage The Stage used for rendering\n     *\n     * @private\n     */\n    PassBase.prototype._iDeactivate = function () {\n        this._shader._iDeactivate();\n    };\n    PassBase.prototype._iIncludeDependencies = function (shader) {\n        this._render._iIncludeDependencies(shader);\n        if (this._forceSeparateMVP)\n            shader.globalPosDependencies++;\n    };\n    PassBase.prototype._iInitConstantData = function (shader) {\n    };\n    PassBase.prototype._iGetPreLightingVertexCode = function (shader, registerCache, sharedRegisters) {\n        return \"\";\n    };\n    PassBase.prototype._iGetPreLightingFragmentCode = function (shader, registerCache, sharedRegisters) {\n        return \"\";\n    };\n    PassBase.prototype._iGetVertexCode = function (shader, registerCache, sharedRegisters) {\n        return \"\";\n    };\n    PassBase.prototype._iGetFragmentCode = function (shader, registerCache, sharedRegisters) {\n        return \"\";\n    };\n    PassBase.prototype._iGetNormalVertexCode = function (shader, registerCache, sharedRegisters) {\n        return \"\";\n    };\n    PassBase.prototype._iGetNormalFragmentCode = function (shader, registerCache, sharedRegisters) {\n        return \"\";\n    };\n    return PassBase;\n}(EventDispatcher_1.EventDispatcher));\nexports.PassBase = PassBase;\n\n},{\"../../events/PassEvent\":\"awayjs-renderergl/lib/events/PassEvent\",\"awayjs-core/lib/events/EventDispatcher\":undefined}],\"awayjs-renderergl/lib/surfaces\":[function(require,module,exports){\n\"use strict\";\nvar BasicMaterialPass_1 = require(\"./surfaces/passes/BasicMaterialPass\");\nexports.BasicMaterialPass = BasicMaterialPass_1.BasicMaterialPass;\nvar PassBase_1 = require(\"./surfaces/passes/PassBase\");\nexports.PassBase = PassBase_1.PassBase;\nvar GL_BasicMaterialSurface_1 = require(\"./surfaces/GL_BasicMaterialSurface\");\nexports.GL_BasicMaterialSurface = GL_BasicMaterialSurface_1.GL_BasicMaterialSurface;\nvar GL_DepthSurface_1 = require(\"./surfaces/GL_DepthSurface\");\nexports.GL_DepthSurface = GL_DepthSurface_1.GL_DepthSurface;\nvar GL_DistanceSurface_1 = require(\"./surfaces/GL_DistanceSurface\");\nexports.GL_DistanceSurface = GL_DistanceSurface_1.GL_DistanceSurface;\nvar GL_SkyboxSurface_1 = require(\"./surfaces/GL_SkyboxSurface\");\nexports.GL_SkyboxSurface = GL_SkyboxSurface_1.GL_SkyboxSurface;\nvar GL_SurfaceBase_1 = require(\"./surfaces/GL_SurfaceBase\");\nexports.GL_SurfaceBase = GL_SurfaceBase_1.GL_SurfaceBase;\nvar GL_SurfacePassBase_1 = require(\"./surfaces/GL_SurfacePassBase\");\nexports.GL_SurfacePassBase = GL_SurfacePassBase_1.GL_SurfacePassBase;\nvar SurfacePool_1 = require(\"./surfaces/SurfacePool\");\nexports.SurfacePool = SurfacePool_1.SurfacePool;\n\n},{\"./surfaces/GL_BasicMaterialSurface\":\"awayjs-renderergl/lib/surfaces/GL_BasicMaterialSurface\",\"./surfaces/GL_DepthSurface\":\"awayjs-renderergl/lib/surfaces/GL_DepthSurface\",\"./surfaces/GL_DistanceSurface\":\"awayjs-renderergl/lib/surfaces/GL_DistanceSurface\",\"./surfaces/GL_SkyboxSurface\":\"awayjs-renderergl/lib/surfaces/GL_SkyboxSurface\",\"./surfaces/GL_SurfaceBase\":\"awayjs-renderergl/lib/surfaces/GL_SurfaceBase\",\"./surfaces/GL_SurfacePassBase\":\"awayjs-renderergl/lib/surfaces/GL_SurfacePassBase\",\"./surfaces/SurfacePool\":\"awayjs-renderergl/lib/surfaces/SurfacePool\",\"./surfaces/passes/BasicMaterialPass\":\"awayjs-renderergl/lib/surfaces/passes/BasicMaterialPass\",\"./surfaces/passes/PassBase\":\"awayjs-renderergl/lib/surfaces/passes/PassBase\"}],\"awayjs-renderergl/lib/textures/GL_Single2DTexture\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar MappingMode_1 = require(\"awayjs-display/lib/textures/MappingMode\");\nvar GL_TextureBase_1 = require(\"../textures/GL_TextureBase\");\n/**\n *\n * @class away.pool.GL_Single2DTexture\n */\nvar GL_Single2DTexture = (function (_super) {\n    __extends(GL_Single2DTexture, _super);\n    function GL_Single2DTexture(single2DTexture, shader) {\n        _super.call(this, single2DTexture, shader);\n        this._single2DTexture = single2DTexture;\n    }\n    GL_Single2DTexture.prototype.onClear = function (event) {\n        _super.prototype.onClear.call(this, event);\n        this._single2DTexture = null;\n    };\n    /**\n     *\n     * @param shader\n     * @param regCache\n     * @param targetReg The register in which to store the sampled colour.\n     * @param uvReg The uv coordinate vector with which to sample the texture map.\n     * @returns {string}\n     * @private\n     */\n    GL_Single2DTexture.prototype._iGetFragmentCode = function (targetReg, regCache, sharedReg, inputReg) {\n        var code = \"\";\n        var wrap = \"wrap\";\n        var format = \"\"; //this.getFormatString(this._single2DTexture.image2D);\n        var filter = \"linear,miplinear\";\n        var temp;\n        //modify depending on mapping mode\n        if (this._single2DTexture.mappingMode == MappingMode_1.MappingMode.RADIAL_GRADIENT) {\n            temp = regCache.getFreeFragmentVectorTemp();\n            code += \"mul \" + temp + \".xy, \" + inputReg + \", \" + inputReg + \"\\n\";\n            code += \"mul \" + temp + \".xy, \" + inputReg + \", \" + inputReg + \"\\n\";\n            code += \"add \" + temp + \".x, \" + temp + \".x, \" + temp + \".y\\n\";\n            code += \"sub \" + temp + \".y, \" + temp + \".y, \" + temp + \".y\\n\";\n            code += \"sqt \" + temp + \".x, \" + temp + \".x, \" + temp + \".x\\n\";\n            inputReg = temp;\n        }\n        //handles texture atlasing\n        if (this._shader.useImageRect) {\n            var samplerReg = regCache.getFreeFragmentConstant();\n            this._samplerIndex = samplerReg.index * 4;\n            temp = regCache.getFreeFragmentVectorTemp();\n            code += \"mul \" + temp + \", \" + inputReg + \", \" + samplerReg + \".xy\\n\";\n            code += \"add \" + temp + \", \" + temp + \", \" + samplerReg + \".zw\\n\";\n            inputReg = temp;\n        }\n        this._imageIndex = this._shader.getImageIndex(this._single2DTexture, 0);\n        var textureReg = this.getTextureReg(this._imageIndex, regCache, sharedReg);\n        this._textureIndex = textureReg.index;\n        code += \"tex \" + targetReg + \", \" + inputReg + \", \" + textureReg + \" <2d,\" + filter + \",\" + format + wrap + \">\\n\";\n        return code;\n    };\n    GL_Single2DTexture.prototype.activate = function (render) {\n        var sampler = render.samplers[this._imageIndex];\n        sampler.activate(this._textureIndex);\n        var image = render.images[this._imageIndex];\n        image.activate(this._textureIndex, sampler._sampler.mipmap);\n        if (this._shader.useImageRect) {\n            var index = this._samplerIndex;\n            var data = this._shader.fragmentConstantData;\n            if (!sampler._sampler.imageRect) {\n                data[index] = 1;\n                data[index + 1] = 1;\n                data[index + 2] = 0;\n                data[index + 3] = 0;\n            }\n            else {\n                data[index] = sampler._sampler.imageRect.width;\n                data[index + 1] = sampler._sampler.imageRect.height;\n                data[index + 2] = sampler._sampler.imageRect.x;\n                data[index + 3] = sampler._sampler.imageRect.y;\n            }\n        }\n    };\n    GL_Single2DTexture.prototype._setRenderState = function (renderable) {\n        var sampler = renderable.samplers[this._imageIndex];\n        if (sampler)\n            sampler.activate(this._textureIndex);\n        var image = renderable.images[this._imageIndex];\n        if (image)\n            image.activate(this._textureIndex, sampler._sampler.mipmap);\n        if (this._shader.useImageRect && sampler) {\n            var index = this._samplerIndex;\n            var data = this._shader.fragmentConstantData;\n            if (!sampler._sampler.imageRect) {\n                data[index] = 1;\n                data[index + 1] = 1;\n                data[index + 2] = 0;\n                data[index + 3] = 0;\n            }\n            else {\n                data[index] = sampler._sampler.imageRect.width;\n                data[index + 1] = sampler._sampler.imageRect.height;\n                data[index + 2] = sampler._sampler.imageRect.x;\n                data[index + 3] = sampler._sampler.imageRect.y;\n            }\n        }\n    };\n    return GL_Single2DTexture;\n}(GL_TextureBase_1.GL_TextureBase));\nexports.GL_Single2DTexture = GL_Single2DTexture;\n\n},{\"../textures/GL_TextureBase\":\"awayjs-renderergl/lib/textures/GL_TextureBase\",\"awayjs-display/lib/textures/MappingMode\":undefined}],\"awayjs-renderergl/lib/textures/GL_SingleCubeTexture\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar GL_TextureBase_1 = require(\"../textures/GL_TextureBase\");\n/**\n *\n * @class away.pool.TextureDataBase\n */\nvar GL_SingleCubeTexture = (function (_super) {\n    __extends(GL_SingleCubeTexture, _super);\n    function GL_SingleCubeTexture(singleCubeTexture, shader) {\n        _super.call(this, singleCubeTexture, shader);\n        this._singleCubeTexture = singleCubeTexture;\n    }\n    GL_SingleCubeTexture.prototype.onClear = function (event) {\n        _super.prototype.onClear.call(this, event);\n        this._singleCubeTexture = null;\n    };\n    GL_SingleCubeTexture.prototype._iIncludeDependencies = function (includeInput) {\n        if (includeInput === void 0) { includeInput = true; }\n        if (includeInput)\n            this._shader.usesPositionFragment = true;\n    };\n    /**\n     *\n     * @param shader\n     * @param regCache\n     * @param targetReg The register in which to store the sampled colour.\n     * @param uvReg The direction vector with which to sample the cube map.\n     * @returns {string}\n     * @private\n     */\n    GL_SingleCubeTexture.prototype._iGetFragmentCode = function (targetReg, regCache, sharedReg, inputReg) {\n        var format = \"\"; //this.getFormatString(this._singleCubeTexture.imageCube);\n        var filter = \"linear,miplinear\";\n        this._imageIndex = this._shader.getImageIndex(this._singleCubeTexture, 0);\n        var textureReg = this.getTextureReg(this._imageIndex, regCache, sharedReg);\n        this._textureIndex = textureReg.index;\n        return \"tex \" + targetReg + \", \" + inputReg + \", \" + textureReg + \" <cube,\" + format + filter + \">\\n\";\n    };\n    GL_SingleCubeTexture.prototype.activate = function (render) {\n        var sampler = render.samplers[this._imageIndex];\n        if (sampler)\n            sampler.activate(this._textureIndex);\n        if (render.images[this._imageIndex])\n            render.images[this._imageIndex].activate(this._textureIndex, sampler._sampler.mipmap);\n    };\n    GL_SingleCubeTexture.prototype._setRenderState = function (renderable) {\n        var sampler = renderable.samplers[this._imageIndex];\n        if (sampler)\n            sampler.activate(this._textureIndex);\n        if (renderable.images[this._imageIndex] && sampler)\n            renderable.images[this._imageIndex].activate(this._textureIndex, sampler._sampler.mipmap);\n    };\n    return GL_SingleCubeTexture;\n}(GL_TextureBase_1.GL_TextureBase));\nexports.GL_SingleCubeTexture = GL_SingleCubeTexture;\n\n},{\"../textures/GL_TextureBase\":\"awayjs-renderergl/lib/textures/GL_TextureBase\"}],\"awayjs-renderergl/lib/textures/GL_TextureBase\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AbstractMethodError_1 = require(\"awayjs-core/lib/errors/AbstractMethodError\");\nvar AbstractionBase_1 = require(\"awayjs-core/lib/library/AbstractionBase\");\nvar ContextGLTextureFormat_1 = require(\"awayjs-stagegl/lib/base/ContextGLTextureFormat\");\n/**\n *\n * @class away.pool.GL_TextureBaseBase\n */\nvar GL_TextureBase = (function (_super) {\n    __extends(GL_TextureBase, _super);\n    function GL_TextureBase(texture, shader) {\n        _super.call(this, texture, shader);\n        this._texture = texture;\n        this._shader = shader;\n        this._stage = shader._stage;\n    }\n    /**\n     *\n     */\n    GL_TextureBase.prototype.onClear = function (event) {\n        _super.prototype.onClear.call(this, event);\n        this._texture = null;\n        this._shader = null;\n        this._stage = null;\n    };\n    GL_TextureBase.prototype._iGetFragmentCode = function (targetReg, regCache, sharedReg, inputReg) {\n        if (inputReg === void 0) { inputReg = null; }\n        throw new AbstractMethodError_1.AbstractMethodError();\n    };\n    GL_TextureBase.prototype._setRenderState = function (renderable) {\n        //overidden for state logic\n    };\n    GL_TextureBase.prototype.activate = function (render) {\n        //overridden for activation logic\n    };\n    GL_TextureBase.prototype.getTextureReg = function (imageIndex, regCache, sharedReg) {\n        var index = this._shader.imageIndices.indexOf(imageIndex); //todo: collapse the index based on duplicate image objects to save registrations\n        if (index == -1) {\n            var textureReg = regCache.getFreeTextureReg();\n            sharedReg.textures.push(textureReg);\n            this._shader.imageIndices.push(imageIndex);\n            return textureReg;\n        }\n        return sharedReg.textures[index];\n    };\n    GL_TextureBase.prototype.getFormatString = function (image) {\n        switch (image.format) {\n            case ContextGLTextureFormat_1.ContextGLTextureFormat.COMPRESSED:\n                return \"dxt1,\";\n            case ContextGLTextureFormat_1.ContextGLTextureFormat.COMPRESSED_ALPHA:\n                return \"dxt5,\";\n            default:\n                return \"\";\n        }\n    };\n    return GL_TextureBase;\n}(AbstractionBase_1.AbstractionBase));\nexports.GL_TextureBase = GL_TextureBase;\n\n},{\"awayjs-core/lib/errors/AbstractMethodError\":undefined,\"awayjs-core/lib/library/AbstractionBase\":undefined,\"awayjs-stagegl/lib/base/ContextGLTextureFormat\":undefined}],\"awayjs-renderergl/lib/textures\":[function(require,module,exports){\n\"use strict\";\nvar GL_Single2DTexture_1 = require(\"./textures/GL_Single2DTexture\");\nexports.GL_Single2DTexture = GL_Single2DTexture_1.GL_Single2DTexture;\nvar GL_SingleCubeTexture_1 = require(\"./textures/GL_SingleCubeTexture\");\nexports.GL_SingleCubeTexture = GL_SingleCubeTexture_1.GL_SingleCubeTexture;\nvar GL_TextureBase_1 = require(\"./textures/GL_TextureBase\");\nexports.GL_TextureBase = GL_TextureBase_1.GL_TextureBase;\n\n},{\"./textures/GL_Single2DTexture\":\"awayjs-renderergl/lib/textures/GL_Single2DTexture\",\"./textures/GL_SingleCubeTexture\":\"awayjs-renderergl/lib/textures/GL_SingleCubeTexture\",\"./textures/GL_TextureBase\":\"awayjs-renderergl/lib/textures/GL_TextureBase\"}],\"awayjs-renderergl/lib/tools/commands/Merge\":[function(require,module,exports){\n\"use strict\";\nvar AttributesBuffer_1 = require(\"awayjs-core/lib/attributes/AttributesBuffer\");\nvar Matrix3DUtils_1 = require(\"awayjs-core/lib/geom/Matrix3DUtils\");\nvar TriangleElements_1 = require(\"awayjs-display/lib/graphics/TriangleElements\");\nvar Sprite_1 = require(\"awayjs-display/lib/display/Sprite\");\n/**\n *  Class Merge merges two or more static sprites into one.<code>Merge</code>\n */\nvar Merge = (function () {\n    /**\n     * @param    keepMaterial    [optional]    Determines if the merged object uses the recevier sprite material information or keeps its source material(s). Defaults to false.\n     * If false and receiver object has multiple materials, the last material found in receiver subsprites is applied to the merged subsprite(es).\n     * @param    disposeSources  [optional]    Determines if the sprite and geometry source(s) used for the merging are disposed. Defaults to false.\n     * If true, only receiver geometry and resulting sprite are kept in  memory.\n     * @param    objectSpace     [optional]    Determines if source sprite(es) is/are merged using objectSpace or worldspace. Defaults to false.\n     */\n    function Merge(keepMaterial, disposeSources, objectSpace) {\n        if (keepMaterial === void 0) { keepMaterial = false; }\n        if (disposeSources === void 0) { disposeSources = false; }\n        if (objectSpace === void 0) { objectSpace = false; }\n        this._keepMaterial = keepMaterial;\n        this._disposeSources = disposeSources;\n        this._objectSpace = objectSpace;\n    }\n    Object.defineProperty(Merge.prototype, \"disposeSources\", {\n        get: function () {\n            return this._disposeSources;\n        },\n        /**\n         * Determines if the sprite and geometry source(s) used for the merging are disposed. Defaults to false.\n         */\n        set: function (b) {\n            this._disposeSources = b;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Merge.prototype, \"keepMaterial\", {\n        get: function () {\n            return this._keepMaterial;\n        },\n        /**\n         * Determines if the material source(s) used for the merging are disposed. Defaults to false.\n         */\n        set: function (b) {\n            this._keepMaterial = b;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Merge.prototype, \"objectSpace\", {\n        get: function () {\n            return this._objectSpace;\n        },\n        /**\n         * Determines if source sprite(es) is/are merged using objectSpace or worldspace. Defaults to false.\n         */\n        set: function (b) {\n            this._objectSpace = b;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Merges all the children of a container into a single Sprite. If no Sprite object is found, method returns the receiver without modification.\n     *\n     * @param    receiver           The Sprite to receive the merged contents of the container.\n     * @param    objectContainer    The DisplayObjectContainer holding the sprites to be mergd.\n     *\n     * @return The merged Sprite instance.\n     */\n    Merge.prototype.applyToContainer = function (receiver, objectContainer) {\n        this.reset();\n        //collect container sprites\n        this.parseContainer(receiver, objectContainer);\n        //collect receiver\n        this.collect(receiver, false);\n        //merge to receiver\n        this.merge(receiver, this._disposeSources);\n    };\n    /**\n     * Merges all the sprites found in the Array&lt;Sprite&gt; into a single Sprite.\n     *\n     * @param    receiver    The Sprite to receive the merged contents of the sprites.\n     * @param    sprites      A series of Spritees to be merged with the reciever sprite.\n     */\n    Merge.prototype.applyToSpritees = function (receiver, sprites) {\n        this.reset();\n        if (!sprites.length)\n            return;\n        //collect sprites in vector\n        for (var i = 0; i < sprites.length; i++)\n            if (sprites[i] != receiver)\n                this.collect(sprites[i], this._disposeSources);\n        //collect receiver\n        this.collect(receiver, false);\n        //merge to receiver\n        this.merge(receiver, this._disposeSources);\n    };\n    /**\n     *  Merges 2 sprites into one. It is recommand to use apply when 2 sprites are to be merged. If more need to be merged, use either applyToSpritees or applyToContainer methods.\n     *\n     * @param    receiver    The Sprite to receive the merged contents of both sprites.\n     * @param    sprite        The Sprite to be merged with the receiver sprite\n     */\n    Merge.prototype.apply = function (receiver, sprite) {\n        this.reset();\n        //collect sprite\n        this.collect(sprite, this._disposeSources);\n        //collect receiver\n        this.collect(receiver, false);\n        //merge to receiver\n        this.merge(receiver, this._disposeSources);\n    };\n    Merge.prototype.reset = function () {\n        this._toDispose = new Array();\n        this._graphicVOs = new Array();\n    };\n    Merge.prototype.merge = function (destSprite, dispose) {\n        var i;\n        //var oldGraphics:Graphics;\n        var destGraphics;\n        var useSubMaterials;\n        //oldGraphics = destSprite.graphics.clone();\n        destGraphics = destSprite.graphics;\n        // Only apply materials directly to sub-sprites if necessary,\n        // i.e. if there is more than one material available.\n        useSubMaterials = (this._graphicVOs.length > 1);\n        for (i = 0; i < this._graphicVOs.length; i++) {\n            var elements = new TriangleElements_1.TriangleElements(new AttributesBuffer_1.AttributesBuffer());\n            elements.autoDeriveNormals = false;\n            elements.autoDeriveTangents = false;\n            var data = this._graphicVOs[i];\n            elements.setIndices(data.indices);\n            elements.setPositions(data.vertices);\n            elements.setNormals(data.normals);\n            elements.setTangents(data.tangents);\n            elements.setUVs(data.uvs);\n            destGraphics.addGraphic(elements);\n            if (this._keepMaterial && useSubMaterials)\n                destSprite.graphics[i].material = data.material;\n        }\n        if (this._keepMaterial && !useSubMaterials && this._graphicVOs.length)\n            destSprite.material = this._graphicVOs[0].material;\n        if (dispose) {\n            var len = this._toDispose.length;\n            for (var i; i < len; i++)\n                this._toDispose[i].dispose();\n            ;\n        }\n        this._toDispose = null;\n    };\n    Merge.prototype.collect = function (sprite, dispose) {\n        var subIdx;\n        var calc;\n        for (subIdx = 0; subIdx < sprite.graphics.count; subIdx++) {\n            var i;\n            var len;\n            var iIdx /*uint*/, vIdx /*uint*/, nIdx /*uint*/, tIdx /*uint*/, uIdx;\n            var indexOffset;\n            var elements;\n            var vo;\n            var vertices;\n            var normals;\n            var tangents;\n            var ind, pd, nd, td, ud;\n            elements = sprite.graphics.getGraphicAt(subIdx).elements;\n            pd = elements.positions.get(elements.numVertices);\n            nd = elements.normals.get(elements.numVertices);\n            td = elements.tangents.get(elements.numVertices);\n            ud = elements.uvs.get(elements.numVertices);\n            // Get (or create) a VO for this material\n            vo = this.getGraphicData(sprite.graphics.getGraphicAt(subIdx).material);\n            // Vertices and normals are copied to temporary vectors, to be transformed\n            // before concatenated onto those of the data. This is unnecessary if no\n            // transformation will be performed, i.e. for object space merging.\n            vertices = (this._objectSpace) ? vo.vertices : new Array();\n            normals = (this._objectSpace) ? vo.normals : new Array();\n            tangents = (this._objectSpace) ? vo.tangents : new Array();\n            // Copy over vertex attributes\n            vIdx = vertices.length;\n            nIdx = normals.length;\n            tIdx = tangents.length;\n            uIdx = vo.uvs.length;\n            len = elements.numVertices;\n            for (i = 0; i < len; i++) {\n                calc = i * 3;\n                // Position\n                vertices[vIdx++] = pd[calc];\n                vertices[vIdx++] = pd[calc + 1];\n                vertices[vIdx++] = pd[calc + 2];\n                // Normal\n                normals[nIdx++] = nd[calc];\n                normals[nIdx++] = nd[calc + 1];\n                normals[nIdx++] = nd[calc + 2];\n                // Tangent\n                tangents[tIdx++] = td[calc];\n                tangents[tIdx++] = td[calc + 1];\n                tangents[tIdx++] = td[calc + 2];\n                // UV\n                vo.uvs[uIdx++] = ud[i * 2];\n                vo.uvs[uIdx++] = ud[i * 2 + 1];\n            }\n            // Copy over triangle indices\n            indexOffset = (!this._objectSpace) ? vo.vertices.length / 3 : 0;\n            iIdx = vo.indices.length;\n            len = elements.numElements;\n            ind = elements.indices.get(len);\n            for (i = 0; i < len; i++) {\n                calc = i * 3;\n                vo.indices[iIdx++] = ind[calc] + indexOffset;\n                vo.indices[iIdx++] = ind[calc + 1] + indexOffset;\n                vo.indices[iIdx++] = ind[calc + 2] + indexOffset;\n            }\n            if (!this._objectSpace) {\n                sprite.sceneTransform.transformVectors(vertices, vertices);\n                Matrix3DUtils_1.Matrix3DUtils.deltaTransformVectors(sprite.sceneTransform, normals, normals);\n                Matrix3DUtils_1.Matrix3DUtils.deltaTransformVectors(sprite.sceneTransform, tangents, tangents);\n                // Copy vertex data from temporary (transformed) vectors\n                vIdx = vo.vertices.length;\n                nIdx = vo.normals.length;\n                tIdx = vo.tangents.length;\n                len = vertices.length;\n                for (i = 0; i < len; i++) {\n                    vo.vertices[vIdx++] = vertices[i];\n                    vo.normals[nIdx++] = normals[i];\n                    vo.tangents[tIdx++] = tangents[i];\n                }\n            }\n        }\n        if (dispose)\n            this._toDispose.push(sprite);\n    };\n    Merge.prototype.getGraphicData = function (material) {\n        var data;\n        if (this._keepMaterial) {\n            var i;\n            var len;\n            len = this._graphicVOs.length;\n            for (i = 0; i < len; i++) {\n                if (this._graphicVOs[i].material == material) {\n                    data = this._graphicVOs[i];\n                    break;\n                }\n            }\n        }\n        else if (this._graphicVOs.length) {\n            // If materials are not to be kept, all data can be\n            // put into a single VO, so return that one.\n            data = this._graphicVOs[0];\n        }\n        // No data (for this material) found, create new.\n        if (!data) {\n            data = new GraphicVO();\n            data.vertices = new Array();\n            data.normals = new Array();\n            data.tangents = new Array();\n            data.uvs = new Array();\n            data.indices = new Array();\n            data.material = material;\n            this._graphicVOs.push(data);\n        }\n        return data;\n    };\n    Merge.prototype.parseContainer = function (receiver, object) {\n        var child;\n        var i;\n        if (object instanceof Sprite_1.Sprite && object != receiver)\n            this.collect(object, this._disposeSources);\n        for (i = 0; i < object.numChildren; ++i) {\n            child = object.getChildAt(i);\n            this.parseContainer(receiver, child);\n        }\n    };\n    return Merge;\n}());\nexports.Merge = Merge;\nvar GraphicVO = (function () {\n    function GraphicVO() {\n    }\n    return GraphicVO;\n}());\nexports.GraphicVO = GraphicVO;\n\n},{\"awayjs-core/lib/attributes/AttributesBuffer\":undefined,\"awayjs-core/lib/geom/Matrix3DUtils\":undefined,\"awayjs-display/lib/display/Sprite\":undefined,\"awayjs-display/lib/graphics/TriangleElements\":undefined}],\"awayjs-renderergl/lib/tools/data/ParticleGraphicsTransform\":[function(require,module,exports){\n\"use strict\";\n/**\n * ...\n */\nvar ParticleGraphicsTransform = (function () {\n    function ParticleGraphicsTransform() {\n    }\n    Object.defineProperty(ParticleGraphicsTransform.prototype, \"vertexTransform\", {\n        get: function () {\n            return this._defaultVertexTransform;\n        },\n        set: function (value) {\n            this._defaultVertexTransform = value;\n            this._defaultInvVertexTransform = value.clone();\n            this._defaultInvVertexTransform.invert();\n            this._defaultInvVertexTransform.transpose();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ParticleGraphicsTransform.prototype, \"UVTransform\", {\n        get: function () {\n            return this._defaultUVTransform;\n        },\n        set: function (value) {\n            this._defaultUVTransform = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ParticleGraphicsTransform.prototype, \"invVertexTransform\", {\n        get: function () {\n            return this._defaultInvVertexTransform;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ParticleGraphicsTransform;\n}());\nexports.ParticleGraphicsTransform = ParticleGraphicsTransform;\n\n},{}],\"awayjs-renderergl/lib/tools\":[function(require,module,exports){\n\"use strict\";\nvar Merge_1 = require(\"./tools/commands/Merge\");\nexports.Merge = Merge_1.Merge;\nvar ParticleGraphicsTransform_1 = require(\"./tools/data/ParticleGraphicsTransform\");\nexports.ParticleGraphicsTransform = ParticleGraphicsTransform_1.ParticleGraphicsTransform;\n\n},{\"./tools/commands/Merge\":\"awayjs-renderergl/lib/tools/commands/Merge\",\"./tools/data/ParticleGraphicsTransform\":\"awayjs-renderergl/lib/tools/data/ParticleGraphicsTransform\"}],\"awayjs-renderergl/lib/utils/ParticleGraphicsHelper\":[function(require,module,exports){\n\"use strict\";\nvar AttributesBuffer_1 = require(\"awayjs-core/lib/attributes/AttributesBuffer\");\nvar Point_1 = require(\"awayjs-core/lib/geom/Point\");\nvar Vector3D_1 = require(\"awayjs-core/lib/geom/Vector3D\");\nvar ParticleData_1 = require(\"awayjs-display/lib/animators/data/ParticleData\");\nvar TriangleElements_1 = require(\"awayjs-display/lib/graphics/TriangleElements\");\n/**\n * ...\n */\nvar ParticleGraphicsHelper = (function () {\n    function ParticleGraphicsHelper() {\n    }\n    ParticleGraphicsHelper.generateGraphics = function (output, graphicsArray, transforms) {\n        if (transforms === void 0) { transforms = null; }\n        var indicesVector = new Array();\n        var positionsVector = new Array();\n        var normalsVector = new Array();\n        var tangentsVector = new Array();\n        var uvsVector = new Array();\n        var vertexCounters = new Array();\n        var particles = new Array();\n        var elementsArray = new Array();\n        var numParticles = graphicsArray.length;\n        var sourceGraphics;\n        var sourceElements;\n        var numGraphics;\n        var indices;\n        var positions;\n        var normals;\n        var tangents;\n        var uvs;\n        var vertexCounter;\n        var elements;\n        var i;\n        var j;\n        var sub2SubMap = new Array();\n        var tempVertex = new Vector3D_1.Vector3D;\n        var tempNormal = new Vector3D_1.Vector3D;\n        var tempTangents = new Vector3D_1.Vector3D;\n        var tempUV = new Point_1.Point;\n        for (i = 0; i < numParticles; i++) {\n            sourceGraphics = graphicsArray[i];\n            numGraphics = sourceGraphics.count;\n            for (var srcIndex = 0; srcIndex < numGraphics; srcIndex++) {\n                //create a different particle subgeometry group for each source subgeometry in a particle.\n                if (sub2SubMap.length <= srcIndex) {\n                    sub2SubMap.push(elementsArray.length);\n                    indicesVector.push(new Array());\n                    positionsVector.push(new Array());\n                    normalsVector.push(new Array());\n                    tangentsVector.push(new Array());\n                    uvsVector.push(new Array());\n                    elementsArray.push(new TriangleElements_1.TriangleElements(new AttributesBuffer_1.AttributesBuffer()));\n                    vertexCounters.push(0);\n                }\n                sourceElements = sourceGraphics.getGraphicAt(srcIndex).elements;\n                //add a new particle subgeometry if this source subgeometry will take us over the maxvertex limit\n                if (sourceElements.numVertices + vertexCounters[sub2SubMap[srcIndex]] > ParticleGraphicsHelper.MAX_VERTEX) {\n                    //update submap and add new subgeom vectors\n                    sub2SubMap[srcIndex] = elementsArray.length;\n                    indicesVector.push(new Array());\n                    positionsVector.push(new Array());\n                    normalsVector.push(new Array());\n                    tangentsVector.push(new Array());\n                    uvsVector.push(new Array());\n                    elementsArray.push(new TriangleElements_1.TriangleElements(new AttributesBuffer_1.AttributesBuffer()));\n                    vertexCounters.push(0);\n                }\n                j = sub2SubMap[srcIndex];\n                //select the correct vector\n                indices = indicesVector[j];\n                positions = positionsVector[j];\n                normals = normalsVector[j];\n                tangents = tangentsVector[j];\n                uvs = uvsVector[j];\n                vertexCounter = vertexCounters[j];\n                elements = elementsArray[j];\n                var particleData = new ParticleData_1.ParticleData();\n                particleData.numVertices = sourceElements.numVertices;\n                particleData.startVertexIndex = vertexCounter;\n                particleData.particleIndex = i;\n                particleData.elements = elements;\n                particles.push(particleData);\n                vertexCounters[j] += sourceElements.numVertices;\n                var k;\n                var tempLen;\n                var compact = sourceElements;\n                var product;\n                var sourcePositions;\n                var sourceNormals;\n                var sourceTangents;\n                var sourceUVs;\n                if (compact) {\n                    tempLen = compact.numVertices;\n                    sourcePositions = compact.positions.get(tempLen);\n                    sourceNormals = compact.normals.get(tempLen);\n                    sourceTangents = compact.tangents.get(tempLen);\n                    sourceUVs = compact.uvs.get(tempLen);\n                    if (transforms) {\n                        var particleGraphicsTransform = transforms[i];\n                        var vertexTransform = particleGraphicsTransform.vertexTransform;\n                        var invVertexTransform = particleGraphicsTransform.invVertexTransform;\n                        var UVTransform = particleGraphicsTransform.UVTransform;\n                        for (k = 0; k < tempLen; k++) {\n                            /*\n                             * 0 - 2: vertex position X, Y, Z\n                             * 3 - 5: normal X, Y, Z\n                             * 6 - 8: tangent X, Y, Z\n                             * 9 - 10: U V\n                             * 11 - 12: Secondary U V*/\n                            product = k * 3;\n                            tempVertex.x = sourcePositions[product];\n                            tempVertex.y = sourcePositions[product + 1];\n                            tempVertex.z = sourcePositions[product + 2];\n                            tempNormal.x = sourceNormals[product];\n                            tempNormal.y = sourceNormals[product + 1];\n                            tempNormal.z = sourceNormals[product + 2];\n                            tempTangents.x = sourceTangents[product];\n                            tempTangents.y = sourceTangents[product + 1];\n                            tempTangents.z = sourceTangents[product + 2];\n                            tempUV.x = sourceUVs[k * 2];\n                            tempUV.y = sourceUVs[k * 2 + 1];\n                            if (vertexTransform) {\n                                tempVertex = vertexTransform.transformVector(tempVertex);\n                                tempNormal = invVertexTransform.deltaTransformVector(tempNormal);\n                                tempTangents = invVertexTransform.deltaTransformVector(tempNormal);\n                            }\n                            if (UVTransform)\n                                tempUV = UVTransform.transformPoint(tempUV);\n                            //this is faster than that only push one data\n                            positions.push(tempVertex.x, tempVertex.y, tempVertex.z);\n                            normals.push(tempNormal.x, tempNormal.y, tempNormal.z);\n                            tangents.push(tempTangents.x, tempTangents.y, tempTangents.z);\n                            uvs.push(tempUV.x, tempUV.y);\n                        }\n                    }\n                    else {\n                        for (k = 0; k < tempLen; k++) {\n                            product = k * 3;\n                            //this is faster than that only push one data\n                            positions.push(sourcePositions[product], sourcePositions[product + 1], sourcePositions[product + 2]);\n                            normals.push(sourceNormals[product], sourceNormals[product + 1], sourceNormals[product + 2]);\n                            tangents.push(sourceTangents[product], sourceTangents[product + 1], sourceTangents[product + 2]);\n                            uvs.push(sourceUVs[k * 2], sourceUVs[k * 2 + 1]);\n                        }\n                    }\n                }\n                else {\n                }\n                tempLen = sourceElements.numElements;\n                var sourceIndices = sourceElements.indices.get(tempLen);\n                for (k = 0; k < tempLen; k++) {\n                    product = k * 3;\n                    indices.push(sourceIndices[product] + vertexCounter, sourceIndices[product + 1] + vertexCounter, sourceIndices[product + 2] + vertexCounter);\n                }\n            }\n        }\n        output.particles = particles;\n        output.numParticles = numParticles;\n        numParticles = elementsArray.length;\n        for (i = 0; i < numParticles; i++) {\n            elements = elementsArray[i];\n            elements.autoDeriveNormals = false;\n            elements.autoDeriveTangents = false;\n            elements.setIndices(indicesVector[i]);\n            elements.setPositions(positionsVector[i]);\n            elements.setNormals(normalsVector[i]);\n            elements.setTangents(tangentsVector[i]);\n            elements.setUVs(uvsVector[i]);\n            output.addGraphic(elements);\n        }\n    };\n    ParticleGraphicsHelper.MAX_VERTEX = 65535;\n    return ParticleGraphicsHelper;\n}());\nexports.ParticleGraphicsHelper = ParticleGraphicsHelper;\n\n},{\"awayjs-core/lib/attributes/AttributesBuffer\":undefined,\"awayjs-core/lib/geom/Point\":undefined,\"awayjs-core/lib/geom/Vector3D\":undefined,\"awayjs-display/lib/animators/data/ParticleData\":undefined,\"awayjs-display/lib/graphics/TriangleElements\":undefined}],\"awayjs-renderergl/lib/utils/PerspectiveMatrix3D\":[function(require,module,exports){\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Matrix3D_1 = require(\"awayjs-core/lib/geom/Matrix3D\");\n/**\n *\n */\nvar PerspectiveMatrix3D = (function (_super) {\n    __extends(PerspectiveMatrix3D, _super);\n    function PerspectiveMatrix3D(v) {\n        if (v === void 0) { v = null; }\n        _super.call(this, v);\n    }\n    PerspectiveMatrix3D.prototype.perspectiveFieldOfViewLH = function (fieldOfViewY, aspectRatio, zNear, zFar) {\n        var yScale = 1 / Math.tan(fieldOfViewY / 2);\n        var xScale = yScale / aspectRatio;\n        this.rawData[0] = xScale;\n        this.rawData[1] = 0.0;\n        this.rawData[2] = 0.0;\n        this.rawData[3] = 0.0;\n        this.rawData[4] = 0.0;\n        this.rawData[5] = yScale;\n        this.rawData[6] = 0.0;\n        this.rawData[7] = 0.0;\n        this.rawData[8] = 0.0;\n        this.rawData[9] = 0.0;\n        this.rawData[10] = zFar / (zFar - zNear);\n        this.rawData[11] = 1.0;\n        this.rawData[12] = 0.0;\n        this.rawData[13] = 0.0;\n        this.rawData[14] = (zNear * zFar) / (zNear - zFar);\n        this.rawData[15] = 0.0;\n    };\n    return PerspectiveMatrix3D;\n}(Matrix3D_1.Matrix3D));\nexports.PerspectiveMatrix3D = PerspectiveMatrix3D;\n\n},{\"awayjs-core/lib/geom/Matrix3D\":undefined}],\"awayjs-renderergl/lib/utils\":[function(require,module,exports){\n\"use strict\";\nvar ParticleGraphicsHelper_1 = require(\"./utils/ParticleGraphicsHelper\");\nexports.ParticleGraphicsHelper = ParticleGraphicsHelper_1.ParticleGraphicsHelper;\nvar PerspectiveMatrix3D_1 = require(\"./utils/PerspectiveMatrix3D\");\nexports.PerspectiveMatrix3D = PerspectiveMatrix3D_1.PerspectiveMatrix3D;\n\n},{\"./utils/ParticleGraphicsHelper\":\"awayjs-renderergl/lib/utils/ParticleGraphicsHelper\",\"./utils/PerspectiveMatrix3D\":\"awayjs-renderergl/lib/utils/PerspectiveMatrix3D\"}]},{},[1])\n\n",
    "import * as animators\t\t\t\tfrom \"./lib/animators\";\nimport * as elements\t\t\t\tfrom \"./lib/elements\";\nimport * as errors\t\t\t\t\tfrom \"./lib/errors\";\nimport * as events\t\t\t\t\tfrom \"./lib/events\";\nimport * as filters\t\t\t\t\tfrom \"./lib/filters\";\nimport * as managers\t\t\t\tfrom \"./lib/managers\";\nimport * as renderables\t\t\t\tfrom \"./lib/renderables\";\nimport * as shaders\t\t\t\t\tfrom \"./lib/shaders\";\nimport * as sort\t\t\t\t\tfrom \"./lib/sort\";\nimport * as surfaces\t\t\t\tfrom \"./lib/surfaces\";\nimport * as textures\t\t\t\tfrom \"./lib/textures\";\nimport * as tools\t\t\t\t\tfrom \"./lib/tools\";\nimport * as utils\t\t\t\t\tfrom \"./lib/utils\";\nimport {DefaultRenderer}\t\t\t\tfrom \"./lib/DefaultRenderer\";\nimport {DepthRenderer}\t\t\t\tfrom \"./lib/DepthRenderer\";\nimport {DistanceRenderer}\t\t\t\tfrom \"./lib/DistanceRenderer\";\nimport {Filter3DRenderer}\t\t\t\tfrom \"./lib/Filter3DRenderer\";\nimport {RendererBase}\t\t\t\t\tfrom \"./lib/RendererBase\";\n\nimport {BasicMaterial}\t\t\t\tfrom \"awayjs-display/lib/materials/BasicMaterial\";\nimport {Skybox}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Skybox\";\nimport {Billboard}\t\t\t\t\tfrom \"awayjs-display/lib/display/Billboard\";\nimport {LineSegment}\t\t\t\t\tfrom \"awayjs-display/lib/display/LineSegment\";\nimport {LineElements}\t\t\t\t\tfrom \"awayjs-display/lib/graphics/LineElements\";\nimport {TriangleElements}\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\nimport {Graphic}\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphic\";\nimport {Single2DTexture}\t\t\t\tfrom \"awayjs-display/lib/textures/Single2DTexture\";\nimport {SingleCubeTexture}\t\t\tfrom \"awayjs-display/lib/textures/SingleCubeTexture\";\n\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\n\nsurfaces.SurfacePool.registerAbstraction(surfaces.GL_BasicMaterialSurface, BasicMaterial);\nsurfaces.SurfacePool.registerAbstraction(surfaces.GL_SkyboxSurface, Skybox);\n\nStage.registerAbstraction(elements.GL_LineElements, LineElements);\nStage.registerAbstraction(elements.GL_TriangleElements, TriangleElements);\n\nshaders.ShaderBase.registerAbstraction(textures.GL_Single2DTexture, Single2DTexture);\nshaders.ShaderBase.registerAbstraction(textures.GL_SingleCubeTexture, SingleCubeTexture);\n\nRendererBase.registerAbstraction(renderables.GL_BillboardRenderable, Billboard);\nRendererBase.registerAbstraction(renderables.GL_LineSegmentRenderable, LineSegment);\nRendererBase.registerAbstraction(renderables.GL_GraphicRenderable, Graphic);\nRendererBase.registerAbstraction(renderables.GL_SkyboxRenderable, Skybox);\n\nexport {\n\tanimators,\n\telements,\n\terrors,\n\tevents,\n\tfilters,\n\tmanagers,\n\trenderables,\n\tshaders,\n\tsort,\n\tsurfaces,\n\ttextures,\n\ttools,\n\tutils,\n\tDefaultRenderer,\n\tDepthRenderer,\n\tDistanceRenderer,\n\tFilter3DRenderer,\n\tRendererBase\n}",
    "import {ImageBase}\t\t\t\t\tfrom \"awayjs-core/lib/image/ImageBase\";\nimport {BitmapImage2D}\t\t\t\tfrom \"awayjs-core/lib/image/BitmapImage2D\";\nimport {Matrix3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\nimport {Rectangle}\t\t\t\t\tfrom \"awayjs-core/lib/geom/Rectangle\";\nimport {Vector3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {LightBase}\t\t\t\t\tfrom \"awayjs-display/lib/display/LightBase\";\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\nimport {DirectionalLight}\t\t\t\tfrom \"awayjs-display/lib/display/DirectionalLight\";\nimport {PointLight}\t\t\t\t\tfrom \"awayjs-display/lib/display/PointLight\";\nimport {IEntity}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/IEntity\";\nimport {LightProbe}\t\t\t\t\tfrom \"awayjs-display/lib/display/LightProbe\";\nimport {Skybox}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Skybox\";\nimport {Scene}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Scene\";\nimport {ShadowMapperBase}\t\t\t\tfrom \"awayjs-display/lib/materials/shadowmappers/ShadowMapperBase\";\nimport {INode}\t\t\t\t\t\tfrom \"awayjs-display/lib/partition/INode\";\n\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\nimport {ContextGLCompareMode}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLCompareMode\";\nimport {ContextGLClearMask}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLClearMask\";\nimport {IContextGL}\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/IContextGL\";\n\nimport {RendererBase}\t\t\t\t\tfrom \"./RendererBase\";\nimport {DepthRenderer}\t\t\t\tfrom \"./DepthRenderer\";\nimport {DistanceRenderer}\t\t\t\tfrom \"./DistanceRenderer\";\nimport {Filter3DRenderer}\t\t\t\tfrom \"./Filter3DRenderer\";\nimport {Filter3DBase}\t\t\t\t\tfrom \"./filters/Filter3DBase\";\nimport {GL_SkyboxElements}\t\t\tfrom \"./elements/GL_SkyboxElements\";\nimport {GL_RenderableBase}\t\t\tfrom \"./renderables/GL_RenderableBase\";\nimport {RTTBufferManager}\t\t\t\tfrom \"./managers/RTTBufferManager\";\nimport {IPass}\t\t\t\t\t\tfrom \"./surfaces/passes/IPass\";\nimport {SurfacePool}\t\t\t\t\tfrom \"./surfaces/SurfacePool\";\n\n/**\n * The DefaultRenderer class provides the default rendering method. It renders the scene graph objects using the\n * materials assigned to them.\n *\n * @class away.render.DefaultRenderer\n */\nexport class DefaultRenderer extends RendererBase\n{\n\tpublic _pRequireDepthRender:boolean;\n\n\tprivate _pDistanceRenderer:DepthRenderer;\n\tprivate _pDepthRenderer:DepthRenderer;\n\tpublic _pFilter3DRenderer:Filter3DRenderer;\n\n\tpublic _pDepthRender:BitmapImage2D;\n\n\tprivate _antiAlias:number = 0;\n\tprivate _directionalLights:Array<DirectionalLight> = new Array<DirectionalLight>();\n\tprivate _pointLights:Array<PointLight> = new Array<PointLight>();\n\tprivate _lightProbes:Array<LightProbe> = new Array<LightProbe>();\n\n\tpublic get antiAlias():number\n\t{\n\t\treturn this._antiAlias;\n\t}\n\n\tpublic set antiAlias(value:number)\n\t{\n\t\tif (this._antiAlias == value)\n\t\t\treturn;\n\n\t\tthis._antiAlias = value;\n\n\t\tthis._pBackBufferInvalid = true;\n\t}\n\n\t/**\n\t *\n\t */\n\tpublic get depthPrepass():boolean\n\t{\n\t\treturn this._depthPrepass;\n\t}\n\n\tpublic set depthPrepass(value:boolean)\n\t{\n\t\tthis._depthPrepass = value;\n\t}\n\n\t/**\n\t *\n\t * @returns {*}\n\t */\n\tpublic get filters3d():Array<Filter3DBase>\n\t{\n\t\treturn this._pFilter3DRenderer? this._pFilter3DRenderer.filters : null;\n\t}\n\tpublic set filters3d(value:Array<Filter3DBase>)\n\t{\n\t\tif (value && value.length == 0)\n\t\t\tvalue = null;\n\n\t\tif (this._pFilter3DRenderer && !value) {\n\t\t\tthis._pFilter3DRenderer.dispose();\n\t\t\tthis._pFilter3DRenderer = null;\n\t\t} else if (!this._pFilter3DRenderer && value) {\n\t\t\tthis._pFilter3DRenderer = new Filter3DRenderer(this._pStage);\n\t\t\tthis._pFilter3DRenderer.filters = value;\n\t\t}\n\n\t\tif (this._pFilter3DRenderer) {\n\t\t\tthis._pFilter3DRenderer.filters = value;\n\t\t\tthis._pRequireDepthRender = this._pFilter3DRenderer.requireDepthRender;\n\t\t} else {\n\t\t\tthis._pRequireDepthRender = false;\n\n\t\t\tif (this._pDepthRender) {\n\t\t\t\tthis._pDepthRender.dispose();\n\t\t\t\tthis._pDepthRender = null;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Creates a new DefaultRenderer object.\n\t *\n\t * @param antiAlias The amount of anti-aliasing to use.\n\t * @param renderMode The render mode to use.\n\t */\n\tconstructor(stage:Stage = null, forceSoftware:boolean = false, profile:string = \"baseline\", mode:string = \"auto\")\n\t{\n\t\tsuper(stage, null, forceSoftware, profile, mode);\n\n\t\tif (stage)\n\t\t\tthis.shareContext = true;\n\n\t\tthis._pRttBufferManager = RTTBufferManager.getInstance(this._pStage);\n\n\t\tthis._pDepthRenderer = new DepthRenderer(this._pStage);\n\t\tthis._pDistanceRenderer = new DistanceRenderer(this._pStage);\n\n\t\tif (this._width == 0)\n\t\t\tthis.width = window.innerWidth;\n\t\telse\n\t\t\tthis._pRttBufferManager.viewWidth = this._width;\n\n\t\tif (this._height == 0)\n\t\t\tthis.height = window.innerHeight;\n\t\telse\n\t\t\tthis._pRttBufferManager.viewHeight = this._height;\n\t}\n\n\t/**\n\t *\n\t */\n\tpublic enterNode(node:INode):boolean\n\t{\n\t\tvar enter:boolean = super.enterNode(node);\n\n\t\tif (enter && node.debugVisible)\n\t\t\tthis.applyEntity(node.bounds.boundsPrimitive);\n\n\t\treturn enter;\n\t}\n\n\tpublic render(camera:Camera, scene:Scene):void\n\t{\n\t\tsuper.render(camera, scene);\n\n\t\tif (!this._pStage.recoverFromDisposal()) {//if context has Disposed by the OS,don't render at this frame\n\t\t\tthis._pBackBufferInvalid = true;\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._pBackBufferInvalid)// reset or update render settings\n\t\t\tthis.pUpdateBackBuffer();\n\n\t\tif (this.shareContext && this._pContext)\n\t\t\tthis._pContext.clear(0, 0, 0, 1, 1, 0, ContextGLClearMask.DEPTH);\n\n\t\tif (this._pFilter3DRenderer) {\n\t\t\tthis.textureRatioX = this._pRttBufferManager.textureRatioX;\n\t\t\tthis.textureRatioY = this._pRttBufferManager.textureRatioY;\n\t\t} else {\n\t\t\tthis.textureRatioX = 1;\n\t\t\tthis.textureRatioY = 1;\n\t\t}\n\n\t\tif (this._pRequireDepthRender)\n\t\t\tthis.pRenderSceneDepthToTexture(camera, scene);\n\n\t\tif (this._depthPrepass)\n\t\t\tthis.pRenderDepthPrepass(camera, scene);\n\n\t\t//reset lights\n\t\tthis._directionalLights.length = 0;\n\t\tthis._pointLights.length = 0;\n\t\tthis._lightProbes.length = 0;\n\n\t\tif (this._pFilter3DRenderer && this._pContext) { //TODO\n\t\t\tthis._iRender(camera, scene, this._pFilter3DRenderer.getMainInputTexture(this._pStage), this._pRttBufferManager.renderToTextureRect);\n\t\t\tthis._pFilter3DRenderer.render(this._pStage, camera, this._pDepthRender);\n\t\t} else {\n\n\t\t\tif (this.shareContext)\n\t\t\t\tthis._iRender(camera, scene, null, this._pScissorRect);\n\t\t\telse\n\t\t\t\tthis._iRender(camera, scene);\n\t\t}\n\n\t\tif (!this.shareContext && this._pContext)\n\t\t\tthis._pContext.present();\n\n\t\t// register that a view has been rendered\n\t\tthis._pStage.bufferClear = false;\n\t}\n\n\tpublic pExecuteRender(camera:Camera, target:ImageBase = null, scissorRect:Rectangle = null, surfaceSelector:number = 0):void\n\t{\n\t\tthis.updateLights(camera);\n\n\t\tsuper.pExecuteRender(camera, target, scissorRect, surfaceSelector);\n\t}\n\n\tprivate updateLights(camera:Camera):void\n\t{\n\t\tvar len:number, i:number;\n\t\tvar light:LightBase;\n\t\tvar shadowMapper:ShadowMapperBase;\n\n\t\tlen = this._directionalLights.length;\n\t\tfor (i = 0; i < len; ++i) {\n\t\t\t\tlight = this._directionalLights[i];\n\n\t\t\tshadowMapper = light.shadowMapper;\n\n\t\t\tif (light.shadowsEnabled && (shadowMapper.autoUpdateShadows || shadowMapper._iShadowsInvalid ))\n\t\t\t\tshadowMapper.iRenderDepthMap(camera, light.scene, this._pDepthRenderer);\n\t\t}\n\n\t\tlen = this._pointLights.length;\n\t\tfor (i = 0; i < len; ++i) {\n\t\t\tlight = <LightBase> this._pointLights[i];\n\n\t\t\tshadowMapper = light.shadowMapper;\n\n\t\t\tif (light.shadowsEnabled && (shadowMapper.autoUpdateShadows || shadowMapper._iShadowsInvalid))\n\t\t\t\tshadowMapper.iRenderDepthMap(camera, light.scene, this._pDistanceRenderer);\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * @param entity\n\t */\n\tpublic applyDirectionalLight(entity:IEntity):void\n\t{\n\t\tthis._directionalLights.push(<DirectionalLight> entity);\n\t}\n\n\t/**\n\t *\n\t * @param entity\n\t */\n\tpublic applyLightProbe(entity:IEntity):void\n\t{\n\t\tthis._lightProbes.push(<LightProbe> entity);\n\t}\n\n\t/**\n\t *\n\t * @param entity\n\t */\n\tpublic applyPointLight(entity:IEntity):void\n\t{\n\t\tthis._pointLights.push(<PointLight> entity);\n\t}\n\n\tpublic dispose():void\n\t{\n\t\tif (!this.shareContext)\n\t\t\tthis._pStage.dispose();\n\n\t\tthis._pRttBufferManager.dispose();\n\t\tthis._pRttBufferManager = null;\n\n\t\tthis._pDepthRenderer.dispose();\n\t\tthis._pDistanceRenderer.dispose();\n\t\tthis._pDepthRenderer = null;\n\t\tthis._pDistanceRenderer = null;\n\n\t\tthis._pDepthRender = null;\n\n\t\tsuper.dispose();\n\t}\n\n\n\t/**\n\t *\n\t */\n\tpublic pRenderDepthPrepass(camera:Camera, scene:Scene):void\n\t{\n\t\tthis._pDepthRenderer.disableColor = true;\n\n\t\tif (this._pFilter3DRenderer) {\n\t\t\tthis._pDepthRenderer.textureRatioX = this._pRttBufferManager.textureRatioX;\n\t\t\tthis._pDepthRenderer.textureRatioY = this._pRttBufferManager.textureRatioY;\n\t\t\tthis._pDepthRenderer._iRender(camera, scene, this._pFilter3DRenderer.getMainInputTexture(this._pStage), this._pRttBufferManager.renderToTextureRect);\n\t\t} else {\n\t\t\tthis._pDepthRenderer.textureRatioX = 1;\n\t\t\tthis._pDepthRenderer.textureRatioY = 1;\n\t\t\tthis._pDepthRenderer._iRender(camera, scene);\n\t\t}\n\n\t\tthis._pDepthRenderer.disableColor = false;\n\t}\n\n\n\t/**\n\t *\n\t */\n\tpublic pRenderSceneDepthToTexture(camera:Camera, scene:Scene):void\n\t{\n\t\tif (this._pDepthTextureInvalid || !this._pDepthRender)\n\t\t\tthis.initDepthTexture(<IContextGL> this._pStage.context);\n\n\t\tthis._pDepthRenderer.textureRatioX = this._pRttBufferManager.textureRatioX;\n\t\tthis._pDepthRenderer.textureRatioY = this._pRttBufferManager.textureRatioY;\n\t\tthis._pDepthRenderer._iRender(camera, scene, this._pDepthRender);\n\t}\n\n\n\t/**\n\t * Updates the backbuffer dimensions.\n\t */\n\tpublic pUpdateBackBuffer():void\n\t{\n\t\t// No reason trying to configure back buffer if there is no context available.\n\t\t// Doing this anyway (and relying on _stage to cache width/height for\n\t\t// context does get available) means usesSoftwareRendering won't be reliable.\n\t\tif (this._pStage.context && !this.shareContext) {\n\t\t\tif (this._width && this._height) {\n\t\t\t\tthis._pStage.configureBackBuffer(this._width, this._height, this._antiAlias, true);\n\t\t\t\tthis._pBackBufferInvalid = false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *\n\t */\n\tprivate initDepthTexture(context:IContextGL):void\n\t{\n\t\tthis._pDepthTextureInvalid = false;\n\n\t\tif (this._pDepthRender)\n\t\t\tthis._pDepthRender.dispose();\n\n\t\tthis._pDepthRender = new BitmapImage2D(this._pRttBufferManager.textureWidth, this._pRttBufferManager.textureHeight);\n\t}\n}",
    "import {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\n\nimport {INode}\t\t\t\t\t\tfrom \"awayjs-display/lib/partition/INode\";\n\nimport {RendererBase}\t\t\t\t\tfrom \"./RendererBase\";\nimport {GL_DepthSurface}\t\t\t\tfrom \"./surfaces/GL_DepthSurface\";\n\n/**\n * The DepthRenderer class renders 32-bit depth information encoded as RGBA\n *\n * @class away.render.DepthRenderer\n */\nexport class DepthRenderer extends RendererBase\n{\n\t/**\n\t * Creates a new DepthRenderer object.\n\t * @param renderBlended Indicates whether semi-transparent objects should be rendered.\n\t * @param distanceBased Indicates whether the written depth value is distance-based or projected depth-based\n\t */\n\tconstructor(stage:Stage = null)\n\t{\n\t\tsuper(stage, GL_DepthSurface);\n\n\t\tthis._iBackgroundR = 1;\n\t\tthis._iBackgroundG = 1;\n\t\tthis._iBackgroundB = 1;\n\n\t}\n\n\t/**\n\t *\n\t */\n\tpublic enterNode(node:INode):boolean\n\t{\n\t\tvar enter:boolean = node._iCollectionMark != RendererBase._iCollectionMark && node.isCastingShadow();\n\n\t\tif (!enter) {\n\t\t\tnode._iCollectionMark = RendererBase._iCollectionMark;\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn super.enterNode(node);\n\t}\n}",
    "import {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\n\nimport {INode}\t\t\t\t\t\tfrom \"awayjs-display/lib/partition/INode\";\n\nimport {RendererBase}\t\t\t\t\tfrom \"./RendererBase\";\nimport {GL_DistanceSurface}\t\t\tfrom \"./surfaces/GL_DistanceSurface\";\n\n/**\n * The DistanceRenderer class renders 32-bit depth information encoded as RGBA\n *\n * @class away.render.DistanceRenderer\n */\nexport class DistanceRenderer extends RendererBase\n{\n\t/**\n\t * Creates a new DistanceRenderer object.\n\t * @param renderBlended Indicates whether semi-transparent objects should be rendered.\n\t * @param distanceBased Indicates whether the written depth value is distance-based or projected depth-based\n\t */\n\tconstructor(stage:Stage = null)\n\t{\n\t\tsuper(stage, GL_DistanceSurface);\n\n\t\tthis._iBackgroundR = 1;\n\t\tthis._iBackgroundG = 1;\n\t\tthis._iBackgroundB = 1;\n\n\t}\n\n\t/**\n\t *\n\t */\n\tpublic enterNode(node:INode):boolean\n\t{\n\t\tvar enter:boolean = node._iCollectionMark != RendererBase._iCollectionMark && node.isCastingShadow();\n\n\t\tif (!enter) {\n\t\t\tnode._iCollectionMark = RendererBase._iCollectionMark;\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn super.enterNode(node);\n\t}\n}",
    "import {Image2D}\t\t\t\t\t\tfrom \"awayjs-core/lib/image/Image2D\";\n\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\n\nimport {GL_ImageBase}\t\t\t\t\tfrom \"awayjs-stagegl/lib/image/GL_ImageBase\";\n\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\nimport {ContextGLDrawMode}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLDrawMode\";\nimport {ContextGLBlendFactor}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLBlendFactor\";\nimport {ContextGLVertexBufferFormat}\tfrom \"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\";\nimport {IContextGL}\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/IContextGL\";\nimport {IIndexBuffer}\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/IIndexBuffer\";\nimport {IVertexBuffer}\t\t\t\tfrom \"awayjs-stagegl/lib/base/IVertexBuffer\";\n\nimport {RTTEvent}\t\t\t\t\t\tfrom \"./events/RTTEvent\";\nimport {RTTBufferManager}\t\t\t\tfrom \"./managers/RTTBufferManager\";\nimport {Filter3DBase}\t\t\t\t\tfrom \"./filters/Filter3DBase\";\nimport {Filter3DTaskBase}\t\t\t\tfrom \"./filters/tasks/Filter3DTaskBase\";\n\n/**\n * @class away.render.Filter3DRenderer\n */\nexport class Filter3DRenderer\n{\n\tprivate _filters:Array<Filter3DBase>;\n\tprivate _tasks:Array<Filter3DTaskBase>;\n\tprivate _filterTasksInvalid:boolean;\n\tprivate _mainInputTexture:Image2D;\n\tprivate _requireDepthRender:boolean;\n\tprivate _rttManager:RTTBufferManager;\n\tprivate _stage:Stage;\n\tprivate _filterSizesInvalid:boolean = true;\n\tprivate _onRTTResizeDelegate:(event:RTTEvent) => void;\n\n\tconstructor(stage:Stage)\n\t{\n\t\tthis._onRTTResizeDelegate = (event:RTTEvent) => this.onRTTResize(event);\n\n\t\tthis._stage = stage;\n\t\tthis._rttManager = RTTBufferManager.getInstance(stage);\n\t\tthis._rttManager.addEventListener(RTTEvent.RESIZE, this._onRTTResizeDelegate);\n\n\t}\n\n\tprivate onRTTResize(event:RTTEvent):void\n\t{\n\t\tthis._filterSizesInvalid = true;\n\t}\n\n\tpublic get requireDepthRender():boolean\n\t{\n\t\treturn this._requireDepthRender;\n\t}\n\n\tpublic getMainInputTexture(stage:Stage):Image2D\n\t{\n\t\tif (this._filterTasksInvalid)\n\t\t\tthis.updateFilterTasks(stage);\n\n\t\treturn this._mainInputTexture;\n\t}\n\n\tpublic get filters():Filter3DBase[]\n\t{\n\t\treturn this._filters;\n\t}\n\n\tpublic set filters(value:Filter3DBase[])\n\t{\n\t\tthis._filters = value;\n\n\t\tthis._filterTasksInvalid = true;\n\n\t\tthis._requireDepthRender = false;\n\n\t\tif (!this._filters)\n\t\t\treturn;\n\n\t\tfor (var i:number = 0; i < this._filters.length; ++i)\n\t\t\tif (this._filters[i].requireDepthRender)\n\t\t\t\tthis._requireDepthRender = true;\n\n\t\tthis._filterSizesInvalid = true;\n\t}\n\n\tprivate updateFilterTasks(stage:Stage):void\n\t{\n\t\tvar len:number;\n\n\t\tif (this._filterSizesInvalid)\n\t\t\tthis.updateFilterSizes();\n\n\t\tif (!this._filters) {\n\t\t\tthis._tasks = null;\n\t\t\treturn;\n\t\t}\n\n\t\tthis._tasks = new Array<Filter3DTaskBase>();\n\n\t\tlen = this._filters.length - 1;\n\n\t\tvar filter:Filter3DBase;\n\n\t\tfor (var i:number = 0; i <= len; ++i) {\n\n\t\t\t// make sure all internal tasks are linked together\n\t\t\tfilter = this._filters[i];\n\n\t\t\tfilter.setRenderTargets(i == len? null : this._filters[i + 1].getMainInputTexture(stage), stage);\n\n\t\t\tthis._tasks = this._tasks.concat(filter.tasks);\n\n\t\t}\n\n\t\tthis._mainInputTexture = this._filters[0].getMainInputTexture(stage);\n\n\t}\n\n\tpublic render(stage:Stage, camera:Camera, depthTexture:Image2D):void\n\t{\n\t\tvar len:number;\n\t\tvar i:number;\n\t\tvar task:Filter3DTaskBase;\n\t\tvar context:IContextGL = <IContextGL> stage.context;\n\n\t\tvar indexBuffer:IIndexBuffer = this._rttManager.indexBuffer;\n\n\t\tvar vertexBuffer:IVertexBuffer = this._rttManager.renderToTextureVertexBuffer;\n\n\t\tif (!this._filters)\n\t\t\treturn;\n\n\t\tif (this._filterSizesInvalid)\n\t\t\tthis.updateFilterSizes();\n\n\t\tif (this._filterTasksInvalid)\n\t\t\tthis.updateFilterTasks(stage);\n\n\t\tlen = this._filters.length;\n\n\t\tfor (i = 0; i < len; ++i)\n\t\t\tthis._filters[i].update(stage, camera);\n\n\t\tlen = this._tasks.length;\n\n\t\tif (len > 1) {\n\t\t\tcontext.setProgram(this._tasks[0].getProgram(stage));\n\t\t\tcontext.setVertexBufferAt(this._tasks[0]._positionIndex, vertexBuffer, 0, ContextGLVertexBufferFormat.FLOAT_2);\n\t\t\tcontext.setVertexBufferAt(this._tasks[0]._uvIndex, vertexBuffer, 8, ContextGLVertexBufferFormat.FLOAT_2);\n\t\t}\n\n\t\tfor (i = 0; i < len; ++i) {\n\n\t\t\ttask = this._tasks[i];\n\n\t\t\tstage.setRenderTarget(task.target);\n\n\t\t\tcontext.setProgram(task.getProgram(stage));\n\t\t\t(<GL_ImageBase> stage.getAbstraction(task.getMainInputTexture(stage))).activate(task._inputTextureIndex, false);\n\n\n\t\t\tif (!task.target) {\n\n\t\t\t\tstage.scissorRect = null;\n\t\t\t\tvertexBuffer = this._rttManager.renderToScreenVertexBuffer;\n\t\t\t\tcontext.setVertexBufferAt(task._positionIndex, vertexBuffer, 0, ContextGLVertexBufferFormat.FLOAT_2);\n\t\t\t\tcontext.setVertexBufferAt(task._uvIndex, vertexBuffer, 8, ContextGLVertexBufferFormat.FLOAT_2);\n\n\t\t\t}\n\t\t\tcontext.clear(0.0, 0.0, 0.0, 0.0);\n\n\t\t\ttask.activate(stage, camera, depthTexture);\n\n\t\t\tcontext.setBlendFactors(ContextGLBlendFactor.ONE, ContextGLBlendFactor.ZERO);\n\t\t\tcontext.drawIndices(ContextGLDrawMode.TRIANGLES, indexBuffer, 0, 6);\n\n\t\t\ttask.deactivate(stage);\n\t\t}\n\n\t\tcontext.setTextureAt(0, null);\n\t\tcontext.setVertexBufferAt(0, null);\n\t\tcontext.setVertexBufferAt(1, null);\n\t}\n\n\tprivate updateFilterSizes():void\n\t{\n\t\tfor (var i:number = 0; i < this._filters.length; ++i) {\n\t\t\tthis._filters[i].textureWidth = this._rttManager.textureWidth;\n\t\t\tthis._filters[i].textureHeight = this._rttManager.textureHeight;\n\t\t\tthis._filters[i].rttManager = this._rttManager;\n\t\t}\n\n\t\tthis._filterSizesInvalid = true;\n\t}\n\n\tpublic dispose():void\n\t{\n\t\tthis._rttManager.removeEventListener(RTTEvent.RESIZE, this._onRTTResizeDelegate);\n\t\tthis._rttManager = null;\n\t\tthis._stage = null;\n\t}\n}",
    "import {ImageBase}\t\t\t\t\tfrom \"awayjs-core/lib/image/ImageBase\";\nimport {BitmapImage2D}\t\t\t\tfrom \"awayjs-core/lib/image/BitmapImage2D\";\nimport {Matrix3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\nimport {Matrix3DUtils}\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3DUtils\";\nimport {Plane3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Plane3D\";\nimport {Point}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Point\";\nimport {Rectangle}\t\t\t\t\tfrom \"awayjs-core/lib/geom/Rectangle\";\nimport {Vector3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\nimport {EventDispatcher}\t\t\t\tfrom \"awayjs-core/lib/events/EventDispatcher\";\nimport {IAssetClass}\t\t\t\t\tfrom \"awayjs-core/lib/library/IAssetClass\";\nimport {IAbstractionPool}\t\t\t\tfrom \"awayjs-core/lib/library/IAbstractionPool\";\nimport {ByteArray}\t\t\t\t\tfrom \"awayjs-core/lib/utils/ByteArray\";\n\nimport {IRenderable}\t\t\t\t\tfrom \"awayjs-display/lib/base/IRenderable\";\nimport {IRenderer}\t\t\t\t\tfrom \"awayjs-display/lib/IRenderer\";\nimport {INode}\t\t\t\t\t\tfrom \"awayjs-display/lib/partition/INode\";\nimport {DisplayObject}\t\t\t\tfrom \"awayjs-display/lib/display/DisplayObject\";\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\nimport {IEntity}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/IEntity\";\nimport {Scene}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Scene\";\nimport {RendererEvent}\t\t\t\tfrom \"awayjs-display/lib/events/RendererEvent\";\n\nimport {AGALMiniAssembler}\t\t\tfrom \"awayjs-stagegl/lib/aglsl/assembler/AGALMiniAssembler\";\nimport {ContextGLBlendFactor}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLBlendFactor\";\nimport {ContextGLCompareMode}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLCompareMode\";\nimport {IContextGL}\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/IContextGL\";\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\nimport {StageEvent}\t\t\t\t\tfrom \"awayjs-stagegl/lib/events/StageEvent\";\nimport {StageManager}\t\t\t\t\tfrom \"awayjs-stagegl/lib/managers/StageManager\";\nimport {ProgramData}\t\t\t\t\tfrom \"awayjs-stagegl/lib/image/ProgramData\";\nimport {GL_IAssetClass}\t\t\t\tfrom \"awayjs-stagegl/lib/library/GL_IAssetClass\";\n\nimport {GL_ElementsBase}\t\t\t\tfrom \"./elements/GL_ElementsBase\";\nimport {ISurfaceClassGL}\t\t\t\tfrom \"./surfaces/ISurfaceClassGL\";\nimport {GL_SurfaceBase}\t\t\t\tfrom \"./surfaces/GL_SurfaceBase\";\nimport {GL_RenderableBase}\t\t\tfrom \"./renderables/GL_RenderableBase\";\nimport {RTTBufferManager}\t\t\t\tfrom \"./managers/RTTBufferManager\";\nimport {SurfacePool}\t\t\t\t\tfrom \"./surfaces/SurfacePool\";\nimport {IPass}\t\t\t\t\t\tfrom \"./surfaces/passes/IPass\";\nimport {IEntitySorter}\t\t\t\tfrom \"./sort/IEntitySorter\";\nimport {RenderableMergeSort}\t\t\tfrom \"./sort/RenderableMergeSort\";\n\n\n/**\n * RendererBase forms an abstract base class for classes that are used in the rendering pipeline to render the\n * contents of a partition\n *\n * @class away.render.RendererBase\n */\nexport class RendererBase extends EventDispatcher implements IRenderer, IAbstractionPool\n{\n\tpublic static _iCollectionMark = 0;\n\tpublic static _abstractionClassPool:Object = new Object();\n\n\tprivate _objectPools:Object = new Object();\n\tprivate _abstractionPool:Object = new Object();\n\n\tprivate _maskConfig:number;\n\tprivate _activeMasksDirty:boolean;\n\tprivate _activeMasksConfig:Array<Array<number>> = new Array<Array<number>>();\n\tprivate _registeredMasks : Array<GL_RenderableBase> = new Array<GL_RenderableBase>();\n\tprivate _numUsedStreams:number = 0;\n\tprivate _numUsedTextures:number = 0;\n\n\tpublic _pContext:IContextGL;\n\tpublic _pStage:Stage;\n\tprivate _surfaceClassGL:ISurfaceClassGL;\n\t\n\tprivate _cameraPosition:Vector3D;\n\tpublic _cameraTransform:Matrix3D;\n\tprivate _cameraForward:Vector3D = new Vector3D();\n\n\tpublic _pRttBufferManager:RTTBufferManager;\n\tprivate _viewPort:Rectangle = new Rectangle();\n\tprivate _viewportDirty:boolean;\n\tprivate _scissorDirty:boolean;\n\n\tpublic _pBackBufferInvalid:boolean = true;\n\tpublic _pDepthTextureInvalid:boolean = true;\n\tpublic _depthPrepass:boolean = false;\n\tprivate _backgroundR:number = 0;\n\tprivate _backgroundG:number = 0;\n\tprivate _backgroundB:number = 0;\n\tprivate _backgroundAlpha:number = 1;\n\n\t// only used by renderers that need to render geometry to textures\n\tpublic _width:number;\n\tpublic _height:number;\n\n\tpublic textureRatioX:number = 1;\n\tpublic textureRatioY:number = 1;\n\n\tprivate _snapshotBitmapImage2D:BitmapImage2D;\n\tprivate _snapshotRequired:boolean;\n\n\tpublic _pRttViewProjectionMatrix:Matrix3D = new Matrix3D();\n\n\tprivate _localPos:Point = new Point();\n\tprivate _globalPos:Point = new Point();\n\tpublic _pScissorRect:Rectangle = new Rectangle();\n\n\tprivate _scissorUpdated:RendererEvent;\n\tprivate _viewPortUpdated:RendererEvent;\n\n\tprivate _onContextUpdateDelegate:(event:StageEvent) => void;\n\tprivate _onViewportUpdatedDelegate:(event:StageEvent) => void;\n\n\tpublic _pNumElements:number = 0;\n\n\tpublic _pOpaqueRenderableHead:GL_RenderableBase;\n\tpublic _pBlendedRenderableHead:GL_RenderableBase;\n\tpublic _disableColor:boolean = false;\n\tpublic _renderBlended:boolean = true;\n\tprivate _cullPlanes:Array<Plane3D>;\n\tprivate _customCullPlanes:Array<Plane3D>;\n\tprivate _numCullPlanes:number = 0;\n\tprivate _sourceEntity:IEntity;\n\tprivate _zIndex:number;\n\tprivate _renderSceneTransform:Matrix3D;\n\n\t\n\t/**\n\t * Defers control of ContextGL clear() and present() calls to Stage, enabling multiple Stage frameworks\n\t * to share the same ContextGL object.\n\t */\n\tpublic shareContext:boolean;\n\t\n\t/**\n\t *\n\t */\n\tpublic get cullPlanes():Array<Plane3D>\n\t{\n\t\treturn this._customCullPlanes;\n\t}\n\n\tpublic set cullPlanes(value:Array<Plane3D>)\n\t{\n\t\tthis._customCullPlanes = value;\n\t}\n\n\n\tpublic get renderBlended():boolean\n\t{\n\t\treturn this._renderBlended;\n\t}\n\n\tpublic set renderBlended(value:boolean)\n\t{\n\t\tthis._renderBlended = value;\n\t}\n\n\n\tpublic get disableColor():boolean\n\t{\n\t\treturn this._disableColor;\n\t}\n\n\tpublic set disableColor(value:boolean)\n\t{\n\t\tthis._disableColor = value;\n\t}\n\n\t/**\n\t *\n\t */\n\tpublic get numElements():number\n\t{\n\t\treturn this._pNumElements;\n\t}\n\n\t/**\n\t *\n\t */\n\tpublic renderableSorter:IEntitySorter;\n\n\n\t/**\n\t * A viewPort rectangle equivalent of the Stage size and position.\n\t */\n\tpublic get viewPort():Rectangle\n\t{\n\t\treturn this._viewPort;\n\t}\n\n\t/**\n\t * A scissor rectangle equivalent of the view size and position.\n\t */\n\tpublic get scissorRect():Rectangle\n\t{\n\t\treturn this._pScissorRect;\n\t}\n\n\t/**\n\t *\n\t */\n\tpublic get x():number\n\t{\n\t\treturn this._localPos.x;\n\t}\n\n\tpublic set x(value:number)\n\t{\n\t\tif (this.x == value)\n\t\t\treturn;\n\n\t\tthis._globalPos.x = this._localPos.x = value;\n\n\t\tthis.updateGlobalPos();\n\t}\n\n\t/**\n\t *\n\t */\n\tpublic get y():number\n\t{\n\t\treturn this._localPos.y;\n\t}\n\n\tpublic set y(value:number)\n\t{\n\t\tif (this.y == value)\n\t\t\treturn;\n\n\t\tthis._globalPos.y = this._localPos.y = value;\n\n\t\tthis.updateGlobalPos();\n\t}\n\n\t/**\n\t *\n\t */\n\tpublic get width():number\n\t{\n\t\treturn this._width;\n\t}\n\n\tpublic set width(value:number)\n\t{\n\t\tif (this._width == value)\n\t\t\treturn;\n\n\t\tthis._width = value;\n\t\tthis._pScissorRect.width = value;\n\n\t\tif (this._pRttBufferManager)\n\t\t\tthis._pRttBufferManager.viewWidth = value;\n\n\t\tthis._pBackBufferInvalid = true;\n\t\tthis._pDepthTextureInvalid = true;\n\n\t\tthis.notifyScissorUpdate();\n\t}\n\n\t/**\n\t *\n\t */\n\tpublic get height():number\n\t{\n\t\treturn this._height;\n\t}\n\n\tpublic set height(value:number)\n\t{\n\t\tif (this._height == value)\n\t\t\treturn;\n\n\t\tthis._height = value;\n\t\tthis._pScissorRect.height = value;\n\n\t\tif (this._pRttBufferManager)\n\t\t\tthis._pRttBufferManager.viewHeight = value;\n\n\t\tthis._pBackBufferInvalid = true;\n\t\tthis._pDepthTextureInvalid = true;\n\n\t\tthis.notifyScissorUpdate();\n\t}\n\n\t/**\n\t * Creates a new RendererBase object.\n\t */\n\tconstructor(stage:Stage = null, surfaceClassGL:ISurfaceClassGL = null, forceSoftware:boolean = false, profile:string = \"baseline\", mode:string = \"auto\")\n\t{\n\t\tsuper();\n\n\t\tthis._onViewportUpdatedDelegate = (event:StageEvent) => this.onViewportUpdated(event);\n\t\tthis._onContextUpdateDelegate = (event:StageEvent) => this.onContextUpdate(event);\n\n\t\t//default sorting algorithm\n\t\tthis.renderableSorter = new RenderableMergeSort();\n\n\t\t//set stage\n\t\tthis._pStage = stage || StageManager.getInstance().getFreeStage(forceSoftware, profile, mode);\n\n\t\tthis._pStage.addEventListener(StageEvent.CONTEXT_CREATED, this._onContextUpdateDelegate);\n\t\tthis._pStage.addEventListener(StageEvent.CONTEXT_RECREATED, this._onContextUpdateDelegate);\n\t\tthis._pStage.addEventListener(StageEvent.VIEWPORT_UPDATED, this._onViewportUpdatedDelegate);\n\n\t\tthis._surfaceClassGL = surfaceClassGL;\n\t\t\n\t\t/*\n\t\t if (_backgroundImageRenderer)\n\t\t _backgroundImageRenderer.stage = value;\n\t\t */\n\t\tif (this._pStage.context)\n\t\t\tthis._pContext = <IContextGL> this._pStage.context;\n\t}\n\n\n\tpublic getAbstraction(renderable:IRenderable):GL_RenderableBase\n\t{\n\t\treturn this._abstractionPool[renderable.id] || (this._abstractionPool[renderable.id] = new (<GL_IAssetClass> RendererBase._abstractionClassPool[renderable.assetType])(renderable, this));\n\t}\n\n\t/**\n\t *\n\t * @param image\n\t */\n\tpublic clearAbstraction(renderable:IRenderable):void\n\t{\n\t\tthis._abstractionPool[renderable.id] = null;\n\t}\n\n\t/**\n\t * //TODO\n\t *\n\t * @param elementsClass\n\t * @returns SurfacePool\n\t */\n\tpublic getSurfacePool(elements:GL_ElementsBase):SurfacePool\n\t{\n\t\treturn this._objectPools[elements.elementsType] || (this._objectPools[elements.elementsType] = new SurfacePool(elements.elementsClass, this._pStage, this._surfaceClassGL));\n\t}\n\n\t/**\n\t *\n\t * @param imageObjectClass\n\t */\n\tpublic static registerAbstraction(renderableClass:GL_IAssetClass, assetClass:IAssetClass):void\n\t{\n\t\tRendererBase._abstractionClassPool[assetClass.assetType] = renderableClass;\n\t}\n\n\tpublic activatePass(pass:IPass, camera:Camera):void\n\t{\n\t\t//clear unused vertex streams\n\t\tvar i:number\n\t\tfor (i = pass.shader.numUsedStreams; i < this._numUsedStreams; i++)\n\t\t\tthis._pContext.setVertexBufferAt(i, null);\n\n\t\t//clear unused texture streams\n\t\tfor (i = pass.shader.numUsedTextures; i < this._numUsedTextures; i++)\n\t\t\tthis._pContext.setTextureAt(i, null);\n\n\t\t//check program data is uploaded\n\t\tvar programData:ProgramData = pass.shader.programData;\n\n\t\tif (!programData.program) {\n\t\t\tprogramData.program = this._pContext.createProgram();\n\t\t\tvar vertexByteCode:ByteArray = (new AGALMiniAssembler().assemble(\"part vertex 1\\n\" + programData.vertexString + \"endpart\"))['vertex'].data;\n\t\t\tvar fragmentByteCode:ByteArray = (new AGALMiniAssembler().assemble(\"part fragment 1\\n\" + programData.fragmentString + \"endpart\"))['fragment'].data;\n\t\t\tprogramData.program.upload(vertexByteCode, fragmentByteCode);\n\t\t}\n\n\t\t//set program data\n\t\tthis._pContext.setProgram(programData.program);\n\n\t\t//activate shader object through pass\n\t\tpass._iActivate(camera);\n\t}\n\n\tpublic deactivatePass(pass:IPass):void\n\t{\n\t\t//deactivate shader object through pass\n\t\tpass._iDeactivate();\n\n\t\tthis._numUsedStreams = pass.shader.numUsedStreams;\n\t\tthis._numUsedTextures = pass.shader.numUsedTextures;\n\t}\n\n\t/**\n\t * The background color's red component, used when clearing.\n\t *\n\t * @private\n\t */\n\tpublic get _iBackgroundR():number\n\t{\n\t\treturn this._backgroundR;\n\t}\n\n\tpublic set _iBackgroundR(value:number)\n\t{\n\t\tif (this._backgroundR == value)\n\t\t\treturn;\n\n\t\tthis._backgroundR = value;\n\n\t\tthis._pBackBufferInvalid = true;\n\t}\n\n\t/**\n\t * The background color's green component, used when clearing.\n\t *\n\t * @private\n\t */\n\tpublic get _iBackgroundG():number\n\t{\n\t\treturn this._backgroundG;\n\t}\n\n\tpublic set _iBackgroundG(value:number)\n\t{\n\t\tif (this._backgroundG == value)\n\t\t\treturn;\n\n\t\tthis._backgroundG = value;\n\n\t\tthis._pBackBufferInvalid = true;\n\t}\n\n\t/**\n\t * The background color's blue component, used when clearing.\n\t *\n\t * @private\n\t */\n\tpublic get _iBackgroundB():number\n\t{\n\t\treturn this._backgroundB;\n\t}\n\n\tpublic set _iBackgroundB(value:number)\n\t{\n\t\tif (this._backgroundB == value)\n\t\t\treturn;\n\n\t\tthis._backgroundB = value;\n\n\t\tthis._pBackBufferInvalid = true;\n\t}\n\n\tpublic get context():IContextGL\n\t{\n\t\treturn this._pContext;\n\t}\n\n\t/**\n\t * The Stage that will provide the ContextGL used for rendering.\n\t */\n\tpublic get stage():Stage\n\t{\n\t\treturn this._pStage;\n\t}\n\n\t/**\n\t * Disposes the resources used by the RendererBase.\n\t */\n\tpublic dispose():void\n\t{\n\t\tfor (var id in this._abstractionPool)\n\t\t\tthis._abstractionPool[id].clear();\n\n\t\tthis._abstractionPool = null;\n\n\t\tthis._pStage.removeEventListener(StageEvent.CONTEXT_CREATED, this._onContextUpdateDelegate);\n\t\tthis._pStage.removeEventListener(StageEvent.CONTEXT_RECREATED, this._onContextUpdateDelegate);\n\t\tthis._pStage.removeEventListener(StageEvent.VIEWPORT_UPDATED, this._onViewportUpdatedDelegate);\n\n\t\tthis._pStage = null;\n\t\tthis._pContext = null;\n\t\t/*\n\t\t if (_backgroundImageRenderer) {\n\t\t _backgroundImageRenderer.dispose();\n\t\t _backgroundImageRenderer = null;\n\t\t }\n\t\t */\n\t}\n\n\tpublic render(camera:Camera, scene:Scene):void\n\t{\n\t\tthis._viewportDirty = false;\n\t\tthis._scissorDirty = false;\n\t}\n\n\t/**\n\t * Renders the potentially visible geometry to the back buffer or texture.\n\t * @param target An option target texture to render to.\n\t * @param surfaceSelector The index of a CubeTexture's face to render to.\n\t * @param additionalClearMask Additional clear mask information, in case extra clear channels are to be omitted.\n\t */\n\tpublic _iRender(camera:Camera, scene:Scene, target:ImageBase = null, scissorRect:Rectangle = null, surfaceSelector:number = 0):void\n\t{\n\t\t//TODO refactor setTarget so that rendertextures are created before this check\n\t\tif (!this._pStage || !this._pContext)\n\t\t\treturn;\n\n\t\t//reset head values\n\t\tthis._pBlendedRenderableHead = null;\n\t\tthis._pOpaqueRenderableHead = null;\n\t\tthis._pNumElements = 0;\n\n\t\tthis._cullPlanes = this._customCullPlanes? this._customCullPlanes : camera.frustumPlanes;\n\t\tthis._numCullPlanes = this._cullPlanes? this._cullPlanes.length : 0;\n\t\tthis._cameraPosition = camera.scenePosition;\n\t\tthis._cameraTransform = camera.sceneTransform;\n\t\tthis._cameraForward = Matrix3DUtils.getForward(camera.sceneTransform, this._cameraForward);\n\n\t\tRendererBase._iCollectionMark++;\n\n\t\tscene.traversePartitions(this);\n\n\t\t//sort the resulting renderables\n\t\tif (this.renderableSorter) {\n\t\t\tthis._pOpaqueRenderableHead = <GL_RenderableBase> this.renderableSorter.sortOpaqueRenderables(this._pOpaqueRenderableHead);\n\t\t\tthis._pBlendedRenderableHead = <GL_RenderableBase> this.renderableSorter.sortBlendedRenderables(this._pBlendedRenderableHead);\n\t\t}\n\n\t\tthis._pRttViewProjectionMatrix.copyFrom(camera.viewProjection);\n\t\tthis._pRttViewProjectionMatrix.appendScale(this.textureRatioX, this.textureRatioY, 1);\n\n\t\tthis.pExecuteRender(camera, target, scissorRect, surfaceSelector);\n\n\t\t// generate mip maps on target (if target exists) //TODO\n\t\t//if (target)\n\t\t//\t(<Texture>target).generateMipmaps();\n\n\t\t// clear buffers\n\t\tfor (var i:number = 0; i < 8; ++i) {\n\t\t\tthis._pContext.setVertexBufferAt(i, null);\n\t\t\tthis._pContext.setTextureAt(i, null);\n\t\t}\n\t}\n\n\tpublic _iRenderCascades(camera:Camera, scene:Scene, target:ImageBase, numCascades:number, scissorRects:Array<Rectangle>, cameras:Array<Camera>):void\n\t{\n\t\tthis._pStage.setRenderTarget(target, true, 0);\n\t\tthis._pContext.clear(1, 1, 1, 1, 1, 0);\n\n\t\tthis._pContext.setBlendFactors(ContextGLBlendFactor.ONE, ContextGLBlendFactor.ZERO);\n\t\tthis._pContext.setDepthTest(true, ContextGLCompareMode.LESS);\n\n\t\tvar head:GL_RenderableBase = this._pOpaqueRenderableHead;\n\n\t\tvar first:boolean = true;\n\n\t\t//TODO cascades must have separate collectors, rather than separate draw commands\n\t\tfor (var i:number = numCascades - 1; i >= 0; --i) {\n\t\t\tthis._pStage.scissorRect = scissorRects[i];\n\t\t\t//this.drawCascadeRenderables(head, cameras[i], first? null : cameras[i].frustumPlanes);\n\t\t\tfirst = false;\n\t\t}\n\n\t\t//line required for correct rendering when using away3d with starling. DO NOT REMOVE UNLESS STARLING INTEGRATION IS RETESTED!\n\t\tthis._pContext.setDepthTest(false, ContextGLCompareMode.LESS_EQUAL);\n\n\t\tthis._pStage.scissorRect = null;\n\t}\n\n\t/**\n\t * Renders the potentially visible geometry to the back buffer or texture. Only executed if everything is set up.\n\t *\n\t * @param target An option target texture to render to.\n\t * @param surfaceSelector The index of a CubeTexture's face to render to.\n\t * @param additionalClearMask Additional clear mask information, in case extra clear channels are to be omitted.\n\t */\n\tpublic pExecuteRender(camera:Camera, target:ImageBase = null, scissorRect:Rectangle = null, surfaceSelector:number = 0):void\n\t{\n\t\tthis._pStage.setRenderTarget(target, true, surfaceSelector);\n\n\t\tif ((target || !this.shareContext) && !this._depthPrepass)\n\t\t\tthis._pContext.clear(this._backgroundR, this._backgroundG, this._backgroundB, this._backgroundAlpha, 1, 0);\n\n\t\tthis._pStage.scissorRect = scissorRect;\n\n\t\t/*\n\t\t if (_backgroundImageRenderer)\n\t\t _backgroundImageRenderer.render();\n\t\t */\n\n\t\tthis._pContext.setBlendFactors(ContextGLBlendFactor.ONE, ContextGLBlendFactor.ZERO);\n\n\t\tthis.pDraw(camera);\n\n\t\t//line required for correct rendering when using away3d with starling. DO NOT REMOVE UNLESS STARLING INTEGRATION IS RETESTED!\n\t\t//this._pContext.setDepthTest(false, ContextGLCompareMode.LESS_EQUAL); //oopsie\n\n\t\tif (!this.shareContext) {\n\t\t\tif (this._snapshotRequired && this._snapshotBitmapImage2D) {\n\t\t\t\tthis._pContext.drawToBitmapImage2D(this._snapshotBitmapImage2D);\n\t\t\t\tthis._snapshotRequired = false;\n\t\t\t}\n\t\t}\n\n\t\tthis._pStage.scissorRect = null;\n\t}\n\n\t/*\n\t * Will draw the renderer's output on next render to the provided bitmap data.\n\t * */\n\tpublic queueSnapshot(bmd:BitmapImage2D):void\n\t{\n\t\tthis._snapshotRequired = true;\n\t\tthis._snapshotBitmapImage2D = bmd;\n\t}\n\n\t/**\n\t * Performs the actual drawing of geometry to the target.\n\t */\n\tpublic pDraw(camera:Camera):void\n\t{\n\t\tthis._pContext.setDepthTest(true, ContextGLCompareMode.LESS);\n\n\t\tif (this._disableColor)\n\t\t\tthis._pContext.setColorMask(false, false, false, false);\n\n\t\tthis.drawRenderables(camera, this._pOpaqueRenderableHead);\n\n\t\tif (this._renderBlended)\n\t\t\tthis.drawRenderables(camera, this._pBlendedRenderableHead);\n\n\t\tif (this._disableColor)\n\t\t\tthis._pContext.setColorMask(true, true, true, true);\n\t}\n\n\t//private drawCascadeRenderables(renderableGL:GL_RenderableBase, camera:Camera, cullPlanes:Array<Plane3D>)\n\t//{\n\t//\tvar renderableGL2:GL_RenderableBase;\n\t//\tvar render:GL_SurfaceBase;\n\t//\tvar pass:IPass;\n\t//\n\t//\twhile (renderableGL) {\n\t//\t\trenderableGL2 = renderableGL;\n\t//\t\trender = renderableGL.render;\n\t//\t\tpass = render.passes[0] //assuming only one pass per material\n\t//\n\t//\t\tthis.activatePass(renderableGL, pass, camera);\n\t//\n\t//\t\tdo {\n\t//\t\t\t// if completely in front, it will fall in a different cascade\n\t//\t\t\t// do not use near and far planes\n\t//\t\t\tif (!cullPlanes || renderableGL2.sourceEntity.worldBounds.isInFrustum(cullPlanes, 4)) {\n\t//\t\t\t\trenderableGL2._iRender(pass, camera, this._pRttViewProjectionMatrix);\n\t//\t\t\t} else {\n\t//\t\t\t\trenderableGL2.cascaded = true;\n\t//\t\t\t}\n\t//\n\t//\t\t\trenderableGL2 = renderableGL2.next;\n\t//\n\t//\t\t} while (renderableGL2 && renderableGL2.render == render && !renderableGL2.cascaded);\n\t//\n\t//\t\tthis.deactivatePass(renderableGL, pass);\n\t//\n\t//\t\trenderableGL = renderableGL2;\n\t//\t}\n\t//}\n\n\t/**\n\t * Draw a list of renderables.\n\t *\n\t * @param renderables The renderables to draw.\n\t */\n\tpublic drawRenderables(camera:Camera, renderableGL:GL_RenderableBase):void\n\t{\n\t\tvar i:number;\n\t\tvar len:number;\n\t\tvar renderableGL2:GL_RenderableBase;\n\t\tvar surfaceGL:GL_SurfaceBase;\n\t\tvar passes:Array<IPass>;\n\t\tvar pass:IPass;\n\n\t\tthis._pContext.setStencilActions(\"frontAndBack\", \"always\", \"keep\", \"keep\", \"keep\");\n\n\t\tthis._registeredMasks.length = 0;\n\t\tvar gl = this._pContext[\"_gl\"];\n\t\tif(gl) {\n\t\t\tgl.disable(gl.STENCIL_TEST);\n\t\t}\n\n\t\tthis._maskConfig = 0;\n\n\t\twhile (renderableGL) {\n\t\t\tsurfaceGL = renderableGL.surfaceGL;\n\t\t\tpasses = surfaceGL.passes;\n\n\t\t\t// otherwise this would result in depth rendered anyway because fragment shader kil is ignored\n\t\t\tif (this._disableColor && surfaceGL._surface.alphaThreshold != 0) {\n\t\t\t\trenderableGL2 = renderableGL;\n\t\t\t\t// fast forward\n\t\t\t\tdo {\n\t\t\t\t\trenderableGL2 = renderableGL2.next;\n\n\t\t\t\t} while (renderableGL2 && renderableGL2.surfaceGL == surfaceGL);\n\t\t\t} else {\n\t\t\t\tif (this._activeMasksDirty || this._checkMasksConfig(renderableGL.masksConfig)) {\n\t\t\t\t\tthis._activeMasksConfig = renderableGL.masksConfig;\n\t\t\t\t\tif (!this._activeMasksConfig.length) {\n\t\t\t\t\t\t// disable stencil\n\t\t\t\t\t\tif(gl) {\n\t\t\t\t\t\t\tgl.disable(gl.STENCIL_TEST);\n\t\t\t\t\t\t\tgl.stencilFunc(gl.ALWAYS, 0, 0xff);\n\t\t\t\t\t\t\tgl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._renderMasks(camera, renderableGL.sourceEntity._iAssignedMasks());\n\t\t\t\t\t}\n\t\t\t\t\tthis._activeMasksDirty = false;\n\t\t\t\t}\n\n\n\t\t\t\t//iterate through each shader object\n\t\t\t\tlen = passes.length;\n\t\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\t\trenderableGL2 = renderableGL;\n\t\t\t\t\tpass = passes[i];\n\n\t\t\t\t\tthis.activatePass(pass, camera);\n\n\t\t\t\t\tdo {\n\t\t\t\t\t\tif (renderableGL2.maskId !== -1) {\n\t\t\t\t\t\t\tif (i == 0)\n\t\t\t\t\t\t\t\tthis._registerMask(renderableGL2);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\trenderableGL2._iRender(pass, camera, this._pRttViewProjectionMatrix);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trenderableGL2 = renderableGL2.next;\n\n\t\t\t\t\t} while (renderableGL2 && renderableGL2.surfaceGL == surfaceGL && !(this._activeMasksDirty = this._checkMasksConfig(renderableGL2.masksConfig)));\n\n\t\t\t\t\tthis.deactivatePass(pass);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\trenderableGL = renderableGL2;\n\t\t}\n\t}\n\n\t/**\n\t * Assign the context once retrieved\n\t */\n\tprivate onContextUpdate(event:StageEvent):void\n\t{\n\t\tthis._pContext = <IContextGL> this._pStage.context;\n\t}\n\n\tpublic get _iBackgroundAlpha():number\n\t{\n\t\treturn this._backgroundAlpha;\n\t}\n\n\tpublic set _iBackgroundAlpha(value:number)\n\t{\n\t\tif (this._backgroundAlpha == value)\n\t\t\treturn;\n\n\t\tthis._backgroundAlpha = value;\n\n\t\tthis._pBackBufferInvalid = true;\n\t}\n\n\t/*\n\t public get iBackground():Texture2DBase\n\t {\n\t return this._background;\n\t }\n\t */\n\n\t/*\n\t public set iBackground(value:Texture2DBase)\n\t {\n\t if (this._backgroundImageRenderer && !value) {\n\t this._backgroundImageRenderer.dispose();\n\t this._backgroundImageRenderer = null;\n\t }\n\n\t if (!this._backgroundImageRenderer && value)\n\t {\n\n\t this._backgroundImageRenderer = new BackgroundImageRenderer(this._pStage);\n\n\t }\n\n\n\t this._background = value;\n\n\t if (this._backgroundImageRenderer)\n\t this._backgroundImageRenderer.texture = value;\n\t }\n\t */\n\t/*\n\t public get backgroundImageRenderer():BackgroundImageRenderer\n\t {\n\t return _backgroundImageRenderer;\n\t }\n\t */\n\n\n\t/**\n\t * @private\n\t */\n\tprivate notifyScissorUpdate():void\n\t{\n\t\tif (this._scissorDirty)\n\t\t\treturn;\n\n\t\tthis._scissorDirty = true;\n\n\t\tif (!this._scissorUpdated)\n\t\t\tthis._scissorUpdated = new RendererEvent(RendererEvent.SCISSOR_UPDATED);\n\n\t\tthis.dispatchEvent(this._scissorUpdated);\n\t}\n\n\n\t/**\n\t * @private\n\t */\n\tprivate notifyViewportUpdate():void\n\t{\n\t\tif (this._viewportDirty)\n\t\t\treturn;\n\n\t\tthis._viewportDirty = true;\n\n\t\tif (!this._viewPortUpdated)\n\t\t\tthis._viewPortUpdated = new RendererEvent(RendererEvent.VIEWPORT_UPDATED);\n\n\t\tthis.dispatchEvent(this._viewPortUpdated);\n\t}\n\n\t/**\n\t *\n\t */\n\tpublic onViewportUpdated(event:StageEvent):void\n\t{\n\t\tthis._viewPort = this._pStage.viewPort;\n\t\t//TODO stop firing viewport updated for every stagegl viewport change\n\n\t\tif (this.shareContext) {\n\t\t\tthis._pScissorRect.x = this._globalPos.x - this._pStage.x;\n\t\t\tthis._pScissorRect.y = this._globalPos.y - this._pStage.y;\n\t\t\tthis.notifyScissorUpdate();\n\t\t}\n\n\t\tthis.notifyViewportUpdate();\n\t}\n\n\t/**\n\t *\n\t */\n\tpublic updateGlobalPos():void\n\t{\n\t\tif (this.shareContext) {\n\t\t\tthis._pScissorRect.x = this._globalPos.x - this._viewPort.x;\n\t\t\tthis._pScissorRect.y = this._globalPos.y - this._viewPort.y;\n\t\t} else {\n\t\t\tthis._pScissorRect.x = 0;\n\t\t\tthis._pScissorRect.y = 0;\n\t\t\tthis._viewPort.x = this._globalPos.x;\n\t\t\tthis._viewPort.y = this._globalPos.y;\n\t\t}\n\n\t\tthis.notifyScissorUpdate();\n\t}\n\n\t/**\n\t *\n\t * @param node\n\t * @returns {boolean}\n\t */\n\tpublic enterNode(node:INode):boolean\n\t{\n\t\tvar enter:boolean = node._iCollectionMark != RendererBase._iCollectionMark && node.isRenderable() && node.isInFrustum(this._cullPlanes, this._numCullPlanes);\n\n\t\tnode._iCollectionMark = RendererBase._iCollectionMark;\n\n\t\treturn enter;\n\t}\n\n\tpublic applyEntity(entity:IEntity):void\n\t{\n\t\tthis._sourceEntity = entity;\n\n\t\t// project onto camera's z-axis\n\t\tthis._zIndex = entity.zOffset + this._cameraPosition.subtract(entity.scenePosition).dotProduct(this._cameraForward);\n\n\t\t//save sceneTransform\n\t\tthis._renderSceneTransform = entity.getRenderSceneTransform(this._cameraTransform);\n\n\t\t//collect renderables\n\t\tentity._acceptTraverser(this);\n\t}\n\n\tpublic applyRenderable(renderable:IRenderable):void\n\t{\n\t\tvar renderableGL:GL_RenderableBase = this.getAbstraction(renderable);\n\t\tvar surfaceGL:GL_SurfaceBase = renderableGL.surfaceGL;\n\n\t\t//set local vars for faster referencing\n\t\trenderableGL.surfaceID = surfaceGL.surfaceID;\n\t\trenderableGL.renderOrderId = surfaceGL.renderOrderId;\n\n\t\trenderableGL.cascaded = false;\n\n\t\trenderableGL.sourceEntity = this._sourceEntity;\n\t\trenderableGL.zIndex = this._zIndex;\n\t\trenderableGL.maskId = this._sourceEntity._iAssignedMaskId();\n\t\trenderableGL.masksConfig = this._sourceEntity._iMasksConfig();\n\n\t\t//store reference to scene transform\n\t\trenderableGL.renderSceneTransform = this._renderSceneTransform;\n\n\t\tif (surfaceGL.requiresBlending) {\n\t\t\trenderableGL.next = this._pBlendedRenderableHead;\n\t\t\tthis._pBlendedRenderableHead = renderableGL;\n\t\t} else {\n\t\t\trenderableGL.next = this._pOpaqueRenderableHead;\n\t\t\tthis._pOpaqueRenderableHead = renderableGL;\n\t\t}\n\n\t\tthis._pNumElements += renderableGL.elementsGL.elements.numElements;\n\t}\n\n\t/**\n\t *\n\t * @param entity\n\t */\n\tpublic applyDirectionalLight(entity:IEntity):void\n\t{\n\t\t//don't do anything here\n\t}\n\n\t/**\n\t *\n\t * @param entity\n\t */\n\tpublic applyLightProbe(entity:IEntity):void\n\t{\n\t\t//don't do anything here\n\t}\n\n\t/**\n\t *\n\t * @param entity\n\t */\n\tpublic applyPointLight(entity:IEntity):void\n\t{\n\t\t//don't do anything here\n\t}\n\n\t/**\n\t *\n\t * @param entity\n\t */\n\tpublic applySkybox(entity:IEntity):void\n\t{\n\t\t//don't do anything here\n\t}\n\n\tprivate _registerMask(obj:GL_RenderableBase):void\n\t{\n\t\t//console.log(\"registerMask\");\n\t\tthis._registeredMasks.push(obj);\n\t}\n\n\tpublic _renderMasks(camera:Camera, masks:DisplayObject[][]):void\n\t{\n\t\tvar gl = this._pContext[\"_gl\"];\n\t\t//var oldRenderTarget = this._stage.renderTarget;\n\n\t\t//this._stage.setRenderTarget(this._image);\n\t\t//this._stage.clear();\n\t\tthis._pContext.setColorMask(false, false, false, false);\n\t\t// TODO: Could we create masks within masks by providing a previous configID, and supply \"clear/keep\" on stencil fail\n\t\t//context.setStencilActions(\"frontAndBack\", \"always\", \"set\", \"set\", \"set\");\n\t\tgl.enable(gl.STENCIL_TEST);\n\t\tthis._maskConfig++;\n\t\tgl.stencilFunc(gl.ALWAYS, this._maskConfig, 0xff);\n\t\tgl.stencilOp(gl.REPLACE, gl.REPLACE, gl.REPLACE);\n\n\t\tvar numLayers:number = masks.length;\n\t\tvar numRenderables:number = this._registeredMasks.length;\n\t\tvar renderableGL:GL_RenderableBase;\n\t\tvar children:Array<DisplayObject>;\n\t\tvar numChildren:number;\n\t\tvar mask:DisplayObject;\n\n\t\tfor (var i:number = 0; i < numLayers; ++i) {\n\t\t\tif (i != 0) {\n\t\t\t\tgl.stencilFunc(gl.EQUAL, this._maskConfig, 0xff);\n\t\t\t\tgl.stencilOp(gl.KEEP, gl.INCR, gl.INCR);\n\t\t\t\tthis._maskConfig++;\n\t\t\t}\n\n\t\t\tchildren = masks[i];\n\t\t\tnumChildren = children.length;\n\n\t\t\tfor (var j:number = 0; j < numChildren; ++j) {\n\t\t\t\tmask = children[j];\n\t\t\t\tfor (var k:number = 0; k < numRenderables; ++k) {\n\t\t\t\t\trenderableGL = this._registeredMasks[k];\n\t\t\t\t\t//console.log(\"testing for \" + mask[\"hierarchicalMaskID\"] + \", \" + mask.name);\n\t\t\t\t\tif (renderableGL.maskId == mask.id) {\n\t\t\t\t\t\t//console.log(\"Rendering hierarchicalMaskID \" + mask[\"hierarchicalMaskID\"]);\n\t\t\t\t\t\tthis._drawMask(camera, renderableGL);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tgl.stencilFunc(gl.EQUAL, this._maskConfig, 0xff);\n\t\tgl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n\n\t\tthis._pContext.setColorMask(true, true, true, true);\n\t\tthis._pContext.setDepthTest(true, ContextGLCompareMode.LESS);\n\t\t//this._stage.setRenderTarget(oldRenderTarget);\n\t}\n\n\tprivate _drawMask(camera:Camera, renderableGL:GL_RenderableBase):void\n\t{\n\t\tvar surfaceGL = renderableGL.surfaceGL;\n\t\tvar passes = surfaceGL.passes;\n\t\tvar len = passes.length;\n\t\tvar pass = passes[len-1];\n\n\t\tthis.activatePass(pass, camera);\n\t\tthis._pContext.setDepthTest(false, ContextGLCompareMode.LESS); //TODO: setup so as not to override activate\n\t\t// only render last pass for now\n\t\trenderableGL._iRender(pass, camera, this._pRttViewProjectionMatrix);\n\t\tthis.deactivatePass(pass);\n\t}\n\n\tprivate _checkMasksConfig(masksConfig:Array<Array<number>>):boolean\n\t{\n\t\tif (this._activeMasksConfig.length != masksConfig.length)\n\t\t\treturn true;\n\n\t\tvar numLayers:number = masksConfig.length;\n\t\tvar numChildren:number;\n\t\tvar childConfig:Array<number>;\n\t\tvar activeNumChildren:number;\n\t\tvar activeChildConfig:Array<number>;\n\t\tfor (var i:number = 0; i < numLayers; i++) {\n\t\t\tchildConfig = masksConfig[i];\n\t\t\tnumChildren = childConfig.length;\n\t\t\tactiveChildConfig = this._activeMasksConfig[i];\n\t\t\tactiveNumChildren = activeChildConfig.length;\n\t\t\tif (activeNumChildren != numChildren)\n\t\t\t\treturn true;\n\n\t\t\tfor (var j:number = 0; j < numChildren; j++) {\n\t\t\t\tif (activeChildConfig[j] != childConfig[j])\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n}",
    "import {IAsset}\t\t\t\t\t\tfrom \"awayjs-core/lib/library/IAsset\";\nimport {AssetBase}\t\t\t\t\tfrom \"awayjs-core/lib/library/AssetBase\";\nimport {AbstractMethodError}\t\t\tfrom \"awayjs-core/lib/errors/AbstractMethodError\";\n\nimport {AnimationNodeBase}\t\t\tfrom \"awayjs-display/lib/animators/nodes/AnimationNodeBase\";\n\nimport {AnimationSetError}\t\t\tfrom \"../errors/AnimationSetError\";\nimport {ShaderBase}\t\t\t\t\tfrom \"../shaders/ShaderBase\";\nimport {ShaderRegisterElement}\t\t\tfrom \"../shaders/ShaderRegisterElement\";\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterData}\t\t\t\tfrom \"../shaders/ShaderRegisterData\";\n\n/**\n * Provides an abstract base class for data set classes that hold animation data for use in animator classes.\n *\n * @see away.animators.AnimatorBase\n */\nexport class AnimationSetBase extends AssetBase implements IAsset\n{\n\tpublic static assetType:string = \"[asset AnimationSet]\";\n\n\tprivate _usesCPU:boolean;\n\tprivate _animations:Array<AnimationNodeBase> = new Array<AnimationNodeBase>();\n\tprivate _animationNames:Array<string> = new Array<string>();\n\tprivate _animationDictionary:Object = new Object();\n\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\t/**\n\t * Retrieves a temporary GPU register that's still free.\n\t *\n\t * @param exclude An array of non-free temporary registers.\n\t * @param excludeAnother An additional register that's not free.\n\t * @return A temporary register that can be used.\n\t */\n\tpublic _pFindTempReg(exclude:Array<string>, excludeAnother:string = null):string\n\t{\n\t\tvar i:number = 0;\n\t\tvar reg:string;\n\n\t\twhile (true) {\n\t\t\treg = \"vt\" + i;\n\t\t\tif (exclude.indexOf(reg) == -1 && excludeAnother != reg)\n\t\t\t\treturn reg;\n\t\t\t++i;\n\t\t}\n\t}\n\n\t/**\n\t * Indicates whether the properties of the animation data contained within the set combined with\n\t * the vertex registers already in use on shading materials allows the animation data to utilise\n\t * GPU calls.\n\t */\n\tpublic get usesCPU():boolean\n\t{\n\t\treturn this._usesCPU;\n\t}\n\n\t/**\n\t * Called by the material to reset the GPU indicator before testing whether register space in the shader\n\t * is available for running GPU-based animation code.\n\t *\n\t * @private\n\t */\n\tpublic resetGPUCompatibility():void\n\t{\n\t\tthis._usesCPU = false;\n\t}\n\n\tpublic cancelGPUCompatibility():void\n\t{\n\t\tthis._usesCPU = true;\n\t}\n\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAGALVertexCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthrow new AbstractMethodError();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAGALFragmentCode(shader:ShaderBase, registerCache:ShaderRegisterCache, shadedTarget:ShaderRegisterElement):string\n\t{\n\t\tthrow new AbstractMethodError();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAGALUVCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthrow new AbstractMethodError();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic doneAGALCode(shader:ShaderBase):void\n\t{\n\t\tthrow new AbstractMethodError();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get assetType():string\n\t{\n\t\treturn AnimationSetBase.assetType;\n\t}\n\n\t/**\n\t * Returns a vector of animation state objects that make up the contents of the animation data set.\n\t */\n\tpublic get animations():Array<AnimationNodeBase>\n\t{\n\t\treturn this._animations;\n\t}\n\n\t/**\n\t * Returns a vector of animation state objects that make up the contents of the animation data set.\n\t */\n\tpublic get animationNames():Array<string>\n\t{\n\t\treturn this._animationNames;\n\t}\n\n\t/**\n\t * Check to determine whether a state is registered in the animation set under the given name.\n\t *\n\t * @param stateName The name of the animation state object to be checked.\n\t */\n\tpublic hasAnimation(name:string):boolean\n\t{\n\t\treturn this._animationDictionary[name] != null;\n\t}\n\n\t/**\n\t * Retrieves the animation state object registered in the animation data set under the given name.\n\t *\n\t * @param stateName The name of the animation state object to be retrieved.\n\t */\n\tpublic getAnimation(name:string):AnimationNodeBase\n\t{\n\t\treturn this._animationDictionary[name];\n\t}\n\n\t/**\n\t * Adds an animation state object to the aniamtion data set under the given name.\n\t *\n\t * @param stateName The name under which the animation state object will be stored.\n\t * @param animationState The animation state object to be staored in the set.\n\t */\n\tpublic addAnimation(node:AnimationNodeBase):void\n\t{\n\t\tif (this._animationDictionary[node.name])\n\t\t\tthrow new AnimationSetError(\"root node name '\" + node.name + \"' already exists in the set\");\n\n\t\tthis._animationDictionary[node.name] = node;\n\n\t\tthis._animations.push(node);\n\n\t\tthis._animationNames.push(node.name);\n\t}\n\n\t/**\n\t * Cleans up any resources used by the current object.\n\t */\n\tpublic dispose():void\n\t{\n\t}\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\nimport {AssetBase}\t\t\t\t\t\tfrom \"awayjs-core/lib/library/AssetBase\";\nimport {AbstractMethodError}\t\t\t\tfrom \"awayjs-core/lib/errors/AbstractMethodError\";\nimport {RequestAnimationFrame}\t\t\tfrom \"awayjs-core/lib/utils/RequestAnimationFrame\";\nimport {getTimer}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/utils/getTimer\";\n\nimport {IAnimationSet}\t\t\t\t\tfrom \"awayjs-display/lib/animators/IAnimationSet\";\nimport {IAnimator}\t\t\t\t\t\tfrom \"awayjs-display/lib/animators/IAnimator\";\nimport {AnimationNodeBase}\t\t\t\tfrom \"awayjs-display/lib/animators/nodes/AnimationNodeBase\";\nimport {ElementsBase}\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/ElementsBase\";\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\nimport {Sprite}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Sprite\";\n\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\n\nimport {IAnimationState}\t\t\t\t\tfrom \"../animators/states/IAnimationState\";\nimport {GL_RenderableBase}\t\t\t\tfrom \"../renderables/GL_RenderableBase\";\nimport {AnimatorEvent}\t\t\t\t\tfrom \"../events/AnimatorEvent\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../shaders/ShaderBase\";\n\n/**\n * Dispatched when playback of an animation inside the animator object starts.\n *\n * @eventType away3d.events.AnimatorEvent\n */\n//[Event(name=\"start\", type=\"away3d.events.AnimatorEvent\")]\n\n/**\n * Dispatched when playback of an animation inside the animator object stops.\n *\n * @eventType away3d.events.AnimatorEvent\n */\n//[Event(name=\"stop\", type=\"away3d.events.AnimatorEvent\")]\n\n/**\n * Dispatched when playback of an animation reaches the end of an animation.\n *\n * @eventType away3d.events.AnimatorEvent\n */\n//[Event(name=\"cycle_complete\", type=\"away3d.events.AnimatorEvent\")]\n\n/**\n * Provides an abstract base class for animator classes that control animation output from a data set subtype of <code>AnimationSetBase</code>.\n *\n * @see away.animators.AnimationSetBase\n */\nexport class AnimatorBase extends AssetBase implements IAnimator\n{\n\tpublic static assetType:string = \"[asset Animator]\";\n\n\tprivate _broadcaster:RequestAnimationFrame;\n\tprivate _isPlaying:boolean;\n\tprivate _autoUpdate:boolean = true;\n\tprivate _startEvent:AnimatorEvent;\n\tprivate _stopEvent:AnimatorEvent;\n\tprivate _cycleEvent:AnimatorEvent;\n\tprivate _time:number = 0;\n\tprivate _playbackSpeed:number = 1;\n\n\tpublic _pAnimationSet:IAnimationSet;\n\tpublic _pOwners:Array<Sprite> = new Array<Sprite>();\n\tpublic _pActiveNode:AnimationNodeBase;\n\tpublic _pActiveState:IAnimationState;\n\tpublic _pActiveAnimationName:string;\n\tpublic _pAbsoluteTime:number = 0;\n\n\tprivate _animationStates:Object = new Object();\n\n\t/**\n\t * Enables translation of the animated sprite from data returned per frame via the positionDelta property of the active animation node. Defaults to true.\n\t *\n\t * @see away.animators.IAnimationState#positionDelta\n\t */\n\tpublic updatePosition:boolean = true;\n\n\tpublic getAnimationState(node:AnimationNodeBase):IAnimationState\n\t{\n\t\tvar className:any = node.stateClass;\n\t\tvar uID:number = node.id;\n\n\t\tif (this._animationStates[uID] == null)\n\t\t\tthis._animationStates[uID] = new className(this, node);\n\n\t\treturn this._animationStates[uID];\n\t}\n\n\tpublic getAnimationStateByName(name:string):IAnimationState\n\t{\n\t\treturn this.getAnimationState(this._pAnimationSet.getAnimation(name));\n\t}\n\n\t/**\n\t * Returns the internal absolute time of the animator, calculated by the current time and the playback speed.\n\t *\n\t * @see #time\n\t * @see #playbackSpeed\n\t */\n\tpublic get absoluteTime():number\n\t{\n\t\treturn this._pAbsoluteTime;\n\t}\n\n\t/**\n\t * Returns the animation data set in use by the animator.\n\t */\n\tpublic get animationSet():IAnimationSet\n\t{\n\t\treturn this._pAnimationSet;\n\t}\n\n\t/**\n\t * Returns the current active animation state.\n\t */\n\tpublic get activeState():IAnimationState\n\t{\n\t\treturn this._pActiveState;\n\t}\n\n\t/**\n\t * Returns the current active animation node.\n\t */\n\tpublic get activeAnimation():AnimationNodeBase\n\t{\n\t\treturn this._pAnimationSet.getAnimation(this._pActiveAnimationName);\n\t}\n\n\t/**\n\t * Returns the current active animation node.\n\t */\n\tpublic get activeAnimationName():string\n\t{\n\t\treturn this._pActiveAnimationName;\n\t}\n\n\t/**\n\t * Determines whether the animators internal update mechanisms are active. Used in cases\n\t * where manual updates are required either via the <code>time</code> property or <code>update()</code> method.\n\t * Defaults to true.\n\t *\n\t * @see #time\n\t * @see #update()\n\t */\n\tpublic get autoUpdate():boolean\n\t{\n\t\treturn this._autoUpdate;\n\t}\n\n\tpublic set autoUpdate(value:boolean)\n\t{\n\t\tif (this._autoUpdate == value)\n\t\t\treturn;\n\n\t\tthis._autoUpdate = value;\n\n\t\tif (this._autoUpdate)\n\t\t\tthis.start(); else\n\t\t\tthis.stop();\n\t}\n\n\t/**\n\t * Gets and sets the internal time clock of the animator.\n\t */\n\tpublic get time():number\n\t{\n\t\treturn this._time;\n\t}\n\n\tpublic set time(value:number)\n\t{\n\t\tif (this._time == value)\n\t\t\treturn;\n\n\t\tthis.update(value);\n\t}\n\n\t/**\n\t * Sets the animation phase of the current active state's animation clip(s).\n\t *\n\t * @param value The phase value to use. 0 represents the beginning of an animation clip, 1 represents the end.\n\t */\n\tpublic phase(value:number):void\n\t{\n\t\tthis._pActiveState.phase(value);\n\t}\n\n\t/**\n\t * Creates a new <code>AnimatorBase</code> object.\n\t *\n\t * @param animationSet The animation data set to be used by the animator object.\n\t */\n\tconstructor(animationSet:IAnimationSet)\n\t{\n\t\tsuper();\n\n\t\tthis._pAnimationSet = animationSet;\n\n\t\tthis._broadcaster = new RequestAnimationFrame(this.onEnterFrame, this);\n\t}\n\n\t/**\n\t * The amount by which passed time should be scaled. Used to slow down or speed up animations. Defaults to 1.\n\t */\n\tpublic get playbackSpeed():number\n\t{\n\t\treturn this._playbackSpeed;\n\t}\n\n\tpublic set playbackSpeed(value:number)\n\t{\n\t\tthis._playbackSpeed = value;\n\t}\n\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, stage:Stage, camera:Camera):void\n\t{\n\t\tthrow new AbstractMethodError();\n\t}\n\n\t/**\n\t * Resumes the automatic playback clock controling the active state of the animator.\n\t */\n\tpublic start():void\n\t{\n\t\tif (this._isPlaying || !this._autoUpdate)\n\t\t\treturn;\n\n\t\tthis._time = this._pAbsoluteTime = getTimer();\n\n\t\tthis._isPlaying = true;\n\n\t\tthis._broadcaster.start();\n\n\t\tif (!this.hasEventListener(AnimatorEvent.START))\n\t\t\treturn;\n\n\t\tif (this._startEvent == null)\n\t\t\tthis._startEvent = new AnimatorEvent(AnimatorEvent.START, this);\n\n\t\tthis.dispatchEvent(this._startEvent);\n\t}\n\n\t/**\n\t * Pauses the automatic playback clock of the animator, in case manual updates are required via the\n\t * <code>time</code> property or <code>update()</code> method.\n\t *\n\t * @see #time\n\t * @see #update()\n\t */\n\tpublic stop():void\n\t{\n\t\tif (!this._isPlaying)\n\t\t\treturn;\n\n\t\tthis._isPlaying = false;\n\n\t\tthis._broadcaster.stop();\n\n\t\tif (!this.hasEventListener(AnimatorEvent.STOP))\n\t\t\treturn;\n\n\t\tif (this._stopEvent == null)\n\t\t\tthis._stopEvent = new AnimatorEvent(AnimatorEvent.STOP, this);\n\n\t\tthis.dispatchEvent(this._stopEvent);\n\t}\n\n\t/**\n\t * Provides a way to manually update the active state of the animator when automatic\n\t * updates are disabled.\n\t *\n\t * @see #stop()\n\t * @see #autoUpdate\n\t */\n\tpublic update(time:number):void\n\t{\n\t\tvar dt:number = (time - this._time)*this.playbackSpeed;\n\n\t\tthis._pUpdateDeltaTime(dt);\n\n\t\tthis._time = time;\n\t}\n\n\tpublic reset(name:string, offset:number = 0):void\n\t{\n\t\tthis.getAnimationState(this._pAnimationSet.getAnimation(name)).offset(offset + this._pAbsoluteTime);\n\t}\n\n\t/**\n\t * Used by the sprite object to which the animator is applied, registers the owner for internal use.\n\t *\n\t * @private\n\t */\n\tpublic addOwner(sprite:Sprite):void\n\t{\n\t\tthis._pOwners.push(sprite);\n\t}\n\n\t/**\n\t * Used by the sprite object from which the animator is removed, unregisters the owner for internal use.\n\t *\n\t * @private\n\t */\n\tpublic removeOwner(sprite:Sprite):void\n\t{\n\t\tthis._pOwners.splice(this._pOwners.indexOf(sprite), 1);\n\t}\n\n\t/**\n\t * Internal abstract method called when the time delta property of the animator's contents requires updating.\n\t *\n\t * @private\n\t */\n\tpublic _pUpdateDeltaTime(dt:number):void\n\t{\n\t\tthis._pAbsoluteTime += dt;\n\n\t\tthis._pActiveState.update(this._pAbsoluteTime);\n\n\t\tif (this.updatePosition)\n\t\t\tthis.applyPositionDelta();\n\t}\n\n\t/**\n\t * Enter frame event handler for automatically updating the active state of the animator.\n\t */\n\tprivate onEnterFrame(event:Event = null):void\n\t{\n\t\tthis.update(getTimer());\n\t}\n\n\tprivate applyPositionDelta():void\n\t{\n\t\tvar delta:Vector3D = this._pActiveState.positionDelta;\n\t\tvar dist:number = delta.length;\n\t\tvar len:number;\n\t\tif (dist > 0) {\n\t\t\tlen = this._pOwners.length;\n\t\t\tfor (var i:number = 0; i < len; ++i)\n\t\t\t\tthis._pOwners[i].transform.translateLocal(delta, dist);\n\t\t}\n\t}\n\n\t/**\n\t *  for internal use.\n\t *\n\t * @private\n\t */\n\tpublic dispatchCycleEvent():void\n\t{\n\t\tif (this.hasEventListener(AnimatorEvent.CYCLE_COMPLETE)) {\n\t\t\tif (this._cycleEvent == null)\n\t\t\t\tthis._cycleEvent = new AnimatorEvent(AnimatorEvent.CYCLE_COMPLETE, this);\n\n\t\t\tthis.dispatchEvent(this._cycleEvent);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic clone():AnimatorBase\n\t{\n\t\tthrow new AbstractMethodError();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose():void\n\t{\n\t}\n\n\n\tpublic invalidateElements():void\n\t{\n\t\tvar sprite:Sprite;\n\t\tvar len:number = this._pOwners.length;\n\t\tfor (var i:number = 0; i < len; i++) {\n\t\t\tsprite = this._pOwners[i];\n\t\t\tsprite.graphics.invalidateElements();\n\t\t}\n\t}\n\t\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic testGPUCompatibility(shader:ShaderBase):void\n\t{\n\t\tthrow new AbstractMethodError();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get assetType():string\n\t{\n\t\treturn AnimatorBase.assetType;\n\t}\n\n\n\tpublic getRenderableElements(renderable:GL_RenderableBase, sourceElements:ElementsBase):ElementsBase\n\t{\n\t\t//nothing to do here\n\t\treturn sourceElements;\n\t}\n}",
    "import {ElementsBase}\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/ElementsBase\";\nimport {IAnimationSet}\t\t\t\t\tfrom \"awayjs-display/lib/animators/IAnimationSet\";\nimport {ParticleData}\t\t\t\t\t\tfrom \"awayjs-display/lib/animators/data/ParticleData\";\nimport {AnimationNodeBase}\t\t\t\tfrom \"awayjs-display/lib/animators/nodes/AnimationNodeBase\";\nimport {Graphic}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphic\";\nimport {Graphics}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphics\";\n\nimport {AnimationSetBase}\t\t\t\t\tfrom \"../animators/AnimationSetBase\";\nimport {AnimationRegisterData}\t\t\tfrom \"../animators/data/AnimationRegisterData\";\nimport {AnimationElements}\t\t\t\tfrom \"../animators/data/AnimationElements\";\nimport {ParticleAnimationData}\t\t\tfrom \"../animators/data/ParticleAnimationData\";\nimport {ParticleProperties}\t\t\t\tfrom \"../animators/data/ParticleProperties\";\nimport {ParticlePropertiesMode}\t\t\tfrom \"../animators/data/ParticlePropertiesMode\";\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../animators/nodes/ParticleNodeBase\";\nimport {ParticleTimeNode}\t\t\t\t\tfrom \"../animators/nodes/ParticleTimeNode\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../shaders/ShaderBase\";\nimport {ShaderRegisterElement}\t\t\tfrom \"../shaders/ShaderRegisterElement\";\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterData}\t\t\t\tfrom \"../shaders/ShaderRegisterData\";\n\n/**\n * The animation data set used by particle-based animators, containing particle animation data.\n *\n * @see away.animators.ParticleAnimator\n */\nexport class ParticleAnimationSet extends AnimationSetBase implements IAnimationSet\n{\n\t/** @private */\n\tpublic _iAnimationRegisterData:AnimationRegisterData;\n\n\t//all other nodes dependent on it\n\tprivate _timeNode:ParticleTimeNode;\n\n\t/**\n\t * Property used by particle nodes that require compilers at the end of the shader\n\t */\n\tpublic static POST_PRIORITY:number = 9;\n\n\t/**\n\t * Property used by particle nodes that require color compilers\n\t */\n\tpublic static COLOR_PRIORITY:number = 18;\n\n\tprivate _animationElements:Object = new Object();\n\tprivate _particleNodes:Array<ParticleNodeBase> = new Array<ParticleNodeBase>();\n\tprivate _localDynamicNodes:Array<ParticleNodeBase> = new Array<ParticleNodeBase>();\n\tprivate _localStaticNodes:Array<ParticleNodeBase> = new Array<ParticleNodeBase>();\n\tprivate _totalLenOfOneVertex:number = 0;\n\n\t//set true if has an node which will change UV\n\tpublic hasUVNode:boolean;\n\t//set if the other nodes need to access the velocity\n\tpublic needVelocity:boolean;\n\t//set if has a billboard node.\n\tpublic hasBillboard:boolean;\n\t//set if has an node which will apply color multiple operation\n\tpublic hasColorMulNode:boolean;\n\t//set if has an node which will apply color add operation\n\tpublic hasColorAddNode:boolean;\n\n\t/**\n\t * Initialiser function for static particle properties. Needs to reference a with the following format\n\t *\n\t * <code>\n\t * initParticleFunc(prop:ParticleProperties)\n\t * {\n\t * \t\t//code for settings local properties\n\t * }\n\t * </code>\n\t *\n\t * Aside from setting any properties required in particle animation nodes using local static properties, the initParticleFunc function\n\t * is required to time node requirements as they may be needed. These properties on the ParticleProperties object can include\n\t * <code>startTime</code>, <code>duration</code> and <code>delay</code>. The use of these properties is determined by the setting\n\t * arguments passed in the constructor of the particle animation set. By default, only the <code>startTime</code> property is required.\n\t */\n\tpublic initParticleFunc:Function;\n\n\t/**\n\t * Initialiser function scope for static particle properties\n\t */\n\tpublic initParticleScope:Object;\n\n\t/**\n\t *\n\t */\n\tpublic shareAnimationGraphics:boolean = true;\n\n\t/**\n\t * Creates a new <code>ParticleAnimationSet</code>\n\t *\n\t * @param    [optional] usesDuration    Defines whether the animation set uses the <code>duration</code> data in its static properties to determine how long a particle is visible for. Defaults to false.\n\t * @param    [optional] usesLooping     Defines whether the animation set uses a looping timeframe for each particle determined by the <code>startTime</code>, <code>duration</code> and <code>delay</code> data in its static properties function. Defaults to false. Requires <code>usesDuration</code> to be true.\n\t * @param    [optional] usesDelay       Defines whether the animation set uses the <code>delay</code> data in its static properties to determine how long a particle is hidden for. Defaults to false. Requires <code>usesLooping</code> to be true.\n\t */\n\tconstructor(usesDuration:boolean = false, usesLooping:boolean = false, usesDelay:boolean = false)\n\t{\n\t\tsuper();\n\n\t\t//automatically add a particle time node to the set\n\t\tthis.addAnimation(this._timeNode = new ParticleTimeNode(usesDuration, usesLooping, usesDelay));\n\t}\n\n\t/**\n\t * Returns a vector of the particle animation nodes contained within the set.\n\t */\n\tpublic get particleNodes():Array<ParticleNodeBase>\n\t{\n\t\treturn this._particleNodes;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic addAnimation(node:AnimationNodeBase):void\n\t{\n\t\tvar i:number;\n\t\tvar n:ParticleNodeBase = <ParticleNodeBase> node;\n\t\tn._iProcessAnimationSetting(this);\n\t\tif (n.mode == ParticlePropertiesMode.LOCAL_STATIC) {\n\t\t\tn._iDataOffset = this._totalLenOfOneVertex;\n\t\t\tthis._totalLenOfOneVertex += n.dataLength;\n\t\t\tthis._localStaticNodes.push(n);\n\t\t} else if (n.mode == ParticlePropertiesMode.LOCAL_DYNAMIC)\n\t\t\tthis._localDynamicNodes.push(n);\n\n\t\tfor (i = this._particleNodes.length - 1; i >= 0; i--) {\n\t\t\tif (this._particleNodes[i].priority <= n.priority)\n\t\t\t\tbreak;\n\t\t}\n\n\t\tthis._particleNodes.splice(i + 1, 0, n);\n\n\t\tsuper.addAnimation(node);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAGALVertexCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\t//grab animationRegisterData from the materialpassbase or create a new one if the first time\n\t\tthis._iAnimationRegisterData = shader.animationRegisterData;\n\n\t\tif (this._iAnimationRegisterData == null)\n\t\t\tthis._iAnimationRegisterData = shader.animationRegisterData = new AnimationRegisterData();\n\n\t\t//reset animationRegisterData\n\t\tthis._iAnimationRegisterData.reset(registerCache, sharedRegisters, this.needVelocity);\n\n\t\tvar code:string = \"\";\n\n\t\tvar len:number = sharedRegisters.animatableAttributes.length;\n\t\tfor (var i:number = 0; i < len; i++)\n\t\t\tcode += \"mov \" + sharedRegisters.animationTargetRegisters[i] + \",\" + sharedRegisters.animatableAttributes[i] + \"\\n\";\n\n\t\tcode += \"mov \" + this._iAnimationRegisterData.positionTarget + \".xyz,\" + this._iAnimationRegisterData.vertexZeroConst + \"\\n\";\n\n\t\tif (this.needVelocity)\n\t\t\tcode += \"mov \" + this._iAnimationRegisterData.velocityTarget + \".xyz,\" + this._iAnimationRegisterData.vertexZeroConst + \"\\n\";\n\n\t\tvar node:ParticleNodeBase;\n\t\tvar i:number;\n\n\t\tfor (i = 0; i < this._particleNodes.length; i++) {\n\t\t\tnode = this._particleNodes[i];\n\t\t\tif (node.priority < ParticleAnimationSet.POST_PRIORITY)\n\t\t\t\tcode += node.getAGALVertexCode(shader, this, registerCache, this._iAnimationRegisterData);\n\t\t}\n\n\t\tcode += \"add \" + this._iAnimationRegisterData.scaleAndRotateTarget + \".xyz,\" + this._iAnimationRegisterData.scaleAndRotateTarget + \".xyz,\" + this._iAnimationRegisterData.positionTarget + \".xyz\\n\";\n\n\t\tfor (i = 0; i < this._particleNodes.length; i++) {\n\t\t\tnode = this._particleNodes[i];\n\t\t\tif (node.priority >= ParticleAnimationSet.POST_PRIORITY && node.priority < ParticleAnimationSet.COLOR_PRIORITY)\n\t\t\t\tcode += node.getAGALVertexCode(shader, this, registerCache, this._iAnimationRegisterData);\n\t\t}\n\n\t\tif (this.hasColorMulNode) {\n\t\t\tthis._iAnimationRegisterData.colorMulTarget = registerCache.getFreeVertexVectorTemp();\n\t\t\tregisterCache.addVertexTempUsages(this._iAnimationRegisterData.colorMulTarget, 1);\n\t\t\tthis._iAnimationRegisterData.colorMulVary = registerCache.getFreeVarying();\n\t\t\tcode += \"mov \" + this._iAnimationRegisterData.colorMulTarget + \",\" + this._iAnimationRegisterData.vertexOneConst + \"\\n\";\n\t\t}\n\t\tif (this.hasColorAddNode) {\n\t\t\tthis._iAnimationRegisterData.colorAddTarget = registerCache.getFreeVertexVectorTemp();\n\t\t\tregisterCache.addVertexTempUsages(this._iAnimationRegisterData.colorAddTarget, 1);\n\t\t\tthis._iAnimationRegisterData.colorAddVary = registerCache.getFreeVarying();\n\t\t\tcode += \"mov \" + this._iAnimationRegisterData.colorAddTarget + \",\" + this._iAnimationRegisterData.vertexZeroConst + \"\\n\";\n\t\t}\n\n\t\tfor (i = 0; i < this._particleNodes.length; i++) {\n\t\t\tnode = this._particleNodes[i];\n\t\t\tif (node.priority >= ParticleAnimationSet.COLOR_PRIORITY)\n\t\t\t\tcode += node.getAGALVertexCode(shader, this, registerCache, this._iAnimationRegisterData);\n\t\t}\n\t\tif (shader.usesFragmentAnimation && (this.hasColorAddNode || this.hasColorMulNode)) {\n\t\t\tif (this.hasColorMulNode)\n\t\t\t\tcode += \"mov \" + this._iAnimationRegisterData.colorMulVary + \",\" + this._iAnimationRegisterData.colorMulTarget + \"\\n\";\n\t\t\tif (this.hasColorAddNode)\n\t\t\t\tcode += \"mov \" + this._iAnimationRegisterData.colorAddVary + \",\" + this._iAnimationRegisterData.colorAddTarget + \"\\n\";\n\t\t}\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAGALUVCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tif (this.hasUVNode) {\n\t\t\tthis._iAnimationRegisterData.setUVSourceAndTarget(sharedRegisters);\n\t\t\tcode += \"mov \" + this._iAnimationRegisterData.uvTarget + \".xy,\" + this._iAnimationRegisterData.uvAttribute.toString() + \"\\n\";\n\t\t\tvar node:ParticleNodeBase;\n\t\t\tfor (var i:number = 0; i < this._particleNodes.length; i++)\n\t\t\t\tnode = this._particleNodes[i];\n\t\t\t\tcode += node.getAGALUVCode(shader, this, registerCache, this._iAnimationRegisterData);\n\t\t\tcode += \"mov \" + this._iAnimationRegisterData.uvVar + \",\" + this._iAnimationRegisterData.uvTarget + \".xy\\n\";\n\t\t} else\n\t\t\tcode += \"mov \" + sharedRegisters.uvTarget + \",\" + sharedRegisters.uvSource + \"\\n\";\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAGALFragmentCode(shader:ShaderBase, registerCache:ShaderRegisterCache, shadedTarget:ShaderRegisterElement):string\n\t{\n\t\tvar code:string = \"\";\n\t\tif (shader.usesFragmentAnimation && (this.hasColorAddNode || this.hasColorMulNode)) {\n\t\t\tif (this.hasColorMulNode)\n\t\t\t\tcode += \"mul \" + shadedTarget + \",\" + shadedTarget + \",\" + this._iAnimationRegisterData.colorMulVary + \"\\n\";\n\t\t\tif (this.hasColorAddNode)\n\t\t\t\tcode += \"add \" + shadedTarget + \",\" + shadedTarget + \",\" + this._iAnimationRegisterData.colorAddVary + \"\\n\";\n\t\t}\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic doneAGALCode(shader:ShaderBase):void\n\t{\n\t\t//set vertexZeroConst,vertexOneConst,vertexTwoConst\n\t\tshader.setVertexConst(this._iAnimationRegisterData.vertexZeroConst.index, 0, 1, 2, 0);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get usesCPU():boolean\n\t{\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic cancelGPUCompatibility():void\n\t{\n\n\t}\n\n\tpublic dispose():void\n\t{\n\t\tfor (var key in this._animationElements)\n\t\t\t(<AnimationElements> this._animationElements[key]).dispose();\n\n\t\tsuper.dispose();\n\t}\n\n\tpublic getAnimationElements(graphic:Graphic):AnimationElements\n\t{\n\t\tvar animationElements:AnimationElements = (this.shareAnimationGraphics)? this._animationElements[graphic.elements.id] : this._animationElements[graphic.id];\n\n\t\tif (animationElements)\n\t\t\treturn animationElements;\n\n\t\tthis._iGenerateAnimationElements(graphic.parent);\n\n\t\treturn (this.shareAnimationGraphics)? this._animationElements[graphic.elements.id] : this._animationElements[graphic.id];\n\t}\n\n\n\t/** @private */\n\tpublic _iGenerateAnimationElements(graphics:Graphics):void\n\t{\n\t\tif (this.initParticleFunc == null)\n\t\t\tthrow(new Error(\"no initParticleFunc set\"));\n\n\t\tvar i:number, j:number, k:number;\n\t\tvar animationElements:AnimationElements;\n\t\tvar newAnimationElements:boolean = false;\n\t\tvar elements:ElementsBase;\n\t\tvar graphic:Graphic;\n\t\tvar localNode:ParticleNodeBase;\n\n\t\tfor (i = 0; i < graphics.count; i++) {\n\t\t\tgraphic = graphics.getGraphicAt(i);\n\t\t\telements = graphic.elements;\n\t\t\tif (this.shareAnimationGraphics) {\n\t\t\t\tanimationElements = this._animationElements[elements.id];\n\n\t\t\t\tif (animationElements)\n\t\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tanimationElements = new AnimationElements();\n\n\t\t\tif (this.shareAnimationGraphics)\n\t\t\t\tthis._animationElements[elements.id] = animationElements;\n\t\t\telse\n\t\t\t\tthis._animationElements[graphic.id] = animationElements;\n\n\t\t\tnewAnimationElements = true;\n\n\t\t\t//create the vertexData vector that will be used for local node data\n\t\t\tanimationElements.createVertexData(elements.numVertices, this._totalLenOfOneVertex);\n\t\t}\n\n\t\tif (!newAnimationElements)\n\t\t\treturn;\n\n\t\tvar particles:Array<ParticleData> = graphics.particles;\n\t\tvar particlesLength:number = particles.length;\n\t\tvar numParticles:number = graphics.numParticles;\n\t\tvar particleProperties:ParticleProperties = new ParticleProperties();\n\t\tvar particle:ParticleData;\n\n\t\tvar oneDataLen:number;\n\t\tvar oneDataOffset:number;\n\t\tvar counterForVertex:number;\n\t\tvar counterForOneData:number;\n\t\tvar oneData:Array<number>;\n\t\tvar numVertices:number;\n\t\tvar vertexData:Array<number>;\n\t\tvar vertexLength:number;\n\t\tvar startingOffset:number;\n\t\tvar vertexOffset:number;\n\n\t\t//default values for particle param\n\t\tparticleProperties.total = numParticles;\n\t\tparticleProperties.startTime = 0;\n\t\tparticleProperties.duration = 1000;\n\t\tparticleProperties.delay = 0.1;\n\n\t\ti = 0;\n\t\tj = 0;\n\t\twhile (i < numParticles) {\n\t\t\tparticleProperties.index = i;\n\n\t\t\t//call the init on the particle parameters\n\t\t\tthis.initParticleFunc.call(this.initParticleScope, particleProperties);\n\n\t\t\t//create the next set of node properties for the particle\n\t\t\tfor (k = 0; k < this._localStaticNodes.length; k++)\n\t\t\t\tthis._localStaticNodes[k]._iGeneratePropertyOfOneParticle(particleProperties);\n\n\t\t\t//loop through all particle data for the curent particle\n\t\t\twhile (j < particlesLength && (particle = particles[j]).particleIndex == i) {\n\t\t\t\t//find the target animationElements\n\t\t\t\tfor (k = 0; k < graphics.count; k++) {\n\t\t\t\t\tgraphic = graphics.getGraphicAt(k);\n\t\t\t\t\tif (graphic.elements == particle.elements) {\n\t\t\t\t\t\tanimationElements = (this.shareAnimationGraphics)? this._animationElements[graphic.elements.id] : this._animationElements[graphic.id];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnumVertices = particle.numVertices;\n\t\t\t\tvertexData = animationElements.vertexData;\n\t\t\t\tvertexLength = numVertices*this._totalLenOfOneVertex;\n\t\t\t\tstartingOffset = animationElements.numProcessedVertices*this._totalLenOfOneVertex;\n\n\t\t\t\t//loop through each static local node in the animation set\n\t\t\t\tfor (k = 0; k < this._localStaticNodes.length; k++) {\n\t\t\t\t\tlocalNode = this._localStaticNodes[k];\n\t\t\t\t\toneData = localNode.oneData;\n\t\t\t\t\toneDataLen = localNode.dataLength;\n\t\t\t\t\toneDataOffset = startingOffset + localNode._iDataOffset;\n\n\t\t\t\t\t//loop through each vertex set in the vertex data\n\t\t\t\t\tfor (counterForVertex = 0; counterForVertex < vertexLength; counterForVertex += this._totalLenOfOneVertex) {\n\t\t\t\t\t\tvertexOffset = oneDataOffset + counterForVertex;\n\n\t\t\t\t\t\t//add the data for the local node to the vertex data\n\t\t\t\t\t\tfor (counterForOneData = 0; counterForOneData < oneDataLen; counterForOneData++)\n\t\t\t\t\t\t\tvertexData[vertexOffset + counterForOneData] = oneData[counterForOneData];\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t//store particle properties if they need to be retreived for dynamic local nodes\n\t\t\t\tif (this._localDynamicNodes.length)\n\t\t\t\t\tanimationElements.animationParticles.push(new ParticleAnimationData(i, particleProperties.startTime, particleProperties.duration, particleProperties.delay, particle));\n\n\t\t\t\tanimationElements.numProcessedVertices += numVertices;\n\n\t\t\t\t//next index\n\t\t\t\tj++;\n\t\t\t}\n\n\t\t\t//next particle\n\t\t\ti++;\n\t\t}\n\t}\n}",
    "import {ElementsBase}\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/ElementsBase\";\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\nimport {Graphic}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphic\";\n\nimport {ContextGLProgramType}\t\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLProgramType\";\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\n\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../animators/AnimatorBase\";\nimport {AnimationRegisterData}\t\t\tfrom \"../animators/data/AnimationRegisterData\";\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../animators/ParticleAnimationSet\";\nimport {AnimationElements}\t\t\t\tfrom \"../animators/data/AnimationElements\";\nimport {ParticlePropertiesMode}\t\t\tfrom \"../animators/data/ParticlePropertiesMode\";\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../animators/nodes/ParticleNodeBase\";\nimport {ParticleStateBase}\t\t\t\tfrom \"../animators/states/ParticleStateBase\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../shaders/ShaderBase\";\nimport {GL_RenderableBase}\t\t\t\tfrom \"../renderables/GL_RenderableBase\";\nimport {GL_GraphicRenderable}\t\t\tfrom \"../renderables/GL_GraphicRenderable\";\n\n/**\n * Provides an interface for assigning paricle-based animation data sets to sprite-based entity objects\n * and controlling the various available states of animation through an interative playhead that can be\n * automatically updated or manually triggered.\n *\n * Requires that the containing geometry of the parent sprite is particle geometry\n *\n * @see away.base.ParticleGraphics\n */\nexport class ParticleAnimator extends AnimatorBase\n{\n\n\tprivate _particleAnimationSet:ParticleAnimationSet;\n\tprivate _animationParticleStates:Array<ParticleStateBase> = new Array<ParticleStateBase>();\n\tprivate _animatorParticleStates:Array<ParticleStateBase> = new Array<ParticleStateBase>();\n\tprivate _timeParticleStates:Array<ParticleStateBase> = new Array<ParticleStateBase>();\n\tprivate _totalLenOfOneVertex:number = 0;\n\tprivate _animatorSubGeometries:Object = new Object();\n\n\t/**\n\t * Creates a new <code>ParticleAnimator</code> object.\n\t *\n\t * @param particleAnimationSet The animation data set containing the particle animations used by the animator.\n\t */\n\tconstructor(particleAnimationSet:ParticleAnimationSet)\n\t{\n\t\tsuper(particleAnimationSet);\n\t\tthis._particleAnimationSet = particleAnimationSet;\n\n\t\tvar state:ParticleStateBase;\n\t\tvar node:ParticleNodeBase;\n\n\t\tfor (var i:number = 0; i < this._particleAnimationSet.particleNodes.length; i++) {\n\t\t\tnode = this._particleAnimationSet.particleNodes[i];\n\t\t\tstate = <ParticleStateBase> this.getAnimationState(node);\n\t\t\tif (node.mode == ParticlePropertiesMode.LOCAL_DYNAMIC) {\n\t\t\t\tthis._animatorParticleStates.push(state);\n\t\t\t\tnode._iDataOffset = this._totalLenOfOneVertex;\n\t\t\t\tthis._totalLenOfOneVertex += node.dataLength;\n\t\t\t} else {\n\t\t\t\tthis._animationParticleStates.push(state);\n\t\t\t}\n\t\t\tif (state.needUpdateTime)\n\t\t\t\tthis._timeParticleStates.push(state);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic clone():AnimatorBase\n\t{\n\t\treturn new ParticleAnimator(this._particleAnimationSet);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, stage:Stage, camera:Camera):void\n\t{\n\t\tvar animationRegisterData:AnimationRegisterData = this._particleAnimationSet._iAnimationRegisterData;\n\n\t\tvar graphic:Graphic = (<GL_GraphicRenderable> renderable).graphic;\n\n\t\tif (!graphic)\n\t\t\tthrow(new Error(\"Must be graphic\"));\n\n\t\t//process animation sub geometries\n\t\tvar animationElements:AnimationElements = this._particleAnimationSet.getAnimationElements(graphic);\n\t\tvar i:number;\n\t\t\n\t\tfor (i = 0; i < this._animationParticleStates.length; i++)\n\t\t\tthis._animationParticleStates[i].setRenderState(shader, renderable, animationElements, animationRegisterData, camera, stage);\n\n\t\t//process animator subgeometries\n\t\tvar animatorElements:AnimationElements = this.getAnimatorElements(graphic);\n\n\t\tfor (i = 0; i < this._animatorParticleStates.length; i++)\n\t\t\tthis._animatorParticleStates[i].setRenderState(shader, renderable, animatorElements, animationRegisterData, camera, stage);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic testGPUCompatibility(shader:ShaderBase):void\n\t{\n\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic start():void\n\t{\n\t\tsuper.start();\n\n\t\tfor (var i:number = 0; i < this._timeParticleStates.length; i++)\n\t\t\tthis._timeParticleStates[i].offset(this._pAbsoluteTime);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pUpdateDeltaTime(dt:number):void\n\t{\n\t\tthis._pAbsoluteTime += dt;\n\n\t\tfor (var i:number = 0; i < this._timeParticleStates.length; i++)\n\t\t\tthis._timeParticleStates[i].update(this._pAbsoluteTime);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic resetTime(offset:number = 0):void\n\t{\n\t\tfor (var i:number = 0; i < this._timeParticleStates.length; i++)\n\t\t\tthis._timeParticleStates[i].offset(this._pAbsoluteTime + offset);\n\t\tthis.update(this.time);\n\t}\n\n\tpublic dispose():void\n\t{\n\t\tfor (var key in this._animatorSubGeometries)\n\t\t\t(<AnimationElements> this._animatorSubGeometries[key]).dispose();\n\t}\n\n\tprivate getAnimatorElements(graphic:Graphic):AnimationElements\n\t{\n\t\tif (!this._animatorParticleStates.length)\n\t\t\treturn;\n\n\t\tvar elements:ElementsBase = graphic.elements;\n\t\tvar animatorElements:AnimationElements = this._animatorSubGeometries[elements.id] = new AnimationElements();\n\n\t\t//create the vertexData vector that will be used for local state data\n\t\tanimatorElements.createVertexData(elements.numVertices, this._totalLenOfOneVertex);\n\n\t\t//pass the particles data to the animator elements\n\t\tanimatorElements.animationParticles = this._particleAnimationSet.getAnimationElements(graphic).animationParticles;\n\t}\n}",
    "import {IAnimationSet}\t\t\t\t\tfrom \"awayjs-display/lib/animators/IAnimationSet\";\n\nimport {AnimationSetBase}\t\t\t\t\tfrom \"../animators/AnimationSetBase\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../shaders/ShaderBase\";\nimport {ShaderRegisterElement}\t\t\tfrom \"../shaders/ShaderRegisterElement\";\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterData}\t\t\t\tfrom \"../shaders/ShaderRegisterData\";\n\n/**\n * The animation data set used by skeleton-based animators, containing skeleton animation data.\n *\n * @see away.animators.SkeletonAnimator\n */\nexport class SkeletonAnimationSet extends AnimationSetBase implements IAnimationSet\n{\n\tprivate _jointsPerVertex:number;\n\tprivate _matricesIndex:number;\n\n\t/**\n\t * Returns the amount of skeleton joints that can be linked to a single vertex via skinned weight values. For GPU-base animation, the\n\t * maximum allowed value is 4.\n\t */\n\tpublic get jointsPerVertex():number\n\t{\n\t\treturn this._jointsPerVertex;\n\t}\n\t\n\tpublic get matricesIndex():number\n\t{\n\t\treturn this._matricesIndex;\n\t}\n\t\n\t/**\n\t * Creates a new <code>SkeletonAnimationSet</code> object.\n\t *\n\t * @param jointsPerVertex Sets the amount of skeleton joints that can be linked to a single vertex via skinned weight values. For GPU-base animation, the maximum allowed value is 4. Defaults to 4.\n\t */\n\tconstructor(jointsPerVertex:number = 4)\n\t{\n\t\tsuper();\n\n\t\tthis._jointsPerVertex = jointsPerVertex;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAGALVertexCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthis._matricesIndex = registerCache.numUsedVertexConstants;\n\t\tvar indexOffset0:number = this._matricesIndex;\n\t\tvar indexOffset1:number = this._matricesIndex + 1;\n\t\tvar indexOffset2:number = this._matricesIndex + 2;\n\t\t\n\t\tvar indexStream:ShaderRegisterElement = registerCache.getFreeVertexAttribute();\n\t\tshader.jointIndexIndex = indexStream.index;\n\t\t\n\t\tvar weightStream:ShaderRegisterElement = registerCache.getFreeVertexAttribute();\n\t\tshader.jointWeightIndex = weightStream.index;\n\t\t\n\t\tvar indices:Array<string> = [ indexStream + \".x\", indexStream + \".y\", indexStream + \".z\", indexStream + \".w\" ];\n\t\tvar weights:Array<string> = [ weightStream + \".x\", weightStream + \".y\", weightStream + \".z\", weightStream + \".w\" ];\n\t\tvar temp1:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\tvar dot:string = \"dp4\";\n\t\tvar code:string = \"\";\n\n\t\tvar len:number = sharedRegisters.animatableAttributes.length;\n\t\tfor (var i:number = 0; i < len; ++i) {\n\n\t\t\tvar source:ShaderRegisterElement = sharedRegisters.animatableAttributes[i];\n\t\t\tvar target:ShaderRegisterElement = sharedRegisters.animationTargetRegisters[i];\n\n\t\t\tfor (var j:number = 0; j < this._jointsPerVertex; ++j) {\n\t\t\t\tregisterCache.getFreeVertexConstant();\n\t\t\t\tregisterCache.getFreeVertexConstant();\n\t\t\t\tregisterCache.getFreeVertexConstant();\n\t\t\t\tcode += dot + \" \" + temp1 + \".x, \" + source + \", vc[\" + indices[j] + \"+\" + indexOffset0 + \"]\\n\" +\n\t\t\t\t\tdot + \" \" + temp1 + \".y, \" + source + \", vc[\" + indices[j] + \"+\" + indexOffset1 + \"]\\n\" +\n\t\t\t\t\tdot + \" \" + temp1 + \".z, \" + source + \", vc[\" + indices[j] + \"+\" + indexOffset2 + \"]\\n\" +\n\t\t\t\t\t\"mov \" + temp1 + \".w, \" + source + \".w\\n\" +\n\t\t\t\t\t\"mul \" + temp1 + \", \" + temp1 + \", \" + weights[j] + \"\\n\"; // apply weight\n\n\t\t\t\t// add or mov to target. Need to write to a temp reg first, because an output can be a target\n\t\t\t\tif (j == 0)\n\t\t\t\t\tcode += \"mov \" + target + \", \" + temp1 + \"\\n\";\n\t\t\t\telse\n\t\t\t\t\tcode += \"add \" + target + \", \" + target + \", \" + temp1 + \"\\n\";\n\t\t\t}\n\t\t\t\n\t\t\t// switch to dp3 once positions have been transformed, from now on, it should only be vectors instead of points\n\t\t\tdot = \"dp3\";\n\t\t}\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAGALFragmentCode(shader:ShaderBase, registerCache:ShaderRegisterCache, shadedTarget:ShaderRegisterElement):string\n\t{\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAGALUVCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"mov \" + sharedRegisters.uvTarget + \",\" + sharedRegisters.uvSource + \"\\n\";\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic doneAGALCode(shader:ShaderBase):void\n\t{\n\n\t}\n}",
    "import {Quaternion}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Quaternion\";\nimport {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {TriangleElements}\t\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\nimport {ElementsEvent}\t\t\t\t\tfrom \"awayjs-display/lib/events/ElementsEvent\";\n\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\n\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../animators/AnimatorBase\";\nimport {SkeletonAnimationSet}\t\t\t\tfrom \"../animators/SkeletonAnimationSet\";\nimport {JointPose}\t\t\t\t\t\tfrom \"../animators/data/JointPose\";\nimport {Skeleton}\t\t\t\t\t\t\tfrom \"../animators/data/Skeleton\";\nimport {SkeletonJoint}\t\t\t\t\tfrom \"../animators/data/SkeletonJoint\";\nimport {SkeletonPose}\t\t\t\t\t\tfrom \"../animators/data/SkeletonPose\";\nimport {ISkeletonAnimationState}\t\t\tfrom \"../animators/states/ISkeletonAnimationState\";\nimport {IAnimationTransition}\t\t\t\tfrom \"../animators/transitions/IAnimationTransition\";\nimport {AnimationStateEvent}\t\t\t\tfrom \"../events/AnimationStateEvent\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../shaders/ShaderBase\";\nimport {GL_RenderableBase}\t\t\t\tfrom \"../renderables/GL_RenderableBase\";\nimport {GL_GraphicRenderable}\t\t\t\tfrom \"../renderables/GL_GraphicRenderable\";\n\n/**\n * Provides an interface for assigning skeleton-based animation data sets to sprite-based entity objects\n * and controlling the various available states of animation through an interative playhead that can be\n * automatically updated or manually triggered.\n */\nexport class SkeletonAnimator extends AnimatorBase\n{\n\tprivate _globalMatrices:Float32Array;\n\tprivate _globalPose:SkeletonPose = new SkeletonPose();\n\tprivate _globalPropertiesDirty:boolean;\n\tprivate _numJoints:number;\n\tprivate _morphedElements:Object = new Object();\n\tprivate _morphedElementsDirty:Object = new Object();\n\tprivate _condensedMatrices:Float32Array;\n\n\tprivate _skeletonAnimationSet:SkeletonAnimationSet;\n\tprivate _skeleton:Skeleton;\n\tprivate _forceCPU:boolean;\n\tprivate _useCondensedIndices:boolean;\n\tprivate _jointsPerVertex:number;\n\tprivate _activeSkeletonState:ISkeletonAnimationState;\n\tprivate _onTransitionCompleteDelegate:(event:AnimationStateEvent) => void;\n\n\tprivate _onIndicesUpdateDelegate:(event:ElementsEvent) => void;\n\tprivate _onVerticesUpdateDelegate:(event:ElementsEvent) => void;\n\n\t/**\n\t * returns the calculated global matrices of the current skeleton pose.\n\t *\n\t * @see #globalPose\n\t */\n\tpublic get globalMatrices():Float32Array\n\t{\n\t\tif (this._globalPropertiesDirty)\n\t\t\tthis.updateGlobalProperties();\n\n\t\treturn this._globalMatrices;\n\t}\n\n\t/**\n\t * returns the current skeleton pose output from the animator.\n\t *\n\t * @see away.animators.data.SkeletonPose\n\t */\n\tpublic get globalPose():SkeletonPose\n\t{\n\t\tif (this._globalPropertiesDirty)\n\t\t\tthis.updateGlobalProperties();\n\n\t\treturn this._globalPose;\n\t}\n\n\t/**\n\t * Returns the skeleton object in use by the animator - this defines the number and heirarchy of joints used by the\n\t * skinned geoemtry to which skeleon animator is applied.\n\t */\n\tpublic get skeleton():Skeleton\n\t{\n\t\treturn this._skeleton;\n\t}\n\n\t/**\n\t * Indicates whether the skeleton animator is disabled by default for GPU rendering, something that allows the animator to perform calculation on the GPU.\n\t * Defaults to false.\n\t */\n\tpublic get forceCPU():boolean\n\t{\n\t\treturn this._forceCPU;\n\t}\n\n\t/**\n\t * Offers the option of enabling GPU accelerated animation on skeletons larger than 32 joints\n\t * by condensing the number of joint index values required per sprite. Only applicable to\n\t * skeleton animations that utilise more than one sprite object. Defaults to false.\n\t */\n\tpublic get useCondensedIndices():boolean\n\t{\n\t\treturn this._useCondensedIndices;\n\t}\n\n\tpublic set useCondensedIndices(value:boolean)\n\t{\n\t\tthis._useCondensedIndices = value;\n\t}\n\n\t/**\n\t * Creates a new <code>SkeletonAnimator</code> object.\n\t *\n\t * @param skeletonAnimationSet The animation data set containing the skeleton animations used by the animator.\n\t * @param skeleton The skeleton object used for calculating the resulting global matrices for transforming skinned sprite data.\n\t * @param forceCPU Optional value that only allows the animator to perform calculation on the CPU. Defaults to false.\n\t */\n\tconstructor(animationSet:SkeletonAnimationSet, skeleton:Skeleton, forceCPU:boolean = false)\n\t{\n\t\tsuper(animationSet);\n\n\t\tthis._skeletonAnimationSet = animationSet;\n\t\tthis._skeleton = skeleton;\n\t\tthis._forceCPU = forceCPU;\n\t\tthis._jointsPerVertex = animationSet.jointsPerVertex;\n\n\t\tthis._numJoints = this._skeleton.numJoints;\n\t\tthis._globalMatrices = new Float32Array(this._numJoints*12);\n\n\t\tvar j:number = 0;\n\t\tfor (var i:number = 0; i < this._numJoints; ++i) {\n\t\t\tthis._globalMatrices[j++] = 1;\n\t\t\tthis._globalMatrices[j++] = 0;\n\t\t\tthis._globalMatrices[j++] = 0;\n\t\t\tthis._globalMatrices[j++] = 0;\n\t\t\tthis._globalMatrices[j++] = 0;\n\t\t\tthis._globalMatrices[j++] = 1;\n\t\t\tthis._globalMatrices[j++] = 0;\n\t\t\tthis._globalMatrices[j++] = 0;\n\t\t\tthis._globalMatrices[j++] = 0;\n\t\t\tthis._globalMatrices[j++] = 0;\n\t\t\tthis._globalMatrices[j++] = 1;\n\t\t\tthis._globalMatrices[j++] = 0;\n\t\t}\n\n\t\tthis._onTransitionCompleteDelegate = (event:AnimationStateEvent) => this.onTransitionComplete(event);\n\t\tthis._onIndicesUpdateDelegate = (event:ElementsEvent) => this.onIndicesUpdate(event);\n\t\tthis._onVerticesUpdateDelegate = (event:ElementsEvent) => this.onVerticesUpdate(event);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic clone():AnimatorBase\n\t{\n\t\treturn new SkeletonAnimator(this._skeletonAnimationSet, this._skeleton, this._forceCPU);\n\t}\n\n\t/**\n\t * Plays an animation state registered with the given name in the animation data set.\n\t *\n\t * @param name The data set name of the animation state to be played.\n\t * @param transition An optional transition object that determines how the animator will transition from the currently active animation state.\n\t * @param offset An option offset time (in milliseconds) that resets the state's internal clock to the absolute time of the animator plus the offset value. Required for non-looping animation states.\n\t */\n\tpublic play(name:string, transition:IAnimationTransition = null, offset:number = NaN):void\n\t{\n\t\tif (this._pActiveAnimationName == name)\n\t\t\treturn;\n\n\t\tthis._pActiveAnimationName = name;\n\n\t\tif (!this._pAnimationSet.hasAnimation(name))\n\t\t\tthrow new Error(\"Animation root node \" + name + \" not found!\");\n\n\t\tif (transition && this._pActiveNode) {\n\t\t\t//setup the transition\n\t\t\tthis._pActiveNode = transition.getAnimationNode(this, this._pActiveNode, this._pAnimationSet.getAnimation(name), this._pAbsoluteTime);\n\t\t\tthis._pActiveNode.addEventListener(AnimationStateEvent.TRANSITION_COMPLETE, this._onTransitionCompleteDelegate);\n\t\t} else\n\t\t\tthis._pActiveNode = this._pAnimationSet.getAnimation(name);\n\n\t\tthis._pActiveState = this.getAnimationState(this._pActiveNode);\n\n\t\tif (this.updatePosition) {\n\t\t\t//update straight away to reset position deltas\n\t\t\tthis._pActiveState.update(this._pAbsoluteTime);\n\t\t\tthis._pActiveState.positionDelta;\n\t\t}\n\n\t\tthis._activeSkeletonState = <ISkeletonAnimationState> this._pActiveState;\n\n\t\tthis.start();\n\n\t\t//apply a time offset if specified\n\t\tif (!isNaN(offset))\n\t\t\tthis.reset(name, offset);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, stage:Stage, camera:Camera):void\n\t{\n\t\t// do on request of globalProperties\n\t\tif (this._globalPropertiesDirty)\n\t\t\tthis.updateGlobalProperties();\n\n\t\tvar elements:TriangleElements = <TriangleElements> (<GL_GraphicRenderable> renderable).graphic.elements;\n\n\t\telements.useCondensedIndices = this._useCondensedIndices;\n\n\t\tif (this._useCondensedIndices) {\n\t\t\t// using a condensed data set\n\t\t\tthis.updateCondensedMatrices(elements.condensedIndexLookUp);\n\t\t\tshader.setVertexConstFromArray(this._skeletonAnimationSet.matricesIndex, this._condensedMatrices);\n\t\t} else {\n\t\t\tif (this._pAnimationSet.usesCPU) {\n\t\t\t\tif (this._morphedElementsDirty[elements.id])\n\t\t\t\t\tthis.morphElements(<GL_GraphicRenderable> renderable, elements);\n\n\t\t\t\treturn\n\t\t\t}\n\t\t\tshader.setVertexConstFromArray(this._skeletonAnimationSet.matricesIndex, this._globalMatrices);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic testGPUCompatibility(shader:ShaderBase):void\n\t{\n\t\tif (!this._useCondensedIndices && (this._forceCPU || this._jointsPerVertex > 4 || shader.numUsedVertexConstants + this._numJoints*3 > 128))\n\t\t\tthis._pAnimationSet.cancelGPUCompatibility();\n\t}\n\n\t/**\n\t * Applies the calculated time delta to the active animation state node or state transition object.\n\t */\n\tpublic _pUpdateDeltaTime(dt:number):void\n\t{\n\t\tsuper._pUpdateDeltaTime(dt);\n\n\t\t//invalidate pose matrices\n\t\tthis._globalPropertiesDirty = true;\n\n\t\t//trigger geometry invalidation if using CPU animation\n\t\tif (this._pAnimationSet.usesCPU)\n\t\t\tthis.invalidateElements();\n\t}\n\n\tprivate updateCondensedMatrices(condensedIndexLookUp:Array<number>):void\n\t{\n\t\tvar j:number = 0, k:number = 0;\n\t\tvar len:number = condensedIndexLookUp.length;\n\t\tvar srcIndex:number;\n\n\t\tthis._condensedMatrices = new Float32Array(len*12);\n\n\t\tfor (var i:number = 0; i < len; i++) {\n\t\t\tsrcIndex = condensedIndexLookUp[i]*12; //12 required for the three 4-component vectors that store the matrix\n\t\t\tk = 12;\n\t\t\t// copy into condensed\n\t\t\twhile (k--)\n\t\t\t\tthis._condensedMatrices[j++] = this._globalMatrices[srcIndex++];\n\t\t}\n\t}\n\n\tprivate updateGlobalProperties():void\n\t{\n\t\tthis._globalPropertiesDirty = false;\n\n\t\t//get global pose\n\t\tthis.localToGlobalPose(this._activeSkeletonState.getSkeletonPose(this._skeleton), this._globalPose, this._skeleton);\n\n\t\t// convert pose to matrix\n\t\tvar mtxOffset:number = 0;\n\t\tvar globalPoses:Array<JointPose> = this._globalPose.jointPoses;\n\t\tvar raw:Float32Array;\n\t\tvar ox:number, oy:number, oz:number, ow:number;\n\t\tvar xy2:number, xz2:number, xw2:number;\n\t\tvar yz2:number, yw2:number, zw2:number;\n\t\tvar n11:number, n12:number, n13:number;\n\t\tvar n21:number, n22:number, n23:number;\n\t\tvar n31:number, n32:number, n33:number;\n\t\tvar m11:number, m12:number, m13:number, m14:number;\n\t\tvar m21:number, m22:number, m23:number, m24:number;\n\t\tvar m31:number, m32:number, m33:number, m34:number;\n\t\tvar joints:Array<SkeletonJoint> = this._skeleton.joints;\n\t\tvar pose:JointPose;\n\t\tvar quat:Quaternion;\n\t\tvar vec:Vector3D;\n\t\tvar t:number;\n\n\t\tfor (var i:number = 0; i < this._numJoints; ++i) {\n\t\t\tpose = globalPoses[i];\n\t\t\tquat = pose.orientation;\n\t\t\tvec = pose.translation;\n\t\t\tox = quat.x;\n\t\t\toy = quat.y;\n\t\t\toz = quat.z;\n\t\t\tow = quat.w;\n\n\t\t\txy2 = (t = 2.0*ox)*oy;\n\t\t\txz2 = t*oz;\n\t\t\txw2 = t*ow;\n\t\t\tyz2 = (t = 2.0*oy)*oz;\n\t\t\tyw2 = t*ow;\n\t\t\tzw2 = 2.0*oz*ow;\n\n\t\t\tyz2 = 2.0*oy*oz;\n\t\t\tyw2 = 2.0*oy*ow;\n\t\t\tzw2 = 2.0*oz*ow;\n\t\t\tox *= ox;\n\t\t\toy *= oy;\n\t\t\toz *= oz;\n\t\t\tow *= ow;\n\n\t\t\tn11 = (t = ox - oy) - oz + ow;\n\t\t\tn12 = xy2 - zw2;\n\t\t\tn13 = xz2 + yw2;\n\t\t\tn21 = xy2 + zw2;\n\t\t\tn22 = -t - oz + ow;\n\t\t\tn23 = yz2 - xw2;\n\t\t\tn31 = xz2 - yw2;\n\t\t\tn32 = yz2 + xw2;\n\t\t\tn33 = -ox - oy + oz + ow;\n\n\t\t\t// prepend inverse bind pose\n\t\t\traw = joints[i].inverseBindPose;\n\t\t\tm11 = raw[0];\n\t\t\tm12 = raw[4];\n\t\t\tm13 = raw[8];\n\t\t\tm14 = raw[12];\n\t\t\tm21 = raw[1];\n\t\t\tm22 = raw[5];\n\t\t\tm23 = raw[9];\n\t\t\tm24 = raw[13];\n\t\t\tm31 = raw[2];\n\t\t\tm32 = raw[6];\n\t\t\tm33 = raw[10];\n\t\t\tm34 = raw[14];\n\n\t\t\tthis._globalMatrices[mtxOffset] = n11*m11 + n12*m21 + n13*m31;\n\t\t\tthis._globalMatrices[mtxOffset + 1] = n11*m12 + n12*m22 + n13*m32;\n\t\t\tthis._globalMatrices[mtxOffset + 2] = n11*m13 + n12*m23 + n13*m33;\n\t\t\tthis._globalMatrices[mtxOffset + 3] = n11*m14 + n12*m24 + n13*m34 + vec.x;\n\t\t\tthis._globalMatrices[mtxOffset + 4] = n21*m11 + n22*m21 + n23*m31;\n\t\t\tthis._globalMatrices[mtxOffset + 5] = n21*m12 + n22*m22 + n23*m32;\n\t\t\tthis._globalMatrices[mtxOffset + 6] = n21*m13 + n22*m23 + n23*m33;\n\t\t\tthis._globalMatrices[mtxOffset + 7] = n21*m14 + n22*m24 + n23*m34 + vec.y;\n\t\t\tthis._globalMatrices[mtxOffset + 8] = n31*m11 + n32*m21 + n33*m31;\n\t\t\tthis._globalMatrices[mtxOffset + 9] = n31*m12 + n32*m22 + n33*m32;\n\t\t\tthis._globalMatrices[mtxOffset + 10] = n31*m13 + n32*m23 + n33*m33;\n\t\t\tthis._globalMatrices[mtxOffset + 11] = n31*m14 + n32*m24 + n33*m34 + vec.z;\n\n\t\t\tmtxOffset = mtxOffset + 12;\n\t\t}\n\t}\n\n\tpublic getRenderableElements(renderable:GL_GraphicRenderable, sourceElements:TriangleElements):TriangleElements\n\t{\n\t\tthis._morphedElementsDirty[sourceElements.id] = true;\n\n\t\t//early out for GPU animations\n\t\tif (!this._pAnimationSet.usesCPU)\n\t\t\treturn sourceElements;\n\n\t\tvar targetElements:TriangleElements;\n\n\t\tif (!(targetElements = this._morphedElements[sourceElements.id])) {\n\t\t\t//not yet stored\n\t\t\tsourceElements.normals;\n\t\t\tsourceElements.tangents;\n\t\t\ttargetElements = this._morphedElements[sourceElements.id] = sourceElements.clone();\n\t\t\t//turn off auto calculations on the morphed geometry\n\t\t\ttargetElements.autoDeriveNormals = false;\n\t\t\ttargetElements.autoDeriveTangents = false;\n\t\t\t//add event listeners for any changes in UV values on the source geometry\n\t\t\tsourceElements.addEventListener(ElementsEvent.INVALIDATE_INDICES, this._onIndicesUpdateDelegate);\n\t\t\tsourceElements.addEventListener(ElementsEvent.INVALIDATE_VERTICES, this._onVerticesUpdateDelegate);\n\t\t}\n\n\t\treturn targetElements;\n\t}\n\n\t/**\n\t * If the animation can't be performed on GPU, transform vertices manually\n\t * @param subGeom The subgeometry containing the weights and joint index data per vertex.\n\t * @param pass The material pass for which we need to transform the vertices\n\t */\n\tpublic morphElements(renderable:GL_GraphicRenderable, sourceElements:TriangleElements):void\n\t{\n\t\tthis._morphedElementsDirty[sourceElements.id] = false;\n\n\t\tvar numVertices:number = sourceElements.numVertices;\n\t\tvar sourcePositions:ArrayBufferView = sourceElements.positions.get(numVertices);\n\t\tvar sourceNormals:Float32Array = sourceElements.normals.get(numVertices);\n\t\tvar sourceTangents:Float32Array = sourceElements.tangents.get(numVertices);\n\n\t\tvar posDim:number = sourceElements.positions.dimensions;\n\n\t\tvar jointIndices:Float32Array = <Float32Array> sourceElements.jointIndices.get(numVertices);\n\t\tvar jointWeights:Float32Array = <Float32Array> sourceElements.jointWeights.get(numVertices);\n\n\t\tvar targetElements:TriangleElements = this._morphedElements[sourceElements.id];\n\n\t\tvar targetPositions:ArrayBufferView = targetElements.positions.get(numVertices);\n\t\tvar targetNormals:Float32Array = targetElements.normals.get(numVertices);\n\t\tvar targetTangents:Float32Array = targetElements.tangents.get(numVertices);\n\n\t\tvar index:number = 0;\n\t\tvar i0:number = 0;\n\t\tvar i1:number = 0;\n\t\tvar j:number = 0;\n\t\tvar k:number;\n\t\tvar vx:number, vy:number, vz:number;\n\t\tvar nx:number, ny:number, nz:number;\n\t\tvar tx:number, ty:number, tz:number;\n\t\tvar weight:number;\n\t\tvar vertX:number, vertY:number, vertZ:number;\n\t\tvar normX:number, normY:number, normZ:number;\n\t\tvar tangX:number, tangY:number, tangZ:number;\n\t\tvar m11:number, m12:number, m13:number, m14:number;\n\t\tvar m21:number, m22:number, m23:number, m24:number;\n\t\tvar m31:number, m32:number, m33:number, m34:number;\n\n\t\twhile (index < numVertices) {\n\t\t\ti0 = index*posDim;\n\t\t\tvertX = sourcePositions[i0];\n\t\t\tvertY = sourcePositions[i0 + 1];\n\t\t\tvertZ = (posDim == 3)? sourcePositions[i0 + 2] : 0;\n\t\t\ti1 = index*3;\n\t\t\tnormX = sourceNormals[i1];\n\t\t\tnormY = sourceNormals[i1 + 1];\n\t\t\tnormZ = sourceNormals[i1 + 2];\n\t\t\ttangX = sourceTangents[i1];\n\t\t\ttangY = sourceTangents[i1 + 1];\n\t\t\ttangZ = sourceTangents[i1 + 2];\n\t\t\tvx = 0;\n\t\t\tvy = 0;\n\t\t\tvz = 0;\n\t\t\tnx = 0;\n\t\t\tny = 0;\n\t\t\tnz = 0;\n\t\t\ttx = 0;\n\t\t\tty = 0;\n\t\t\ttz = 0;\n\t\t\tk = 0;\n\t\t\twhile (k < this._jointsPerVertex) {\n\t\t\t\tweight = jointWeights[j];\n\t\t\t\tif (weight > 0) {\n\t\t\t\t\t// implicit /3*12 (/3 because indices are multiplied by 3 for gpu matrix access, *12 because it's the matrix size)\n\t\t\t\t\tvar mtxOffset:number = jointIndices[j++] << 2;\n\t\t\t\t\tm11 = this._globalMatrices[mtxOffset];\n\t\t\t\t\tm12 = this._globalMatrices[mtxOffset + 1];\n\t\t\t\t\tm13 = this._globalMatrices[mtxOffset + 2];\n\t\t\t\t\tm14 = this._globalMatrices[mtxOffset + 3];\n\t\t\t\t\tm21 = this._globalMatrices[mtxOffset + 4];\n\t\t\t\t\tm22 = this._globalMatrices[mtxOffset + 5];\n\t\t\t\t\tm23 = this._globalMatrices[mtxOffset + 6];\n\t\t\t\t\tm24 = this._globalMatrices[mtxOffset + 7];\n\t\t\t\t\tm31 = this._globalMatrices[mtxOffset + 8];\n\t\t\t\t\tm32 = this._globalMatrices[mtxOffset + 9];\n\t\t\t\t\tm33 = this._globalMatrices[mtxOffset + 10];\n\t\t\t\t\tm34 = this._globalMatrices[mtxOffset + 11];\n\t\t\t\t\tvx += weight*(m11*vertX + m12*vertY + m13*vertZ + m14);\n\t\t\t\t\tvy += weight*(m21*vertX + m22*vertY + m23*vertZ + m24);\n\t\t\t\t\tvz += weight*(m31*vertX + m32*vertY + m33*vertZ + m34);\n\t\t\t\t\tnx += weight*(m11*normX + m12*normY + m13*normZ);\n\t\t\t\t\tny += weight*(m21*normX + m22*normY + m23*normZ);\n\t\t\t\t\tnz += weight*(m31*normX + m32*normY + m33*normZ);\n\t\t\t\t\ttx += weight*(m11*tangX + m12*tangY + m13*tangZ);\n\t\t\t\t\tty += weight*(m21*tangX + m22*tangY + m23*tangZ);\n\t\t\t\t\ttz += weight*(m31*tangX + m32*tangY + m33*tangZ);\n\t\t\t\t\t++k;\n\t\t\t\t} else {\n\t\t\t\t\tj += (this._jointsPerVertex - k);\n\t\t\t\t\tk = this._jointsPerVertex;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttargetPositions[i0] = vx;\n\t\t\ttargetPositions[i0 + 1] = vy;\n\t\t\tif (posDim == 3) targetPositions[i0 + 2] = vz;\n\t\t\ttargetNormals[i1] = nx;\n\t\t\ttargetNormals[i1 + 1] = ny;\n\t\t\ttargetNormals[i1 + 2] = nz;\n\t\t\ttargetTangents[i1] = tx;\n\t\t\ttargetTangents[i1 + 1] = ty;\n\t\t\ttargetTangents[i1 + 2] = tz;\n\n\t\t\tindex++;\n\t\t}\n\n\t\ttargetElements.setPositions(targetPositions);\n\t\ttargetElements.setNormals(targetNormals);\n\t\ttargetElements.setTangents(targetTangents);\n\t}\n\n\t/**\n\t * Converts a local hierarchical skeleton pose to a global pose\n\t * @param targetPose The SkeletonPose object that will contain the global pose.\n\t * @param skeleton The skeleton containing the joints, and as such, the hierarchical data to transform to global poses.\n\t */\n\tprivate localToGlobalPose(sourcePose:SkeletonPose, targetPose:SkeletonPose, skeleton:Skeleton):void\n\t{\n\t\tvar globalPoses:Array<JointPose> = targetPose.jointPoses;\n\t\tvar globalJointPose:JointPose;\n\t\tvar joints:Array<SkeletonJoint> = skeleton.joints;\n\t\tvar len:number = sourcePose.numJointPoses;\n\t\tvar jointPoses:Array<JointPose> = sourcePose.jointPoses;\n\t\tvar parentIndex:number;\n\t\tvar joint:SkeletonJoint;\n\t\tvar parentPose:JointPose;\n\t\tvar pose:JointPose;\n\t\tvar or:Quaternion;\n\t\tvar tr:Vector3D;\n\t\tvar t:Vector3D;\n\t\tvar q:Quaternion;\n\n\t\tvar x1:number, y1:number, z1:number, w1:number;\n\t\tvar x2:number, y2:number, z2:number, w2:number;\n\t\tvar x3:number, y3:number, z3:number;\n\n\t\t// :s\n\t\tif (globalPoses.length != len)\n\t\t\tglobalPoses.length = len;\n\n\t\tfor (var i:number = 0; i < len; ++i) {\n\t\t\tglobalJointPose = globalPoses[i];\n\n\t\t\tif (globalJointPose == null)\n\t\t\t\tglobalJointPose = globalPoses[i] = new JointPose();\n\n\t\t\tjoint = joints[i];\n\t\t\tparentIndex = joint.parentIndex;\n\t\t\tpose = jointPoses[i];\n\n\t\t\tq = globalJointPose.orientation;\n\t\t\tt = globalJointPose.translation;\n\n\t\t\tif (parentIndex < 0) {\n\t\t\t\ttr = pose.translation;\n\t\t\t\tor = pose.orientation;\n\t\t\t\tq.x = or.x;\n\t\t\t\tq.y = or.y;\n\t\t\t\tq.z = or.z;\n\t\t\t\tq.w = or.w;\n\t\t\t\tt.x = tr.x;\n\t\t\t\tt.y = tr.y;\n\t\t\t\tt.z = tr.z;\n\t\t\t} else {\n\t\t\t\t// append parent pose\n\t\t\t\tparentPose = globalPoses[parentIndex];\n\n\t\t\t\t// rotate point\n\t\t\t\tor = parentPose.orientation;\n\t\t\t\ttr = pose.translation;\n\t\t\t\tx2 = or.x;\n\t\t\t\ty2 = or.y;\n\t\t\t\tz2 = or.z;\n\t\t\t\tw2 = or.w;\n\t\t\t\tx3 = tr.x;\n\t\t\t\ty3 = tr.y;\n\t\t\t\tz3 = tr.z;\n\n\t\t\t\tw1 = -x2*x3 - y2*y3 - z2*z3;\n\t\t\t\tx1 = w2*x3 + y2*z3 - z2*y3;\n\t\t\t\ty1 = w2*y3 - x2*z3 + z2*x3;\n\t\t\t\tz1 = w2*z3 + x2*y3 - y2*x3;\n\n\t\t\t\t// append parent translation\n\t\t\t\ttr = parentPose.translation;\n\t\t\t\tt.x = -w1*x2 + x1*w2 - y1*z2 + z1*y2 + tr.x;\n\t\t\t\tt.y = -w1*y2 + x1*z2 + y1*w2 - z1*x2 + tr.y;\n\t\t\t\tt.z = -w1*z2 - x1*y2 + y1*x2 + z1*w2 + tr.z;\n\n\t\t\t\t// append parent orientation\n\t\t\t\tx1 = or.x;\n\t\t\t\ty1 = or.y;\n\t\t\t\tz1 = or.z;\n\t\t\t\tw1 = or.w;\n\t\t\t\tor = pose.orientation;\n\t\t\t\tx2 = or.x;\n\t\t\t\ty2 = or.y;\n\t\t\t\tz2 = or.z;\n\t\t\t\tw2 = or.w;\n\n\t\t\t\tq.w = w1*w2 - x1*x2 - y1*y2 - z1*z2;\n\t\t\t\tq.x = w1*x2 + x1*w2 + y1*z2 - z1*y2;\n\t\t\t\tq.y = w1*y2 - x1*z2 + y1*w2 + z1*x2;\n\t\t\t\tq.z = w1*z2 + x1*y2 - y1*x2 + z1*w2;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onTransitionComplete(event:AnimationStateEvent):void\n\t{\n\t\tif (event.type == AnimationStateEvent.TRANSITION_COMPLETE) {\n\t\t\tevent.animationNode.removeEventListener(AnimationStateEvent.TRANSITION_COMPLETE, this._onTransitionCompleteDelegate);\n\t\t\t//if this is the current active state transition, revert control to the active node\n\t\t\tif (this._pActiveState == event.animationState) {\n\t\t\t\tthis._pActiveNode = this._pAnimationSet.getAnimation(this._pActiveAnimationName);\n\t\t\t\tthis._pActiveState = this.getAnimationState(this._pActiveNode);\n\t\t\t\tthis._activeSkeletonState = <ISkeletonAnimationState> this._pActiveState;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onIndicesUpdate(event:ElementsEvent):void\n\t{\n\t\tvar elements:TriangleElements = <TriangleElements> event.target;\n\n\t\t(<TriangleElements> this._morphedElements[elements.id]).setIndices(elements.indices);\n\t}\n\n\tprivate onVerticesUpdate(event:ElementsEvent):void\n\t{\n\t\tvar elements:TriangleElements = <TriangleElements> event.target;\n\t\tvar morphGraphics:TriangleElements = <TriangleElements> this._morphedElements[elements.id];\n\n\t\tswitch(event.attributesView) {\n\t\t\tcase elements.uvs:\n\t\t\t\tmorphGraphics.setUVs(elements.uvs.get(elements.numVertices));\n\t\t\t\tbreak;\n\t\t\tcase elements.getCustomAtributes(\"secondaryUVs\"):\n\t\t\t\tmorphGraphics.setCustomAttributes(\"secondaryUVs\", elements.getCustomAtributes(\"secondaryUVs\").get(elements.numVertices));\n\t\t\t\tbreak;\n\t\t}\n\t}\n}",
    "import {IAnimationSet}\t\t\t\t\tfrom \"awayjs-display/lib/animators/IAnimationSet\";\n\nimport {AnimationSetBase}\t\t\t\t\tfrom \"../animators/AnimationSetBase\";\nimport {AnimationRegisterData}\t\t\tfrom \"../animators/data/AnimationRegisterData\";\nimport {VertexAnimationMode}\t\t\t\tfrom \"../animators/data/VertexAnimationMode\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../shaders/ShaderBase\";\nimport {ShaderRegisterElement}\t\t\tfrom \"../shaders/ShaderRegisterElement\";\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterData}\t\t\t\tfrom \"../shaders/ShaderRegisterData\";\n\n/**\n * The animation data set used by vertex-based animators, containing vertex animation state data.\n *\n * @see VertexAnimator\n */\nexport class VertexAnimationSet extends AnimationSetBase implements IAnimationSet\n{\n\tprivate _iAnimationRegisterData:AnimationRegisterData;\n\t\n\tprivate _numPoses:number;\n\tprivate _blendMode:string;\n\n\t/**\n\t * Returns the number of poses made available at once to the GPU animation code.\n\t */\n\tpublic get numPoses():number\n\t{\n\t\treturn this._numPoses;\n\t}\n\n\t/**\n\t * Returns the active blend mode of the vertex animator object.\n\t */\n\tpublic get blendMode():string\n\t{\n\t\treturn this._blendMode;\n\t}\n\n\t/**\n\t * Returns whether or not normal data is used in last set GPU pass of the vertex shader.\n\t */\n//\t\tpublic get useNormals():boolean\n//\t\t{\n//\t\t\treturn this._uploadNormals;\n//\t\t}\n\n\t/**\n\t * Creates a new <code>VertexAnimationSet</code> object.\n\t *\n\t * @param numPoses The number of poses made available at once to the GPU animation code.\n\t * @param blendMode Optional value for setting the animation mode of the vertex animator object.\n\t *\n\t * @see away3d.animators.data.VertexAnimationMode\n\t */\n\tconstructor(numPoses:number = 2, blendMode:string = \"absolute\")\n\t{\n\t\tsuper();\n\t\tthis._numPoses = numPoses;\n\t\tthis._blendMode = blendMode;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAGALVertexCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\t//grab animationRegisterData from the materialpassbase or create a new one if the first time\n\t\tthis._iAnimationRegisterData = shader.animationRegisterData;\n\n\t\tif (this._iAnimationRegisterData == null)\n\t\t\tthis._iAnimationRegisterData = shader.animationRegisterData = new AnimationRegisterData();\n\t\t\n\t\tif (this._blendMode == VertexAnimationMode.ABSOLUTE)\n\t\t\treturn this.getAbsoluteAGALCode(shader, registerCache, sharedRegisters);\n\t\telse\n\t\t\treturn this.getAdditiveAGALCode(shader, registerCache, sharedRegisters);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAGALFragmentCode(shader:ShaderBase, registerCache:ShaderRegisterCache, shadedTarget:ShaderRegisterElement):string\n\t{\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAGALUVCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"mov \" + sharedRegisters.uvTarget + \",\" + sharedRegisters.uvSource + \"\\n\";\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic doneAGALCode(shader:ShaderBase):void\n\t{\n\n\t}\n\n\t/**\n\t * Generates the vertex AGAL code for absolute blending.\n\t */\n\tprivate getAbsoluteAGALCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar temp1:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\tregisterCache.addVertexTempUsages(temp1, 1);\n\t\tvar temp2:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\tvar regs:Array<string> = new Array<string>(\".x\", \".y\", \".z\", \".w\");\n\t\tvar len:number = sharedRegisters.animatableAttributes.length;\n\t\tvar constantReg:ShaderRegisterElement = registerCache.getFreeVertexConstant();\n\t\tthis._iAnimationRegisterData.weightsIndex = constantReg.index;\n\t\tthis._iAnimationRegisterData.poseIndices = new Array<number>(this._numPoses);\n\t\tvar poseInput:ShaderRegisterElement;\n\t\tvar k:number = 0;\n\t\t\n\t\tif (len > 2)\n\t\t\tlen = 2;\n\t\t\n\t\tfor (var i:number = 0; i < len; ++i) {\n\t\t\tcode += \"mul \" + temp1 + \", \" + sharedRegisters.animatableAttributes[i] + \", \" + constantReg + regs[0] + \"\\n\";\n\t\t\n\t\t\tfor (var j:number = 1; j < this._numPoses; ++j) {\n\t\t\t\tposeInput = registerCache.getFreeVertexAttribute();\n\t\t\t\tthis._iAnimationRegisterData.poseIndices[k++] = poseInput.index;\n\t\t\t\tcode += \"mul \" + temp2 + \", \" + poseInput + \", \" + constantReg + regs[j] + \"\\n\";\n\t\t\n\t\t\t\tif (j < this._numPoses - 1) //TODO this is always the case, write better?\n\t\t\t\t\tcode += \"add \" + temp1 + \", \" + temp1 + \", \" + temp2 + \"\\n\";\n\t\t\t}\n\t\t\n\t\t\tcode += \"add \" + sharedRegisters.animationTargetRegisters[i] + \", \" + temp1 + \", \" + temp2 + \"\\n\";\n\t\t}\n\t\t\n\t\t// add code for bitangents if tangents are used\n\t\tif (shader.tangentDependencies > 0 || shader.outputsNormals) {\n\t\t\tcode += \"dp3 \" + temp1 + \".x, \" + sharedRegisters.animatableAttributes[2] + \", \" + sharedRegisters.animationTargetRegisters[1] + \"\\n\" +\n\t\t\t\t\"mul \" + temp1 + \", \" + sharedRegisters.animationTargetRegisters[1] + \", \" + temp1 + \".x\\n\" +\n\t\t\t\t\"sub \" + sharedRegisters.animationTargetRegisters[2] + \", \" + sharedRegisters.animationTargetRegisters[2] + \", \" + temp1 + \"\\n\";\n\t\t}\n\t\t//\n\t\t// // simply write attributes to targets, do not animate them\n\t\t// // projection will pick up on targets[0] to do the projection\n\t\t// var len:number = sharedRegisters.animatableAttributes.length;\n\t\t// for (var i:number = 0; i < len; ++i)\n\t\t// \tcode += \"mov \" + sharedRegisters.animationTargetRegisters[i] + \", \" + sharedRegisters.animatableAttributes[i] + \"\\n\";\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * Generates the vertex AGAL code for additive blending.\n\t */\n\tprivate getAdditiveAGALCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar len:number = sharedRegisters.animatableAttributes.length;\n\t\tvar regs:Array<string> = [\".x\", \".y\", \".z\", \".w\"];\n\t\tvar temp1:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\tvar constantReg:ShaderRegisterElement = registerCache.getFreeVertexConstant();\n\t\tthis._iAnimationRegisterData.weightsIndex = constantReg.index;\n\t\tthis._iAnimationRegisterData.poseIndices = new Array<number>(this._numPoses);\n\t\tvar poseInput:ShaderRegisterElement;\n\t\tvar k:number = 0;\n\n\t\tif (len > 2)\n\t\t\tlen = 2;\n\n\t\tcode += \"mov  \" + sharedRegisters.animationTargetRegisters[0] + \", \" + sharedRegisters.animatableAttributes[0] + \"\\n\";\n\t\tif (shader.normalDependencies > 0)\n\t\t\tcode += \"mov \" + sharedRegisters.animationTargetRegisters[1] + \", \" + sharedRegisters.animatableAttributes[1] + \"\\n\";\n\n\t\tfor (var i:number = 0; i < len; ++i) {\n\t\t\tfor (var j:number = 0; j < this._numPoses; ++j) {\n\t\t\t\tposeInput = registerCache.getFreeVertexAttribute();\n\t\t\t\tthis._iAnimationRegisterData.poseIndices[k++] = poseInput.index;\n\t\t\t\tcode += \"mul \" + temp1 + \", \" + poseInput + \", \" + constantReg + regs[j] + \"\\n\" +\n\t\t\t\t\t\"add \" + sharedRegisters.animationTargetRegisters[i] + \", \" + sharedRegisters.animationTargetRegisters[i] + \", \" + temp1 + \"\\n\";\n\t\t\t}\n\t\t}\n\n\t\tif (shader.tangentDependencies > 0 || shader.outputsNormals) {\n\t\t\tcode += \"dp3 \" + temp1 + \".x, \" + sharedRegisters.animatableAttributes[2] + \", \" + sharedRegisters.animationTargetRegisters[1] + \"\\n\" +\n\t\t\t\t\"mul \" + temp1 + \", \" + sharedRegisters.animationTargetRegisters[1] + \", \" + temp1 + \".x\\n\" +\n\t\t\t\t\"sub \" + sharedRegisters.animationTargetRegisters[2] + \", \" + sharedRegisters.animatableAttributes[2] + \", \" + temp1 + \"\\n\";\n\t\t}\n\n\t\treturn code;\n\t}\n}",
    "import {Graphics}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphics\";\nimport {ElementsBase}\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/ElementsBase\";\nimport {TriangleElements}\t\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\nimport {Graphic}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphic\";\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\n\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\n\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../animators/AnimatorBase\";\nimport {VertexAnimationSet}\t\t\t\tfrom \"../animators/VertexAnimationSet\";\nimport {AnimationRegisterData}\t\t\tfrom \"../animators/data/AnimationRegisterData\";\nimport {VertexAnimationMode}\t\t\t\tfrom \"../animators/data/VertexAnimationMode\";\nimport {IVertexAnimationState}\t\t\tfrom \"../animators/states/IVertexAnimationState\";\nimport {IAnimationTransition}\t\t\t\tfrom \"../animators/transitions/IAnimationTransition\";\nimport {GL_GraphicRenderable}\t\t\t\tfrom \"../renderables/GL_GraphicRenderable\";\nimport {GL_RenderableBase}\t\t\t\tfrom \"../renderables/GL_RenderableBase\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../shaders/ShaderBase\";\nimport {GL_ElementsBase}\t\t\t\t\tfrom \"../elements/GL_ElementsBase\";\n\n/**\n * Provides an interface for assigning vertex-based animation data sets to sprite-based entity objects\n * and controlling the various available states of animation through an interative playhead that can be\n * automatically updated or manually triggered.\n */\nexport class VertexAnimator extends AnimatorBase\n{\n\tprivate _vertexAnimationSet:VertexAnimationSet;\n\tprivate _poses:Array<Graphics> = new Array<Graphics>();\n\tprivate _weights:Float32Array = new Float32Array([1, 0, 0, 0]);\n\tprivate _activeVertexState:IVertexAnimationState;\n\n\t/**\n\t * Creates a new <code>VertexAnimator</code> object.\n\t *\n\t * @param vertexAnimationSet The animation data set containing the vertex animations used by the animator.\n\t */\n\tconstructor(vertexAnimationSet:VertexAnimationSet)\n\t{\n\t\tsuper(vertexAnimationSet);\n\n\t\tthis._vertexAnimationSet = vertexAnimationSet;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic clone():AnimatorBase\n\t{\n\t\treturn new VertexAnimator(this._vertexAnimationSet);\n\t}\n\n\t/**\n\t * Plays a sequence with a given name. If the sequence is not found, it may not be loaded yet, and it will retry every frame.\n\t * @param sequenceName The name of the clip to be played.\n\t */\n\tpublic play(name:string, transition:IAnimationTransition = null, offset:number = NaN):void\n\t{\n\t\tif (this._pActiveAnimationName == name)\n\t\t\treturn;\n\n\t\tthis._pActiveAnimationName = name;\n\n\t\t//TODO: implement transitions in vertex animator\n\n\t\tif (!this._pAnimationSet.hasAnimation(name))\n\t\t\tthrow new Error(\"Animation root node \" + name + \" not found!\");\n\n\t\tthis._pActiveNode = this._pAnimationSet.getAnimation(name);\n\n\t\tthis._pActiveState = this.getAnimationState(this._pActiveNode);\n\n\t\tif (this.updatePosition) {\n\t\t\t//update straight away to reset position deltas\n\t\t\tthis._pActiveState.update(this._pAbsoluteTime);\n\t\t\tthis._pActiveState.positionDelta;\n\t\t}\n\n\t\tthis._activeVertexState = <IVertexAnimationState> this._pActiveState;\n\n\t\tthis.start();\n\n\t\t//apply a time offset if specified\n\t\tif (!isNaN(offset))\n\t\t\tthis.reset(name, offset);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pUpdateDeltaTime(dt:number):void\n\t{\n\t\tsuper._pUpdateDeltaTime(dt);\n\n\t\tvar geometryFlag:boolean = false;\n\n\t\tif (this._poses[0] != this._activeVertexState.currentGraphics) {\n\t\t\tthis._poses[0] = this._activeVertexState.currentGraphics;\n\t\t\tgeometryFlag = true;\n\t\t}\n\n\t\tif (this._poses[1] != this._activeVertexState.nextGraphics)\n\t\t\tthis._poses[1] = this._activeVertexState.nextGraphics;\n\n\t\tthis._weights[0] = 1 - (this._weights[1] = this._activeVertexState.blendWeight);\n\n\t\tif (geometryFlag)\n\t\t\tthis.invalidateElements();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, stage:Stage, camera:Camera):void\n\t{\n\t\t// todo: add code for when running on cpu\n\t\t// this type of animation can only be SubSprite\n\t\tvar graphic:Graphic = <Graphic> (<GL_GraphicRenderable> renderable).graphic;\n\t\tvar elements:ElementsBase = graphic.elements;\n\n\t\t// if no poses defined, set temp data\n\t\tif (!this._poses.length) {\n\t\t\tthis.setNullPose(shader, elements, stage);\n\t\t\treturn;\n\t\t}\n\n\t\tvar animationRegisterData:AnimationRegisterData = shader.animationRegisterData;\n\t\tvar i:number;\n\t\tvar len:number = this._vertexAnimationSet.numPoses;\n\n\t\tshader.setVertexConstFromArray(animationRegisterData.weightsIndex, this._weights);\n\n\t\tif (this._vertexAnimationSet.blendMode == VertexAnimationMode.ABSOLUTE)\n\t\t\ti = 1;\n\t\telse\n\t\t\ti = 0;\n\n\t\tvar elementsGL:GL_ElementsBase;\n\t\tvar k:number = 0;\n\n\t\tfor (; i < len; ++i) {\n\t\t\telements = this._poses[i].getGraphicAt(graphic._iIndex).elements || graphic.elements;\n\n\t\t\telementsGL = <GL_ElementsBase> stage.getAbstraction(elements);\n\t\t\telementsGL._indexMappings = (<GL_ElementsBase> stage.getAbstraction(graphic.elements)).getIndexMappings();\n\n\t\t\tif (elements.isAsset(TriangleElements)) {\n\t\t\t\telementsGL.activateVertexBufferVO(animationRegisterData.poseIndices[k++], (<TriangleElements> elements).positions);\n\n\t\t\t\tif (shader.normalDependencies > 0)\n\t\t\t\t\telementsGL.activateVertexBufferVO(animationRegisterData.poseIndices[k++], (<TriangleElements> elements).normals);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate setNullPose(shader:ShaderBase, elements:ElementsBase, stage:Stage):void\n\t{\n\t\tvar animationRegisterData:AnimationRegisterData = shader.animationRegisterData;\n\t\t\n\t\tshader.setVertexConstFromArray(animationRegisterData.weightsIndex, this._weights);\n\n\t\tvar elementsGL:GL_ElementsBase = (<GL_ElementsBase> stage.getAbstraction(elements));\n\t\tvar k:number = 0;\n\t\t\n\t\tif (this._vertexAnimationSet.blendMode == VertexAnimationMode.ABSOLUTE) {\n\t\t\tvar len:number = this._vertexAnimationSet.numPoses;\n\t\t\tfor (var i:number = 1; i < len; ++i) {\n\t\t\t\tif (elements.isAsset(TriangleElements)) {\n\t\t\t\t\telementsGL.activateVertexBufferVO(animationRegisterData.poseIndices[k++], (<TriangleElements> elements).positions);\n\n\t\t\t\t\tif (shader.normalDependencies > 0)\n\t\t\t\t\t\telementsGL.activateVertexBufferVO(animationRegisterData.poseIndices[k++], (<TriangleElements> elements).normals);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// todo: set temp data for additive?\n\t}\n\n\t/**\n\t * Verifies if the animation will be used on cpu. Needs to be true for all passes for a material to be able to use it on gpu.\n\t * Needs to be called if gpu code is potentially required.\n\t */\n\tpublic testGPUCompatibility(shader:ShaderBase):void\n\t{\n\t}\n\n\tpublic getRenderableElements(renderable:GL_GraphicRenderable, sourceElements:TriangleElements):TriangleElements\n\t{\n\t\tif (this._vertexAnimationSet.blendMode == VertexAnimationMode.ABSOLUTE && this._poses.length)\n\t\t\treturn <TriangleElements> this._poses[0].getGraphicAt(renderable.graphic._iIndex).elements || sourceElements;\n\n\t\t//nothing to do here\n\t\treturn sourceElements;\n\t}\n}",
    "import {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\nimport {IContextGL}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/IContextGL\";\nimport {IVertexBuffer}\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/IVertexBuffer\";\n\nimport {ParticleAnimationData}\t\t\tfrom \"../../animators/data/ParticleAnimationData\";\n\n/**\n * ...\n */\nexport class AnimationElements\n{\n\tpublic static SUBGEOM_ID_COUNT:number = 0;\n\n\tpublic _pVertexData:Array<number>;\n\n\tpublic _pVertexBuffer:Array<IVertexBuffer> = new Array<IVertexBuffer>(8);\n\tpublic _pBufferContext:Array<IContextGL> = new Array<IContextGL>(8);\n\tpublic _pBufferDirty:Array<boolean> = new Array<boolean>(8);\n\n\tprivate _numVertices:number;\n\n\tprivate _totalLenOfOneVertex:number;\n\n\tpublic numProcessedVertices:number = 0;\n\n\tpublic previousTime:number = Number.NEGATIVE_INFINITY;\n\n\tpublic animationParticles:Array<ParticleAnimationData> = new Array<ParticleAnimationData>();\n\n\t/**\n\t * An id for this animation subgeometry, used to identify animation subgeometries when using animation sets.\n\t *\n\t * @private\n\t */\n\tpublic _iUniqueId:number;//Arcane\n\n\tconstructor()\n\t{\n\t\tfor (var i:number = 0; i < 8; i++)\n\t\t\tthis._pBufferDirty[i] = true;\n\n\t\tthis._iUniqueId = AnimationElements.SUBGEOM_ID_COUNT++;\n\t}\n\n\tpublic createVertexData(numVertices:number, totalLenOfOneVertex:number):void\n\t{\n\t\tthis._numVertices = numVertices;\n\t\tthis._totalLenOfOneVertex = totalLenOfOneVertex;\n\t\tthis._pVertexData = new Array<number>(numVertices*totalLenOfOneVertex);\n\t}\n\n\tpublic activateVertexBuffer(index:number, bufferOffset:number, stage:Stage, format:number):void\n\t{\n\t\tvar contextIndex:number = stage.stageIndex;\n\t\tvar context:IContextGL = <IContextGL> stage.context;\n\n\t\tvar buffer:IVertexBuffer = this._pVertexBuffer[contextIndex];\n\t\tif (!buffer || this._pBufferContext[contextIndex] != context) {\n\t\t\tbuffer = this._pVertexBuffer[contextIndex] = context.createVertexBuffer(this._numVertices, this._totalLenOfOneVertex*4);\n\t\t\tthis._pBufferContext[contextIndex] = context;\n\t\t\tthis._pBufferDirty[contextIndex] = true;\n\t\t}\n\t\tif (this._pBufferDirty[contextIndex]) {\n\t\t\tbuffer.uploadFromArray(this._pVertexData, 0, this._numVertices);\n\t\t\tthis._pBufferDirty[contextIndex] = false;\n\t\t}\n\t\tcontext.setVertexBufferAt(index, buffer, bufferOffset*4, format);\n\t}\n\n\tpublic dispose():void\n\t{\n\t\twhile (this._pVertexBuffer.length) {\n\t\t\tvar vertexBuffer:IVertexBuffer = this._pVertexBuffer.pop()\n\n\t\t\tif (vertexBuffer)\n\t\t\t\tvertexBuffer.dispose();\n\t\t}\n\t}\n\n\tpublic invalidateBuffer():void\n\t{\n\t\tfor (var i:number = 0; i < 8; i++)\n\t\t\tthis._pBufferDirty[i] = true;\n\t}\n\n\tpublic get vertexData():Array<number>\n\t{\n\t\treturn this._pVertexData;\n\t}\n\n\tpublic get numVertices():number\n\t{\n\t\treturn this._numVertices;\n\t}\n\n\tpublic get totalLenOfOneVertex():number\n\t{\n\t\treturn this._totalLenOfOneVertex;\n\t}\n}",
    "import {Matrix3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\n\nimport {AnimationNodeBase}\t\t\tfrom \"awayjs-display/lib/animators/nodes/AnimationNodeBase\";\n\nimport {ShaderRegisterCache}\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterData}\t\t\tfrom \"../../shaders/ShaderRegisterData\";\nimport {ShaderRegisterElement}\t\tfrom \"../../shaders/ShaderRegisterElement\";\n\n\n/**\n * ...\n */\nexport class AnimationRegisterData\n{\n\t//vertex animation data\n\tpublic weightsIndex:number;\n\tpublic poseIndices:Array<number>;\n\t\n\t//vertex\n\tpublic positionAttribute:ShaderRegisterElement;\n\tpublic uvAttribute:ShaderRegisterElement;\n\tpublic positionTarget:ShaderRegisterElement;\n\tpublic scaleAndRotateTarget:ShaderRegisterElement;\n\tpublic velocityTarget:ShaderRegisterElement;\n\tpublic vertexTime:ShaderRegisterElement;\n\tpublic vertexLife:ShaderRegisterElement;\n\tpublic vertexZeroConst:ShaderRegisterElement;\n\tpublic vertexOneConst:ShaderRegisterElement;\n\tpublic vertexTwoConst:ShaderRegisterElement;\n\tpublic uvTarget:ShaderRegisterElement;\n\tpublic colorAddTarget:ShaderRegisterElement;\n\tpublic colorMulTarget:ShaderRegisterElement;\n\t//vary\n\tpublic colorAddVary:ShaderRegisterElement;\n\tpublic colorMulVary:ShaderRegisterElement;\n\n\t//fragment\n\tpublic uvVar:ShaderRegisterElement;\n\n\t//these are targets only need to rotate ( normal and tangent )\n\tpublic rotationRegisters:Array<ShaderRegisterElement>;\n\n\tprivate indexDictionary:Object = new Object();\n\n\tconstructor()\n\t{\n\t}\n\n\tpublic reset(registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData, needVelocity:boolean):void\n\t{\n\t\tthis.rotationRegisters = new Array<ShaderRegisterElement>();\n\t\tthis.positionAttribute = sharedRegisters.animatableAttributes[0];\n\t\tthis.scaleAndRotateTarget = sharedRegisters.animationTargetRegisters[0];\n\n\t\tfor (var i:number = 1; i < sharedRegisters.animationTargetRegisters.length; i++)\n\t\t\tthis.rotationRegisters.push(sharedRegisters.animationTargetRegisters[i]);\n\t\t\n\t\t//allot const register\n\t\tthis.vertexZeroConst = registerCache.getFreeVertexConstant();\n\t\tthis.vertexZeroConst = new ShaderRegisterElement(this.vertexZeroConst.regName, this.vertexZeroConst.index, 0);\n\t\tthis.vertexOneConst = new ShaderRegisterElement(this.vertexZeroConst.regName, this.vertexZeroConst.index, 1);\n\t\tthis.vertexTwoConst = new ShaderRegisterElement(this.vertexZeroConst.regName, this.vertexZeroConst.index, 2);\n\n\t\t//allot temp register\n\t\tthis.positionTarget = registerCache.getFreeVertexVectorTemp();\n\t\tregisterCache.addVertexTempUsages(this.positionTarget, 1);\n\t\tthis.positionTarget = new ShaderRegisterElement(this.positionTarget.regName, this.positionTarget.index);\n\n\t\tif (needVelocity) {\n\t\t\tthis.velocityTarget = registerCache.getFreeVertexVectorTemp();\n\t\t\tregisterCache.addVertexTempUsages(this.velocityTarget, 1);\n\t\t\tthis.velocityTarget = new ShaderRegisterElement(this.velocityTarget.regName, this.velocityTarget.index);\n\t\t\tthis.vertexTime = new ShaderRegisterElement(this.velocityTarget.regName, this.velocityTarget.index, 3);\n\t\t\tthis.vertexLife = new ShaderRegisterElement(this.positionTarget.regName, this.positionTarget.index, 3);\n\t\t} else {\n\t\t\tvar tempTime:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\t\tregisterCache.addVertexTempUsages(tempTime, 1);\n\t\t\tthis.vertexTime = new ShaderRegisterElement(tempTime.regName, tempTime.index, 0);\n\t\t\tthis.vertexLife = new ShaderRegisterElement(tempTime.regName, tempTime.index, 1);\n\t\t}\n\n\t}\n\n\tpublic setUVSourceAndTarget(sharedRegisters:ShaderRegisterData):void\n\t{\n\t\tthis.uvVar = sharedRegisters.uvTarget;\n\t\tthis.uvAttribute = sharedRegisters.uvSource;\n\t\t//uv action is processed after normal actions,so use offsetTarget as uvTarget\n\t\tthis.uvTarget = new ShaderRegisterElement(this.positionTarget.regName, this.positionTarget.index);\n\t}\n\n\tpublic setRegisterIndex(node:AnimationNodeBase, parameterIndex:number, registerIndex:number):void\n\t{\n\t\t//8 should be enough for any node.\n\t\tvar t:Array<number> = this.indexDictionary[node.id];\n\n\t\tif (t == null)\n\t\t\tt = this.indexDictionary[node.id] = new Array<number>(8);\n\n\t\tt[parameterIndex] = registerIndex;\n\t}\n\n\tpublic getRegisterIndex(node:AnimationNodeBase, parameterIndex:number):number\n\t{\n\t\treturn (<Array<number>> this.indexDictionary[node.id])[parameterIndex];\n\t}\n}",
    "import {ColorTransform}\t\t\t\t\tfrom \"awayjs-core/lib/geom/ColorTransform\";\n\nexport class ColorSegmentPoint\n{\n\tprivate _color:ColorTransform;\n\tprivate _life:number;\n\n\tconstructor(life:number, color:ColorTransform)\n\t{\n\t\t//0<life<1\n\t\tif (life <= 0 || life >= 1)\n\t\t\tthrow(new Error(\"life exceeds range (0,1)\"));\n\t\tthis._life = life;\n\t\tthis._color = color;\n\t}\n\n\tpublic get color():ColorTransform\n\t{\n\t\treturn this._color;\n\t}\n\n\tpublic get life():number\n\t{\n\t\treturn this._life;\n\t}\n\n}",
    "import {Matrix3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\nimport {Quaternion}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Quaternion\";\nimport {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\n/**\n * Contains transformation data for a skeleton joint, used for skeleton animation.\n *\n * @see away.animation.Skeleton\n * @see away.animation.SkeletonJoint\n *\n * todo: support (uniform) scale\n */\nexport class JointPose\n{\n\t/**\n\t * The name of the joint to which the pose is associated\n\t */\n\tpublic name:string; // intention is that this should be used only at load time, not in the main loop\n\n\t/**\n\t * The rotation of the pose stored as a quaternion\n\t */\n\tpublic orientation:Quaternion = new Quaternion();\n\n\t/**\n\t * The translation of the pose\n\t */\n\tpublic translation:Vector3D = new Vector3D();\n\n\tconstructor()\n\t{\n\n\t}\n\n\t/**\n\t * Converts the transformation to a Matrix3D representation.\n\t *\n\t * @param target An optional target matrix to store the transformation. If not provided, it will create a new instance.\n\t * @return The transformation matrix of the pose.\n\t */\n\tpublic toMatrix3D(target:Matrix3D = null):Matrix3D\n\t{\n\t\tif (target == null)\n\t\t\ttarget = new Matrix3D();\n\n\t\tthis.orientation.toMatrix3D(target);\n\t\ttarget.appendTranslation(this.translation.x, this.translation.y, this.translation.z);\n\t\treturn target;\n\t}\n\n\t/**\n\t * Copies the transformation data from a source pose object into the existing pose object.\n\t *\n\t * @param pose The source pose to copy from.\n\t */\n\tpublic copyFrom(pose:JointPose):void\n\t{\n\t\tvar or:Quaternion = pose.orientation;\n\t\tvar tr:Vector3D = pose.translation;\n\t\tthis.orientation.x = or.x;\n\t\tthis.orientation.y = or.y;\n\t\tthis.orientation.z = or.z;\n\t\tthis.orientation.w = or.w;\n\t\tthis.translation.x = tr.x;\n\t\tthis.translation.y = tr.y;\n\t\tthis.translation.z = tr.z;\n\t}\n}",
    "import {ParticleData}\t\t\t\t\t\tfrom \"awayjs-display/lib/animators/data/ParticleData\";\n\n/**\n * ...\n */\nexport class ParticleAnimationData\n{\n\tpublic index:number;\n\tpublic startTime:number;\n\tpublic totalTime:number;\n\tpublic duration:number;\n\tpublic delay:number;\n\tpublic startVertexIndex:number;\n\tpublic numVertices:number;\n\n\tconstructor(index:number, startTime:number, duration:number, delay:number, particle:ParticleData)\n\t{\n\t\tthis.index = index;\n\t\tthis.startTime = startTime;\n\t\tthis.totalTime = duration + delay;\n\t\tthis.duration = duration;\n\t\tthis.delay = delay;\n\t\tthis.startVertexIndex = particle.startVertexIndex;\n\t\tthis.numVertices = particle.numVertices;\n\t}\n}",
    "/**\n * Options for setting the properties mode of a particle animation node.\n */\nexport class ParticlePropertiesMode\n{\n\t/**\n\t * Mode that defines the particle node as acting on global properties (ie. the properties set in the node constructor or the corresponding animation state).\n\t */\n\tpublic static GLOBAL:number = 0;\n\n\t/**\n\t * Mode that defines the particle node as acting on local static properties (ie. the properties of particles set in the initialising on the animation set).\n\t */\n\tpublic static LOCAL_STATIC:number = 1;\n\n\t/**\n\t * Mode that defines the particle node as acting on local dynamic properties (ie. the properties of the particles set in the corresponding animation state).\n\t */\n\tpublic static LOCAL_DYNAMIC:number = 2;\n}",
    "/**\n * Dynamic class for holding the local properties of a particle, used for processing the static properties\n * of particles in the particle animation set before beginning upload to the GPU.\n */\nexport class ParticleProperties\n{\n\t/**\n\t * The index of the current particle being set.\n\t */\n\tpublic index:number;\n\n\t/**\n\t * The total number of particles being processed by the particle animation set.\n\t */\n\tpublic total:number;\n\n\t/**\n\t * The start time of the particle.\n\t */\n\tpublic startTime:number;\n\n\t/**\n\t * The duration of the particle, an optional value used when the particle aniamtion set settings for <code>useDuration</code> are enabled in the constructor.\n\t *\n\t * @see away.animators.ParticleAnimationSet\n\t */\n\tpublic duration:number;\n\n\t/**\n\t * The delay between cycles of the particle, an optional value used when the particle aniamtion set settings for <code>useLooping</code> and  <code>useDelay</code> are enabled in the constructor.\n\t *\n\t * @see away.animators.ParticleAnimationSet\n\t */\n\tpublic delay:number;\n}",
    "/**\n * A value obect representing a single joint in a skeleton object.\n *\n * @see away.animators.Skeleton\n */\nexport class SkeletonJoint\n{\n\t/**\n\t * The index of the parent joint in the skeleton's joints vector.\n\t *\n\t * @see away.animators.Skeleton#joints\n\t */\n\tpublic parentIndex:number = -1;\n\n\t/**\n\t * The name of the joint\n\t */\n\tpublic name:string; // intention is that this should be used only at load time, not in the main loop\n\n\t/**\n\t * The inverse bind pose matrix, as raw data, used to transform vertices to bind joint space in preparation for transformation using the joint matrix.\n\t */\n\tpublic inverseBindPose:Float32Array;\n\n\t/**\n\t * Creates a new <code>SkeletonJoint</code> object\n\t */\n\tconstructor()\n\t{\n\t}\n}",
    "import {IAsset}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/library/IAsset\";\nimport {AssetBase}\t\t\t\t\t\tfrom \"awayjs-core/lib/library/AssetBase\";\n\nimport {JointPose}\t\t\t\t\t\tfrom \"../../animators/data/JointPose\";\n\n\n/**\n * A collection of pose objects, determining the pose for an entire skeleton.\n * The <code>jointPoses</code> vector object corresponds to a skeleton's <code>joints</code> vector object, however, there is no\n * reference to a skeleton's instance, since several skeletons can be influenced by the same pose (eg: animation\n * clips are added to any animator with a valid skeleton)\n *\n * @see away.animators.Skeleton\n * @see away.animators.JointPose\n */\nexport class SkeletonPose extends AssetBase implements IAsset\n{\n\tpublic static assetType:string = \"[asset SkeletonPose]\";\n\n\t/**\n\t * A flat list of pose objects that comprise the skeleton pose. The pose indices correspond to the target skeleton's joint indices.\n\t *\n\t * @see away.animators.Skeleton#joints\n\t */\n\tpublic jointPoses:Array<JointPose>;\n\n\t/**\n\t * The total number of joint poses in the skeleton pose.\n\t */\n\tpublic get numJointPoses():number\n\t{\n\t\treturn this.jointPoses.length;\n\t}\n\n\t/**\n\t * Creates a new <code>SkeletonPose</code> object.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\n\t\tthis.jointPoses = new Array<JointPose>();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get assetType():string\n\t{\n\t\treturn SkeletonPose.assetType;\n\t}\n\n\t/**\n\t * Returns the joint pose object with the given joint name, otherwise returns a null object.\n\t *\n\t * @param jointName The name of the joint object whose pose is to be found.\n\t * @return The pose object with the given joint name.\n\t */\n\tpublic jointPoseFromName(jointName:string):JointPose\n\t{\n\t\tvar jointPoseIndex:number = this.jointPoseIndexFromName(jointName);\n\t\tif (jointPoseIndex != -1)\n\t\t\treturn this.jointPoses[jointPoseIndex]; else\n\t\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the pose index, given the joint name. -1 is returned if the joint name is not found in the pose.\n\t *\n\t * @param The name of the joint object whose pose is to be found.\n\t * @return The index of the pose object in the jointPoses Array\n\t *\n\t * @see #jointPoses\n\t */\n\tpublic jointPoseIndexFromName(jointName:string):number\n\t{\n\t\t// this is implemented as a linear search, rather than a possibly\n\t\t// more optimal method (Dictionary lookup, for example) because:\n\t\t// a) it is assumed that it will be called once for each joint\n\t\t// b) it is assumed that it will be called only during load, and not during main loop\n\t\t// c) maintaining a dictionary (for safety) would dictate an interface to access JointPoses,\n\t\t//    rather than direct array access.  this would be sub-optimal.\n\t\tvar jointPoseIndex:number;\n\t\tvar jointPose:JointPose;\n\t\tfor (var i:number; i < this.jointPoses.length; i++) {\n\t\t\tjointPose = this.jointPoses[i];\n\t\t\tif (jointPose.name == jointName)\n\t\t\t\treturn jointPoseIndex;\n\t\t\tjointPoseIndex++;\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\t/**\n\t * Creates a copy of the <code>SkeletonPose</code> object, with a dulpicate of its component joint poses.\n\t *\n\t * @return SkeletonPose\n\t */\n\tpublic clone():SkeletonPose\n\t{\n\t\tvar clone:SkeletonPose = new SkeletonPose();\n\t\tvar numJointPoses:number = this.jointPoses.length;\n\t\tfor (var i:number = 0; i < numJointPoses; i++) {\n\t\t\tvar cloneJointPose:JointPose = new JointPose();\n\t\t\tvar thisJointPose:JointPose = this.jointPoses[i];\n\t\t\tcloneJointPose.name = thisJointPose.name;\n\t\t\tcloneJointPose.copyFrom(thisJointPose);\n\t\t\tclone.jointPoses[i] = cloneJointPose;\n\t\t}\n\t\treturn clone;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose():void\n\t{\n\t\tthis.jointPoses.length = 0;\n\t}\n}",
    "import {SkeletonJoint}\t\t\t\t\tfrom \"../../animators/data/SkeletonJoint\";\n\nimport {IAsset}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/library/IAsset\";\nimport {AssetBase}\t\t\t\t\t\tfrom \"awayjs-core/lib/library/AssetBase\";\n\n/**\n * A Skeleton object is a hierarchical grouping of joint objects that can be used for skeletal animation.\n *\n * @see away.animators.SkeletonJoint\n */\nexport class Skeleton extends AssetBase implements IAsset\n{\n\tpublic static assetType:string = \"[asset Skeleton]\";\n\n\t/**\n\t * A flat list of joint objects that comprise the skeleton. Every joint except for the root has a parentIndex\n\t * property that is an index into this list.\n\t * A child joint should always have a higher index than its parent.\n\t */\n\tpublic joints:Array<SkeletonJoint>;\n\n\t/**\n\t * The total number of joints in the skeleton.\n\t */\n\tpublic get numJoints():number\n\t{\n\t\treturn this.joints.length;\n\t}\n\n\t/**\n\t * Creates a new <code>Skeleton</code> object\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\n\t\t// in the long run, it might be a better idea to not store Joint objects, but keep all data in Vectors, that we can upload easily?\n\t\tthis.joints = new Array<SkeletonJoint>();\n\t}\n\n\t/**\n\t * Returns the joint object in the skeleton with the given name, otherwise returns a null object.\n\t *\n\t * @param jointName The name of the joint object to be found.\n\t * @return The joint object with the given name.\n\t *\n\t * @see #joints\n\t */\n\tpublic jointFromName(jointName:string):SkeletonJoint\n\t{\n\t\tvar jointIndex:number = this.jointIndexFromName(jointName);\n\t\tif (jointIndex != -1)\n\t\t\treturn this.joints[jointIndex]; else\n\t\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the joint index, given the joint name. -1 is returned if the joint name is not found.\n\t *\n\t * @param jointName The name of the joint object to be found.\n\t * @return The index of the joint object in the joints Array\n\t *\n\t * @see #joints\n\t */\n\tpublic jointIndexFromName(jointName:string):number\n\t{\n\t\t// this is implemented as a linear search, rather than a possibly\n\t\t// more optimal method (Dictionary lookup, for example) because:\n\t\t// a) it is assumed that it will be called once for each joint\n\t\t// b) it is assumed that it will be called only during load, and not during main loop\n\t\t// c) maintaining a dictionary (for safety) would dictate an interface to access SkeletonJoints,\n\t\t//    rather than direct array access.  this would be sub-optimal.\n\t\tvar jointIndex:number;\n\t\tvar joint:SkeletonJoint;\n\t\tfor (var i:number; i < this.joints.length; i++) {\n\t\t\tjoint = this.joints[i];\n\t\t\tif (joint.name == jointName)\n\t\t\t\treturn jointIndex;\n\t\t\tjointIndex++;\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose():void\n\t{\n\t\tthis.joints.length = 0;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get assetType():string\n\t{\n\t\treturn Skeleton.assetType;\n\t}\n}",
    "/**\n * Options for setting the animation mode of a vertex animator object.\n *\n * @see away.animators.VertexAnimator\n */\nexport class VertexAnimationMode\n{\n\t/**\n\t * Animation mode that adds all outputs from active vertex animation state to form the current vertex animation pose.\n\t */\n\tpublic static ADDITIVE:string = \"additive\";\n\n\t/**\n\t * Animation mode that picks the output from a single vertex animation state to form the current vertex animation pose.\n\t */\n\tpublic static ABSOLUTE:string = \"absolute\";\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {AnimationNodeBase}\t\t\t\tfrom \"awayjs-display/lib/animators/nodes/AnimationNodeBase\";\n\n/**\n * Provides an abstract base class for nodes with time-based animation data in an animation blend tree.\n */\nexport class AnimationClipNodeBase extends AnimationNodeBase\n{\n\tpublic _pLooping:boolean = true;\n\tpublic _pTotalDuration:number = 0;\n\tpublic _pLastFrame:number;\n\n\tpublic _pStitchDirty:boolean = true;\n\tpublic _pStitchFinalFrame:boolean = false;\n\tpublic _pNumFrames:number = 0;\n\n\tpublic _pDurations:Array<number> = new Array<number>();\n\t/*uint*/\n\tpublic _pTotalDelta:Vector3D = new Vector3D();\n\n\tpublic fixedFrameRate:boolean = true;\n\n\t/**\n\t * Determines whether the contents of the animation node have looping characteristics enabled.\n\t */\n\tpublic get looping():boolean\n\t{\n\t\treturn this._pLooping;\n\t}\n\n\tpublic set looping(value:boolean)\n\t{\n\t\tif (this._pLooping == value)\n\t\t\treturn;\n\n\t\tthis._pLooping = value;\n\n\t\tthis._pStitchDirty = true;\n\t}\n\n\t/**\n\t * Defines if looping content blends the final frame of animation data with the first (true) or works on the\n\t * assumption that both first and last frames are identical (false). Defaults to false.\n\t */\n\tpublic get stitchFinalFrame():boolean\n\t{\n\t\treturn this._pStitchFinalFrame;\n\t}\n\n\tpublic set stitchFinalFrame(value:boolean)\n\t{\n\t\tif (this._pStitchFinalFrame == value)\n\t\t\treturn;\n\n\t\tthis._pStitchFinalFrame = value;\n\n\t\tthis._pStitchDirty = true;\n\t}\n\n\tpublic get totalDuration():number\n\t{\n\t\tif (this._pStitchDirty)\n\t\t\tthis._pUpdateStitch();\n\n\t\treturn this._pTotalDuration;\n\t}\n\n\tpublic get totalDelta():Vector3D\n\t{\n\t\tif (this._pStitchDirty)\n\t\t\tthis._pUpdateStitch();\n\n\t\treturn this._pTotalDelta;\n\t}\n\n\tpublic get lastFrame():number\n\t{\n\t\tif (this._pStitchDirty)\n\t\t\tthis._pUpdateStitch();\n\n\t\treturn this._pLastFrame;\n\t}\n\n\t/**\n\t * Returns a vector of time values representing the duration (in milliseconds) of each animation frame in the clip.\n\t */\n\tpublic get durations():Array<number>\n\t{\n\t\treturn this._pDurations;\n\t}\n\n\t/**\n\t * Creates a new <code>AnimationClipNodeBase</code> object.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\t/**\n\t * Updates the node's final frame stitch state.\n\t *\n\t * @see #stitchFinalFrame\n\t */\n\tpublic _pUpdateStitch():void\n\t{\n\t\tthis._pStitchDirty = false;\n\n\t\tthis._pLastFrame = (this._pStitchFinalFrame)? this._pNumFrames : this._pNumFrames - 1;\n\n\t\tthis._pTotalDuration = 0;\n\t\tthis._pTotalDelta.x = 0;\n\t\tthis._pTotalDelta.y = 0;\n\t\tthis._pTotalDelta.z = 0;\n\t}\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {ParticleProperties}\t\t\t\tfrom \"../../animators/data/ParticleProperties\";\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\nimport {ParticleAccelerationState}\t\tfrom \"../../animators/states/ParticleAccelerationState\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\n\n/**\n * A particle animation node used to apply a constant acceleration vector to the motion of a particle.\n */\nexport class ParticleAccelerationNode extends ParticleNodeBase\n{\n\t/** @private */\n\tpublic _acceleration:Vector3D;\n\n\t/**\n\t * Reference for acceleration node properties on a single particle (when in local property mode).\n\t * Expects a <code>Vector3D</code> object representing the direction of acceleration on the particle.\n\t */\n\tpublic static ACCELERATION_VECTOR3D:string = \"AccelerationVector3D\";\n\n\t/**\n\t * Creates a new <code>ParticleAccelerationNode</code>\n\t *\n\t * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\n\t * @param    [optional] acceleration    Defines the default acceleration vector of the node, used when in global mode.\n\t */\n\tconstructor(mode:number, acceleration:Vector3D = null)\n\t{\n\t\tsuper(\"ParticleAcceleration\", mode, 3);\n\n\t\tthis._pStateClass = ParticleAccelerationState;\n\n\t\tthis._acceleration = acceleration || new Vector3D();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAGALVertexCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\n\t{\n\t\tvar accelerationValue:ShaderRegisterElement = (this._pMode == ParticlePropertiesMode.GLOBAL)? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\n\t\tanimationRegisterData.setRegisterIndex(this, ParticleAccelerationState.ACCELERATION_INDEX, accelerationValue.index);\n\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\tregisterCache.addVertexTempUsages(temp, 1);\n\n\t\tvar code:string = \"mul \" + temp + \",\" + animationRegisterData.vertexTime + \",\" + accelerationValue + \"\\n\";\n\n\t\tif (animationSet.needVelocity) {\n\t\t\tvar temp2:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\t\tcode += \"mul \" + temp2 + \",\" + temp + \",\" + animationRegisterData.vertexTwoConst + \"\\n\";\n\t\t\tcode += \"add \" + animationRegisterData.velocityTarget + \".xyz,\" + temp2 + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz\\n\";\n\t\t}\n\t\tregisterCache.removeVertexTempUsage(temp);\n\n\t\tcode += \"mul \" + temp + \",\" + temp + \",\" + animationRegisterData.vertexTime + \"\\n\";\n\t\tcode += \"add \" + animationRegisterData.positionTarget + \".xyz,\" + temp + \",\" + animationRegisterData.positionTarget + \".xyz\\n\";\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAnimationState(animator:AnimatorBase):ParticleAccelerationState\n\t{\n\t\treturn <ParticleAccelerationState> animator.getAnimationState(this);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGeneratePropertyOfOneParticle(param:ParticleProperties):void\n\t{\n\t\tvar tempAcceleration:Vector3D = param[ParticleAccelerationNode.ACCELERATION_VECTOR3D];\n\t\tif (!tempAcceleration)\n\t\t\tthrow new Error(\"there is no \" + ParticleAccelerationNode.ACCELERATION_VECTOR3D + \" in param!\");\n\n\t\tthis._pOneData[0] = tempAcceleration.x/2;\n\t\tthis._pOneData[1] = tempAcceleration.y/2;\n\t\tthis._pOneData[2] = tempAcceleration.z/2;\n\t}\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {ParticleProperties}\t\t\t\tfrom \"../../animators/data/ParticleProperties\";\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\nimport {ParticleBezierCurveState}\t\t\tfrom \"../../animators/states/ParticleBezierCurveState\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\n/**\n * A particle animation node used to control the position of a particle over time along a bezier curve.\n */\nexport class ParticleBezierCurveNode extends ParticleNodeBase\n{\n\t/** @private */\n\tpublic _iControlPoint:Vector3D;\n\t/** @private */\n\tpublic _iEndPoint:Vector3D;\n\n\t/**\n\t * Reference for bezier curve node properties on a single particle (when in local property mode).\n\t * Expects a <code>Vector3D</code> object representing the control point position (0, 1, 2) of the curve.\n\t */\n\tpublic static BEZIER_CONTROL_VECTOR3D:string = \"BezierControlVector3D\";\n\n\t/**\n\t * Reference for bezier curve node properties on a single particle (when in local property mode).\n\t * Expects a <code>Vector3D</code> object representing the end point position (0, 1, 2) of the curve.\n\t */\n\tpublic static BEZIER_END_VECTOR3D:string = \"BezierEndVector3D\";\n\n\t/**\n\t * Creates a new <code>ParticleBezierCurveNode</code>\n\t *\n\t * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\n\t * @param    [optional] controlPoint    Defines the default control point of the node, used when in global mode.\n\t * @param    [optional] endPoint        Defines the default end point of the node, used when in global mode.\n\t */\n\tconstructor(mode:number, controlPoint:Vector3D = null, endPoint:Vector3D = null)\n\t{\n\t\tsuper(\"ParticleBezierCurve\", mode, 6);\n\n\t\tthis._pStateClass = ParticleBezierCurveState;\n\n\t\tthis._iControlPoint = controlPoint || new Vector3D();\n\t\tthis._iEndPoint = endPoint || new Vector3D();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAGALVertexCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\n\t{\n\t\tvar controlValue:ShaderRegisterElement = (this._pMode == ParticlePropertiesMode.GLOBAL)? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\n\t\tanimationRegisterData.setRegisterIndex(this, ParticleBezierCurveState.BEZIER_CONTROL_INDEX, controlValue.index);\n\n\t\tvar endValue:ShaderRegisterElement = (this._pMode == ParticlePropertiesMode.GLOBAL)? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\n\t\tanimationRegisterData.setRegisterIndex(this, ParticleBezierCurveState.BEZIER_END_INDEX, endValue.index);\n\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\tvar rev_time:ShaderRegisterElement = new ShaderRegisterElement(temp.regName, temp.index, 0);\n\t\tvar time_2:ShaderRegisterElement = new ShaderRegisterElement(temp.regName, temp.index, 1);\n\t\tvar time_temp:ShaderRegisterElement = new ShaderRegisterElement(temp.regName, temp.index, 2);\n\t\tregisterCache.addVertexTempUsages(temp, 1);\n\t\tvar temp2:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\tvar distance:ShaderRegisterElement = new ShaderRegisterElement(temp2.regName, temp2.index);\n\t\tregisterCache.removeVertexTempUsage(temp);\n\n\t\tvar code:string = \"\";\n\t\tcode += \"sub \" + rev_time + \",\" + animationRegisterData.vertexOneConst + \",\" + animationRegisterData.vertexLife + \"\\n\";\n\t\tcode += \"mul \" + time_2 + \",\" + animationRegisterData.vertexLife + \",\" + animationRegisterData.vertexLife + \"\\n\";\n\n\t\tcode += \"mul \" + time_temp + \",\" + animationRegisterData.vertexLife + \",\" + rev_time + \"\\n\";\n\t\tcode += \"mul \" + time_temp + \",\" + time_temp + \",\" + animationRegisterData.vertexTwoConst + \"\\n\";\n\t\tcode += \"mul \" + distance + \".xyz,\" + time_temp + \",\" + controlValue + \"\\n\";\n\t\tcode += \"add \" + animationRegisterData.positionTarget + \".xyz,\" + distance + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\n\t\tcode += \"mul \" + distance + \".xyz,\" + time_2 + \",\" + endValue + \"\\n\";\n\t\tcode += \"add \" + animationRegisterData.positionTarget + \".xyz,\" + distance + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\n\n\t\tif (animationSet.needVelocity) {\n\t\t\tcode += \"mul \" + time_2 + \",\" + animationRegisterData.vertexLife + \",\" + animationRegisterData.vertexTwoConst + \"\\n\";\n\t\t\tcode += \"sub \" + time_temp + \",\" + animationRegisterData.vertexOneConst + \",\" + time_2 + \"\\n\";\n\t\t\tcode += \"mul \" + time_temp + \",\" + animationRegisterData.vertexTwoConst + \",\" + time_temp + \"\\n\";\n\t\t\tcode += \"mul \" + distance + \".xyz,\" + controlValue + \",\" + time_temp + \"\\n\";\n\t\t\tcode += \"add \" + animationRegisterData.velocityTarget + \".xyz,\" + distance + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz\\n\";\n\t\t\tcode += \"mul \" + distance + \".xyz,\" + endValue + \",\" + time_2 + \"\\n\";\n\t\t\tcode += \"add \" + animationRegisterData.velocityTarget + \".xyz,\" + distance + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz\\n\";\n\t\t}\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAnimationState(animator:AnimatorBase):ParticleBezierCurveState\n\t{\n\t\treturn <ParticleBezierCurveState> animator.getAnimationState(this);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGeneratePropertyOfOneParticle(param:ParticleProperties):void\n\t{\n\t\tvar bezierControl:Vector3D = param[ParticleBezierCurveNode.BEZIER_CONTROL_VECTOR3D];\n\t\tif (!bezierControl)\n\t\t\tthrow new Error(\"there is no \" + ParticleBezierCurveNode.BEZIER_CONTROL_VECTOR3D + \" in param!\");\n\n\t\tvar bezierEnd:Vector3D = param[ParticleBezierCurveNode.BEZIER_END_VECTOR3D];\n\t\tif (!bezierEnd)\n\t\t\tthrow new Error(\"there is no \" + ParticleBezierCurveNode.BEZIER_END_VECTOR3D + \" in param!\");\n\n\t\tthis._pOneData[0] = bezierControl.x;\n\t\tthis._pOneData[1] = bezierControl.y;\n\t\tthis._pOneData[2] = bezierControl.z;\n\t\tthis._pOneData[3] = bezierEnd.x;\n\t\tthis._pOneData[4] = bezierEnd.y;\n\t\tthis._pOneData[5] = bezierEnd.z;\n\t}\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\nimport {ParticleBillboardState}\t\t\tfrom \"../../animators/states/ParticleBillboardState\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\n\n/**\n * A particle animation node that controls the rotation of a particle to always face the camera.\n */\nexport class ParticleBillboardNode extends ParticleNodeBase\n{\n\t/** @private */\n\tpublic _iBillboardAxis:Vector3D;\n\n\t/**\n\t * Creates a new <code>ParticleBillboardNode</code>\n\t */\n\tconstructor(billboardAxis:Vector3D = null)\n\t{\n\t\tsuper(\"ParticleBillboard\", ParticlePropertiesMode.GLOBAL, 0, 4);\n\n\t\tthis._pStateClass = ParticleBillboardState;\n\n\t\tthis._iBillboardAxis = billboardAxis;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAGALVertexCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\n\t{\n\t\tvar rotationMatrixRegister:ShaderRegisterElement = registerCache.getFreeVertexConstant();\n\t\tanimationRegisterData.setRegisterIndex(this, ParticleBillboardState.MATRIX_INDEX, rotationMatrixRegister.index);\n\t\tregisterCache.getFreeVertexConstant();\n\t\tregisterCache.getFreeVertexConstant();\n\t\tregisterCache.getFreeVertexConstant();\n\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\n\t\tvar code:string = \"m33 \" + temp + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \",\" + rotationMatrixRegister + \"\\n\" +\n\t\t\t\t\t\t  \"mov \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp + \"\\n\";\n\n\t\tvar shaderRegisterElement:ShaderRegisterElement;\n\t\tfor (var i:number = 0; i < animationRegisterData.rotationRegisters.length; i++) {\n\t\t\tshaderRegisterElement = animationRegisterData.rotationRegisters[i];\n\t\t\tcode += \"m33 \" + temp + \".xyz,\" + shaderRegisterElement + \",\" + rotationMatrixRegister + \"\\n\" +\n\t\t\t\t\t\"mov \" + shaderRegisterElement + \".xyz,\" + shaderRegisterElement + \"\\n\";\n\t\t}\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAnimationState(animator:AnimatorBase):ParticleBillboardState\n\t{\n\t\treturn <ParticleBillboardState> animator.getAnimationState(this);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iProcessAnimationSetting(particleAnimationSet:ParticleAnimationSet):void\n\t{\n\t\tparticleAnimationSet.hasBillboard = true;\n\t}\n}",
    "import {ColorTransform}\t\t\t\t\tfrom \"awayjs-core/lib/geom/ColorTransform\";\n\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {ParticleProperties}\t\t\t\tfrom \"../../animators/data/ParticleProperties\";\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\nimport {ParticleColorState}\t\t\t\tfrom \"../../animators/states/ParticleColorState\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\n\n/**\n * A particle animation node used to control the color variation of a particle over time.\n */\nexport class ParticleColorNode extends ParticleNodeBase\n{\n\t//default values used when creating states\n\t/** @private */\n\tpublic _iUsesMultiplier:boolean;\n\t/** @private */\n\tpublic _iUsesOffset:boolean;\n\t/** @private */\n\tpublic _iUsesCycle:boolean;\n\t/** @private */\n\tpublic _iUsesPhase:boolean;\n\t/** @private */\n\tpublic _iStartColor:ColorTransform;\n\t/** @private */\n\tpublic _iEndColor:ColorTransform;\n\t/** @private */\n\tpublic _iCycleDuration:number;\n\t/** @private */\n\tpublic _iCyclePhase:number;\n\n\t/**\n\t * Reference for color node properties on a single particle (when in local property mode).\n\t * Expects a <code>ColorTransform</code> object representing the start color transform applied to the particle.\n\t */\n\tpublic static COLOR_START_COLORTRANSFORM:string = \"ColorStartColorTransform\";\n\n\t/**\n\t * Reference for color node properties on a single particle (when in local property mode).\n\t * Expects a <code>ColorTransform</code> object representing the end color transform applied to the particle.\n\t */\n\tpublic static COLOR_END_COLORTRANSFORM:string = \"ColorEndColorTransform\";\n\n\t/**\n\t * Creates a new <code>ParticleColorNode</code>\n\t *\n\t * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\n\t * @param    [optional] usesMultiplier  Defines whether the node uses multiplier data in the shader for its color transformations. Defaults to true.\n\t * @param    [optional] usesOffset      Defines whether the node uses offset data in the shader for its color transformations. Defaults to true.\n\t * @param    [optional] usesCycle       Defines whether the node uses the <code>cycleDuration</code> property in the shader to calculate the period of the animation independent of particle duration. Defaults to false.\n\t * @param    [optional] usesPhase       Defines whether the node uses the <code>cyclePhase</code> property in the shader to calculate a starting offset to the cycle rotation of the particle. Defaults to false.\n\t * @param    [optional] startColor      Defines the default start color transform of the node, when in global mode.\n\t * @param    [optional] endColor        Defines the default end color transform of the node, when in global mode.\n\t * @param    [optional] cycleDuration   Defines the duration of the animation in seconds, used as a period independent of particle duration when in global mode. Defaults to 1.\n\t * @param    [optional] cyclePhase      Defines the phase of the cycle in degrees, used as the starting offset of the cycle when in global mode. Defaults to 0.\n\t */\n\tconstructor(mode:number, usesMultiplier:boolean = true, usesOffset:boolean = true, usesCycle:boolean = false, usesPhase:boolean = false, startColor:ColorTransform = null, endColor:ColorTransform = null, cycleDuration:number = 1, cyclePhase:number = 0)\n\t{\n\t\tsuper(\"ParticleColor\", mode, (usesMultiplier && usesOffset)? 16 : 8, ParticleAnimationSet.COLOR_PRIORITY);\n\n\t\tthis._pStateClass = ParticleColorState;\n\n\t\tthis._iUsesMultiplier = usesMultiplier;\n\t\tthis._iUsesOffset = usesOffset;\n\t\tthis._iUsesCycle = usesCycle;\n\t\tthis._iUsesPhase = usesPhase;\n\n\t\tthis._iStartColor = startColor || new ColorTransform();\n\t\tthis._iEndColor = endColor || new ColorTransform();\n\t\tthis._iCycleDuration = cycleDuration;\n\t\tthis._iCyclePhase = cyclePhase;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAGALVertexCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tif (shader.usesFragmentAnimation) {\n\t\t\tvar temp:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\n\t\t\tif (this._iUsesCycle) {\n\t\t\t\tvar cycleConst:ShaderRegisterElement = registerCache.getFreeVertexConstant();\n\t\t\t\tanimationRegisterData.setRegisterIndex(this, ParticleColorState.CYCLE_INDEX, cycleConst.index);\n\n\t\t\t\tregisterCache.addVertexTempUsages(temp, 1);\n\t\t\t\tvar sin:ShaderRegisterElement = registerCache.getFreeVertexSingleTemp();\n\t\t\t\tregisterCache.removeVertexTempUsage(temp);\n\n\t\t\t\tcode += \"mul \" + sin + \",\" + animationRegisterData.vertexTime + \",\" + cycleConst + \".x\\n\";\n\n\t\t\t\tif (this._iUsesPhase)\n\t\t\t\t\tcode += \"add \" + sin + \",\" + sin + \",\" + cycleConst + \".y\\n\";\n\n\t\t\t\tcode += \"sin \" + sin + \",\" + sin + \"\\n\";\n\t\t\t}\n\n\t\t\tif (this._iUsesMultiplier) {\n\t\t\t\tvar startMultiplierValue:ShaderRegisterElement = (this._pMode == ParticlePropertiesMode.GLOBAL)? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\n\t\t\t\tvar deltaMultiplierValue:ShaderRegisterElement = (this._pMode == ParticlePropertiesMode.GLOBAL)? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\n\n\t\t\t\tanimationRegisterData.setRegisterIndex(this, ParticleColorState.START_MULTIPLIER_INDEX, startMultiplierValue.index);\n\t\t\t\tanimationRegisterData.setRegisterIndex(this, ParticleColorState.DELTA_MULTIPLIER_INDEX, deltaMultiplierValue.index);\n\n\t\t\t\tcode += \"mul \" + temp + \",\" + deltaMultiplierValue + \",\" + (this._iUsesCycle? sin : animationRegisterData.vertexLife) + \"\\n\";\n\t\t\t\tcode += \"add \" + temp + \",\" + temp + \",\" + startMultiplierValue + \"\\n\";\n\t\t\t\tcode += \"mul \" + animationRegisterData.colorMulTarget + \",\" + temp + \",\" + animationRegisterData.colorMulTarget + \"\\n\";\n\t\t\t}\n\n\t\t\tif (this._iUsesOffset) {\n\t\t\t\tvar startOffsetValue:ShaderRegisterElement = (this._pMode == ParticlePropertiesMode.LOCAL_STATIC)? registerCache.getFreeVertexAttribute() : registerCache.getFreeVertexConstant();\n\t\t\t\tvar deltaOffsetValue:ShaderRegisterElement = (this._pMode == ParticlePropertiesMode.LOCAL_STATIC)? registerCache.getFreeVertexAttribute() : registerCache.getFreeVertexConstant();\n\n\t\t\t\tanimationRegisterData.setRegisterIndex(this, ParticleColorState.START_OFFSET_INDEX, startOffsetValue.index);\n\t\t\t\tanimationRegisterData.setRegisterIndex(this, ParticleColorState.DELTA_OFFSET_INDEX, deltaOffsetValue.index);\n\n\t\t\t\tcode += \"mul \" + temp + \",\" + deltaOffsetValue + \",\" + (this._iUsesCycle? sin : animationRegisterData.vertexLife) + \"\\n\";\n\t\t\t\tcode += \"add \" + temp + \",\" + temp + \",\" + startOffsetValue + \"\\n\";\n\t\t\t\tcode += \"add \" + animationRegisterData.colorAddTarget + \",\" + temp + \",\" + animationRegisterData.colorAddTarget + \"\\n\";\n\t\t\t}\n\t\t}\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAnimationState(animator:AnimatorBase):ParticleColorState\n\t{\n\t\treturn <ParticleColorState> animator.getAnimationState(this);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iProcessAnimationSetting(particleAnimationSet:ParticleAnimationSet):void\n\t{\n\t\tif (this._iUsesMultiplier)\n\t\t\tparticleAnimationSet.hasColorMulNode = true;\n\t\tif (this._iUsesOffset)\n\t\t\tparticleAnimationSet.hasColorAddNode = true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGeneratePropertyOfOneParticle(param:ParticleProperties):void\n\t{\n\t\tvar startColor:ColorTransform = param[ParticleColorNode.COLOR_START_COLORTRANSFORM];\n\t\tif (!startColor)\n\t\t\tthrow(new Error(\"there is no \" + ParticleColorNode.COLOR_START_COLORTRANSFORM + \" in param!\"));\n\n\t\tvar endColor:ColorTransform = param[ParticleColorNode.COLOR_END_COLORTRANSFORM];\n\t\tif (!endColor)\n\t\t\tthrow(new Error(\"there is no \" + ParticleColorNode.COLOR_END_COLORTRANSFORM + \" in param!\"));\n\n\t\tvar i:number = 0;\n\n\t\tif (!this._iUsesCycle) {\n\t\t\t//multiplier\n\t\t\tif (this._iUsesMultiplier) {\n\t\t\t\tthis._pOneData[i++] = startColor.redMultiplier;\n\t\t\t\tthis._pOneData[i++] = startColor.greenMultiplier;\n\t\t\t\tthis._pOneData[i++] = startColor.blueMultiplier;\n\t\t\t\tthis._pOneData[i++] = startColor.alphaMultiplier;\n\t\t\t\tthis._pOneData[i++] = endColor.redMultiplier - startColor.redMultiplier;\n\t\t\t\tthis._pOneData[i++] = endColor.greenMultiplier - startColor.greenMultiplier;\n\t\t\t\tthis._pOneData[i++] = endColor.blueMultiplier - startColor.blueMultiplier;\n\t\t\t\tthis._pOneData[i++] = endColor.alphaMultiplier - startColor.alphaMultiplier;\n\t\t\t}\n\n\t\t\t//offset\n\t\t\tif (this._iUsesOffset) {\n\t\t\t\tthis._pOneData[i++] = startColor.redOffset/255;\n\t\t\t\tthis._pOneData[i++] = startColor.greenOffset/255;\n\t\t\t\tthis._pOneData[i++] = startColor.blueOffset/255;\n\t\t\t\tthis._pOneData[i++] = startColor.alphaOffset/255;\n\t\t\t\tthis._pOneData[i++] = (endColor.redOffset - startColor.redOffset)/255;\n\t\t\t\tthis._pOneData[i++] = (endColor.greenOffset - startColor.greenOffset)/255;\n\t\t\t\tthis._pOneData[i++] = (endColor.blueOffset - startColor.blueOffset)/255;\n\t\t\t\tthis._pOneData[i++] = (endColor.alphaOffset - startColor.alphaOffset)/255;\n\t\t\t}\n\t\t} else {\n\t\t\t//multiplier\n\t\t\tif (this._iUsesMultiplier) {\n\t\t\t\tthis._pOneData[i++] = (startColor.redMultiplier + endColor.redMultiplier)/2;\n\t\t\t\tthis._pOneData[i++] = (startColor.greenMultiplier + endColor.greenMultiplier)/2;\n\t\t\t\tthis._pOneData[i++] = (startColor.blueMultiplier + endColor.blueMultiplier)/2;\n\t\t\t\tthis._pOneData[i++] = (startColor.alphaMultiplier + endColor.alphaMultiplier)/2;\n\t\t\t\tthis._pOneData[i++] = (startColor.redMultiplier - endColor.redMultiplier)/2;\n\t\t\t\tthis._pOneData[i++] = (startColor.greenMultiplier - endColor.greenMultiplier)/2;\n\t\t\t\tthis._pOneData[i++] = (startColor.blueMultiplier - endColor.blueMultiplier)/2;\n\t\t\t\tthis._pOneData[i++] = (startColor.alphaMultiplier - endColor.alphaMultiplier)/2;\n\t\t\t}\n\n\t\t\t//offset\n\t\t\tif (this._iUsesOffset) {\n\t\t\t\tthis._pOneData[i++] = (startColor.redOffset + endColor.redOffset)/(255*2);\n\t\t\t\tthis._pOneData[i++] = (startColor.greenOffset + endColor.greenOffset)/(255*2);\n\t\t\t\tthis._pOneData[i++] = (startColor.blueOffset + endColor.blueOffset)/(255*2);\n\t\t\t\tthis._pOneData[i++] = (startColor.alphaOffset + endColor.alphaOffset)/(255*2);\n\t\t\t\tthis._pOneData[i++] = (startColor.redOffset - endColor.redOffset)/(255*2);\n\t\t\t\tthis._pOneData[i++] = (startColor.greenOffset - endColor.greenOffset)/(255*2);\n\t\t\t\tthis._pOneData[i++] = (startColor.blueOffset - endColor.blueOffset)/(255*2);\n\t\t\t\tthis._pOneData[i++] = (startColor.alphaOffset - endColor.alphaOffset)/(255*2);\n\t\t\t}\n\t\t}\n\n\t}\n}",
    "import {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\nimport {ParticleFollowState}\t\t\t\tfrom \"../../animators/states/ParticleFollowState\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\n\n/**\n * A particle animation node used to create a follow behaviour on a particle system.\n */\nexport class ParticleFollowNode extends ParticleNodeBase\n{\n\t/** @private */\n\tpublic _iUsesPosition:boolean;\n\n\t/** @private */\n\tpublic _iUsesRotation:boolean;\n\n\t/** @private */\n\tpublic _iSmooth:boolean;\n\n\t/**\n\t * Creates a new <code>ParticleFollowNode</code>\n\t *\n\t * @param    [optional] usesPosition     Defines wehether the individual particle reacts to the position of the target.\n\t * @param    [optional] usesRotation     Defines wehether the individual particle reacts to the rotation of the target.\n\t * @param    [optional] smooth     Defines wehether the state calculate the interpolated value.\n\t */\n\tconstructor(usesPosition:boolean = true, usesRotation:boolean = true, smooth:boolean = false)\n\t{\n\t\tsuper(\"ParticleFollow\", ParticlePropertiesMode.LOCAL_DYNAMIC, (usesPosition && usesRotation)? 6 : 3, ParticleAnimationSet.POST_PRIORITY);\n\n\t\tthis._pStateClass = ParticleFollowState;\n\n\t\tthis._iUsesPosition = usesPosition;\n\t\tthis._iUsesRotation = usesRotation;\n\t\tthis._iSmooth = smooth;\n\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAGALVertexCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\n\t{\n\t\t//TODO: use Quaternion to implement this function\n\t\tvar code:string = \"\";\n\t\tif (this._iUsesRotation) {\n\t\t\tvar rotationAttribute:ShaderRegisterElement = registerCache.getFreeVertexAttribute();\n\t\t\tanimationRegisterData.setRegisterIndex(this, ParticleFollowState.FOLLOW_ROTATION_INDEX, rotationAttribute.index);\n\n\t\t\tvar temp1:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\t\tregisterCache.addVertexTempUsages(temp1, 1);\n\t\t\tvar temp2:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\t\tregisterCache.addVertexTempUsages(temp2, 1);\n\t\t\tvar temp3:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\n\t\t\tvar temp4:ShaderRegisterElement;\n\t\t\tif (animationSet.hasBillboard) {\n\t\t\t\tregisterCache.addVertexTempUsages(temp3, 1);\n\t\t\t\ttemp4 = registerCache.getFreeVertexVectorTemp();\n\t\t\t}\n\n\t\t\tregisterCache.removeVertexTempUsage(temp1);\n\t\t\tregisterCache.removeVertexTempUsage(temp2);\n\t\t\tif (animationSet.hasBillboard)\n\t\t\t\tregisterCache.removeVertexTempUsage(temp3);\n\n\t\t\tvar len:number = animationRegisterData.rotationRegisters.length;\n\t\t\tvar i:number;\n\n\t\t\t//x axis\n\t\t\tcode += \"mov \" + temp1 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n\t\t\tcode += \"mov \" + temp1 + \".x,\" + animationRegisterData.vertexOneConst + \"\\n\";\n\t\t\tcode += \"mov \" + temp3 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n\t\t\tcode += \"sin \" + temp3 + \".y,\" + rotationAttribute + \".x\\n\";\n\t\t\tcode += \"cos \" + temp3 + \".z,\" + rotationAttribute + \".x\\n\";\n\t\t\tcode += \"mov \" + temp2 + \".x,\" + animationRegisterData.vertexZeroConst + \"\\n\";\n\t\t\tcode += \"mov \" + temp2 + \".y,\" + temp3 + \".z\\n\";\n\t\t\tcode += \"neg \" + temp2 + \".z,\" + temp3 + \".y\\n\";\n\n\t\t\tif (animationSet.hasBillboard)\n\t\t\t\tcode += \"m33 \" + temp4 + \".xyz,\" + animationRegisterData.positionTarget + \".xyz,\" + temp1 + \"\\n\";\n\t\t\telse {\n\t\t\t\tcode += \"m33 \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp1 + \"\\n\";\n\t\t\t\tfor (i = 0; i < len; i++)\n\t\t\t\t\tcode += \"m33 \" + animationRegisterData.rotationRegisters[i] + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \",\" + temp1 + \"\\n\";\n\t\t\t}\n\n\t\t\t//y axis\n\t\t\tcode += \"mov \" + temp1 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n\t\t\tcode += \"cos \" + temp1 + \".x,\" + rotationAttribute + \".y\\n\";\n\t\t\tcode += \"sin \" + temp1 + \".z,\" + rotationAttribute + \".y\\n\";\n\t\t\tcode += \"mov \" + temp2 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n\t\t\tcode += \"mov \" + temp2 + \".y,\" + animationRegisterData.vertexOneConst + \"\\n\";\n\t\t\tcode += \"mov \" + temp3 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n\t\t\tcode += \"neg \" + temp3 + \".x,\" + temp1 + \".z\\n\";\n\t\t\tcode += \"mov \" + temp3 + \".z,\" + temp1 + \".x\\n\";\n\n\t\t\tif (animationSet.hasBillboard)\n\t\t\t\tcode += \"m33 \" + temp4 + \".xyz,\" + temp4 + \".xyz,\" + temp1 + \"\\n\";\n\t\t\telse {\n\t\t\t\tcode += \"m33 \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp1 + \"\\n\";\n\t\t\t\tfor (i = 0; i < len; i++)\n\t\t\t\t\tcode += \"m33 \" + animationRegisterData.rotationRegisters[i] + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \",\" + temp1 + \"\\n\";\n\t\t\t}\n\n\t\t\t//z axis\n\t\t\tcode += \"mov \" + temp2 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n\t\t\tcode += \"sin \" + temp2 + \".x,\" + rotationAttribute + \".z\\n\";\n\t\t\tcode += \"cos \" + temp2 + \".y,\" + rotationAttribute + \".z\\n\";\n\t\t\tcode += \"mov \" + temp1 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n\t\t\tcode += \"mov \" + temp1 + \".x,\" + temp2 + \".y\\n\";\n\t\t\tcode += \"neg \" + temp1 + \".y,\" + temp2 + \".x\\n\";\n\t\t\tcode += \"mov \" + temp3 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n\t\t\tcode += \"mov \" + temp3 + \".z,\" + animationRegisterData.vertexOneConst + \"\\n\";\n\n\t\t\tif (animationSet.hasBillboard) {\n\t\t\t\tcode += \"m33 \" + temp4 + \".xyz,\" + temp4 + \".xyz,\" + temp1 + \"\\n\";\n\t\t\t\tcode += \"sub \" + temp4 + \".xyz,\" + temp4 + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\n\t\t\t\tcode += \"add \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp4 + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz\\n\";\n\t\t\t} else {\n\t\t\t\tcode += \"m33 \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp1 + \"\\n\";\n\t\t\t\tfor (i = 0; i < len; i++)\n\t\t\t\t\tcode += \"m33 \" + animationRegisterData.rotationRegisters[i] + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \",\" + temp1 + \"\\n\";\n\t\t\t}\n\n\t\t}\n\n\t\tif (this._iUsesPosition) {\n\t\t\tvar positionAttribute:ShaderRegisterElement = registerCache.getFreeVertexAttribute();\n\t\t\tanimationRegisterData.setRegisterIndex(this, ParticleFollowState.FOLLOW_POSITION_INDEX, positionAttribute.index);\n\t\t\tcode += \"add \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + positionAttribute + \",\" + animationRegisterData.scaleAndRotateTarget + \".xyz\\n\";\n\t\t}\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAnimationState(animator:AnimatorBase):ParticleFollowState\n\t{\n\t\treturn <ParticleFollowState> animator.getAnimationState(this);\n\t}\n}",
    "import {ColorTransform}\t\t\t\t\tfrom \"awayjs-core/lib/geom/ColorTransform\";\n\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {ParticleProperties}\t\t\t\tfrom \"../../animators/data/ParticleProperties\";\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\nimport {ParticleInitialColorState}\t\tfrom \"../../animators/states/ParticleInitialColorState\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\n\n/**\n *\n */\nexport class ParticleInitialColorNode extends ParticleNodeBase\n{\n\t//default values used when creating states\n\t/** @private */\n\tpublic _iUsesMultiplier:boolean;\n\t/** @private */\n\tpublic _iUsesOffset:boolean;\n\t/** @private */\n\tpublic _iInitialColor:ColorTransform;\n\n\t/**\n\t * Reference for color node properties on a single particle (when in local property mode).\n\t * Expects a <code>ColorTransform</code> object representing the color transform applied to the particle.\n\t */\n\tpublic static COLOR_INITIAL_COLORTRANSFORM:string = \"ColorInitialColorTransform\";\n\n\tconstructor(mode:number, usesMultiplier:boolean = true, usesOffset:boolean = false, initialColor:ColorTransform = null)\n\t{\n\t\tsuper(\"ParticleInitialColor\", mode, (usesMultiplier && usesOffset)? 8 : 4, ParticleAnimationSet.COLOR_PRIORITY);\n\n\t\tthis._pStateClass = ParticleInitialColorState;\n\n\t\tthis._iUsesMultiplier = usesMultiplier;\n\t\tthis._iUsesOffset = usesOffset;\n\t\tthis._iInitialColor = initialColor || new ColorTransform();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAGALVertexCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tif (shader.usesFragmentAnimation) {\n\n\t\t\tif (this._iUsesMultiplier) {\n\t\t\t\tvar multiplierValue:ShaderRegisterElement = (this._pMode == ParticlePropertiesMode.GLOBAL)? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\n\t\t\t\tanimationRegisterData.setRegisterIndex(this, ParticleInitialColorState.MULTIPLIER_INDEX, multiplierValue.index);\n\n\t\t\t\tcode += \"mul \" + animationRegisterData.colorMulTarget + \",\" + multiplierValue + \",\" + animationRegisterData.colorMulTarget + \"\\n\";\n\t\t\t}\n\n\t\t\tif (this._iUsesOffset) {\n\t\t\t\tvar offsetValue:ShaderRegisterElement = (this._pMode == ParticlePropertiesMode.LOCAL_STATIC)? registerCache.getFreeVertexAttribute() : registerCache.getFreeVertexConstant();\n\t\t\t\tanimationRegisterData.setRegisterIndex(this, ParticleInitialColorState.OFFSET_INDEX, offsetValue.index);\n\n\t\t\t\tcode += \"add \" + animationRegisterData.colorAddTarget + \",\" + offsetValue + \",\" + animationRegisterData.colorAddTarget + \"\\n\";\n\t\t\t}\n\t\t}\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iProcessAnimationSetting(particleAnimationSet:ParticleAnimationSet):void\n\t{\n\t\tif (this._iUsesMultiplier)\n\t\t\tparticleAnimationSet.hasColorMulNode = true;\n\t\tif (this._iUsesOffset)\n\t\t\tparticleAnimationSet.hasColorAddNode = true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGeneratePropertyOfOneParticle(param:ParticleProperties):void\n\t{\n\t\tvar initialColor:ColorTransform = param[ParticleInitialColorNode.COLOR_INITIAL_COLORTRANSFORM];\n\t\tif (!initialColor)\n\t\t\tthrow(new Error(\"there is no \" + ParticleInitialColorNode.COLOR_INITIAL_COLORTRANSFORM + \" in param!\"));\n\n\t\tvar i:number = 0;\n\n\t\t//multiplier\n\t\tif (this._iUsesMultiplier) {\n\t\t\tthis._pOneData[i++] = initialColor.redMultiplier;\n\t\t\tthis._pOneData[i++] = initialColor.greenMultiplier;\n\t\t\tthis._pOneData[i++] = initialColor.blueMultiplier;\n\t\t\tthis._pOneData[i++] = initialColor.alphaMultiplier;\n\t\t}\n\t\t//offset\n\t\tif (this._iUsesOffset) {\n\t\t\tthis._pOneData[i++] = initialColor.redOffset/255;\n\t\t\tthis._pOneData[i++] = initialColor.greenOffset/255;\n\t\t\tthis._pOneData[i++] = initialColor.blueOffset/255;\n\t\t\tthis._pOneData[i++] = initialColor.alphaOffset/255;\n\t\t}\n\n\t}\n\n}",
    "import {AnimationNodeBase}\t\t\t\tfrom \"awayjs-display/lib/animators/nodes/AnimationNodeBase\";\n\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {ParticleProperties}\t\t\t\tfrom \"../../animators/data/ParticleProperties\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\n\n/**\n * Provides an abstract base class for particle animation nodes.\n */\nexport class ParticleNodeBase extends AnimationNodeBase\n{\n\tprivate _priority:number;\n\n\tpublic _pMode:number;\n\tpublic _pDataLength:number = 3;\n\tpublic _pOneData:Array<number>;\n\n\tpublic _iDataOffset:number;\n\n\t//modes alias\n\tprivate static GLOBAL:string = 'Global';\n\tprivate static LOCAL_STATIC:string = 'LocalStatic';\n\tprivate static LOCAL_DYNAMIC:string = 'LocalDynamic';\n\n\t//modes list\n\tprivate static MODES:Object =\n\t{\n\t\t0:ParticleNodeBase.GLOBAL,\n\t\t1:ParticleNodeBase.LOCAL_STATIC,\n\t\t2:ParticleNodeBase.LOCAL_DYNAMIC\n\t};\n\n\t/**\n\t * Returns the property mode of the particle animation node. Typically set in the node constructor\n\t *\n\t * @see away.animators.ParticlePropertiesMode\n\t */\n\tpublic get mode():number\n\t{\n\t\treturn this._pMode;\n\t}\n\n\t/**\n\t * Returns the priority of the particle animation node, used to order the agal generated in a particle animation set. Set automatically on instantiation.\n\t *\n\t * @see away.animators.ParticleAnimationSet\n\t * @see #getAGALVertexCode\n\t */\n\tpublic get priority():number\n\t{\n\t\treturn this._priority;\n\t}\n\n\t/**\n\t * Returns the length of the data used by the node when in <code>LOCAL_STATIC</code> mode. Used to generate the local static data of the particle animation set.\n\t *\n\t * @see away.animators.ParticleAnimationSet\n\t * @see #getAGALVertexCode\n\t */\n\tpublic get dataLength():number\n\t{\n\t\treturn this._pDataLength;\n\t}\n\n\t/**\n\t * Returns the generated data vector of the node after one particle pass during the generation of all local static data of the particle animation set.\n\t *\n\t * @see away.animators.ParticleAnimationSet\n\t * @see #generatePropertyOfOneParticle\n\t */\n\tpublic get oneData():Array<number>\n\t{\n\t\treturn this._pOneData;\n\t}\n\n\t/**\n\t * Creates a new <code>ParticleNodeBase</code> object.\n\t *\n\t * @param               name            Defines the generic name of the particle animation node.\n\t * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\n\t * @param               dataLength      Defines the length of the data used by the node when in <code>LOCAL_STATIC</code> mode.\n\t * @param    [optional] priority        the priority of the particle animation node, used to order the agal generated in a particle animation set. Defaults to 1.\n\t */\n\tconstructor(name:string, mode:number, dataLength:number, priority:number = 1)\n\t{\n\t\tsuper();\n\n\t\tname = name + ParticleNodeBase.MODES[mode];\n\n\t\tthis.name = name;\n\t\tthis._pMode = mode;\n\t\tthis._priority = priority;\n\t\tthis._pDataLength = dataLength;\n\n\t\tthis._pOneData = new Array<number>(this._pDataLength);\n\t}\n\n\t/**\n\t * Returns the AGAL code of the particle animation node for use in the vertex shader.\n\t */\n\tpublic getAGALVertexCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\n\t{\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Returns the AGAL code of the particle animation node for use in the fragment shader.\n\t */\n\tpublic getAGALFragmentCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\n\t{\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Returns the AGAL code of the particle animation node for use in the fragment shader when UV coordinates are required.\n\t */\n\tpublic getAGALUVCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\n\t{\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Called internally by the particle animation set when assigning the set of static properties originally defined by the initParticleFunc of the set.\n\t *\n\t * @see away.animators.ParticleAnimationSet#initParticleFunc\n\t */\n\tpublic _iGeneratePropertyOfOneParticle(param:ParticleProperties):void\n\t{\n\n\t}\n\n\t/**\n\t * Called internally by the particle animation set when determining the requirements of the particle animation node AGAL.\n\t */\n\tpublic _iProcessAnimationSetting(particleAnimationSet:ParticleAnimationSet):void\n\t{\n\n\t}\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {ParticleProperties}\t\t\t\tfrom \"../../animators/data/ParticleProperties\";\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\nimport {ParticleOrbitState}\t\t\t\tfrom \"../../animators/states/ParticleOrbitState\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\n\n/**\n * A particle animation node used to control the position of a particle over time around a circular orbit.\n */\nexport class ParticleOrbitNode extends ParticleNodeBase\n{\n\t/** @private */\n\tpublic _iUsesEulers:boolean;\n\n\t/** @private */\n\tpublic _iUsesCycle:boolean;\n\n\t/** @private */\n\tpublic _iUsesPhase:boolean;\n\n\t/** @private */\n\tpublic _iRadius:number;\n\t/** @private */\n\tpublic _iCycleDuration:number;\n\t/** @private */\n\tpublic _iCyclePhase:number;\n\t/** @private */\n\tpublic _iEulers:Vector3D;\n\n\t/**\n\t * Reference for orbit node properties on a single particle (when in local property mode).\n\t * Expects a <code>Vector3D</code> object representing the radius (x), cycle speed (y) and cycle phase (z) of the motion on the particle.\n\t */\n\tpublic static ORBIT_VECTOR3D:string = \"OrbitVector3D\";\n\n\t/**\n\t * Creates a new <code>ParticleOrbitNode</code> object.\n\t *\n\t * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\n\t * @param    [optional] usesEulers      Defines whether the node uses the <code>eulers</code> property in the shader to calculate a rotation on the orbit. Defaults to true.\n\t * @param    [optional] usesCycle       Defines whether the node uses the <code>cycleDuration</code> property in the shader to calculate the period of the orbit independent of particle duration. Defaults to false.\n\t * @param    [optional] usesPhase       Defines whether the node uses the <code>cyclePhase</code> property in the shader to calculate a starting offset to the cycle rotation of the particle. Defaults to false.\n\t * @param    [optional] radius          Defines the radius of the orbit when in global mode. Defaults to 100.\n\t * @param    [optional] cycleDuration   Defines the duration of the orbit in seconds, used as a period independent of particle duration when in global mode. Defaults to 1.\n\t * @param    [optional] cyclePhase      Defines the phase of the orbit in degrees, used as the starting offset of the cycle when in global mode. Defaults to 0.\n\t * @param    [optional] eulers          Defines the euler rotation in degrees, applied to the orientation of the orbit when in global mode.\n\t */\n\tconstructor(mode:number, usesEulers:boolean = true, usesCycle:boolean = false, usesPhase:boolean = false, radius:number = 100, cycleDuration:number = 1, cyclePhase:number = 0, eulers:Vector3D = null)\n\t{\n\t\tvar len:number = 3;\n\t\tif (usesPhase)\n\t\t\tlen++;\n\t\tsuper(\"ParticleOrbit\", mode, len);\n\n\t\tthis._pStateClass = ParticleOrbitState;\n\n\t\tthis._iUsesEulers = usesEulers;\n\t\tthis._iUsesCycle = usesCycle;\n\t\tthis._iUsesPhase = usesPhase;\n\n\t\tthis._iRadius = radius;\n\t\tthis._iCycleDuration = cycleDuration;\n\t\tthis._iCyclePhase = cyclePhase;\n\t\tthis._iEulers = eulers || new Vector3D();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAGALVertexCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\n\t{\n\t\tvar orbitRegister:ShaderRegisterElement = (this._pMode == ParticlePropertiesMode.GLOBAL)? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\n\t\tanimationRegisterData.setRegisterIndex(this, ParticleOrbitState.ORBIT_INDEX, orbitRegister.index);\n\n\t\tvar eulersMatrixRegister:ShaderRegisterElement = registerCache.getFreeVertexConstant();\n\t\tanimationRegisterData.setRegisterIndex(this, ParticleOrbitState.EULERS_INDEX, eulersMatrixRegister.index);\n\t\tregisterCache.getFreeVertexConstant();\n\t\tregisterCache.getFreeVertexConstant();\n\t\tregisterCache.getFreeVertexConstant();\n\n\t\tvar temp1:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\tregisterCache.addVertexTempUsages(temp1, 1);\n\t\tvar distance:ShaderRegisterElement = new ShaderRegisterElement(temp1.regName, temp1.index);\n\n\t\tvar temp2:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\tvar cos:ShaderRegisterElement = new ShaderRegisterElement(temp2.regName, temp2.index, 0);\n\t\tvar sin:ShaderRegisterElement = new ShaderRegisterElement(temp2.regName, temp2.index, 1);\n\t\tvar degree:ShaderRegisterElement = new ShaderRegisterElement(temp2.regName, temp2.index, 2);\n\t\tregisterCache.removeVertexTempUsage(temp1);\n\n\t\tvar code:string = \"\";\n\n\t\tif (this._iUsesCycle) {\n\t\t\tcode += \"mul \" + degree + \",\" + animationRegisterData.vertexTime + \",\" + orbitRegister + \".y\\n\";\n\n\t\t\tif (this._iUsesPhase)\n\t\t\t\tcode += \"add \" + degree + \",\" + degree + \",\" + orbitRegister + \".w\\n\";\n\t\t} else\n\t\t\tcode += \"mul \" + degree + \",\" + animationRegisterData.vertexLife + \",\" + orbitRegister + \".y\\n\";\n\n\t\tcode += \"cos \" + cos + \",\" + degree + \"\\n\";\n\t\tcode += \"sin \" + sin + \",\" + degree + \"\\n\";\n\t\tcode += \"mul \" + distance + \".x,\" + cos + \",\" + orbitRegister + \".x\\n\";\n\t\tcode += \"mul \" + distance + \".y,\" + sin + \",\" + orbitRegister + \".x\\n\";\n\t\tcode += \"mov \" + distance + \".wz\" + animationRegisterData.vertexZeroConst + \"\\n\";\n\t\tif (this._iUsesEulers)\n\t\t\tcode += \"m44 \" + distance + \",\" + distance + \",\" + eulersMatrixRegister + \"\\n\";\n\t\tcode += \"add \" + animationRegisterData.positionTarget + \".xyz,\" + distance + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\n\n\t\tif (animationSet.needVelocity) {\n\t\t\tcode += \"neg \" + distance + \".x,\" + sin + \"\\n\";\n\t\t\tcode += \"mov \" + distance + \".y,\" + cos + \"\\n\";\n\t\t\tcode += \"mov \" + distance + \".zw,\" + animationRegisterData.vertexZeroConst + \"\\n\";\n\t\t\tif (this._iUsesEulers)\n\t\t\t\tcode += \"m44 \" + distance + \",\" + distance + \",\" + eulersMatrixRegister + \"\\n\";\n\t\t\tcode += \"mul \" + distance + \",\" + distance + \",\" + orbitRegister + \".z\\n\";\n\t\t\tcode += \"div \" + distance + \",\" + distance + \",\" + orbitRegister + \".y\\n\";\n\t\t\tif (!this._iUsesCycle)\n\t\t\t\tcode += \"div \" + distance + \",\" + distance + \",\" + animationRegisterData.vertexLife + \"\\n\";\n\t\t\tcode += \"add \" + animationRegisterData.velocityTarget + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz,\" + distance + \".xyz\\n\";\n\t\t}\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAnimationState(animator:AnimatorBase):ParticleOrbitState\n\t{\n\t\treturn <ParticleOrbitState> animator.getAnimationState(this);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGeneratePropertyOfOneParticle(param:ParticleProperties):void\n\t{\n\t\t//Vector3D.x is radius, Vector3D.y is cycle duration, Vector3D.z is phase\n\t\tvar orbit:Vector3D = param[ParticleOrbitNode.ORBIT_VECTOR3D];\n\t\tif (!orbit)\n\t\t\tthrow new Error(\"there is no \" + ParticleOrbitNode.ORBIT_VECTOR3D + \" in param!\");\n\n\t\tthis._pOneData[0] = orbit.x;\n\t\tif (this._iUsesCycle && orbit.y <= 0)\n\t\t\tthrow(new Error(\"the cycle duration must be greater than zero\"));\n\t\tthis._pOneData[1] = Math.PI*2/(!this._iUsesCycle? 1 : orbit.y);\n\t\tthis._pOneData[2] = orbit.x*Math.PI*2;\n\t\tif (this._iUsesPhase)\n\t\t\tthis._pOneData[3] = orbit.z*Math.PI/180;\n\t}\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {ParticleProperties}\t\t\t\tfrom \"../../animators/data/ParticleProperties\";\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\nimport {ParticleOscillatorState}\t\t\tfrom \"../../animators/states/ParticleOscillatorState\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\n\n/**\n * A particle animation node used to control the position of a particle over time using simple harmonic motion.\n */\nexport class ParticleOscillatorNode extends ParticleNodeBase\n{\n\t/** @private */\n\tpublic _iOscillator:Vector3D;\n\n\t/**\n\t * Reference for ocsillator node properties on a single particle (when in local property mode).\n\t * Expects a <code>Vector3D</code> object representing the axis (x,y,z) and cycle speed (w) of the motion on the particle.\n\t */\n\tpublic static OSCILLATOR_VECTOR3D:string = \"OscillatorVector3D\";\n\n\t/**\n\t * Creates a new <code>ParticleOscillatorNode</code>\n\t *\n\t * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\n\t * @param    [optional] oscillator      Defines the default oscillator axis (x, y, z) and cycleDuration (w) of the node, used when in global mode.\n\t */\n\tconstructor(mode:number, oscillator:Vector3D = null)\n\t{\n\t\tsuper(\"ParticleOscillator\", mode, 4);\n\n\t\tthis._pStateClass = ParticleOscillatorState;\n\n\t\tthis._iOscillator = oscillator || new Vector3D();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAGALVertexCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\n\t{\n\t\tvar oscillatorRegister:ShaderRegisterElement = (this._pMode == ParticlePropertiesMode.GLOBAL)? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\n\t\tanimationRegisterData.setRegisterIndex(this, ParticleOscillatorState.OSCILLATOR_INDEX, oscillatorRegister.index);\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\tvar dgree:ShaderRegisterElement = new ShaderRegisterElement(temp.regName, temp.index, 0);\n\t\tvar sin:ShaderRegisterElement = new ShaderRegisterElement(temp.regName, temp.index, 1);\n\t\tvar cos:ShaderRegisterElement = new ShaderRegisterElement(temp.regName, temp.index, 2);\n\t\tregisterCache.addVertexTempUsages(temp, 1);\n\t\tvar temp2:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\tvar distance:ShaderRegisterElement = new ShaderRegisterElement(temp2.regName, temp2.index);\n\t\tregisterCache.removeVertexTempUsage(temp);\n\n\t\tvar code:string = \"\";\n\t\tcode += \"mul \" + dgree + \",\" + animationRegisterData.vertexTime + \",\" + oscillatorRegister + \".w\\n\";\n\t\tcode += \"sin \" + sin + \",\" + dgree + \"\\n\";\n\t\tcode += \"mul \" + distance + \".xyz,\" + sin + \",\" + oscillatorRegister + \".xyz\\n\";\n\t\tcode += \"add \" + animationRegisterData.positionTarget + \".xyz,\" + distance + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\n\n\t\tif (animationSet.needVelocity) {\n\t\t\tcode += \"cos \" + cos + \",\" + dgree + \"\\n\";\n\t\t\tcode += \"mul \" + distance + \".xyz,\" + cos + \",\" + oscillatorRegister + \".xyz\\n\";\n\t\t\tcode += \"add \" + animationRegisterData.velocityTarget + \".xyz,\" + distance + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz\\n\";\n\t\t}\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAnimationState(animator:AnimatorBase):ParticleOscillatorState\n\t{\n\t\treturn <ParticleOscillatorState> animator.getAnimationState(this);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGeneratePropertyOfOneParticle(param:ParticleProperties):void\n\t{\n\t\t//(Vector3D.x,Vector3D.y,Vector3D.z) is oscillator axis, Vector3D.w is oscillator cycle duration\n\t\tvar drift:Vector3D = param[ParticleOscillatorNode.OSCILLATOR_VECTOR3D];\n\t\tif (!drift)\n\t\t\tthrow(new Error(\"there is no \" + ParticleOscillatorNode.OSCILLATOR_VECTOR3D + \" in param!\"));\n\n\t\tthis._pOneData[0] = drift.x;\n\t\tthis._pOneData[1] = drift.y;\n\t\tthis._pOneData[2] = drift.z;\n\t\tif (drift.w <= 0)\n\t\t\tthrow(new Error(\"the cycle duration must greater than zero\"));\n\t\tthis._pOneData[3] = Math.PI*2/drift.w;\n\t}\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {ParticleProperties}\t\t\t\tfrom \"../../animators/data/ParticleProperties\";\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\nimport {ParticlePositionState}\t\t\tfrom \"../../animators/states/ParticlePositionState\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\n\n/**\n * A particle animation node used to set the starting position of a particle.\n */\nexport class ParticlePositionNode extends ParticleNodeBase\n{\n\t/** @private */\n\tpublic _iPosition:Vector3D;\n\n\t/**\n\t * Reference for position node properties on a single particle (when in local property mode).\n\t * Expects a <code>Vector3D</code> object representing position of the particle.\n\t */\n\tpublic static POSITION_VECTOR3D:string = \"PositionVector3D\";\n\n\t/**\n\t * Creates a new <code>ParticlePositionNode</code>\n\t *\n\t * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\n\t * @param    [optional] position        Defines the default position of the particle when in global mode. Defaults to 0,0,0.\n\t */\n\tconstructor(mode:number, position:Vector3D = null)\n\t{\n\t\tsuper(\"ParticlePosition\", mode, 3);\n\n\t\tthis._pStateClass = ParticlePositionState;\n\n\t\tthis._iPosition = position || new Vector3D();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAGALVertexCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\n\t{\n\t\tvar positionAttribute:ShaderRegisterElement = (this._pMode == ParticlePropertiesMode.GLOBAL)? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\n\t\tanimationRegisterData.setRegisterIndex(this, ParticlePositionState.POSITION_INDEX, positionAttribute.index);\n\n\t\treturn \"add \" + animationRegisterData.positionTarget + \".xyz,\" + positionAttribute + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAnimationState(animator:AnimatorBase):ParticlePositionState\n\t{\n\t\treturn <ParticlePositionState> animator.getAnimationState(this);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGeneratePropertyOfOneParticle(param:ParticleProperties):void\n\t{\n\t\tvar offset:Vector3D = param[ParticlePositionNode.POSITION_VECTOR3D];\n\t\tif (!offset)\n\t\t\tthrow(new Error(\"there is no \" + ParticlePositionNode.POSITION_VECTOR3D + \" in param!\"));\n\n\t\tthis._pOneData[0] = offset.x;\n\t\tthis._pOneData[1] = offset.y;\n\t\tthis._pOneData[2] = offset.z;\n\t}\n}",
    "import {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\nimport {ParticleRotateToHeadingState}\t\tfrom \"../../animators/states/ParticleRotateToHeadingState\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\n\n/**\n * A particle animation node used to control the rotation of a particle to match its heading vector.\n */\nexport class ParticleRotateToHeadingNode extends ParticleNodeBase\n{\n\t/**\n\t * Creates a new <code>ParticleBillboardNode</code>\n\t */\n\tconstructor()\n\t{\n\t\tsuper(\"ParticleRotateToHeading\", ParticlePropertiesMode.GLOBAL, 0, 3);\n\n\t\tthis._pStateClass = ParticleRotateToHeadingState;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAGALVertexCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar len:number = animationRegisterData.rotationRegisters.length;\n\t\tvar i:number;\n\t\tif (animationSet.hasBillboard) {\n\t\t\tvar temp1:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\t\tregisterCache.addVertexTempUsages(temp1, 1);\n\t\t\tvar temp2:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\t\tregisterCache.addVertexTempUsages(temp2, 1);\n\t\t\tvar temp3:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\n\t\t\tvar rotationMatrixRegister:ShaderRegisterElement = registerCache.getFreeVertexConstant();\n\t\t\tanimationRegisterData.setRegisterIndex(this, ParticleRotateToHeadingState.MATRIX_INDEX, rotationMatrixRegister.index);\n\t\t\tregisterCache.getFreeVertexConstant();\n\t\t\tregisterCache.getFreeVertexConstant();\n\t\t\tregisterCache.getFreeVertexConstant();\n\n\t\t\tregisterCache.removeVertexTempUsage(temp1);\n\t\t\tregisterCache.removeVertexTempUsage(temp2);\n\n\t\t\t//process the velocity\n\t\t\tcode += \"m33 \" + temp1 + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz,\" + rotationMatrixRegister + \"\\n\";\n\n\t\t\tcode += \"mov \" + temp3 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n\t\t\tcode += \"mov \" + temp3 + \".xy,\" + temp1 + \".xy\\n\";\n\t\t\tcode += \"nrm \" + temp3 + \".xyz,\" + temp3 + \".xyz\\n\";\n\n\t\t\t//temp3.x=cos,temp3.y=sin\n\t\t\t//only process z axis\n\t\t\tcode += \"mov \" + temp2 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n\t\t\tcode += \"mov \" + temp2 + \".x,\" + temp3 + \".y\\n\";\n\t\t\tcode += \"mov \" + temp2 + \".y,\" + temp3 + \".x\\n\";\n\t\t\tcode += \"mov \" + temp1 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n\t\t\tcode += \"mov \" + temp1 + \".x,\" + temp3 + \".x\\n\";\n\t\t\tcode += \"neg \" + temp1 + \".y,\" + temp3 + \".y\\n\";\n\t\t\tcode += \"mov \" + temp3 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n\t\t\tcode += \"mov \" + temp3 + \".z,\" + animationRegisterData.vertexOneConst + \"\\n\";\n\t\t\tcode += \"m33 \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp1 + \"\\n\";\n\t\t\tfor (i = 0; i < len; i++)\n\t\t\t\tcode += \"m33 \" + animationRegisterData.rotationRegisters[i] + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \",\" + temp1 + \"\\n\";\n\t\t} else {\n\t\t\tvar nrmVel:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\t\tregisterCache.addVertexTempUsages(nrmVel, 1);\n\n\t\t\tvar xAxis:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\t\tregisterCache.addVertexTempUsages(xAxis, 1);\n\n\t\t\tvar R:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\t\tregisterCache.addVertexTempUsages(R, 1);\n\t\t\tvar R_rev:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\t\tvar cos:ShaderRegisterElement = new ShaderRegisterElement(R.regName, R.index, 3);\n\t\t\tvar sin:ShaderRegisterElement = new ShaderRegisterElement(R_rev.regName, R_rev.index, 3);\n\t\t\tvar cos2:ShaderRegisterElement = new ShaderRegisterElement(nrmVel.regName, nrmVel.index, 3);\n\t\t\tvar tempSingle:ShaderRegisterElement = sin;\n\n\t\t\tregisterCache.removeVertexTempUsage(nrmVel);\n\t\t\tregisterCache.removeVertexTempUsage(xAxis);\n\t\t\tregisterCache.removeVertexTempUsage(R);\n\n\t\t\tcode += \"mov \" + xAxis + \".x,\" + animationRegisterData.vertexOneConst + \"\\n\";\n\t\t\tcode += \"mov \" + xAxis + \".yz,\" + animationRegisterData.vertexZeroConst + \"\\n\";\n\n\t\t\tcode += \"nrm \" + nrmVel + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz\\n\";\n\t\t\tcode += \"dp3 \" + cos2 + \",\" + nrmVel + \".xyz,\" + xAxis + \".xyz\\n\";\n\t\t\tcode += \"crs \" + nrmVel + \".xyz,\" + xAxis + \".xyz,\" + nrmVel + \".xyz\\n\";\n\t\t\tcode += \"nrm \" + nrmVel + \".xyz,\" + nrmVel + \".xyz\\n\";\n\t\t\t//use R as temp to judge if nrm is (0,0,0).\n\t\t\t//if nrm is (0,0,0) ,change it to (0,0,1).\n\t\t\tcode += \"dp3 \" + R + \".x,\" + nrmVel + \".xyz,\" + nrmVel + \".xyz\\n\";\n\t\t\tcode += \"sge \" + R + \".x,\" + animationRegisterData.vertexZeroConst + \",\" + R + \".x\\n\";\n\t\t\tcode += \"add \" + nrmVel + \".z,\" + R + \".x,\" + nrmVel + \".z\\n\";\n\n\t\t\tcode += \"add \" + tempSingle + \",\" + cos2 + \",\" + animationRegisterData.vertexOneConst + \"\\n\";\n\t\t\tcode += \"div \" + tempSingle + \",\" + tempSingle + \",\" + animationRegisterData.vertexTwoConst + \"\\n\";\n\t\t\tcode += \"sqt \" + cos + \",\" + tempSingle + \"\\n\";\n\n\t\t\tcode += \"sub \" + tempSingle + \",\" + animationRegisterData.vertexOneConst + \",\" + cos2 + \"\\n\";\n\t\t\tcode += \"div \" + tempSingle + \",\" + tempSingle + \",\" + animationRegisterData.vertexTwoConst + \"\\n\";\n\t\t\tcode += \"sqt \" + sin + \",\" + tempSingle + \"\\n\";\n\n\t\t\tcode += \"mul \" + R + \".xyz,\" + sin + \",\" + nrmVel + \".xyz\\n\";\n\n\t\t\t//use cos as R.w\n\n\t\t\tcode += \"mul \" + R_rev + \".xyz,\" + sin + \",\" + nrmVel + \".xyz\\n\";\n\t\t\tcode += \"neg \" + R_rev + \".xyz,\" + R_rev + \".xyz\\n\";\n\n\t\t\t//use cos as R_rev.w\n\n\t\t\t//nrmVel and xAxis are used as temp register\n\t\t\tcode += \"crs \" + nrmVel + \".xyz,\" + R + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz\\n\";\n\n\t\t\t//use cos as R.w\n\t\t\tcode += \"mul \" + xAxis + \".xyz,\" + cos + \",\" + animationRegisterData.scaleAndRotateTarget + \".xyz\\n\";\n\t\t\tcode += \"add \" + nrmVel + \".xyz,\" + nrmVel + \".xyz,\" + xAxis + \".xyz\\n\";\n\t\t\tcode += \"dp3 \" + xAxis + \".w,\" + R + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz\\n\";\n\t\t\tcode += \"neg \" + nrmVel + \".w,\" + xAxis + \".w\\n\";\n\n\t\t\tcode += \"crs \" + R + \".xyz,\" + nrmVel + \".xyz,\" + R_rev + \".xyz\\n\";\n\t\t\t//code += \"mul \" + xAxis + \".xyzw,\" + nrmVel + \".xyzw,\" +R_rev + \".w\\n\";\n\t\t\tcode += \"mul \" + xAxis + \".xyzw,\" + nrmVel + \".xyzw,\" + cos + \"\\n\";\n\t\t\tcode += \"add \" + R + \".xyz,\" + R + \".xyz,\" + xAxis + \".xyz\\n\";\n\t\t\tcode += \"mul \" + xAxis + \".xyz,\" + nrmVel + \".w,\" + R_rev + \".xyz\\n\";\n\n\t\t\tcode += \"add \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + R + \".xyz,\" + xAxis + \".xyz\\n\";\n\n\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\t//just repeat the calculate above\n\t\t\t\t//because of the limited registers, no need to optimise\n\t\t\t\tcode += \"mov \" + xAxis + \".x,\" + animationRegisterData.vertexOneConst + \"\\n\";\n\t\t\t\tcode += \"mov \" + xAxis + \".yz,\" + animationRegisterData.vertexZeroConst + \"\\n\";\n\t\t\t\tcode += \"nrm \" + nrmVel + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz\\n\";\n\t\t\t\tcode += \"dp3 \" + cos2 + \",\" + nrmVel + \".xyz,\" + xAxis + \".xyz\\n\";\n\t\t\t\tcode += \"crs \" + nrmVel + \".xyz,\" + xAxis + \".xyz,\" + nrmVel + \".xyz\\n\";\n\t\t\t\tcode += \"nrm \" + nrmVel + \".xyz,\" + nrmVel + \".xyz\\n\";\n\t\t\t\tcode += \"dp3 \" + R + \".x,\" + nrmVel + \".xyz,\" + nrmVel + \".xyz\\n\";\n\t\t\t\tcode += \"sge \" + R + \".x,\" + animationRegisterData.vertexZeroConst + \",\" + R + \".x\\n\";\n\t\t\t\tcode += \"add \" + nrmVel + \".z,\" + R + \".x,\" + nrmVel + \".z\\n\";\n\t\t\t\tcode += \"add \" + tempSingle + \",\" + cos2 + \",\" + animationRegisterData.vertexOneConst + \"\\n\";\n\t\t\t\tcode += \"div \" + tempSingle + \",\" + tempSingle + \",\" + animationRegisterData.vertexTwoConst + \"\\n\";\n\t\t\t\tcode += \"sqt \" + cos + \",\" + tempSingle + \"\\n\";\n\t\t\t\tcode += \"sub \" + tempSingle + \",\" + animationRegisterData.vertexOneConst + \",\" + cos2 + \"\\n\";\n\t\t\t\tcode += \"div \" + tempSingle + \",\" + tempSingle + \",\" + animationRegisterData.vertexTwoConst + \"\\n\";\n\t\t\t\tcode += \"sqt \" + sin + \",\" + tempSingle + \"\\n\";\n\t\t\t\tcode += \"mul \" + R + \".xyz,\" + sin + \",\" + nrmVel + \".xyz\\n\";\n\t\t\t\tcode += \"mul \" + R_rev + \".xyz,\" + sin + \",\" + nrmVel + \".xyz\\n\";\n\t\t\t\tcode += \"neg \" + R_rev + \".xyz,\" + R_rev + \".xyz\\n\";\n\t\t\t\tcode += \"crs \" + nrmVel + \".xyz,\" + R + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \".xyz\\n\";\n\t\t\t\tcode += \"mul \" + xAxis + \".xyz,\" + cos + \",\" + animationRegisterData.rotationRegisters[i] + \".xyz\\n\";\n\t\t\t\tcode += \"add \" + nrmVel + \".xyz,\" + nrmVel + \".xyz,\" + xAxis + \".xyz\\n\";\n\t\t\t\tcode += \"dp3 \" + xAxis + \".w,\" + R + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \".xyz\\n\";\n\t\t\t\tcode += \"neg \" + nrmVel + \".w,\" + xAxis + \".w\\n\";\n\t\t\t\tcode += \"crs \" + R + \".xyz,\" + nrmVel + \".xyz,\" + R_rev + \".xyz\\n\";\n\t\t\t\tcode += \"mul \" + xAxis + \".xyzw,\" + nrmVel + \".xyzw,\" + cos + \"\\n\";\n\t\t\t\tcode += \"add \" + R + \".xyz,\" + R + \".xyz,\" + xAxis + \".xyz\\n\";\n\t\t\t\tcode += \"mul \" + xAxis + \".xyz,\" + nrmVel + \".w,\" + R_rev + \".xyz\\n\";\n\t\t\t\tcode += \"add \" + animationRegisterData.rotationRegisters[i] + \".xyz,\" + R + \".xyz,\" + xAxis + \".xyz\\n\";\n\t\t\t}\n\n\t\t}\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAnimationState(animator:AnimatorBase):ParticleRotateToHeadingState\n\t{\n\t\treturn <ParticleRotateToHeadingState> animator.getAnimationState(this);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iProcessAnimationSetting(particleAnimationSet:ParticleAnimationSet):void\n\t{\n\t\tparticleAnimationSet.needVelocity = true;\n\t}\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {ParticleProperties}\t\t\t\tfrom \"../../animators/data/ParticleProperties\";\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\nimport {ParticleRotateToPositionState}\tfrom \"../../animators/states/ParticleRotateToPositionState\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\n\n/**\n * A particle animation node used to control the rotation of a particle to face to a position\n */\nexport class ParticleRotateToPositionNode extends ParticleNodeBase\n{\n\t/** @private */\n\tpublic _iPosition:Vector3D;\n\n\t/**\n\t * Reference for the position the particle will rotate to face for a single particle (when in local property mode).\n\t * Expects a <code>Vector3D</code> object representing the position that the particle must face.\n\t */\n\tpublic static POSITION_VECTOR3D:string = \"RotateToPositionVector3D\";\n\n\t/**\n\t * Creates a new <code>ParticleRotateToPositionNode</code>\n\t */\n\tconstructor(mode:number, position:Vector3D = null)\n\t{\n\t\tsuper(\"ParticleRotateToPosition\", mode, 3, 3);\n\n\t\tthis._pStateClass = ParticleRotateToPositionState;\n\n\t\tthis._iPosition = position || new Vector3D();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAGALVertexCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\n\t{\n\t\tvar positionAttribute:ShaderRegisterElement = (this._pMode == ParticlePropertiesMode.GLOBAL)? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\n\t\tanimationRegisterData.setRegisterIndex(this, ParticleRotateToPositionState.POSITION_INDEX, positionAttribute.index);\n\n\t\tvar code:string = \"\";\n\t\tvar len:number = animationRegisterData.rotationRegisters.length;\n\t\tvar i:number;\n\t\tif (animationSet.hasBillboard) {\n\t\t\tvar temp1:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\t\tregisterCache.addVertexTempUsages(temp1, 1);\n\t\t\tvar temp2:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\t\tregisterCache.addVertexTempUsages(temp2, 1);\n\t\t\tvar temp3:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\n\t\t\tvar rotationMatrixRegister:ShaderRegisterElement = registerCache.getFreeVertexConstant();\n\t\t\tanimationRegisterData.setRegisterIndex(this, ParticleRotateToPositionState.MATRIX_INDEX, rotationMatrixRegister.index);\n\t\t\tregisterCache.getFreeVertexConstant();\n\t\t\tregisterCache.getFreeVertexConstant();\n\t\t\tregisterCache.getFreeVertexConstant();\n\n\t\t\tregisterCache.removeVertexTempUsage(temp1);\n\t\t\tregisterCache.removeVertexTempUsage(temp2);\n\n\t\t\t//process the position\n\t\t\tcode += \"sub \" + temp1 + \".xyz,\" + positionAttribute + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\n\t\t\tcode += \"m33 \" + temp1 + \".xyz,\" + temp1 + \".xyz,\" + rotationMatrixRegister + \"\\n\";\n\n\t\t\tcode += \"mov \" + temp3 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n\t\t\tcode += \"mov \" + temp3 + \".xy,\" + temp1 + \".xy\\n\";\n\t\t\tcode += \"nrm \" + temp3 + \".xyz,\" + temp3 + \".xyz\\n\";\n\n\t\t\t//temp3.x=cos,temp3.y=sin\n\t\t\t//only process z axis\n\t\t\tcode += \"mov \" + temp2 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n\t\t\tcode += \"mov \" + temp2 + \".x,\" + temp3 + \".y\\n\";\n\t\t\tcode += \"mov \" + temp2 + \".y,\" + temp3 + \".x\\n\";\n\t\t\tcode += \"mov \" + temp1 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n\t\t\tcode += \"mov \" + temp1 + \".x,\" + temp3 + \".x\\n\";\n\t\t\tcode += \"neg \" + temp1 + \".y,\" + temp3 + \".y\\n\";\n\t\t\tcode += \"mov \" + temp3 + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n\t\t\tcode += \"mov \" + temp3 + \".z,\" + animationRegisterData.vertexOneConst + \"\\n\";\n\t\t\tcode += \"m33 \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp1 + \"\\n\";\n\t\t\tfor (i = 0; i < len; i++)\n\t\t\t\tcode += \"m33 \" + animationRegisterData.rotationRegisters[i] + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \",\" + temp1 + \"\\n\";\n\t\t} else {\n\t\t\tvar nrmDirection:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\t\tregisterCache.addVertexTempUsages(nrmDirection, 1);\n\n\t\t\tvar temp:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\t\tregisterCache.addVertexTempUsages(temp, 1);\n\t\t\tvar cos:ShaderRegisterElement = new ShaderRegisterElement(temp.regName, temp.index, 0);\n\t\t\tvar sin:ShaderRegisterElement = new ShaderRegisterElement(temp.regName, temp.index, 1);\n\t\t\tvar o_temp:ShaderRegisterElement = new ShaderRegisterElement(temp.regName, temp.index, 2);\n\t\t\tvar tempSingle:ShaderRegisterElement = new ShaderRegisterElement(temp.regName, temp.index, 3);\n\n\t\t\tvar R:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\t\tregisterCache.addVertexTempUsages(R, 1);\n\n\t\t\tregisterCache.removeVertexTempUsage(nrmDirection);\n\t\t\tregisterCache.removeVertexTempUsage(temp);\n\t\t\tregisterCache.removeVertexTempUsage(R);\n\n\t\t\tcode += \"sub \" + nrmDirection + \".xyz,\" + positionAttribute + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\n\t\t\tcode += \"nrm \" + nrmDirection + \".xyz,\" + nrmDirection + \".xyz\\n\";\n\n\t\t\tcode += \"mov \" + sin + \",\" + nrmDirection + \".y\\n\";\n\t\t\tcode += \"mul \" + cos + \",\" + sin + \",\" + sin + \"\\n\";\n\t\t\tcode += \"sub \" + cos + \",\" + animationRegisterData.vertexOneConst + \",\" + cos + \"\\n\";\n\t\t\tcode += \"sqt \" + cos + \",\" + cos + \"\\n\";\n\n\t\t\tcode += \"mul \" + R + \".x,\" + cos + \",\" + animationRegisterData.scaleAndRotateTarget + \".y\\n\";\n\t\t\tcode += \"mul \" + R + \".y,\" + sin + \",\" + animationRegisterData.scaleAndRotateTarget + \".z\\n\";\n\t\t\tcode += \"mul \" + R + \".z,\" + sin + \",\" + animationRegisterData.scaleAndRotateTarget + \".y\\n\";\n\t\t\tcode += \"mul \" + R + \".w,\" + cos + \",\" + animationRegisterData.scaleAndRotateTarget + \".z\\n\";\n\n\t\t\tcode += \"sub \" + animationRegisterData.scaleAndRotateTarget + \".y,\" + R + \".x,\" + R + \".y\\n\";\n\t\t\tcode += \"add \" + animationRegisterData.scaleAndRotateTarget + \".z,\" + R + \".z,\" + R + \".w\\n\";\n\n\t\t\tcode += \"abs \" + R + \".y,\" + nrmDirection + \".y\\n\";\n\t\t\tcode += \"sge \" + R + \".z,\" + R + \".y,\" + animationRegisterData.vertexOneConst + \"\\n\";\n\t\t\tcode += \"mul \" + R + \".x,\" + R + \".y,\" + nrmDirection + \".y\\n\";\n\n\t\t\t//judgu if nrmDirection=(0,1,0);\n\t\t\tcode += \"mov \" + nrmDirection + \".y,\" + animationRegisterData.vertexZeroConst + \"\\n\";\n\t\t\tcode += \"dp3 \" + sin + \",\" + nrmDirection + \".xyz,\" + nrmDirection + \".xyz\\n\";\n\t\t\tcode += \"sge \" + tempSingle + \",\" + animationRegisterData.vertexZeroConst + \",\" + sin + \"\\n\";\n\n\t\t\tcode += \"mov \" + nrmDirection + \".y,\" + animationRegisterData.vertexZeroConst + \"\\n\";\n\t\t\tcode += \"nrm \" + nrmDirection + \".xyz,\" + nrmDirection + \".xyz\\n\";\n\n\t\t\tcode += \"sub \" + sin + \",\" + animationRegisterData.vertexOneConst + \",\" + tempSingle + \"\\n\";\n\t\t\tcode += \"mul \" + sin + \",\" + sin + \",\" + nrmDirection + \".x\\n\";\n\n\t\t\tcode += \"mov \" + cos + \",\" + nrmDirection + \".z\\n\";\n\t\t\tcode += \"neg \" + cos + \",\" + cos + \"\\n\";\n\t\t\tcode += \"sub \" + o_temp + \",\" + animationRegisterData.vertexOneConst + \",\" + cos + \"\\n\";\n\t\t\tcode += \"mul \" + o_temp + \",\" + R + \".x,\" + tempSingle + \"\\n\";\n\t\t\tcode += \"add \" + cos + \",\" + cos + \",\" + o_temp + \"\\n\";\n\n\t\t\tcode += \"mul \" + R + \".x,\" + cos + \",\" + animationRegisterData.scaleAndRotateTarget + \".x\\n\";\n\t\t\tcode += \"mul \" + R + \".y,\" + sin + \",\" + animationRegisterData.scaleAndRotateTarget + \".z\\n\";\n\t\t\tcode += \"mul \" + R + \".z,\" + sin + \",\" + animationRegisterData.scaleAndRotateTarget + \".x\\n\";\n\t\t\tcode += \"mul \" + R + \".w,\" + cos + \",\" + animationRegisterData.scaleAndRotateTarget + \".z\\n\";\n\n\t\t\tcode += \"sub \" + animationRegisterData.scaleAndRotateTarget + \".x,\" + R + \".x,\" + R + \".y\\n\";\n\t\t\tcode += \"add \" + animationRegisterData.scaleAndRotateTarget + \".z,\" + R + \".z,\" + R + \".w\\n\";\n\n\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\t//just repeat the calculate above\n\t\t\t\t//because of the limited registers, no need to optimise\n\t\t\t\tcode += \"sub \" + nrmDirection + \".xyz,\" + positionAttribute + \".xyz,\" + animationRegisterData.positionTarget + \".xyz\\n\";\n\t\t\t\tcode += \"nrm \" + nrmDirection + \".xyz,\" + nrmDirection + \".xyz\\n\";\n\t\t\t\tcode += \"mov \" + sin + \",\" + nrmDirection + \".y\\n\";\n\t\t\t\tcode += \"mul \" + cos + \",\" + sin + \",\" + sin + \"\\n\";\n\t\t\t\tcode += \"sub \" + cos + \",\" + animationRegisterData.vertexOneConst + \",\" + cos + \"\\n\";\n\t\t\t\tcode += \"sqt \" + cos + \",\" + cos + \"\\n\";\n\t\t\t\tcode += \"mul \" + R + \".x,\" + cos + \",\" + animationRegisterData.rotationRegisters[i] + \".y\\n\";\n\t\t\t\tcode += \"mul \" + R + \".y,\" + sin + \",\" + animationRegisterData.rotationRegisters[i] + \".z\\n\";\n\t\t\t\tcode += \"mul \" + R + \".z,\" + sin + \",\" + animationRegisterData.rotationRegisters[i] + \".y\\n\";\n\t\t\t\tcode += \"mul \" + R + \".w,\" + cos + \",\" + animationRegisterData.rotationRegisters[i] + \".z\\n\";\n\t\t\t\tcode += \"sub \" + animationRegisterData.rotationRegisters[i] + \".y,\" + R + \".x,\" + R + \".y\\n\";\n\t\t\t\tcode += \"add \" + animationRegisterData.rotationRegisters[i] + \".z,\" + R + \".z,\" + R + \".w\\n\";\n\t\t\t\tcode += \"abs \" + R + \".y,\" + nrmDirection + \".y\\n\";\n\t\t\t\tcode += \"sge \" + R + \".z,\" + R + \".y,\" + animationRegisterData.vertexOneConst + \"\\n\";\n\t\t\t\tcode += \"mul \" + R + \".x,\" + R + \".y,\" + nrmDirection + \".y\\n\";\n\t\t\t\tcode += \"mov \" + nrmDirection + \".y,\" + animationRegisterData.vertexZeroConst + \"\\n\";\n\t\t\t\tcode += \"dp3 \" + sin + \",\" + nrmDirection + \".xyz,\" + nrmDirection + \".xyz\\n\";\n\t\t\t\tcode += \"sge \" + tempSingle + \",\" + animationRegisterData.vertexZeroConst + \",\" + sin + \"\\n\";\n\t\t\t\tcode += \"mov \" + nrmDirection + \".y,\" + animationRegisterData.vertexZeroConst + \"\\n\";\n\t\t\t\tcode += \"nrm \" + nrmDirection + \".xyz,\" + nrmDirection + \".xyz\\n\";\n\t\t\t\tcode += \"sub \" + sin + \",\" + animationRegisterData.vertexOneConst + \",\" + tempSingle + \"\\n\";\n\t\t\t\tcode += \"mul \" + sin + \",\" + sin + \",\" + nrmDirection + \".x\\n\";\n\t\t\t\tcode += \"mov \" + cos + \",\" + nrmDirection + \".z\\n\";\n\t\t\t\tcode += \"neg \" + cos + \",\" + cos + \"\\n\";\n\t\t\t\tcode += \"sub \" + o_temp + \",\" + animationRegisterData.vertexOneConst + \",\" + cos + \"\\n\";\n\t\t\t\tcode += \"mul \" + o_temp + \",\" + R + \".x,\" + tempSingle + \"\\n\";\n\t\t\t\tcode += \"add \" + cos + \",\" + cos + \",\" + o_temp + \"\\n\";\n\t\t\t\tcode += \"mul \" + R + \".x,\" + cos + \",\" + animationRegisterData.rotationRegisters[i] + \".x\\n\";\n\t\t\t\tcode += \"mul \" + R + \".y,\" + sin + \",\" + animationRegisterData.rotationRegisters[i] + \".z\\n\";\n\t\t\t\tcode += \"mul \" + R + \".z,\" + sin + \",\" + animationRegisterData.rotationRegisters[i] + \".x\\n\";\n\t\t\t\tcode += \"mul \" + R + \".w,\" + cos + \",\" + animationRegisterData.rotationRegisters[i] + \".z\\n\";\n\t\t\t\tcode += \"sub \" + animationRegisterData.rotationRegisters[i] + \".x,\" + R + \".x,\" + R + \".y\\n\";\n\t\t\t\tcode += \"add \" + animationRegisterData.rotationRegisters[i] + \".z,\" + R + \".z,\" + R + \".w\\n\";\n\t\t\t}\n\t\t}\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAnimationState(animator:AnimatorBase):ParticleRotateToPositionState\n\t{\n\t\treturn <ParticleRotateToPositionState> animator.getAnimationState(this);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGeneratePropertyOfOneParticle(param:ParticleProperties):void\n\t{\n\t\tvar offset:Vector3D = param[ParticleRotateToPositionNode.POSITION_VECTOR3D];\n\t\tif (!offset)\n\t\t\tthrow(new Error(\"there is no \" + ParticleRotateToPositionNode.POSITION_VECTOR3D + \" in param!\"));\n\n\t\tthis._pOneData[0] = offset.x;\n\t\tthis._pOneData[1] = offset.y;\n\t\tthis._pOneData[2] = offset.z;\n\t}\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {ParticleProperties}\t\t\t\tfrom \"../../animators/data/ParticleProperties\";\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\nimport {ParticleRotationalVelocityState}\tfrom \"../../animators/states/ParticleRotationalVelocityState\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\n\n/**\n * A particle animation node used to set the starting rotational velocity of a particle.\n */\nexport class ParticleRotationalVelocityNode extends ParticleNodeBase\n{\n\t/** @private */\n\tpublic _iRotationalVelocity:Vector3D;\n\n\t/**\n\t * Reference for rotational velocity node properties on a single particle (when in local property mode).\n\t * Expects a <code>Vector3D</code> object representing the rotational velocity around an axis of the particle.\n\t */\n\tpublic static ROTATIONALVELOCITY_VECTOR3D:string = \"RotationalVelocityVector3D\";\n\n\t/**\n\t * Creates a new <code>ParticleRotationalVelocityNode</code>\n\t *\n\t * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\n\t */\n\tconstructor(mode:number, rotationalVelocity:Vector3D = null)\n\t{\n\t\tsuper(\"ParticleRotationalVelocity\", mode, 4);\n\n\t\tthis._pStateClass = ParticleRotationalVelocityState;\n\n\t\tthis._iRotationalVelocity = rotationalVelocity || new Vector3D();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAGALVertexCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\n\t{\n\t\tvar rotationRegister:ShaderRegisterElement = (this._pMode == ParticlePropertiesMode.GLOBAL)? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\n\t\tanimationRegisterData.setRegisterIndex(this, ParticleRotationalVelocityState.ROTATIONALVELOCITY_INDEX, rotationRegister.index);\n\n\t\tvar nrmVel:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\tregisterCache.addVertexTempUsages(nrmVel, 1);\n\n\t\tvar xAxis:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\tregisterCache.addVertexTempUsages(xAxis, 1);\n\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\tregisterCache.addVertexTempUsages(temp, 1);\n\t\tvar Rtemp:ShaderRegisterElement = new ShaderRegisterElement(temp.regName, temp.index);\n\t\tvar R_rev:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\tR_rev = new ShaderRegisterElement(R_rev.regName, R_rev.index);\n\n\t\tvar cos:ShaderRegisterElement = new ShaderRegisterElement(Rtemp.regName, Rtemp.index, 3);\n\t\tvar sin:ShaderRegisterElement = new ShaderRegisterElement(R_rev.regName, R_rev.index, 3);\n\n\t\tregisterCache.removeVertexTempUsage(nrmVel);\n\t\tregisterCache.removeVertexTempUsage(xAxis);\n\t\tregisterCache.removeVertexTempUsage(temp);\n\n\t\tvar code:string = \"\";\n\t\tcode += \"mov \" + nrmVel + \".xyz,\" + rotationRegister + \".xyz\\n\";\n\t\tcode += \"mov \" + nrmVel + \".w,\" + animationRegisterData.vertexZeroConst + \"\\n\";\n\n\t\tcode += \"mul \" + cos + \",\" + animationRegisterData.vertexTime + \",\" + rotationRegister + \".w\\n\";\n\n\t\tcode += \"sin \" + sin + \",\" + cos + \"\\n\";\n\t\tcode += \"cos \" + cos + \",\" + cos + \"\\n\";\n\n\t\tcode += \"mul \" + Rtemp + \".xyz,\" + sin + \",\" + nrmVel + \".xyz\\n\";\n\n\t\tcode += \"mul \" + R_rev + \".xyz,\" + sin + \",\" + nrmVel + \".xyz\\n\";\n\t\tcode += \"neg \" + R_rev + \".xyz,\" + R_rev + \".xyz\\n\";\n\n\t\t//nrmVel and xAxis are used as temp register\n\t\tcode += \"crs \" + nrmVel + \".xyz,\" + Rtemp + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz\\n\";\n\n\t\tcode += \"mul \" + xAxis + \".xyz,\" + cos + \",\" + animationRegisterData.scaleAndRotateTarget + \".xyz\\n\";\n\t\tcode += \"add \" + nrmVel + \".xyz,\" + nrmVel + \".xyz,\" + xAxis + \".xyz\\n\";\n\t\tcode += \"dp3 \" + xAxis + \".w,\" + Rtemp + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz\\n\";\n\t\tcode += \"neg \" + nrmVel + \".w,\" + xAxis + \".w\\n\";\n\n\t\tcode += \"crs \" + Rtemp + \".xyz,\" + nrmVel + \".xyz,\" + R_rev + \".xyz\\n\";\n\n\t\t//use cos as R_rev.w\n\t\tcode += \"mul \" + xAxis + \".xyzw,\" + nrmVel + \".xyzw,\" + cos + \"\\n\";\n\t\tcode += \"add \" + Rtemp + \".xyz,\" + Rtemp + \".xyz,\" + xAxis + \".xyz\\n\";\n\t\tcode += \"mul \" + xAxis + \".xyz,\" + nrmVel + \".w,\" + R_rev + \".xyz\\n\";\n\n\t\tcode += \"add \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + Rtemp + \".xyz,\" + xAxis + \".xyz\\n\";\n\n\t\tvar len:number = animationRegisterData.rotationRegisters.length;\n\t\tfor (var i:number = 0; i < len; i++) {\n\t\t\tcode += \"mov \" + nrmVel + \".xyz,\" + rotationRegister + \".xyz\\n\";\n\t\t\tcode += \"mov \" + nrmVel + \".w,\" + animationRegisterData.vertexZeroConst + \"\\n\";\n\t\t\tcode += \"mul \" + cos + \",\" + animationRegisterData.vertexTime + \",\" + rotationRegister + \".w\\n\";\n\t\t\tcode += \"sin \" + sin + \",\" + cos + \"\\n\";\n\t\t\tcode += \"cos \" + cos + \",\" + cos + \"\\n\";\n\t\t\tcode += \"mul \" + Rtemp + \".xyz,\" + sin + \",\" + nrmVel + \".xyz\\n\";\n\t\t\tcode += \"mul \" + R_rev + \".xyz,\" + sin + \",\" + nrmVel + \".xyz\\n\";\n\t\t\tcode += \"neg \" + R_rev + \".xyz,\" + R_rev + \".xyz\\n\";\n\t\t\tcode += \"crs \" + nrmVel + \".xyz,\" + Rtemp + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \".xyz\\n\";\n\t\t\tcode += \"mul \" + xAxis + \".xyz,\" + cos + \",\" + animationRegisterData.rotationRegisters[i] + \"\\n\";\n\t\t\tcode += \"add \" + nrmVel + \".xyz,\" + nrmVel + \".xyz,\" + xAxis + \".xyz\\n\";\n\t\t\tcode += \"dp3 \" + xAxis + \".w,\" + Rtemp + \".xyz,\" + animationRegisterData.rotationRegisters[i] + \"\\n\";\n\t\t\tcode += \"neg \" + nrmVel + \".w,\" + xAxis + \".w\\n\";\n\t\t\tcode += \"crs \" + Rtemp + \".xyz,\" + nrmVel + \".xyz,\" + R_rev + \".xyz\\n\";\n\t\t\tcode += \"mul \" + xAxis + \".xyzw,\" + nrmVel + \".xyzw,\" + cos + \"\\n\";\n\t\t\tcode += \"add \" + Rtemp + \".xyz,\" + Rtemp + \".xyz,\" + xAxis + \".xyz\\n\";\n\t\t\tcode += \"mul \" + xAxis + \".xyz,\" + nrmVel + \".w,\" + R_rev + \".xyz\\n\";\n\t\t\tcode += \"add \" + animationRegisterData.rotationRegisters[i] + \",\" + Rtemp + \".xyz,\" + xAxis + \".xyz\\n\";\n\t\t}\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAnimationState(animator:AnimatorBase):ParticleRotationalVelocityState\n\t{\n\t\treturn <ParticleRotationalVelocityState> animator.getAnimationState(this);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGeneratePropertyOfOneParticle(param:ParticleProperties):void\n\t{\n\t\t//(Vector3d.x,Vector3d.y,Vector3d.z) is rotation axis,Vector3d.w is cycle duration\n\t\tvar rotate:Vector3D = param[ParticleRotationalVelocityNode.ROTATIONALVELOCITY_VECTOR3D];\n\t\tif (!rotate)\n\t\t\tthrow(new Error(\"there is no \" + ParticleRotationalVelocityNode.ROTATIONALVELOCITY_VECTOR3D + \" in param!\"));\n\n\t\tif (rotate.length <= 0)\n\t\t\trotate.z = 1; //set the default direction\n\t\telse\n\t\t\trotate.normalize();\n\n\t\tthis._pOneData[0] = rotate.x;\n\t\tthis._pOneData[1] = rotate.y;\n\t\tthis._pOneData[2] = rotate.z;\n\t\tif (rotate.w <= 0)\n\t\t\tthrow(new Error(\"the cycle duration must greater than zero\"));\n\t\t// it's used as angle/2 in agal\n\t\tthis._pOneData[3] = Math.PI/rotate.w;\n\t}\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {ParticleProperties}\t\t\t\tfrom \"../../animators/data/ParticleProperties\";\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\nimport {ParticleScaleState}\t\t\t\tfrom \"../../animators/states/ParticleScaleState\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\n\n/**\n * A particle animation node used to control the scale variation of a particle over time.\n */\nexport class ParticleScaleNode extends ParticleNodeBase\n{\n\t/** @private */\n\tpublic _iUsesCycle:boolean;\n\n\t/** @private */\n\tpublic _iUsesPhase:boolean;\n\n\t/** @private */\n\tpublic _iMinScale:number;\n\t/** @private */\n\tpublic _iMaxScale:number;\n\t/** @private */\n\tpublic _iCycleDuration:number;\n\t/** @private */\n\tpublic _iCyclePhase:number;\n\n\t/**\n\t * Reference for scale node properties on a single particle (when in local property mode).\n\t * Expects a <code>Vector3D</code> representing the min scale (x), max scale(y), optional cycle speed (z) and phase offset (w) applied to the particle.\n\t */\n\tpublic static SCALE_VECTOR3D:string = \"ScaleVector3D\";\n\n\t/**\n\t * Creates a new <code>ParticleScaleNode</code>\n\t *\n\t * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\n\t * @param    [optional] usesCycle       Defines whether the node uses the <code>cycleDuration</code> property in the shader to calculate the period of animation independent of particle duration. Defaults to false.\n\t * @param    [optional] usesPhase       Defines whether the node uses the <code>cyclePhase</code> property in the shader to calculate a starting offset to the animation cycle. Defaults to false.\n\t * @param    [optional] minScale        Defines the default min scale transform of the node, when in global mode. Defaults to 1.\n\t * @param    [optional] maxScale        Defines the default max color transform of the node, when in global mode. Defaults to 1.\n\t * @param    [optional] cycleDuration   Defines the default duration of the animation in seconds, used as a period independent of particle duration when in global mode. Defaults to 1.\n\t * @param    [optional] cyclePhase      Defines the default phase of the cycle in degrees, used as the starting offset of the cycle when in global mode. Defaults to 0.\n\t */\n\tconstructor(mode:number, usesCycle:boolean, usesPhase:boolean, minScale:number = 1, maxScale:number = 1, cycleDuration:number = 1, cyclePhase:number = 0)\n\t{\n\t\tsuper(\"ParticleScale\", mode, (usesCycle && usesPhase)? 4 : ((usesCycle || usesPhase)? 3 : 2), 3);\n\n\t\tthis._pStateClass = ParticleScaleState;\n\n\t\tthis._iUsesCycle = usesCycle;\n\t\tthis._iUsesPhase = usesPhase;\n\n\t\tthis._iMinScale = minScale;\n\t\tthis._iMaxScale = maxScale;\n\t\tthis._iCycleDuration = cycleDuration;\n\t\tthis._iCyclePhase = cyclePhase;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAGALVertexCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeVertexSingleTemp();\n\n\t\tvar scaleRegister:ShaderRegisterElement = (this._pMode == ParticlePropertiesMode.GLOBAL)? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\n\t\tanimationRegisterData.setRegisterIndex(this, ParticleScaleState.SCALE_INDEX, scaleRegister.index);\n\n\t\tif (this._iUsesCycle) {\n\t\t\tcode += \"mul \" + temp + \",\" + animationRegisterData.vertexTime + \",\" + scaleRegister + \".z\\n\";\n\n\t\t\tif (this._iUsesPhase)\n\t\t\t\tcode += \"add \" + temp + \",\" + temp + \",\" + scaleRegister + \".w\\n\";\n\n\t\t\tcode += \"sin \" + temp + \",\" + temp + \"\\n\";\n\t\t}\n\n\t\tcode += \"mul \" + temp + \",\" + scaleRegister + \".y,\" + ((this._iUsesCycle)? temp : animationRegisterData.vertexLife) + \"\\n\";\n\t\tcode += \"add \" + temp + \",\" + scaleRegister + \".x,\" + temp + \"\\n\";\n\t\tcode += \"mul \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp + \"\\n\";\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAnimationState(animator:AnimatorBase):ParticleScaleState\n\t{\n\t\treturn <ParticleScaleState> animator.getAnimationState(this);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGeneratePropertyOfOneParticle(param:ParticleProperties):void\n\t{\n\t\tvar scale:Vector3D = param[ParticleScaleNode.SCALE_VECTOR3D];\n\t\tif (!scale)\n\t\t\tthrow(new Error(\"there is no \" + ParticleScaleNode.SCALE_VECTOR3D + \" in param!\"));\n\n\t\tif (this._iUsesCycle) {\n\t\t\tthis._pOneData[0] = (scale.x + scale.y)/2;\n\t\t\tthis._pOneData[1] = Math.abs(scale.x - scale.y)/2;\n\t\t\tif (scale.z <= 0)\n\t\t\t\tthrow(new Error(\"the cycle duration must be greater than zero\"));\n\t\t\tthis._pOneData[2] = Math.PI*2/scale.z;\n\t\t\tif (this._iUsesPhase)\n\t\t\t\tthis._pOneData[3] = scale.w*Math.PI/180;\n\t\t} else {\n\t\t\tthis._pOneData[0] = scale.x;\n\t\t\tthis._pOneData[1] = scale.y - scale.x;\n\t\t}\n\t}\n}",
    "import {ColorTransform}\t\t\t\t\tfrom \"awayjs-core/lib/geom/ColorTransform\";\n\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {ColorSegmentPoint}\t\t\t\tfrom \"../../animators/data/ColorSegmentPoint\";\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\nimport {ParticleSegmentedColorState}\t\tfrom \"../../animators/states/ParticleSegmentedColorState\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\n\n/**\n *\n */\nexport class ParticleSegmentedColorNode extends ParticleNodeBase\n{\n\t/** @private */\n\tpublic _iUsesMultiplier:boolean;\n\t/** @private */\n\tpublic _iUsesOffset:boolean;\n\t/** @private */\n\tpublic _iStartColor:ColorTransform;\n\t/** @private */\n\tpublic _iEndColor:ColorTransform;\n\t/** @private */\n\tpublic _iNumSegmentPoint:number;\n\t/** @private */\n\tpublic _iSegmentPoints:Array<ColorSegmentPoint>;\n\n\tconstructor(usesMultiplier:boolean, usesOffset:boolean, numSegmentPoint:number, startColor:ColorTransform, endColor:ColorTransform, segmentPoints:Array<ColorSegmentPoint>)\n\t{\n\t\t//because of the stage3d register limitation, it only support the global mode\n\t\tsuper(\"ParticleSegmentedColor\", ParticlePropertiesMode.GLOBAL, 0, ParticleAnimationSet.COLOR_PRIORITY);\n\n\t\tthis._pStateClass = ParticleSegmentedColorState;\n\n\t\tif (numSegmentPoint > 4)\n\t\t\tthrow(new Error(\"the numSegmentPoint must be less or equal 4\"));\n\t\tthis._iUsesMultiplier = usesMultiplier;\n\t\tthis._iUsesOffset = usesOffset;\n\t\tthis._iNumSegmentPoint = numSegmentPoint;\n\t\tthis._iStartColor = startColor;\n\t\tthis._iEndColor = endColor;\n\t\tthis._iSegmentPoints = segmentPoints;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iProcessAnimationSetting(particleAnimationSet:ParticleAnimationSet):void\n\t{\n\t\tif (this._iUsesMultiplier)\n\t\t\tparticleAnimationSet.hasColorMulNode = true;\n\t\tif (this._iUsesOffset)\n\t\t\tparticleAnimationSet.hasColorAddNode = true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAGALVertexCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tif (shader.usesFragmentAnimation) {\n\t\t\tvar accMultiplierColor:ShaderRegisterElement;\n\t\t\t//var accOffsetColor:ShaderRegisterElement;\n\t\t\tif (this._iUsesMultiplier) {\n\t\t\t\taccMultiplierColor = registerCache.getFreeVertexVectorTemp();\n\t\t\t\tregisterCache.addVertexTempUsages(accMultiplierColor, 1);\n\t\t\t}\n\n\t\t\tvar tempColor:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\t\tregisterCache.addVertexTempUsages(tempColor, 1);\n\n\t\t\tvar temp:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\t\tvar accTime:ShaderRegisterElement = new ShaderRegisterElement(temp.regName, temp.index, 0);\n\t\t\tvar tempTime:ShaderRegisterElement = new ShaderRegisterElement(temp.regName, temp.index, 1);\n\n\t\t\tif (this._iUsesMultiplier)\n\t\t\t\tregisterCache.removeVertexTempUsage(accMultiplierColor);\n\n\t\t\tregisterCache.removeVertexTempUsage(tempColor);\n\n\t\t\t//for saving all the life values (at most 4)\n\t\t\tvar lifeTimeRegister:ShaderRegisterElement = registerCache.getFreeVertexConstant();\n\t\t\tanimationRegisterData.setRegisterIndex(this, ParticleSegmentedColorState.TIME_DATA_INDEX, lifeTimeRegister.index);\n\n\t\t\tvar i:number;\n\n\t\t\tvar startMulValue:ShaderRegisterElement;\n\t\t\tvar deltaMulValues:Array<ShaderRegisterElement>;\n\t\t\tif (this._iUsesMultiplier) {\n\t\t\t\tstartMulValue = registerCache.getFreeVertexConstant();\n\t\t\t\tanimationRegisterData.setRegisterIndex(this, ParticleSegmentedColorState.START_MULTIPLIER_INDEX, startMulValue.index);\n\t\t\t\tdeltaMulValues = new Array<ShaderRegisterElement>();\n\t\t\t\tfor (i = 0; i < this._iNumSegmentPoint + 1; i++)\n\t\t\t\t\tdeltaMulValues.push(registerCache.getFreeVertexConstant());\n\t\t\t}\n\n\t\t\tvar startOffsetValue:ShaderRegisterElement;\n\t\t\tvar deltaOffsetValues:Array<ShaderRegisterElement>;\n\t\t\tif (this._iUsesOffset) {\n\t\t\t\tstartOffsetValue = registerCache.getFreeVertexConstant();\n\t\t\t\tanimationRegisterData.setRegisterIndex(this, ParticleSegmentedColorState.START_OFFSET_INDEX, startOffsetValue.index);\n\t\t\t\tdeltaOffsetValues = new Array<ShaderRegisterElement>();\n\t\t\t\tfor (i = 0; i < this._iNumSegmentPoint + 1; i++)\n\t\t\t\t\tdeltaOffsetValues.push(registerCache.getFreeVertexConstant());\n\t\t\t}\n\n\t\t\tif (this._iUsesMultiplier)\n\t\t\t\tcode += \"mov \" + accMultiplierColor + \",\" + startMulValue + \"\\n\";\n\t\t\tif (this._iUsesOffset)\n\t\t\t\tcode += \"add \" + animationRegisterData.colorAddTarget + \",\" + animationRegisterData.colorAddTarget + \",\" + startOffsetValue + \"\\n\";\n\n\t\t\tfor (i = 0; i < this._iNumSegmentPoint; i++) {\n\t\t\t\tswitch (i) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tcode += \"min \" + tempTime + \",\" + animationRegisterData.vertexLife + \",\" + lifeTimeRegister + \".x\\n\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tcode += \"sub \" + accTime + \",\" + animationRegisterData.vertexLife + \",\" + lifeTimeRegister + \".x\\n\";\n\t\t\t\t\t\tcode += \"max \" + tempTime + \",\" + accTime + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n\t\t\t\t\t\tcode += \"min \" + tempTime + \",\" + tempTime + \",\" + lifeTimeRegister + \".y\\n\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tcode += \"sub \" + accTime + \",\" + accTime + \",\" + lifeTimeRegister + \".y\\n\";\n\t\t\t\t\t\tcode += \"max \" + tempTime + \",\" + accTime + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n\t\t\t\t\t\tcode += \"min \" + tempTime + \",\" + tempTime + \",\" + lifeTimeRegister + \".z\\n\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tcode += \"sub \" + accTime + \",\" + accTime + \",\" + lifeTimeRegister + \".z\\n\";\n\t\t\t\t\t\tcode += \"max \" + tempTime + \",\" + accTime + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n\t\t\t\t\t\tcode += \"min \" + tempTime + \",\" + tempTime + \",\" + lifeTimeRegister + \".w\\n\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (this._iUsesMultiplier) {\n\t\t\t\t\tcode += \"mul \" + tempColor + \",\" + tempTime + \",\" + deltaMulValues[i] + \"\\n\";\n\t\t\t\t\tcode += \"add \" + accMultiplierColor + \",\" + accMultiplierColor + \",\" + tempColor + \"\\n\";\n\t\t\t\t}\n\t\t\t\tif (this._iUsesOffset) {\n\t\t\t\t\tcode += \"mul \" + tempColor + \",\" + tempTime + \",\" + deltaOffsetValues[i] + \"\\n\";\n\t\t\t\t\tcode += \"add \" + animationRegisterData.colorAddTarget + \",\" + animationRegisterData.colorAddTarget + \",\" + tempColor + \"\\n\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//for the last segment:\n\t\t\tif (this._iNumSegmentPoint == 0)\n\t\t\t\ttempTime = animationRegisterData.vertexLife;\n\t\t\telse {\n\t\t\t\tswitch (this._iNumSegmentPoint) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tcode += \"sub \" + accTime + \",\" + animationRegisterData.vertexLife + \",\" + lifeTimeRegister + \".x\\n\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tcode += \"sub \" + accTime + \",\" + accTime + \",\" + lifeTimeRegister + \".y\\n\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tcode += \"sub \" + accTime + \",\" + accTime + \",\" + lifeTimeRegister + \".z\\n\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tcode += \"sub \" + accTime + \",\" + accTime + \",\" + lifeTimeRegister + \".w\\n\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcode += \"max \" + tempTime + \",\" + accTime + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n\t\t\t}\n\t\t\tif (this._iUsesMultiplier) {\n\t\t\t\tcode += \"mul \" + tempColor + \",\" + tempTime + \",\" + deltaMulValues[this._iNumSegmentPoint] + \"\\n\";\n\t\t\t\tcode += \"add \" + accMultiplierColor + \",\" + accMultiplierColor + \",\" + tempColor + \"\\n\";\n\t\t\t\tcode += \"mul \" + animationRegisterData.colorMulTarget + \",\" + animationRegisterData.colorMulTarget + \",\" + accMultiplierColor + \"\\n\";\n\t\t\t}\n\t\t\tif (this._iUsesOffset) {\n\t\t\t\tcode += \"mul \" + tempColor + \",\" + tempTime + \",\" + deltaOffsetValues[this._iNumSegmentPoint] + \"\\n\";\n\t\t\t\tcode += \"add \" + animationRegisterData.colorAddTarget + \",\" + animationRegisterData.colorAddTarget + \",\" + tempColor + \"\\n\";\n\t\t\t}\n\n\t\t}\n\t\treturn code;\n\t}\n\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {ParticleProperties}\t\t\t\tfrom \"../../animators/data/ParticleProperties\";\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\nimport {ParticleSpriteSheetState}\t\t\tfrom \"../../animators/states/ParticleSpriteSheetState\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\n\n/**\n * A particle animation node used when a spritesheet texture is required to animate the particle.\n * NB: to enable use of this node, the <code>repeat</code> property on the material has to be set to true.\n */\nexport class ParticleSpriteSheetNode extends ParticleNodeBase\n{\n\t/** @private */\n\tpublic _iUsesCycle:boolean;\n\n\t/** @private */\n\tpublic _iUsesPhase:boolean;\n\n\t/** @private */\n\tpublic _iTotalFrames:number;\n\t/** @private */\n\tpublic _iNumColumns:number;\n\t/** @private */\n\tpublic _iNumRows:number;\n\t/** @private */\n\tpublic _iCycleDuration:number;\n\t/** @private */\n\tpublic _iCyclePhase:number;\n\n\t/**\n\t * Reference for spritesheet node properties on a single particle (when in local property mode).\n\t * Expects a <code>Vector3D</code> representing the cycleDuration (x), optional phaseTime (y).\n\t */\n\tpublic static UV_VECTOR3D:string = \"UVVector3D\";\n\n\t/**\n\t * Defines the number of columns in the spritesheet, when in global mode. Defaults to 1. Read only.\n\t */\n\tpublic get numColumns():number\n\t{\n\t\treturn this._iNumColumns;\n\t}\n\n\t/**\n\t * Defines the number of rows in the spritesheet, when in global mode. Defaults to 1. Read only.\n\t */\n\tpublic get numRows():number\n\t{\n\t\treturn this._iNumRows;\n\t}\n\n\t/**\n\t * Defines the total number of frames used by the spritesheet, when in global mode. Defaults to the number defined by numColumns and numRows. Read only.\n\t */\n\tpublic get totalFrames():number\n\t{\n\t\treturn this._iTotalFrames;\n\t}\n\n\t/**\n\t * Creates a new <code>ParticleSpriteSheetNode</code>\n\t *\n\t * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\n\t * @param    [optional] numColumns      Defines the number of columns in the spritesheet, when in global mode. Defaults to 1.\n\t * @param    [optional] numRows         Defines the number of rows in the spritesheet, when in global mode. Defaults to 1.\n\t * @param    [optional] cycleDuration   Defines the default cycle duration in seconds, when in global mode. Defaults to 1.\n\t * @param    [optional] cyclePhase      Defines the default cycle phase, when in global mode. Defaults to 0.\n\t * @param    [optional] totalFrames     Defines the total number of frames used by the spritesheet, when in global mode. Defaults to the number defined by numColumns and numRows.\n\t * @param    [optional] looping         Defines whether the spritesheet animation is set to loop indefinitely. Defaults to true.\n\t */\n\tconstructor(mode:number, usesCycle:boolean, usesPhase:boolean, numColumns:number = 1, numRows:number = 1, cycleDuration:number = 1, cyclePhase:number = 0, totalFrames:number = Number.MAX_VALUE)\n\t{\n\t\tsuper(\"ParticleSpriteSheet\", mode, usesCycle? (usesPhase? 3 : 2) : 1, ParticleAnimationSet.POST_PRIORITY + 1);\n\n\t\tthis._pStateClass = ParticleSpriteSheetState;\n\n\t\tthis._iUsesCycle = usesCycle;\n\t\tthis._iUsesPhase = usesPhase;\n\n\t\tthis._iNumColumns = numColumns;\n\t\tthis._iNumRows = numRows;\n\t\tthis._iCyclePhase = cyclePhase;\n\t\tthis._iCycleDuration = cycleDuration;\n\t\tthis._iTotalFrames = Math.min(totalFrames, numColumns*numRows);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAGALUVCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\n\t{\n\t\t//get 2 vc\n\t\tvar uvParamConst1:ShaderRegisterElement = registerCache.getFreeVertexConstant();\n\t\tvar uvParamConst2:ShaderRegisterElement = (this._pMode == ParticlePropertiesMode.GLOBAL)? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\n\t\tanimationRegisterData.setRegisterIndex(this, ParticleSpriteSheetState.UV_INDEX_0, uvParamConst1.index);\n\t\tanimationRegisterData.setRegisterIndex(this, ParticleSpriteSheetState.UV_INDEX_1, uvParamConst2.index);\n\n\t\tvar uTotal:ShaderRegisterElement = new ShaderRegisterElement(uvParamConst1.regName, uvParamConst1.index, 0);\n\t\tvar uStep:ShaderRegisterElement = new ShaderRegisterElement(uvParamConst1.regName, uvParamConst1.index, 1);\n\t\tvar vStep:ShaderRegisterElement = new ShaderRegisterElement(uvParamConst1.regName, uvParamConst1.index, 2);\n\n\t\tvar uSpeed:ShaderRegisterElement = new ShaderRegisterElement(uvParamConst2.regName, uvParamConst2.index, 0);\n\t\tvar cycle:ShaderRegisterElement = new ShaderRegisterElement(uvParamConst2.regName, uvParamConst2.index, 1);\n\t\tvar phaseTime:ShaderRegisterElement = new ShaderRegisterElement(uvParamConst2.regName, uvParamConst2.index, 2);\n\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\tvar time:ShaderRegisterElement = new ShaderRegisterElement(temp.regName, temp.index, 0);\n\t\tvar vOffset:ShaderRegisterElement = new ShaderRegisterElement(temp.regName, temp.index, 1);\n\t\ttemp = new ShaderRegisterElement(temp.regName, temp.index, 2);\n\t\tvar temp2:ShaderRegisterElement = new ShaderRegisterElement(temp.regName, temp.index, 3);\n\n\t\tvar u:ShaderRegisterElement = new ShaderRegisterElement(animationRegisterData.uvTarget.regName, animationRegisterData.uvTarget.index, 0);\n\t\tvar v:ShaderRegisterElement = new ShaderRegisterElement(animationRegisterData.uvTarget.regName, animationRegisterData.uvTarget.index, 1);\n\n\t\tvar code:string = \"\";\n\t\t//scale uv\n\t\tcode += \"mul \" + u + \",\" + u + \",\" + uStep + \"\\n\";\n\t\tif (this._iNumRows > 1)\n\t\t\tcode += \"mul \" + v + \",\" + v + \",\" + vStep + \"\\n\";\n\n\t\tif (this._iUsesCycle) {\n\t\t\tif (this._iUsesPhase)\n\t\t\t\tcode += \"add \" + time + \",\" + animationRegisterData.vertexTime + \",\" + phaseTime + \"\\n\";\n\t\t\telse\n\t\t\t\tcode += \"mov \" + time + \",\" + animationRegisterData.vertexTime + \"\\n\";\n\t\t\tcode += \"div \" + time + \",\" + time + \",\" + cycle + \"\\n\";\n\t\t\tcode += \"frc \" + time + \",\" + time + \"\\n\";\n\t\t\tcode += \"mul \" + time + \",\" + time + \",\" + cycle + \"\\n\";\n\t\t\tcode += \"mul \" + temp + \",\" + time + \",\" + uSpeed + \"\\n\";\n\t\t} else\n\t\t\tcode += \"mul \" + temp.toString() + \",\" + animationRegisterData.vertexLife + \",\" + uTotal + \"\\n\";\n\n\t\tif (this._iNumRows > 1) {\n\t\t\tcode += \"frc \" + temp2 + \",\" + temp + \"\\n\";\n\t\t\tcode += \"sub \" + vOffset + \",\" + temp + \",\" + temp2 + \"\\n\";\n\t\t\tcode += \"mul \" + vOffset + \",\" + vOffset + \",\" + vStep + \"\\n\";\n\t\t\tcode += \"add \" + v + \",\" + v + \",\" + vOffset + \"\\n\";\n\t\t}\n\n\t\tcode += \"div \" + temp2 + \",\" + temp + \",\" + uStep + \"\\n\";\n\t\tcode += \"frc \" + temp + \",\" + temp2 + \"\\n\";\n\t\tcode += \"sub \" + temp2 + \",\" + temp2 + \",\" + temp + \"\\n\";\n\t\tcode += \"mul \" + temp + \",\" + temp2 + \",\" + uStep + \"\\n\";\n\n\t\tif (this._iNumRows > 1)\n\t\t\tcode += \"frc \" + temp + \",\" + temp + \"\\n\";\n\t\tcode += \"add \" + u + \",\" + u + \",\" + temp + \"\\n\";\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAnimationState(animator:AnimatorBase):ParticleSpriteSheetState\n\t{\n\t\treturn <ParticleSpriteSheetState> animator.getAnimationState(this);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iProcessAnimationSetting(particleAnimationSet:ParticleAnimationSet):void\n\t{\n\t\tparticleAnimationSet.hasUVNode = true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGeneratePropertyOfOneParticle(param:ParticleProperties):void\n\t{\n\t\tif (this._iUsesCycle) {\n\t\t\tvar uvCycle:Vector3D = param[ParticleSpriteSheetNode.UV_VECTOR3D];\n\t\t\tif (!uvCycle)\n\t\t\t\tthrow(new Error(\"there is no \" + ParticleSpriteSheetNode.UV_VECTOR3D + \" in param!\"));\n\t\t\tif (uvCycle.x <= 0)\n\t\t\t\tthrow(new Error(\"the cycle duration must be greater than zero\"));\n\t\t\tvar uTotal:number = this._iTotalFrames/this._iNumColumns;\n\t\t\tthis._pOneData[0] = uTotal/uvCycle.x;\n\t\t\tthis._pOneData[1] = uvCycle.x;\n\t\t\tif (this._iUsesPhase)\n\t\t\t\tthis._pOneData[2] = uvCycle.y;\n\t\t}\n\t}\n}",
    "import {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {ParticleProperties}\t\t\t\tfrom \"../../animators/data/ParticleProperties\";\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\nimport {ParticleTimeState}\t\t\t\tfrom \"../../animators/states/ParticleTimeState\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\n\n/**\n * A particle animation node used as the base node for timekeeping inside a particle. Automatically added to a particle animation set on instatiation.\n */\nexport class ParticleTimeNode extends ParticleNodeBase\n{\n\t/** @private */\n\tpublic _iUsesDuration:boolean;\n\t/** @private */\n\tpublic _iUsesDelay:boolean;\n\t/** @private */\n\tpublic _iUsesLooping:boolean;\n\n\t/**\n\t * Creates a new <code>ParticleTimeNode</code>\n\t *\n\t * @param    [optional] usesDuration    Defines whether the node uses the <code>duration</code> data in the static properties to determine how long a particle is visible for. Defaults to false.\n\t * @param    [optional] usesDelay       Defines whether the node uses the <code>delay</code> data in the static properties to determine how long a particle is hidden for. Defaults to false. Requires <code>usesDuration</code> to be true.\n\t * @param    [optional] usesLooping     Defines whether the node creates a looping timeframe for each particle determined by the <code>startTime</code>, <code>duration</code> and <code>delay</code> data in the static properties function. Defaults to false. Requires <code>usesLooping</code> to be true.\n\t */\n\tconstructor(usesDuration:boolean = false, usesLooping:boolean = false, usesDelay:boolean = false)\n\t{\n\t\tsuper(\"ParticleTime\", ParticlePropertiesMode.LOCAL_STATIC, 4, 0);\n\t\t\n\t\tthis._pStateClass = ParticleTimeState;\n\n\t\tthis._iUsesDuration = usesDuration;\n\t\tthis._iUsesLooping = usesLooping;\n\t\tthis._iUsesDelay = usesDelay;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAGALVertexCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\n\t{\n\t\tvar timeStreamRegister:ShaderRegisterElement = registerCache.getFreeVertexAttribute(); //timeStreamRegister.x is start，timeStreamRegister.y is during time\n\t\tanimationRegisterData.setRegisterIndex(this, ParticleTimeState.TIME_STREAM_INDEX, timeStreamRegister.index);\n\t\tvar timeConst:ShaderRegisterElement = registerCache.getFreeVertexConstant();\n\t\tanimationRegisterData.setRegisterIndex(this, ParticleTimeState.TIME_CONSTANT_INDEX, timeConst.index);\n\n\t\tvar code:string = \"\";\n\t\tcode += \"sub \" + animationRegisterData.vertexTime + \",\" + timeConst + \",\" + timeStreamRegister + \".x\\n\";\n\t\t//if time=0,set the position to zero.\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeVertexSingleTemp();\n\t\tcode += \"sge \" + temp + \",\" + animationRegisterData.vertexTime + \",\" + animationRegisterData.vertexZeroConst + \"\\n\";\n\t\tcode += \"mul \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + temp + \"\\n\";\n\t\tif (this._iUsesDuration) {\n\t\t\tif (this._iUsesLooping) {\n\t\t\t\tvar div:ShaderRegisterElement = registerCache.getFreeVertexSingleTemp();\n\t\t\t\tif (this._iUsesDelay) {\n\t\t\t\t\tcode += \"div \" + div + \",\" + animationRegisterData.vertexTime + \",\" + timeStreamRegister + \".z\\n\";\n\t\t\t\t\tcode += \"frc \" + div + \",\" + div + \"\\n\";\n\t\t\t\t\tcode += \"mul \" + animationRegisterData.vertexTime + \",\" + div + \",\" + timeStreamRegister + \".z\\n\";\n\t\t\t\t\tcode += \"slt \" + div + \",\" + animationRegisterData.vertexTime + \",\" + timeStreamRegister + \".y\\n\";\n\t\t\t\t\tcode += \"mul \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + div + \"\\n\";\n\t\t\t\t} else {\n\t\t\t\t\tcode += \"mul \" + div + \",\" + animationRegisterData.vertexTime + \",\" + timeStreamRegister + \".w\\n\";\n\t\t\t\t\tcode += \"frc \" + div + \",\" + div + \"\\n\";\n\t\t\t\t\tcode += \"mul \" + animationRegisterData.vertexTime + \",\" + div + \",\" + timeStreamRegister + \".y\\n\";\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar sge:ShaderRegisterElement = registerCache.getFreeVertexSingleTemp();\n\t\t\t\tcode += \"sge \" + sge + \",\" + timeStreamRegister + \".y,\" + animationRegisterData.vertexTime + \"\\n\";\n\t\t\t\tcode += \"mul \" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + animationRegisterData.scaleAndRotateTarget + \".xyz,\" + sge + \"\\n\";\n\t\t\t}\n\t\t}\n\t\tcode += \"mul \" + animationRegisterData.vertexLife + \",\" + animationRegisterData.vertexTime + \",\" + timeStreamRegister + \".w\\n\";\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAnimationState(animator:AnimatorBase):ParticleTimeState\n\t{\n\t\treturn <ParticleTimeState> animator.getAnimationState(this);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGeneratePropertyOfOneParticle(param:ParticleProperties):void\n\t{\n\t\tthis._pOneData[0] = param.startTime;\n\t\tthis._pOneData[1] = param.duration;\n\t\tthis._pOneData[2] = param.delay + param.duration;\n\t\tthis._pOneData[3] = 1/param.duration;\n\n\t}\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\nimport {ParticleUVState}\t\t\t\t\tfrom \"../../animators/states/ParticleUVState\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\n\n/**\n * A particle animation node used to control the UV offset and scale of a particle over time.\n */\nexport class ParticleUVNode extends ParticleNodeBase\n{\n\t/** @private */\n\tpublic _iUvData:Vector3D;\n\n\t/**\n\t *\n\t */\n\tpublic static U_AXIS:string = \"x\";\n\n\t/**\n\t *\n\t */\n\tpublic static V_AXIS:string = \"y\";\n\n\tprivate _cycle:number;\n\tprivate _scale:number;\n\tprivate _axis:string;\n\n\t/**\n\t * Creates a new <code>ParticleTimeNode</code>\n\t *\n\t * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\n\t * @param    [optional] cycle           Defines whether the time track is in loop mode. Defaults to false.\n\t * @param    [optional] scale           Defines whether the time track is in loop mode. Defaults to false.\n\t * @param    [optional] axis            Defines whether the time track is in loop mode. Defaults to false.\n\t */\n\tconstructor(mode:number, cycle:number = 1, scale:number = 1, axis:string = \"x\")\n\t{\n\t\t//because of the stage3d register limitation, it only support the global mode\n\t\tsuper(\"ParticleUV\", ParticlePropertiesMode.GLOBAL, 4, ParticleAnimationSet.POST_PRIORITY + 1);\n\n\t\tthis._pStateClass = ParticleUVState;\n\n\t\tthis._cycle = cycle;\n\t\tthis._scale = scale;\n\t\tthis._axis = axis;\n\n\t\tthis.updateUVData();\n\t}\n\n\t/**\n\t *\n\t */\n\tpublic get cycle():number\n\t{\n\t\treturn this._cycle;\n\t}\n\n\tpublic set cycle(value:number)\n\t{\n\t\tthis._cycle = value;\n\n\t\tthis.updateUVData();\n\t}\n\n\t/**\n\t *\n\t */\n\tpublic get scale():number\n\t{\n\t\treturn this._scale;\n\t}\n\n\tpublic set scale(value:number)\n\t{\n\t\tthis._scale = value;\n\n\t\tthis.updateUVData();\n\t}\n\n\t/**\n\t *\n\t */\n\tpublic get axis():string\n\t{\n\t\treturn this._axis;\n\t}\n\n\tpublic set axis(value:string)\n\t{\n\t\tthis._axis = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAGALUVCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\n\t\tvar uvConst:ShaderRegisterElement = registerCache.getFreeVertexConstant();\n\t\tanimationRegisterData.setRegisterIndex(this, ParticleUVState.UV_INDEX, uvConst.index);\n\n\t\tvar axisIndex:number = this._axis == \"x\"? 0 : (this._axis == \"y\"? 1 : 2);\n\n\t\tvar target:ShaderRegisterElement = new ShaderRegisterElement(animationRegisterData.uvTarget.regName, animationRegisterData.uvTarget.index, axisIndex);\n\n\t\tvar sin:ShaderRegisterElement = registerCache.getFreeVertexSingleTemp();\n\n\t\tif (this._scale != 1)\n\t\t\tcode += \"mul \" + target + \",\" + target + \",\" + uvConst + \".y\\n\";\n\n\t\tcode += \"mul \" + sin + \",\" + animationRegisterData.vertexTime + \",\" + uvConst + \".x\\n\";\n\t\tcode += \"sin \" + sin + \",\" + sin + \"\\n\";\n\t\tcode += \"add \" + target + \",\" + target + \",\" + sin + \"\\n\";\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAnimationState(animator:AnimatorBase):ParticleUVState\n\t{\n\t\treturn <ParticleUVState> animator.getAnimationState(this);\n\t}\n\n\tprivate updateUVData():void\n\t{\n\t\tthis._iUvData = new Vector3D(Math.PI*2/this._cycle, this._scale, 0, 0);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iProcessAnimationSetting(particleAnimationSet:ParticleAnimationSet):void\n\t{\n\t\tparticleAnimationSet.hasUVNode = true;\n\t}\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {ParticleProperties}\t\t\t\tfrom \"../../animators/data/ParticleProperties\";\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\nimport {ParticleVelocityState}\t\t\tfrom \"../../animators/states/ParticleVelocityState\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\nimport {ShaderRegisterCache}\t\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterElement}\t\t\tfrom \"../../shaders/ShaderRegisterElement\";\n\n/**\n * A particle animation node used to set the starting velocity of a particle.\n */\nexport class ParticleVelocityNode extends ParticleNodeBase\n{\n\t/** @private */\n\tpublic _iVelocity:Vector3D;\n\n\t/**\n\t * Reference for velocity node properties on a single particle (when in local property mode).\n\t * Expects a <code>Vector3D</code> object representing the direction of movement on the particle.\n\t */\n\tpublic static VELOCITY_VECTOR3D:string = \"VelocityVector3D\";\n\n\t/**\n\t * Creates a new <code>ParticleVelocityNode</code>\n\t *\n\t * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.\n\t * @param    [optional] velocity        Defines the default velocity vector of the node, used when in global mode.\n\t */\n\tconstructor(mode:number, velocity:Vector3D = null)\n\t{\n\t\tsuper(\"ParticleVelocity\", mode, 3);\n\n\t\tthis._pStateClass = ParticleVelocityState;\n\n\t\tthis._iVelocity = velocity || new Vector3D();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAGALVertexCode(shader:ShaderBase, animationSet:ParticleAnimationSet, registerCache:ShaderRegisterCache, animationRegisterData:AnimationRegisterData):string\n\t{\n\t\tvar velocityValue:ShaderRegisterElement = (this._pMode == ParticlePropertiesMode.GLOBAL)? registerCache.getFreeVertexConstant() : registerCache.getFreeVertexAttribute();\n\t\tanimationRegisterData.setRegisterIndex(this, ParticleVelocityState.VELOCITY_INDEX, velocityValue.index);\n\n\t\tvar distance:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\tvar code:string = \"\";\n\t\tcode += \"mul \" + distance + \",\" + animationRegisterData.vertexTime + \",\" + velocityValue + \"\\n\";\n\t\tcode += \"add \" + animationRegisterData.positionTarget + \".xyz,\" + distance + \",\" + animationRegisterData.positionTarget + \".xyz\\n\";\n\n\t\tif (animationSet.needVelocity)\n\t\t\tcode += \"add \" + animationRegisterData.velocityTarget + \".xyz,\" + velocityValue + \".xyz,\" + animationRegisterData.velocityTarget + \".xyz\\n\";\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAnimationState(animator:AnimatorBase):ParticleVelocityState\n\t{\n\t\treturn <ParticleVelocityState> animator.getAnimationState(this);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGeneratePropertyOfOneParticle(param:ParticleProperties):void\n\t{\n\t\tvar _tempVelocity:Vector3D = param[ParticleVelocityNode.VELOCITY_VECTOR3D];\n\t\tif (!_tempVelocity)\n\t\t\tthrow new Error(\"there is no \" + ParticleVelocityNode.VELOCITY_VECTOR3D + \" in param!\");\n\n\t\tthis._pOneData[0] = _tempVelocity.x;\n\t\tthis._pOneData[1] = _tempVelocity.y;\n\t\tthis._pOneData[2] = _tempVelocity.z;\n\t}\n}",
    "import {AnimationNodeBase}\t\t\t\tfrom \"awayjs-display/lib/animators/nodes/AnimationNodeBase\";\n\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\nimport {SkeletonBinaryLERPState}\t\t\tfrom \"../../animators/states/SkeletonBinaryLERPState\";\n\n/**\n * A skeleton animation node that uses two animation node inputs to blend a lineraly interpolated output of a skeleton pose.\n */\nexport class SkeletonBinaryLERPNode extends AnimationNodeBase\n{\n\t/**\n\t * Defines input node A to use for the blended output.\n\t */\n\tpublic inputA:AnimationNodeBase;\n\n\t/**\n\t * Defines input node B to use for the blended output.\n\t */\n\tpublic inputB:AnimationNodeBase;\n\n\t/**\n\t * Creates a new <code>SkeletonBinaryLERPNode</code> object.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\n\t\tthis._pStateClass = SkeletonBinaryLERPState;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAnimationState(animator:AnimatorBase):SkeletonBinaryLERPState\n\t{\n\t\treturn <SkeletonBinaryLERPState> animator.getAnimationState(this);\n\t}\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\nimport {SkeletonPose}\t\t\t\t\t\tfrom \"../../animators/data/SkeletonPose\";\nimport {AnimationClipNodeBase}\t\t\tfrom \"../../animators/nodes/AnimationClipNodeBase\";\nimport {SkeletonClipState}\t\t\t\tfrom \"../../animators/states/SkeletonClipState\";\n\n/**\n * A skeleton animation node containing time-based animation data as individual skeleton poses.\n */\nexport class SkeletonClipNode extends AnimationClipNodeBase\n{\n\tprivate _frames:Array<SkeletonPose> = new Array<SkeletonPose>();\n\n\t/**\n\t * Determines whether to use SLERP equations (true) or LERP equations (false) in the calculation\n\t * of the output skeleton pose. Defaults to false.\n\t */\n\tpublic highQuality:boolean = false;\n\n\t/**\n\t * Returns a vector of skeleton poses representing the pose of each animation frame in the clip.\n\t */\n\tpublic get frames():Array<SkeletonPose>\n\t{\n\t\treturn this._frames;\n\t}\n\n\t/**\n\t * Creates a new <code>SkeletonClipNode</code> object.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\n\t\tthis._pStateClass = SkeletonClipState;\n\t}\n\n\t/**\n\t * Adds a skeleton pose frame to the internal timeline of the animation node.\n\t *\n\t * @param skeletonPose The skeleton pose object to add to the timeline of the node.\n\t * @param duration The specified duration of the frame in milliseconds.\n\t */\n\tpublic addFrame(skeletonPose:SkeletonPose, duration:number):void\n\t{\n\t\tthis._frames.push(skeletonPose);\n\t\tthis._pDurations.push(duration);\n\n\t\tthis._pNumFrames = this._pDurations.length;\n\n\t\tthis._pStitchDirty = true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAnimationState(animator:AnimatorBase):SkeletonClipState\n\t{\n\t\treturn <SkeletonClipState> animator.getAnimationState(this);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pUpdateStitch():void\n\t{\n\t\tsuper._pUpdateStitch();\n\n\t\tvar i:number = this._pNumFrames - 1;\n\t\tvar p1:Vector3D, p2:Vector3D, delta:Vector3D;\n\t\twhile (i--) {\n\t\t\tthis._pTotalDuration += this._pDurations[i];\n\t\t\tp1 = this._frames[i].jointPoses[0].translation;\n\t\t\tp2 = this._frames[i + 1].jointPoses[0].translation;\n\t\t\tdelta = p2.subtract(p1);\n\t\t\tthis._pTotalDelta.x += delta.x;\n\t\t\tthis._pTotalDelta.y += delta.y;\n\t\t\tthis._pTotalDelta.z += delta.z;\n\t\t}\n\n\t\tif (this._pStitchFinalFrame || !this._pLooping) {\n\t\t\tthis._pTotalDuration += this._pDurations[this._pNumFrames - 1];\n\t\t\tp1 = this._frames[0].jointPoses[0].translation;\n\t\t\tp2 = this._frames[1].jointPoses[0].translation;\n\t\t\tdelta = p2.subtract(p1);\n\t\t\tthis._pTotalDelta.x += delta.x;\n\t\t\tthis._pTotalDelta.y += delta.y;\n\t\t\tthis._pTotalDelta.z += delta.z;\n\t\t}\n\t}\n}",
    "import {AnimationNodeBase}\t\t\t\tfrom \"awayjs-display/lib/animators/nodes/AnimationNodeBase\";\n\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\nimport {SkeletonDifferenceState}\t\t\tfrom \"../../animators/states/SkeletonDifferenceState\";\n\n/**\n * A skeleton animation node that uses a difference input pose with a base input pose to blend a linearly interpolated output of a skeleton pose.\n */\nexport class SkeletonDifferenceNode extends AnimationNodeBase\n{\n\t/**\n\t * Defines a base input node to use for the blended output.\n\t */\n\tpublic baseInput:AnimationNodeBase;\n\n\t/**\n\t * Defines a difference input node to use for the blended output.\n\t */\n\tpublic differenceInput:AnimationNodeBase;\n\n\t/**\n\t * Creates a new <code>SkeletonAdditiveNode</code> object.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\n\t\tthis._pStateClass = SkeletonDifferenceState;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAnimationState(animator:AnimatorBase):SkeletonDifferenceState\n\t{\n\t\treturn <SkeletonDifferenceState> animator.getAnimationState(this);\n\t}\n}\n\nexport default SkeletonDifferenceNode",
    "import {AnimationNodeBase}\t\t\t\tfrom \"awayjs-display/lib/animators/nodes/AnimationNodeBase\";\n\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\nimport {SkeletonDirectionalState}\t\t\tfrom \"../../animators/states/SkeletonDirectionalState\";\n\n/**\n * A skeleton animation node that uses four directional input poses with an input direction to blend a linearly interpolated output of a skeleton pose.\n */\nexport class SkeletonDirectionalNode extends AnimationNodeBase\n{\n\t/**\n\t * Defines the forward configured input node to use for the blended output.\n\t */\n\tpublic forward:AnimationNodeBase;\n\n\t/**\n\t * Defines the backwards configured input node to use for the blended output.\n\t */\n\tpublic backward:AnimationNodeBase;\n\n\t/**\n\t * Defines the left configured input node to use for the blended output.\n\t */\n\tpublic left:AnimationNodeBase;\n\n\t/**\n\t * Defines the right configured input node to use for the blended output.\n\t */\n\tpublic right:AnimationNodeBase;\n\n\tconstructor()\n\t{\n\t\tsuper();\n\n\t\tthis._pStateClass = SkeletonDirectionalState;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAnimationState(animator:AnimatorBase):SkeletonDirectionalState\n\t{\n\t\treturn <SkeletonDirectionalState> animator.getAnimationState(this);\n\t}\n\n}",
    "import {AnimationNodeBase}\t\t\t\tfrom \"awayjs-display/lib/animators/nodes/AnimationNodeBase\";\n\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\nimport {SkeletonNaryLERPState}\t\t\tfrom \"../../animators/states/SkeletonNaryLERPState\";\n\n/**\n * A skeleton animation node that uses an n-dimensional array of animation node inputs to blend a lineraly interpolated output of a skeleton pose.\n */\nexport class SkeletonNaryLERPNode extends AnimationNodeBase\n{\n\tpublic _iInputs:Array<AnimationNodeBase> = new Array<AnimationNodeBase>();\n\n\tprivate _numInputs:number;\n\n\tpublic get numInputs():number\n\t{\n\t\treturn this._numInputs;\n\t}\n\n\t/**\n\t * Creates a new <code>SkeletonNaryLERPNode</code> object.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\n\t\tthis._pStateClass = SkeletonNaryLERPState;\n\t}\n\n\t/**\n\t * Returns an integer representing the input index of the given skeleton animation node.\n\t *\n\t * @param input The skeleton animation node for with the input index is requested.\n\t */\n\tpublic getInputIndex(input:AnimationNodeBase):number\n\t{\n\t\treturn this._iInputs.indexOf(input);\n\t}\n\n\t/**\n\t * Returns the skeleton animation node object that resides at the given input index.\n\t *\n\t * @param index The input index for which the skeleton animation node is requested.\n\t */\n\tpublic getInputAt(index:number):AnimationNodeBase\n\t{\n\t\treturn this._iInputs[index];\n\t}\n\n\t/**\n\t * Adds a new skeleton animation node input to the animation node.\n\t */\n\tpublic addInput(input:AnimationNodeBase):void\n\t{\n\t\tthis._iInputs[this._numInputs++] = input;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getAnimationState(animator:AnimatorBase):SkeletonNaryLERPState\n\t{\n\t\treturn <SkeletonNaryLERPState> animator.getAnimationState(this);\n\t}\n}\n\nexport default SkeletonNaryLERPNode",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {Graphics}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphics\";\n\nimport {AnimationClipNodeBase}\t\t\tfrom \"../../animators/nodes/AnimationClipNodeBase\";\nimport {VertexClipState}\t\t\t\t\tfrom \"../../animators/states/VertexClipState\";\n\n/**\n * A vertex animation node containing time-based animation data as individual geometry obejcts.\n */\nexport class VertexClipNode extends AnimationClipNodeBase\n{\n\tprivate _frames:Array<Graphics> = new Array<Graphics>();\n\tprivate _translations:Array<Vector3D> = new Array<Vector3D>();\n\n\t/**\n\t * Returns a vector of geometry frames representing the vertex values of each animation frame in the clip.\n\t */\n\tpublic get frames():Array<Graphics>\n\t{\n\t\treturn this._frames;\n\t}\n\n\t/**\n\t * Creates a new <code>VertexClipNode</code> object.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\n\t\tthis._pStateClass = VertexClipState;\n\t}\n\n\t/**\n\t * Adds a geometry object to the internal timeline of the animation node.\n\t *\n\t * @param geometry The geometry object to add to the timeline of the node.\n\t * @param duration The specified duration of the frame in milliseconds.\n\t * @param translation The absolute translation of the frame, used in root delta calculations for sprite movement.\n\t */\n\tpublic addFrame(geometry:Graphics, duration:number, translation:Vector3D = null):void\n\t{\n\t\tthis._frames.push(geometry);\n\t\tthis._pDurations.push(duration);\n\t\tthis._translations.push(translation || new Vector3D());\n\n\t\tthis._pNumFrames = this._pDurations.length;\n\n\t\tthis._pStitchDirty = true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pUpdateStitch():void\n\t{\n\t\tsuper._pUpdateStitch();\n\n\t\tvar i:number = this._pNumFrames - 1;\n\t\tvar p1:Vector3D, p2:Vector3D, delta:Vector3D;\n\t\twhile (i--) {\n\t\t\tthis._pTotalDuration += this._pDurations[i];\n\t\t\tp1 = this._translations[i];\n\t\t\tp2 = this._translations[i + 1];\n\t\t\tdelta = p2.subtract(p1);\n\t\t\tthis._pTotalDelta.x += delta.x;\n\t\t\tthis._pTotalDelta.y += delta.y;\n\t\t\tthis._pTotalDelta.z += delta.z;\n\t\t}\n\n\t\tif (this._pNumFrames > 1 && (this._pStitchFinalFrame || !this._pLooping)) {\n\t\t\tthis._pTotalDuration += this._pDurations[this._pNumFrames - 1];\n\t\t\tp1 = this._translations[0];\n\t\t\tp2 = this._translations[1];\n\t\t\tdelta = p2.subtract(p1);\n\t\t\tthis._pTotalDelta.x += delta.x;\n\t\t\tthis._pTotalDelta.y += delta.y;\n\t\t\tthis._pTotalDelta.z += delta.z;\n\t\t}\n\t}\n}",
    "import {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\nimport {AnimationClipNodeBase}\t\t\tfrom \"../../animators/nodes/AnimationClipNodeBase\";\nimport {AnimationStateBase}\t\t\t\tfrom \"../../animators/states/AnimationStateBase\";\nimport {AnimationStateEvent}\t\t\t\tfrom \"../../events/AnimationStateEvent\";\n\n/**\n *\n */\nexport class AnimationClipState extends AnimationStateBase\n{\n\tprivate _animationClipNode:AnimationClipNodeBase;\n\tprivate _animationStatePlaybackComplete:AnimationStateEvent;\n\tpublic _pBlendWeight:number;\n\tpublic _pCurrentFrame:number;\n\tpublic _pNextFrame:number;\n\n\tpublic _pOldFrame:number;\n\tpublic _pTimeDir:number;\n\tpublic _pFramesDirty:boolean = true;\n\n\t/**\n\t * Returns a fractional value between 0 and 1 representing the blending ratio of the current playhead position\n\t * between the current frame (0) and next frame (1) of the animation.\n\t *\n\t * @see #currentFrame\n\t * @see #nextFrame\n\t */\n\tpublic get blendWeight():number\n\t{\n\t\tif (this._pFramesDirty)\n\t\t\tthis._pUpdateFrames();\n\n\t\treturn this._pBlendWeight;\n\t}\n\n\t/**\n\t * Returns the current frame of animation in the clip based on the internal playhead position.\n\t */\n\tpublic get currentFrame():number\n\t{\n\t\tif (this._pFramesDirty)\n\t\t\tthis._pUpdateFrames();\n\n\t\treturn this._pCurrentFrame;\n\t}\n\n\t/**\n\t * Returns the next frame of animation in the clip based on the internal playhead position.\n\t */\n\tpublic get nextFrame():number\n\t{\n\t\tif (this._pFramesDirty)\n\t\t\tthis._pUpdateFrames();\n\n\t\treturn this._pNextFrame;\n\t}\n\n\tconstructor(animator:AnimatorBase, animationClipNode:AnimationClipNodeBase)\n\t{\n\t\tsuper(animator, animationClipNode);\n\n\t\tthis._animationClipNode = animationClipNode;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic update(time:number):void\n\t{\n\t\tif (!this._animationClipNode.looping) {\n\t\t\tif (time > this._pStartTime + this._animationClipNode.totalDuration)\n\t\t\t\ttime = this._pStartTime + this._animationClipNode.totalDuration; else if (time < this._pStartTime)\n\t\t\t\ttime = this._pStartTime;\n\t\t}\n\n\t\tif (this._pTime == time - this._pStartTime)\n\t\t\treturn;\n\n\t\tthis._pUpdateTime(time);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic phase(value:number):void\n\t{\n\t\tvar time:number = value*this._animationClipNode.totalDuration + this._pStartTime;\n\n\t\tif (this._pTime == time - this._pStartTime)\n\t\t\treturn;\n\n\t\tthis._pUpdateTime(time);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pUpdateTime(time:number):void\n\t{\n\t\tthis._pFramesDirty = true;\n\n\t\tthis._pTimeDir = (time - this._pStartTime > this._pTime)? 1 : -1;\n\n\t\tsuper._pUpdateTime(time);\n\t}\n\n\t/**\n\t * Updates the nodes internal playhead to determine the current and next animation frame, and the blendWeight between the two.\n\t *\n\t * @see #currentFrame\n\t * @see #nextFrame\n\t * @see #blendWeight\n\t */\n\tpublic _pUpdateFrames():void\n\t{\n\t\tthis._pFramesDirty = false;\n\n\t\tvar looping:boolean = this._animationClipNode.looping;\n\t\tvar totalDuration:number = this._animationClipNode.totalDuration;\n\t\tvar lastFrame:number = this._animationClipNode.lastFrame;\n\t\tvar time:number = this._pTime;\n\n\t\t//trace(\"time\", time, totalDuration)\n\t\tif (looping && (time >= totalDuration || time < 0)) {\n\t\t\ttime %= totalDuration;\n\t\t\tif (time < 0)\n\t\t\t\ttime += totalDuration;\n\t\t}\n\n\t\tif (!looping && time >= totalDuration) {\n\t\t\tthis.notifyPlaybackComplete();\n\t\t\tthis._pCurrentFrame = lastFrame;\n\t\t\tthis._pNextFrame = lastFrame;\n\t\t\tthis._pBlendWeight = 0;\n\t\t} else if (!looping && time <= 0) {\n\t\t\tthis._pCurrentFrame = 0;\n\t\t\tthis._pNextFrame = 0;\n\t\t\tthis._pBlendWeight = 0;\n\t\t} else if (this._animationClipNode.fixedFrameRate) {\n\t\t\tvar t:number = time/totalDuration*lastFrame;\n\t\t\tthis._pCurrentFrame = Math.floor(t);\n\t\t\tthis._pBlendWeight = t - this._pCurrentFrame;\n\t\t\tthis._pNextFrame = this._pCurrentFrame + 1;\n\t\t} else {\n\t\t\tthis._pCurrentFrame = 0;\n\t\t\tthis._pNextFrame = 0;\n\n\t\t\tvar dur:number = 0, frameTime:number;\n\t\t\tvar durations:Array<number> = this._animationClipNode.durations;\n\n\t\t\tdo {\n\t\t\t\tframeTime = dur;\n\t\t\t\tdur += durations[this._pNextFrame];\n\t\t\t\tthis._pCurrentFrame = this._pNextFrame++;\n\t\t\t} while (time > dur);\n\n\t\t\tif (this._pCurrentFrame == lastFrame) {\n\t\t\t\tthis._pCurrentFrame = 0;\n\t\t\t\tthis._pNextFrame = 1;\n\t\t\t}\n\n\t\t\tthis._pBlendWeight = (time - frameTime)/durations[this._pCurrentFrame];\n\t\t}\n\t}\n\n\tprivate notifyPlaybackComplete():void\n\t{\n\t\tif (this._animationStatePlaybackComplete == null)\n\t\t\tthis._animationStatePlaybackComplete = new AnimationStateEvent(AnimationStateEvent.PLAYBACK_COMPLETE, this._pAnimator, this, this._animationClipNode);\n\n\t\tthis._animationClipNode.dispatchEvent(this._animationStatePlaybackComplete);\n\t}\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {AnimationNodeBase}\t\t\t\tfrom \"awayjs-display/lib/animators/nodes/AnimationNodeBase\";\n\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\nimport {IAnimationState}\t\t\t\t\tfrom \"../../animators/states/IAnimationState\";\n\n/**\n *\n */\nexport class AnimationStateBase implements IAnimationState\n{\n\tpublic _pAnimationNode:AnimationNodeBase;\n\tpublic _pRootDelta:Vector3D = new Vector3D();\n\tpublic _pPositionDeltaDirty:boolean = true;\n\n\tpublic _pTime:number;\n\tpublic _pStartTime:number = 0;\n\tpublic _pAnimator:AnimatorBase;\n\n\t/**\n\t * Returns a 3d vector representing the translation delta of the animating entity for the current timestep of animation\n\t */\n\tpublic get positionDelta():Vector3D\n\t{\n\t\tif (this._pPositionDeltaDirty) {\n\n\t\t\tthis._pUpdatePositionDelta();\n\t\t}\n\n\t\treturn this._pRootDelta;\n\n\t}\n\n\tconstructor(animator:AnimatorBase, animationNode:AnimationNodeBase)\n\t{\n\t\tthis._pAnimator = animator;\n\t\tthis._pAnimationNode = animationNode;\n\t}\n\n\t/**\n\t * Resets the start time of the node to a  new value.\n\t *\n\t * @param startTime The absolute start time (in milliseconds) of the node's starting time.\n\t */\n\tpublic offset(startTime:number):void\n\t{\n\t\tthis._pStartTime = startTime;\n\n\t\tthis._pPositionDeltaDirty = true;\n\t}\n\n\t/**\n\t * Updates the configuration of the node to its current state.\n\t *\n\t * @param time The absolute time (in milliseconds) of the animator's play head position.\n\t *\n\t * @see AnimatorBase#update()\n\t */\n\tpublic update(time:number):void\n\t{\n\t\tif (this._pTime == time - this._pStartTime) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis._pUpdateTime(time);\n\n\t}\n\n\t/**\n\t * Sets the animation phase of the node.\n\t *\n\t * @param value The phase value to use. 0 represents the beginning of an animation clip, 1 represents the end.\n\t */\n\tpublic phase(value:number):void\n\t{\n\n\t}\n\n\t/**\n\t * Updates the node's internal playhead position.\n\t *\n\t * @param time The local time (in milliseconds) of the node's playhead position.\n\t */\n\tpublic _pUpdateTime(time:number):void\n\t{\n\t\tthis._pTime = time - this._pStartTime;\n\n\t\tthis._pPositionDeltaDirty = true;\n\t}\n\n\t/**\n\t * Updates the node's root delta position\n\t */\n\tpublic _pUpdatePositionDelta():void\n\t{\n\t}\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\n\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\nimport {ContextGLVertexBufferFormat}\t\tfrom \"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\";\n\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\nimport {ParticleAccelerationNode}\t\t\tfrom \"../../animators/nodes/ParticleAccelerationNode\";\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\n\n/**\n * ...\n */\nexport class ParticleAccelerationState extends ParticleStateBase\n{\n\t/** @private */\n\tpublic static ACCELERATION_INDEX:number = 0;\n\n\tprivate _particleAccelerationNode:ParticleAccelerationNode;\n\tprivate _acceleration:Vector3D;\n\tprivate _halfAcceleration:Vector3D;\n\t\n\t/**\n\t * Defines the acceleration vector of the state, used when in global mode.\n\t */\n\tpublic get acceleration():Vector3D\n\t{\n\t\treturn this._acceleration;\n\t}\n\t\n\tpublic set acceleration(value:Vector3D)\n\t{\n\t\tthis._acceleration.x = value.x;\n\t\tthis._acceleration.y = value.y;\n\t\tthis._acceleration.z = value.z;\n\n\t\tthis.updateAccelerationData();\n\t}\n\t\n\tconstructor(animator:ParticleAnimator, particleAccelerationNode:ParticleAccelerationNode)\n\t{\n\t\tsuper(animator, particleAccelerationNode);\n\n\t\tthis._particleAccelerationNode = particleAccelerationNode;\n\t\tthis._acceleration = this._particleAccelerationNode._acceleration;\n\n\t\tthis.updateAccelerationData();\n\t}\n\t\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\n\t{\n\t\tvar index:number = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleAccelerationState.ACCELERATION_INDEX);\n\t\t\n\t\tif (this._particleAccelerationNode.mode == ParticlePropertiesMode.LOCAL_STATIC)\n\t\t\tanimationElements.activateVertexBuffer(index, this._particleAccelerationNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_3);\n\t\telse\n\t\t\tshader.setVertexConst(index, this._halfAcceleration.x, this._halfAcceleration.y, this._halfAcceleration.z);\n\t}\n\t\n\tprivate updateAccelerationData():void\n\t{\n\t\tif (this._particleAccelerationNode.mode == ParticlePropertiesMode.GLOBAL)\n\t\t\tthis._halfAcceleration = new Vector3D(this._acceleration.x/2, this._acceleration.y/2, this._acceleration.z/2);\n\t}\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\n\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\nimport {ContextGLVertexBufferFormat}\t\tfrom \"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\";\n\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\nimport {ParticleBezierCurveNode}\t\t\tfrom \"../../animators/nodes/ParticleBezierCurveNode\";\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\n\n/**\n * ...\n */\nexport class ParticleBezierCurveState extends ParticleStateBase\n{\n\t/** @private */\n\tpublic static BEZIER_CONTROL_INDEX:number = 0;\n\n\t/** @private */\n\tpublic static BEZIER_END_INDEX:number = 1;\n\n\tprivate _particleBezierCurveNode:ParticleBezierCurveNode;\n\tprivate _controlPoint:Vector3D;\n\tprivate _endPoint:Vector3D;\n\n\t/**\n\t * Defines the default control point of the node, used when in global mode.\n\t */\n\tpublic get controlPoint():Vector3D\n\t{\n\t\treturn this._controlPoint;\n\t}\n\n\tpublic set controlPoint(value:Vector3D)\n\t{\n\t\tthis._controlPoint = value;\n\t}\n\n\t/**\n\t * Defines the default end point of the node, used when in global mode.\n\t */\n\tpublic get endPoint():Vector3D\n\t{\n\t\treturn this._endPoint;\n\t}\n\n\tpublic set endPoint(value:Vector3D)\n\t{\n\t\tthis._endPoint = value;\n\t}\n\n\tconstructor(animator:ParticleAnimator, particleBezierCurveNode:ParticleBezierCurveNode)\n\t{\n\t\tsuper(animator, particleBezierCurveNode);\n\n\t\tthis._particleBezierCurveNode = particleBezierCurveNode;\n\t\tthis._controlPoint = this._particleBezierCurveNode._iControlPoint;\n\t\tthis._endPoint = this._particleBezierCurveNode._iEndPoint;\n\t}\n\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\n\t{\n\t\tvar controlIndex:number = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleBezierCurveState.BEZIER_CONTROL_INDEX);\n\t\tvar endIndex:number = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleBezierCurveState.BEZIER_END_INDEX);\n\n\t\tif (this._particleBezierCurveNode.mode == ParticlePropertiesMode.LOCAL_STATIC) {\n\t\t\tanimationElements.activateVertexBuffer(controlIndex, this._particleBezierCurveNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_3);\n\t\t\tanimationElements.activateVertexBuffer(endIndex, this._particleBezierCurveNode._iDataOffset + 3, stage, ContextGLVertexBufferFormat.FLOAT_3);\n\t\t} else {\n\t\t\tshader.setVertexConst(controlIndex, this._controlPoint.x, this._controlPoint.y, this._controlPoint.z);\n\t\t\tshader.setVertexConst(endIndex, this._endPoint.x, this._endPoint.y, this._endPoint.z);\n\t\t}\n\t}\n}",
    "import {MathConsts}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/MathConsts\";\nimport {Matrix3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\nimport {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\nimport {Orientation3D}\t\t\t\t\tfrom \"awayjs-core/lib/geom/Orientation3D\";\n\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\n\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\n\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\nimport {ParticleBillboardNode}\t\t\tfrom \"../../animators/nodes/ParticleBillboardNode\";\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\n\n/**\n * ...\n */\nexport class ParticleBillboardState extends ParticleStateBase\n{\n\t/** @private */\n\tpublic static MATRIX_INDEX:number = 0;\n\n\tprivate _matrix:Matrix3D = new Matrix3D;\n\n\tprivate _billboardAxis:Vector3D;\n\n\t/**\n\t *\n\t */\n\tconstructor(animator:ParticleAnimator, particleNode:ParticleBillboardNode)\n\t{\n\t\tsuper(animator, particleNode);\n\n\t\tthis._billboardAxis = particleNode._iBillboardAxis;\n\t}\n\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\n\t{\n\t\tvar comps:Array<Vector3D>;\n\t\tif (this._billboardAxis) {\n\t\t\tvar pos:Vector3D = renderable.sourceEntity.sceneTransform.position;\n\t\t\tvar look:Vector3D = camera.sceneTransform.position.subtract(pos);\n\t\t\tvar right:Vector3D = look.crossProduct(this._billboardAxis);\n\t\t\tright.normalize();\n\t\t\tlook = this.billboardAxis.crossProduct(right);\n\t\t\tlook.normalize();\n\n\t\t\t//create a quick inverse projection matrix\n\t\t\tthis._matrix.copyFrom(renderable.sourceEntity.sceneTransform);\n\t\t\tcomps = this._matrix.decompose(Orientation3D.AXIS_ANGLE);\n\t\t\tthis._matrix.copyColumnFrom(0, right);\n\t\t\tthis._matrix.copyColumnFrom(1, this.billboardAxis);\n\t\t\tthis._matrix.copyColumnFrom(2, look);\n\t\t\tthis._matrix.copyColumnFrom(3, pos);\n\t\t\tthis._matrix.appendRotation(-comps[1].w*MathConsts.RADIANS_TO_DEGREES, comps[1]);\n\t\t} else {\n\t\t\t//create a quick inverse projection matrix\n\t\t\tthis._matrix.copyFrom(renderable.sourceEntity.sceneTransform);\n\t\t\tthis._matrix.append(camera.inverseSceneTransform);\n\n\t\t\t//decompose using axis angle rotations\n\t\t\tcomps = this._matrix.decompose(Orientation3D.AXIS_ANGLE);\n\n\t\t\t//recreate the matrix with just the rotation data\n\t\t\tthis._matrix.identity();\n\t\t\tthis._matrix.appendRotation(-comps[1].w*MathConsts.RADIANS_TO_DEGREES, comps[1]);\n\t\t}\n\n\t\t//set a new matrix transform constant\n\t\tshader.setVertexConstFromMatrix(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleBillboardState.MATRIX_INDEX), this._matrix);\n\t}\n\n\t/**\n\t * Defines the billboard axis.\n\t */\n\tpublic get billboardAxis():Vector3D\n\t{\n\t\treturn this.billboardAxis;\n\t}\n\n\tpublic set billboardAxis(value:Vector3D)\n\t{\n\t\tthis.billboardAxis = value? value.clone() : null;\n\t\tif (this.billboardAxis)\n\t\t\tthis.billboardAxis.normalize();\n\t}\n\n}",
    "import {ColorTransform}\t\t\t\t\tfrom \"awayjs-core/lib/geom/ColorTransform\";\nimport {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\n\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\nimport {ContextGLVertexBufferFormat}\t\tfrom \"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\";\n\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\nimport {ParticleColorNode}\t\t\t\tfrom \"../../animators/nodes/ParticleColorNode\";\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\n\n/**\n * ...\n * @author ...\n */\nexport class ParticleColorState extends ParticleStateBase\n{\n\t/** @private */\n\tpublic static START_MULTIPLIER_INDEX:number = 0;\n\n\t/** @private */\n\tpublic static DELTA_MULTIPLIER_INDEX:number = 1;\n\n\t/** @private */\n\tpublic static START_OFFSET_INDEX:number = 2;\n\n\t/** @private */\n\tpublic static DELTA_OFFSET_INDEX:number = 3;\n\n\t/** @private */\n\tpublic static CYCLE_INDEX:number = 4;\n\n\tprivate _particleColorNode:ParticleColorNode;\n\tprivate _usesMultiplier:boolean;\n\tprivate _usesOffset:boolean;\n\tprivate _usesCycle:boolean;\n\tprivate _usesPhase:boolean;\n\tprivate _startColor:ColorTransform;\n\tprivate _endColor:ColorTransform;\n\tprivate _cycleDuration:number;\n\tprivate _cyclePhase:number;\n\tprivate _cycleData:Vector3D;\n\tprivate _startMultiplierData:Vector3D;\n\tprivate _deltaMultiplierData:Vector3D;\n\tprivate _startOffsetData:Vector3D;\n\tprivate _deltaOffsetData:Vector3D;\n\n\t/**\n\t * Defines the start color transform of the state, when in global mode.\n\t */\n\tpublic get startColor():ColorTransform\n\t{\n\t\treturn this._startColor;\n\t}\n\n\tpublic set startColor(value:ColorTransform)\n\t{\n\t\tthis._startColor = value;\n\n\t\tthis.updateColorData();\n\t}\n\n\t/**\n\t * Defines the end color transform of the state, when in global mode.\n\t */\n\tpublic get endColor():ColorTransform\n\t{\n\t\treturn this._endColor;\n\t}\n\n\tpublic set endColor(value:ColorTransform)\n\t{\n\t\tthis._endColor = value;\n\n\t\tthis.updateColorData();\n\t}\n\n\t/**\n\t * Defines the duration of the animation in seconds, used as a period independent of particle duration when in global mode. Defaults to 1.\n\t */\n\tpublic get cycleDuration():number\n\t{\n\t\treturn this._cycleDuration;\n\t}\n\n\tpublic set cycleDuration(value:number)\n\t{\n\t\tthis._cycleDuration = value;\n\n\t\tthis.updateColorData();\n\t}\n\n\t/**\n\t * Defines the phase of the cycle in degrees, used as the starting offset of the cycle when in global mode. Defaults to 0.\n\t */\n\tpublic get cyclePhase():number\n\t{\n\t\treturn this._cyclePhase;\n\t}\n\n\tpublic set cyclePhase(value:number)\n\t{\n\t\tthis._cyclePhase = value;\n\n\t\tthis.updateColorData();\n\t}\n\n\tconstructor(animator:ParticleAnimator, particleColorNode:ParticleColorNode)\n\t{\n\t\tsuper(animator, particleColorNode);\n\n\t\tthis._particleColorNode = particleColorNode;\n\t\tthis._usesMultiplier = this._particleColorNode._iUsesMultiplier;\n\t\tthis._usesOffset = this._particleColorNode._iUsesOffset;\n\t\tthis._usesCycle = this._particleColorNode._iUsesCycle;\n\t\tthis._usesPhase = this._particleColorNode._iUsesPhase;\n\t\tthis._startColor = this._particleColorNode._iStartColor;\n\t\tthis._endColor = this._particleColorNode._iEndColor;\n\t\tthis._cycleDuration = this._particleColorNode._iCycleDuration;\n\t\tthis._cyclePhase = this._particleColorNode._iCyclePhase;\n\n\t\tthis.updateColorData();\n\t}\n\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\n\t{\n\t\tif (shader.usesFragmentAnimation) {\n\t\t\tvar dataOffset:number = this._particleColorNode._iDataOffset;\n\t\t\tvar index:number;\n\t\t\tif (this._usesCycle)\n\t\t\t\tshader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.CYCLE_INDEX), this._cycleData.x, this._cycleData.y, this._cycleData.z, this._cycleData.w);\n\n\t\t\tif (this._usesMultiplier) {\n\t\t\t\tif (this._particleColorNode.mode == ParticlePropertiesMode.LOCAL_STATIC) {\n\t\t\t\t\tanimationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.START_MULTIPLIER_INDEX), dataOffset, stage, ContextGLVertexBufferFormat.FLOAT_4);\n\t\t\t\t\tdataOffset += 4;\n\t\t\t\t\tanimationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.DELTA_MULTIPLIER_INDEX), dataOffset, stage, ContextGLVertexBufferFormat.FLOAT_4);\n\t\t\t\t\tdataOffset += 4;\n\t\t\t\t} else {\n\t\t\t\t\tshader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.START_MULTIPLIER_INDEX), this._startMultiplierData.x, this._startMultiplierData.y, this._startMultiplierData.z, this._startMultiplierData.w);\n\t\t\t\t\tshader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.DELTA_MULTIPLIER_INDEX), this._deltaMultiplierData.x, this._deltaMultiplierData.y, this._deltaMultiplierData.z, this._deltaMultiplierData.w);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this._usesOffset) {\n\t\t\t\tif (this._particleColorNode.mode == ParticlePropertiesMode.LOCAL_STATIC) {\n\t\t\t\t\tanimationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.START_OFFSET_INDEX), dataOffset, stage, ContextGLVertexBufferFormat.FLOAT_4);\n\t\t\t\t\tdataOffset += 4;\n\t\t\t\t\tanimationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.DELTA_OFFSET_INDEX), dataOffset, stage, ContextGLVertexBufferFormat.FLOAT_4);\n\t\t\t\t} else {\n\t\t\t\t\tshader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.START_OFFSET_INDEX), this._startOffsetData.x, this._startOffsetData.y, this._startOffsetData.z, this._startOffsetData.w);\n\t\t\t\t\tshader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleColorState.DELTA_OFFSET_INDEX), this._deltaOffsetData.x, this._deltaOffsetData.y, this._deltaOffsetData.z, this._deltaOffsetData.w);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate updateColorData():void\n\t{\n\t\tif (this._usesCycle) {\n\t\t\tif (this._cycleDuration <= 0)\n\t\t\t\tthrow(new Error(\"the cycle duration must be greater than zero\"));\n\t\t\tthis._cycleData = new Vector3D(Math.PI*2/this._cycleDuration, this._cyclePhase*Math.PI/180, 0, 0);\n\t\t}\n\t\tif (this._particleColorNode.mode == ParticlePropertiesMode.GLOBAL) {\n\t\t\tif (this._usesCycle) {\n\t\t\t\tif (this._usesMultiplier) {\n\t\t\t\t\tthis._startMultiplierData = new Vector3D((this._startColor.redMultiplier + this._endColor.redMultiplier)/2, (this._startColor.greenMultiplier + this._endColor.greenMultiplier)/2, (this._startColor.blueMultiplier + this._endColor.blueMultiplier)/2, (this._startColor.alphaMultiplier + this._endColor.alphaMultiplier)/2);\n\t\t\t\t\tthis._deltaMultiplierData = new Vector3D((this._endColor.redMultiplier - this._startColor.redMultiplier)/2, (this._endColor.greenMultiplier - this._startColor.greenMultiplier)/2, (this._endColor.blueMultiplier - this._startColor.blueMultiplier)/2, (this._endColor.alphaMultiplier - this._startColor.alphaMultiplier)/2);\n\t\t\t\t}\n\n\t\t\t\tif (this._usesOffset) {\n\t\t\t\t\tthis._startOffsetData = new Vector3D((this._startColor.redOffset + this._endColor.redOffset)/(255*2), (this._startColor.greenOffset + this._endColor.greenOffset)/(255*2), (this._startColor.blueOffset + this._endColor.blueOffset)/(255*2), (this._startColor.alphaOffset + this._endColor.alphaOffset)/(255*2));\n\t\t\t\t\tthis._deltaOffsetData = new Vector3D((this._endColor.redOffset - this._startColor.redOffset)/(255*2), (this._endColor.greenOffset - this._startColor.greenOffset)/(255*2), (this._endColor.blueOffset - this._startColor.blueOffset)/(255*2), (this._endColor.alphaOffset - this._startColor.alphaOffset)/(255*2));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this._usesMultiplier) {\n\t\t\t\t\tthis._startMultiplierData = new Vector3D(this._startColor.redMultiplier, this._startColor.greenMultiplier, this._startColor.blueMultiplier, this._startColor.alphaMultiplier);\n\t\t\t\t\tthis._deltaMultiplierData = new Vector3D((this._endColor.redMultiplier - this._startColor.redMultiplier), (this._endColor.greenMultiplier - this._startColor.greenMultiplier), (this._endColor.blueMultiplier - this._startColor.blueMultiplier), (this._endColor.alphaMultiplier - this._startColor.alphaMultiplier));\n\t\t\t\t}\n\n\t\t\t\tif (this._usesOffset) {\n\t\t\t\t\tthis._startOffsetData = new Vector3D(this._startColor.redOffset/255, this._startColor.greenOffset/255, this._startColor.blueOffset/255, this._startColor.alphaOffset/255);\n\t\t\t\t\tthis._deltaOffsetData = new Vector3D((this._endColor.redOffset - this._startColor.redOffset)/255, (this._endColor.greenOffset - this._startColor.greenOffset)/255, (this._endColor.blueOffset - this._startColor.blueOffset )/255, (this._endColor.alphaOffset - this._startColor.alphaOffset)/255);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
    "import {MathConsts}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/MathConsts\";\nimport {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {DisplayObject}\t\t\t\t\tfrom \"awayjs-display/lib/display/DisplayObject\";\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\n\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\nimport {ContextGLVertexBufferFormat}\t\tfrom \"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\";\n\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\nimport {ParticleAnimationData}\t\t\tfrom \"../../animators/data/ParticleAnimationData\";\nimport {ParticleFollowNode}\t\t\t\tfrom \"../../animators/nodes/ParticleFollowNode\";\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\n\n/**\n * ...\n */\nexport class ParticleFollowState extends ParticleStateBase\n{\n\t/** @private */\n\tpublic static FOLLOW_POSITION_INDEX:number = 0;\n\n\t/** @private */\n\tpublic static FOLLOW_ROTATION_INDEX:number = 1;\n\n\tprivate _particleFollowNode:ParticleFollowNode;\n\tprivate _followTarget:DisplayObject;\n\n\tprivate _targetPos:Vector3D = new Vector3D();\n\tprivate _targetEuler:Vector3D = new Vector3D();\n\tprivate _prePos:Vector3D;\n\tprivate _preEuler:Vector3D;\n\tprivate _smooth:boolean;\n\n\t//temporary vector3D for calculation\n\tprivate _temp:Vector3D = new Vector3D();\n\n\tconstructor(animator:ParticleAnimator, particleFollowNode:ParticleFollowNode)\n\t{\n\t\tsuper(animator, particleFollowNode, true);\n\n\t\tthis._particleFollowNode = particleFollowNode;\n\t\tthis._smooth = particleFollowNode._iSmooth;\n\t}\n\n\tpublic get followTarget():DisplayObject\n\t{\n\t\treturn this._followTarget;\n\t}\n\n\tpublic set followTarget(value:DisplayObject)\n\t{\n\t\tthis._followTarget = value;\n\t}\n\n\tpublic get smooth():boolean\n\t{\n\t\treturn this._smooth;\n\t}\n\n\tpublic set smooth(value:boolean)\n\t{\n\t\tthis._smooth = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\n\t{\n\t\tif (this._followTarget) {\n\t\t\tif (this._particleFollowNode._iUsesPosition) {\n\t\t\t\tthis._targetPos.x = this._followTarget.transform.position.x/renderable.sourceEntity.scaleX;\n\t\t\t\tthis._targetPos.y = this._followTarget.transform.position.y/renderable.sourceEntity.scaleY;\n\t\t\t\tthis._targetPos.z = this._followTarget.transform.position.z/renderable.sourceEntity.scaleZ;\n\t\t\t}\n\t\t\tif (this._particleFollowNode._iUsesRotation) {\n\t\t\t\tthis._targetEuler.x = this._followTarget.rotationX;\n\t\t\t\tthis._targetEuler.y = this._followTarget.rotationY;\n\t\t\t\tthis._targetEuler.z = this._followTarget.rotationZ;\n\t\t\t\tthis._targetEuler.scaleBy(MathConsts.DEGREES_TO_RADIANS);\n\t\t\t}\n\t\t}\n\t\t//initialization\n\t\tif (!this._prePos)\n\t\t\tthis._prePos = this._targetPos.clone();\n\t\tif (!this._preEuler)\n\t\t\tthis._preEuler = this._targetEuler.clone();\n\n\t\tvar currentTime:number = this._pTime/1000;\n\t\tvar previousTime:number = animationElements.previousTime;\n\t\tvar deltaTime:number = currentTime - previousTime;\n\n\t\tvar needProcess:boolean = previousTime != currentTime;\n\n\t\tif (this._particleFollowNode._iUsesPosition && this._particleFollowNode._iUsesRotation) {\n\t\t\tif (needProcess)\n\t\t\t\tthis.processPositionAndRotation(currentTime, deltaTime, animationElements);\n\n\t\t\tanimationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleFollowState.FOLLOW_POSITION_INDEX), this._particleFollowNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_3);\n\t\t\tanimationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleFollowState.FOLLOW_ROTATION_INDEX), this._particleFollowNode._iDataOffset + 3, stage, ContextGLVertexBufferFormat.FLOAT_3);\n\t\t} else if (this._particleFollowNode._iUsesPosition) {\n\t\t\tif (needProcess)\n\t\t\t\tthis.processPosition(currentTime, deltaTime, animationElements);\n\n\t\t\tanimationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleFollowState.FOLLOW_POSITION_INDEX), this._particleFollowNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_3);\n\t\t} else if (this._particleFollowNode._iUsesRotation) {\n\t\t\tif (needProcess)\n\t\t\t\tthis.precessRotation(currentTime, deltaTime, animationElements);\n\n\t\t\tanimationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleFollowState.FOLLOW_ROTATION_INDEX), this._particleFollowNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_3);\n\t\t}\n\n\t\tthis._prePos.copyFrom(this._targetPos);\n\t\tthis._targetEuler.copyFrom(this._targetEuler);\n\t\tanimationElements.previousTime = currentTime;\n\t}\n\n\tprivate processPosition(currentTime:number, deltaTime:number, animationElements:AnimationElements):void\n\t{\n\t\tvar data:Array<ParticleAnimationData> = animationElements.animationParticles;\n\t\tvar vertexData:Array<number> = animationElements.vertexData;\n\n\t\tvar changed:boolean = false;\n\t\tvar len:number = data.length;\n\t\tvar interpolatedPos:Vector3D;\n\t\tvar posVelocity:Vector3D;\n\t\tif (this._smooth) {\n\t\t\tposVelocity = this._prePos.subtract(this._targetPos);\n\t\t\tposVelocity.scaleBy(1/deltaTime);\n\t\t} else\n\t\t\tinterpolatedPos = this._targetPos;\n\t\tfor (var i:number = 0; i < len; i++) {\n\t\t\tvar k:number = (currentTime - data[i].startTime)/data[i].totalTime;\n\t\t\tvar t:number = (k - Math.floor(k))*data[i].totalTime;\n\t\t\tif (t - deltaTime <= 0) {\n\t\t\t\tvar inc:number = data[i].startVertexIndex*animationElements.totalLenOfOneVertex + this._particleFollowNode._iDataOffset;\n\n\t\t\t\tif (this._smooth) {\n\t\t\t\t\tthis._temp.copyFrom(posVelocity);\n\t\t\t\t\tthis._temp.scaleBy(t);\n\t\t\t\t\tinterpolatedPos = this._targetPos.add(this._temp);\n\t\t\t\t}\n\n\t\t\t\tif (vertexData[inc] != interpolatedPos.x || vertexData[inc + 1] != interpolatedPos.y || vertexData[inc + 2] != interpolatedPos.z) {\n\t\t\t\t\tchanged = true;\n\t\t\t\t\tfor (var j:number = 0; j < data[i].numVertices; j++) {\n\t\t\t\t\t\tvertexData[inc++] = interpolatedPos.x;\n\t\t\t\t\t\tvertexData[inc++] = interpolatedPos.y;\n\t\t\t\t\t\tvertexData[inc++] = interpolatedPos.z;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (changed)\n\t\t\tanimationElements.invalidateBuffer();\n\n\t}\n\n\tprivate precessRotation(currentTime:number, deltaTime:number, animationElements:AnimationElements):void\n\t{\n\t\tvar data:Array<ParticleAnimationData> = animationElements.animationParticles;\n\t\tvar vertexData:Array<number> = animationElements.vertexData;\n\n\t\tvar changed:boolean = false;\n\t\tvar len:number = data.length;\n\n\t\tvar interpolatedRotation:Vector3D;\n\t\tvar rotationVelocity:Vector3D;\n\n\t\tif (this._smooth) {\n\t\t\trotationVelocity = this._preEuler.subtract(this._targetEuler);\n\t\t\trotationVelocity.scaleBy(1/deltaTime);\n\t\t} else\n\t\t\tinterpolatedRotation = this._targetEuler;\n\n\t\tfor (var i:number = 0; i < len; i++) {\n\t\t\tvar k:number = (currentTime - data[i].startTime)/data[i].totalTime;\n\t\t\tvar t:number = (k - Math.floor(k))*data[i].totalTime;\n\t\t\tif (t - deltaTime <= 0) {\n\t\t\t\tvar inc:number = data[i].startVertexIndex*animationElements.totalLenOfOneVertex + this._particleFollowNode._iDataOffset;\n\n\t\t\t\tif (this._smooth) {\n\t\t\t\t\tthis._temp.copyFrom(rotationVelocity);\n\t\t\t\t\tthis._temp.scaleBy(t);\n\t\t\t\t\tinterpolatedRotation = this._targetEuler.add(this._temp);\n\t\t\t\t}\n\n\t\t\t\tif (vertexData[inc] != interpolatedRotation.x || vertexData[inc + 1] != interpolatedRotation.y || vertexData[inc + 2] != interpolatedRotation.z) {\n\t\t\t\t\tchanged = true;\n\t\t\t\t\tfor (var j:number = 0; j < data[i].numVertices; j++) {\n\t\t\t\t\t\tvertexData[inc++] = interpolatedRotation.x;\n\t\t\t\t\t\tvertexData[inc++] = interpolatedRotation.y;\n\t\t\t\t\t\tvertexData[inc++] = interpolatedRotation.z;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (changed)\n\t\t\tanimationElements.invalidateBuffer();\n\n\t}\n\n\tprivate processPositionAndRotation(currentTime:number, deltaTime:number, animationElements:AnimationElements):void\n\t{\n\t\tvar data:Array<ParticleAnimationData> = animationElements.animationParticles;\n\t\tvar vertexData:Array<number> = animationElements.vertexData;\n\n\t\tvar changed:boolean = false;\n\t\tvar len:number = data.length;\n\n\t\tvar interpolatedPos:Vector3D;\n\t\tvar interpolatedRotation:Vector3D;\n\n\t\tvar posVelocity:Vector3D;\n\t\tvar rotationVelocity:Vector3D;\n\t\tif (this._smooth) {\n\t\t\tposVelocity = this._prePos.subtract(this._targetPos);\n\t\t\tposVelocity.scaleBy(1/deltaTime);\n\t\t\trotationVelocity = this._preEuler.subtract(this._targetEuler);\n\t\t\trotationVelocity.scaleBy(1/deltaTime);\n\t\t} else {\n\t\t\tinterpolatedPos = this._targetPos;\n\t\t\tinterpolatedRotation = this._targetEuler;\n\t\t}\n\n\t\tfor (var i:number = 0; i < len; i++) {\n\t\t\tvar k:number = (currentTime - data[i].startTime)/data[i].totalTime;\n\t\t\tvar t:number = (k - Math.floor(k))*data[i].totalTime;\n\t\t\tif (t - deltaTime <= 0) {\n\t\t\t\tvar inc:number = data[i].startVertexIndex*animationElements.totalLenOfOneVertex + this._particleFollowNode._iDataOffset;\n\t\t\t\tif (this._smooth) {\n\t\t\t\t\tthis._temp.copyFrom(posVelocity);\n\t\t\t\t\tthis._temp.scaleBy(t);\n\t\t\t\t\tinterpolatedPos = this._targetPos.add(this._temp);\n\n\t\t\t\t\tthis._temp.copyFrom(rotationVelocity);\n\t\t\t\t\tthis._temp.scaleBy(t);\n\t\t\t\t\tinterpolatedRotation = this._targetEuler.add(this._temp);\n\t\t\t\t}\n\n\t\t\t\tif (vertexData[inc] != interpolatedPos.x || vertexData[inc + 1] != interpolatedPos.y || vertexData[inc + 2] != interpolatedPos.z || vertexData[inc + 3] != interpolatedRotation.x || vertexData[inc + 4] != interpolatedRotation.y || vertexData[inc + 5] != interpolatedRotation.z) {\n\t\t\t\t\tchanged = true;\n\t\t\t\t\tfor (var j:number = 0; j < data[i].numVertices; j++) {\n\t\t\t\t\t\tvertexData[inc++] = interpolatedPos.x;\n\t\t\t\t\t\tvertexData[inc++] = interpolatedPos.y;\n\t\t\t\t\t\tvertexData[inc++] = interpolatedPos.z;\n\t\t\t\t\t\tvertexData[inc++] = interpolatedRotation.x;\n\t\t\t\t\t\tvertexData[inc++] = interpolatedRotation.y;\n\t\t\t\t\t\tvertexData[inc++] = interpolatedRotation.z;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (changed)\n\t\t\tanimationElements.invalidateBuffer();\n\t}\n\n}",
    "import {ColorTransform}\t\t\t\t\tfrom \"awayjs-core/lib/geom/ColorTransform\";\nimport {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\n\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\nimport {ContextGLVertexBufferFormat}\t\tfrom \"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\";\n\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\nimport {ParticleInitialColorNode}\t\t\tfrom \"../../animators/nodes/ParticleInitialColorNode\";\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\n\n/**\n*\n*/\nexport class ParticleInitialColorState extends ParticleStateBase\n{\n\t/** @private */\n\tpublic static MULTIPLIER_INDEX:number = 0;\n\t/** @private */\n\tpublic static OFFSET_INDEX:number = 1;\n\n\tprivate _particleInitialColorNode:ParticleInitialColorNode;\n\tprivate _usesMultiplier:boolean;\n\tprivate _usesOffset:boolean;\n\tprivate _initialColor:ColorTransform;\n\tprivate _multiplierData:Vector3D;\n\tprivate _offsetData:Vector3D;\n\n\tconstructor(animator:ParticleAnimator, particleInitialColorNode:ParticleInitialColorNode)\n\t{\n\t\tsuper(animator, particleInitialColorNode);\n\n\t\tthis._particleInitialColorNode = particleInitialColorNode;\n\t\tthis._usesMultiplier = particleInitialColorNode._iUsesMultiplier;\n\t\tthis._usesOffset = particleInitialColorNode._iUsesOffset;\n\t\tthis._initialColor = particleInitialColorNode._iInitialColor;\n\n\t\tthis.updateColorData();\n\t}\n\n\t/**\n\t * Defines the initial color transform of the state, when in global mode.\n\t */\n\tpublic get initialColor():ColorTransform\n\t{\n\t\treturn this._initialColor;\n\t}\n\n\tpublic set initialColor(value:ColorTransform)\n\t{\n\t\tthis._initialColor = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\n\t{\n\t\tif (shader.usesFragmentAnimation) {\n\t\t\tvar index:number;\n\t\t\tif (this._particleInitialColorNode.mode == ParticlePropertiesMode.LOCAL_STATIC) {\n\t\t\t\tvar dataOffset:number = this._particleInitialColorNode._iDataOffset;\n\t\t\t\tif (this._usesMultiplier) {\n\t\t\t\t\tanimationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleInitialColorState.MULTIPLIER_INDEX), dataOffset, stage, ContextGLVertexBufferFormat.FLOAT_4);\n\t\t\t\t\tdataOffset += 4;\n\t\t\t\t}\n\t\t\t\tif (this._usesOffset)\n\t\t\t\t\tanimationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleInitialColorState.OFFSET_INDEX), dataOffset, stage, ContextGLVertexBufferFormat.FLOAT_4);\n\t\t\t} else {\n\t\t\t\tif (this._usesMultiplier)\n\t\t\t\t\tshader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleInitialColorState.MULTIPLIER_INDEX), this._multiplierData.x, this._multiplierData.y, this._multiplierData.z, this._multiplierData.w);\n\t\t\t\tif (this._usesOffset)\n\t\t\t\t\tshader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleInitialColorState.OFFSET_INDEX), this._offsetData.x, this._offsetData.y, this._offsetData.z, this._offsetData.w);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate updateColorData():void\n\t{\n\t\tif (this._particleInitialColorNode.mode == ParticlePropertiesMode.GLOBAL) {\n\t\t\tif (this._usesMultiplier)\n\t\t\t\tthis._multiplierData = new Vector3D(this._initialColor.redMultiplier, this._initialColor.greenMultiplier, this._initialColor.blueMultiplier, this._initialColor.alphaMultiplier);\n\t\t\tif (this._usesOffset)\n\t\t\t\tthis._offsetData = new Vector3D(this._initialColor.redOffset/255, this._initialColor.greenOffset/255, this._initialColor.blueOffset/255, this._initialColor.alphaOffset/255);\n\t\t}\n\t}\n\n}",
    "import {Matrix3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\nimport {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\n\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\nimport {ContextGLVertexBufferFormat}\t\tfrom \"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\";\n\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\nimport {ParticleOrbitNode}\t\t\t\tfrom \"../../animators/nodes/ParticleOrbitNode\";\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\n\n/**\n * ...\n */\nexport class ParticleOrbitState extends ParticleStateBase\n{\n\t/** @private */\n\tpublic static ORBIT_INDEX:number = 0;\n\n\t/** @private */\n\tpublic static EULERS_INDEX:number = 1;\n\n\tprivate _particleOrbitNode:ParticleOrbitNode;\n\tprivate _usesEulers:boolean;\n\tprivate _usesCycle:boolean;\n\tprivate _usesPhase:boolean;\n\tprivate _radius:number;\n\tprivate _cycleDuration:number;\n\tprivate _cyclePhase:number;\n\tprivate _eulers:Vector3D;\n\tprivate _orbitData:Vector3D;\n\tprivate _eulersMatrix:Matrix3D;\n\n\t/**\n\t * Defines the radius of the orbit when in global mode. Defaults to 100.\n\t */\n\tpublic get radius():number\n\t{\n\t\treturn this._radius;\n\t}\n\n\tpublic set radius(value:number)\n\t{\n\t\tthis._radius = value;\n\n\t\tthis.updateOrbitData();\n\t}\n\n\t/**\n\t * Defines the duration of the orbit in seconds, used as a period independent of particle duration when in global mode. Defaults to 1.\n\t */\n\tpublic get cycleDuration():number\n\t{\n\t\treturn this._cycleDuration;\n\t}\n\n\tpublic set cycleDuration(value:number)\n\t{\n\t\tthis._cycleDuration = value;\n\n\t\tthis.updateOrbitData();\n\t}\n\n\t/**\n\t * Defines the phase of the orbit in degrees, used as the starting offset of the cycle when in global mode. Defaults to 0.\n\t */\n\tpublic get cyclePhase():number\n\t{\n\t\treturn this._cyclePhase;\n\t}\n\n\tpublic set cyclePhase(value:number)\n\t{\n\t\tthis._cyclePhase = value;\n\n\t\tthis.updateOrbitData();\n\t}\n\n\t/**\n\t * Defines the euler rotation in degrees, applied to the orientation of the orbit when in global mode.\n\t */\n\tpublic get eulers():Vector3D\n\t{\n\t\treturn this._eulers;\n\t}\n\n\tpublic set eulers(value:Vector3D)\n\t{\n\t\tthis._eulers = value;\n\n\t\tthis.updateOrbitData();\n\n\t}\n\n\tconstructor(animator:ParticleAnimator, particleOrbitNode:ParticleOrbitNode)\n\t{\n\t\tsuper(animator, particleOrbitNode);\n\n\t\tthis._particleOrbitNode = particleOrbitNode;\n\t\tthis._usesEulers = this._particleOrbitNode._iUsesEulers;\n\t\tthis._usesCycle = this._particleOrbitNode._iUsesCycle;\n\t\tthis._usesPhase = this._particleOrbitNode._iUsesPhase;\n\t\tthis._eulers = this._particleOrbitNode._iEulers;\n\t\tthis._radius = this._particleOrbitNode._iRadius;\n\t\tthis._cycleDuration = this._particleOrbitNode._iCycleDuration;\n\t\tthis._cyclePhase = this._particleOrbitNode._iCyclePhase;\n\t\tthis.updateOrbitData();\n\t}\n\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\n\t{\n\t\tvar index:number = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleOrbitState.ORBIT_INDEX);\n\n\t\tif (this._particleOrbitNode.mode == ParticlePropertiesMode.LOCAL_STATIC) {\n\t\t\tif (this._usesPhase)\n\t\t\t\tanimationElements.activateVertexBuffer(index, this._particleOrbitNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_4);\n\t\t\telse\n\t\t\t\tanimationElements.activateVertexBuffer(index, this._particleOrbitNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_3);\n\t\t} else\n\t\t\tshader.setVertexConst(index, this._orbitData.x, this._orbitData.y, this._orbitData.z, this._orbitData.w);\n\n\t\tif (this._usesEulers)\n\t\t\tshader.setVertexConstFromMatrix(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleOrbitState.EULERS_INDEX), this._eulersMatrix);\n\t}\n\n\tprivate updateOrbitData():void\n\t{\n\t\tif (this._usesEulers) {\n\t\t\tthis._eulersMatrix = new Matrix3D();\n\t\t\tthis._eulersMatrix.appendRotation(this._eulers.x, Vector3D.X_AXIS);\n\t\t\tthis._eulersMatrix.appendRotation(this._eulers.y, Vector3D.Y_AXIS);\n\t\t\tthis._eulersMatrix.appendRotation(this._eulers.z, Vector3D.Z_AXIS);\n\t\t}\n\t\tif (this._particleOrbitNode.mode == ParticlePropertiesMode.GLOBAL) {\n\t\t\tthis._orbitData = new Vector3D(this._radius, 0, this._radius*Math.PI*2, this._cyclePhase*Math.PI/180);\n\t\t\tif (this._usesCycle) {\n\t\t\t\tif (this._cycleDuration <= 0)\n\t\t\t\t\tthrow(new Error(\"the cycle duration must be greater than zero\"));\n\t\t\t\tthis._orbitData.y = Math.PI*2/this._cycleDuration;\n\t\t\t} else\n\t\t\t\tthis._orbitData.y = Math.PI*2;\n\t\t}\n\t}\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\n\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\nimport {ContextGLVertexBufferFormat}\t\tfrom \"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\";\n\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\nimport {ParticleOscillatorNode}\t\t\tfrom \"../../animators/nodes/ParticleOscillatorNode\";\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\n\n/**\n * ...\n */\nexport class ParticleOscillatorState extends ParticleStateBase\n{\n\t/** @private */\n\tpublic static OSCILLATOR_INDEX:number = 0;\n\n\tprivate _particleOscillatorNode:ParticleOscillatorNode;\n\tprivate _oscillator:Vector3D;\n\tprivate _oscillatorData:Vector3D;\n\n\t/**\n\t * Defines the default oscillator axis (x, y, z) and cycleDuration (w) of the state, used when in global mode.\n\t */\n\tpublic get oscillator():Vector3D\n\t{\n\t\treturn this._oscillator;\n\t}\n\n\tpublic set oscillator(value:Vector3D)\n\t{\n\t\tthis._oscillator = value;\n\n\t\tthis.updateOscillatorData();\n\t}\n\n\tconstructor(animator:ParticleAnimator, particleOscillatorNode:ParticleOscillatorNode)\n\t{\n\t\tsuper(animator, particleOscillatorNode);\n\n\t\tthis._particleOscillatorNode = particleOscillatorNode;\n\t\tthis._oscillator = this._particleOscillatorNode._iOscillator;\n\n\t\tthis.updateOscillatorData();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\n\t{\n\t\tvar index:number = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleOscillatorState.OSCILLATOR_INDEX);\n\n\t\tif (this._particleOscillatorNode.mode == ParticlePropertiesMode.LOCAL_STATIC)\n\t\t\tanimationElements.activateVertexBuffer(index, this._particleOscillatorNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_4);\n\t\telse\n\t\t\tshader.setVertexConst(index, this._oscillatorData.x, this._oscillatorData.y, this._oscillatorData.z, this._oscillatorData.w);\n\t}\n\n\tprivate updateOscillatorData():void\n\t{\n\t\tif (this._particleOscillatorNode.mode == ParticlePropertiesMode.GLOBAL) {\n\t\t\tif (this._oscillator.w <= 0)\n\t\t\t\tthrow(new Error(\"the cycle duration must greater than zero\"));\n\n\t\t\tif (this._oscillatorData == null)\n\t\t\t\tthis._oscillatorData = new Vector3D();\n\n\t\t\tthis._oscillatorData.x = this._oscillator.x;\n\t\t\tthis._oscillatorData.y = this._oscillator.y;\n\t\t\tthis._oscillatorData.z = this._oscillator.z;\n\t\t\tthis._oscillatorData.w = Math.PI*2/this._oscillator.w;\n\t\t}\n\t}\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\n\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\nimport {ContextGLVertexBufferFormat}\t\tfrom \"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\";\n\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\nimport {ParticlePositionNode}\t\t\t\tfrom \"../../animators/nodes/ParticlePositionNode\";\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\n\n/**\n * ...\n * @author ...\n */\nexport class ParticlePositionState extends ParticleStateBase\n{\n\t/** @private */\n\tpublic static POSITION_INDEX:number = 0;\n\n\tprivate _particlePositionNode:ParticlePositionNode;\n\tprivate _position:Vector3D;\n\n\t/**\n\t * Defines the position of the particle when in global mode. Defaults to 0,0,0.\n\t */\n\tpublic get position():Vector3D\n\t{\n\t\treturn this._position;\n\t}\n\n\tpublic set position(value:Vector3D)\n\t{\n\t\tthis._position = value;\n\t}\n\n\t/**\n\t *\n\t */\n\tpublic getPositions():Array<Vector3D>\n\t{\n\t\treturn this._pDynamicProperties;\n\t}\n\n\tpublic setPositions(value:Array<Vector3D>):void\n\t{\n\t\tthis._pDynamicProperties = value;\n\n\t\tthis._pDynamicPropertiesDirty = new Object();\n\t}\n\n\tconstructor(animator:ParticleAnimator, particlePositionNode:ParticlePositionNode)\n\t{\n\t\tsuper(animator, particlePositionNode);\n\n\t\tthis._particlePositionNode = particlePositionNode;\n\t\tthis._position = this._particlePositionNode._iPosition;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\n\t{\n\t\tif (this._particlePositionNode.mode == ParticlePropertiesMode.LOCAL_DYNAMIC && !this._pDynamicPropertiesDirty[animationElements._iUniqueId])\n\t\t\tthis._pUpdateDynamicProperties(animationElements);\n\n\t\tvar index:number = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticlePositionState.POSITION_INDEX);\n\n\t\tif (this._particlePositionNode.mode == ParticlePropertiesMode.GLOBAL)\n\t\t\tshader.setVertexConst(index, this._position.x, this._position.y, this._position.z);\n\t\telse\n\t\t\tanimationElements.activateVertexBuffer(index, this._particlePositionNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_3);\n\t}\n}",
    "import {Matrix3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\n\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\n\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\n\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\n\n/**\n * ...\n */\nexport class ParticleRotateToHeadingState extends ParticleStateBase\n{\n\t/** @private */\n\tpublic static MATRIX_INDEX:number = 0;\n\n\tprivate _matrix:Matrix3D = new Matrix3D();\n\n\tconstructor(animator:ParticleAnimator, particleNode:ParticleNodeBase)\n\t{\n\t\tsuper(animator, particleNode);\n\t}\n\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\n\t{\n\t\tif ((<ParticleAnimationSet> this._pParticleAnimator.animationSet).hasBillboard) {\n\t\t\tthis._matrix.copyFrom(renderable.sourceEntity.sceneTransform);\n\t\t\tthis._matrix.append(camera.inverseSceneTransform);\n\t\t\tshader.setVertexConstFromMatrix(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleRotateToHeadingState.MATRIX_INDEX), this._matrix);\n\t\t}\n\t}\n\n}",
    "import {Matrix3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\nimport {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\n\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\nimport {ContextGLVertexBufferFormat}\t\tfrom \"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\";\n\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\nimport {ParticleAnimationSet}\t\t\t\tfrom \"../../animators/ParticleAnimationSet\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\nimport {ParticleRotateToPositionNode}\t\tfrom \"../../animators/nodes/ParticleRotateToPositionNode\";\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\n\n/**\n * ...\n */\nexport class ParticleRotateToPositionState extends ParticleStateBase\n{\n\t/** @private */\n\tpublic static MATRIX_INDEX:number = 0;\n\t/** @private */\n\tpublic static POSITION_INDEX:number = 1;\n\n\tprivate _particleRotateToPositionNode:ParticleRotateToPositionNode;\n\tprivate _position:Vector3D;\n\tprivate _matrix:Matrix3D = new Matrix3D();\n\tprivate _offset:Vector3D;\n\n\t/**\n\t * Defines the position of the point the particle will rotate to face when in global mode. Defaults to 0,0,0.\n\t */\n\tpublic get position():Vector3D\n\t{\n\t\treturn this._position;\n\t}\n\n\tpublic set position(value:Vector3D)\n\t{\n\t\tthis._position = value;\n\t}\n\n\tconstructor(animator:ParticleAnimator, particleRotateToPositionNode:ParticleRotateToPositionNode)\n\t{\n\t\tsuper(animator, particleRotateToPositionNode);\n\n\t\tthis._particleRotateToPositionNode = particleRotateToPositionNode;\n\t\tthis._position = this._particleRotateToPositionNode._iPosition;\n\t}\n\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\n\t{\n\t\tvar index:number = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleRotateToPositionState.POSITION_INDEX);\n\n\t\tif ((<ParticleAnimationSet> this._pParticleAnimator.animationSet).hasBillboard) {\n\t\t\tthis._matrix.copyFrom(renderable.sourceEntity.sceneTransform);\n\t\t\tthis._matrix.append(camera.inverseSceneTransform);\n\t\t\tshader.setVertexConstFromMatrix(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleRotateToPositionState.MATRIX_INDEX), this._matrix);\n\t\t}\n\n\t\tif (this._particleRotateToPositionNode.mode == ParticlePropertiesMode.GLOBAL) {\n\t\t\tthis._offset = renderable.sourceEntity.inverseSceneTransform.transformVector(this._position);\n\t\t\tshader.setVertexConst(index, this._offset.x, this._offset.y, this._offset.z);\n\t\t} else\n\t\t\tanimationElements.activateVertexBuffer(index, this._particleRotateToPositionNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_3);\n\n\t}\n\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\n\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\nimport {ContextGLVertexBufferFormat}\t\tfrom \"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\";\n\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\nimport {ParticleRotationalVelocityNode}\tfrom \"../../animators/nodes/ParticleRotationalVelocityNode\";\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\n\n/**\n * ...\n */\nexport class ParticleRotationalVelocityState extends ParticleStateBase\n{\n\t/** @private */\n\tpublic static ROTATIONALVELOCITY_INDEX:number = 0;\n\n\tprivate _particleRotationalVelocityNode:ParticleRotationalVelocityNode;\n\tprivate _rotationalVelocityData:Vector3D;\n\tprivate _rotationalVelocity:Vector3D;\n\n\t/**\n\t * Defines the default rotationalVelocity of the state, used when in global mode.\n\t */\n\tpublic get rotationalVelocity():Vector3D\n\t{\n\t\treturn this._rotationalVelocity;\n\t}\n\n\tpublic set rotationalVelocity(value:Vector3D)\n\t{\n\t\tthis._rotationalVelocity = value;\n\n\t\tthis.updateRotationalVelocityData();\n\t}\n\n\t/**\n\t *\n\t */\n\tpublic getRotationalVelocities():Array<Vector3D>\n\t{\n\t\treturn this._pDynamicProperties;\n\t}\n\n\tpublic setRotationalVelocities(value:Array<Vector3D>):void\n\t{\n\t\tthis._pDynamicProperties = value;\n\n\t\tthis._pDynamicPropertiesDirty = new Object();\n\t}\n\n\tconstructor(animator:ParticleAnimator, particleRotationNode:ParticleRotationalVelocityNode)\n\t{\n\t\tsuper(animator, particleRotationNode);\n\n\t\tthis._particleRotationalVelocityNode = particleRotationNode;\n\t\tthis._rotationalVelocity = this._particleRotationalVelocityNode._iRotationalVelocity;\n\n\t\tthis.updateRotationalVelocityData();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\n\t{\n\t\tif (this._particleRotationalVelocityNode.mode == ParticlePropertiesMode.LOCAL_DYNAMIC && !this._pDynamicPropertiesDirty[animationElements._iUniqueId])\n\t\t\tthis._pUpdateDynamicProperties(animationElements);\n\n\t\tvar index:number = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleRotationalVelocityState.ROTATIONALVELOCITY_INDEX);\n\n\t\tif (this._particleRotationalVelocityNode.mode == ParticlePropertiesMode.GLOBAL)\n\t\t\tshader.setVertexConst(index, this._rotationalVelocityData.x, this._rotationalVelocityData.y, this._rotationalVelocityData.z, this._rotationalVelocityData.w);\n\t\telse\n\t\t\tanimationElements.activateVertexBuffer(index, this._particleRotationalVelocityNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_4);\n\t}\n\n\tprivate updateRotationalVelocityData():void\n\t{\n\t\tif (this._particleRotationalVelocityNode.mode == ParticlePropertiesMode.GLOBAL) {\n\t\t\tif (this._rotationalVelocity.w <= 0)\n\t\t\t\tthrow(new Error(\"the cycle duration must greater than zero\"));\n\t\t\tvar rotation:Vector3D = this._rotationalVelocity.clone();\n\n\t\t\tif (rotation.length <= 0)\n\t\t\t\trotation.z = 1; //set the default direction\n\t\t\telse\n\t\t\t\trotation.normalize();\n\t\t\t// w is used as angle/2 in agal\n\t\t\tthis._rotationalVelocityData = new Vector3D(rotation.x, rotation.y, rotation.z, Math.PI/rotation.w);\n\t\t}\n\t}\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\n\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\nimport {ContextGLVertexBufferFormat}\t\tfrom \"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\";\n\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\nimport {ParticleScaleNode}\t\t\t\tfrom \"../../animators/nodes/ParticleScaleNode\";\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\n\n/**\n * ...\n */\nexport class ParticleScaleState extends ParticleStateBase\n{\n\t/** @private */\n\tpublic static SCALE_INDEX:number = 0;\n\n\tprivate _particleScaleNode:ParticleScaleNode;\n\tprivate _usesCycle:boolean;\n\tprivate _usesPhase:boolean;\n\tprivate _minScale:number;\n\tprivate _maxScale:number;\n\tprivate _cycleDuration:number;\n\tprivate _cyclePhase:number;\n\tprivate _scaleData:Vector3D;\n\n\t/**\n\t * Defines the end scale of the state, when in global mode. Defaults to 1.\n\t */\n\tpublic get minScale():number\n\t{\n\t\treturn this._minScale;\n\t}\n\n\tpublic set minScale(value:number)\n\t{\n\t\tthis._minScale = value;\n\n\t\tthis.updateScaleData();\n\t}\n\n\t/**\n\t * Defines the end scale of the state, when in global mode. Defaults to 1.\n\t */\n\tpublic get maxScale():number\n\t{\n\t\treturn this._maxScale;\n\t}\n\n\tpublic set maxScale(value:number)\n\t{\n\t\tthis._maxScale = value;\n\n\t\tthis.updateScaleData();\n\t}\n\n\t/**\n\t * Defines the duration of the animation in seconds, used as a period independent of particle duration when in global mode. Defaults to 1.\n\t */\n\tpublic get cycleDuration():number\n\t{\n\t\treturn this._cycleDuration;\n\t}\n\n\tpublic set cycleDuration(value:number)\n\t{\n\t\tthis._cycleDuration = value;\n\n\t\tthis.updateScaleData();\n\t}\n\n\t/**\n\t * Defines the phase of the cycle in degrees, used as the starting offset of the cycle when in global mode. Defaults to 0.\n\t */\n\tpublic get cyclePhase():number\n\t{\n\t\treturn this._cyclePhase;\n\t}\n\n\tpublic set cyclePhase(value:number)\n\t{\n\t\tthis._cyclePhase = value;\n\n\t\tthis.updateScaleData();\n\t}\n\n\tconstructor(animator:ParticleAnimator, particleScaleNode:ParticleScaleNode)\n\t{\n\t\tsuper(animator, particleScaleNode);\n\n\t\tthis._particleScaleNode = particleScaleNode;\n\t\tthis._usesCycle = this._particleScaleNode._iUsesCycle;\n\t\tthis._usesPhase = this._particleScaleNode._iUsesPhase;\n\t\tthis._minScale = this._particleScaleNode._iMinScale;\n\t\tthis._maxScale = this._particleScaleNode._iMaxScale;\n\t\tthis._cycleDuration = this._particleScaleNode._iCycleDuration;\n\t\tthis._cyclePhase = this._particleScaleNode._iCyclePhase;\n\n\t\tthis.updateScaleData();\n\t}\n\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\n\t{\n\t\tvar index:number = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleScaleState.SCALE_INDEX);\n\n\t\tif (this._particleScaleNode.mode == ParticlePropertiesMode.LOCAL_STATIC) {\n\t\t\tif (this._usesCycle) {\n\t\t\t\tif (this._usesPhase)\n\t\t\t\t\tanimationElements.activateVertexBuffer(index, this._particleScaleNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_4);\n\t\t\t\telse\n\t\t\t\t\tanimationElements.activateVertexBuffer(index, this._particleScaleNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_3);\n\t\t\t} else\n\t\t\t\tanimationElements.activateVertexBuffer(index, this._particleScaleNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_2);\n\t\t} else\n\t\t\tshader.setVertexConst(index, this._scaleData.x, this._scaleData.y, this._scaleData.z, this._scaleData.w);\n\t}\n\n\tprivate updateScaleData():void\n\t{\n\t\tif (this._particleScaleNode.mode == ParticlePropertiesMode.GLOBAL) {\n\t\t\tif (this._usesCycle) {\n\t\t\t\tif (this._cycleDuration <= 0)\n\t\t\t\t\tthrow(new Error(\"the cycle duration must be greater than zero\"));\n\t\t\t\tthis._scaleData = new Vector3D((this._minScale + this._maxScale)/2, Math.abs(this._minScale - this._maxScale)/2, Math.PI*2/this._cycleDuration, this._cyclePhase*Math.PI/180);\n\t\t\t} else\n\t\t\t\tthis._scaleData = new Vector3D(this._minScale, this._maxScale - this._minScale, 0, 0);\n\t\t}\n\t}\n}",
    "import {ColorTransform}\t\t\t\t\tfrom \"awayjs-core/lib/geom/ColorTransform\";\n\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\n\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\n\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\nimport {ColorSegmentPoint}\t\t\t\tfrom \"../../animators/data/ColorSegmentPoint\";\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\nimport {ParticleSegmentedColorNode}\t\tfrom \"../../animators/nodes/ParticleSegmentedColorNode\";\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\n\n/**\n *\n */\nexport class ParticleSegmentedColorState extends ParticleStateBase\n{\n\t/** @private */\n\tpublic static START_MULTIPLIER_INDEX:number = 0;\n\n\t/** @private */\n\tpublic static START_OFFSET_INDEX:number = 1;\n\n\t/** @private */\n\tpublic static TIME_DATA_INDEX:number = 2;\n\n\tprivate _usesMultiplier:boolean;\n\tprivate _usesOffset:boolean;\n\tprivate _startColor:ColorTransform;\n\tprivate _endColor:ColorTransform;\n\tprivate _segmentPoints:Array<ColorSegmentPoint>;\n\tprivate _numSegmentPoint:number;\n\n\tprivate _timeLifeData:Float32Array;\n\tprivate _multiplierData:Float32Array;\n\tprivate _offsetData:Float32Array;\n\n\t/**\n\t * Defines the start color transform of the state, when in global mode.\n\t */\n\tpublic get startColor():ColorTransform\n\t{\n\t\treturn this._startColor;\n\t}\n\n\tpublic set startColor(value:ColorTransform)\n\t{\n\t\tthis._startColor = value;\n\n\t\tthis.updateColorData();\n\t}\n\n\t/**\n\t * Defines the end color transform of the state, when in global mode.\n\t */\n\tpublic get endColor():ColorTransform\n\t{\n\t\treturn this._endColor;\n\t}\n\n\tpublic set endColor(value:ColorTransform)\n\t{\n\t\tthis._endColor = value;\n\t\t\n\t\tthis.updateColorData();\n\t}\n\n\t/**\n\t * Defines the number of segments.\n\t */\n\tpublic get numSegmentPoint():number\n\t{\n\t\treturn this._numSegmentPoint;\n\t}\n\n\t/**\n\t * Defines the key points of color\n\t */\n\tpublic get segmentPoints():Array<ColorSegmentPoint>\n\t{\n\t\treturn this._segmentPoints;\n\t}\n\n\tpublic set segmentPoints(value:Array<ColorSegmentPoint>)\n\t{\n\t\tthis._segmentPoints = value;\n\t\tthis.updateColorData();\n\t}\n\n\tpublic get usesMultiplier():boolean\n\t{\n\t\treturn this._usesMultiplier;\n\t}\n\n\tpublic get usesOffset():boolean\n\t{\n\t\treturn this._usesOffset;\n\t}\n\n\tconstructor(animator:ParticleAnimator, particleSegmentedColorNode:ParticleSegmentedColorNode)\n\t{\n\t\tsuper(animator, particleSegmentedColorNode);\n\n\t\tthis._usesMultiplier = particleSegmentedColorNode._iUsesMultiplier;\n\t\tthis._usesOffset = particleSegmentedColorNode._iUsesOffset;\n\t\tthis._startColor = particleSegmentedColorNode._iStartColor;\n\t\tthis._endColor = particleSegmentedColorNode._iEndColor;\n\t\tthis._segmentPoints = particleSegmentedColorNode._iSegmentPoints;\n\t\tthis._numSegmentPoint = particleSegmentedColorNode._iNumSegmentPoint;\n\t\tthis.updateColorData();\n\t}\n\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\n\t{\n\t\tif (shader.usesFragmentAnimation) {\n\t\t\tif (this._numSegmentPoint > 0)\n\t\t\t\tshader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleSegmentedColorState.TIME_DATA_INDEX), this._timeLifeData[0], this._timeLifeData[1], this._timeLifeData[2], this._timeLifeData[3]);\n\t\t\tif (this._usesMultiplier)\n\t\t\t\tshader.setVertexConstFromArray(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleSegmentedColorState.START_MULTIPLIER_INDEX), this._multiplierData);\n\t\t\tif (this._usesOffset)\n\t\t\t\tshader.setVertexConstFromArray(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleSegmentedColorState.START_OFFSET_INDEX), this._offsetData);\n\t\t}\n\t}\n\n\tprivate updateColorData():void\n\t{\n\t\tthis._timeLifeData = new Float32Array(4);\n\t\tthis._multiplierData = new Float32Array(4*(this._numSegmentPoint + 1));\n\t\tthis._offsetData = new Float32Array(4*(this._numSegmentPoint + 1));\n\n\t\t//cut off the time data\n\t\tvar i:number;\n\t\tvar j:number = 0;\n\t\tvar count:number = this._numSegmentPoint > 3? 3 : this._numSegmentPoint;\n\t\tfor (i = 0; i < count; i++) {\n\t\t\tif (i == 0)\n\t\t\t\tthis._timeLifeData[j++] = this._segmentPoints[i].life;\n\t\t\telse\n\t\t\t\tthis._timeLifeData[j++] = this._segmentPoints[i].life - this._segmentPoints[i - 1].life;\n\t\t}\n\t\ti = count;\n\t\tif (this._numSegmentPoint == 0)\n\t\t\tthis._timeLifeData[j++] = 1;\n\t\telse\n\t\t\tthis._timeLifeData[j++] = 1 - this._segmentPoints[i - 1].life;\n\n\t\tif (this._usesMultiplier) {\n\t\t\tj = 0;\n\t\t\tthis._multiplierData[j++] = this._startColor.redMultiplier;\n\t\t\tthis._multiplierData[j++] = this._startColor.greenMultiplier;\n\t\t\tthis._multiplierData[j++] = this._startColor.blueMultiplier;\n\t\t\tthis._multiplierData[j++] = this._startColor.alphaMultiplier;\n\t\t\tfor (i = 0; i < this._numSegmentPoint; i++) {\n\t\t\t\tif (i == 0) {\n\t\t\t\t\tthis._multiplierData[j++] = (this._segmentPoints[i].color.redMultiplier - this._startColor.redMultiplier)/this._timeLifeData[i];\n\t\t\t\t\tthis._multiplierData[j++] = (this._segmentPoints[i].color.greenMultiplier - this._startColor.greenMultiplier)/this._timeLifeData[i];\n\t\t\t\t\tthis._multiplierData[j++] = (this._segmentPoints[i].color.blueMultiplier - this._startColor.blueMultiplier)/this._timeLifeData[i];\n\t\t\t\t\tthis._multiplierData[j++] = (this._segmentPoints[i].color.alphaMultiplier - this._startColor.alphaMultiplier)/this._timeLifeData[i];\n\t\t\t\t} else {\n\t\t\t\t\tthis._multiplierData[j++] = (this._segmentPoints[i].color.redMultiplier - this._segmentPoints[i - 1].color.redMultiplier)/this._timeLifeData[i];\n\t\t\t\t\tthis._multiplierData[j++] = (this._segmentPoints[i].color.greenMultiplier - this._segmentPoints[i - 1].color.greenMultiplier)/this._timeLifeData[i];\n\t\t\t\t\tthis._multiplierData[j++] = (this._segmentPoints[i].color.blueMultiplier - this._segmentPoints[i - 1].color.blueMultiplier)/this._timeLifeData[i];\n\t\t\t\t\tthis._multiplierData[j++] = (this._segmentPoints[i].color.alphaMultiplier - this._segmentPoints[i - 1].color.alphaMultiplier)/this._timeLifeData[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\ti = this._numSegmentPoint;\n\t\t\tif (this._numSegmentPoint == 0) {\n\t\t\t\tthis._multiplierData[j++] = this._endColor.redMultiplier - this._startColor.redMultiplier;\n\t\t\t\tthis._multiplierData[j++] = this._endColor.greenMultiplier - this._startColor.greenMultiplier;\n\t\t\t\tthis._multiplierData[j++] = this._endColor.blueMultiplier - this._startColor.blueMultiplier;\n\t\t\t\tthis._multiplierData[j++] = this._endColor.alphaMultiplier - this._startColor.alphaMultiplier;\n\t\t\t} else {\n\t\t\t\tthis._multiplierData[j++] = (this._endColor.redMultiplier - this._segmentPoints[i - 1].color.redMultiplier)/this._timeLifeData[i];\n\t\t\t\tthis._multiplierData[j++] = (this._endColor.greenMultiplier - this._segmentPoints[i - 1].color.greenMultiplier)/this._timeLifeData[i];\n\t\t\t\tthis._multiplierData[j++] = (this._endColor.blueMultiplier - this._segmentPoints[i - 1].color.blueMultiplier)/this._timeLifeData[i];\n\t\t\t\tthis._multiplierData[j++] = (this._endColor.alphaMultiplier - this._segmentPoints[i - 1].color.alphaMultiplier)/this._timeLifeData[i];\n\t\t\t}\n\t\t}\n\n\t\tif (this._usesOffset) {\n\t\t\tj = 0;\n\t\t\tthis._offsetData[j++] = this._startColor.redOffset/255;\n\t\t\tthis._offsetData[j++] = this._startColor.greenOffset/255;\n\t\t\tthis._offsetData[j++] = this._startColor.blueOffset/255;\n\t\t\tthis._offsetData[j++] = this._startColor.alphaOffset/255;\n\t\t\tfor (i = 0; i < this._numSegmentPoint; i++) {\n\t\t\t\tif (i == 0) {\n\t\t\t\t\tthis._offsetData[j++] = (this._segmentPoints[i].color.redOffset - this._startColor.redOffset)/this._timeLifeData[i]/255;\n\t\t\t\t\tthis._offsetData[j++] = (this._segmentPoints[i].color.greenOffset - this._startColor.greenOffset)/this._timeLifeData[i]/255;\n\t\t\t\t\tthis._offsetData[j++] = (this._segmentPoints[i].color.blueOffset - this._startColor.blueOffset)/this._timeLifeData[i]/255;\n\t\t\t\t\tthis._offsetData[j++] = (this._segmentPoints[i].color.alphaOffset - this._startColor.alphaOffset)/this._timeLifeData[i]/255;\n\t\t\t\t} else {\n\t\t\t\t\tthis._offsetData[j++] = (this._segmentPoints[i].color.redOffset - this._segmentPoints[i - 1].color.redOffset)/this._timeLifeData[i]/255;\n\t\t\t\t\tthis._offsetData[j++] = (this._segmentPoints[i].color.greenOffset - this._segmentPoints[i - 1].color.greenOffset)/this._timeLifeData[i]/255;\n\t\t\t\t\tthis._offsetData[j++] = (this._segmentPoints[i].color.blueOffset - this._segmentPoints[i - 1].color.blueOffset)/this._timeLifeData[i]/255;\n\t\t\t\t\tthis._offsetData[j++] = (this._segmentPoints[i].color.alphaOffset - this._segmentPoints[i - 1].color.alphaOffset)/this._timeLifeData[i]/255;\n\t\t\t\t}\n\t\t\t}\n\t\t\ti = this._numSegmentPoint;\n\t\t\tif (this._numSegmentPoint == 0) {\n\t\t\t\tthis._offsetData[j++] = (this._endColor.redOffset - this._startColor.redOffset)/255;\n\t\t\t\tthis._offsetData[j++] = (this._endColor.greenOffset - this._startColor.greenOffset)/255;\n\t\t\t\tthis._offsetData[j++] = (this._endColor.blueOffset - this._startColor.blueOffset)/255;\n\t\t\t\tthis._offsetData[j++] = (this._endColor.alphaOffset - this._startColor.alphaOffset)/255;\n\t\t\t} else {\n\t\t\t\tthis._offsetData[i] = (this._endColor.redOffset - this._segmentPoints[i - 1].color.redOffset)/this._timeLifeData[i]/255;\n\t\t\t\tthis._offsetData[j++] = (this._endColor.greenOffset - this._segmentPoints[i - 1].color.greenOffset)/this._timeLifeData[i]/255;\n\t\t\t\tthis._offsetData[j++] = (this._endColor.blueOffset - this._segmentPoints[i - 1].color.blueOffset)/this._timeLifeData[i]/255;\n\t\t\t\tthis._offsetData[j++] = (this._endColor.alphaOffset - this._segmentPoints[i - 1].color.alphaOffset)/this._timeLifeData[i]/255;\n\t\t\t}\n\t\t}\n\t}\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\n\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\nimport {ContextGLVertexBufferFormat}\t\tfrom \"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\";\n\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\nimport {ParticleSpriteSheetNode}\t\t\tfrom \"../../animators/nodes/ParticleSpriteSheetNode\";\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\n\n/**\n * ...\n */\nexport class ParticleSpriteSheetState extends ParticleStateBase\n{\n\t/** @private */\n\tpublic static UV_INDEX_0:number = 0;\n\n\t/** @private */\n\tpublic static UV_INDEX_1:number = 1;\n\n\tprivate _particleSpriteSheetNode:ParticleSpriteSheetNode;\n\tprivate _usesCycle:boolean;\n\tprivate _usesPhase:boolean;\n\tprivate _totalFrames:number;\n\tprivate _numColumns:number;\n\tprivate _numRows:number;\n\tprivate _cycleDuration:number;\n\tprivate _cyclePhase:number;\n\tprivate _spriteSheetData:Array<number>;\n\n\t/**\n\t * Defines the cycle phase, when in global mode. Defaults to zero.\n\t */\n\tpublic get cyclePhase():number\n\t{\n\t\treturn this._cyclePhase;\n\t}\n\n\tpublic set cyclePhase(value:number)\n\t{\n\t\tthis._cyclePhase = value;\n\n\t\tthis.updateSpriteSheetData();\n\t}\n\n\t/**\n\t * Defines the cycle duration in seconds, when in global mode. Defaults to 1.\n\t */\n\tpublic get cycleDuration():number\n\t{\n\t\treturn this._cycleDuration;\n\t}\n\n\tpublic set cycleDuration(value:number)\n\t{\n\t\tthis._cycleDuration = value;\n\n\t\tthis.updateSpriteSheetData();\n\t}\n\n\tconstructor(animator:ParticleAnimator, particleSpriteSheetNode:ParticleSpriteSheetNode)\n\t{\n\t\tsuper(animator, particleSpriteSheetNode);\n\n\t\tthis._particleSpriteSheetNode = particleSpriteSheetNode;\n\n\t\tthis._usesCycle = this._particleSpriteSheetNode._iUsesCycle;\n\t\tthis._usesPhase = this._particleSpriteSheetNode._iUsesCycle;\n\t\tthis._totalFrames = this._particleSpriteSheetNode._iTotalFrames;\n\t\tthis._numColumns = this._particleSpriteSheetNode._iNumColumns;\n\t\tthis._numRows = this._particleSpriteSheetNode._iNumRows;\n\t\tthis._cycleDuration = this._particleSpriteSheetNode._iCycleDuration;\n\t\tthis._cyclePhase = this._particleSpriteSheetNode._iCyclePhase;\n\n\t\tthis.updateSpriteSheetData();\n\t}\n\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\n\t{\n\t\tif (!shader.usesUVTransform) {\n\t\t\tshader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleSpriteSheetState.UV_INDEX_0), this._spriteSheetData[0], this._spriteSheetData[1], this._spriteSheetData[2], this._spriteSheetData[3]);\n\t\t\tif (this._usesCycle) {\n\t\t\t\tvar index:number = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleSpriteSheetState.UV_INDEX_1);\n\t\t\t\tif (this._particleSpriteSheetNode.mode == ParticlePropertiesMode.LOCAL_STATIC) {\n\t\t\t\t\tif (this._usesPhase)\n\t\t\t\t\t\tanimationElements.activateVertexBuffer(index, this._particleSpriteSheetNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_3);\n\t\t\t\t\telse\n\t\t\t\t\t\tanimationElements.activateVertexBuffer(index, this._particleSpriteSheetNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_2);\n\t\t\t\t} else\n\t\t\t\t\tshader.setVertexConst(index, this._spriteSheetData[4], this._spriteSheetData[5]);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate updateSpriteSheetData():void\n\t{\n\t\tthis._spriteSheetData = new Array<number>(8);\n\n\t\tvar uTotal:number = this._totalFrames/this._numColumns;\n\n\t\tthis._spriteSheetData[0] = uTotal;\n\t\tthis._spriteSheetData[1] = 1/this._numColumns;\n\t\tthis._spriteSheetData[2] = 1/this._numRows;\n\n\t\tif (this._usesCycle) {\n\t\t\tif (this._cycleDuration <= 0)\n\t\t\t\tthrow(new Error(\"the cycle duration must be greater than zero\"));\n\t\t\tthis._spriteSheetData[4] = uTotal/this._cycleDuration;\n\t\t\tthis._spriteSheetData[5] = this._cycleDuration;\n\t\t\tif (this._usesPhase)\n\t\t\t\tthis._spriteSheetData[6] = this._cyclePhase;\n\t\t}\n\t}\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\n\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\n\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\nimport {ParticleAnimationData}\t\t\tfrom \"../../animators/data/ParticleAnimationData\";\nimport {ParticleNodeBase}\t\t\t\t\tfrom \"../../animators/nodes/ParticleNodeBase\";\nimport {AnimationStateBase}\t\t\t\tfrom \"../../animators/states/AnimationStateBase\";\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\n\n/**\n * ...\n */\nexport class ParticleStateBase extends AnimationStateBase\n{\n\tprivate _particleNode:ParticleNodeBase;\n\tpublic _pParticleAnimator:ParticleAnimator;\n\t\n\tpublic _pDynamicProperties:Array<Vector3D> = new Array<Vector3D>();\n\tpublic _pDynamicPropertiesDirty:Object = new Object();\n\n\tpublic _pNeedUpdateTime:boolean;\n\n\tconstructor(animator:ParticleAnimator, particleNode:ParticleNodeBase, needUpdateTime:boolean = false)\n\t{\n\t\tsuper(animator, particleNode);\n\n\t\tthis._pParticleAnimator = animator;\n\t\tthis._particleNode = particleNode;\n\t\tthis._pNeedUpdateTime = needUpdateTime;\n\t}\n\n\tpublic get needUpdateTime():boolean\n\t{\n\t\treturn this._pNeedUpdateTime;\n\t}\n\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\n\t{\n\n\t}\n\n\tpublic _pUpdateDynamicProperties(animationElements:AnimationElements):void\n\t{\n\t\tthis._pDynamicPropertiesDirty[animationElements._iUniqueId] = true;\n\n\t\tvar animationParticles:Array<ParticleAnimationData> = animationElements.animationParticles;\n\t\tvar vertexData:Array<number> = animationElements.vertexData;\n\t\tvar totalLenOfOneVertex:number = animationElements.totalLenOfOneVertex;\n\t\tvar dataLength:number = this._particleNode.dataLength;\n\t\tvar dataOffset:number = this._particleNode._iDataOffset;\n\t\tvar vertexLength:number;\n\t\t//\t\t\tvar particleOffset:number;\n\t\tvar startingOffset:number;\n\t\tvar vertexOffset:number;\n\t\tvar data:Vector3D;\n\t\tvar animationParticle:ParticleAnimationData;\n\n\t\t//\t\t\tvar numParticles:number = _positions.length/dataLength;\n\t\tvar numParticles:number = this._pDynamicProperties.length;\n\t\tvar i:number = 0;\n\t\tvar j:number = 0;\n\t\tvar k:number = 0;\n\n\t\t//loop through all particles\n\t\twhile (i < numParticles) {\n\t\t\t//loop through each particle data for the current particle\n\t\t\twhile (j < numParticles && (animationParticle = animationParticles[j]).index == i) {\n\t\t\t\tdata = this._pDynamicProperties[i];\n\t\t\t\tvertexLength = animationParticle.numVertices*totalLenOfOneVertex;\n\t\t\t\tstartingOffset = animationParticle.startVertexIndex*totalLenOfOneVertex + dataOffset;\n\t\t\t\t//loop through each vertex in the particle data\n\t\t\t\tfor (k = 0; k < vertexLength; k += totalLenOfOneVertex) {\n\t\t\t\t\tvertexOffset = startingOffset + k;\n\t\t\t\t\t//\t\t\t\t\t\tparticleOffset = i * dataLength;\n\t\t\t\t\t//loop through all vertex data for the current particle data\n\t\t\t\t\tfor (k = 0; k < vertexLength; k += totalLenOfOneVertex) {\n\t\t\t\t\t\tvertexOffset = startingOffset + k;\n\t\t\t\t\t\tvertexData[vertexOffset++] = data.x;\n\t\t\t\t\t\tvertexData[vertexOffset++] = data.y;\n\t\t\t\t\t\tvertexData[vertexOffset++] = data.z;\n\n\t\t\t\t\t\tif (dataLength == 4)\n\t\t\t\t\t\t\tvertexData[vertexOffset++] = data.w;\n\t\t\t\t\t}\n\t\t\t\t\t\t//loop through each value in the particle vertex\n\t\t\t\t\t\t//\t\t\t\t\t\tswitch(dataLength) {\n\t\t\t\t\t\t//\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t//\t\t\t\t\t\t\t\tvertexData[vertexOffset++] = _positions[particleOffset++];\n\t\t\t\t\t\t//\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t//\t\t\t\t\t\t\t\tvertexData[vertexOffset++] = _positions[particleOffset++];\n\t\t\t\t\t\t//\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t//\t\t\t\t\t\t\t\tvertexData[vertexOffset++] = _positions[particleOffset++];\n\t\t\t\t\t\t//\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t//\t\t\t\t\t\t\t\tvertexData[vertexOffset++] = _positions[particleOffset++];\n\t\t\t\t\t\t//\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tj++;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\n\t\tanimationElements.invalidateBuffer();\n\t}\n\n}",
    "import {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\n\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\nimport {ContextGLVertexBufferFormat}\t\tfrom \"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\";\n\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\nimport {ParticleTimeNode}\t\t\t\t\tfrom \"../../animators/nodes/ParticleTimeNode\";\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\n\n/**\n * ...\n */\nexport class ParticleTimeState extends ParticleStateBase\n{\n\t/** @private */\n\tpublic static TIME_STREAM_INDEX:number = 0;\n\n\t/** @private */\n\tpublic static TIME_CONSTANT_INDEX:number = 1;\n\n\tprivate _particleTimeNode:ParticleTimeNode;\n\n\tconstructor(animator:ParticleAnimator, particleTimeNode:ParticleTimeNode)\n\t{\n\t\tsuper(animator, particleTimeNode, true);\n\n\t\tthis._particleTimeNode = particleTimeNode;\n\t}\n\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\n\t{\n\t\tanimationElements.activateVertexBuffer(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleTimeState.TIME_STREAM_INDEX), this._particleTimeNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_4);\n\n\t\tvar particleTime:number = this._pTime/1000;\n\t\tshader.setVertexConst(animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleTimeState.TIME_CONSTANT_INDEX), particleTime, particleTime, particleTime, particleTime);\n\t}\n\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\n\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\n\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\nimport {ParticleUVNode}\t\t\t\t\tfrom \"../../animators/nodes/ParticleUVNode\";\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\n\n/**\n * ...\n */\nexport class ParticleUVState extends ParticleStateBase\n{\n\t/** @private */\n\tpublic static UV_INDEX:number = 0;\n\n\tprivate _particleUVNode:ParticleUVNode;\n\n\tconstructor(animator:ParticleAnimator, particleUVNode:ParticleUVNode)\n\t{\n\t\tsuper(animator, particleUVNode);\n\n\t\tthis._particleUVNode = particleUVNode;\n\t}\n\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\n\t{\n\t\tif (!shader.usesUVTransform) {\n\t\t\tvar index:number = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleUVState.UV_INDEX);\n\t\t\tvar data:Vector3D = this._particleUVNode._iUvData;\n\t\t\tshader.setVertexConst(index, data.x, data.y);\n\t\t}\n\t}\n\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {Camera}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\n\nimport {Stage}\t\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\nimport {ContextGLVertexBufferFormat}\t\tfrom \"awayjs-stagegl/lib/base/ContextGLVertexBufferFormat\";\n\nimport {ParticleAnimator}\t\t\t\t\tfrom \"../../animators/ParticleAnimator\";\nimport {AnimationRegisterData}\t\t\tfrom \"../../animators/data/AnimationRegisterData\";\nimport {AnimationElements}\t\t\t\tfrom \"../../animators/data/AnimationElements\";\nimport {ParticlePropertiesMode}\t\t\tfrom \"../../animators/data/ParticlePropertiesMode\";\nimport {ParticleVelocityNode}\t\t\t\tfrom \"../../animators/nodes/ParticleVelocityNode\";\nimport {ParticleStateBase}\t\t\t\tfrom \"../../animators/states/ParticleStateBase\";\nimport {GL_RenderableBase}\t\t\t\tfrom \"../../renderables/GL_RenderableBase\";\nimport {ShaderBase}\t\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\n\n/**\n * ...\n */\nexport class ParticleVelocityState extends ParticleStateBase\n{\n\t/** @private */\n\tpublic static VELOCITY_INDEX:number = 0;\n\n\tprivate _particleVelocityNode:ParticleVelocityNode;\n\tprivate _velocity:Vector3D;\n\n\t/**\n\t * Defines the default velocity vector of the state, used when in global mode.\n\t */\n\tpublic get velocity():Vector3D\n\t{\n\t\treturn this._velocity;\n\t}\n\n\tpublic set velocity(value:Vector3D)\n\t{\n\t\tthis._velocity = value;\n\t}\n\n\t/**\n\t *\n\t */\n\tpublic getVelocities():Array<Vector3D>\n\t{\n\t\treturn this._pDynamicProperties;\n\t}\n\n\tpublic setVelocities(value:Array<Vector3D>):void\n\t{\n\t\tthis._pDynamicProperties = value;\n\n\t\tthis._pDynamicPropertiesDirty = new Object();\n\t}\n\n\tconstructor(animator:ParticleAnimator, particleVelocityNode:ParticleVelocityNode)\n\t{\n\t\tsuper(animator, particleVelocityNode);\n\n\t\tthis._particleVelocityNode = particleVelocityNode;\n\t\tthis._velocity = this._particleVelocityNode._iVelocity;\n\t}\n\n\tpublic setRenderState(shader:ShaderBase, renderable:GL_RenderableBase, animationElements:AnimationElements, animationRegisterData:AnimationRegisterData, camera:Camera, stage:Stage):void\n\t{\n\t\tif (this._particleVelocityNode.mode == ParticlePropertiesMode.LOCAL_DYNAMIC && !this._pDynamicPropertiesDirty[animationElements._iUniqueId])\n\t\t\tthis._pUpdateDynamicProperties(animationElements);\n\n\t\tvar index:number = animationRegisterData.getRegisterIndex(this._pAnimationNode, ParticleVelocityState.VELOCITY_INDEX);\n\n\t\tif (this._particleVelocityNode.mode == ParticlePropertiesMode.GLOBAL)\n\t\t\tshader.setVertexConst(index, this._velocity.x, this._velocity.y, this._velocity.z);\n\t\telse\n\t\t\tanimationElements.activateVertexBuffer(index, this._particleVelocityNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_3);\n\t}\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\nimport {JointPose}\t\t\t\t\t\tfrom \"../../animators/data/JointPose\";\nimport {Skeleton}\t\t\t\t\t\t\tfrom \"../../animators/data/Skeleton\";\nimport {SkeletonPose}\t\t\t\t\t\tfrom \"../../animators/data/SkeletonPose\";\nimport {SkeletonBinaryLERPNode}\t\t\tfrom \"../../animators/nodes/SkeletonBinaryLERPNode\";\nimport {AnimationStateBase}\t\t\t\tfrom \"../../animators/states/AnimationStateBase\";\nimport {ISkeletonAnimationState}\t\t\tfrom \"../../animators/states/ISkeletonAnimationState\";\n\n/**\n *\n */\nexport class SkeletonBinaryLERPState extends AnimationStateBase implements ISkeletonAnimationState\n{\n\tprivate _blendWeight:number = 0;\n\tprivate _skeletonAnimationNode:SkeletonBinaryLERPNode;\n\tprivate _skeletonPose:SkeletonPose = new SkeletonPose();\n\tprivate _skeletonPoseDirty:boolean = true;\n\tprivate _inputA:ISkeletonAnimationState;\n\tprivate _inputB:ISkeletonAnimationState;\n\n\t/**\n\t * Defines a fractional value between 0 and 1 representing the blending ratio between inputA (0) and inputB (1),\n\t * used to produce the skeleton pose output.\n\t *\n\t * @see inputA\n\t * @see inputB\n\t */\n\tpublic get blendWeight():number\n\t{\n\t\treturn this._blendWeight;\n\t}\n\n\tpublic set blendWeight(value:number)\n\t{\n\t\tthis._blendWeight = value;\n\n\t\tthis._pPositionDeltaDirty = true;\n\t\tthis._skeletonPoseDirty = true;\n\t}\n\n\tconstructor(animator:AnimatorBase, skeletonAnimationNode:SkeletonBinaryLERPNode)\n\t{\n\t\tsuper(animator, skeletonAnimationNode);\n\n\t\tthis._skeletonAnimationNode = skeletonAnimationNode;\n\n\t\tthis._inputA = <ISkeletonAnimationState> animator.getAnimationState(this._skeletonAnimationNode.inputA);\n\t\tthis._inputB = <ISkeletonAnimationState> animator.getAnimationState(this._skeletonAnimationNode.inputB);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic phase(value:number):void\n\t{\n\t\tthis._skeletonPoseDirty = true;\n\n\t\tthis._pPositionDeltaDirty = true;\n\n\t\tthis._inputA.phase(value);\n\t\tthis._inputB.phase(value);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pUpdateTime(time:number):void\n\t{\n\t\tthis._skeletonPoseDirty = true;\n\n\t\tthis._inputA.update(time);\n\t\tthis._inputB.update(time);\n\n\t\tsuper._pUpdateTime(time);\n\t}\n\n\t/**\n\t * Returns the current skeleton pose of the animation in the clip based on the internal playhead position.\n\t */\n\tpublic getSkeletonPose(skeleton:Skeleton):SkeletonPose\n\t{\n\t\tif (this._skeletonPoseDirty)\n\t\t\tthis.updateSkeletonPose(skeleton);\n\n\t\treturn this._skeletonPose;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pUpdatePositionDelta():void\n\t{\n\t\tthis._pPositionDeltaDirty = false;\n\n\t\tvar deltA:Vector3D = this._inputA.positionDelta;\n\t\tvar deltB:Vector3D = this._inputB.positionDelta;\n\n\t\tthis._pRootDelta.x = deltA.x + this._blendWeight*(deltB.x - deltA.x);\n\t\tthis._pRootDelta.y = deltA.y + this._blendWeight*(deltB.y - deltA.y);\n\t\tthis._pRootDelta.z = deltA.z + this._blendWeight*(deltB.z - deltA.z);\n\t}\n\n\t/**\n\t * Updates the output skeleton pose of the node based on the blendWeight value between input nodes.\n\t *\n\t * @param skeleton The skeleton used by the animator requesting the ouput pose.\n\t */\n\tprivate updateSkeletonPose(skeleton:Skeleton):void\n\t{\n\t\tthis._skeletonPoseDirty = false;\n\n\t\tvar endPose:JointPose;\n\t\tvar endPoses:Array<JointPose> = this._skeletonPose.jointPoses;\n\t\tvar poses1:Array<JointPose> = this._inputA.getSkeletonPose(skeleton).jointPoses;\n\t\tvar poses2:Array<JointPose> = this._inputB.getSkeletonPose(skeleton).jointPoses;\n\t\tvar pose1:JointPose, pose2:JointPose;\n\t\tvar p1:Vector3D, p2:Vector3D;\n\t\tvar tr:Vector3D;\n\t\tvar numJoints:number = skeleton.numJoints;\n\n\t\t// :s\n\t\tif (endPoses.length != numJoints)\n\t\t\tendPoses.length = numJoints;\n\n\t\tfor (var i:number = 0; i < numJoints; ++i) {\n\t\t\tendPose = endPoses[i];\n\n\t\t\tif (endPose == null)\n\t\t\t\tendPose = endPoses[i] = new JointPose();\n\n\t\t\tpose1 = poses1[i];\n\t\t\tpose2 = poses2[i];\n\t\t\tp1 = pose1.translation;\n\t\t\tp2 = pose2.translation;\n\n\t\t\tendPose.orientation.lerp(pose1.orientation, pose2.orientation, this._blendWeight);\n\n\t\t\ttr = endPose.translation;\n\t\t\ttr.x = p1.x + this._blendWeight*(p2.x - p1.x);\n\t\t\ttr.y = p1.y + this._blendWeight*(p2.y - p1.y);\n\t\t\ttr.z = p1.z + this._blendWeight*(p2.z - p1.z);\n\t\t}\n\t}\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\nimport {SkeletonAnimator}\t\t\t\t\tfrom \"../../animators/SkeletonAnimator\";\nimport {JointPose}\t\t\t\t\t\tfrom \"../../animators/data/JointPose\";\nimport {Skeleton}\t\t\t\t\t\t\tfrom \"../../animators/data/Skeleton\";\nimport {SkeletonPose}\t\t\t\t\t\tfrom \"../../animators/data/SkeletonPose\";\nimport {SkeletonClipNode}\t\t\t\t\tfrom \"../../animators/nodes/SkeletonClipNode\";\nimport {AnimationClipState}\t\t\t\tfrom \"../../animators/states/AnimationClipState\";\nimport {ISkeletonAnimationState}\t\t\tfrom \"../../animators/states/ISkeletonAnimationState\";\n\n/**\n *\n */\nexport class SkeletonClipState extends AnimationClipState implements ISkeletonAnimationState\n{\n\tprivate _rootPos:Vector3D = new Vector3D();\n\tprivate _frames:Array<SkeletonPose>;\n\tprivate _skeletonClipNode:SkeletonClipNode;\n\tprivate _skeletonPose:SkeletonPose = new SkeletonPose();\n\tprivate _skeletonPoseDirty:boolean = true;\n\tprivate _currentPose:SkeletonPose;\n\tprivate _nextPose:SkeletonPose;\n\n\t/**\n\t * Returns the current skeleton pose frame of animation in the clip based on the internal playhead position.\n\t */\n\tpublic get currentPose():SkeletonPose\n\t{\n\t\tif (this._pFramesDirty)\n\t\t\tthis._pUpdateFrames();\n\n\t\treturn this._currentPose;\n\t}\n\n\t/**\n\t * Returns the next skeleton pose frame of animation in the clip based on the internal playhead position.\n\t */\n\tpublic get nextPose():SkeletonPose\n\t{\n\t\tif (this._pFramesDirty)\n\t\t\tthis._pUpdateFrames();\n\n\t\treturn this._nextPose;\n\t}\n\n\tconstructor(animator:AnimatorBase, skeletonClipNode:SkeletonClipNode)\n\t{\n\t\tsuper(animator, skeletonClipNode);\n\n\t\tthis._skeletonClipNode = skeletonClipNode;\n\t\tthis._frames = this._skeletonClipNode.frames;\n\t}\n\n\t/**\n\t * Returns the current skeleton pose of the animation in the clip based on the internal playhead position.\n\t */\n\tpublic getSkeletonPose(skeleton:Skeleton):SkeletonPose\n\t{\n\t\tif (this._skeletonPoseDirty)\n\t\t\tthis.updateSkeletonPose(skeleton);\n\n\t\treturn this._skeletonPose;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pUpdateTime(time:number):void\n\t{\n\t\tthis._skeletonPoseDirty = true;\n\n\t\tsuper._pUpdateTime(time);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pUpdateFrames():void\n\t{\n\t\tsuper._pUpdateFrames();\n\n\t\tthis._currentPose = this._frames[this._pCurrentFrame];\n\n\t\tif (this._skeletonClipNode.looping && this._pNextFrame >= this._skeletonClipNode.lastFrame) {\n\t\t\tthis._nextPose = this._frames[0];\n\t\t\t(<SkeletonAnimator> this._pAnimator).dispatchCycleEvent();\n\t\t} else\n\t\t\tthis._nextPose = this._frames[this._pNextFrame];\n\t}\n\n\t/**\n\t * Updates the output skeleton pose of the node based on the internal playhead position.\n\t *\n\t * @param skeleton The skeleton used by the animator requesting the ouput pose.\n\t */\n\tprivate updateSkeletonPose(skeleton:Skeleton):void\n\t{\n\t\tthis._skeletonPoseDirty = false;\n\n\t\tif (!this._skeletonClipNode.totalDuration)\n\t\t\treturn;\n\n\t\tif (this._pFramesDirty)\n\t\t\tthis._pUpdateFrames();\n\n\t\tvar currentPose:Array<JointPose> = this._currentPose.jointPoses;\n\t\tvar nextPose:Array<JointPose> = this._nextPose.jointPoses;\n\t\tvar numJoints:number = skeleton.numJoints;\n\t\tvar p1:Vector3D, p2:Vector3D;\n\t\tvar pose1:JointPose, pose2:JointPose;\n\t\tvar endPoses:Array<JointPose> = this._skeletonPose.jointPoses;\n\t\tvar endPose:JointPose;\n\t\tvar tr:Vector3D;\n\n\t\t// :s\n\t\tif (endPoses.length != numJoints)\n\t\t\tendPoses.length = numJoints;\n\n\t\tif ((numJoints != currentPose.length) || (numJoints != nextPose.length))\n\t\t\tthrow new Error(\"joint counts don't match!\");\n\n\t\tfor (var i:number = 0; i < numJoints; ++i) {\n\t\t\tendPose = endPoses[i];\n\n\t\t\tif (endPose == null)\n\t\t\t\tendPose = endPoses[i] = new JointPose();\n\n\t\t\tpose1 = currentPose[i];\n\t\t\tpose2 = nextPose[i];\n\t\t\tp1 = pose1.translation;\n\t\t\tp2 = pose2.translation;\n\n\t\t\tif (this._skeletonClipNode.highQuality)\n\t\t\t\tendPose.orientation.slerp(pose1.orientation, pose2.orientation, this._pBlendWeight); else\n\t\t\t\tendPose.orientation.lerp(pose1.orientation, pose2.orientation, this._pBlendWeight);\n\n\t\t\tif (i > 0) {\n\t\t\t\ttr = endPose.translation;\n\t\t\t\ttr.x = p1.x + this._pBlendWeight*(p2.x - p1.x);\n\t\t\t\ttr.y = p1.y + this._pBlendWeight*(p2.y - p1.y);\n\t\t\t\ttr.z = p1.z + this._pBlendWeight*(p2.z - p1.z);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pUpdatePositionDelta():void\n\t{\n\t\tthis._pPositionDeltaDirty = false;\n\n\t\tif (this._pFramesDirty)\n\t\t\tthis._pUpdateFrames();\n\n\t\tvar p1:Vector3D, p2:Vector3D, p3:Vector3D;\n\t\tvar totalDelta:Vector3D = this._skeletonClipNode.totalDelta;\n\n\t\t// jumping back, need to reset position\n\t\tif ((this._pTimeDir > 0 && this._pNextFrame < this._pOldFrame) || (this._pTimeDir < 0 && this._pNextFrame > this._pOldFrame)) {\n\t\t\tthis._rootPos.x -= totalDelta.x*this._pTimeDir;\n\t\t\tthis._rootPos.y -= totalDelta.y*this._pTimeDir;\n\t\t\tthis._rootPos.z -= totalDelta.z*this._pTimeDir;\n\t\t}\n\n\t\tvar dx:number = this._rootPos.x;\n\t\tvar dy:number = this._rootPos.y;\n\t\tvar dz:number = this._rootPos.z;\n\n\t\tif (this._skeletonClipNode.stitchFinalFrame && this._pNextFrame == this._skeletonClipNode.lastFrame) {\n\t\t\tp1 = this._frames[0].jointPoses[0].translation;\n\t\t\tp2 = this._frames[1].jointPoses[0].translation;\n\t\t\tp3 = this._currentPose.jointPoses[0].translation;\n\n\t\t\tthis._rootPos.x = p3.x + p1.x + this._pBlendWeight*(p2.x - p1.x);\n\t\t\tthis._rootPos.y = p3.y + p1.y + this._pBlendWeight*(p2.y - p1.y);\n\t\t\tthis._rootPos.z = p3.z + p1.z + this._pBlendWeight*(p2.z - p1.z);\n\t\t} else {\n\t\t\tp1 = this._currentPose.jointPoses[0].translation;\n\t\t\tp2 = this._frames[this._pNextFrame].jointPoses[0].translation; //cover the instances where we wrap the pose but still want the final frame translation values\n\t\t\tthis._rootPos.x = p1.x + this._pBlendWeight*(p2.x - p1.x);\n\t\t\tthis._rootPos.y = p1.y + this._pBlendWeight*(p2.y - p1.y);\n\t\t\tthis._rootPos.z = p1.z + this._pBlendWeight*(p2.z - p1.z);\n\t\t}\n\n\t\tthis._pRootDelta.x = this._rootPos.x - dx;\n\t\tthis._pRootDelta.y = this._rootPos.y - dy;\n\t\tthis._pRootDelta.z = this._rootPos.z - dz;\n\n\t\tthis._pOldFrame = this._pNextFrame;\n\t}\n}",
    "import {Quaternion}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Quaternion\";\nimport {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\nimport {JointPose}\t\t\t\t\t\tfrom \"../../animators/data/JointPose\";\nimport {Skeleton}\t\t\t\t\t\t\tfrom \"../../animators/data/Skeleton\";\nimport {SkeletonPose}\t\t\t\t\t\tfrom \"../../animators/data/SkeletonPose\";\nimport {SkeletonDifferenceNode}\t\t\tfrom \"../../animators/nodes/SkeletonDifferenceNode\";\nimport {AnimationStateBase}\t\t\t\tfrom \"../../animators/states/AnimationStateBase\";\nimport {ISkeletonAnimationState}\t\t\tfrom \"../../animators/states/ISkeletonAnimationState\";\n\n/**\n *\n */\nexport class SkeletonDifferenceState extends AnimationStateBase implements ISkeletonAnimationState\n{\n\tprivate _blendWeight:number = 0;\n\tprivate static _tempQuat:Quaternion = new Quaternion();\n\tprivate _skeletonAnimationNode:SkeletonDifferenceNode;\n\tprivate _skeletonPose:SkeletonPose = new SkeletonPose();\n\tprivate _skeletonPoseDirty:boolean = true;\n\tprivate _baseInput:ISkeletonAnimationState;\n\tprivate _differenceInput:ISkeletonAnimationState;\n\n\t/**\n\t * Defines a fractional value between 0 and 1 representing the blending ratio between the base input (0) and difference input (1),\n\t * used to produce the skeleton pose output.\n\t *\n\t * @see #baseInput\n\t * @see #differenceInput\n\t */\n\tpublic get blendWeight():number\n\t{\n\t\treturn this._blendWeight;\n\t}\n\n\tpublic set blendWeight(value:number)\n\t{\n\t\tthis._blendWeight = value;\n\n\t\tthis._pPositionDeltaDirty = true;\n\t\tthis._skeletonPoseDirty = true;\n\t}\n\n\tconstructor(animator:AnimatorBase, skeletonAnimationNode:SkeletonDifferenceNode)\n\t{\n\t\tsuper(animator, skeletonAnimationNode);\n\n\t\tthis._skeletonAnimationNode = skeletonAnimationNode;\n\n\t\tthis._baseInput = <ISkeletonAnimationState> animator.getAnimationState(this._skeletonAnimationNode.baseInput);\n\t\tthis._differenceInput = <ISkeletonAnimationState> animator.getAnimationState(this._skeletonAnimationNode.differenceInput);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic phase(value:number):void\n\t{\n\t\tthis._skeletonPoseDirty = true;\n\n\t\tthis._pPositionDeltaDirty = true;\n\n\t\tthis._baseInput.phase(value);\n\t\tthis._baseInput.phase(value);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pUpdateTime(time:number):void\n\t{\n\t\tthis._skeletonPoseDirty = true;\n\n\t\tthis._baseInput.update(time);\n\t\tthis._differenceInput.update(time);\n\n\t\tsuper._pUpdateTime(time);\n\t}\n\n\t/**\n\t * Returns the current skeleton pose of the animation in the clip based on the internal playhead position.\n\t */\n\tpublic getSkeletonPose(skeleton:Skeleton):SkeletonPose\n\t{\n\t\tif (this._skeletonPoseDirty)\n\t\t\tthis.updateSkeletonPose(skeleton);\n\n\t\treturn this._skeletonPose;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pUpdatePositionDelta():void\n\t{\n\t\tthis._pPositionDeltaDirty = false;\n\n\t\tvar deltA:Vector3D = this._baseInput.positionDelta;\n\t\tvar deltB:Vector3D = this._differenceInput.positionDelta;\n\n\t\tthis.positionDelta.x = deltA.x + this._blendWeight*deltB.x;\n\t\tthis.positionDelta.y = deltA.y + this._blendWeight*deltB.y;\n\t\tthis.positionDelta.z = deltA.z + this._blendWeight*deltB.z;\n\t}\n\n\t/**\n\t * Updates the output skeleton pose of the node based on the blendWeight value between base input and difference input nodes.\n\t *\n\t * @param skeleton The skeleton used by the animator requesting the ouput pose.\n\t */\n\tprivate updateSkeletonPose(skeleton:Skeleton):void\n\t{\n\t\tthis._skeletonPoseDirty = false;\n\n\t\tvar endPose:JointPose;\n\t\tvar endPoses:Array<JointPose> = this._skeletonPose.jointPoses;\n\t\tvar basePoses:Array<JointPose> = this._baseInput.getSkeletonPose(skeleton).jointPoses;\n\t\tvar diffPoses:Array<JointPose> = this._differenceInput.getSkeletonPose(skeleton).jointPoses;\n\t\tvar base:JointPose, diff:JointPose;\n\t\tvar basePos:Vector3D, diffPos:Vector3D;\n\t\tvar tr:Vector3D;\n\t\tvar numJoints:number = skeleton.numJoints;\n\n\t\t// :s\n\t\tif (endPoses.length != numJoints)\n\t\t\tendPoses.length = numJoints;\n\n\t\tfor (var i:number = 0; i < numJoints; ++i) {\n\t\t\tendPose = endPoses[i];\n\n\t\t\tif (endPose == null)\n\t\t\t\tendPose = endPoses[i] = new JointPose();\n\n\t\t\tbase = basePoses[i];\n\t\t\tdiff = diffPoses[i];\n\t\t\tbasePos = base.translation;\n\t\t\tdiffPos = diff.translation;\n\n\t\t\tSkeletonDifferenceState._tempQuat.multiply(diff.orientation, base.orientation);\n\t\t\tendPose.orientation.lerp(base.orientation, SkeletonDifferenceState._tempQuat, this._blendWeight);\n\n\t\t\ttr = endPose.translation;\n\t\t\ttr.x = basePos.x + this._blendWeight*diffPos.x;\n\t\t\ttr.y = basePos.y + this._blendWeight*diffPos.y;\n\t\t\ttr.z = basePos.z + this._blendWeight*diffPos.z;\n\t\t}\n\t}\n}",
    "import {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\nimport {JointPose}\t\t\t\t\t\tfrom \"../../animators/data/JointPose\";\nimport {Skeleton}\t\t\t\t\t\t\tfrom \"../../animators/data/Skeleton\";\nimport {SkeletonPose}\t\t\t\t\t\tfrom \"../../animators/data/SkeletonPose\";\nimport {SkeletonDirectionalNode}\t\t\tfrom \"../../animators/nodes/SkeletonDirectionalNode\";\nimport {AnimationStateBase}\t\t\t\tfrom \"../../animators/states/AnimationStateBase\";\nimport {ISkeletonAnimationState}\t\t\tfrom \"../../animators/states/ISkeletonAnimationState\";\n\n/**\n *\n */\nexport class SkeletonDirectionalState extends AnimationStateBase implements ISkeletonAnimationState\n{\n\tprivate _skeletonAnimationNode:SkeletonDirectionalNode;\n\tprivate _skeletonPose:SkeletonPose = new SkeletonPose();\n\tprivate _skeletonPoseDirty:boolean = true;\n\tprivate _inputA:ISkeletonAnimationState;\n\tprivate _inputB:ISkeletonAnimationState;\n\tprivate _blendWeight:number = 0;\n\tprivate _direction:number = 0;\n\tprivate _blendDirty:boolean = true;\n\tprivate _forward:ISkeletonAnimationState;\n\tprivate _backward:ISkeletonAnimationState;\n\tprivate _left:ISkeletonAnimationState;\n\tprivate _right:ISkeletonAnimationState;\n\n\t/**\n\t * Defines the direction in degrees of the aniamtion between the forwards (0), right(90) backwards (180) and left(270) input nodes,\n\t * used to produce the skeleton pose output.\n\t */\n\tpublic set direction(value:number)\n\t{\n\t\tif (this._direction == value)\n\t\t\treturn;\n\n\t\tthis._direction = value;\n\n\t\tthis._blendDirty = true;\n\n\t\tthis._skeletonPoseDirty = true;\n\t\tthis._pPositionDeltaDirty = true;\n\t}\n\n\tpublic get direction():number\n\t{\n\t\treturn this._direction;\n\t}\n\n\tconstructor(animator:AnimatorBase, skeletonAnimationNode:SkeletonDirectionalNode)\n\t{\n\t\tsuper(animator, skeletonAnimationNode);\n\n\t\tthis._skeletonAnimationNode = skeletonAnimationNode;\n\n\t\tthis._forward = <ISkeletonAnimationState> animator.getAnimationState(this._skeletonAnimationNode.forward);\n\t\tthis._backward = <ISkeletonAnimationState> animator.getAnimationState(this._skeletonAnimationNode.backward);\n\t\tthis._left = <ISkeletonAnimationState> animator.getAnimationState(this._skeletonAnimationNode.left);\n\t\tthis._right = <ISkeletonAnimationState> animator.getAnimationState(this._skeletonAnimationNode.right);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic phase(value:number):void\n\t{\n\t\tif (this._blendDirty)\n\t\t\tthis.updateBlend();\n\n\t\tthis._skeletonPoseDirty = true;\n\n\t\tthis._pPositionDeltaDirty = true;\n\n\t\tthis._inputA.phase(value);\n\t\tthis._inputB.phase(value);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pUdateTime(time:number):void\n\t{\n\t\tif (this._blendDirty)\n\t\t\tthis.updateBlend();\n\n\t\tthis._skeletonPoseDirty = true;\n\n\t\tthis._inputA.update(time);\n\t\tthis._inputB.update(time);\n\n\t\tsuper._pUpdateTime(time);\n\t}\n\n\t/**\n\t * Returns the current skeleton pose of the animation in the clip based on the internal playhead position.\n\t */\n\tpublic getSkeletonPose(skeleton:Skeleton):SkeletonPose\n\t{\n\t\tif (this._skeletonPoseDirty)\n\t\t\tthis.updateSkeletonPose(skeleton);\n\n\t\treturn this._skeletonPose;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pUpdatePositionDelta():void\n\t{\n\t\tthis._pPositionDeltaDirty = false;\n\n\t\tif (this._blendDirty)\n\t\t\tthis.updateBlend();\n\n\t\tvar deltA:Vector3D = this._inputA.positionDelta;\n\t\tvar deltB:Vector3D = this._inputB.positionDelta;\n\n\t\tthis.positionDelta.x = deltA.x + this._blendWeight*(deltB.x - deltA.x);\n\t\tthis.positionDelta.y = deltA.y + this._blendWeight*(deltB.y - deltA.y);\n\t\tthis.positionDelta.z = deltA.z + this._blendWeight*(deltB.z - deltA.z);\n\t}\n\n\t/**\n\t * Updates the output skeleton pose of the node based on the direction value between forward, backwards, left and right input nodes.\n\t *\n\t * @param skeleton The skeleton used by the animator requesting the ouput pose.\n\t */\n\tprivate updateSkeletonPose(skeleton:Skeleton):void\n\t{\n\t\tthis._skeletonPoseDirty = false;\n\n\t\tif (this._blendDirty)\n\t\t\tthis.updateBlend();\n\n\t\tvar endPose:JointPose;\n\t\tvar endPoses:Array<JointPose> = this._skeletonPose.jointPoses;\n\t\tvar poses1:Array<JointPose> = this._inputA.getSkeletonPose(skeleton).jointPoses;\n\t\tvar poses2:Array<JointPose> = this._inputB.getSkeletonPose(skeleton).jointPoses;\n\t\tvar pose1:JointPose, pose2:JointPose;\n\t\tvar p1:Vector3D, p2:Vector3D;\n\t\tvar tr:Vector3D;\n\t\tvar numJoints:number = skeleton.numJoints;\n\n\t\t// :s\n\t\tif (endPoses.length != numJoints)\n\t\t\tendPoses.length = numJoints;\n\n\t\tfor (var i:number = 0; i < numJoints; ++i) {\n\t\t\tendPose = endPoses[i];\n\n\t\t\tif (endPose == null)\n\t\t\t\tendPose = endPoses[i] = new JointPose();\n\n\t\t\tpose1 = poses1[i];\n\t\t\tpose2 = poses2[i];\n\t\t\tp1 = pose1.translation;\n\t\t\tp2 = pose2.translation;\n\n\t\t\tendPose.orientation.lerp(pose1.orientation, pose2.orientation, this._blendWeight);\n\n\t\t\ttr = endPose.translation;\n\t\t\ttr.x = p1.x + this._blendWeight*(p2.x - p1.x);\n\t\t\ttr.y = p1.y + this._blendWeight*(p2.y - p1.y);\n\t\t\ttr.z = p1.z + this._blendWeight*(p2.z - p1.z);\n\t\t}\n\t}\n\n\t/**\n\t * Updates the blend value for the animation output based on the direction value between forward, backwards, left and right input nodes.\n\t *\n\t * @private\n\t */\n\tprivate updateBlend():void\n\t{\n\t\tthis._blendDirty = false;\n\n\t\tif (this._direction < 0 || this._direction > 360) {\n\t\t\tthis._direction %= 360;\n\t\t\tif (this._direction < 0)\n\t\t\t\tthis._direction += 360;\n\t\t}\n\n\t\tif (this._direction < 90) {\n\t\t\tthis._inputA = this._forward;\n\t\t\tthis._inputB = this._right;\n\t\t\tthis._blendWeight = this._direction/90;\n\t\t} else if (this._direction < 180) {\n\t\t\tthis._inputA = this._right;\n\t\t\tthis._inputB = this._backward;\n\t\t\tthis._blendWeight = (this._direction - 90)/90;\n\t\t} else if (this._direction < 270) {\n\t\t\tthis._inputA = this._backward;\n\t\t\tthis._inputB = this._left;\n\t\t\tthis._blendWeight = (this._direction - 180)/90;\n\t\t} else {\n\t\t\tthis._inputA = this._left;\n\t\t\tthis._inputB = this._forward;\n\t\t\tthis._blendWeight = (this._direction - 270)/90;\n\t\t}\n\t}\n}",
    "import {Quaternion}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Quaternion\";\nimport {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\nimport {JointPose}\t\t\t\t\t\tfrom \"../../animators/data/JointPose\";\nimport {Skeleton}\t\t\t\t\t\t\tfrom \"../../animators/data/Skeleton\";\nimport {SkeletonPose}\t\t\t\t\t\tfrom \"../../animators/data/SkeletonPose\";\nimport {SkeletonNaryLERPNode}\t\t\t\tfrom \"../../animators/nodes/SkeletonNaryLERPNode\";\nimport {AnimationStateBase}\t\t\t\tfrom \"../../animators/states/AnimationStateBase\";\nimport {ISkeletonAnimationState}\t\t\tfrom \"../../animators/states/ISkeletonAnimationState\";\n\n/**\n *\n */\nexport class SkeletonNaryLERPState extends AnimationStateBase implements ISkeletonAnimationState\n{\n\tprivate _skeletonAnimationNode:SkeletonNaryLERPNode;\n\tprivate _skeletonPose:SkeletonPose = new SkeletonPose();\n\tprivate _skeletonPoseDirty:boolean = true;\n\tprivate _blendWeights:Array<number> = new Array<number>();\n\tprivate _inputs:Array<ISkeletonAnimationState> = new Array<ISkeletonAnimationState>();\n\n\tconstructor(animator:AnimatorBase, skeletonAnimationNode:SkeletonNaryLERPNode)\n\t{\n\t\tsuper(animator, skeletonAnimationNode);\n\n\t\tthis._skeletonAnimationNode = skeletonAnimationNode;\n\n\t\tvar i:number = this._skeletonAnimationNode.numInputs;\n\n\t\twhile (i--)\n\t\t\tthis._inputs[i] = <ISkeletonAnimationState> animator.getAnimationState(this._skeletonAnimationNode._iInputs[i]);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic phase(value:number):void\n\t{\n\t\tthis._skeletonPoseDirty = true;\n\n\t\tthis._pPositionDeltaDirty = true;\n\n\t\tfor (var j:number = 0; j < this._skeletonAnimationNode.numInputs; ++j) {\n\t\t\tif (this._blendWeights[j])\n\t\t\t\tthis._inputs[j].update(value);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pUdateTime(time:number):void\n\t{\n\t\tfor (var j:number = 0; j < this._skeletonAnimationNode.numInputs; ++j) {\n\t\t\tif (this._blendWeights[j])\n\t\t\t\tthis._inputs[j].update(time);\n\t\t}\n\n\t\tsuper._pUpdateTime(time);\n\t}\n\n\t/**\n\t * Returns the current skeleton pose of the animation in the clip based on the internal playhead position.\n\t */\n\tpublic getSkeletonPose(skeleton:Skeleton):SkeletonPose\n\t{\n\t\tif (this._skeletonPoseDirty)\n\t\t\tthis.updateSkeletonPose(skeleton);\n\n\t\treturn this._skeletonPose;\n\t}\n\n\t/**\n\t * Returns the blend weight of the skeleton aniamtion node that resides at the given input index.\n\t *\n\t * @param index The input index for which the skeleton animation node blend weight is requested.\n\t */\n\tpublic getBlendWeightAt(index:number):number\n\t{\n\t\treturn this._blendWeights[index];\n\t}\n\n\t/**\n\t * Sets the blend weight of the skeleton aniamtion node that resides at the given input index.\n\t *\n\t * @param index The input index on which the skeleton animation node blend weight is to be set.\n\t * @param blendWeight The blend weight value to use for the given skeleton animation node index.\n\t */\n\tpublic setBlendWeightAt(index:number, blendWeight:number):void\n\t{\n\t\tthis._blendWeights[index] = blendWeight;\n\n\t\tthis._pPositionDeltaDirty = true;\n\t\tthis._skeletonPoseDirty = true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pUpdatePositionDelta():void\n\t{\n\t\tthis._pPositionDeltaDirty = false;\n\n\t\tvar delta:Vector3D;\n\t\tvar weight:number;\n\n\t\tthis.positionDelta.x = 0;\n\t\tthis.positionDelta.y = 0;\n\t\tthis.positionDelta.z = 0;\n\n\t\tfor (var j:number = 0; j < this._skeletonAnimationNode.numInputs; ++j) {\n\t\t\tweight = this._blendWeights[j];\n\n\t\t\tif (weight) {\n\t\t\t\tdelta = this._inputs[j].positionDelta;\n\t\t\t\tthis.positionDelta.x += weight*delta.x;\n\t\t\t\tthis.positionDelta.y += weight*delta.y;\n\t\t\t\tthis.positionDelta.z += weight*delta.z;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Updates the output skeleton pose of the node based on the blend weight values given to the input nodes.\n\t *\n\t * @param skeleton The skeleton used by the animator requesting the ouput pose.\n\t */\n\tprivate updateSkeletonPose(skeleton:Skeleton):void\n\t{\n\t\tthis._skeletonPoseDirty = false;\n\n\t\tvar weight:number;\n\t\tvar endPoses:Array<JointPose> = this._skeletonPose.jointPoses;\n\t\tvar poses:Array<JointPose>;\n\t\tvar endPose:JointPose, pose:JointPose;\n\t\tvar endTr:Vector3D, tr:Vector3D;\n\t\tvar endQuat:Quaternion, q:Quaternion;\n\t\tvar firstPose:Array<JointPose>;\n\t\tvar i:number;\n\t\tvar w0:number, x0:number, y0:number, z0:number;\n\t\tvar w1:number, x1:number, y1:number, z1:number;\n\t\tvar numJoints:number = skeleton.numJoints;\n\n\t\t// :s\n\t\tif (endPoses.length != numJoints)\n\t\t\tendPoses.length = numJoints;\n\n\t\tfor (var j:number = 0; j < this._skeletonAnimationNode.numInputs; ++j) {\n\t\t\tweight = this._blendWeights[j];\n\n\t\t\tif (!weight)\n\t\t\t\tcontinue;\n\n\t\t\tposes = this._inputs[j].getSkeletonPose(skeleton).jointPoses;\n\n\t\t\tif (!firstPose) {\n\t\t\t\tfirstPose = poses;\n\t\t\t\tfor (i = 0; i < numJoints; ++i) {\n\t\t\t\t\tendPose = endPoses[i];\n\n\t\t\t\t\tif (endPose == null)\n\t\t\t\t\t\tendPose = endPoses[i] = new JointPose();\n\n\t\t\t\t\tpose = poses[i];\n\t\t\t\t\tq = pose.orientation;\n\t\t\t\t\ttr = pose.translation;\n\n\t\t\t\t\tendQuat = endPose.orientation;\n\n\t\t\t\t\tendQuat.x = weight*q.x;\n\t\t\t\t\tendQuat.y = weight*q.y;\n\t\t\t\t\tendQuat.z = weight*q.z;\n\t\t\t\t\tendQuat.w = weight*q.w;\n\n\t\t\t\t\tendTr = endPose.translation;\n\t\t\t\t\tendTr.x = weight*tr.x;\n\t\t\t\t\tendTr.y = weight*tr.y;\n\t\t\t\t\tendTr.z = weight*tr.z;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (i = 0; i < skeleton.numJoints; ++i) {\n\t\t\t\t\tendPose = endPoses[i];\n\t\t\t\t\tpose = poses[i];\n\n\t\t\t\t\tq = firstPose[i].orientation;\n\t\t\t\t\tx0 = q.x;\n\t\t\t\t\ty0 = q.y;\n\t\t\t\t\tz0 = q.z;\n\t\t\t\t\tw0 = q.w;\n\n\t\t\t\t\tq = pose.orientation;\n\t\t\t\t\ttr = pose.translation;\n\n\t\t\t\t\tx1 = q.x;\n\t\t\t\t\ty1 = q.y;\n\t\t\t\t\tz1 = q.z;\n\t\t\t\t\tw1 = q.w;\n\t\t\t\t\t// find shortest direction\n\t\t\t\t\tif (x0*x1 + y0*y1 + z0*z1 + w0*w1 < 0) {\n\t\t\t\t\t\tx1 = -x1;\n\t\t\t\t\t\ty1 = -y1;\n\t\t\t\t\t\tz1 = -z1;\n\t\t\t\t\t\tw1 = -w1;\n\t\t\t\t\t}\n\t\t\t\t\tendQuat = endPose.orientation;\n\t\t\t\t\tendQuat.x += weight*x1;\n\t\t\t\t\tendQuat.y += weight*y1;\n\t\t\t\t\tendQuat.z += weight*z1;\n\t\t\t\t\tendQuat.w += weight*w1;\n\n\t\t\t\t\tendTr = endPose.translation;\n\t\t\t\t\tendTr.x += weight*tr.x;\n\t\t\t\t\tendTr.y += weight*tr.y;\n\t\t\t\t\tendTr.z += weight*tr.z;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0; i < skeleton.numJoints; ++i)\n\t\t\tendPoses[i].orientation.normalize();\n\t}\n}",
    "import {Graphics}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphics\";\n\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\nimport {VertexAnimator}\t\t\t\t\tfrom \"../../animators/VertexAnimator\";\nimport {VertexClipNode}\t\t\t\t\tfrom \"../../animators/nodes/VertexClipNode\";\nimport {AnimationClipState}\t\t\t\tfrom \"../../animators/states/AnimationClipState\";\nimport {IVertexAnimationState}\t\t\tfrom \"../../animators/states/IVertexAnimationState\";\n\n/**\n *\n */\nexport class VertexClipState extends AnimationClipState implements IVertexAnimationState\n{\n\tprivate _frames:Array<Graphics>;\n\tprivate _vertexClipNode:VertexClipNode;\n\tprivate _currentGraphics:Graphics;\n\tprivate _nextGraphics:Graphics;\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get currentGraphics():Graphics\n\t{\n\t\tif (this._pFramesDirty)\n\t\t\tthis._pUpdateFrames();\n\n\t\treturn this._currentGraphics;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get nextGraphics():Graphics\n\t{\n\t\tif (this._pFramesDirty)\n\t\t\tthis._pUpdateFrames();\n\n\t\treturn this._nextGraphics;\n\t}\n\n\tconstructor(animator:AnimatorBase, vertexClipNode:VertexClipNode)\n\t{\n\t\tsuper(animator, vertexClipNode);\n\n\t\tthis._vertexClipNode = vertexClipNode;\n\t\tthis._frames = this._vertexClipNode.frames;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pUpdateFrames():void\n\t{\n\t\tsuper._pUpdateFrames();\n\n\t\tthis._currentGraphics = this._frames[this._pCurrentFrame];\n\n\t\tif (this._vertexClipNode.looping && this._pNextFrame >= this._vertexClipNode.lastFrame) {\n\t\t\tthis._nextGraphics = this._frames[0];\n\t\t\t(<VertexAnimator> this._pAnimator).dispatchCycleEvent();\n\t\t} else\n\t\t\tthis._nextGraphics = this._frames[this._pNextFrame];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pUpdatePositionDelta():void\n\t{\n\t\t//TODO:implement positiondelta functionality for vertex animations\n\t}\n}",
    "import {SkeletonBinaryLERPNode}\t\t\tfrom \"../../animators/nodes/SkeletonBinaryLERPNode\";\nimport {CrossfadeTransitionState}\t\t\tfrom \"../../animators/transitions/CrossfadeTransitionState\";\n\n/**\n * A skeleton animation node that uses two animation node inputs to blend a lineraly interpolated output of a skeleton pose.\n */\nexport class CrossfadeTransitionNode extends SkeletonBinaryLERPNode\n{\n\tpublic blendSpeed:number;\n\n\tpublic startBlend:number;\n\n\t/**\n\t * Creates a new <code>CrossfadeTransitionNode</code> object.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\n\t\tthis._pStateClass = CrossfadeTransitionState;\n\t}\n}",
    "import {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\nimport {SkeletonBinaryLERPNode}\t\t\tfrom \"../../animators/nodes/SkeletonBinaryLERPNode\";\nimport {SkeletonBinaryLERPState}\t\t\tfrom \"../../animators/states/SkeletonBinaryLERPState\";\nimport {CrossfadeTransitionNode}\t\t\tfrom \"../../animators/transitions/CrossfadeTransitionNode\";\nimport {AnimationStateEvent}\t\t\t\tfrom \"../../animators/../events/AnimationStateEvent\";\n\n/**\n *\n */\nexport class CrossfadeTransitionState extends SkeletonBinaryLERPState\n{\n\tprivate _crossfadeTransitionNode:CrossfadeTransitionNode;\n\tprivate _animationStateTransitionComplete:AnimationStateEvent;\n\n\tconstructor(animator:AnimatorBase, skeletonAnimationNode:CrossfadeTransitionNode)\n\t{\n\t\tsuper(animator, <SkeletonBinaryLERPNode> skeletonAnimationNode);\n\n\t\tthis._crossfadeTransitionNode = skeletonAnimationNode;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pUpdateTime(time:number):void\n\t{\n\t\tthis.blendWeight = Math.abs(time - this._crossfadeTransitionNode.startBlend)/(1000*this._crossfadeTransitionNode.blendSpeed);\n\n\t\tif (this.blendWeight >= 1) {\n\t\t\tthis.blendWeight = 1;\n\n\t\t\tif (this._animationStateTransitionComplete == null)\n\t\t\t\tthis._animationStateTransitionComplete = new AnimationStateEvent(AnimationStateEvent.TRANSITION_COMPLETE, this._pAnimator, this, this._crossfadeTransitionNode);\n\n\t\t\tthis._crossfadeTransitionNode.dispatchEvent(this._animationStateTransitionComplete);\n\t\t}\n\n\t\tsuper._pUpdateTime(time);\n\t}\n}",
    "import {AnimationNodeBase}\t\t\t\tfrom \"awayjs-display/lib/animators/nodes/AnimationNodeBase\";\n\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../../animators/AnimatorBase\";\nimport {CrossfadeTransitionNode}\t\t\tfrom \"../../animators/transitions/CrossfadeTransitionNode\";\nimport {IAnimationTransition}\t\t\t\tfrom \"../../animators/transitions/IAnimationTransition\";\n\n/**\n *\n */\nexport class CrossfadeTransition implements IAnimationTransition\n{\n\tpublic blendSpeed:number = 0.5;\n\n\tconstructor(blendSpeed:number)\n\t{\n\t\tthis.blendSpeed = blendSpeed;\n\t}\n\n\tpublic getAnimationNode(animator:AnimatorBase, startNode:AnimationNodeBase, endNode:AnimationNodeBase, startBlend:number):AnimationNodeBase\n\t{\n\t\tvar crossFadeTransitionNode:CrossfadeTransitionNode = new CrossfadeTransitionNode();\n\t\tcrossFadeTransitionNode.inputA = startNode;\n\t\tcrossFadeTransitionNode.inputB = endNode;\n\t\tcrossFadeTransitionNode.blendSpeed = this.blendSpeed;\n\t\tcrossFadeTransitionNode.startBlend = startBlend;\n\n\t\treturn <AnimationNodeBase> crossFadeTransitionNode;\n\t}\n}",
    "export {AnimationElements}\t\t\t\tfrom \"./animators/data/AnimationElements\";\nexport {AnimationRegisterData}\t\t\tfrom \"./animators/data/AnimationRegisterData\";\nexport {ColorSegmentPoint}\t\t\t\tfrom \"./animators/data/ColorSegmentPoint\";\nexport {JointPose}\t\t\t\t\t\tfrom \"./animators/data/JointPose\";\nexport {ParticleAnimationData}\t\t\tfrom \"./animators/data/ParticleAnimationData\";\nexport {ParticleProperties}\t\t\t\tfrom \"./animators/data/ParticleProperties\";\nexport {ParticlePropertiesMode}\t\t\tfrom \"./animators/data/ParticlePropertiesMode\";\nexport {Skeleton}\t\t\t\t\t\tfrom \"./animators/data/Skeleton\";\nexport {SkeletonJoint}\t\t\t\t\tfrom \"./animators/data/SkeletonJoint\";\nexport {SkeletonPose}\t\t\t\t\tfrom \"./animators/data/SkeletonPose\";\nexport {VertexAnimationMode}\t\t\t\tfrom \"./animators/data/VertexAnimationMode\";\nexport {AnimationClipNodeBase}\t\t\tfrom \"./animators/nodes/AnimationClipNodeBase\";\nexport {ParticleAccelerationNode}\t\tfrom \"./animators/nodes/ParticleAccelerationNode\";\nexport {ParticleBezierCurveNode}\t\t\tfrom \"./animators/nodes/ParticleBezierCurveNode\";\nexport {ParticleBillboardNode}\t\t\tfrom \"./animators/nodes/ParticleBillboardNode\";\nexport {ParticleColorNode}\t\t\t\tfrom \"./animators/nodes/ParticleColorNode\";\nexport {ParticleFollowNode}\t\t\t\tfrom \"./animators/nodes/ParticleFollowNode\";\nexport {ParticleInitialColorNode}\t\tfrom \"./animators/nodes/ParticleInitialColorNode\";\nexport {ParticleNodeBase}\t\t\t\tfrom \"./animators/nodes/ParticleNodeBase\";\nexport {ParticleOrbitNode}\t\t\t\tfrom \"./animators/nodes/ParticleOrbitNode\";\nexport {ParticleOscillatorNode}\t\t\tfrom \"./animators/nodes/ParticleOscillatorNode\";\nexport {ParticlePositionNode}\t\t\tfrom \"./animators/nodes/ParticlePositionNode\";\nexport {ParticleRotateToHeadingNode}\t\tfrom \"./animators/nodes/ParticleRotateToHeadingNode\";\nexport {ParticleRotateToPositionNode}\tfrom \"./animators/nodes/ParticleRotateToPositionNode\";\nexport {ParticleRotationalVelocityNode}\tfrom \"./animators/nodes/ParticleRotationalVelocityNode\";\nexport {ParticleScaleNode}\t\t\t\tfrom \"./animators/nodes/ParticleScaleNode\";\nexport {ParticleSegmentedColorNode}\t\tfrom \"./animators/nodes/ParticleSegmentedColorNode\";\nexport {ParticleSpriteSheetNode}\t\t\tfrom \"./animators/nodes/ParticleSpriteSheetNode\";\nexport {ParticleTimeNode}\t\t\t\tfrom \"./animators/nodes/ParticleTimeNode\";\nexport {ParticleUVNode}\t\t\t\t\tfrom \"./animators/nodes/ParticleUVNode\";\nexport {ParticleVelocityNode}\t\t\tfrom \"./animators/nodes/ParticleVelocityNode\";\nexport {SkeletonBinaryLERPNode}\t\t\tfrom \"./animators/nodes/SkeletonBinaryLERPNode\";\nexport {SkeletonClipNode}\t\t\t\tfrom \"./animators/nodes/SkeletonClipNode\";\nexport {SkeletonDifferenceNode}\t\t\tfrom \"./animators/nodes/SkeletonDifferenceNode\";\nexport {SkeletonDirectionalNode}\t\t\tfrom \"./animators/nodes/SkeletonDirectionalNode\";\nexport {SkeletonNaryLERPNode}\t\t\tfrom \"./animators/nodes/SkeletonNaryLERPNode\";\nexport {VertexClipNode}\t\t\t\t\tfrom \"./animators/nodes/VertexClipNode\";\nexport {AnimationClipState}\t\t\t\tfrom \"./animators/states/AnimationClipState\";\nexport {AnimationStateBase}\t\t\t\tfrom \"./animators/states/AnimationStateBase\";\nexport {IAnimationState}\t\t\t\t\tfrom \"./animators/states/IAnimationState\";\nexport {ISkeletonAnimationState}\t\t\tfrom \"./animators/states/ISkeletonAnimationState\";\nexport {IVertexAnimationState}\t\t\tfrom \"./animators/states/IVertexAnimationState\";\nexport {ParticleAccelerationState}\t\tfrom \"./animators/states/ParticleAccelerationState\";\nexport {ParticleBezierCurveState}\t\tfrom \"./animators/states/ParticleBezierCurveState\";\nexport {ParticleBillboardState}\t\t\tfrom \"./animators/states/ParticleBillboardState\";\nexport {ParticleColorState}\t\t\t\tfrom \"./animators/states/ParticleColorState\";\nexport {ParticleFollowState}\t\t\t\tfrom \"./animators/states/ParticleFollowState\";\nexport {ParticleInitialColorState}\t\tfrom \"./animators/states/ParticleInitialColorState\";\nexport {ParticleStateBase}\t\t\t\tfrom \"./animators/states/ParticleStateBase\";\nexport {ParticleOrbitState}\t\t\t\tfrom \"./animators/states/ParticleOrbitState\";\nexport {ParticleOscillatorState}\t\t\tfrom \"./animators/states/ParticleOscillatorState\";\nexport {ParticlePositionState}\t\t\tfrom \"./animators/states/ParticlePositionState\";\nexport {ParticleRotateToHeadingState}\tfrom \"./animators/states/ParticleRotateToHeadingState\";\nexport {ParticleRotateToPositionState}\tfrom \"./animators/states/ParticleRotateToPositionState\";\nexport {ParticleRotationalVelocityState}\tfrom \"./animators/states/ParticleRotationalVelocityState\";\nexport {ParticleScaleState}\t\t\t\tfrom \"./animators/states/ParticleScaleState\";\nexport {ParticleSegmentedColorState}\t\tfrom \"./animators/states/ParticleSegmentedColorState\";\nexport {ParticleSpriteSheetState}\t\tfrom \"./animators/states/ParticleSpriteSheetState\";\nexport {ParticleTimeState}\t\t\t\tfrom \"./animators/states/ParticleTimeState\";\nexport {ParticleUVState}\t\t\t\t\tfrom \"./animators/states/ParticleUVState\";\nexport {ParticleVelocityState}\t\t\tfrom \"./animators/states/ParticleVelocityState\";\nexport {SkeletonBinaryLERPState}\t\t\tfrom \"./animators/states/SkeletonBinaryLERPState\";\nexport {SkeletonClipState}\t\t\t\tfrom \"./animators/states/SkeletonClipState\";\nexport {SkeletonDifferenceState}\t\t\tfrom \"./animators/states/SkeletonDifferenceState\";\nexport {SkeletonDirectionalState}\t\tfrom \"./animators/states/SkeletonDirectionalState\";\nexport {SkeletonNaryLERPState}\t\t\tfrom \"./animators/states/SkeletonNaryLERPState\";\nexport {VertexClipState}\t\t\t\t\tfrom \"./animators/states/VertexClipState\";\nexport {CrossfadeTransition}\t\t\t\tfrom \"./animators/transitions/CrossfadeTransition\";\nexport {CrossfadeTransitionNode}\t\t\tfrom \"./animators/transitions/CrossfadeTransitionNode\";\nexport {CrossfadeTransitionState}\t\tfrom \"./animators/transitions/CrossfadeTransitionState\";\nexport {IAnimationTransition}\t\t\tfrom \"./animators/transitions/IAnimationTransition\";\nexport {AnimationSetBase}\t\t\t\tfrom \"./animators/AnimationSetBase\";\nexport {AnimatorBase}\t\t\t\t\tfrom \"./animators/AnimatorBase\";\nexport {ParticleAnimationSet}\t\t\tfrom \"./animators/ParticleAnimationSet\";\nexport {ParticleAnimator}\t\t\t\tfrom \"./animators/ParticleAnimator\";\nexport {SkeletonAnimationSet}\t\t\tfrom \"./animators/SkeletonAnimationSet\";\nexport {SkeletonAnimator}\t\t\t\tfrom \"./animators/SkeletonAnimator\";\nexport {VertexAnimationSet}\t\t\t\tfrom \"./animators/VertexAnimationSet\";\nexport {VertexAnimator}\t\t\t\t\tfrom \"./animators/VertexAnimator\";",
    "import {Short3Attributes}\t\t\t\tfrom \"awayjs-core/lib/attributes/Short3Attributes\";\nimport {AttributesView}\t\t\t\tfrom \"awayjs-core/lib/attributes/AttributesView\";\nimport {AttributesBuffer}\t\t\t\tfrom \"awayjs-core/lib/attributes/AttributesBuffer\";\nimport {AbstractionBase}\t\t\t\tfrom \"awayjs-core/lib/library/AbstractionBase\";\nimport {IAbstractionPool}\t\t\t\tfrom \"awayjs-core/lib/library/IAbstractionPool\";\nimport {AbstractMethodError}\t\t\tfrom \"awayjs-core/lib/errors/AbstractMethodError\";\nimport {AssetEvent}\t\t\t\t\tfrom \"awayjs-core/lib/events/AssetEvent\";\nimport {Matrix3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\n\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\nimport {GL_AttributesBuffer}\t\t\tfrom \"awayjs-stagegl/lib/attributes/GL_AttributesBuffer\";\n\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\nimport {ElementsBase}\t\t\t\t\tfrom \"awayjs-display/lib/graphics/ElementsBase\";\nimport {ElementsEvent}\t\t\t\tfrom \"awayjs-display/lib/events/ElementsEvent\";\nimport {ElementsUtils}\t\t\t\tfrom \"awayjs-display/lib/utils/ElementsUtils\";\n\nimport {IElementsClassGL}\t\t\t\tfrom \"../elements/IElementsClassGL\";\nimport {ShaderBase}\t\t\t\t\tfrom \"../shaders/ShaderBase\";\nimport {GL_RenderableBase}\t\t\tfrom \"../renderables/GL_RenderableBase\";\n\n/**\n *\n * @class away.pool.GL_ElementsBaseBase\n */\nexport class GL_ElementsBase extends AbstractionBase\n{\n\tpublic usages:number = 0;\n\tprivate _elements:ElementsBase;\n\tpublic _stage:Stage;\n\tprivate _onInvalidateIndicesDelegate:(event:ElementsEvent) => void;\n\tprivate _onClearIndicesDelegate:(event:ElementsEvent) => void;\n\tprivate _onInvalidateVerticesDelegate:(event:ElementsEvent) => void;\n\tprivate _onClearVerticesDelegate:(event:ElementsEvent) => void;\n\tprivate _overflow:GL_ElementsBase;\n\tpublic _indices:GL_AttributesBuffer;\n\tprivate _indicesUpdated:boolean;\n\tprivate _vertices:Object = new Object();\n\tprivate _verticesUpdated:Object = new Object();\n\n\tpublic _indexMappings:Array<number> = Array<number>();\n\t\n\tprivate _numIndices:number = 0;\n\n\tprivate _numVertices:number;\n\t\n\tpublic get elementsType():string\n\t{\n\t\tthrow new AbstractMethodError();\n\t}\n\t\n\tpublic get elementsClass():IElementsClassGL\n\t{\n\t\tthrow new AbstractMethodError();\n\t}\n\n\tpublic get elements():ElementsBase\n\t{\n\t\treturn this._elements;\n\t}\n\t\n\t/**\n\t *\n\t */\n\tpublic get numIndices():number\n\t{\n\t\treturn this._numIndices;\n\t}\n\t\n\t/**\n\t *\n\t */\n\tpublic get numVertices():number\n\t{\n\t\treturn this._numVertices;\n\t}\n\t\n\tconstructor(elements:ElementsBase, stage:Stage)\n\t{\n\t\tsuper(elements, stage);\n\t\t\n\t\tthis._elements = elements;\n\t\tthis._stage = stage;\n\n\t\tthis._onInvalidateIndicesDelegate = (event:ElementsEvent) => this._onInvalidateIndices(event);\n\t\tthis._onClearIndicesDelegate = (event:ElementsEvent) => this._onClearIndices(event);\n\t\tthis._onInvalidateVerticesDelegate = (event:ElementsEvent) => this._onInvalidateVertices(event);\n\t\tthis._onClearVerticesDelegate = (event:ElementsEvent) => this._onClearVertices(event);\n\n\t\tthis._elements.addEventListener(ElementsEvent.CLEAR_INDICES, this._onClearIndicesDelegate);\n\t\tthis._elements.addEventListener(ElementsEvent.INVALIDATE_INDICES, this._onInvalidateIndicesDelegate);\n\n\t\tthis._elements.addEventListener(ElementsEvent.CLEAR_VERTICES, this._onClearVerticesDelegate);\n\t\tthis._elements.addEventListener(ElementsEvent.INVALIDATE_VERTICES, this._onInvalidateVerticesDelegate);\n\t}\n\n\t/**\n\t *\n\t */\n\tpublic getIndexMappings():Array<number>\n\t{\n\t\tif (!this._indicesUpdated)\n\t\t\tthis._updateIndices();\n\n\t\treturn this._indexMappings;\n\t}\n\n\t/**\n\t *\n\t */\n\tpublic getIndexBufferGL():GL_AttributesBuffer\n\t{\n\t\tif (!this._indicesUpdated)\n\t\t\tthis._updateIndices();\n\n\t\treturn this._indices;\n\t}\n\n\n\t/**\n\t *\n\t */\n\tpublic getVertexBufferGL(attributesView:AttributesView):GL_AttributesBuffer\n\t{\n\t\t//first check if indices need updating which may affect vertices\n\t\tif (!this._indicesUpdated)\n\t\t\tthis._updateIndices();\n\n\t\tvar bufferId:number = attributesView.buffer.id;\n\n\t\tif (!this._verticesUpdated[bufferId])\n\t\t\tthis._updateVertices(attributesView);\n\n\t\treturn this._vertices[bufferId];\n\t}\n\t\n\t/**\n\t *\n\t */\n\tpublic activateVertexBufferVO(index:number, attributesView:AttributesView, dimensions:number = 0, offset:number = 0):void\n\t{\n\t\tthis.getVertexBufferGL(attributesView).activate(index, attributesView.size, dimensions || attributesView.dimensions, attributesView.offset + offset, attributesView.unsigned);\n\t}\n\n\t/**\n\t *\n\t */\n\tpublic onClear(event:AssetEvent):void\n\t{\n\t\tsuper.onClear(event);\n\n\t\tthis._elements.removeEventListener(ElementsEvent.CLEAR_INDICES, this._onClearIndicesDelegate);\n\t\tthis._elements.removeEventListener(ElementsEvent.INVALIDATE_INDICES, this._onInvalidateIndicesDelegate);\n\n\t\tthis._elements.removeEventListener(ElementsEvent.CLEAR_VERTICES, this._onClearVerticesDelegate);\n\t\tthis._elements.removeEventListener(ElementsEvent.INVALIDATE_VERTICES, this._onInvalidateVerticesDelegate);\n\n\t\tthis._elements = null;\n\n\t\tif (this._overflow) {\n\t\t\tthis._overflow.onClear(event);\n\t\t\tthis._overflow = null;\n\t\t}\n\t}\n\n\tpublic _setRenderState(renderable:GL_RenderableBase, shader:ShaderBase, camera:Camera, viewProjection:Matrix3D):void\n\t{\n\t\tif (!this._verticesUpdated)\n\t\t\tthis._updateIndices();\n\n\t\t//TODO replace overflow system with something sensible\n\t\t//this._render(renderable, camera, viewProjection);\n\t\t//\n\t\t// if (this._overflow)\n\t\t// \tthis._overflow._iRender(renderable, camera, viewProjection);\n\t}\n\n\tpublic draw(renderable:GL_RenderableBase, shader:ShaderBase, camera:Camera, viewProjection:Matrix3D, count:number, offset:number):void\n\t{\n\t\tthrow new AbstractMethodError();\n\t}\n\n\t/**\n\t * //TODO\n\t *\n\t * @private\n\t */\n\tpublic _updateIndices(indexOffset:number = 0):void\n\t{\n\t\tvar indices:Short3Attributes = this._elements.indices;\n\t\tif (indices) {\n\t\t\tthis._indices = <GL_AttributesBuffer> this._stage.getAbstraction(ElementsUtils.getSubIndices(indices, this._elements.numVertices, this._indexMappings, indexOffset));\n\t\t\tthis._numIndices = this._indices._attributesBuffer.count*indices.dimensions;\n\t\t} else {\n\t\t\tthis._indices = null;\n\t\t\tthis._numIndices = 0;\n\t\t\tthis._indexMappings  = Array<number>();\n\t\t}\n\n\t\tindexOffset += this._numIndices;\n\n\t\t//check if there is more to split\n\t\tif (indices && indexOffset < indices.count*this._elements.indices.dimensions) {\n\t\t\tif (!this._overflow)\n\t\t\t\tthis._overflow = this._pGetOverflowElements();\n\n\t\t\tthis._overflow._updateIndices(indexOffset);\n\t\t} else if (this._overflow) {\n\t\t\tthis._overflow.onClear(new AssetEvent(AssetEvent.CLEAR, this._elements));\n\t\t\tthis._overflow = null;\n\t\t}\n\n\t\tthis._indicesUpdated = true;\n\n\t\t//invalidate vertices if index mappings exist\n\t\tif (this._indexMappings.length)\n\t\t\tfor (var key in this._verticesUpdated)\n\t\t\t\tthis._verticesUpdated[key] = false;\n\t}\n\n\n\t/**\n\t * //TODO\n\t *\n\t * @param attributesView\n\t * @private\n\t */\n\tprivate _updateVertices(attributesView:AttributesView):void\n\t{\n\t\tthis._numVertices = this._elements.numVertices;\n\n\t\tvar bufferId:number = attributesView.buffer.id;\n\n\t\tthis._vertices[bufferId] = <GL_AttributesBuffer> this._stage.getAbstraction(ElementsUtils.getSubVertices(attributesView.buffer, this._indexMappings));\n\n\t\tthis._verticesUpdated[bufferId] = true;\n\t}\n\n\t/**\n\t * //TODO\n\t *\n\t * @param event\n\t * @private\n\t */\n\tpublic _onInvalidateIndices(event:ElementsEvent):void\n\t{\n\t\tif (!event.attributesView)\n\t\t\treturn;\n\n\t\tthis._indicesUpdated = false;\n\t}\n\n\t/**\n\t * //TODO\n\t *\n\t * @param event\n\t * @private\n\t */\n\tpublic _onClearIndices(event:ElementsEvent):void\n\t{\n\t\tif (!event.attributesView)\n\t\t\treturn;\n\n\t\tthis._indices.onClear(new AssetEvent(AssetEvent.CLEAR, event.attributesView));\n\t\tthis._indices = null;\n\t}\n\n\t/**\n\t * //TODO\n\t *\n\t * @param event\n\t * @private\n\t */\n\tpublic _onInvalidateVertices(event:ElementsEvent):void\n\t{\n\t\tif (!event.attributesView)\n\t\t\treturn;\n\n\t\tvar bufferId:number = event.attributesView.buffer.id;\n\n\t\tthis._verticesUpdated[bufferId] = false;\n\t}\n\t\n\t/**\n\t * //TODO\n\t *\n\t * @param event\n\t * @private\n\t */\n\tpublic _onClearVertices(event:ElementsEvent):void\n\t{\n\t\tif (!event.attributesView)\n\t\t\treturn;\n\n\t\tvar bufferId:number = event.attributesView.buffer.id;\n\n\t\tif (this._vertices[bufferId]) {\n\t\t\tthis._vertices[bufferId].onClear(new AssetEvent(AssetEvent.CLEAR, event.attributesView));\n\t\t\tdelete this._vertices[bufferId];\n\t\t\tdelete this._verticesUpdated[bufferId];\n\t\t}\n\t}\n\n\t/**\n\t * //TODO\n\t *\n\t * @param pool\n\t * @param renderable\n\t * @param level\n\t * @param indexOffset\n\t * @returns {away.pool.GL_GraphicRenderable}\n\t * @protected\n\t */\n\tpublic _pGetOverflowElements():GL_ElementsBase\n\t{\n\t\tthrow new AbstractMethodError();\n\t}\n}",
    "import {AssetEvent}\t\t\t\t\tfrom \"awayjs-core/lib/events/AssetEvent\";\nimport {Matrix3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\n\nimport {ContextGLDrawMode}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLDrawMode\";\nimport {IContextGL}\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/IContextGL\";\nimport {ContextGLProgramType}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLProgramType\";\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\n\nimport {LineElements}\t\t\t\t\tfrom \"awayjs-display/lib/graphics/LineElements\";\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\n\nimport {GL_ElementsBase}\t\t\t\tfrom \"../elements/GL_ElementsBase\";\nimport {IElementsClassGL}\t\t\t\tfrom \"../elements/IElementsClassGL\";\nimport {ShaderBase}\t\t\t\t\tfrom \"../shaders/ShaderBase\";\nimport {ShaderRegisterCache}\t\t\tfrom \"../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterElement}\t\tfrom \"../shaders/ShaderRegisterElement\";\nimport {ShaderRegisterData}\t\t\tfrom \"../shaders/ShaderRegisterData\";\nimport {GL_RenderableBase}\t\t\tfrom \"../renderables/GL_RenderableBase\";\n\n/**\n *\n * @class away.pool.GL_LineElements\n */\nexport class GL_LineElements extends GL_ElementsBase\n{\n\tpublic static elementsType:string = \"[elements Line]\";\n\t\n\tpublic get elementsType():string\n\t{\n\t\treturn GL_LineElements.elementsType;\n\t}\n\t\n\tpublic get elementsClass():IElementsClassGL\n\t{\n\t\treturn GL_LineElements;\n\t}\n\t\n\tpublic static _iIncludeDependencies(shader:ShaderBase):void\n\t{\n\t\tshader.colorDependencies++;\n\t}\n\n\tpublic static _iGetVertexCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\t//get the projection coordinates\n\t\tvar position0:ShaderRegisterElement = (shader.globalPosDependencies > 0)? sharedRegisters.globalPositionVertex : sharedRegisters.animatedPosition;\n\t\tvar position1:ShaderRegisterElement = registerCache.getFreeVertexAttribute();\n\t\tvar thickness:ShaderRegisterElement = registerCache.getFreeVertexAttribute();\n\n\t\t//reserving vertex constants for projection matrix\n\t\tvar viewMatrixReg:ShaderRegisterElement = registerCache.getFreeVertexConstant();\n\t\tregisterCache.getFreeVertexConstant();\n\t\tregisterCache.getFreeVertexConstant();\n\t\tregisterCache.getFreeVertexConstant();\n\t\tshader.viewMatrixIndex = viewMatrixReg.index*4;\n\n\t\tregisterCache.getFreeVertexConstant(); // not used\n\t\tvar constOne:ShaderRegisterElement = registerCache.getFreeVertexConstant();\n\t\tvar constNegOne:ShaderRegisterElement = registerCache.getFreeVertexConstant();\n\t\tvar misc:ShaderRegisterElement = registerCache.getFreeVertexConstant();\n\n\t\tvar sceneMatrixReg:ShaderRegisterElement = registerCache.getFreeVertexConstant();\n\t\tregisterCache.getFreeVertexConstant();\n\t\tregisterCache.getFreeVertexConstant();\n\t\tregisterCache.getFreeVertexConstant();\n\t\tshader.sceneMatrixIndex = sceneMatrixReg.index*4;\n\t\t\n\t\tvar q0:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\tregisterCache.addVertexTempUsages(q0, 1);\n\t\tvar q1:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\tregisterCache.addVertexTempUsages(q1, 1);\n\t\t\n\t\tvar l:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\tregisterCache.addVertexTempUsages(l, 1);\n\t\tvar behind:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\tregisterCache.addVertexTempUsages(behind, 1);\n\t\tvar qclipped:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\tregisterCache.addVertexTempUsages(qclipped, 1);\n\t\tvar offset:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\tregisterCache.addVertexTempUsages(offset, 1);\n\n\t\treturn \"m44 \" + q0 + \", \" + position0 + \", \" + sceneMatrixReg + \"\t\t\t\\n\" + // transform Q0 to eye space\n\t\t\t\"m44 \" + q1 + \", \" + position1 + \", \" + sceneMatrixReg + \"\t\t\t\\n\" + // transform Q1 to eye space\n\t\t\t\"sub \" + l + \", \" + q1 + \", \" + q0 + \" \t\t\t\\n\" + // L = Q1 - Q0\n\n\t\t\t\t// test if behind camera near plane\n\t\t\t\t// if 0 - Q0.z < Camera.near then the point needs to be clipped\n\t\t\t\"slt \" + behind + \".x, \" + q0 + \".z, \" + misc + \".z\t\t\t\\n\" + // behind = ( 0 - Q0.z < -Camera.near ) ? 1 : 0\n\t\t\t\"sub \" + behind + \".y, \" + constOne + \".x, \" + behind + \".x\t\t\t\\n\" + // !behind = 1 - behind\n\n\t\t\t\t// p = point on the plane (0,0,-near)\n\t\t\t\t// n = plane normal (0,0,-1)\n\t\t\t\t// D = Q1 - Q0\n\t\t\t\t// t = ( dot( n, ( p - Q0 ) ) / ( dot( n, d )\n\n\t\t\t\t// solve for t where line crosses Camera.near\n\t\t\t\"add \" + offset + \".x, \" + q0 + \".z, \" + misc + \".z\t\t\t\\n\" + // Q0.z + ( -Camera.near )\n\t\t\t\"sub \" + offset + \".y, \" + q0 + \".z, \" + q1 + \".z\t\t\t\\n\" + // Q0.z - Q1.z\n\n\t\t\t\t// fix divide by zero for horizontal lines\n\t\t\t\"seq \" + offset + \".z, \" + offset + \".y \" + constNegOne + \".x\t\t\t\\n\" + // offset = (Q0.z - Q1.z)==0 ? 1 : 0\n\t\t\t\"add \" + offset + \".y, \" + offset + \".y, \" + offset + \".z\t\t\t\\n\" + // ( Q0.z - Q1.z ) + offset\n\n\t\t\t\"div \" + offset + \".z, \" + offset + \".x, \" + offset + \".y\t\t\t\\n\" + // t = ( Q0.z - near ) / ( Q0.z - Q1.z )\n\n\t\t\t\"mul \" + offset + \".xyz, \" + offset + \".zzz, \" + l + \".xyz\t\\n\" + // t(L)\n\t\t\t\"add \" + qclipped + \".xyz, \" + q0 + \".xyz, \" + offset + \".xyz\t\\n\" + // Qclipped = Q0 + t(L)\n\t\t\t\"mov \" + qclipped + \".w, \" + constOne + \".x\t\t\t\\n\" + // Qclipped.w = 1\n\n\t\t\t\t// If necessary, replace Q0 with new Qclipped\n\t\t\t\"mul \" + q0 + \", \" + q0 + \", \" + behind + \".yyyy\t\t\t\\n\" + // !behind * Q0\n\t\t\t\"mul \" + qclipped + \", \" + qclipped + \", \" + behind + \".xxxx\t\t\t\\n\" + // behind * Qclipped\n\t\t\t\"add \" + q0 + \", \" + q0 + \", \" + qclipped + \"\t\t\t\t\\n\" + // newQ0 = Q0 + Qclipped\n\n\t\t\t\t// calculate side vector for line\n\t\t\t\"nrm \" + l + \".xyz, \" + l + \".xyz\t\t\t\\n\" + // normalize( L )\n\t\t\t\"nrm \" + behind + \".xyz, \" + q0 + \".xyz\t\t\t\\n\" + // D = normalize( Q1 )\n\t\t\t\"mov \" + behind + \".w, \" + constOne + \".x\t\t\t\t\\n\" + // D.w = 1\n\t\t\t\"crs \" + qclipped + \".xyz, \" + l + \", \" + behind + \"\t\t\t\\n\" + // S = L x D\n\t\t\t\"nrm \" + qclipped + \".xyz, \" + qclipped + \".xyz\t\t\t\\n\" + // normalize( S )\n\n\t\t\t\t// face the side vector properly for the given point\n\t\t\t\"mul \" + qclipped + \".xyz, \" + qclipped + \".xyz, \" + thickness + \".xxx\t\\n\" + // S *= weight\n\t\t\t\"mov \" + qclipped + \".w, \" + constOne + \".x\t\t\t\\n\" + // S.w = 1\n\n\t\t\t\t// calculate the amount required to move at the point's distance to correspond to the line's pixel width\n\t\t\t\t// scale the side vector by that amount\n\t\t\t\"dp3 \" + offset + \".x, \" + q0 + \", \" + constNegOne + \"\t\t\t\\n\" + // distance = dot( view )\n\t\t\t\"mul \" + offset + \".x, \" + offset + \".x, \" + misc + \".x\t\t\t\\n\" + // distance *= vpsod\n\t\t\t\"mul \" + qclipped + \".xyz, \" + qclipped + \".xyz, \" + offset + \".xxx\t\\n\" + // S.xyz *= pixelScaleFactor\n\n\t\t\t\t// add scaled side vector to Q0 and transform to clip space\n\t\t\t\"add \" + q0 + \".xyz, \" + q0 + \".xyz, \" + qclipped + \".xyz\t\\n\" + // Q0 + S\n\n\t\t\t\"m44 op, \" + q0 + \", \" + viewMatrixReg + \"\t\t\t\\n\"  // transform Q0 to clip space\n\t}\n\n\tpublic static _iGetFragmentCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"\";\n\t}\n\t\n\tprivate _calcMatrix:Matrix3D = new Matrix3D();\n\tprivate _thickness:number = 1.25;\n\n\tprivate _lineElements:LineElements;\n\n\tconstructor(lineElements:LineElements, stage:Stage)\n\t{\n\t\tsuper(lineElements, stage);\n\n\t\tthis._lineElements = lineElements;\n\t}\n\n\tpublic onClear(event:AssetEvent):void\n\t{\n\t\tsuper.onClear(event);\n\n\t\tthis._lineElements = null;\n\t}\n\n\tpublic _setRenderState(renderable:GL_RenderableBase, shader:ShaderBase, camera:Camera, viewProjection:Matrix3D):void\n\t{\n\t\tsuper._setRenderState(renderable, shader, camera, viewProjection);\n\t\t\n\t\tif (shader.colorBufferIndex >= 0)\n\t\t\tthis.activateVertexBufferVO(shader.colorBufferIndex, this._lineElements.colors);\n\n\t\tthis.activateVertexBufferVO(0, this._lineElements.positions, 3);\n\t\tthis.activateVertexBufferVO(2, this._lineElements.positions, 3, 12);\n\t\tthis.activateVertexBufferVO(3, this._lineElements.thickness);\n\n\t\tshader.vertexConstantData[4+16] = 1;\n\t\tshader.vertexConstantData[5+16] = 1;\n\t\tshader.vertexConstantData[6+16] = 1;\n\t\tshader.vertexConstantData[7+16] = 1;\n\n\t\tshader.vertexConstantData[10+16] = -1;\n\n\t\tshader.vertexConstantData[12+16] = this._thickness/((this._stage.scissorRect)? Math.min(this._stage.scissorRect.width, this._stage.scissorRect.height) : Math.min(this._stage.width, this._stage.height));\n\t\tshader.vertexConstantData[13+16] = 1/255;\n\t\tshader.vertexConstantData[14+16] = camera.projection.near;\n\n\t\tvar context:IContextGL = this._stage.context;\n\t}\n\n\tpublic draw(renderable:GL_RenderableBase, shader:ShaderBase, camera:Camera, viewProjection:Matrix3D, count:number, offset:number):void\n\t{\n\t\tvar context:IContextGL = this._stage.context;\n\t\t\n\t\t// projection matrix\n\t\tcamera.projection.matrix.copyRawDataTo(shader.vertexConstantData, shader.viewMatrixIndex, true);\n\t\t\n\t\tthis._calcMatrix.copyFrom(renderable.sourceEntity.sceneTransform);\n\t\tthis._calcMatrix.append(camera.inverseSceneTransform);\n\t\tthis._calcMatrix.copyRawDataTo(shader.vertexConstantData, shader.sceneMatrixIndex, true);\n\n\t\tcontext.setProgramConstantsFromArray(ContextGLProgramType.VERTEX, shader.vertexConstantData);\n\t\t\n\t\tif (this._indices)\n\t\t\tthis.getIndexBufferGL().draw(ContextGLDrawMode.TRIANGLES, 0, this.numIndices);\n\t\telse\n\t\t\tthis._stage.context.drawVertices(ContextGLDrawMode.TRIANGLES, offset, count || this.numVertices);\n\t}\n\n\t/**\n\t * //TODO\n\t *\n\t * @param pool\n\t * @param renderable\n\t * @param level\n\t * @param indexOffset\n\t * @returns {away.pool.LineSubSpriteRenderable}\n\t * @protected\n\t */\n\tpublic _pGetOverflowElements():GL_ElementsBase\n\t{\n\t\treturn new GL_LineElements(this._lineElements, this._stage);\n\t}\n}",
    "import {Matrix3DUtils}\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3DUtils\";\nimport {Matrix3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\nimport {Vector3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\n\nimport {ContextGLDrawMode}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLDrawMode\";\nimport {ContextGLProgramType}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLProgramType\";\nimport {IContextGL}\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/IContextGL\";\n\nimport {ShaderBase}\t\t\t\t\tfrom \"../shaders/ShaderBase\";\nimport {ShaderRegisterCache}\t\t\tfrom \"../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterElement}\t\tfrom \"../shaders/ShaderRegisterElement\";\nimport {GL_TriangleElements}\t\t\tfrom \"../elements/GL_TriangleElements\";\nimport {IElementsClassGL}\t\t\t\tfrom \"../elements/IElementsClassGL\";\nimport {GL_RenderableBase}\t\t\tfrom \"../renderables/GL_RenderableBase\";\nimport {ShaderRegisterData}\t\t\tfrom \"../shaders/ShaderRegisterData\";\n\n/**\n *\n * @class away.pool.GL_SkyboxElements\n */\nexport class GL_SkyboxElements extends GL_TriangleElements\n{\n\tprivate _skyboxProjection:Matrix3D = new Matrix3D();\n\t\n\tpublic static elementsType:string = \"[elements Skybox]\";\n\n\tpublic get elementsType():string\n\t{\n\t\treturn GL_SkyboxElements.elementsType;\n\t}\n\t\n\tpublic get elementsClass():IElementsClassGL\n\t{\n\t\treturn GL_SkyboxElements;\n\t}\n\t\n\tpublic static _iIncludeDependencies(shader:ShaderBase):void\n\t{\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic static _iGetVertexCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\n\t\t//get the projection coordinates\n\t\tvar position:ShaderRegisterElement = (shader.globalPosDependencies > 0)? sharedRegisters.globalPositionVertex : sharedRegisters.animatedPosition;\n\n\t\t//reserving vertex constants for projection matrix\n\t\tvar viewMatrixReg:ShaderRegisterElement = registerCache.getFreeVertexConstant();\n\t\tregisterCache.getFreeVertexConstant();\n\t\tregisterCache.getFreeVertexConstant();\n\t\tregisterCache.getFreeVertexConstant();\n\t\tshader.viewMatrixIndex = viewMatrixReg.index*4;\n\n\t\tvar scenePosition:ShaderRegisterElement = registerCache.getFreeVertexConstant();\n\t\tshader.scenePositionIndex = scenePosition.index*4;\n\n\t\tvar skyboxScale:ShaderRegisterElement = registerCache.getFreeVertexConstant();\n\t\t\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\n\t\tcode += \"mul \" + temp + \", \" + position + \", \" + skyboxScale + \"\\n\" +\n\t\t\t\"add \" + temp + \", \" + temp + \", \" + scenePosition + \"\\n\";\n\n\t\tif (shader.projectionDependencies > 0) {\n\t\t\tsharedRegisters.projectionFragment = registerCache.getFreeVarying();\n\t\t\tcode += \"m44 \" + temp + \", \" + temp + \", \" + viewMatrixReg + \"\\n\" +\n\t\t\t\t\"mov \" + sharedRegisters.projectionFragment + \", \" + temp + \"\\n\" +\n\t\t\t\t\"mov op, \" + temp + \"\\n\";\n\t\t} else {\n\t\t\tcode += \"m44 op, \" + temp + \", \" + viewMatrixReg + \"\\n\";\n\t\t}\n\n\t\treturn code;\n\t}\n\n\tpublic static _iGetFragmentCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"\";\n\t}\n\n\tpublic draw(renderable:GL_RenderableBase, shader:ShaderBase, camera:Camera, viewProjection:Matrix3D, count:number, offset:number):void\n\t{\n\t\tvar index:number = shader.scenePositionIndex;\n\t\tvar pos:Vector3D = camera.scenePosition;\n\t\tshader.vertexConstantData[index++] = 2*pos.x;\n\t\tshader.vertexConstantData[index++] = 2*pos.y;\n\t\tshader.vertexConstantData[index++] = 2*pos.z;\n\t\tshader.vertexConstantData[index++] = 1;\n\t\tshader.vertexConstantData[index++] = shader.vertexConstantData[index++] = shader.vertexConstantData[index++] = camera.projection.far/Math.sqrt(3);\n\t\tshader.vertexConstantData[index] = 1;\n\n\t\tvar near:Vector3D = new Vector3D();\n\n\t\tthis._skyboxProjection.copyFrom(viewProjection);\n\t\tthis._skyboxProjection.copyRowTo(2, near);\n\n\t\tvar camPos:Vector3D = camera.scenePosition;\n\n\t\tvar cx:number = near.x;\n\t\tvar cy:number = near.y;\n\t\tvar cz:number = near.z;\n\t\tvar cw:number = -(near.x*camPos.x + near.y*camPos.y + near.z*camPos.z + Math.sqrt(cx*cx + cy*cy + cz*cz));\n\n\t\tvar signX:number = cx >= 0? 1 : -1;\n\t\tvar signY:number = cy >= 0? 1 : -1;\n\n\t\tvar p:Vector3D = new Vector3D(signX, signY, 1, 1);\n\n\t\tvar inverse:Matrix3D = this._skyboxProjection.clone();\n\t\tinverse.invert();\n\n\t\tvar q:Vector3D = inverse.transformVector(p);\n\n\t\tthis._skyboxProjection.copyRowTo(3, p);\n\n\t\tvar a:number = (q.x*p.x + q.y*p.y + q.z*p.z + q.w*p.w)/(cx*q.x + cy*q.y + cz*q.z + cw*q.w);\n\n\t\tthis._skyboxProjection.copyRowFrom(2, new Vector3D(cx*a, cy*a, cz*a, cw*a));\n\t\t\n\t\t//set constants\n\t\tif (shader.sceneMatrixIndex >= 0) {\n\t\t\trenderable.renderSceneTransform.copyRawDataTo(shader.vertexConstantData, shader.sceneMatrixIndex, true);\n\t\t\tthis._skyboxProjection.copyRawDataTo(shader.vertexConstantData, shader.viewMatrixIndex, true);\n\t\t} else {\n\t\t\tthis._skyboxProjection.copyRawDataTo(shader.vertexConstantData, shader.viewMatrixIndex, true);\n\t\t}\n\n\t\tvar context:IContextGL = this._stage.context;\n\t\tcontext.setProgramConstantsFromArray(ContextGLProgramType.VERTEX, shader.vertexConstantData);\n\t\tcontext.setProgramConstantsFromArray(ContextGLProgramType.FRAGMENT, shader.fragmentConstantData);\n\n\t\tif (this._indices)\n\t\t\tthis.getIndexBufferGL().draw(ContextGLDrawMode.TRIANGLES, 0, this.numIndices);\n\t\telse\n\t\t\tthis._stage.context.drawVertices(ContextGLDrawMode.TRIANGLES, offset, count || this.numVertices);\n\t}\n}",
    "import {AssetEvent}\t\t\t\t\tfrom \"awayjs-core/lib/events/AssetEvent\";\nimport {Matrix3DUtils}\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3DUtils\";\nimport {Matrix3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\n\nimport {ContextGLDrawMode}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLDrawMode\";\nimport {ContextGLProgramType}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLProgramType\";\nimport {IContextGL}\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/IContextGL\";\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\n\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\nimport {TriangleElements}\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\n\nimport {GL_ElementsBase}\t\t\t\tfrom \"../elements/GL_ElementsBase\";\nimport {IElementsClassGL}\t\t\t\tfrom \"../elements/IElementsClassGL\";\nimport {GL_RenderableBase}\t\t\tfrom \"../renderables/GL_RenderableBase\";\nimport {ShaderBase}\t\t\t\t\tfrom \"../shaders/ShaderBase\";\nimport {ShaderRegisterCache}\t\t\tfrom \"../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterData}\t\t\tfrom \"../shaders/ShaderRegisterData\";\nimport {ShaderRegisterElement}\t\tfrom \"../shaders/ShaderRegisterElement\";\n\n/**\n *\n * @class away.pool.GL_TriangleElements\n */\nexport class GL_TriangleElements extends GL_ElementsBase\n{\n\tpublic static elementsType:string = \"[elements Triangle]\";\n\n\tpublic get elementsType():string\n\t{\n\t\treturn GL_TriangleElements.elementsType;\n\t}\n\t\n\tpublic get elementsClass():IElementsClassGL\n\t{\n\t\treturn GL_TriangleElements;\n\t}\n\t\n\tpublic static _iIncludeDependencies(shader:ShaderBase):void\n\t{\n\t}\n\n\tpublic static _iGetVertexCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\t\n\t\t//get the projection coordinates\n\t\tvar position:ShaderRegisterElement = (shader.globalPosDependencies > 0)? sharedRegisters.globalPositionVertex : sharedRegisters.animatedPosition;\n\n\t\t//reserving vertex constants for projection matrix\n\t\tvar viewMatrixReg:ShaderRegisterElement = registerCache.getFreeVertexConstant();\n\t\tregisterCache.getFreeVertexConstant();\n\t\tregisterCache.getFreeVertexConstant();\n\t\tregisterCache.getFreeVertexConstant();\n\t\tshader.viewMatrixIndex = viewMatrixReg.index*4;\n\n\t\tif (shader.projectionDependencies > 0) {\n\t\t\tsharedRegisters.projectionFragment = registerCache.getFreeVarying();\n\t\t\tvar temp:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\t\tcode += \"m44 \" + temp + \", \" + position + \", \" + viewMatrixReg + \"\\n\" +\n\t\t\t\t\"mov \" + sharedRegisters.projectionFragment + \", \" + temp + \"\\n\" +\n\t\t\t\t\"mov op, \" + temp + \"\\n\";\n\t\t} else {\n\t\t\tcode += \"m44 op, \" + position + \", \" + viewMatrixReg + \"\\n\";\n\t\t}\n\n\t\treturn code;\n\t}\n\n\tpublic static _iGetFragmentCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"\";\n\t}\n\n\tprivate _triangleElements:TriangleElements;\n\n\tconstructor(triangleElements:TriangleElements, stage:Stage)\n\t{\n\t\tsuper(triangleElements, stage);\n\n\t\tthis._triangleElements = triangleElements;\n\t}\n\n\tpublic onClear(event:AssetEvent):void\n\t{\n\t\tsuper.onClear(event);\n\n\t\tthis._triangleElements = null;\n\t}\n\n\tpublic _setRenderState(renderable:GL_RenderableBase, shader:ShaderBase, camera:Camera, viewProjection:Matrix3D):void\n\t{\n\t\tsuper._setRenderState(renderable, shader, camera, viewProjection);\n\n\t\t//set buffers\n\t\t//TODO: find a better way to update a concatenated buffer when autoderiving\n\t\tif (shader.normalIndex >= 0 && this._triangleElements.autoDeriveNormals)\n\t\t\tthis._triangleElements.normals;\n\n\t\tif (shader.tangentIndex >= 0 && this._triangleElements.autoDeriveTangents)\n\t\t\tthis._triangleElements.tangents;\n\n\t\tif (shader.curvesIndex >= 0)\n\t\t\tthis.activateVertexBufferVO(shader.curvesIndex, this._triangleElements.getCustomAtributes(\"curves\"));\n\n\t\tif (shader.uvIndex >= 0)\n\t\t\tthis.activateVertexBufferVO(shader.uvIndex, this._triangleElements.uvs || this._triangleElements.positions);\n\n\t\tif (shader.secondaryUVIndex >= 0)\n\t\t\tthis.activateVertexBufferVO(shader.secondaryUVIndex, this._triangleElements.getCustomAtributes(\"secondaryUVs\") || this._triangleElements.uvs || this._triangleElements.positions);\n\n\t\tif (shader.normalIndex >= 0)\n\t\t\tthis.activateVertexBufferVO(shader.normalIndex, this._triangleElements.normals);\n\n\t\tif (shader.tangentIndex >= 0)\n\t\t\tthis.activateVertexBufferVO(shader.tangentIndex, this._triangleElements.tangents);\n\n\t\tif (shader.jointIndexIndex >= 0)\n\t\t\tthis.activateVertexBufferVO(shader.jointIndexIndex, this._triangleElements.jointIndices);\n\n\t\tif (shader.jointWeightIndex >= 0)\n\t\t\tthis.activateVertexBufferVO(shader.jointIndexIndex, this._triangleElements.jointWeights);\n\n\t\tthis.activateVertexBufferVO(0, this._triangleElements.positions);\n\t}\n\n\tpublic draw(renderable:GL_RenderableBase, shader:ShaderBase, camera:Camera, viewProjection:Matrix3D, count:number, offset:number):void\n\t{\n\t\t//set constants\n\t\tif (shader.sceneMatrixIndex >= 0) {\n\t\t\trenderable.renderSceneTransform.copyRawDataTo(shader.vertexConstantData, shader.sceneMatrixIndex, true);\n\t\t\tviewProjection.copyRawDataTo(shader.vertexConstantData, shader.viewMatrixIndex, true);\n\t\t} else {\n\t\t\tvar matrix3D:Matrix3D = Matrix3DUtils.CALCULATION_MATRIX;\n\n\t\t\tmatrix3D.copyFrom(renderable.renderSceneTransform);\n\t\t\tmatrix3D.append(viewProjection);\n\n\t\t\tmatrix3D.copyRawDataTo(shader.vertexConstantData, shader.viewMatrixIndex, true);\n\t\t}\n\n\t\tvar context:IContextGL = this._stage.context;\n\t\tcontext.setProgramConstantsFromArray(ContextGLProgramType.VERTEX, shader.vertexConstantData);\n\t\tcontext.setProgramConstantsFromArray(ContextGLProgramType.FRAGMENT, shader.fragmentConstantData);\n\n\t\tif (this._indices)\n\t\t\tthis.getIndexBufferGL().draw(ContextGLDrawMode.TRIANGLES, 0, this.numIndices);\n\t\telse\n\t\t\tthis._stage.context.drawVertices(ContextGLDrawMode.TRIANGLES, offset, count || this.numVertices);\n\t}\n\n\t/**\n\t * //TODO\n\t *\n\t * @param pool\n\t * @param renderable\n\t * @param level\n\t * @param indexOffset\n\t * @returns {away.pool.GL_GraphicRenderable}\n\t * @protected\n\t */\n\tpublic _pGetOverflowElements():GL_ElementsBase\n\t{\n\t\treturn new GL_TriangleElements(this._triangleElements, this._stage);\n\t}\n}",
    "export {GL_ElementsBase}\t\t\t\t\tfrom \"./elements/GL_ElementsBase\";\nexport {GL_LineElements}\t\t\t\t\tfrom \"./elements/GL_LineElements\";\nexport {GL_SkyboxElements}\t\t\t\tfrom \"./elements/GL_SkyboxElements\";\nexport {GL_TriangleElements}\t\t\t\tfrom \"./elements/GL_TriangleElements\";\nexport {IElementsClassGL}\t\t\t\tfrom \"./elements/IElementsClassGL\";",
    "import {ErrorBase}\t\t\t\t\tfrom \"awayjs-core/lib/errors/ErrorBase\";\n\nexport class AnimationSetError extends ErrorBase\n{\n\tconstructor(message:string)\n\t{\n\t\tsuper(message);\n\t}\n}",
    "export {AnimationSetError}\t\t\t\tfrom \"./errors/AnimationSetError\";",
    "import {AnimationNodeBase}\t\t\t\tfrom \"awayjs-display/lib/animators/nodes/AnimationNodeBase\";\n\nimport {EventBase}\t\t\t\t\t\tfrom \"awayjs-core/lib/events/EventBase\";\n\nimport {AnimatorBase}\t\t\t\t\t\tfrom \"../animators/AnimatorBase\";\nimport {IAnimationState}\t\t\t\t\tfrom \"../animators/states/IAnimationState\";\n\n/**\n * Dispatched to notify changes in an animation state's state.\n */\nexport class AnimationStateEvent extends EventBase\n{\n\t/**\n\t * Dispatched when a non-looping clip node inside an animation state reaches the end of its timeline.\n\t */\n\tpublic static PLAYBACK_COMPLETE:string = \"playbackComplete\";\n\n\tpublic static TRANSITION_COMPLETE:string = \"transitionComplete\";\n\n\tprivate _animator:AnimatorBase;\n\tprivate _animationState:IAnimationState;\n\tprivate _animationNode:AnimationNodeBase;\n\n\t/**\n\t * Create a new <code>AnimatonStateEvent</code>\n\t *\n\t * @param type The event type.\n\t * @param animator The animation state object that is the subject of this event.\n\t * @param animationNode The animation node inside the animation state from which the event originated.\n\t */\n\tconstructor(type:string, animator:AnimatorBase, animationState:IAnimationState, animationNode:AnimationNodeBase)\n\t{\n\t\tsuper(type);\n\n\t\tthis._animator = animator;\n\t\tthis._animationState = animationState;\n\t\tthis._animationNode = animationNode;\n\t}\n\n\t/**\n\t * The animator object that is the subject of this event.\n\t */\n\tpublic get animator():AnimatorBase\n\t{\n\t\treturn this._animator;\n\t}\n\n\t/**\n\t * The animation state object that is the subject of this event.\n\t */\n\tpublic get animationState():IAnimationState\n\t{\n\t\treturn this._animationState;\n\t}\n\n\t/**\n\t * The animation node inside the animation state from which the event originated.\n\t */\n\tpublic get animationNode():AnimationNodeBase\n\t{\n\t\treturn this._animationNode;\n\t}\n\n\t/**\n\t * Clones the event.\n\t *\n\t * @return An exact duplicate of the current object.\n\t */\n\tpublic clone():AnimationStateEvent\n\t{\n\t\treturn new AnimationStateEvent(this.type, this._animator, this._animationState, this._animationNode);\n\t}\n}",
    "import {EventBase}\t\t\t\t\tfrom \"awayjs-core/lib/events/EventBase\";\n\nimport {AnimatorBase}\t\t\t\t\tfrom \"../animators/AnimatorBase\";\n\n/**\n * Dispatched to notify changes in an animator's state.\n */\nexport class AnimatorEvent extends EventBase\n{\n\t/**\n\t * Defines the value of the type property of a start event object.\n\t */\n\tpublic static START:string = \"animatorStart\";\n\n\t/**\n\t * Defines the value of the type property of a stop event object.\n\t */\n\tpublic static STOP:string = \"animatorStop\";\n\n\t/**\n\t * Defines the value of the type property of a cycle complete event object.\n\t */\n\tpublic static CYCLE_COMPLETE:string = \"animatorCycleComplete\";\n\n\tprivate _animator:AnimatorBase;\n\n\t/**\n\t * Create a new <code>AnimatorEvent</code> object.\n\t *\n\t * @param type The event type.\n\t * @param animator The animator object that is the subject of this event.\n\t */\n\tconstructor(type:string, animator:AnimatorBase)\n\t{\n\t\tsuper(type);\n\t\tthis._animator = animator;\n\t}\n\n\tpublic get animator():AnimatorBase\n\t{\n\t\treturn this._animator;\n\t}\n\n\t/**\n\t * Clones the event.\n\t *\n\t * @return An exact duplicate of the current event object.\n\t */\n\tpublic clone():AnimatorEvent\n\t{\n\t\treturn new AnimatorEvent(this.type, this._animator);\n\t}\n}",
    "import {EventBase}\t\t\t\tfrom \"awayjs-core/lib/events/EventBase\";\n\nimport {IPass}\t\t\t\t\tfrom \"../surfaces/passes/IPass\";\n\nexport class PassEvent extends EventBase\n{\n\t/**\n\t *\n\t */\n\tpublic static INVALIDATE:string = \"invalidatePass\";\n\n\tprivate _pass:IPass;\n\n\t/**\n\t *\n\t */\n\tpublic get pass():IPass\n\t{\n\t\treturn this._pass;\n\t}\n\n\tconstructor(type:string, pass:IPass)\n\t{\n\t\tsuper(type);\n\n\t\tthis._pass = pass;\n\t}\n\n\t/**\n\t *\n\t */\n\tpublic clone():PassEvent\n\t{\n\t\treturn new PassEvent(this.type, this._pass);\n\t}\n}",
    "import {EventBase}\t\t\t\tfrom \"awayjs-core/lib/events/EventBase\";\n\nimport {RTTBufferManager}\t\t\tfrom \"../managers/RTTBufferManager\";\n\nexport class RTTEvent extends EventBase\n{\n\t/**\n\t *\n\t */\n\tpublic static RESIZE:string = \"rttManagerResize\";\n\n\tprivate _rttManager:RTTBufferManager;\n\n\t/**\n\t *\n\t */\n\tpublic get rttManager():RTTBufferManager\n\t{\n\t\treturn this._rttManager;\n\t}\n\n\tconstructor(type:string, rttManager:RTTBufferManager)\n\t{\n\t\tsuper(type);\n\n\t\tthis._rttManager = rttManager;\n\t}\n\n\t/**\n\t *\n\t */\n\tpublic clone():RTTEvent\n\t{\n\t\treturn new RTTEvent(this.type, this._rttManager);\n\t}\n}",
    "import {EventBase}\t\t\t\t\tfrom \"awayjs-core/lib/events/EventBase\";\n\nexport class ShadingMethodEvent extends EventBase\n{\n\tpublic static SHADER_INVALIDATED:string = \"ShaderInvalidated\";\n\n\tconstructor(type:string)\n\t{\n\t\tsuper(type);\n\t}\n}",
    "export {AnimationStateEvent}\t\t\t\tfrom \"./events/AnimationStateEvent\";\nexport {AnimatorEvent}\t\t\t\t\tfrom \"./events/AnimatorEvent\";\nexport {PassEvent}\t\t\t\t\t\tfrom \"./events/PassEvent\";\nexport {RTTEvent}\t\t\t\t\t\tfrom \"./events/RTTEvent\";\nexport {ShadingMethodEvent}\t\t\t\tfrom \"./events/ShadingMethodEvent\";",
    "import {Image2D}\t\t\t\t\t\tfrom \"awayjs-core/lib/image/Image2D\";\n\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\n\nimport {Filter3DHBlurTask}\t\t\tfrom \"../filters/tasks/Filter3DHBlurTask\";\nimport {Filter3DVBlurTask}\t\t\tfrom \"../filters/tasks/Filter3DVBlurTask\";\nimport {Filter3DBase}\t\t\t\t\tfrom \"../filters/Filter3DBase\";\n\nexport class BlurFilter3D extends Filter3DBase\n{\n\tprivate _hBlurTask:Filter3DHBlurTask;\n\tprivate _vBlurTask:Filter3DVBlurTask;\n\t\n\t/**\n\t * Creates a new BlurFilter3D object\n\t * @param blurX The amount of horizontal blur to apply\n\t * @param blurY The amount of vertical blur to apply\n\t * @param stepSize The distance between samples. Set to -1 to autodetect with acceptable quality.\n\t */\n\tconstructor(blurX:number = 3, blurY:number = 3, stepSize:number = -1)\n\t{\n\t\tsuper();\n\n\t\tthis._hBlurTask = new Filter3DHBlurTask(blurX, stepSize);\n\t\tthis._vBlurTask = new Filter3DVBlurTask(blurY, stepSize);\n\n\t\tthis.addTask(this._hBlurTask);\n\t\tthis.addTask(this._vBlurTask);\n\t}\n\t\n\tpublic get blurX():number\n\t{\n\t\treturn this._hBlurTask.amount;\n\t}\n\t\n\tpublic set blurX(value:number)\n\t{\n\t\tthis._hBlurTask.amount = value;\n\t}\n\t\n\tpublic get blurY():number\n\t{\n\t\treturn this._vBlurTask.amount;\n\t}\n\t\n\tpublic set blurY(value:number)\n\t{\n\t\tthis._vBlurTask.amount = value;\n\t}\n\t\n\t/**\n\t * The distance between two blur samples. Set to -1 to autodetect with acceptable quality (default value).\n\t * Higher values provide better performance at the cost of reduces quality.\n\t */\n\tpublic get stepSize():number\n\t{\n\t\treturn this._hBlurTask.stepSize;\n\t}\n\t\n\tpublic set stepSize(value:number)\n\t{\n\t\tthis._hBlurTask.stepSize = value;\n\t\tthis._vBlurTask.stepSize = value;\n\t}\n\t\n\tpublic setRenderTargets(mainTarget:Image2D, stage:Stage):void\n\t{\n\t\tthis._hBlurTask.target = this._vBlurTask.getMainInputTexture(stage);\n\t\tsuper.setRenderTargets(mainTarget, stage);\n\t}\n}",
    "import {Image2D}\t\t\t\t\t\tfrom \"awayjs-core/lib/image/Image2D\";\n\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\n\nimport {Filter3DCompositeTask}\t\tfrom \"../filters/tasks/Filter3DCompositeTask\";\nimport {Filter3DBase}\t\t\t\t\tfrom \"../filters/Filter3DBase\";\n\nexport class CompositeFilter3D extends Filter3DBase\n{\n\tprivate _compositeTask:Filter3DCompositeTask;\n\t\n\t/**\n\t * Creates a new CompositeFilter3D object\n\t * @param blurX The amount of horizontal blur to apply\n\t * @param blurY The amount of vertical blur to apply\n\t * @param stepSize The distance between samples. Set to -1 to autodetect with acceptable quality.\n\t */\n\tconstructor(blendMode:string, exposure:number = 1)\n\t{\n\t\tsuper();\n\n\t\tthis._compositeTask = new Filter3DCompositeTask(blendMode, exposure);\n\n\t\tthis.addTask(this._compositeTask);\n\t}\n\t\n\tpublic get exposure():number\n\t{\n\t\treturn this._compositeTask.exposure;\n\t}\n\t\n\tpublic set exposure(value:number)\n\t{\n\t\tthis._compositeTask.exposure = value;\n\t}\n\n\n\tpublic get overlayTexture():Image2D\n\t{\n\t\treturn this._compositeTask.overlayTexture;\n\t}\n\n\tpublic set overlayTexture(value:Image2D)\n\t{\n\t\tthis._compositeTask.overlayTexture = value;\n\t}\n}",
    "import {Image2D}\t\t\t\t\t\tfrom \"awayjs-core/lib/image/Image2D\";\n\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\n\nimport {Filter3DFXAATask}\t\t\t\tfrom \"../filters/tasks/Filter3DFXAATask\";\nimport {Filter3DBase}\t\t\t\t\tfrom \"../filters/Filter3DBase\";\n\nexport class FXAAFilter3D extends Filter3DBase\n{\n\tprivate _fxaaTask:Filter3DFXAATask;\n\t\n\t/**\n\t * Creates a new FXAAFilter3D object\n\t * @param amount\n\t * @param stepSize The distance between samples. Set to -1 to autodetect with acceptable quality.\n\t */\n\tconstructor(amount:number, stepSize:number = -1)\n\t{\n\t\tsuper();\n\n\t\tthis._fxaaTask = new Filter3DFXAATask(amount, stepSize);\n\n\t\tthis.addTask(this._fxaaTask);\n\t}\n\t\n\tpublic get amount():number\n\t{\n\t\treturn this._fxaaTask.amount;\n\t}\n\t\n\tpublic set amount(value:number)\n\t{\n\t\tthis._fxaaTask.amount = value;\n\t}\n\n\n\tpublic get stepSize():number\n\t{\n\t\treturn this._fxaaTask.stepSize;\n\t}\n\n\tpublic set stepSize(value:number)\n\t{\n\t\tthis._fxaaTask.stepSize = value;\n\t}\n}",
    "import {Image2D}\t\t\t\t\t\tfrom \"awayjs-core/lib/image/Image2D\";\n\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\n\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\n\nimport {Filter3DTaskBase}\t\t\t\tfrom \"../filters/tasks/Filter3DTaskBase\";\nimport {RTTBufferManager}\t\t\t\tfrom \"../managers/RTTBufferManager\";\n\nexport class Filter3DBase\n{\n\tprivate _tasks:Array<Filter3DTaskBase>;\n\tprivate _requireDepthRender:boolean;\n\tprivate _rttManager:RTTBufferManager;\n\tprivate _textureWidth:number;\n\tprivate _textureHeight:number;\n\n\tconstructor()\n\t{\n\t\tthis._tasks = new Array<Filter3DTaskBase>();\n\t}\n\n\tpublic get requireDepthRender():boolean\n\t{\n\t\treturn this._requireDepthRender;\n\t}\n\n\tpublic addTask(filter:Filter3DTaskBase):void\n\t{\n\t\tthis._tasks.push(filter);\n\n\t\tif (this._requireDepthRender == null)\n\t\t\tthis._requireDepthRender = filter.requireDepthRender;\n\t}\n\n\tpublic get tasks():Filter3DTaskBase[]\n\t{\n\t\treturn this._tasks;\n\t}\n\n\tpublic getMainInputTexture(stage:Stage):Image2D\n\t{\n\t\treturn this._tasks[0].getMainInputTexture(stage);\n\t}\n\n\tpublic get textureWidth():number\n\t{\n\t\treturn this._textureWidth;\n\t}\n\n\tpublic set textureWidth(value:number)\n\t{\n\t\tthis._textureWidth = value;\n\n\t\tfor (var i:number = 0; i < this._tasks.length; ++i)\n\t\t\tthis._tasks[i].textureWidth = value;\n\t}\n\n\n\tpublic get rttManager():RTTBufferManager\n\t{\n\t\treturn this._rttManager;\n\t}\n\n\tpublic set rttManager(value:RTTBufferManager)\n\t{\n\t\tthis._rttManager = value;\n\n\t\tfor (var i:number = 0; i < this._tasks.length; ++i)\n\t\t\tthis._tasks[i].rttManager = value;\n\t}\n\n\tpublic get textureHeight():number\n\t{\n\t\treturn this._textureHeight;\n\t}\n\n\tpublic set textureHeight(value:number)\n\t{\n\t\tthis._textureHeight = value;\n\n\t\tfor (var i:number = 0; i < this._tasks.length; ++i)\n\t\t\tthis._tasks[i].textureHeight = value;\n\t}\n\n\t// link up the filters correctly with the next filter\n\tpublic setRenderTargets(mainTarget:Image2D, stage:Stage):void\n\t{\n\t\tthis._tasks[this._tasks.length - 1].target = mainTarget;\n\t}\n\n\tpublic dispose():void\n\t{\n\t\tfor (var i:number = 0; i < this._tasks.length; ++i)\n\t\t\tthis._tasks[i].dispose();\n\t}\n\n\tpublic update(stage:Stage, camera:Camera):void\n\t{\n\n\t}\n}",
    "import {Image2D}\t\t\t\t\t\tfrom \"awayjs-core/lib/image/Image2D\";\n\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\n\nimport {ContextGLProgramType}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLProgramType\";\nimport {IContextGL}\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/IContextGL\";\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\nimport {GL_ImageBase}\t\t\t\t\tfrom \"awayjs-stagegl/lib/image/GL_ImageBase\";\n\nimport {Filter3DTaskBase}\t\t\t\tfrom \"../../filters/tasks/Filter3DTaskBase\";\nimport {ShaderRegisterElement}\t\tfrom \"../../shaders/ShaderRegisterElement\";\n\nexport class Filter3DCompositeTask extends Filter3DTaskBase\n{\n\tprivate _data:Float32Array;\n\tprivate _overlayTexture:Image2D;\n\tprivate _overlayWidth:number;\n\tprivate _overlayHeight:number;\n\tprivate _blendMode:string;\n\t\n\tprivate _overlayTextureIndex:number;\n\tprivate _exposureIndex:number;\n\tprivate _scalingIndex:number;\n\t\n\tconstructor(blendMode:string, exposure:number = 1)\n\t{\n\t\tsuper();\n\t\tthis._data = new Float32Array([exposure, 0.5, 2.0, -1, 0.0, 0.0, 0.0, 0.0 ]);\n\t\tthis._blendMode = blendMode;\n\t}\n\t\n\tpublic get overlayTexture():Image2D\n\t{\n\t\treturn this._overlayTexture;\n\t}\n\t\n\tpublic set overlayTexture(value:Image2D)\n\t{\n\t\tthis._overlayTexture = value;\n\t\tthis._overlayWidth = this._overlayTexture.width;\n\t\tthis._overlayHeight = this._overlayTexture.height;\n\t}\n\t\n\tpublic get exposure():number\n\t{\n\t\treturn this._data[0];\n\t}\n\t\n\tpublic set exposure(value:number)\n\t{\n\t\tthis._data[0] = value;\n\t}\n\t\n\tpublic getFragmentCode():string\n\t{\n\t\tvar temp1:ShaderRegisterElement = this._registerCache.getFreeFragmentVectorTemp();\n\t\tthis._registerCache.addFragmentTempUsages(temp1, 1);\n\t\tvar temp2:ShaderRegisterElement = this._registerCache.getFreeFragmentVectorTemp();\n\t\tthis._registerCache.addFragmentTempUsages(temp2, 1);\n\t\tvar temp3:ShaderRegisterElement = this._registerCache.getFreeFragmentVectorTemp();\n\t\tthis._registerCache.addFragmentTempUsages(temp3, 1);\n\t\tvar temp4:ShaderRegisterElement = this._registerCache.getFreeFragmentVectorTemp();\n\t\tthis._registerCache.addFragmentTempUsages(temp4, 1);\n\t\t\n\t\t\n\t\tvar inputTexture:ShaderRegisterElement = this._registerCache.getFreeTextureReg();\n\t\tthis._inputTextureIndex = inputTexture.index;\n\t\t\n\t\tvar overlayTexture:ShaderRegisterElement = this._registerCache.getFreeTextureReg();\n\t\tthis._overlayTextureIndex = overlayTexture.index;\n\t\t\n\t\tvar exposure:ShaderRegisterElement = this._registerCache.getFreeFragmentConstant();\n\t\tthis._exposureIndex = exposure.index*4;\n\n\t\tvar scaling:ShaderRegisterElement = this._registerCache.getFreeFragmentConstant();\n\t\tthis._scalingIndex = scaling.index*4;\n\t\t\n\t\tvar code:string;\n\t\t\n\t\tcode = \"tex \" + temp1 + \", \" + this._uvVarying + \", \" + inputTexture + \" <2d,linear,clamp>\\n\" +\n\t\t\t\"mul \" + temp2 + \", \" + this._uvVarying + \", \" + scaling + \".zw\\n\" +\n\t\t\t\"add \" + temp2 + \", \" + temp2 + \", \" + scaling + \".xy\\n\" +\n\t\t\t\"tex \" + temp2 + \", \" + temp2 + \", \" + overlayTexture + \" <2d,linear,clamp>\\n\" +\n\t\t\t\"mul \" + temp2 + \", \" + temp2 + \", \" + exposure + \".xxx\\n\" +\n\t\t\t\"add \" + temp2 + \", \" + temp2 + \", \" + exposure + \".xxx\\n\";\n\t\tswitch (this._blendMode) {\n\t\t\tcase \"multiply\":\n\t\t\t\tcode += \"mul oc, \" + temp1 + \", \" + temp2 + \"\\n\";\n\t\t\t\tbreak;\n\t\t\tcase \"add\":\n\t\t\t\tcode += \"add oc, \" + temp1 + \", \" + temp2 + \"\\n\";\n\t\t\t\tbreak;\n\t\t\tcase \"subtract\":\n\t\t\t\tcode += \"sub oc, \" + temp1 + \", \" + temp2 + \"\\n\";\n\t\t\t\tbreak;\n\t\t\tcase \"overlay\":\n\t\t\t\tcode += \"sge \" + temp3 + \", \" + temp1 + \", \" + exposure + \".yyy\\n\"; // t2 = (blend >= 0.5)? 1 : 0\n\t\t\t\tcode += \"sub \" + temp1 + \", \" + temp3 + \", \" + temp1 + \"\\n\"; // base = (1 : 0 - base)\n\t\t\t\tcode += \"sub \" + temp2 + \", \" + temp2 + \", \" + temp3 + \"\\n\"; // blend = (blend - 1 : 0)\n\t\t\t\tcode += \"mul \" + temp2 + \", \" + temp2 + \", \" + temp1 + \"\\n\"; // blend = blend * base\n\t\t\t\tcode += \"sub \" + temp4 + \", \" + temp3 + \", \" + exposure + \".yyy\\n\"; // t3 = (blend >= 0.5)? 0.5 : -0.5\n\t\t\t\tcode += \"div \" + temp2 + \", \" + temp2 + \", \" + temp4 + \"\\n\"; // blend = blend / ( 0.5 : -0.5)\n\t\t\t\tcode += \"add oc, \" + temp2 + \", \" + temp3 + \"\\n\";\n\t\t\t\tbreak;\n\t\t\tcase \"normal\":\n\t\t\t\t// for debugging purposes\n\t\t\t\tcode += \"mov oc, \" + temp1 + \"\\n\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"Unknown blend mode\");\n\t\t}\n\t\treturn code;\n\t}\n\t\n\tpublic activate(stage:Stage, camera3D:Camera, depthTexture:Image2D):void\n\t{\n\t\tthis._data[4] = -0.5*(this._scaledTextureWidth - this._overlayWidth)/this._overlayWidth;\n\t\tthis._data[5] = -0.5*(this._scaledTextureHeight - this._overlayHeight)/this._overlayHeight;\n\n\t\tthis._data[6] = this._scaledTextureWidth/this._overlayWidth;\n\t\tthis._data[7] = this._scaledTextureHeight/this._overlayHeight;\n\n\t\tvar context:IContextGL = stage.context;\n\t\tcontext.setProgramConstantsFromArray(ContextGLProgramType.FRAGMENT, this._data);\n\t\t\n\t\t(<GL_ImageBase> stage.getAbstraction(this._overlayTexture)).activate(this._overlayTextureIndex, false);\n\t}\n\t\n\tpublic deactivate(stage:Stage):void\n\t{\n\t\tstage.context.setTextureAt(1, null);\n\t}\n}",
    "import {Image2D}\t\t\t\t\t\tfrom \"awayjs-core/lib/image/Image2D\";\n\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\n\nimport {ContextGLProgramType}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLProgramType\";\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\n\nimport {Filter3DTaskBase}\t\t\t\tfrom \"../../filters/tasks/Filter3DTaskBase\";\n\nexport class Filter3DFXAATask extends Filter3DTaskBase\n{\n\tprivate _data:Float32Array;\n\t//TODO - remove blur variables and create setters/getters for FXAA\n\tprivate static MAX_AUTO_SAMPLES:number = 15;\n\tprivate _amount:number;\n\tprivate _stepSize:number = 1;\n\tprivate _realStepSize:number;\n\t\n\t/**\n\t *\n\t * @param amount\n\t * @param stepSize The distance between samples. Set to -1 to autodetect with acceptable quality.\n\t */\n\tconstructor(amount:number = 1, stepSize:number = -1)\n\t{\n\t\tsuper();\n\n\t\tthis._data =  new Float32Array(20);\n\t\t//luma\n\t\tthis._data.set([0.299, 0.587, 0.114, 0],0);//0.212, 0.716, 0.072\n\t\t//helpers\n\t\tthis._data.set([0.25, 0.5, 0.75, 1], 4);\n\t\t//settings (screen x, screen y, ...)\n\t\tthis._data.set([1/1024, 1/1024, -1, 1], 8);\n\t\t//deltas\n\t\tthis._data.set([1/128, 1/8, 8, 0], 12);\n\t\t//deltas\n\t\tthis._data.set([1.0/3.0 - 0.5, 2.0/3.0 - 0.5, 0.0/3.0 - 0.5, 3.0/3.0 - 0.5], 16);\n\n\n\t\tthis.amount = amount;\n\t\tthis.stepSize = stepSize;\n\t}\n\n\tpublic get amount():number\n\t{\n\t\treturn this._amount;\n\t}\n\n\tpublic set amount(value:number)\n\t{\n\t\tif (this._amount == value)\n\t\t\treturn;\n\n\t\tthis._amount = value;\n\n\t\tthis.invalidateProgram();\n\t\tthis.updateBlurData();\n\t}\n\n\tpublic get stepSize():number\n\t{\n\t\treturn this._stepSize;\n\t}\n\n\tpublic set stepSize(value:number)\n\t{\n\t\tif (this._stepSize == value)\n\t\t\treturn;\n\t\tthis._stepSize = value;\n\t\tthis.calculateStepSize();\n\t\tthis.invalidateProgram();\n\t\tthis.updateBlurData();\n\t}\n\n\tpublic getFragmentCode():string\n\t{\n\t\tvar lum:string = \"fc0\";\t\t//\t0.299, 0.587, 0.114\n\t\tvar _0:string = \"fc0.w\";\n\n\t\tvar _025:string = \"fc1.x\";\n\t\tvar _05:string = \"fc1.y\";\n\t\tvar _075:string = \"fc1.z\";\n\t\tvar _1:string = \"fc1.w\";\n\n\t\tvar pix:string = \"fc2.xy\";\n\t\tvar dx:string = \"fc2.x\"; // 1/1024\n\t\tvar dy:string = \"fc2.y\"; // 1/1024\n\n\t\tvar mOne:string = \"fc2.z\"; // -1.0\n\t\tvar mul:string = \"fc2.w\"; // 1.0  -- one for now\n\n\t\tvar fxaaReduceMin :string = \"fc3.x\";\t//1/128\n\t\tvar fxaaReduceMul :string = \"fc3.y\";\t//1/8\n\t\tvar fxaaSpanMax :string = \"fc3.z\";\t\t//8\n\n\t\tvar delta1:string = \"fc4.x\";\t//1.0/3.0 - 0.5\n\t\tvar delta2:string = \"fc4.y\";\t//2.0/3.0 - 0.5\n\t\tvar delta3:string = \"fc4.z\";\t//0.0/3.0 - 0.5\n\t\tvar delta4:string = \"fc4.w\";\t//3.0/3.0 - 0.5\n\n\t\tvar uv_in:string = \"v0\";\n\n\t\tvar uv:string = \"ft0.xy\";\n\t\tvar uvx:string = \"ft0.x\";\n\t\tvar uvy:string = \"ft0.y\";\n\n\t\tvar TL:string = \"ft2.x\";\n\t\tvar TR:string = \"ft2.y\";\n\t\tvar BL:string = \"ft2.z\";\n\t\tvar BR:string = \"ft2.w\";\n\t\tvar M:string = \"ft3.x\";\n\n\t\tvar tempf1:string = \"ft3.y\";\n\t\tvar tempf2:string = \"ft3.z\";\n\t\tvar tempf3:string = \"ft3.w\";\n\n\t\tvar tex:string = \"ft1\";\n\n\t\tvar dir:string = \"ft4\";\n\t\tvar dirx:string = \"ft4.x\";\n\t\tvar diry:string = \"ft4.y\";\n\t\tvar dirxy:string = \"ft4.xy\";\n\n\t\tvar dirReduce:string = \"ft5.x\";\n\t\tvar inverseDirAdjustment:string = \"ft5.y\";\n\n\t\tvar result1:string = \"ft6\";\n\t\tvar result2:string = \"ft7\";\n\n\t\tvar lumaMin:string = \"ft5.x\";\n\t\tvar lumaMax:string = \"ft5.y\";\n\n\t\tvar sample:string = \"fs0\";\n\n\n\t\tvar temp:string = tex;\n\t\tvar tempxy:string = temp + \".xy\";\n\t\t\n\t\tvar code:Array<string> =  new Array<string>();\n\n\t\t//lumas\n\t\tcode.push(\"tex\", tex, uv_in, sample, \"<2d wrap linear>\", \"\\n\");\n\t\tcode.push(\"dp3\", M, tex, lum, \"\\n\");\n\t\tcode.push(\"mov\", uv, uv_in, \"\\n\");\n\t\tcode.push(\"sub\", uv, uv, pix, \"\\n\");\n\t\tcode.push(\"tex\", tex, uv, sample, \"<2d wrap linear>\", \"\\n\");\n\t\tcode.push(\"dp3\", TL, tex, lum, \"\\n\");\n\t\tcode.push(\"mov\", uv, uv_in, \"\\n\");\n\t\tcode.push(\"add\", uv, uv, pix, \"\\n\");\n\t\tcode.push(\"tex\", tex, uv, sample, \"<2d wrap linear>\", \"\\n\");\n\t\tcode.push(\"dp3\",  BR, tex, lum, \"\\n\");\n\t\tcode.push(\"mov\", uv, uv_in, \"\\n\");\n\t\tcode.push(\"sub\", uvy, uvy, dy, \"\\n\");\n\t\tcode.push(\"add\", uvx, uvx, dx, \"\\n\");\n\t\tcode.push(\"tex\", tex, uv, sample, \"<2d wrap linear>\", \"\\n\");\n\t\tcode.push(\"dp3\", TR, tex, lum, \"\\n\");\n\t\tcode.push(\"mov\", uv, uv_in, \"\\n\");\n\t\tcode.push(\"add\", uvy, uvy, dy, \"\\n\");\n\t\tcode.push(\"sub\", uvx, uvx, dx, \"\\n\");\n\t\tcode.push(\"tex\", tex, uv, sample, \"<2d wrap linear>\", \"\\n\");\n\t\tcode.push(\"dp3\", BL, tex, lum, \"\\n\");\n\n\t\t//dir\n\t\tcode.push(\"add\", tempf1, TL, TR, \"\\n\");\n\t\tcode.push(\"add\", tempf2, BL, BR, \"\\n\");\n\t\tcode.push(\"sub\", dirx, tempf1, tempf2, \"\\n\");\n\t\tcode.push(\"neg\", dirx, dirx, \"\\n\");\n\n\t\tcode.push(\"add\", tempf1, TL, BL, \"\\n\");\n\t\tcode.push(\"add\", tempf2, TR, BR, \"\\n\");\n\t\tcode.push(\"sub\", diry, tempf1, tempf2, \"\\n\");\n\n\t\tcode.push(\"add\", tempf1, tempf1, tempf2, \"\\n\");\n\t\tcode.push(\"mul\", tempf1, tempf1, fxaaReduceMul, \"\\n\");\n\t\tcode.push(\"mul\", tempf1, tempf1, _025, \"\\n\");\n\t\tcode.push(\"max\", dirReduce, tempf1, fxaaReduceMin, \"\\n\");\n\n\t\tcode.push(\"abs\", tempf1, dirx, \"\\n\");\n\t\tcode.push(\"abs\", tempf2, diry, \"\\n\");\n\t\tcode.push(\"min\", tempf1, tempf1, tempf2, \"\\n\");\n\t\tcode.push(\"add\", tempf1, tempf1, dirReduce, \"\\n\");\n\t\tcode.push(\"rcp\", inverseDirAdjustment, tempf1, \"\\n\");\n\n\t\tcode.push(\"mul\", tempf1, dirx, inverseDirAdjustment, \"\\n\");\n\t\tcode.push(\"mov\", tempf2, fxaaSpanMax, \"\\n\");\n\t\tcode.push(\"neg\", tempf2, tempf2, \"\\n\");\n\t\tcode.push(\"max\", tempf1, tempf1, tempf2, \"\\n\");\n\t\tcode.push(\"min\", tempf1, fxaaSpanMax, tempf1, \"\\n\");\n\t\tcode.push(\"mul\", dirx, tempf1, dx, \"\\n\");\n\n\t\tcode.push(\"mul\", tempf1, diry, inverseDirAdjustment, \"\\n\");\n\t\tcode.push(\"mov\", tempf2, fxaaSpanMax, \"\\n\");\n\t\tcode.push(\"neg\", tempf2, tempf2, \"\\n\");\n\t\tcode.push(\"max\", tempf1, tempf1, tempf2, \"\\n\");\n\t\tcode.push(\"min\", tempf1, fxaaSpanMax, tempf1, \"\\n\");\n\t\tcode.push(\"mul\", diry, tempf1, dy, \"\\n\");\n\n\n\t\tcode.push(\"mul\", tempxy, dirxy, delta1, \"\\n\");\n\t\tcode.push(\"add\", uv, uv_in, tempxy, \"\\n\");\n\t\tcode.push(\"tex\", result1, uv, sample, \"<2d wrap linear>\", \"\\n\");\n\t\tcode.push(\"mul\", tempxy, dirxy, delta2, \"\\n\");\n\t\tcode.push(\"add\", uv, uv_in, tempxy, \"\\n\");\n\t\tcode.push(\"tex\", tex, uv, sample, \"<2d wrap linear>\", \"\\n\");\n\t\tcode.push(\"add\", result1, result1, tex, \"\\n\");\n\t\tcode.push(\"mul\", result1, result1, _05, \"\\n\");\n\n\t\tcode.push(\"mul\", tempxy, dirxy, delta3, \"\\n\");\n\t\tcode.push(\"add\", uv, uv_in, tempxy, \"\\n\");\n\t\tcode.push(\"tex\", result2, uv, sample, \"<2d wrap linear>\", \"\\n\");\n\t\tcode.push(\"mul\", tempxy, dirxy, delta4, \"\\n\");\n\t\tcode.push(\"add\", uv, uv_in, tempxy, \"\\n\");\n\t\tcode.push(\"tex\", tex, uv, sample, \"<2d wrap linear>\", \"\\n\");\n\t\tcode.push(\"add\", result2, result2, tex, \"\\n\");\n\t\tcode.push(\"mul\", result2, result2, _025, \"\\n\");\n\t\tcode.push(\"mul\", tex, result1, _05, \"\\n\");\n\t\tcode.push(\"add\", result2, result2, tex, \"\\n\");\n\n\t\tcode.push(\"min\", tempf1, BL, BR, \"\\n\");\n\t\tcode.push(\"min\", tempf2, TL, TR, \"\\n\");\n\t\tcode.push(\"min\", tempf1, tempf1, tempf2, \"\\n\");\n\t\tcode.push(\"min\", lumaMin, tempf1, M, \"\\n\");\n\n\t\tcode.push(\"max\", tempf1, BL, BR, \"\\n\");\n\t\tcode.push(\"max\", tempf2, TL, TR, \"\\n\");\n\t\tcode.push(\"max\", tempf1, tempf1, tempf2, \"\\n\");\n\t\tcode.push(\"max\", lumaMax, tempf1, M, \"\\n\");\n\n\t\tcode.push(\"dp3\", tempf1, lum, result2, \"\\n\");\n\n\t\tcode.push(\"slt\", tempf2, tempf1, lumaMin, \"\\n\");\n\t\tcode.push(\"sge\", tempf3, tempf1, lumaMax, \"\\n\");\n\t\tcode.push(\"mul\", tempf2, tempf2, tempf3, \"\\n\");\n\n\t\tcode.push(\"mul\", result1, result1, tempf2, \"\\n\");\n\t\tcode.push(\"sub\", tempf2, _1, tempf2, \"\\n\");\n\t\tcode.push(\"mul\", result2, result2, tempf2, \"\\n\");\n\n\t\tcode.push(\"add\", \"oc\", result1, result2, \"\\n\");\n\n\t\t//this._data[2] = 1/numSamples;\n\n\t\treturn code.join(\" \");\n\t}\n\n\tpublic activate(stage:Stage, camera3D:Camera, depthTexture:Image2D):void\n\t{\n\t\tstage.context.setProgramConstantsFromArray(ContextGLProgramType.FRAGMENT, this._data);\n\t}\n\n\tpublic updateTextures(stage:Stage):void\n\t{\n\t\tsuper.updateTextures(stage);\n\n\t\tthis.updateBlurData();\n\t}\n\n\tprivate updateBlurData():void\n\t{\n\t\t// todo: must be normalized using view size ratio instead of texture\n\t\tif (this._rttManager) {\n\t\t\tthis._data[8] = 1/this._textureWidth;\n\t\t\tthis._data[9] = 1/this._textureHeight;\n\t\t\t//this._data[8] = 1/this._rttManager.viewWidth;\n\t\t\t//this._data[9] = 1/this._rttManager.viewHeight;\n\t\t}\n\t}\n\n\tprivate calculateStepSize():void\n\t{\n\t\tthis._realStepSize = 1;//this._stepSize > 0? this._stepSize : this._amount > Filter3DVBlurTask.MAX_AUTO_SAMPLES? this._amount/Filter3DVBlurTask.MAX_AUTO_SAMPLES : 1;\n\t}\n}",
    "import {Image2D}\t\t\t\t\t\tfrom \"awayjs-core/lib/image/Image2D\";\n\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\n\nimport {ContextGLProgramType}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLProgramType\";\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\n\nimport {Filter3DTaskBase}\t\t\t\tfrom \"../../filters/tasks/Filter3DTaskBase\";\n\nexport class Filter3DHBlurTask extends Filter3DTaskBase\n{\n\tprivate static MAX_AUTO_SAMPLES:number = 15;\n\tprivate _amount:number;\n\tprivate _data:Float32Array;\n\tprivate _stepSize:number = 1;\n\tprivate _realStepSize:number;\n\n\t/**\n\t * Creates a new Filter3DHDepthOfFFieldTask\n\t * @param amount The maximum amount of blur to apply in pixels at the most out-of-focus areas\n\t * @param stepSize The distance between samples. Set to -1 to autodetect with acceptable quality.\n\t */\n\tconstructor(amount:number, stepSize:number = -1)\n\t{\n\t\tsuper();\n\t\tthis._amount = amount;\n\t\tthis._data = new Float32Array([0, 0, 0, 1]);\n\t\tthis.stepSize = stepSize;\n\t}\n\n\tpublic get amount():number\n\t{\n\t\treturn this._amount;\n\t}\n\n\tpublic set amount(value:number)\n\t{\n\t\tif (this._amount == value)\n\t\t\treturn;\n\n\t\tthis._amount = value;\n\n\t\tthis.invalidateProgram();\n\t\tthis.updateBlurData();\n\t\tthis.calculateStepSize();\n\t}\n\n\tpublic get stepSize():number\n\t{\n\t\treturn this._stepSize;\n\t}\n\n\tpublic set stepSize(value:number)\n\t{\n\t\tif (this._stepSize == value)\n\t\t\treturn;\n\n\t\tthis._stepSize = value;\n\t\tthis.calculateStepSize();\n\t\tthis.invalidateProgram();\n\t\tthis.updateBlurData();\n\t}\n\n\tpublic getFragmentCode():string\n\t{\n\t\tvar code:string;\n\t\tvar numSamples:number = 1;\n\n\t\tcode = \"mov ft0, v0\t\\n\" +\n\t\t\t\"sub ft0.x, v0.x, fc0.x\\n\";\n\n\t\tcode += \"tex ft1, ft0, fs0 <2d,linear,clamp>\\n\";\n\n\t\tfor (var x:number = this._realStepSize; x <= this._amount; x += this._realStepSize) {\n\t\t\tcode += \"add ft0.x, ft0.x, fc0.y\\n\" +\n\t\t\t\t\"tex ft2, ft0, fs0 <2d,linear,clamp>\\n\" +\n\t\t\t\t\"add ft1, ft1, ft2\\n\";\n\t\t\t++numSamples;\n\t\t}\n\n\t\tcode += \"mul oc, ft1, fc0.z\\n\";\n\n\t\tthis._data[2] = 1/numSamples;\n\n\t\treturn code;\n\t}\n\n\tpublic activate(stage:Stage, camera3D:Camera, depthTexture:Image2D):void\n\t{\n\t\tstage.context.setProgramConstantsFromArray(ContextGLProgramType.FRAGMENT, this._data);\n\t}\n\n\tpublic updateTextures(stage:Stage):void\n\t{\n\t\tsuper.updateTextures(stage);\n\n\t\tthis.updateBlurData();\n\t}\n\n\tprivate updateBlurData():void\n\t{\n\t\t// todo: must be normalized using view size ratio instead of texture\n\t\tvar invW:number = 1/this._textureWidth;\n\n\t\tthis._data[0] = this._amount*.5*invW;\n\t\tthis._data[1] = this._realStepSize*invW;\n\t}\n\n\tprivate calculateStepSize():void\n\t{\n\t\tthis._realStepSize = this._stepSize > 0? this._stepSize : this._amount > Filter3DHBlurTask.MAX_AUTO_SAMPLES? this._amount/Filter3DHBlurTask.MAX_AUTO_SAMPLES : 1;\n\t}\n}",
    "import {Image2D}\t\t\t\t\t\tfrom \"awayjs-core/lib/image/Image2D\";\n\nimport {AbstractMethodError}\t\t\tfrom \"awayjs-core/lib/errors/AbstractMethodError\";\nimport {ByteArray}\t\t\t\t\tfrom \"awayjs-core/lib/utils/ByteArray\";\n\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\n\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\nimport {AGALMiniAssembler}\t\t\tfrom \"awayjs-stagegl/lib/aglsl/assembler/AGALMiniAssembler\";\nimport {IProgram}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/IProgram\";\n\nimport {RTTBufferManager}\t\t\t\tfrom \"../../managers/RTTBufferManager\";\nimport {ShaderRegisterCache}\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterElement}\t\tfrom \"../../shaders/ShaderRegisterElement\";\n\nexport class Filter3DTaskBase\n{\n\tpublic _registerCache:ShaderRegisterCache;\n\t\n\tpublic _positionIndex:number;\n\tpublic _uvIndex:number;;\n\tpublic _inputTextureIndex:number;\n\tpublic _uvVarying:ShaderRegisterElement;\n\t\n\tprivate _mainInputTexture:Image2D;\n\n\tpublic _scaledTextureWidth:number = -1;\n\tpublic _scaledTextureHeight:number = -1;\n\tpublic _rttManager:RTTBufferManager;\n\tpublic _textureWidth:number = -1;\n\tpublic _textureHeight:number = -1;\n\tprivate _textureDimensionsInvalid:boolean = true;\n\tprivate _program3DInvalid:boolean = true;\n\tprivate _program3D:IProgram;\n\tprivate _target:Image2D;\n\tprivate _requireDepthRender:boolean;\n\tprivate _textureScale:number = 0;\n\n\tconstructor(requireDepthRender:boolean = false)\n\t{\n\t\tthis._requireDepthRender = requireDepthRender;\n\n\t\tthis._registerCache = new ShaderRegisterCache(\"baseline\");\n\t}\n\n\t/**\n\t * The texture scale for the input of this texture. This will define the output of the previous entry in the chain\n\t */\n\tpublic get textureScale():number\n\t{\n\t\treturn this._textureScale;\n\t}\n\n\tpublic set textureScale(value:number)\n\t{\n\t\tif (this._textureScale == value)\n\t\t\treturn;\n\n\t\tthis._textureScale = value;\n\t\tthis._scaledTextureWidth = this._textureWidth >> this._textureScale;\n\t\tthis._scaledTextureHeight = this._textureHeight >> this._textureScale;\n\t\tthis._textureDimensionsInvalid = true;\n\t}\n\n\tpublic get target():Image2D\n\t{\n\t\treturn this._target;\n\t}\n\n\tpublic set target(value:Image2D)\n\t{\n\t\tthis._target = value;\n\t}\n\n\tpublic get rttManager():RTTBufferManager\n\t{\n\t\treturn this._rttManager;\n\t}\n\n\tpublic set rttManager(value:RTTBufferManager)\n\t{\n\t\tif (this._rttManager == value)\n\t\t\treturn;\n\n\t\tthis._rttManager = value;\n\t\tthis._textureDimensionsInvalid = true;\n\t}\n\n\tpublic get textureWidth():number\n\t{\n\t\treturn this._textureWidth;\n\t}\n\n\tpublic set textureWidth(value:number)\n\t{\n\t\tif (this._textureWidth == value)\n\t\t\treturn;\n\n\t\tthis._textureWidth = value;\n\t\tthis._scaledTextureWidth = this._textureWidth >> this._textureScale;\n\t\tthis._textureDimensionsInvalid = true;\n\t}\n\n\tpublic get textureHeight():number\n\t{\n\t\treturn this._textureHeight;\n\t}\n\n\tpublic set textureHeight(value:number)\n\t{\n\t\tif (this._textureHeight == value)\n\t\t\treturn;\n\n\t\tthis._textureHeight = value;\n\t\tthis._scaledTextureHeight = this._textureHeight >> this._textureScale;\n\t\tthis._textureDimensionsInvalid = true;\n\t}\n\n\tpublic getMainInputTexture(stage:Stage):Image2D\n\t{\n\t\tif (this._textureDimensionsInvalid)\n\t\t\tthis.updateTextures(stage);\n\n\t\treturn this._mainInputTexture;\n\t}\n\n\tpublic dispose():void\n\t{\n\t\tif (this._mainInputTexture)\n\t\t\tthis._mainInputTexture.dispose();\n\n\t\tif (this._program3D)\n\t\t\tthis._program3D.dispose();\n\t}\n\n\tpublic invalidateProgram():void\n\t{\n\t\tthis._program3DInvalid = true;\n\t}\n\n\tpublic updateProgram(stage:Stage):void\n\t{\n\t\tif (this._program3D)\n\t\t\tthis._program3D.dispose();\n\n\t\tthis._program3D = stage.context.createProgram();\n\n\t\tthis._registerCache.reset();\n\t\t\n\t\tvar vertexByteCode:ByteArray = (new AGALMiniAssembler().assemble(\"part vertex 1\\n\" + this.getVertexCode() + \"endpart\"))['vertex'].data;\n\t\tvar fragmentByteCode:ByteArray = (new AGALMiniAssembler().assemble(\"part fragment 1\\n\" + this.getFragmentCode() + \"endpart\"))['fragment'].data;\n\n\t\tthis._program3D.upload(vertexByteCode, fragmentByteCode);\n\t\tthis._program3DInvalid = false;\n\t}\n\n\tpublic getVertexCode():string\n\t{\n\t\tvar position:ShaderRegisterElement = this._registerCache.getFreeVertexAttribute();\n\t\tthis._positionIndex = position.index;\n\t\t\n\t\tvar uv:ShaderRegisterElement = this._registerCache.getFreeVertexAttribute();\n\t\tthis._uvIndex = uv.index;\n\t\t\n\t\tthis._uvVarying = this._registerCache.getFreeVarying();\n\t\t\n\t\tvar code:string;\n\t\t\n\t\tcode = \"mov op, \" + position + \"\\n\" + \n\t\t\t\"mov \" + this._uvVarying + \", \" + uv + \"\\n\";\n\t\t\n\t\treturn code;\n\t}\n\n\tpublic getFragmentCode():string\n\t{\n\t\tthrow new AbstractMethodError();\n\t}\n\n\tpublic updateTextures(stage:Stage):void\n\t{\n\t\tif (this._mainInputTexture)\n\t\t\tthis._mainInputTexture.dispose();\n\n\t\tthis._mainInputTexture = new Image2D(this._scaledTextureWidth, this._scaledTextureHeight);\n\n\t\tthis._textureDimensionsInvalid = false;\n\t}\n\n\tpublic getProgram(stage:Stage):IProgram\n\t{\n\t\tif (this._program3DInvalid)\n\t\t\tthis.updateProgram(stage);\n\n\t\treturn this._program3D;\n\t}\n\n\tpublic activate(stage:Stage, camera:Camera, depthTexture:Image2D):void\n\t{\n\t}\n\n\tpublic deactivate(stage:Stage):void\n\t{\n\t}\n\n\tpublic get requireDepthRender():boolean\n\t{\n\t\treturn this._requireDepthRender;\n\t}\n\n}",
    "import {Image2D}\t\t\t\t\t\tfrom \"awayjs-core/lib/image/Image2D\";\n\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\n\nimport {ContextGLProgramType}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLProgramType\";\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\n\nimport {Filter3DTaskBase}\t\t\t\tfrom \"../../filters/tasks/Filter3DTaskBase\";\n\nexport class Filter3DVBlurTask extends Filter3DTaskBase\n{\n\tprivate static MAX_AUTO_SAMPLES:number = 15;\n\tprivate _amount:number;\n\tprivate _data:Float32Array;\n\tprivate _stepSize:number = 1;\n\tprivate _realStepSize:number;\n\t\n\t/**\n\t *\n\t * @param amount\n\t * @param stepSize The distance between samples. Set to -1 to autodetect with acceptable quality.\n\t */\n\tconstructor(amount:number, stepSize:number = -1)\n\t{\n\t\tsuper();\n\t\tthis._amount = amount;\n\t\tthis._data =  new Float32Array([0, 0, 0, 1]);\n\t\tthis.stepSize = stepSize;\n\t}\n\n\tpublic get amount():number\n\t{\n\t\treturn this._amount;\n\t}\n\n\tpublic set amount(value:number)\n\t{\n\t\tif (this._amount == value)\n\t\t\treturn;\n\n\t\tthis._amount = value;\n\n\t\tthis.invalidateProgram();\n\t\tthis.updateBlurData();\n\t}\n\n\tpublic get stepSize():number\n\t{\n\t\treturn this._stepSize;\n\t}\n\n\tpublic set stepSize(value:number)\n\t{\n\t\tif (this._stepSize == value)\n\t\t\treturn;\n\t\tthis._stepSize = value;\n\t\tthis.calculateStepSize();\n\t\tthis.invalidateProgram();\n\t\tthis.updateBlurData();\n\t}\n\n\tpublic getFragmentCode():string\n\t{\n\t\tvar code:string;\n\t\tvar numSamples:number = 1;\n\n\t\tcode = \"mov ft0, v0\t\\n\" +\n\t\t\t\"sub ft0.y, v0.y, fc0.x\\n\";\n\n\t\tcode += \"tex ft1, ft0, fs0 <2d,linear,clamp>\\n\";\n\n\t\tfor (var x:number = this._realStepSize; x <= this._amount; x += this._realStepSize) {\n\t\t\tcode += \"add ft0.y, ft0.y, fc0.y\\n\";\n\t\t\tcode += \"tex ft2, ft0, fs0 <2d,linear,clamp>\\n\" +\n\t\t\t\t\"add ft1, ft1, ft2\\n\";\n\t\t\t++numSamples;\n\t\t}\n\n\t\tcode += \"mul oc, ft1, fc0.z\\n\";\n\n\t\tthis._data[2] = 1/numSamples;\n\n\t\treturn code;\n\t}\n\n\tpublic activate(stage:Stage, camera3D:Camera, depthTexture:Image2D):void\n\t{\n\t\tstage.context.setProgramConstantsFromArray(ContextGLProgramType.FRAGMENT, this._data);\n\t}\n\n\tpublic updateTextures(stage:Stage):void\n\t{\n\t\tsuper.updateTextures(stage);\n\n\t\tthis.updateBlurData();\n\t}\n\n\tprivate updateBlurData():void\n\t{\n\t\t// todo: must be normalized using view size ratio instead of texture\n\t\tvar invH:number = 1/this._textureHeight;\n\n\t\tthis._data[0] = this._amount*.5*invH;\n\t\tthis._data[1] = this._realStepSize*invH;\n\t}\n\n\tprivate calculateStepSize():void\n\t{\n\t\tthis._realStepSize = this._stepSize > 0? this._stepSize : this._amount > Filter3DVBlurTask.MAX_AUTO_SAMPLES? this._amount/Filter3DVBlurTask.MAX_AUTO_SAMPLES : 1;\n\t}\n}",
    "export {Filter3DCompositeTask}\t\t\tfrom \"./filters/tasks/Filter3DCompositeTask\";\nexport {Filter3DFXAATask}\t\t\t\tfrom \"./filters/tasks/Filter3DFXAATask\";\nexport {Filter3DHBlurTask}\t\t\t\tfrom \"./filters/tasks/Filter3DHBlurTask\";\nexport {Filter3DTaskBase}\t\t\t\tfrom \"./filters/tasks/Filter3DTaskBase\";\nexport {Filter3DVBlurTask}\t\t\t\tfrom \"./filters/tasks/Filter3DVBlurTask\";\nexport {BlurFilter3D}\t\t\t\t\tfrom \"./filters/BlurFilter3D\";\nexport {CompositeFilter3D}\t\t\t\tfrom \"./filters/CompositeFilter3D\";\nexport {Filter3DBase}\t\t\t\t\tfrom \"./filters/Filter3DBase\";\nexport {FXAAFilter3D}\t\t\t\t\tfrom \"./filters/FXAAFilter3D\";",
    "import {Rectangle}\t\t\t\t\tfrom \"awayjs-core/lib/geom/Rectangle\";\nimport {EventDispatcher}\t\t\t\tfrom \"awayjs-core/lib/events/EventDispatcher\";\nimport {ImageUtils}\t\t\t\t\tfrom \"awayjs-core/lib/utils/ImageUtils\";\n\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\nimport {IContextGL}\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/IContextGL\";\nimport {IIndexBuffer}\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/IIndexBuffer\";\nimport {IVertexBuffer}\t\t\t\tfrom \"awayjs-stagegl/lib/base/IVertexBuffer\";\nimport {RTTEvent}\t\t\t\t\t\tfrom \"../events/RTTEvent\";\n\nexport class RTTBufferManager extends EventDispatcher\n{\n\tprivate static _instances:Array<RTTBufferManagerVO>;\n\n\tprivate _renderToTextureVertexBuffer:IVertexBuffer;\n\tprivate _renderToScreenVertexBuffer:IVertexBuffer;\n\n\tprivate _indexBuffer:IIndexBuffer;\n\tprivate _stage:Stage;\n\tprivate _viewWidth:number = -1;\n\tprivate _viewHeight:number = -1;\n\tprivate _textureWidth:number = -1;\n\tprivate _textureHeight:number = -1;\n\tprivate _renderToTextureRect:Rectangle;\n\tprivate _buffersInvalid:boolean = true;\n\n\tprivate _textureRatioX:number;\n\tprivate _textureRatioY:number;\n\n\tconstructor(stage:Stage)\n\t{\n\t\tsuper();\n\n\t\tthis._renderToTextureRect = new Rectangle();\n\n\t\tthis._stage = stage;\n\n\t}\n\n\tpublic static getInstance(stage:Stage):RTTBufferManager\n\t{\n\t\tif (!stage)\n\t\t\tthrow new Error(\"stage key cannot be null!\");\n\n\t\tif (RTTBufferManager._instances == null)\n\t\t\tRTTBufferManager._instances = new Array<RTTBufferManagerVO>();\n\n\t\tvar rttBufferManager:RTTBufferManager = RTTBufferManager.getRTTBufferManagerFromStage(stage);\n\n\t\tif (rttBufferManager == null) {\n\t\t\trttBufferManager = new RTTBufferManager(stage);\n\n\t\t\tvar vo:RTTBufferManagerVO = new RTTBufferManagerVO();\n\n\t\t\tvo.stage3d = stage;\n\t\t\tvo.rttbfm = rttBufferManager;\n\n\t\t\tRTTBufferManager._instances.push(vo);\n\t\t}\n\n\t\treturn rttBufferManager;\n\n\t}\n\n\tprivate static getRTTBufferManagerFromStage(stage:Stage):RTTBufferManager\n\t{\n\n\t\tvar l:number = RTTBufferManager._instances.length;\n\t\tvar r:RTTBufferManagerVO;\n\n\t\tfor (var c:number = 0; c < l; c++) {\n\t\t\tr = RTTBufferManager._instances[c];\n\n\t\t\tif (r.stage3d === stage)\n\t\t\t\treturn r.rttbfm;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate static deleteRTTBufferManager(stage:Stage):void\n\t{\n\t\tvar l:number = RTTBufferManager._instances.length;\n\t\tvar r:RTTBufferManagerVO;\n\n\t\tfor (var c:number = 0; c < l; c++) {\n\t\t\tr = RTTBufferManager._instances[c];\n\n\t\t\tif (r.stage3d === stage) {\n\t\t\t\tRTTBufferManager._instances.splice(c, 1);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic get textureRatioX():number\n\t{\n\t\tif (this._buffersInvalid)\n\t\t\tthis.updateRTTBuffers();\n\n\t\treturn this._textureRatioX;\n\t}\n\n\tpublic get textureRatioY():number\n\t{\n\t\tif (this._buffersInvalid)\n\t\t\tthis.updateRTTBuffers();\n\n\t\treturn this._textureRatioY;\n\t}\n\n\tpublic get viewWidth():number\n\t{\n\t\treturn this._viewWidth;\n\t}\n\n\tpublic set viewWidth(value:number)\n\t{\n\t\tif (value == this._viewWidth)\n\t\t\treturn;\n\n\t\tthis._viewWidth = value;\n\n\t\tthis._buffersInvalid = true;\n\n\t\tthis._textureWidth = ImageUtils.getBestPowerOf2(this._viewWidth);\n\n\t\tif (this._textureWidth > this._viewWidth) {\n\t\t\tthis._renderToTextureRect.x = Math.floor((this._textureWidth - this._viewWidth)*.5);\n\t\t\tthis._renderToTextureRect.width = this._viewWidth;\n\t\t} else {\n\t\t\tthis._renderToTextureRect.x = 0;\n\t\t\tthis._renderToTextureRect.width = this._textureWidth;\n\t\t}\n\n\t\tthis.dispatchEvent(new RTTEvent(RTTEvent.RESIZE, this));\n\t}\n\n\tpublic get viewHeight():number\n\t{\n\t\treturn this._viewHeight;\n\t}\n\n\tpublic set viewHeight(value:number)\n\t{\n\t\tif (value == this._viewHeight)\n\t\t\treturn;\n\n\t\tthis._viewHeight = value;\n\n\t\tthis._buffersInvalid = true;\n\n\t\tthis._textureHeight = ImageUtils.getBestPowerOf2(this._viewHeight);\n\n\t\tif (this._textureHeight > this._viewHeight) {\n\t\t\tthis._renderToTextureRect.y = Math.floor((this._textureHeight - this._viewHeight)*.5);\n\t\t\tthis._renderToTextureRect.height = this._viewHeight;\n\t\t} else {\n\t\t\tthis._renderToTextureRect.y = 0;\n\t\t\tthis._renderToTextureRect.height = this._textureHeight;\n\t\t}\n\n\t\tthis.dispatchEvent(new RTTEvent(RTTEvent.RESIZE, this));\n\t}\n\n\tpublic get renderToTextureVertexBuffer():IVertexBuffer\n\t{\n\t\tif (this._buffersInvalid)\n\t\t\tthis.updateRTTBuffers();\n\n\t\treturn this._renderToTextureVertexBuffer;\n\t}\n\n\tpublic get renderToScreenVertexBuffer():IVertexBuffer\n\t{\n\t\tif (this._buffersInvalid)\n\t\t\tthis.updateRTTBuffers();\n\n\t\treturn this._renderToScreenVertexBuffer;\n\n\t}\n\n\tpublic get indexBuffer():IIndexBuffer\n\t{\n\t\treturn this._indexBuffer;\n\t}\n\n\tpublic get renderToTextureRect():Rectangle\n\t{\n\t\tif (this._buffersInvalid)\n\t\t\tthis.updateRTTBuffers();\n\n\t\treturn this._renderToTextureRect;\n\t}\n\n\tpublic get textureWidth():number\n\t{\n\t\treturn this._textureWidth;\n\t}\n\n\tpublic get textureHeight():number\n\t{\n\t\treturn this._textureHeight;\n\t}\n\n\tpublic dispose():void\n\t{\n\t\tRTTBufferManager.deleteRTTBufferManager(this._stage);\n\n\t\tif (this._indexBuffer) {\n\t\t\tthis._indexBuffer.dispose();\n\t\t\tthis._renderToScreenVertexBuffer.dispose();\n\t\t\tthis._renderToTextureVertexBuffer.dispose();\n\t\t\tthis._renderToScreenVertexBuffer = null;\n\t\t\tthis._renderToTextureVertexBuffer = null;\n\t\t\tthis._indexBuffer = null;\n\t\t}\n\t}\n\n\t// todo: place all this in a separate model, since it's used all over the place\n\t// maybe it even has a place in the core (together with screenRect etc)?\n\t// needs to be stored per view of course\n\tprivate updateRTTBuffers():void\n\t{\n\t\tvar context:IContextGL = this._stage.context;\n\t\tvar textureVerts:number[];\n\t\tvar screenVerts:number[];\n\n\t\tvar x:number;\n\t\tvar y:number;\n\n\t\tif (this._renderToTextureVertexBuffer == null)\n\t\t\tthis._renderToTextureVertexBuffer = context.createVertexBuffer(4, 20);\n\n\t\tif (this._renderToScreenVertexBuffer == null)\n\t\t\tthis._renderToScreenVertexBuffer = context.createVertexBuffer(4, 20);\n\n\t\tif (!this._indexBuffer) {\n\t\t\tthis._indexBuffer = context.createIndexBuffer(6);\n\n\t\t\tthis._indexBuffer.uploadFromArray([2, 1, 0, 3, 2, 0], 0, 6);\n\t\t}\n\n\t\tthis._textureRatioX = x = Math.min(this._viewWidth/this._textureWidth, 1);\n\t\tthis._textureRatioY = y = Math.min(this._viewHeight/this._textureHeight, 1);\n\n\t\tvar u1:number = (1 - x)*.5;\n\t\tvar u2:number = (x + 1)*.5;\n\t\tvar v1:number = (1 - y)*.5;\n\t\tvar v2:number = (y + 1)*.5;\n\n\t\t// last element contains indices for data per vertex that can be passed to the vertex shader if necessary (ie: frustum corners for deferred rendering)\n\t\ttextureVerts = [    -x, -y, u1, v1, 0, x, -y, u2, v1, 1, x, y, u2, v2, 2, -x, y, u1, v2, 3 ];\n\n\t\tscreenVerts = [     -1, -1, u1, v1, 0, 1, -1, u2, v1, 1, 1, 1, u2, v2, 2, -1, 1, u1, v2, 3 ];\n\n\t\tthis._renderToTextureVertexBuffer.uploadFromArray(textureVerts, 0, 4);\n\t\tthis._renderToScreenVertexBuffer.uploadFromArray(screenVerts, 0, 4);\n\n\t\tthis._buffersInvalid = false;\n\t}\n}\n\nclass RTTBufferManagerVO\n{\n\tpublic stage3d:Stage;\n\n\tpublic rttbfm:RTTBufferManager;\n}",
    "export {RTTBufferManager}\t\t\t\tfrom \"./managers/RTTBufferManager\";",
    "import {AttributesBuffer}\t\t\t\tfrom \"awayjs-core/lib/attributes/AttributesBuffer\";\nimport {AssetEvent}\t\t\t\t\tfrom \"awayjs-core/lib/events/AssetEvent\";\nimport {Rectangle}\t\t\t\t\tfrom \"awayjs-core/lib/geom/Rectangle\";\n\nimport {TriangleElements}\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\nimport {Billboard}\t\t\t\t\tfrom \"awayjs-display/lib/display/Billboard\";\nimport {DefaultMaterialManager}\t\tfrom \"awayjs-display/lib/managers/DefaultMaterialManager\";\nimport {TextureBase}\t\t\t\t\tfrom \"awayjs-display/lib/textures/TextureBase\";\n\nimport {RendererBase}\t\t\t\t\tfrom \"../RendererBase\";\nimport {GL_ElementsBase}\t\t\t\tfrom \"../elements/GL_ElementsBase\";\nimport {GL_RenderableBase}\t\t\tfrom \"../renderables/GL_RenderableBase\";\nimport {GL_SurfaceBase}\t\t\t\tfrom \"../surfaces/GL_SurfaceBase\";\n\n/**\n * @class away.pool.RenderableListItem\n */\nexport class GL_BillboardRenderable extends GL_RenderableBase\n{\n\tprivate static _samplerElements:Object = new Object();\n\n\t/**\n\t *\n\t */\n\tprivate _billboard:Billboard;\n\n\tpublic _id:number;\n\n\t/**\n\t * //TODO\n\t *\n\t * @param pool\n\t * @param billboard\n\t */\n\tconstructor(billboard:Billboard, renderer:RendererBase)\n\t{\n\t\tsuper(billboard, renderer);\n\n\t\tthis._billboard = billboard;\n\t}\n\n\tpublic onClear(event:AssetEvent):void\n\t{\n\t\tsuper.onClear(event);\n\n\t\tthis._billboard = null;\n\t}\n\n\t/**\n\t * //TODO\n\t *\n\t * @returns {away.base.TriangleElements}\n\t */\n\tpublic _pGetElements():GL_ElementsBase\n\t{\n\t\tvar texture:TextureBase = this._billboard.material.getTextureAt(0);\n\n\t\tvar id:number = -1;\n\n\t\tif (texture)\n\t\t\tid = ((this.renderable.style? this.renderable.style.getSamplerAt(texture) || texture.getSamplerAt(0) : texture.getSamplerAt(0)) || DefaultMaterialManager.getDefaultSampler()).id;\n\n\t\tthis._id = id;\n\n\t\tvar elements:TriangleElements = GL_BillboardRenderable._samplerElements[id];\n\n\t\tvar width:number = this._billboard.billboardWidth;\n\t\tvar height:number = this._billboard.billboardHeight;\n\t\tvar billboardRect:Rectangle = this._billboard.billboardRect;\n\n\t\tif (!elements) {\n\t\t\telements = GL_BillboardRenderable._samplerElements[id] = new TriangleElements(new AttributesBuffer(11, 4));\n\t\t\telements.autoDeriveNormals = false;\n\t\t\telements.autoDeriveTangents = false;\n\t\t\telements.setIndices(Array<number>(0, 1, 2, 0, 2, 3));\n\t\t\telements.setPositions(Array<number>(-billboardRect.x, height-billboardRect.y, 0, width-billboardRect.x, height-billboardRect.y, 0, width-billboardRect.x, -billboardRect.y, 0, -billboardRect.x, -billboardRect.y, 0));\n\t\t\telements.setNormals(Array<number>(1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0));\n\t\t\telements.setTangents(Array<number>(0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1));\n\t\t\telements.setUVs(Array<number>(0, 0, 1, 0, 1, 1, 0, 1));\n\t\t} else {\n\t\t\telements.setPositions(Array<number>(-billboardRect.x, height-billboardRect.y, 0, width-billboardRect.x, height-billboardRect.y, 0, width-billboardRect.x, -billboardRect.y, 0, -billboardRect.x, -billboardRect.y, 0));\n\t\t}\n\n\t\treturn <GL_ElementsBase> this._stage.getAbstraction(elements);\n\t}\n\n\tpublic _pGetSurface():GL_SurfaceBase\n\t{\n\t\treturn this._renderer.getSurfacePool(this.elementsGL).getAbstraction(this._billboard.material || DefaultMaterialManager.getDefaultMaterial(this.renderable));\n\t}\n\n}",
    "import {AssetEvent}\t\t\t\t\tfrom \"awayjs-core/lib/events/AssetEvent\";\n\nimport {Graphic}\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphic\";\nimport {DefaultMaterialManager}\t\tfrom \"awayjs-display/lib/managers/DefaultMaterialManager\";\n\nimport {RendererBase}\t\t\t\t\tfrom \"../RendererBase\";\nimport {AnimatorBase}\t\t\t\t\tfrom \"../animators/AnimatorBase\";\nimport {GL_ElementsBase}\t\t\t\tfrom \"../elements/GL_ElementsBase\";\nimport {GL_RenderableBase}\t\t\tfrom \"../renderables/GL_RenderableBase\";\nimport {GL_SurfaceBase}\t\t\t\tfrom \"../surfaces/GL_SurfaceBase\";\n\n/**\n * @class away.pool.GL_GraphicRenderable\n */\nexport class GL_GraphicRenderable extends GL_RenderableBase\n{\n\t/**\n\t *\n\t */\n\tpublic graphic:Graphic;\n\n\n\t/**\n\t * //TODO\n\t *\n\t * @param pool\n\t * @param graphic\n\t * @param level\n\t * @param indexOffset\n\t */\n\tconstructor(graphic:Graphic, renderer:RendererBase)\n\t{\n\t\tsuper(graphic, renderer);\n\n\t\tthis.graphic = graphic;\n\t}\n\n\tpublic onClear(event:AssetEvent):void\n\t{\n\t\tsuper.onClear(event);\n\n\t\tthis.graphic = null;\n\t}\n\n\t/**\n\t *\n\t * @returns {ElementsBase}\n\t * @protected\n\t */\n\tpublic _pGetElements():GL_ElementsBase\n\t{\n\t\tthis._offset = this.graphic.offset;\n\t\tthis._count = this.graphic.count;\n\n\t\t\n\t\treturn <GL_ElementsBase> this._stage.getAbstraction((this.renderable.animator)? (<AnimatorBase> this.renderable.animator).getRenderableElements(this, this.graphic.elements) : this.graphic.elements);\n\t}\n\n\n\tpublic _pGetSurface():GL_SurfaceBase\n\t{\n\t\treturn this._renderer.getSurfacePool(this.elementsGL).getAbstraction(this.graphic.material || DefaultMaterialManager.getDefaultMaterial(this.renderable));\n\t}\n}",
    "import {AssetEvent}\t\t\t\t\tfrom \"awayjs-core/lib/events/AssetEvent\";\nimport {Vector3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {LineElements}\t\t\t\t\tfrom \"awayjs-display/lib/graphics/LineElements\";\nimport {LineSegment}\t\t\t\t\tfrom \"awayjs-display/lib/display/LineSegment\";\nimport {DefaultMaterialManager}\t\tfrom \"awayjs-display/lib/managers/DefaultMaterialManager\";\n\nimport {RendererBase}\t\t\t\t\tfrom \"../RendererBase\";\nimport {GL_ElementsBase}\t\t\t\tfrom \"../elements/GL_ElementsBase\";\nimport {GL_RenderableBase}\t\t\tfrom \"../renderables/GL_RenderableBase\";\nimport {GL_SurfaceBase}\t\t\t\tfrom \"../surfaces/GL_SurfaceBase\";\n\n/**\n * @class away.pool.GL_LineSegmentRenderable\n */\nexport class GL_LineSegmentRenderable extends GL_RenderableBase\n{\n\tprivate static _lineGraphics:Object = new Object();\n\n\t/**\n\t *\n\t */\n\tprivate _lineSegment:LineSegment;\n\n\t/**\n\t * //TODO\n\t *\n\t * @param pool\n\t * @param graphic\n\t * @param level\n\t * @param dataOffset\n\t */\n\tconstructor(lineSegment:LineSegment, renderer:RendererBase)\n\t{\n\t\tsuper(lineSegment, renderer);\n\n\t\tthis._lineSegment = lineSegment;\n\t}\n\n\tpublic onClear(event:AssetEvent):void\n\t{\n\t\tsuper.onClear(event);\n\n\t\tthis._lineSegment = null;\n\t}\n\n\t/**\n\t * //TODO\n\t *\n\t * @returns {base.LineElements}\n\t * @protected\n\t */\n\tpublic _pGetElements():GL_ElementsBase\n\t{\n\t\tvar elements:LineElements = GL_LineSegmentRenderable._lineGraphics[this._lineSegment.id] || (GL_LineSegmentRenderable._lineGraphics[this._lineSegment.id] = new LineElements());\n\n\t\tvar start:Vector3D = this._lineSegment.startPostion;\n\t\tvar end:Vector3D = this._lineSegment.endPosition;\n\n\t\tvar positions:Float32Array = new Float32Array(6);\n\t\tvar thickness:Float32Array = new Float32Array(1);\n\n\t\tpositions[0] = start.x;\n\t\tpositions[1] = start.y;\n\t\tpositions[2] = start.z;\n\t\tpositions[3] = end.x;\n\t\tpositions[4] = end.y;\n\t\tpositions[5] = end.z;\n\t\tthickness[0] = this._lineSegment.thickness;\n\n\t\telements.setPositions(positions);\n\t\telements.setThickness(thickness);\n\n\t\treturn <GL_ElementsBase> this._stage.getAbstraction(elements);\n\t}\n\n\tpublic _pGetSurface():GL_SurfaceBase\n\t{\n\t\treturn this._renderer.getSurfacePool(this.elementsGL).getAbstraction(this._lineSegment.material || DefaultMaterialManager.getDefaultMaterial(this.renderable));\n\t}\n\n\t/**\n\t * //TODO\n\t *\n\t * @param pool\n\t * @param renderable\n\t * @param level\n\t * @param indexOffset\n\t * @returns {away.pool.LineSubSpriteRenderable}\n\t * @private\n\t */\n\tpublic _pGetOverflowRenderable(indexOffset:number):GL_RenderableBase\n\t{\n\t\treturn new GL_LineSegmentRenderable(<LineSegment> this.renderable, this._renderer);\n\t}\n}",
    "import {AbstractMethodError}\t\t\tfrom \"awayjs-core/lib/errors/AbstractMethodError\";\nimport {AssetEvent}\t\t\t\t\tfrom \"awayjs-core/lib/events/AssetEvent\";\nimport {Matrix}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix\";\nimport {Matrix3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\nimport {ImageBase}\t\t\t\t\tfrom \"awayjs-core/lib/image/ImageBase\";\nimport {SamplerBase}\t\t\t\t\tfrom \"awayjs-core/lib/image/SamplerBase\";\nimport {AbstractionBase}\t\t\t\tfrom \"awayjs-core/lib/library/AbstractionBase\";\n\nimport {IRenderable}\t\t\t\t\tfrom \"awayjs-display/lib/base/IRenderable\";\nimport {ISurface}\t\t\t\t\t\tfrom \"awayjs-display/lib/base/ISurface\";\nimport {ElementsBase}\t\t\t\t\tfrom \"awayjs-display/lib/graphics/ElementsBase\";\nimport {IEntity}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/IEntity\";\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\nimport {RenderableEvent}\t\t\t\tfrom \"awayjs-display/lib/events/RenderableEvent\";\nimport {DefaultMaterialManager}\t\tfrom \"awayjs-display/lib/managers/DefaultMaterialManager\";\nimport {TextureBase}\t\t\t\t\tfrom \"awayjs-display/lib/textures/TextureBase\";\n\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\nimport {GL_ImageBase}\t\t\t\t\tfrom \"awayjs-stagegl/lib/image/GL_ImageBase\";\nimport {GL_SamplerBase}\t\t\t\tfrom \"awayjs-stagegl/lib/image/GL_SamplerBase\";\n\nimport {RendererBase}\t\t\t\t\tfrom \"../RendererBase\";\nimport {GL_SurfaceBase}\t\t\t\tfrom \"../surfaces/GL_SurfaceBase\";\nimport {IPass}\t\t\t\t\t\tfrom \"../surfaces/passes/IPass\";\nimport {GL_ElementsBase}\t\t\t\tfrom \"../elements/GL_ElementsBase\";\n\n/**\n * @class RenderableListItem\n */\nexport class GL_RenderableBase extends AbstractionBase\n{\n\tprivate _onInvalidateSurfaceDelegate:(event:RenderableEvent) => void;\n\tprivate _onInvalidateElementsDelegate:(event:RenderableEvent) => void;\n\n\tpublic _count:number = 0;\n\tpublic _offset:number = 0;\n\tprivate _elementsGL:GL_ElementsBase;\n\tprivate _surfaceGL:GL_SurfaceBase;\n\tprivate _elementsDirty:boolean = true;\n\tprivate _surfaceDirty:boolean = true;\n\n\tpublic JOINT_INDEX_FORMAT:string;\n\tpublic JOINT_WEIGHT_FORMAT:string;\n\n\t/**\n\t *\n\t */\n\tpublic _renderer:RendererBase;\n\n\tpublic _stage:Stage;\n\n\t/**\n\t *\n\t */\n\tpublic next:GL_RenderableBase;\n\n\tpublic id:number;\n\n\t/**\n\t *\n\t */\n\tpublic surfaceID:number;\n\n\t/**\n\t *\n\t */\n\tpublic renderOrderId:number;\n\n\t/**\n\t *\n\t */\n\tpublic zIndex:number;\n\n\t/**\n\t *\n\t */\n\tpublic maskId:number;\n\n\t/**\n\t *\n\t */\n\tpublic masksConfig:Array<Array<number>>;\n\n\t/**\n\t *\n\t */\n\tpublic cascaded:boolean;\n\n\t/**\n\t *\n\t */\n\tpublic renderSceneTransform:Matrix3D;\n\n\t/**\n\t *\n\t */\n\tpublic sourceEntity:IEntity;\n\n\t/**\n\t *\n\t */\n\tpublic renderable:IRenderable;\n\n\tpublic uvMatrix:Matrix;\n\t\n\tpublic images:Array<GL_ImageBase> = new Array<GL_ImageBase>();\n\n\tpublic samplers:Array<GL_SamplerBase> = new Array<GL_SamplerBase>();\n\n\tpublic get elementsGL():GL_ElementsBase\n\t{\n\t\tif (this._elementsDirty)\n\t\t\tthis._updateElements();\n\n\t\treturn this._elementsGL;\n\t}\n\n\tpublic get surfaceGL():GL_SurfaceBase\n\t{\n\t\tif (this._surfaceDirty)\n\t\t\tthis._updateSurface();\n\n\t\treturn this._surfaceGL;\n\t}\n\n\n\t/**\n\t *\n\t * @param renderable\n\t * @param sourceEntity\n\t * @param surface\n\t * @param renderer\n\t */\n\tconstructor(renderable:IRenderable, renderer:RendererBase)\n\t{\n\t\tsuper(renderable, renderer);\n\n\t\tthis._onInvalidateSurfaceDelegate = (event:RenderableEvent) => this._onInvalidateSurface(event);\n\t\tthis._onInvalidateElementsDelegate = (event:RenderableEvent) => this.onInvalidateElements(event);\n\n\t\t//store a reference to the pool for later disposal\n\t\tthis._renderer = renderer;\n\t\tthis._stage = renderer.stage;\n\n\t\tthis.renderable = renderable;\n\n\t\tthis.renderable.addEventListener(RenderableEvent.INVALIDATE_SURFACE, this._onInvalidateSurfaceDelegate);\n\t\tthis.renderable.addEventListener(RenderableEvent.INVALIDATE_ELEMENTS, this._onInvalidateElementsDelegate);\n\t}\n\n\tpublic onClear(event:AssetEvent):void\n\t{\n\t\tsuper.onClear(event);\n\n\t\tthis.next = null;\n\t\tthis.masksConfig = null;\n\t\tthis.renderSceneTransform = null;\n\n\t\tthis._renderer = null;\n\t\tthis._stage = null;\n\t\tthis.sourceEntity = null;\n\n\t\tthis.renderable.removeEventListener(RenderableEvent.INVALIDATE_SURFACE, this._onInvalidateSurfaceDelegate);\n\t\tthis.renderable.removeEventListener(RenderableEvent.INVALIDATE_ELEMENTS, this._onInvalidateElementsDelegate);\n\t\tthis.renderable = null;\n\n\t\tthis._surfaceGL.usages--;\n\n\t\tif (!this._surfaceGL.usages)\n\t\t\tthis._surfaceGL.onClear(new AssetEvent(AssetEvent.CLEAR, this._surfaceGL.surface));\n\n\t\tthis._surfaceGL = null;\n\t\tthis._elementsGL = null;\n\t}\n\n\tpublic onInvalidateElements(event:RenderableEvent):void\n\t{\n\t\tthis._elementsDirty = true;\n\t}\n\n\tprivate _onInvalidateSurface(event:RenderableEvent):void\n\t{\n\t\tthis._surfaceDirty = true;\n\t}\n\n\tpublic _pGetElements():GL_ElementsBase\n\t{\n\t\tthrow new AbstractMethodError();\n\t}\n\n\tpublic _pGetSurface():GL_SurfaceBase\n\t{\n\t\tthrow new AbstractMethodError();\n\t}\n\n\t/**\n\t * Renders an object to the current render target.\n\t *\n\t * @private\n\t */\n\tpublic _iRender(pass:IPass, camera:Camera, viewProjection:Matrix3D):void\n\t{\n\t\tthis._setRenderState(pass, camera, viewProjection);\n\n\t\tthis._elementsGL.draw(this, pass.shader, camera, viewProjection, this._count, this._offset)\n\t}\n\n\tpublic _setRenderState(pass:IPass, camera:Camera, viewProjection:Matrix3D):void\n\t{\n\t\tif (this._elementsDirty)\n\t\t\tthis._updateElements();\n\n\t\tpass._setRenderState(this, camera, viewProjection);\n\t\t\n\t\tif (pass.shader.activeElements != this._elementsGL) {\n\t\t\tpass.shader.activeElements = this._elementsGL;\n\t\t\tthis._elementsGL._setRenderState(this, pass.shader, camera, viewProjection);\n\t\t}\n\t}\n\n\t/**\n\t * //TODO\n\t *\n\t * @private\n\t */\n\tprivate _updateElements():void\n\t{\n\t\tthis._elementsGL = this._pGetElements();\n\n\t\tthis._elementsDirty = false;\n\t}\n\n\tprivate _updateSurface():void\n\t{\n\t\tvar surfaceGL:GL_SurfaceBase = this._pGetSurface();\n\n\t\tif (this._surfaceGL != surfaceGL) {\n\n\t\t\tif (this._surfaceGL) {\n\t\t\t\tthis._surfaceGL.usages--;\n\n\t\t\t\t//dispose current surfaceGL object\n\t\t\t\tif (!this._surfaceGL.usages)\n\t\t\t\t\tthis._surfaceGL.onClear(new AssetEvent(AssetEvent.CLEAR, this._surfaceGL.surface));\n\t\t\t}\n\n\t\t\tthis._surfaceGL = surfaceGL;\n\n\t\t\tthis._surfaceGL.usages++;\n\t\t}\n\n\t\t//create a cache of image & sampler objects for the renderable\n\t\tvar numImages:number = surfaceGL.numImages;\n\n\t\tthis.images.length = numImages;\n\t\tthis.samplers.length = numImages;\n\t\tthis.uvMatrix = this.renderable.style? this.renderable.style.uvMatrix : this._surfaceGL.surface.style? this._surfaceGL.surface.style.uvMatrix : null;\n\n\t\tvar numTextures:number = this._surfaceGL.surface.getNumTextures();\n\t\tvar texture:TextureBase;\n\t\tvar numImages:number;\n\t\tvar image:ImageBase;\n\t\tvar sampler:SamplerBase;\n\t\tvar index:number;\n\n\t\tfor (var i:number = 0; i < numTextures; i++) {\n\t\t\ttexture = this._surfaceGL.surface.getTextureAt(i);\n\t\t\tnumImages = texture.getNumImages();\n\t\t\tfor (var j:number = 0; j < numImages; j++) {\n\t\t\t\tindex = surfaceGL.getImageIndex(texture, j);\n\t\t\t\timage =  this.renderable.style? this.renderable.style.getImageAt(texture, j) : null;\n\t\t\t\tthis.images[index] = image? <GL_ImageBase> this._stage.getAbstraction(image) : null;\n\t\t\t\tsampler = this.renderable.style? this.renderable.style.getSamplerAt(texture, j) : null;\n\t\t\t\tthis.samplers[index] = sampler? <GL_SamplerBase> this._stage.getAbstraction(sampler) : null;\n\t\t\t}\n\t\t}\n\n\t\tthis._surfaceDirty = false;\n\t}\n}",
    "import {AttributesBuffer}\t\t\t\tfrom \"awayjs-core/lib/attributes/AttributesBuffer\";\nimport {Matrix3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\nimport {Vector3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {ISurface}\t\t\t\t\t\tfrom \"awayjs-display/lib/base/ISurface\";\nimport {ElementsBase}\t\t\t\t\tfrom \"awayjs-display/lib/graphics/ElementsBase\";\nimport {TriangleElements}\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\nimport {Skybox}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Skybox\";\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\n\nimport {IContextGL}\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/IContextGL\";\nimport {ContextGLProgramType}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLProgramType\";\n\nimport {RendererBase}\t\t\t\t\tfrom \"../RendererBase\";\nimport {ShaderBase}\t\t\t\t\tfrom \"../shaders/ShaderBase\";\nimport {ShaderRegisterCache}\t\t\tfrom \"../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterData}\t\t\tfrom \"../shaders/ShaderRegisterData\";\nimport {ShaderRegisterElement}\t\tfrom \"../shaders/ShaderRegisterElement\";\nimport {GL_RenderableBase}\t\t\tfrom \"../renderables/GL_RenderableBase\";\nimport {GL_SurfaceBase}\t\t\t\tfrom \"../surfaces/GL_SurfaceBase\";\nimport {IPass}\t\t\t\t\t\tfrom \"../surfaces/passes/IPass\";\nimport {GL_SkyboxElements}\t\t\tfrom \"../elements/GL_SkyboxElements\";\n\n/**\n * @class away.pool.GL_SkyboxRenderable\n */\nexport class GL_SkyboxRenderable extends GL_RenderableBase\n{\n\t/**\n\t *\n\t */\n\tprivate static _elementsGL:GL_SkyboxElements;\n\n\t/**\n\t *\n\t */\n\tprivate _skybox:Skybox;\n\n\t/**\n\t * //TODO\n\t *\n\t * @param pool\n\t * @param skybox\n\t */\n\tconstructor(skybox:Skybox, renderer:RendererBase)\n\t{\n\t\tsuper(skybox, renderer);\n\n\t\tthis._skybox = skybox;\n\t}\n\n\t/**\n\t * //TODO\n\t *\n\t * @returns {away.base.TriangleElements}\n\t * @private\n\t */\n\tpublic _pGetElements():GL_SkyboxElements\n\t{\n\t\tvar elementsGL:GL_SkyboxElements = GL_SkyboxRenderable._elementsGL;\n\n\t\tif (!elementsGL) {\n\t\t\tvar elements:TriangleElements = new TriangleElements(new AttributesBuffer(11, 4));\n\t\t\telements.autoDeriveNormals = false;\n\t\t\telements.autoDeriveTangents = false;\n\t\t\telements.setIndices(Array<number>(0, 1, 2, 2, 3, 0, 6, 5, 4, 4, 7, 6, 2, 6, 7, 7, 3, 2, 4, 5, 1, 1, 0, 4, 4, 0, 3, 3, 7, 4, 2, 1, 5, 5, 6, 2));\n\t\t\telements.setPositions(Array<number>(-1, 1, -1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1));\n\n\t\t\telementsGL = GL_SkyboxRenderable._elementsGL = new GL_SkyboxElements(elements, this._stage);\n\t\t}\n\n\t\treturn elementsGL;\n\t}\n\n\tpublic _pGetSurface():GL_SurfaceBase\n\t{\n\t\treturn this._renderer.getSurfacePool(this.elementsGL).getAbstraction(this._skybox);\n\t}\n\n\tpublic static _iIncludeDependencies(shader:ShaderBase):void\n\t{\n\n\t}\n}",
    "export {GL_BillboardRenderable}\t\t\tfrom \"./renderables/GL_BillboardRenderable\";\nexport {GL_GraphicRenderable}\t\t\tfrom \"./renderables/GL_GraphicRenderable\";\nexport {GL_LineSegmentRenderable}\t\tfrom \"./renderables/GL_LineSegmentRenderable\";\nexport {GL_RenderableBase}\t\t\t\tfrom \"./renderables/GL_RenderableBase\";\nexport {GL_SkyboxRenderable}\t\t\t\tfrom \"./renderables/GL_SkyboxRenderable\";",
    "import {Matrix3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\nimport {Vector3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\nimport {DirectionalLight}\t\t\t\tfrom \"awayjs-display/lib/display/DirectionalLight\";\nimport {LightProbe}\t\t\t\t\tfrom \"awayjs-display/lib/display/LightProbe\";\nimport {PointLight}\t\t\t\t\tfrom \"awayjs-display/lib/display/PointLight\";\nimport {LightPickerBase}\t\t\t\tfrom \"awayjs-display/lib/materials/lightpickers/LightPickerBase\";\nimport {LightSources}\t\t\t\t\tfrom \"awayjs-display/lib/materials/LightSources\";\n\nimport {ContextGLProfile}\t\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLProfile\";\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\nimport {IContextGL}\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/IContextGL\";\nimport {GL_ImageBase}\t\t\t\t\tfrom \"awayjs-stagegl/lib/image/GL_ImageBase\";\n\nimport {ILightingPass}\t\t\t\tfrom \"../surfaces/passes/ILightingPass\";\n\nimport {ShaderBase}\t\t\t\t\tfrom \"../shaders/ShaderBase\";\nimport {CompilerBase}\t\t\t\t\tfrom \"../shaders/compilers/CompilerBase\";\nimport {LightingCompiler}\t\t\t\tfrom \"../shaders/compilers/LightingCompiler\";\nimport {IElementsClassGL}\t\t\t\tfrom \"../elements/IElementsClassGL\";\nimport {GL_RenderableBase}\t\t\tfrom \"../renderables/GL_RenderableBase\";\n\n/**\n * ShaderBase keeps track of the number of dependencies for \"named registers\" used across a pass.\n * Named registers are that are not necessarily limited to a single method. They are created by the compiler and\n * passed on to methods. The compiler uses the results to reserve usages through RegisterPool, which can be removed\n * each time a method has been compiled into the shader.\n *\n * @see RegisterPool.addUsage\n */\nexport class LightingShader extends ShaderBase\n{\n\tpublic _lightingPass:ILightingPass;\n\n\tprivate _includeCasters:boolean = true;\n\n\t/**\n\t * The first index for the fragment constants containing the light data.\n\t */\n\tpublic lightFragmentConstantIndex:number;\n\n\t/**\n\t * The starting index if the vertex constant to which light data needs to be uploaded.\n\t */\n\tpublic lightVertexConstantIndex:number;\n\n\t/**\n\t * Indices for the light probe diffuse textures.\n\t */\n\tpublic lightProbeDiffuseIndices:Array<number> /*uint*/;\n\n\t/**\n\t * Indices for the light probe specular textures.\n\t */\n\tpublic lightProbeSpecularIndices:Array<number> /*uint*/;\n\n\t/**\n\t * The index of the fragment constant containing the weights for the light probes.\n\t */\n\tpublic probeWeightsIndex:number;\n\n\tpublic numDirectionalLights:number;\n\tpublic numPointLights:number;\n\tpublic numLightProbes:number;\n\n\tpublic usesLightFallOff:boolean;\n\n\tpublic usesShadows:boolean;\n\n\t/**\n\t * Indicates whether the shader uses any lights.\n\t */\n\tpublic usesLights:boolean;\n\n\t/**\n\t * Indicates whether the shader uses any light probes.\n\t */\n\tpublic usesProbes:boolean;\n\n\t/**\n\t * Indicates whether the lights uses any specular components.\n\t */\n\tpublic usesLightsForSpecular:boolean;\n\n\t/**\n\t * Indicates whether the probes uses any specular components.\n\t */\n\tpublic usesProbesForSpecular:boolean;\n\n\t/**\n\t * Indicates whether the lights uses any diffuse components.\n\t */\n\tpublic usesLightsForDiffuse:boolean;\n\n\t/**\n\t * Indicates whether the probes uses any diffuse components.\n\t */\n\tpublic usesProbesForDiffuse:boolean;\n\n\t/**\n\t * Creates a new MethodCompilerVO object.\n\t */\n\tconstructor(elementsClass:IElementsClassGL, lightingPass:ILightingPass, stage:Stage)\n\t{\n\t\tsuper(elementsClass, lightingPass, stage);\n\n\t\tthis._lightingPass = lightingPass;\n\t}\n\n\tpublic _iIncludeDependencies():void\n\t{\n\t\tthis.numPointLights = this._lightingPass.numPointLights;\n\t\tthis.numDirectionalLights = this._lightingPass.numDirectionalLights;\n\t\tthis.numLightProbes = this._lightingPass.numLightProbes;\n\n\t\tvar numAllLights:number = this._lightingPass.numPointLights + this._lightingPass.numDirectionalLights;\n\t\tvar numLightProbes:number = this._lightingPass.numLightProbes;\n\t\tvar diffuseLightSources:number = this._lightingPass._iUsesDiffuse(this)? this._lightingPass.diffuseLightSources : 0x00;\n\t\tvar specularLightSources:number = this._lightingPass._iUsesSpecular(this)? this._lightingPass.specularLightSources : 0x00;\n\t\tvar combinedLightSources:number = diffuseLightSources | specularLightSources;\n\n\t\tthis.usesLightFallOff = this._lightingPass.enableLightFallOff && this.profile != ContextGLProfile.BASELINE_CONSTRAINED;\n\t\tthis.usesCommonData = this.usesLightFallOff;\n\t\tthis.numLights = numAllLights + numLightProbes;\n\t\tthis.usesLights = numAllLights > 0 && (combinedLightSources & LightSources.LIGHTS) != 0;\n\t\tthis.usesProbes = numLightProbes > 0 && (combinedLightSources & LightSources.PROBES) != 0;\n\t\tthis.usesLightsForSpecular = numAllLights > 0 && (specularLightSources & LightSources.LIGHTS) != 0;\n\t\tthis.usesProbesForSpecular = numLightProbes > 0 && (specularLightSources & LightSources.PROBES) != 0;\n\t\tthis.usesLightsForDiffuse = numAllLights > 0 && (diffuseLightSources & LightSources.LIGHTS) != 0;\n\t\tthis.usesProbesForDiffuse = numLightProbes > 0 && (diffuseLightSources & LightSources.PROBES) != 0;\n\t\tthis.usesShadows = this._lightingPass._iUsesShadows(this);\n\n\t\t//IMPORTANT this must occur after shader lighting initialisation above\n\t\tsuper._iIncludeDependencies();\n\t}\n\n\t/**\n\t * Factory method to create a concrete compiler object for this object\n\t *\n\t * @param materialPassVO\n\t * @returns {away.materials.LightingCompiler}\n\t */\n\tpublic createCompiler(elementsClass:IElementsClassGL, pass:ILightingPass):CompilerBase\n\t{\n\t\treturn new LightingCompiler(elementsClass, pass, this);\n\t}\n\n\n\t/**\n\t *\n\t *\n\t * @param renderable\n\t * @param stage\n\t * @param camera\n\t */\n\tpublic _setRenderState(renderable:GL_RenderableBase, camera:Camera, viewProjection:Matrix3D):void\n\t{\n\t\tsuper._setRenderState(renderable, camera, viewProjection);\n\n\t\tif (this._lightingPass.lightPicker)\n\t\t\tthis._lightingPass.lightPicker.collectLights(renderable.sourceEntity);\n\n\t\tif (this.usesLights)\n\t\t\tthis.updateLights();\n\n\t\tif (this.usesProbes)\n\t\t\tthis.updateProbes();\n\t}\n\n\t/**\n\t * Updates constant data render state used by the lights. This method is optional for subclasses to implement.\n\t */\n\tprivate updateLights():void\n\t{\n\t\tvar dirLight:DirectionalLight;\n\t\tvar pointLight:PointLight;\n\t\tvar i:number = 0;\n\t\tvar k:number = 0;\n\t\tvar len:number;\n\t\tvar dirPos:Vector3D;\n\t\tvar total:number = 0;\n\t\tvar numLightTypes:number = this.usesShadows? 2 : 1;\n\t\tvar l:number;\n\t\tvar offset:number;\n\n\t\tthis.ambientR = this.ambientG = this.ambientB = 0;\n\n\t\tl = this.lightVertexConstantIndex;\n\t\tk = this.lightFragmentConstantIndex;\n\n\t\tvar cast:number = 0;\n\t\tvar dirLights:Array<DirectionalLight> = this._lightingPass.lightPicker.directionalLights;\n\t\toffset = this._lightingPass.directionalLightsOffset;\n\t\tlen = this._lightingPass.lightPicker.directionalLights.length;\n\n\t\tif (offset > len) {\n\t\t\tcast = 1;\n\t\t\toffset -= len;\n\t\t}\n\n\t\tfor (; cast < numLightTypes; ++cast) {\n\t\t\tif (cast)\n\t\t\t\tdirLights = this._lightingPass.lightPicker.castingDirectionalLights;\n\n\t\t\tlen = dirLights.length;\n\n\t\t\tif (len > this.numDirectionalLights)\n\t\t\t\tlen = this.numDirectionalLights;\n\n\t\t\tfor (i = 0; i < len; ++i) {\n\t\t\t\tdirLight = dirLights[offset + i];\n\t\t\t\tdirPos = dirLight.sceneDirection;\n\n\t\t\t\tthis.ambientR += dirLight._iAmbientR;\n\t\t\t\tthis.ambientG += dirLight._iAmbientG;\n\t\t\t\tthis.ambientB += dirLight._iAmbientB;\n\n\t\t\t\tif (this.usesTangentSpace) {\n\t\t\t\t\tvar x:number = -dirPos.x;\n\t\t\t\t\tvar y:number = -dirPos.y;\n\t\t\t\t\tvar z:number = -dirPos.z;\n\n\t\t\t\t\tthis.vertexConstantData[l++] = this._pInverseSceneMatrix[0]*x + this._pInverseSceneMatrix[4]*y + this._pInverseSceneMatrix[8]*z;\n\t\t\t\t\tthis.vertexConstantData[l++] = this._pInverseSceneMatrix[1]*x + this._pInverseSceneMatrix[5]*y + this._pInverseSceneMatrix[9]*z;\n\t\t\t\t\tthis.vertexConstantData[l++] = this._pInverseSceneMatrix[2]*x + this._pInverseSceneMatrix[6]*y + this._pInverseSceneMatrix[10]*z;\n\t\t\t\t\tthis.vertexConstantData[l++] = 1;\n\t\t\t\t} else {\n\t\t\t\t\tthis.fragmentConstantData[k++] = -dirPos.x;\n\t\t\t\t\tthis.fragmentConstantData[k++] = -dirPos.y;\n\t\t\t\t\tthis.fragmentConstantData[k++] = -dirPos.z;\n\t\t\t\t\tthis.fragmentConstantData[k++] = 1;\n\t\t\t\t}\n\n\t\t\t\tthis.fragmentConstantData[k++] = dirLight._iDiffuseR;\n\t\t\t\tthis.fragmentConstantData[k++] = dirLight._iDiffuseG;\n\t\t\t\tthis.fragmentConstantData[k++] = dirLight._iDiffuseB;\n\t\t\t\tthis.fragmentConstantData[k++] = 1;\n\n\t\t\t\tthis.fragmentConstantData[k++] = dirLight._iSpecularR;\n\t\t\t\tthis.fragmentConstantData[k++] = dirLight._iSpecularG;\n\t\t\t\tthis.fragmentConstantData[k++] = dirLight._iSpecularB;\n\t\t\t\tthis.fragmentConstantData[k++] = 1;\n\n\t\t\t\tif (++total == this.numDirectionalLights) {\n\t\t\t\t\t// break loop\n\t\t\t\t\ti = len;\n\t\t\t\t\tcast = numLightTypes;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// more directional supported than currently picked, need to clamp all to 0\n\t\tif (this.numDirectionalLights > total) {\n\t\t\ti = k + (this.numDirectionalLights - total)*12;\n\n\t\t\twhile (k < i)\n\t\t\t\tthis.fragmentConstantData[k++] = 0;\n\t\t}\n\n\t\ttotal = 0;\n\n\t\tvar pointLights:Array<PointLight> = this._lightingPass.lightPicker.pointLights;\n\t\toffset = this._lightingPass.pointLightsOffset;\n\t\tlen = this._lightingPass.lightPicker.pointLights.length;\n\n\t\tif (offset > len) {\n\t\t\tcast = 1;\n\t\t\toffset -= len;\n\t\t} else {\n\t\t\tcast = 0;\n\t\t}\n\n\t\tfor (; cast < numLightTypes; ++cast) {\n\t\t\tif (cast)\n\t\t\t\tpointLights = this._lightingPass.lightPicker.castingPointLights;\n\n\t\t\tlen = pointLights.length;\n\n\t\t\tfor (i = 0; i < len; ++i) {\n\t\t\t\tpointLight = pointLights[offset + i];\n\t\t\t\tdirPos = pointLight.scenePosition;\n\n\t\t\t\tthis.ambientR += pointLight._iAmbientR;\n\t\t\t\tthis.ambientG += pointLight._iAmbientG;\n\t\t\t\tthis.ambientB += pointLight._iAmbientB;\n\n\t\t\t\tif (this.usesTangentSpace) {\n\t\t\t\t\tx = dirPos.x;\n\t\t\t\t\ty = dirPos.y;\n\t\t\t\t\tz = dirPos.z;\n\n\t\t\t\t\tthis.vertexConstantData[l++] = this._pInverseSceneMatrix[0]*x + this._pInverseSceneMatrix[4]*y + this._pInverseSceneMatrix[8]*z + this._pInverseSceneMatrix[12];\n\t\t\t\t\tthis.vertexConstantData[l++] = this._pInverseSceneMatrix[1]*x + this._pInverseSceneMatrix[5]*y + this._pInverseSceneMatrix[9]*z + this._pInverseSceneMatrix[13];\n\t\t\t\t\tthis.vertexConstantData[l++] = this._pInverseSceneMatrix[2]*x + this._pInverseSceneMatrix[6]*y + this._pInverseSceneMatrix[10]*z + this._pInverseSceneMatrix[14];\n\t\t\t\t\tthis.vertexConstantData[l++] = 1;\n\t\t\t\t} else if (!this.usesGlobalPosFragment) {\n\t\t\t\t\tthis.vertexConstantData[l++] = dirPos.x;\n\t\t\t\t\tthis.vertexConstantData[l++] = dirPos.y;\n\t\t\t\t\tthis.vertexConstantData[l++] = dirPos.z;\n\t\t\t\t\tthis.vertexConstantData[l++] = 1;\n\t\t\t\t} else {\n\t\t\t\t\tthis.fragmentConstantData[k++] = dirPos.x;\n\t\t\t\t\tthis.fragmentConstantData[k++] = dirPos.y;\n\t\t\t\t\tthis.fragmentConstantData[k++] = dirPos.z;\n\t\t\t\t\tthis.fragmentConstantData[k++] = 1;\n\t\t\t\t}\n\n\t\t\t\tthis.fragmentConstantData[k++] = pointLight._iDiffuseR;\n\t\t\t\tthis.fragmentConstantData[k++] = pointLight._iDiffuseG;\n\t\t\t\tthis.fragmentConstantData[k++] = pointLight._iDiffuseB;\n\n\t\t\t\tvar radius:number = pointLight._pRadius;\n\t\t\t\tthis.fragmentConstantData[k++] = radius*radius;\n\n\t\t\t\tthis.fragmentConstantData[k++] = pointLight._iSpecularR;\n\t\t\t\tthis.fragmentConstantData[k++] = pointLight._iSpecularG;\n\t\t\t\tthis.fragmentConstantData[k++] = pointLight._iSpecularB;\n\t\t\t\tthis.fragmentConstantData[k++] = pointLight._pFallOffFactor;\n\n\t\t\t\tif (++total == this.numPointLights) {\n\t\t\t\t\t// break loop\n\t\t\t\t\ti = len;\n\t\t\t\t\tcast = numLightTypes;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// more directional supported than currently picked, need to clamp all to 0\n\t\tif (this.numPointLights > total) {\n\t\t\ti = k + (total - this.numPointLights)*12;\n\n\t\t\tfor (; k < i; ++k)\n\t\t\t\tthis.fragmentConstantData[k] = 0;\n\t\t}\n\t}\n\n\t/**\n\t * Updates constant data render state used by the light probes. This method is optional for subclasses to implement.\n\t */\n\tprivate updateProbes():void\n\t{\n\t\tvar probe:LightProbe;\n\t\tvar lightProbes:Array<LightProbe> = this._lightingPass.lightPicker.lightProbes;\n\t\tvar weights:Array<number> = this._lightingPass.lightPicker.lightProbeWeights;\n\t\tvar len:number = lightProbes.length - this._lightingPass.lightProbesOffset;\n\t\tvar addDiff:boolean = this.usesProbesForDiffuse;\n\t\tvar addSpec:boolean = this.usesProbesForSpecular;\n\n\t\tif (!(addDiff || addSpec))\n\t\t\treturn;\n\n\t\tif (len > this.numLightProbes)\n\t\t\tlen = this.numLightProbes;\n\n\t\tfor (var i:number = 0; i < len; ++i) {\n\t\t\tprobe = lightProbes[ this._lightingPass.lightProbesOffset + i];\n\n\t\t\tif (addDiff)\n\t\t\t\t(<GL_ImageBase> this._stage.getAbstraction(probe.diffuseMap)).activate(this.lightProbeDiffuseIndices[i], probe.diffuseSampler.mipmap);\n\n\t\t\tif (addSpec)\n\t\t\t\t(<GL_ImageBase> this._stage.getAbstraction(probe.specularMap)).activate(this.lightProbeSpecularIndices[i], probe.diffuseSampler.mipmap);\n\t\t}\n\n\t\tfor (i = 0; i < len; ++i)\n\t\t\tthis.fragmentConstantData[this.probeWeightsIndex + i] = weights[this._lightingPass.lightProbesOffset + i];\n\t}\n}",
    "import {ShaderRegisterElement}\t\tfrom \"../shaders/ShaderRegisterElement\";\n\n/**\n * RegisterPool is used by the shader compilers process to keep track of which registers of a certain type are\n * currently used and should not be allowed to be written to. Either entire registers can be requested and locked,\n * or single components (x, y, z, w) of a single register.\n * It is used by ShaderRegisterCache to track usages of individual register types.\n *\n * @see away.materials.ShaderRegisterCache\n */\nexport class RegisterPool\n{\n\tprivate static _regPool:Object = new Object();\n\tprivate static _regCompsPool:Object = new Object();\n\n\tprivate _vectorRegisters:Array<ShaderRegisterElement>;\n\tprivate _registerComponents;\n\n\tprivate _regName:string;\n\tprivate _usedSingleCount:Array<Array<number>>;\n\tprivate _usedVectorCount:Array<number> /*uint*/;\n\tprivate _regCount:number;\n\n\tprivate _persistent:boolean;\n\n\t/**\n\t * Creates a new RegisterPool object.\n\t * @param regName The base name of the register type (\"ft\" for fragment temporaries, \"vc\" for vertex constants, etc)\n\t * @param regCount The amount of available registers of this type.\n\t * @param persistent Whether or not registers, once reserved, can be freed again. For example, temporaries are not persistent, but constants are.\n\t */\n\tconstructor(regName:string, regCount:number, persistent:boolean = true)\n\t{\n\t\tthis._regName = regName;\n\t\tthis._regCount = regCount;\n\t\tthis._persistent = persistent;\n\t\tthis.initRegisters(regName, regCount);\n\t}\n\n\t/**\n\t * Retrieve an entire vector register that's still available.\n\t */\n\tpublic requestFreeVectorReg():ShaderRegisterElement\n\t{\n\t\tfor (var i:number = 0; i < this._regCount; ++i) {\n\t\t\tif (!this.isRegisterUsed(i)) {\n\t\t\t\tif (this._persistent)\n\t\t\t\t\tthis._usedVectorCount[i]++;\n\n\t\t\t\treturn this._vectorRegisters[i];\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(\"Register overflow!\");\n\t}\n\n\t/**\n\t * Retrieve a single vector component that's still available.\n\t */\n\tpublic requestFreeRegComponent():ShaderRegisterElement\n\t{\n\t\tfor (var i:number = 0; i < this._regCount; ++i) {\n\t\t\tif (this._usedVectorCount[i] > 0)\n\t\t\t\tcontinue;\n\n\t\t\tfor (var j:number = 0; j < 4; ++j) {\n\t\t\t\tif (this._usedSingleCount[j][i] == 0) {\n\t\t\t\t\tif (this._persistent)\n\t\t\t\t\t\tthis._usedSingleCount[j][i]++;\n\n\t\t\t\t\treturn this._registerComponents[j][i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(\"Register overflow!\");\n\t}\n\n\t/**\n\t * Marks a register as used, so it cannot be retrieved. The register won't be able to be used until removeUsage\n\t * has been called usageCount times again.\n\t * @param register The register to mark as used.\n\t * @param usageCount The amount of usages to add.\n\t */\n\tpublic addUsage(register:ShaderRegisterElement, usageCount:number):void\n\t{\n\t\tif (register._component > -1)\n\t\t\tthis._usedSingleCount[register._component][register.index] += usageCount;\n\t\telse\n\t\t\tthis._usedVectorCount[register.index] += usageCount;\n\t}\n\n\t/**\n\t * Removes a usage from a register. When usages reach 0, the register is freed again.\n\t * @param register The register for which to remove a usage.\n\t */\n\tpublic removeUsage(register:ShaderRegisterElement):void\n\t{\n\t\tif (register._component > -1) {\n\t\t\tif (--this._usedSingleCount[register._component][register.index] < 0)\n\t\t\t\tthrow new Error(\"More usages removed than exist!\");\n\t\t} else {\n\t\t\tif (--this._usedVectorCount[register.index] < 0)\n\t\t\t\tthrow new Error(\"More usages removed than exist!\");\n\t\t}\n\t}\n\n\t/**\n\t * Disposes any resources used by the current RegisterPool object.\n\t */\n\tpublic dispose():void\n\t{\n\t\tthis._vectorRegisters = null;\n\t\tthis._registerComponents = null;\n\t\tthis._usedSingleCount = null;\n\t\tthis._usedVectorCount = null;\n\t}\n\n\t/**\n\t * Indicates whether or not any registers are in use.\n\t */\n\tpublic hasRegisteredRegs():boolean\n\t{\n\t\tfor (var i:number = 0; i < this._regCount; ++i)\n\t\t\tif (this.isRegisterUsed(i))\n\t\t\t\treturn true;\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Initializes all registers.\n\t */\n\tprivate initRegisters(regName:string, regCount:number):void\n\t{\n\t\tvar hash:string = RegisterPool._initPool(regName, regCount);\n\n\t\tthis._vectorRegisters = RegisterPool._regPool[hash];\n\t\tthis._registerComponents = RegisterPool._regCompsPool[hash];\n\n\t\tthis._usedVectorCount = this._initArray(Array<number>(regCount), 0);\n\n\t\tthis._usedSingleCount = new Array<Array<number>>(4);\n\t\tthis._usedSingleCount[0] = this._initArray(new Array<number>(regCount), 0);\n\t\tthis._usedSingleCount[1] = this._initArray(new Array<number>(regCount), 0);\n\t\tthis._usedSingleCount[2] = this._initArray(new Array<number>(regCount), 0);\n\t\tthis._usedSingleCount[3] = this._initArray(new Array<number>(regCount), 0);\n\t}\n\n\tprivate static _initPool(regName:string, regCount:number):string\n\t{\n\t\tvar hash:string = regName + regCount;\n\n\t\tif (RegisterPool._regPool[hash] != undefined)\n\t\t\treturn hash;\n\n\t\tvar vectorRegisters:Array<ShaderRegisterElement> = new Array<ShaderRegisterElement>(regCount);\n\t\tRegisterPool._regPool[hash] = vectorRegisters;\n\n\t\tvar registerComponents = [\n\t\t\t[],\n\t\t\t[],\n\t\t\t[],\n\t\t\t[]\n\t\t];\n\t\tRegisterPool._regCompsPool[hash] = registerComponents;\n\n\t\tfor (var i:number = 0; i < regCount; ++i) {\n\n\t\t\tvectorRegisters[i] = new ShaderRegisterElement(regName, i);\n\n\t\t\tfor (var j:number = 0; j < 4; ++j)\n\t\t\t\tregisterComponents[j][i] = new ShaderRegisterElement(regName, i, j);\n\t\t}\n\n\t\treturn hash;\n\t}\n\n\n\t/**\n\t * Check if the temp register is either used for single or vector use\n\t */\n\tprivate isRegisterUsed(index:number):boolean\n\t{\n\t\tif (this._usedVectorCount[index] > 0)\n\t\t\treturn true;\n\n\t\tfor (var i:number = 0; i < 4; ++i)\n\t\t\tif (this._usedSingleCount[i][index] > 0)\n\t\t\t\treturn true;\n\n\t\treturn false;\n\t}\n\n\n\tprivate _initArray(a:Array<any>, val:any):Array<any>\n\t{\n\t\tvar l:number = a.length;\n\n\t\tfor (var c:number = 0; c < l; c++)\n\t\t\ta[c] = val;\n\n\t\treturn a;\n\t}\n}\n",
    "import {BlendMode}\t\t\t\t\tfrom \"awayjs-core/lib/image/BlendMode\";\nimport {Matrix}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix\";\nimport {Matrix3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\nimport {Vector3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\nimport {ColorTransform}\t\t\t\tfrom \"awayjs-core/lib/geom/ColorTransform\";\nimport {ArgumentError}\t\t\t\tfrom \"awayjs-core/lib/errors/ArgumentError\";\nimport {IAssetClass}\t\t\t\t\tfrom \"awayjs-core/lib/library/IAssetClass\";\nimport {IAbstractionPool}\t\t\t\tfrom \"awayjs-core/lib/library/IAbstractionPool\";\n\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\nimport {TextureBase}\t\t\t\t\tfrom \"awayjs-display/lib/textures/TextureBase\";\n\nimport {ContextGLBlendFactor}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLBlendFactor\";\nimport {ContextGLCompareMode}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLCompareMode\";\nimport {ContextGLTriangleFace}\t\tfrom \"awayjs-stagegl/lib/base/ContextGLTriangleFace\";\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\nimport {ProgramData}\t\t\t\t\tfrom \"awayjs-stagegl/lib/image/ProgramData\";\nimport {GL_IAssetClass}\t\t\t\tfrom \"awayjs-stagegl/lib/library/GL_IAssetClass\";\n\nimport {AnimationSetBase}\t\t\t\tfrom \"../animators/AnimationSetBase\";\nimport {AnimatorBase}\t\t\t\t\tfrom \"../animators/AnimatorBase\";\nimport {AnimationRegisterData}\t\tfrom \"../animators/data/AnimationRegisterData\";\nimport {IPass}\t\t\t\t\t\tfrom \"../surfaces/passes/IPass\";\nimport {IElementsClassGL}\t\t\t\tfrom \"../elements/IElementsClassGL\";\nimport {GL_ElementsBase}\t\t\t\tfrom \"../elements/GL_ElementsBase\";\nimport {GL_RenderableBase}\t\t\tfrom \"../renderables/GL_RenderableBase\";\nimport {CompilerBase}\t\t\t\t\tfrom \"../shaders/compilers/CompilerBase\";\nimport {ShaderRegisterCache}\t\t\tfrom \"../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterData}\t\t\tfrom \"../shaders/ShaderRegisterData\";\nimport {ShaderRegisterElement}\t\tfrom \"../shaders/ShaderRegisterElement\";\nimport {GL_TextureBase}\t\t\t\tfrom \"../textures/GL_TextureBase\";\n\n/**\n * ShaderBase keeps track of the number of dependencies for \"named registers\" used across a pass.\n * Named registers are that are not necessarily limited to a single method. They are created by the compiler and\n * passed on to methods. The compiler uses the results to reserve usages through RegisterPool, which can be removed\n * each time a method has been compiled into the shader.\n *\n * @see RegisterPool.addUsage\n */\nexport class ShaderBase implements IAbstractionPool\n{\n\tpublic static _abstractionClassPool:Object = new Object();\n\n\tprivate _abstractionPool:Object = new Object();\n\n\tprivate _elementsClass:IElementsClassGL;\n\tprivate _pass:IPass;\n\tpublic _stage:Stage;\n\tprivate _programData:ProgramData;\n\n\tprivate _blendFactorSource:string = ContextGLBlendFactor.ONE;\n\tprivate _blendFactorDest:string = ContextGLBlendFactor.ZERO;\n\t\n\tprivate _invalidProgram:boolean = true;\n\tprivate _animationVertexCode:string = \"\";\n\tprivate _animationFragmentCode:string = \"\";\n\tprivate _numUsedVertexConstants:number;\n\tprivate _numUsedFragmentConstants:number;\n\tprivate _numUsedStreams:number;\n\tprivate _numUsedTextures:number;\n\tprivate _usesAnimation:boolean;\n\n\tpublic get programData():ProgramData\n\t{\n\t\tif (this._invalidProgram)\n\t\t\tthis._updateProgram();\n\n\t\treturn this._programData;\n\t}\n\n\tpublic usesBlending:boolean = false;\n\n\tpublic useImageRect:boolean = false;\n\n\tpublic usesCurves:boolean = false;\n\n\t/**\n\t * The depth compare mode used to render the renderables using this material.\n\t *\n\t * @see away.stagegl.ContextGLCompareMode\n\t */\n\tpublic depthCompareMode:string = ContextGLCompareMode.LESS;\n\n\n\t/**\n\t * Indicate whether the shader should write to the depth buffer or not. Ignored when blending is enabled.\n\t */\n\tpublic writeDepth:boolean = true;\n\n\tpublic profile:string;\n\n\tpublic get usesAnimation():boolean\n\t{\n\t\treturn this._usesAnimation;\n\t}\n\n\tpublic set usesAnimation(value:boolean)\n\t{\n\t\tif (this._usesAnimation == value)\n\t\t\treturn;\n\n\t\tthis._usesAnimation = value;\n\n\t\tthis.invalidateProgram();\n\t}\n\n\tprivate _defaultCulling:string = ContextGLTriangleFace.BACK;\n\n\tpublic _pInverseSceneMatrix:Float32Array = new Float32Array(16);\n\n\tpublic animationRegisterData:AnimationRegisterData;\n\n\t\n\tpublic get numUsedVertexConstants():number\n\t{\n\t\tif (this._invalidProgram)\n\t\t\tthis._updateProgram();\n\t\t\n\t\treturn this._numUsedVertexConstants;\n\t}\n\n\tpublic get numUsedFragmentConstants():number\n\t{\n\t\tif (this._invalidProgram)\n\t\t\tthis._updateProgram();\n\t\t\n\t\treturn this._numUsedFragmentConstants;\n\t}\n\t\n\t/**\n\t * The amount of used vertex streams in the vertex code. Used by the animation code generation to know from which index on streams are available.\n\t */\n\tpublic get numUsedStreams():number\n\t{\n\t\tif (this._invalidProgram)\n\t\t\tthis._updateProgram();\n\n\t\treturn this._numUsedStreams;\n\t}\n\n\t/**\n\t *\n\t */\n\tpublic get numUsedTextures():number\n\t{\n\t\tif (this._invalidProgram)\n\t\t\tthis._updateProgram();\n\n\t\treturn this._numUsedTextures;\n\t}\n\n\tpublic numLights:number;\n\n\tpublic useAlphaPremultiplied:boolean;\n\tpublic useBothSides:boolean;\n\tpublic usesUVTransform:boolean;\n\tpublic usesColorTransform:boolean;\n\tpublic alphaThreshold:number;\n\n\n\t//set ambient values to default\n\tpublic ambientR:number = 0xFF;\n\tpublic ambientG:number = 0xFF;\n\tpublic ambientB:number = 0xFF;\n\n\t/**\n\t *\n\t */\n\tpublic usesCommonData:boolean;\n\n\t/**\n\t * Indicates whether the pass requires any fragment animation code.\n\t */\n\tpublic usesFragmentAnimation:boolean;\n\n\t/**\n\t * The amount of dependencies on the projected position.\n\t */\n\tpublic projectionDependencies:number;\n\n\t/**\n\t * The amount of dependencies on the normal vector.\n\t */\n\tpublic normalDependencies:number;\n\n\t/**\n\t * The amount of dependencies on the vertex color.\n\t */\n\tpublic colorDependencies:number;\n\n\t/**\n\t * The amount of dependencies on the view direction.\n\t */\n\tpublic viewDirDependencies:number;\n\n\t/**\n\t * The amount of dependencies on the primary UV coordinates.\n\t */\n\tpublic uvDependencies:number;\n\n\t/**\n\t * The amount of dependencies on the secondary UV coordinates.\n\t */\n\tpublic secondaryUVDependencies:number;\n\n\t/**\n\t * The amount of dependencies on the global position. This can be 0 while hasGlobalPosDependencies is true when\n\t * the global position is used as a temporary value (fe to calculate the view direction)\n\t */\n\tpublic globalPosDependencies:number;\n\n\t/**\n\t * The amount of tangent vector dependencies (fragment shader).\n\t */\n\tpublic tangentDependencies:number;\n\n\t/**\n\t *\n\t */\n\tpublic outputsColors:boolean;\n\n\t/**\n\t * Indicates whether or not normals are output.\n\t */\n\tpublic outputsNormals:boolean;\n\n\t/**\n\t * Indicates whether or not normal calculations are output in tangent space.\n\t */\n\tpublic outputsTangentNormals:boolean;\n\n\t/**\n\t * Indicates whether or not normal calculations are expected in tangent space. This is only the case if no world-space\n\t * dependencies exist and normals are being output.\n\t */\n\tpublic usesTangentSpace:boolean;\n\n\t/**\n\t * Indicates whether there are any dependencies on the world-space position vector.\n\t */\n\tpublic usesGlobalPosFragment:boolean = false;\n\n\t/**\n\t * Indicates whether there are any dependencies on the local position vector.\n\t */\n\tpublic usesPositionFragment:boolean = false;\n\n\tpublic vertexConstantData:Float32Array;\n\tpublic fragmentConstantData:Float32Array;\n\n\t/**\n\t * The index for the common data register.\n\t */\n\tpublic commonsDataIndex:number;\n\n\t/**\n\t * The index for the curve vertex attribute stream.\n\t */\n\tpublic curvesIndex:number;\n\n\t/**\n\t * The index for the UV vertex attribute stream.\n\t */\n\tpublic uvIndex:number;\n\n\t/**\n\t * The index for the secondary UV vertex attribute stream.\n\t */\n\tpublic secondaryUVIndex:number;\n\n\t/**\n\t * The index for the vertex normal attribute stream.\n\t */\n\tpublic normalIndex:number;\n\n\t/**\n\t * The index for the color attribute stream.\n\t */\n\tpublic colorBufferIndex:number;\n\n\t/**\n\t * The index for the vertex tangent attribute stream.\n\t */\n\tpublic tangentIndex:number;\n\n\t/**\n\t * \n\t */\n\tpublic skyboxScaleIndex:number;\n\t\n\t/**\n\t * \n\t */\n\tpublic scenePositionIndex:number;\n\t\n\t/**\n\t * The index of the vertex constant containing the view matrix.\n\t */\n\tpublic viewMatrixIndex:number;\n\n\t/**\n\t * The index of the vertex constant containing the scene matrix.\n\t */\n\tpublic sceneMatrixIndex:number;\n\n\t/**\n\t * The index of the vertex constant containing the uniform scene matrix (the inverse transpose).\n\t */\n\tpublic sceneNormalMatrixIndex:number;\n\n\t/**\n\t * The index of the vertex constant containing the camera position.\n\t */\n\tpublic cameraPositionIndex:number;\n\n\t/**\n\t * The index for the UV transformation matrix vertex constant.\n\t */\n\tpublic uvMatrixIndex:number;\n\n\t/**\n\t * The index for the color transform fragment constant.\n\t */\n\tpublic colorTransformIndex:number;\n\n\t/**\n\t *\n\t */\n\tpublic jointIndexIndex:number;\n\n\t/**\n\t *\n\t */\n\tpublic jointWeightIndex:number;\n\n\t/**\n\t *\n\t */\n\tpublic imageIndices:Array<number> = new Array<number>();\n\n\t/**\n\t * \n\t */\n\tpublic activeElements:GL_ElementsBase;\n\n\t/**\n\t * Creates a new MethodCompilerVO object.\n\t */\n\tconstructor(elementsClass:IElementsClassGL, pass:IPass, stage:Stage)\n\t{\n\t\tthis._elementsClass = elementsClass;\n\t\tthis._pass = pass;\n\t\tthis._stage = stage;\n\n\t\tthis.profile = this._stage.profile;\n\t}\n\n\tpublic getAbstraction(texture:TextureBase):GL_TextureBase\n\t{\n\t\treturn (this._abstractionPool[texture.id] || (this._abstractionPool[texture.id] = new (<GL_IAssetClass> ShaderBase._abstractionClassPool[texture.assetType])(texture, this)));\n\t}\n\n\t/**\n\t *\n\t * @param image\n\t */\n\tpublic clearAbstraction(texture:TextureBase):void\n\t{\n\t\tthis._abstractionPool[texture.id] = null;\n\t}\n\n\t/**\n\t *\n\t * @param imageObjectClass\n\t */\n\tpublic static registerAbstraction(gl_assetClass:GL_IAssetClass, assetClass:IAssetClass):void\n\t{\n\t\tShaderBase._abstractionClassPool[assetClass.assetType] = gl_assetClass;\n\t}\n\n\tpublic getImageIndex(texture:TextureBase, index:number = 0):number\n\t{\n\t\treturn this._pass.getImageIndex(texture, index);\n\t}\n\n\tpublic _iIncludeDependencies():void\n\t{\n\t\tthis._pass._iIncludeDependencies(this);\n\t}\n\n\t/**\n\t * Factory method to create a concrete compiler object for this object\n\t *\n\t * @param elementsClass\n\t * @param pass\n\t * @param stage\n\t * @returns {CompilerBase}\n\t */\n\tpublic createCompiler(elementsClass:IElementsClassGL, pass:IPass):CompilerBase\n\t{\n\t\treturn new CompilerBase(elementsClass, pass, this);\n\t}\n\n\t/**\n\t * Clears dependency counts for all registers. Called when recompiling a pass.\n\t */\n\tpublic reset():void\n\t{\n\t\tthis.projectionDependencies = 0;\n\t\tthis.normalDependencies = 0;\n\t\tthis.colorDependencies = 0;\n\t\tthis.viewDirDependencies = 0;\n\t\tthis.uvDependencies = 0;\n\t\tthis.secondaryUVDependencies = 0;\n\t\tthis.globalPosDependencies = 0;\n\t\tthis.tangentDependencies = 0;\n\t\tthis.usesCommonData = false;\n\t\tthis.usesGlobalPosFragment = false;\n\t\tthis.usesPositionFragment = false;\n\t\tthis.usesFragmentAnimation = false;\n\t\tthis.usesTangentSpace = false;\n\t\tthis.outputsNormals = false;\n\t\tthis.outputsTangentNormals = false;\n\t}\n\n\tpublic pInitRegisterIndices():void\n\t{\n\t\tthis.commonsDataIndex = -1;\n\t\tthis.cameraPositionIndex = -1;\n\t\tthis.curvesIndex = -1;\n\t\tthis.uvIndex = -1;\n\t\tthis.uvMatrixIndex = -1;\n\t\tthis.colorTransformIndex = -1;\n\t\tthis.secondaryUVIndex = -1;\n\t\tthis.normalIndex = -1;\n\t\tthis.colorBufferIndex = -1;\n\t\tthis.tangentIndex = -1;\n\t\tthis.sceneMatrixIndex = -1;\n\t\tthis.sceneNormalMatrixIndex = -1;\n\t\tthis.jointIndexIndex = -1;\n\t\tthis.jointWeightIndex = -1;\n\t\tthis.imageIndices.length = 0;\n\t}\n\n\t/**\n\t * Initializes the unchanging constant data for this shader object.\n\t */\n\tpublic initConstantData(registerCache:ShaderRegisterCache):void\n\t{\n\t\t//Updates the amount of used register indices.\n\t\tthis._numUsedVertexConstants = registerCache.numUsedVertexConstants;\n\t\tthis._numUsedFragmentConstants = registerCache.numUsedFragmentConstants;\n\t\tthis._numUsedStreams = registerCache.numUsedStreams;\n\t\tthis._numUsedTextures = registerCache.numUsedTextures;\n\n\t\tthis.vertexConstantData = new Float32Array(registerCache.numUsedVertexConstants*4);\n\t\tthis.fragmentConstantData = new Float32Array(registerCache.numUsedFragmentConstants*4);\n\n\t\t//Initializes commonly required constant values.\n\t\tif (this.commonsDataIndex >= 0) {\n\t\t\tthis.fragmentConstantData[this.commonsDataIndex] = .5;\n\t\t\tthis.fragmentConstantData[this.commonsDataIndex + 1] = 0;\n\t\t\tthis.fragmentConstantData[this.commonsDataIndex + 2] = 1/255;\n\t\t\tthis.fragmentConstantData[this.commonsDataIndex + 3] = 1;\n\t\t}\n\n\t\t//Initializes the default UV transformation matrix.\n\t\tif (this.uvMatrixIndex >= 0) {\n\t\t\tthis.vertexConstantData[this.uvMatrixIndex] = 1;\n\t\t\tthis.vertexConstantData[this.uvMatrixIndex + 1] = 0;\n\t\t\tthis.vertexConstantData[this.uvMatrixIndex + 2] = 0;\n\t\t\tthis.vertexConstantData[this.uvMatrixIndex + 3] = 0;\n\t\t\tthis.vertexConstantData[this.uvMatrixIndex + 4] = 0;\n\t\t\tthis.vertexConstantData[this.uvMatrixIndex + 5] = 1;\n\t\t\tthis.vertexConstantData[this.uvMatrixIndex + 6] = 0;\n\t\t\tthis.vertexConstantData[this.uvMatrixIndex + 7] = 0;\n\t\t}\n\n\t\t//Initializes the default colorTransform.\n\t\tif (this.colorTransformIndex >= 0) {\n\t\t\tthis.fragmentConstantData[this.colorTransformIndex] = 1;\n\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 1] = 1;\n\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 2] = 1;\n\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 3] = 1;\n\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 4] = 0;\n\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 5] = 0;\n\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 6] = 0;\n\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 7] = 0;\n\t\t}\n\t\tif (this.cameraPositionIndex >= 0)\n\t\t\tthis.vertexConstantData[this.cameraPositionIndex + 3] = 1;\n\t\t\n\t\t// init constant data in pass\n\t\tthis._pass._iInitConstantData(this);\n\t\t\n\t\t//init constant data in animation\n\t\tif (this.usesAnimation)\n\t\t\tthis._pass.animationSet.doneAGALCode(this);\n\t}\n\n\t/**\n\t * The blend mode to use when drawing this renderable. The following blend modes are supported:\n\t * <ul>\n\t * <li>BlendMode.NORMAL: No blending, unless the material inherently needs it</li>\n\t * <li>BlendMode.LAYER: Force blending. This will draw the object the same as NORMAL, but without writing depth writes.</li>\n\t * <li>BlendMode.MULTIPLY</li>\n\t * <li>BlendMode.ADD</li>\n\t * <li>BlendMode.ALPHA</li>\n\t * </ul>\n\t */\n\tpublic setBlendMode(value:string):void\n\t{\n\t\tswitch (value) {\n\t\t\tcase BlendMode.NORMAL:\n\t\t\t\tthis._blendFactorSource = ContextGLBlendFactor.ONE;\n\t\t\t\tthis._blendFactorDest = ContextGLBlendFactor.ZERO;\n\t\t\t\tthis.usesBlending = false;\n\t\t\t\tbreak;\n\n\t\t\tcase BlendMode.LAYER:\n\t\t\t\tthis._blendFactorSource = ContextGLBlendFactor.SOURCE_ALPHA;\n\t\t\t\tthis._blendFactorDest = ContextGLBlendFactor.ONE_MINUS_SOURCE_ALPHA;\n\t\t\t\tthis.usesBlending = true;\n\t\t\t\tbreak;\n\n\t\t\tcase BlendMode.MULTIPLY:\n\t\t\t\tthis._blendFactorSource = ContextGLBlendFactor.ZERO;\n\t\t\t\tthis._blendFactorDest = ContextGLBlendFactor.SOURCE_COLOR;\n\t\t\t\tthis.usesBlending = true;\n\t\t\t\tbreak;\n\n\t\t\tcase BlendMode.ADD:\n\t\t\t\tthis._blendFactorSource = ContextGLBlendFactor.SOURCE_ALPHA;\n\t\t\t\tthis._blendFactorDest = ContextGLBlendFactor.ONE;\n\t\t\t\tthis.usesBlending = true;\n\t\t\t\tbreak;\n\n\t\t\tcase BlendMode.ALPHA:\n\t\t\t\tthis._blendFactorSource = ContextGLBlendFactor.ZERO;\n\t\t\t\tthis._blendFactorDest = ContextGLBlendFactor.SOURCE_ALPHA;\n\t\t\t\tthis.usesBlending = true;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new ArgumentError(\"Unsupported blend mode!\");\n\t\t}\n\t}\n\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iActivate(camera:Camera):void\n\t{\n\t\tthis._stage.context.setCulling(this.useBothSides? ContextGLTriangleFace.NONE : this._defaultCulling, camera.projection.coordinateSystem);\n\n\t\tif (!this.usesTangentSpace && this.cameraPositionIndex >= 0) {\n\t\t\tvar pos:Vector3D = camera.scenePosition;\n\n\t\t\tthis.vertexConstantData[this.cameraPositionIndex] = pos.x;\n\t\t\tthis.vertexConstantData[this.cameraPositionIndex + 1] = pos.y;\n\t\t\tthis.vertexConstantData[this.cameraPositionIndex + 2] = pos.z;\n\t\t}\n\n\t\tthis._stage.context.setDepthTest(( this.writeDepth && !this.usesBlending ), this.depthCompareMode);\n\n\t\tif (this.usesBlending)\n\t\t\tthis._stage.context.setBlendFactors(this._blendFactorSource, this._blendFactorDest);\n\n\t\tthis.activeElements = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iDeactivate():void\n\t{\n\t\t//For the love of god don't remove this if you want your multi-material shadows to not flicker like shit\n\t\tthis._stage.context.setDepthTest(true, ContextGLCompareMode.LESS);\n\n\t\tthis.activeElements = null;\n\t}\n\n\n\t/**\n\t *\n\t *\n\t * @param renderable\n\t * @param stage\n\t * @param camera\n\t */\n\tpublic _setRenderState(renderable:GL_RenderableBase, camera:Camera, viewProjection:Matrix3D):void\n\t{\n\t\tif (renderable.renderable.animator)\n\t\t\t(<AnimatorBase> renderable.renderable.animator).setRenderState(this, renderable, this._stage, camera);\n\n\t\tif (this.usesUVTransform) {\n\t\t\tvar uvMatrix:Matrix = renderable.uvMatrix;\n\n\t\t\tif (uvMatrix) {\n\t\t\t\tthis.vertexConstantData[this.uvMatrixIndex] = uvMatrix.a;\n\t\t\t\tthis.vertexConstantData[this.uvMatrixIndex + 1] = uvMatrix.b;\n\t\t\t\tthis.vertexConstantData[this.uvMatrixIndex + 3] = uvMatrix.tx;\n\t\t\t\tthis.vertexConstantData[this.uvMatrixIndex + 4] = uvMatrix.c;\n\t\t\t\tthis.vertexConstantData[this.uvMatrixIndex + 5] = uvMatrix.d;\n\t\t\t\tthis.vertexConstantData[this.uvMatrixIndex + 7] = uvMatrix.ty;\n\t\t\t} else {\n\t\t\t\tthis.vertexConstantData[this.uvMatrixIndex] = 1;\n\t\t\t\tthis.vertexConstantData[this.uvMatrixIndex + 1] = 0;\n\t\t\t\tthis.vertexConstantData[this.uvMatrixIndex + 3] = 0;\n\t\t\t\tthis.vertexConstantData[this.uvMatrixIndex + 4] = 0;\n\t\t\t\tthis.vertexConstantData[this.uvMatrixIndex + 5] = 1;\n\t\t\t\tthis.vertexConstantData[this.uvMatrixIndex + 7] = 0;\n\t\t\t}\n\t\t}\n\t\tif (this.usesColorTransform) {\n\n\t\t\tvar colorTransform:ColorTransform = renderable.sourceEntity._iAssignedColorTransform();\n\n\t\t\tif (colorTransform) {\n\t\t\t\tthis.fragmentConstantData[this.colorTransformIndex] = colorTransform.redMultiplier;\n\t\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 1] = colorTransform.greenMultiplier;\n\t\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 2] = colorTransform.blueMultiplier;\n\t\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 3] = colorTransform.alphaMultiplier;\n\t\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 4] = colorTransform.redOffset/255;\n\t\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 5] = colorTransform.greenOffset/255;\n\t\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 6] = colorTransform.blueOffset/255;\n\t\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 7] = colorTransform.alphaOffset/255;\n\t\t\t} else {\n\t\t\t\tthis.fragmentConstantData[this.colorTransformIndex] = 1;\n\t\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 1] = 1;\n\t\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 2] = 1;\n\t\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 3] = 1;\n\t\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 4] = 0;\n\t\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 5] = 0;\n\t\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 6] = 0;\n\t\t\t\tthis.fragmentConstantData[this.colorTransformIndex + 7] = 0;\n\t\t\t}\n\t\t}\n\t\tif (this.sceneNormalMatrixIndex >= 0)\n\t\t\trenderable.sourceEntity.inverseSceneTransform.copyRawDataTo(this.vertexConstantData, this.sceneNormalMatrixIndex, false);\n\n\t\tif (this.usesTangentSpace && this.cameraPositionIndex >= 0) {\n\n\t\t\trenderable.sourceEntity.inverseSceneTransform.copyRawDataTo(this._pInverseSceneMatrix);\n\t\t\tvar pos:Vector3D = camera.scenePosition;\n\t\t\tvar x:number = pos.x;\n\t\t\tvar y:number = pos.y;\n\t\t\tvar z:number = pos.z;\n\n\t\t\tthis.vertexConstantData[this.cameraPositionIndex] = this._pInverseSceneMatrix[0]*x + this._pInverseSceneMatrix[4]*y + this._pInverseSceneMatrix[8]*z + this._pInverseSceneMatrix[12];\n\t\t\tthis.vertexConstantData[this.cameraPositionIndex + 1] = this._pInverseSceneMatrix[1]*x + this._pInverseSceneMatrix[5]*y + this._pInverseSceneMatrix[9]*z + this._pInverseSceneMatrix[13];\n\t\t\tthis.vertexConstantData[this.cameraPositionIndex + 2] = this._pInverseSceneMatrix[2]*x + this._pInverseSceneMatrix[6]*y + this._pInverseSceneMatrix[10]*z + this._pInverseSceneMatrix[14];\n\t\t}\n\t}\n\n\tpublic invalidateProgram():void\n\t{\n\t\tthis._invalidProgram = true;\n\t}\n\n\tpublic dispose():void\n\t{\n\t\tthis._programData.dispose();\n\t\tthis._programData = null;\n\t}\n\n\tprivate _updateProgram():void\n\t{\n\t\tthis._invalidProgram = false;\n\n\t\tvar compiler:CompilerBase = this.createCompiler(this._elementsClass, this._pass);\n\t\tcompiler.compile();\n\n\t\tthis._calcAnimationCode(compiler._pRegisterCache, compiler.shadedTarget, compiler._pSharedRegisters);\n\n\t\t//initialise the required shader constants\n\t\tthis.initConstantData(compiler._pRegisterCache);\n\t\t\n\t\tvar programData:ProgramData = this._stage.getProgramData(this._animationVertexCode + compiler.vertexCode, compiler.fragmentCode + this._animationFragmentCode + compiler.postAnimationFragmentCode);\n\n\t\t//check program data hasn't changed, keep count of program usages\n\t\tif (this._programData != programData) {\n\t\t\tif (this._programData)\n\t\t\t\tthis._programData.dispose();\n\n\t\t\tthis._programData = programData;\n\n\t\t\tprogramData.usages++;\n\t\t}\n\t}\n\n\tprivate _calcAnimationCode(registerCache:ShaderRegisterCache, shadedTarget:ShaderRegisterElement, sharedRegisters:ShaderRegisterData):void\n\t{\n\t\t//reset code\n\t\tthis._animationVertexCode = \"\";\n\t\tthis._animationFragmentCode = \"\";\n\n\t\t//check to see if GPU animation is used\n\t\tif (this.usesAnimation) {\n\n\t\t\tvar animationSet:AnimationSetBase = <AnimationSetBase> this._pass.animationSet;\n\n\t\t\tthis._animationVertexCode += animationSet.getAGALVertexCode(this, registerCache, sharedRegisters);\n\n\t\t\tif (this.uvDependencies > 0 && !this.usesUVTransform)\n\t\t\t\tthis._animationVertexCode += animationSet.getAGALUVCode(this, registerCache, sharedRegisters);\n\n\t\t\tif (this.usesFragmentAnimation)\n\t\t\t\tthis._animationFragmentCode += animationSet.getAGALFragmentCode(this, registerCache, shadedTarget);\n\t\t} else {\n\t\t\t// simply write attributes to targets, do not animate them\n\t\t\t// projection will pick up on targets[0] to do the projection\n\t\t\tvar len:number = sharedRegisters.animatableAttributes.length;\n\t\t\tfor (var i:number = 0; i < len; ++i)\n\t\t\t\tthis._animationVertexCode += \"mov \" + sharedRegisters.animationTargetRegisters[i] + \", \" + sharedRegisters.animatableAttributes[i] + \"\\n\";\n\n\t\t\tif (this.uvDependencies > 0 && !this.usesUVTransform)\n\t\t\t\tthis._animationVertexCode += \"mov \" + sharedRegisters.uvTarget + \",\" + sharedRegisters.uvSource + \"\\n\";\n\t\t}\n\t}\n\n\n\tpublic setVertexConst(index:number, x:number = 0, y:number = 0, z:number = 0, w:number = 0):void\n\t{\n\t\tindex *= 4;\n\t\tthis.vertexConstantData[index++] = x;\n\t\tthis.vertexConstantData[index++] = y;\n\t\tthis.vertexConstantData[index++] = z;\n\t\tthis.vertexConstantData[index] = w;\n\t}\n\n\tpublic setVertexConstFromArray(index:number, data:Float32Array):void\n\t{\n\t\tindex *= 4;\n\t\tfor (var i:number /*int*/ = 0; i < data.length; i++)\n\t\t\tthis.vertexConstantData[index++] = data[i];\n\t}\n\n\tpublic setVertexConstFromMatrix(index:number, matrix:Matrix3D):void\n\t{\n\t\tindex *= 4;\n\t\tvar rawData:Float32Array = matrix.rawData;\n\t\tthis.vertexConstantData[index++] = rawData[0];\n\t\tthis.vertexConstantData[index++] = rawData[4];\n\t\tthis.vertexConstantData[index++] = rawData[8];\n\t\tthis.vertexConstantData[index++] = rawData[12];\n\t\tthis.vertexConstantData[index++] = rawData[1];\n\t\tthis.vertexConstantData[index++] = rawData[5];\n\t\tthis.vertexConstantData[index++] = rawData[9];\n\t\tthis.vertexConstantData[index++] = rawData[13];\n\t\tthis.vertexConstantData[index++] = rawData[2];\n\t\tthis.vertexConstantData[index++] = rawData[6];\n\t\tthis.vertexConstantData[index++] = rawData[10];\n\t\tthis.vertexConstantData[index++] = rawData[14];\n\t\tthis.vertexConstantData[index++] = rawData[3];\n\t\tthis.vertexConstantData[index++] = rawData[7];\n\t\tthis.vertexConstantData[index++] = rawData[11];\n\t\tthis.vertexConstantData[index] = rawData[15];\n\n\t}\n\n\tpublic setFragmentConst(index:number, x:number = 0, y:number = 0, z:number = 0, w:number = 0):void\n\t{\n\t\tindex *= 4;\n\t\tthis.fragmentConstantData[index++] = x;\n\t\tthis.fragmentConstantData[index++] = y;\n\t\tthis.fragmentConstantData[index++] = z;\n\t\tthis.fragmentConstantData[index] = w;\n\t}\n}",
    "import {RegisterPool}\t\t\t\t\tfrom \"../shaders/RegisterPool\";\nimport {ShaderRegisterElement}\t\tfrom \"../shaders/ShaderRegisterElement\";\n\n/**\n * ShaderRegister Cache provides the usage management system for all registers during shading compilers.\n */\nexport class ShaderRegisterCache\n{\n\tprivate _fragmentTempCache:RegisterPool;\n\tprivate _vertexTempCache:RegisterPool;\n\tprivate _varyingCache:RegisterPool;\n\tprivate _fragmentConstantsCache:RegisterPool;\n\tprivate _vertexConstantsCache:RegisterPool;\n\tprivate _textureCache:RegisterPool;\n\tprivate _vertexAttributesCache:RegisterPool;\n\n\tprivate _fragmentOutputRegister:ShaderRegisterElement;\n\tprivate _vertexOutputRegister:ShaderRegisterElement;\n\tprivate _numUsedVertexConstants:number = 0;\n\tprivate _numUsedFragmentConstants:number = 0;\n\tprivate _numUsedStreams:number = 0;\n\tprivate _numUsedTextures:number = 0;\n\tprivate _numUsedVaryings:number = 0;\n\tprivate _profile:string;\n\n\t/**\n\t * Create a new ShaderRegisterCache object.\n\t *\n\t * @param profile The compatibility profile used by the renderer.\n\t */\n\tconstructor(profile:string)\n\t{\n\t\tthis._profile = profile;\n\t\t\n\t\tthis.reset();\n\t}\n\n\t/**\n\t * Resets all registers.\n\t */\n\tpublic reset():void\n\t{\n\t\tthis._fragmentTempCache = new RegisterPool(\"ft\", 8, false);\n\t\tthis._vertexTempCache = new RegisterPool(\"vt\", 8, false);\n\t\tthis._varyingCache = new RegisterPool(\"v\", 8);\n\t\tthis._textureCache = new RegisterPool(\"fs\", 8);\n\t\tthis._vertexAttributesCache = new RegisterPool(\"va\", 8);\n\t\tthis._fragmentConstantsCache = new RegisterPool(\"fc\", 28);\n\t\tthis._vertexConstantsCache = new RegisterPool(\"vc\", 128);\n\t\tthis._fragmentOutputRegister = new ShaderRegisterElement(\"oc\", -1);\n\t\tthis._vertexOutputRegister = new ShaderRegisterElement(\"op\", -1);\n\t\tthis._numUsedVertexConstants = 0;\n\t\tthis._numUsedStreams = 0;\n\t\tthis._numUsedTextures = 0;\n\t\tthis._numUsedVaryings = 0;\n\t\tthis._numUsedFragmentConstants = 0;\n\t}\n\n\t/**\n\t * Disposes all resources used.\n\t */\n\tpublic dispose():void\n\t{\n\t\tthis._fragmentTempCache.dispose();\n\t\tthis._vertexTempCache.dispose();\n\t\tthis._varyingCache.dispose();\n\t\tthis._fragmentConstantsCache.dispose();\n\t\tthis._vertexAttributesCache.dispose();\n\n\t\tthis._fragmentTempCache = null;\n\t\tthis._vertexTempCache = null;\n\t\tthis._varyingCache = null;\n\t\tthis._fragmentConstantsCache = null;\n\t\tthis._vertexAttributesCache = null;\n\t\tthis._fragmentOutputRegister = null;\n\t\tthis._vertexOutputRegister = null;\n\t}\n\n\t/**\n\t * Marks a fragment temporary register as used, so it cannot be retrieved. The register won't be able to be used until removeUsage\n\t * has been called usageCount times again.\n\t * @param register The register to mark as used.\n\t * @param usageCount The amount of usages to add.\n\t */\n\tpublic addFragmentTempUsages(register:ShaderRegisterElement, usageCount:number):void\n\t{\n\t\tthis._fragmentTempCache.addUsage(register, usageCount);\n\t}\n\n\t/**\n\t * Removes a usage from a fragment temporary register. When usages reach 0, the register is freed again.\n\t * @param register The register for which to remove a usage.\n\t */\n\tpublic removeFragmentTempUsage(register:ShaderRegisterElement):void\n\t{\n\t\tthis._fragmentTempCache.removeUsage(register);\n\t}\n\n\t/**\n\t * Marks a vertex temporary register as used, so it cannot be retrieved. The register won't be able to be used\n\t * until removeUsage has been called usageCount times again.\n\t * @param register The register to mark as used.\n\t * @param usageCount The amount of usages to add.\n\t */\n\tpublic addVertexTempUsages(register:ShaderRegisterElement, usageCount:number):void\n\t{\n\t\tthis._vertexTempCache.addUsage(register, usageCount);\n\t}\n\n\t/**\n\t * Removes a usage from a vertex temporary register. When usages reach 0, the register is freed again.\n\t * @param register The register for which to remove a usage.\n\t */\n\tpublic removeVertexTempUsage(register:ShaderRegisterElement):void\n\t{\n\t\tthis._vertexTempCache.removeUsage(register);\n\t}\n\n\t/**\n\t * Retrieve an entire fragment temporary register that's still available. The register won't be able to be used until removeUsage\n\t * has been called usageCount times again.\n\t */\n\tpublic getFreeFragmentVectorTemp():ShaderRegisterElement\n\t{\n\t\treturn this._fragmentTempCache.requestFreeVectorReg();\n\t}\n\n\t/**\n\t * Retrieve a single component from a fragment temporary register that's still available.\n\t */\n\tpublic getFreeFragmentSingleTemp():ShaderRegisterElement\n\t{\n\t\treturn this._fragmentTempCache.requestFreeRegComponent();\n\t}\n\n\t/**\n\t * Retrieve an available varying register\n\t */\n\tpublic getFreeVarying():ShaderRegisterElement\n\t{\n\t\t++this._numUsedVaryings;\n\t\treturn this._varyingCache.requestFreeVectorReg();\n\t}\n\n\t/**\n\t * Retrieve an available fragment constant register\n\t */\n\tpublic getFreeFragmentConstant():ShaderRegisterElement\n\t{\n\t\t++this._numUsedFragmentConstants;\n\t\treturn this._fragmentConstantsCache.requestFreeVectorReg();\n\t}\n\n\t/**\n\t * Retrieve an available vertex constant register\n\t */\n\tpublic getFreeVertexConstant():ShaderRegisterElement\n\t{\n\t\t++this._numUsedVertexConstants;\n\t\treturn this._vertexConstantsCache.requestFreeVectorReg();\n\t}\n\n\t/**\n\t * Retrieve an entire vertex temporary register that's still available.\n\t */\n\tpublic getFreeVertexVectorTemp():ShaderRegisterElement\n\t{\n\t\treturn this._vertexTempCache.requestFreeVectorReg();\n\t}\n\n\t/**\n\t * Retrieve a single component from a vertex temporary register that's still available.\n\t */\n\tpublic getFreeVertexSingleTemp():ShaderRegisterElement\n\t{\n\t\treturn this._vertexTempCache.requestFreeRegComponent();\n\t}\n\n\t/**\n\t * Retrieve an available vertex attribute register\n\t */\n\tpublic getFreeVertexAttribute():ShaderRegisterElement\n\t{\n\t\t++this._numUsedStreams;\n\t\treturn this._vertexAttributesCache.requestFreeVectorReg();\n\t}\n\n\t/**\n\t * Retrieve an available texture register\n\t */\n\tpublic getFreeTextureReg():ShaderRegisterElement\n\t{\n\t\t++this._numUsedTextures;\n\t\treturn this._textureCache.requestFreeVectorReg();\n\t}\n\n\t/**\n\t * The fragment output register.\n\t */\n\tpublic get fragmentOutputRegister():ShaderRegisterElement\n\t{\n\t\treturn this._fragmentOutputRegister;\n\t}\n\n\t/**\n\t * The amount of used vertex constant registers.\n\t */\n\tpublic get numUsedVertexConstants():number\n\t{\n\t\treturn this._numUsedVertexConstants;\n\t}\n\n\t/**\n\t * The amount of used fragment constant registers.\n\t */\n\tpublic get numUsedFragmentConstants():number\n\t{\n\t\treturn this._numUsedFragmentConstants;\n\t}\n\n\t/**\n\t * The amount of used vertex streams.\n\t */\n\tpublic get numUsedStreams():number\n\t{\n\t\treturn this._numUsedStreams;\n\t}\n\n\t/**\n\t * The amount of used texture slots.\n\t */\n\tpublic get numUsedTextures():number\n\t{\n\t\treturn this._numUsedTextures;\n\t}\n\n\t/**\n\t * The amount of used varying registers.\n\t */\n\tpublic get numUsedVaryings():number\n\t{\n\t\treturn this._numUsedVaryings;\n\t}\n}",
    "import {ShaderRegisterElement}\t\tfrom \"../shaders/ShaderRegisterElement\";\n\n/**\n * ShaderRegisterData contains the \"named\" registers, generated by the compiler and to be passed on to the methods.\n */\nexport class ShaderRegisterData\n{\n\tpublic uvVarying:ShaderRegisterElement;\n\tpublic secondaryUVVarying:ShaderRegisterElement;\n\tpublic shadowTarget:ShaderRegisterElement;\n\tpublic shadedTarget:ShaderRegisterElement;\n\tpublic globalPositionVertex:ShaderRegisterElement;\n\tpublic globalPositionVarying:ShaderRegisterElement;\n\n\tpublic animatedPosition:ShaderRegisterElement;\n\tpublic positionVarying:ShaderRegisterElement;\n\n\tpublic curvesInput:ShaderRegisterElement;\n\tpublic curvesVarying:ShaderRegisterElement;\n\n\tpublic normalInput:ShaderRegisterElement;\n\tpublic animatedNormal:ShaderRegisterElement;\n\tpublic normalVarying:ShaderRegisterElement;\n\tpublic normalFragment:ShaderRegisterElement;\n\n\tpublic tangentInput:ShaderRegisterElement;\n\tpublic animatedTangent:ShaderRegisterElement;\n\tpublic tangentVarying:ShaderRegisterElement;\n\tpublic bitangentVarying:ShaderRegisterElement;\n\n\tpublic colorInput:ShaderRegisterElement;\n\tpublic colorVarying:ShaderRegisterElement;\n\n\tpublic commons:ShaderRegisterElement;\n\tpublic projectionFragment:ShaderRegisterElement;\n\n\tpublic viewDirVarying:ShaderRegisterElement;\n\tpublic viewDirFragment:ShaderRegisterElement;\n\tpublic bitangent:ShaderRegisterElement;\n\n\tpublic textures:Array<ShaderRegisterElement> = new Array<ShaderRegisterElement>();\n\n\tpublic animatableAttributes:Array<ShaderRegisterElement> = new Array<ShaderRegisterElement>();\n\tpublic animationTargetRegisters:Array<ShaderRegisterElement> = new Array<ShaderRegisterElement>();\n\tpublic uvSource:ShaderRegisterElement;\n\tpublic uvTarget:ShaderRegisterElement;\n\n\tconstructor()\n\t{\n\n\t}\n}",
    "/**\n * A single register element (an entire register or a single register's component) used by the RegisterPool.\n */\nexport class ShaderRegisterElement\n{\n\tprivate _regName:string;\n\tprivate _index:number;\n\tprivate _toStr:string;\n\n\tprivate static COMPONENTS = [\"x\", \"y\", \"z\", \"w\"];\n\n\tpublic _component:number;\n\n\t/**\n\t * Creates a new ShaderRegisterElement object.\n\t *\n\t * @param regName The name of the register.\n\t * @param index The index of the register.\n\t * @param component The register's component, if not the entire register is represented.\n\t */\n\tconstructor(regName:string, index:number, component:number = -1)\n\t{\n\t\tthis._component = component;\n\t\tthis._regName = regName;\n\t\tthis._index = index;\n\n\t\tthis._toStr = this._regName;\n\n\t\tif (this._index >= 0)\n\t\t\tthis._toStr += this._index;\n\n\t\tif (component > -1)\n\t\t\tthis._toStr += \".\" + ShaderRegisterElement.COMPONENTS[component];\n\t}\n\n\t/**\n\t * Converts the register or the components AGAL string representation.\n\t */\n\tpublic toString():string\n\t{\n\t\treturn this._toStr;\n\t}\n\n\t/**\n\t * The register's name.\n\t */\n\tpublic get regName():string\n\t{\n\t\treturn this._regName;\n\t}\n\n\t/**\n\t * The register's index.\n\t */\n\tpublic get index():number\n\t{\n\t\treturn this._index;\n\t}\n}",
    "import {ShaderBase}\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\nimport {ShaderRegisterCache}\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterData}\t\t\tfrom \"../../shaders/ShaderRegisterData\";\nimport {ShaderRegisterElement}\t\tfrom \"../../shaders/ShaderRegisterElement\";\nimport {IPass}\t\t\t\t\t\tfrom \"../../surfaces/passes/IPass\";\nimport {IElementsClassGL}\t\t\t\tfrom \"../../elements/IElementsClassGL\";\n\n/**\n * CompilerBase is an abstract base class for shader compilers that use modular shader methods to assemble a\n * material. Concrete subclasses are used by the default materials.\n *\n * @see away.materials.ShadingMethodBase\n */\nexport class CompilerBase\n{\n\tpublic _pShader:ShaderBase;\n\tpublic _pSharedRegisters:ShaderRegisterData;\n\tpublic _pRegisterCache:ShaderRegisterCache;\n\tpublic _pElementsClass:IElementsClassGL;\n\tpublic _pRenderPass:IPass;\n\n\tpublic _pVertexCode:string = ''; // Changed to emtpy string- AwayTS\n\tpublic _pFragmentCode:string = '';// Changed to emtpy string - AwayTS\n\tpublic _pPostAnimationFragmentCode:string = '';// Changed to emtpy string - AwayTS\n\n\t/**\n\t * Creates a new CompilerBase object.\n\t * @param profile The compatibility profile of the renderer.\n\t */\n\tconstructor(elementsClass:IElementsClassGL, pass:IPass, shader:ShaderBase)\n\t{\n\t\tthis._pElementsClass = elementsClass;\n\t\tthis._pRenderPass = pass;\n\t\tthis._pShader = shader;\n\n\t\tthis._pSharedRegisters = new ShaderRegisterData();\n\n\t\tthis._pRegisterCache = new ShaderRegisterCache(shader.profile);\n\t}\n\n\t/**\n\t * Compiles the code after all setup on the compiler has finished.\n\t */\n\tpublic compile():void\n\t{\n\t\tthis._pShader.reset();\n\n\t\tthis._pShader._iIncludeDependencies();\n\n\t\tthis.pInitRegisterIndices();\n\n\t\tthis.pCompileDependencies();\n\n\t\t//compile custom vertex & fragment codes\n\t\tthis._pVertexCode += this._pRenderPass._iGetVertexCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\n\t\tthis._pPostAnimationFragmentCode += this._pRenderPass._iGetFragmentCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\n\n\t\tif (this._pShader.usesColorTransform)\n\t\t\tthis.compileColorTransformCode();\n\t\telse\n\t\t\tthis._pShader.colorTransformIndex = -1;\n\n\t\t//assign the final output color to the output register\n\t\tthis._pPostAnimationFragmentCode += \"mov \" + this._pRegisterCache.fragmentOutputRegister + \", \" + this._pSharedRegisters.shadedTarget + \"\\n\";\n\t\tthis._pRegisterCache.removeFragmentTempUsage(this._pSharedRegisters.shadedTarget);\n\t}\n\t/**\n\t * Calculate the transformed colours\n\t */\n\tprivate compileColorTransformCode():void\n\t{\n\t\t// rm, gm, bm, am - multiplier\n\t\t// ro, go, bo, ao - offset\n\t\tvar ct1:ShaderRegisterElement = this._pRegisterCache.getFreeFragmentConstant();\n\t\tvar ct2:ShaderRegisterElement = this._pRegisterCache.getFreeFragmentConstant();\n\t\tthis._pShader.colorTransformIndex = ct1.index*4;\n\t\tthis._pPostAnimationFragmentCode += \"mul \" + this._pSharedRegisters.shadedTarget + \", \" + this._pSharedRegisters.shadedTarget + \", \" + ct1 + \"\\n\";\n\t\tthis._pPostAnimationFragmentCode += \"add \" + this._pSharedRegisters.shadedTarget + \", \" + this._pSharedRegisters.shadedTarget + \", \" + ct2 + \"\\n\";\n\t}\n\t/**\n\t * Compile the code for the methods.\n\t */\n\tpublic pCompileDependencies():void\n\t{\n\t\tthis._pSharedRegisters.shadedTarget = this._pRegisterCache.getFreeFragmentVectorTemp();\n\t\tthis._pRegisterCache.addFragmentTempUsages(this._pSharedRegisters.shadedTarget, 1);\n\n\t\t//compile the world-space position if required\n\t\tif (this._pShader.globalPosDependencies > 0)\n\t\t\tthis.compileGlobalPositionCode();\n\n        //compile the local-space position if required\n        if (this._pShader.usesPositionFragment)\n            this.compilePositionCode();\n\n\t\tif (this._pShader.usesCurves)\n\t\t\tthis.compileCurvesCode();\n\n\t\t//Calculate the (possibly animated) UV coordinates.\n\t\tif (this._pShader.uvDependencies > 0)\n\t\t\tthis.compileUVCode();\n\n\t\tif (this._pShader.secondaryUVDependencies > 0)\n\t\t\tthis.compileSecondaryUVCode();\n\n\t\tif (this._pShader.normalDependencies > 0)\n\t\t\tthis.compileNormalCode();\n\n\t\tif (this._pShader.viewDirDependencies > 0)\n\t\t\tthis.compileViewDirCode();\n\n\t\t//collect code from material\n\t\tthis._pVertexCode += this._pElementsClass._iGetVertexCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\n\t\tthis._pFragmentCode += this._pElementsClass._iGetFragmentCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\n\n\t\t//collect code from pass\n\t\tthis._pVertexCode += this._pRenderPass._iGetPreLightingVertexCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\n\t\tthis._pFragmentCode += this._pRenderPass._iGetPreLightingFragmentCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\n\t}\n\n\tprivate compileGlobalPositionCode():void\n\t{\n\t\tthis._pRegisterCache.addVertexTempUsages(this._pSharedRegisters.globalPositionVertex = this._pRegisterCache.getFreeVertexVectorTemp(), this._pShader.globalPosDependencies);\n\n\t\tvar sceneMatrixReg:ShaderRegisterElement = this._pRegisterCache.getFreeVertexConstant();\n\t\tthis._pRegisterCache.getFreeVertexConstant();\n\t\tthis._pRegisterCache.getFreeVertexConstant();\n\t\tthis._pRegisterCache.getFreeVertexConstant();\n\n\t\tthis._pShader.sceneMatrixIndex = sceneMatrixReg.index*4;\n\n\t\tthis._pVertexCode += \"m44 \" + this._pSharedRegisters.globalPositionVertex + \", \" + this._pSharedRegisters.animatedPosition + \", \" + sceneMatrixReg + \"\\n\";\n\n\t\tif (this._pShader.usesGlobalPosFragment) {\n\t\t\tthis._pSharedRegisters.globalPositionVarying = this._pRegisterCache.getFreeVarying();\n\t\t\tthis._pVertexCode += \"mov \" + this._pSharedRegisters.globalPositionVarying + \", \" + this._pSharedRegisters.globalPositionVertex + \"\\n\";\n\t\t}\n\t}\n\n    private compilePositionCode()\n    {\n        this._pSharedRegisters.positionVarying = this._pRegisterCache.getFreeVarying();\n        this._pVertexCode += \"mov \" + this._pSharedRegisters.positionVarying + \", \" + this._pSharedRegisters.animatedPosition + \"\\n\";\n    }\n\n\n\tprivate compileCurvesCode():void\n\t{\n\t\tthis._pSharedRegisters.curvesInput = this._pRegisterCache.getFreeVertexAttribute();\n\t\tthis._pShader.curvesIndex = this._pSharedRegisters.curvesInput.index;\n\n\t\tthis._pSharedRegisters.curvesVarying = this._pRegisterCache.getFreeVarying();\n\t\tthis._pVertexCode += \"mov \" + this._pSharedRegisters.curvesVarying + \", \" + this._pSharedRegisters.curvesInput + \"\\n\";\n\n\t\tvar temp:ShaderRegisterElement = this._pRegisterCache.getFreeFragmentSingleTemp();\n\n\t\tthis._pFragmentCode += \"mul \" + temp + \", \" + this._pSharedRegisters.curvesVarying + \".y, \" + this._pSharedRegisters.curvesVarying + \".y\\n\" +\n\t\t\t\t\t\t\t\"sub \" + temp + \", \" + temp + \", \" + this._pSharedRegisters.curvesVarying + \".z\\n\" +\n\t\t\t\t\t\t\t\"mul \" + temp + \", \" + temp + \", \" + this._pSharedRegisters.curvesVarying + \".x\\n\" +\n\t\t\t\t\t\t\t\"kil \" + temp + \"\\n\";\n\t}\n\n\t/**\n\t * Calculate the (possibly animated) UV coordinates.\n\t */\n\tprivate compileUVCode():void\n\t{\n\t\tvar uvAttributeReg:ShaderRegisterElement = this._pRegisterCache.getFreeVertexAttribute();\n\t\tthis._pShader.uvIndex = uvAttributeReg.index;\n\n\t\tvar varying:ShaderRegisterElement = this._pSharedRegisters.uvVarying = this._pRegisterCache.getFreeVarying();\n\n\t\tif (this._pShader.usesUVTransform) {\n\t\t\t// a, b, 0, tx\n\t\t\t// c, d, 0, ty\n\t\t\tvar uvTransform1:ShaderRegisterElement = this._pRegisterCache.getFreeVertexConstant();\n\t\t\tvar uvTransform2:ShaderRegisterElement = this._pRegisterCache.getFreeVertexConstant();\n\t\t\tthis._pShader.uvMatrixIndex = uvTransform1.index*4;\n\n\t\t\tthis._pVertexCode += \"dp4 \" + varying + \".x, \" + uvAttributeReg + \", \" + uvTransform1 + \"\\n\" +\n\t\t\t\t\t\t\t\t \"dp4 \" + varying + \".y, \" + uvAttributeReg + \", \" + uvTransform2 + \"\\n\" +\n\t\t\t\t\t\t\t\t \"mov \" + varying + \".zw, \" + uvAttributeReg + \".zw \\n\";\n\t\t} else {\n\t\t\tthis._pShader.uvMatrixIndex = -1;\n\t\t\tthis._pSharedRegisters.uvTarget = varying;\n\t\t\tthis._pSharedRegisters.uvSource = uvAttributeReg;\n\t\t}\n\t}\n\n\t/**\n\t * Provide the secondary UV coordinates.\n\t */\n\tprivate compileSecondaryUVCode():void\n\t{\n\t\tvar uvAttributeReg:ShaderRegisterElement = this._pRegisterCache.getFreeVertexAttribute();\n\t\tthis._pShader.secondaryUVIndex = uvAttributeReg.index;\n\t\tthis._pSharedRegisters.secondaryUVVarying = this._pRegisterCache.getFreeVarying();\n\t\tthis._pVertexCode += \"mov \" + this._pSharedRegisters.secondaryUVVarying + \", \" + uvAttributeReg + \"\\n\";\n\t}\n\n\t/**\n\t * Calculate the view direction.\n\t */\n\tpublic compileViewDirCode():void\n\t{\n\t\tvar cameraPositionReg:ShaderRegisterElement = this._pRegisterCache.getFreeVertexConstant();\n\t\tthis._pSharedRegisters.viewDirVarying = this._pRegisterCache.getFreeVarying();\n\t\tthis._pSharedRegisters.viewDirFragment = this._pRegisterCache.getFreeFragmentVectorTemp();\n\t\tthis._pRegisterCache.addFragmentTempUsages(this._pSharedRegisters.viewDirFragment, this._pShader.viewDirDependencies);\n\n\t\tthis._pShader.cameraPositionIndex = cameraPositionReg.index*4;\n\n\t\tif (this._pShader.usesTangentSpace) {\n\t\t\tvar temp:ShaderRegisterElement = this._pRegisterCache.getFreeVertexVectorTemp();\n\t\t\tthis._pVertexCode += \"sub \" + temp + \", \" + cameraPositionReg + \", \" + this._pSharedRegisters.animatedPosition + \"\\n\" +\n\t\t\t\t\"m33 \" + this._pSharedRegisters.viewDirVarying + \".xyz, \" + temp + \", \" + this._pSharedRegisters.animatedTangent + \"\\n\" +\n\t\t\t\t\"mov \" + this._pSharedRegisters.viewDirVarying + \".w, \" + this._pSharedRegisters.animatedPosition + \".w\\n\";\n\t\t} else {\n\t\t\tthis._pVertexCode += \"sub \" + this._pSharedRegisters.viewDirVarying + \", \" + cameraPositionReg + \", \" + this._pSharedRegisters.globalPositionVertex + \"\\n\";\n\t\t\tthis._pRegisterCache.removeVertexTempUsage(this._pSharedRegisters.globalPositionVertex);\n\t\t}\n\n\t\t//TODO is this required in all cases? (re: distancemappass)\n\t\tthis._pFragmentCode += \"nrm \" + this._pSharedRegisters.viewDirFragment + \".xyz, \" + this._pSharedRegisters.viewDirVarying + \"\\n\" +\n\t\t\t\"mov \" + this._pSharedRegisters.viewDirFragment + \".w,   \" + this._pSharedRegisters.viewDirVarying + \".w\\n\";\n\t}\n\n\t/**\n\t * Calculate the normal.\n\t */\n\tpublic compileNormalCode():void\n\t{\n\t\tthis._pSharedRegisters.normalFragment = this._pRegisterCache.getFreeFragmentVectorTemp();\n\t\tthis._pRegisterCache.addFragmentTempUsages(this._pSharedRegisters.normalFragment, this._pShader.normalDependencies);\n\n\t\t//simple normal aquisition if no tangent space is being used\n\t\tif (this._pShader.outputsNormals && !this._pShader.outputsTangentNormals) {\n\t\t\tthis._pVertexCode += this._pRenderPass._iGetNormalVertexCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\n\t\t\tthis._pFragmentCode += this._pRenderPass._iGetNormalFragmentCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\n\n\t\t\treturn;\n\t\t}\n\n\t\tvar normalMatrix:Array<ShaderRegisterElement>;\n\n\t\tif (!this._pShader.outputsNormals || !this._pShader.usesTangentSpace) {\n\t\t\tnormalMatrix = new Array<ShaderRegisterElement>(3);\n\t\t\tnormalMatrix[0] = this._pRegisterCache.getFreeVertexConstant();\n\t\t\tnormalMatrix[1] = this._pRegisterCache.getFreeVertexConstant();\n\t\t\tnormalMatrix[2] = this._pRegisterCache.getFreeVertexConstant();\n\n\t\t\tthis._pRegisterCache.getFreeVertexConstant();\n\n\t\t\tthis._pShader.sceneNormalMatrixIndex = normalMatrix[0].index*4;\n\n\t\t\tthis._pSharedRegisters.normalVarying = this._pRegisterCache.getFreeVarying();\n\t\t}\n\n\t\tif (this._pShader.outputsNormals) {\n\t\t\tif (this._pShader.usesTangentSpace) {\n\t\t\t\t// normalize normal + tangent vector and generate (approximated) bitangent used in m33 operation for view\n\t\t\t\tthis._pVertexCode += \"nrm \" + this._pSharedRegisters.animatedNormal + \".xyz, \" + this._pSharedRegisters.animatedNormal + \"\\n\" +\n\t\t\t\t\t\"nrm \" + this._pSharedRegisters.animatedTangent + \".xyz, \" + this._pSharedRegisters.animatedTangent + \"\\n\" +\n\t\t\t\t\t\"crs \" + this._pSharedRegisters.bitangent + \".xyz, \" + this._pSharedRegisters.animatedNormal + \", \" + this._pSharedRegisters.animatedTangent + \"\\n\";\n\n\t\t\t\tthis._pFragmentCode += this._pRenderPass._iGetNormalFragmentCode(this._pShader, this._pRegisterCache, this._pSharedRegisters);\n\t\t\t} else {\n\t\t\t\t//Compiles the vertex shader code for tangent-space normal maps.\n\t\t\t\tthis._pSharedRegisters.tangentVarying = this._pRegisterCache.getFreeVarying();\n\t\t\t\tthis._pSharedRegisters.bitangentVarying = this._pRegisterCache.getFreeVarying();\n\t\t\t\tvar temp:ShaderRegisterElement = this._pRegisterCache.getFreeVertexVectorTemp();\n\n\t\t\t\tthis._pVertexCode += \"m33 \" + temp + \".xyz, \" + this._pSharedRegisters.animatedNormal + \", \" + normalMatrix[0] + \"\\n\" +\n\t\t\t\t\t\"nrm \" + this._pSharedRegisters.animatedNormal + \".xyz, \" + temp + \"\\n\" +\n\t\t\t\t\t\"m33 \" + temp + \".xyz, \" + this._pSharedRegisters.animatedTangent + \", \" + normalMatrix[0] + \"\\n\" +\n\t\t\t\t\t\"nrm \" + this._pSharedRegisters.animatedTangent + \".xyz, \" + temp + \"\\n\" +\n\t\t\t\t\t\"mov \" + this._pSharedRegisters.tangentVarying + \".x, \" + this._pSharedRegisters.animatedTangent + \".x  \\n\" +\n\t\t\t\t\t\"mov \" + this._pSharedRegisters.tangentVarying + \".z, \" + this._pSharedRegisters.animatedNormal + \".x  \\n\" +\n\t\t\t\t\t\"mov \" + this._pSharedRegisters.tangentVarying + \".w, \" + this._pSharedRegisters.normalInput + \".w  \\n\" +\n\t\t\t\t\t\"mov \" + this._pSharedRegisters.bitangentVarying + \".x, \" + this._pSharedRegisters.animatedTangent + \".y  \\n\" +\n\t\t\t\t\t\"mov \" + this._pSharedRegisters.bitangentVarying + \".z, \" + this._pSharedRegisters.animatedNormal + \".y  \\n\" +\n\t\t\t\t\t\"mov \" + this._pSharedRegisters.bitangentVarying + \".w, \" + this._pSharedRegisters.normalInput + \".w  \\n\" +\n\t\t\t\t\t\"mov \" + this._pSharedRegisters.normalVarying + \".x, \" + this._pSharedRegisters.animatedTangent + \".z  \\n\" +\n\t\t\t\t\t\"mov \" + this._pSharedRegisters.normalVarying + \".z, \" + this._pSharedRegisters.animatedNormal + \".z  \\n\" +\n\t\t\t\t\t\"mov \" + this._pSharedRegisters.normalVarying + \".w, \" + this._pSharedRegisters.normalInput + \".w  \\n\" +\n\t\t\t\t\t\"crs \" + temp + \".xyz, \" + this._pSharedRegisters.animatedNormal + \", \" + this._pSharedRegisters.animatedTangent + \"\\n\" +\n\t\t\t\t\t\"mov \" + this._pSharedRegisters.tangentVarying + \".y, \" + temp + \".x    \\n\" +\n\t\t\t\t\t\"mov \" + this._pSharedRegisters.bitangentVarying + \".y, \" + temp + \".y  \\n\" +\n\t\t\t\t\t\"mov \" + this._pSharedRegisters.normalVarying + \".y, \" + temp + \".z    \\n\";\n\n\t\t\t\tthis._pRegisterCache.removeVertexTempUsage(this._pSharedRegisters.animatedTangent);\n\n\t\t\t\t//Compiles the fragment shader code for tangent-space normal maps.\n\t\t\t\tvar t:ShaderRegisterElement;\n\t\t\t\tvar b:ShaderRegisterElement;\n\t\t\t\tvar n:ShaderRegisterElement;\n\n\t\t\t\tt = this._pRegisterCache.getFreeFragmentVectorTemp();\n\t\t\t\tthis._pRegisterCache.addFragmentTempUsages(t, 1);\n\t\t\t\tb = this._pRegisterCache.getFreeFragmentVectorTemp();\n\t\t\t\tthis._pRegisterCache.addFragmentTempUsages(b, 1);\n\t\t\t\tn = this._pRegisterCache.getFreeFragmentVectorTemp();\n\t\t\t\tthis._pRegisterCache.addFragmentTempUsages(n, 1);\n\n\t\t\t\tthis._pFragmentCode += \"nrm \" + t + \".xyz, \" + this._pSharedRegisters.tangentVarying + \"\\n\" +\n\t\t\t\t\t\"mov \" + t + \".w, \" + this._pSharedRegisters.tangentVarying + \".w\t\\n\" +\n\t\t\t\t\t\"nrm \" + b + \".xyz, \" + this._pSharedRegisters.bitangentVarying + \"\\n\" +\n\t\t\t\t\t\"nrm \" + n + \".xyz, \" + this._pSharedRegisters.normalVarying + \"\\n\";\n\n\t\t\t\t//compile custom fragment code for normal calcs\n\t\t\t\tthis._pFragmentCode += this._pRenderPass._iGetNormalFragmentCode(this._pShader, this._pRegisterCache, this._pSharedRegisters) +\n\t\t\t\t\t\"m33 \" + this._pSharedRegisters.normalFragment + \".xyz, \" + this._pSharedRegisters.normalFragment + \", \" + t + \"\\n\" +\n\t\t\t\t\t\"mov \" + this._pSharedRegisters.normalFragment + \".w, \" + this._pSharedRegisters.normalVarying + \".w\\n\";\n\n\t\t\t\tthis._pRegisterCache.removeFragmentTempUsage(b);\n\t\t\t\tthis._pRegisterCache.removeFragmentTempUsage(t);\n\t\t\t\tthis._pRegisterCache.removeFragmentTempUsage(n);\n\t\t\t}\n\t\t} else {\n\t\t\t// no output, world space is enough\n\t\t\tthis._pVertexCode += \"m33 \" + this._pSharedRegisters.normalVarying + \".xyz, \" + this._pSharedRegisters.animatedNormal + \", \" + normalMatrix[0] + \"\\n\" +\n\t\t\t\t\"mov \" + this._pSharedRegisters.normalVarying + \".w, \" + this._pSharedRegisters.animatedNormal + \".w\\n\";\n\n\t\t\tthis._pFragmentCode += \"nrm \" + this._pSharedRegisters.normalFragment + \".xyz, \" + this._pSharedRegisters.normalVarying + \"\\n\" +\n\t\t\t\t\"mov \" + this._pSharedRegisters.normalFragment + \".w, \" + this._pSharedRegisters.normalVarying + \".w\\n\";\n\n\t\t\tif (this._pShader.tangentDependencies > 0) {\n\t\t\t\tthis._pSharedRegisters.tangentVarying = this._pRegisterCache.getFreeVarying();\n\n\t\t\t\tthis._pVertexCode += \"m33 \" + this._pSharedRegisters.tangentVarying + \".xyz, \" + this._pSharedRegisters.animatedTangent + \", \" + normalMatrix[0] + \"\\n\" +\n\t\t\t\t\t\"mov \" + this._pSharedRegisters.tangentVarying + \".w, \" + this._pSharedRegisters.animatedTangent + \".w\\n\";\n\t\t\t}\n\t\t}\n\n\t\tif (!this._pShader.usesTangentSpace)\n\t\t\tthis._pRegisterCache.removeVertexTempUsage(this._pSharedRegisters.animatedNormal);\n\t}\n\n\t/**\n\t * Reset all the indices to \"unused\".\n\t */\n\tpublic pInitRegisterIndices():void\n\t{\n\t\tthis._pShader.pInitRegisterIndices();\n\n\t\tthis._pSharedRegisters.animatedPosition = this._pRegisterCache.getFreeVertexVectorTemp();\n\t\tthis._pRegisterCache.addVertexTempUsages(this._pSharedRegisters.animatedPosition, 1);\n\n\t\tthis._pSharedRegisters.animatableAttributes.push(this._pRegisterCache.getFreeVertexAttribute());\n\t\tthis._pSharedRegisters.animationTargetRegisters.push(this._pSharedRegisters.animatedPosition);\n\t\tthis._pVertexCode = \"\";\n\t\tthis._pFragmentCode = \"\";\n\t\tthis._pPostAnimationFragmentCode = \"\";\n\n\n\t\t//create commonly shared constant registers\n\t\tif (this._pShader.usesCommonData || this._pShader.normalDependencies > 0) {\n\t\t\tthis._pSharedRegisters.commons = this._pRegisterCache.getFreeFragmentConstant();\n\t\t\tthis._pShader.commonsDataIndex = this._pSharedRegisters.commons.index*4;\n\t\t}\n\n\t\t//Creates the registers to contain the tangent data.\n\t\t//Needs to be created FIRST and in this order (for when using tangent space)\n\t\tif (this._pShader.tangentDependencies > 0 || this._pShader.outputsNormals) {\n\t\t\tthis._pSharedRegisters.tangentInput = this._pRegisterCache.getFreeVertexAttribute();\n\t\t\tthis._pShader.tangentIndex = this._pSharedRegisters.tangentInput.index;\n\n\t\t\tthis._pSharedRegisters.animatedTangent = this._pRegisterCache.getFreeVertexVectorTemp();\n\t\t\tthis._pRegisterCache.addVertexTempUsages(this._pSharedRegisters.animatedTangent, 1);\n\n\t\t\tif (this._pShader.usesTangentSpace) {\n\t\t\t\tthis._pSharedRegisters.bitangent = this._pRegisterCache.getFreeVertexVectorTemp();\n\t\t\t\tthis._pRegisterCache.addVertexTempUsages(this._pSharedRegisters.bitangent, 1);\n\t\t\t}\n\n\t\t\tthis._pSharedRegisters.animatableAttributes.push(this._pSharedRegisters.tangentInput);\n\t\t\tthis._pSharedRegisters.animationTargetRegisters.push(this._pSharedRegisters.animatedTangent);\n\t\t}\n\n\t\tif (this._pShader.normalDependencies > 0) {\n\t\t\tthis._pSharedRegisters.normalInput = this._pRegisterCache.getFreeVertexAttribute();\n\t\t\tthis._pShader.normalIndex = this._pSharedRegisters.normalInput.index;\n\n\t\t\tthis._pSharedRegisters.animatedNormal = this._pRegisterCache.getFreeVertexVectorTemp();\n\t\t\tthis._pRegisterCache.addVertexTempUsages(this._pSharedRegisters.animatedNormal, 1);\n\n\t\t\tthis._pSharedRegisters.animatableAttributes.push(this._pSharedRegisters.normalInput);\n\t\t\tthis._pSharedRegisters.animationTargetRegisters.push(this._pSharedRegisters.animatedNormal);\n\t\t}\n\n\t\tif (this._pShader.colorDependencies > 0) {\n\t\t\tthis._pSharedRegisters.colorInput = this._pRegisterCache.getFreeVertexAttribute();\n\t\t\tthis._pShader.colorBufferIndex = this._pSharedRegisters.colorInput.index;\n\n\t\t\tthis._pSharedRegisters.colorVarying = this._pRegisterCache.getFreeVarying();\n\t\t\tthis._pVertexCode += \"mov \" + this._pSharedRegisters.colorVarying + \", \" + this._pSharedRegisters.colorInput + \"\\n\";\n\t\t}\n\t}\n\n\t/**\n\t * Disposes all resources used by the compiler.\n\t */\n\tpublic dispose():void\n\t{\n\t\tthis._pRegisterCache.dispose();\n\t\tthis._pRegisterCache = null;\n\t\tthis._pSharedRegisters = null;\n\t}\n\n\t/**\n\t * The generated vertex code.\n\t */\n\tpublic get vertexCode():string\n\t{\n\t\treturn this._pVertexCode;\n\t}\n\n\t/**\n\t * The generated fragment code.\n\t */\n\tpublic get fragmentCode():string\n\t{\n\t\treturn this._pFragmentCode;\n\t}\n\n\t/**\n\t * The generated fragment code.\n\t */\n\tpublic get postAnimationFragmentCode():string\n\t{\n\t\treturn this._pPostAnimationFragmentCode;\n\t}\n\n\t/**\n\t * The register containing the final shaded colour.\n\t */\n\tpublic get shadedTarget():ShaderRegisterElement\n\t{\n\t\treturn this._pSharedRegisters.shadedTarget;\n\t}\n}",
    "import {LightingShader}\t\t\t\tfrom \"../../shaders/LightingShader\";\nimport {CompilerBase}\t\t\t\t\tfrom \"../../shaders/compilers/CompilerBase\";\nimport {ShaderRegisterElement}\t\tfrom \"../../shaders/ShaderRegisterElement\";\nimport {ILightingPass}\t\t\t\tfrom \"../../surfaces/passes/ILightingPass\";\nimport {IElementsClassGL}\t\t\t\tfrom \"../../elements/IElementsClassGL\";\n\n/**\n * CompilerBase is an abstract base class for shader compilers that use modular shader methods to assemble a\n * material. Concrete subclasses are used by the default materials.\n *\n * @see away.materials.ShadingMethodBase\n */\nexport class LightingCompiler extends CompilerBase\n{\n\tprivate _shaderLightingObject:LightingShader;\n\tprivate _lightingPass:ILightingPass;\n\tpublic _pointLightFragmentConstants:Array<ShaderRegisterElement>;\n\tpublic _pointLightVertexConstants:Array<ShaderRegisterElement>;\n\tpublic _dirLightFragmentConstants:Array<ShaderRegisterElement>;\n\tpublic _dirLightVertexConstants:Array<ShaderRegisterElement>;\n\n\tpublic _pNumProbeRegisters:number;\n\n\t/**\n\t * Creates a new CompilerBase object.\n\t * @param profile The compatibility profile of the renderer.\n\t */\n\tconstructor(elementsClass:IElementsClassGL, lightingPass:ILightingPass, shaderLightingObject:LightingShader)\n\t{\n\t\tsuper(elementsClass, lightingPass, shaderLightingObject);\n\n\t\tthis._shaderLightingObject = shaderLightingObject;\n\t\tthis._lightingPass = lightingPass;\n\t}\n\n\t/**\n\t * Compile the code for the methods.\n\t */\n\tpublic pCompileDependencies():void\n\t{\n\t\tsuper.pCompileDependencies();\n\n\t\t//compile the lighting code\n\t\tif (this._shaderLightingObject.usesShadows)\n\t\t\tthis.pCompileShadowCode();\n\n\t\tif (this._shaderLightingObject.usesLights) {\n\t\t\tthis.initLightRegisters();\n\t\t\tthis.compileLightCode();\n\t\t}\n\n\t\tif (this._shaderLightingObject.usesProbes)\n\t\t\tthis.compileLightProbeCode();\n\n\t\tthis._pVertexCode += this._lightingPass._iGetPostLightingVertexCode(this._shaderLightingObject, this._pRegisterCache, this._pSharedRegisters);\n\t\tthis._pFragmentCode += this._lightingPass._iGetPostLightingFragmentCode(this._shaderLightingObject, this._pRegisterCache, this._pSharedRegisters);\n\t}\n\n\t/**\n\t * Provides the code to provide shadow mapping.\n\t */\n\tpublic pCompileShadowCode():void\n\t{\n\t\tif (this._shaderLightingObject.normalDependencies > 0) {\n\t\t\tthis._pSharedRegisters.shadowTarget = this._pSharedRegisters.normalFragment;\n\t\t} else {\n\t\t\tthis._pSharedRegisters.shadowTarget = this._pRegisterCache.getFreeFragmentVectorTemp();\n\t\t\tthis._pRegisterCache.addFragmentTempUsages(this._pSharedRegisters.shadowTarget, 1);\n\t\t}\n\t}\n\n\t/**\n\t * Initializes constant registers to contain light data.\n\t */\n\tprivate initLightRegisters():void\n\t{\n\t\t// init these first so we're sure they're in sequence\n\t\tvar i:number, len:number;\n\n\t\tif (this._dirLightVertexConstants) {\n\t\t\tlen = this._dirLightVertexConstants.length;\n\t\t\tfor (i = 0; i < len; ++i) {\n\t\t\t\tthis._dirLightVertexConstants[i] = this._pRegisterCache.getFreeVertexConstant();\n\n\t\t\t\tif (this._shaderLightingObject.lightVertexConstantIndex == -1)\n\t\t\t\t\tthis._shaderLightingObject.lightVertexConstantIndex = this._dirLightVertexConstants[i].index*4;\n\t\t\t}\n\t\t}\n\n\t\tif (this._pointLightVertexConstants) {\n\t\t\tlen = this._pointLightVertexConstants.length;\n\t\t\tfor (i = 0; i < len; ++i) {\n\t\t\t\tthis._pointLightVertexConstants[i] = this._pRegisterCache.getFreeVertexConstant();\n\n\t\t\t\tif (this._shaderLightingObject.lightVertexConstantIndex == -1)\n\t\t\t\t\tthis._shaderLightingObject.lightVertexConstantIndex = this._pointLightVertexConstants[i].index*4;\n\t\t\t}\n\t\t}\n\n\t\tlen = this._dirLightFragmentConstants.length;\n\t\tfor (i = 0; i < len; ++i) {\n\t\t\tthis._dirLightFragmentConstants[i] = this._pRegisterCache.getFreeFragmentConstant();\n\n\t\t\tif (this._shaderLightingObject.lightFragmentConstantIndex == -1)\n\t\t\t\tthis._shaderLightingObject.lightFragmentConstantIndex = this._dirLightFragmentConstants[i].index*4;\n\t\t}\n\n\t\tlen = this._pointLightFragmentConstants.length;\n\t\tfor (i = 0; i < len; ++i) {\n\t\t\tthis._pointLightFragmentConstants[i] = this._pRegisterCache.getFreeFragmentConstant();\n\n\t\t\tif (this._shaderLightingObject.lightFragmentConstantIndex == -1)\n\t\t\t\tthis._shaderLightingObject.lightFragmentConstantIndex = this._pointLightFragmentConstants[i].index*4;\n\t\t}\n\t}\n\n\t/**\n\t * Compiles the shading code for directional and point lights.\n\t */\n\tprivate compileLightCode():void\n\t{\n\t\tvar diffuseColorReg:ShaderRegisterElement;\n\t\tvar specularColorReg:ShaderRegisterElement;\n\t\tvar lightPosReg:ShaderRegisterElement;\n\t\tvar lightDirReg:ShaderRegisterElement;\n\t\tvar vertexRegIndex:number = 0;\n\t\tvar fragmentRegIndex:number = 0;\n\t\tvar addSpec:boolean = this._shaderLightingObject.usesLightsForSpecular;\n\t\tvar addDiff:boolean = this._shaderLightingObject.usesLightsForDiffuse;\n\n\t\t//compile the shading code for directional lights.\n\t\tfor (var i:number = 0; i < this._shaderLightingObject.numDirectionalLights; ++i) {\n\t\t\tif (this._shaderLightingObject.usesTangentSpace) {\n\t\t\t\tlightDirReg = this._dirLightVertexConstants[vertexRegIndex++];\n\n\t\t\t\tvar lightVarying:ShaderRegisterElement = this._pRegisterCache.getFreeVarying();\n\n\t\t\t\tthis._pVertexCode += \"m33 \" + lightVarying + \".xyz, \" + lightDirReg + \", \" + this._pSharedRegisters.animatedTangent + \"\\n\" +\n\t\t\t\t\t\"mov \" + lightVarying + \".w, \" + lightDirReg + \".w\\n\";\n\n\t\t\t\tlightDirReg = this._pRegisterCache.getFreeFragmentVectorTemp();\n\t\t\t\tthis._pRegisterCache.addVertexTempUsages(lightDirReg, 1);\n\n\t\t\t\tthis._pFragmentCode += \"nrm \" + lightDirReg + \".xyz, \" + lightVarying + \"\\n\" +\n\t\t\t\t\t\"mov \" + lightDirReg + \".w, \" + lightVarying + \".w\\n\";\n\n\t\t\t} else {\n\t\t\t\tlightDirReg = this._dirLightFragmentConstants[fragmentRegIndex++];\n\t\t\t}\n\n\t\t\tdiffuseColorReg = this._dirLightFragmentConstants[fragmentRegIndex++];\n\t\t\tspecularColorReg = this._dirLightFragmentConstants[fragmentRegIndex++];\n\n\t\t\tif (addDiff)\n\t\t\t\tthis._pFragmentCode += this._lightingPass._iGetPerLightDiffuseFragmentCode(this._shaderLightingObject, lightDirReg, diffuseColorReg, this._pRegisterCache, this._pSharedRegisters);\n\n\t\t\tif (addSpec)\n\t\t\t\tthis._pFragmentCode += this._lightingPass._iGetPerLightSpecularFragmentCode(this._shaderLightingObject, lightDirReg, specularColorReg, this._pRegisterCache, this._pSharedRegisters);\n\n\t\t\tif (this._shaderLightingObject.usesTangentSpace)\n\t\t\t\tthis._pRegisterCache.removeVertexTempUsage(lightDirReg);\n\t\t}\n\n\t\tvertexRegIndex = 0;\n\t\tfragmentRegIndex = 0;\n\n\t\t//compile the shading code for point lights\n\t\tfor (var i:number = 0; i < this._shaderLightingObject.numPointLights; ++i) {\n\n\t\t\tif (this._shaderLightingObject.usesTangentSpace || !this._shaderLightingObject.usesGlobalPosFragment)\n\t\t\t\tlightPosReg = this._pointLightVertexConstants[vertexRegIndex++];\n\t\t\telse\n\t\t\t\tlightPosReg = this._pointLightFragmentConstants[fragmentRegIndex++];\n\n\t\t\tdiffuseColorReg = this._pointLightFragmentConstants[fragmentRegIndex++];\n\t\t\tspecularColorReg = this._pointLightFragmentConstants[fragmentRegIndex++];\n\n\t\t\tlightDirReg = this._pRegisterCache.getFreeFragmentVectorTemp();\n\t\t\tthis._pRegisterCache.addFragmentTempUsages(lightDirReg, 1);\n\n\t\t\tvar lightVarying:ShaderRegisterElement;\n\n\t\t\tif (this._shaderLightingObject.usesTangentSpace) {\n\t\t\t\tlightVarying = this._pRegisterCache.getFreeVarying();\n\t\t\t\tvar temp:ShaderRegisterElement = this._pRegisterCache.getFreeVertexVectorTemp();\n\t\t\t\tthis._pVertexCode += \"sub \" + temp + \", \" + lightPosReg + \", \" + this._pSharedRegisters.animatedPosition + \"\\n\" +\n\t\t\t\t\t\"m33 \" + lightVarying + \".xyz, \" + temp + \", \" + this._pSharedRegisters.animatedTangent + \"\\n\" +\n\t\t\t\t\t\"mov \" + lightVarying + \".w, \" + this._pSharedRegisters.animatedPosition + \".w\\n\";\n\t\t\t} else if (!this._shaderLightingObject.usesGlobalPosFragment) {\n\t\t\t\tlightVarying = this._pRegisterCache.getFreeVarying();\n\t\t\t\tthis._pVertexCode += \"sub \" + lightVarying + \", \" + lightPosReg + \", \" + this._pSharedRegisters.globalPositionVertex + \"\\n\";\n\t\t\t} else {\n\t\t\t\tlightVarying = lightDirReg;\n\t\t\t\tthis._pFragmentCode += \"sub \" + lightDirReg + \", \" + lightPosReg + \", \" + this._pSharedRegisters.globalPositionVarying + \"\\n\";\n\t\t\t}\n\n\t\t\tif (this._shaderLightingObject.usesLightFallOff) {\n\t\t\t\t// calculate attenuation\n\t\t\t\tthis._pFragmentCode += // attenuate\n\t\t\t\t\t\"dp3 \" + lightDirReg + \".w, \" + lightVarying + \", \" + lightVarying + \"\\n\" + // w = d - radius\n\t\t\t\t\t\"sub \" + lightDirReg + \".w, \" + lightDirReg + \".w, \" + diffuseColorReg + \".w\\n\" + // w = (d - radius)/(max-min)\n\t\t\t\t\t\"mul \" + lightDirReg + \".w, \" + lightDirReg + \".w, \" + specularColorReg + \".w\\n\" + // w = clamp(w, 0, 1)\n\t\t\t\t\t\"sat \" + lightDirReg + \".w, \" + lightDirReg + \".w\\n\" + // w = 1-w\n\t\t\t\t\t\"sub \" + lightDirReg + \".w, \" + this._pSharedRegisters.commons + \".w, \" + lightDirReg + \".w\\n\" + // normalize\n\t\t\t\t\t\"nrm \" + lightDirReg + \".xyz, \" + lightVarying + \"\\n\";\n\t\t\t} else {\n\t\t\t\tthis._pFragmentCode += \"nrm \" + lightDirReg + \".xyz, \" + lightVarying + \"\\n\" +\n\t\t\t\t\t\"mov \" + lightDirReg + \".w, \" + lightVarying + \".w\\n\";\n\t\t\t}\n\n\t\t\tif (this._shaderLightingObject.lightFragmentConstantIndex == -1)\n\t\t\t\tthis._shaderLightingObject.lightFragmentConstantIndex = lightPosReg.index*4;\n\n\t\t\tif (addDiff)\n\t\t\t\tthis._pFragmentCode += this._lightingPass._iGetPerLightDiffuseFragmentCode(this._shaderLightingObject, lightDirReg, diffuseColorReg, this._pRegisterCache, this._pSharedRegisters);\n\n\t\t\tif (addSpec)\n\t\t\t\tthis._pFragmentCode += this._lightingPass._iGetPerLightSpecularFragmentCode(this._shaderLightingObject, lightDirReg, specularColorReg, this._pRegisterCache, this._pSharedRegisters);\n\n\t\t\tthis._pRegisterCache.removeFragmentTempUsage(lightDirReg);\n\t\t}\n\t}\n\n\t/**\n\t * Compiles shading code for light probes.\n\t */\n\tprivate compileLightProbeCode():void\n\t{\n\t\tvar weightReg:string;\n\t\tvar weightComponents = [ \".x\", \".y\", \".z\", \".w\" ];\n\t\tvar weightRegisters:Array<ShaderRegisterElement> = new Array<ShaderRegisterElement>();\n\t\tvar i:number;\n\t\tvar texReg:ShaderRegisterElement;\n\t\tvar addSpec:boolean = this._shaderLightingObject.usesProbesForSpecular;\n\t\tvar addDiff:boolean = this._shaderLightingObject.usesProbesForDiffuse;\n\n\t\tif (addDiff)\n\t\t\tthis._shaderLightingObject.lightProbeDiffuseIndices = new Array<number>();\n\n\t\tif (addSpec)\n\t\t\tthis._shaderLightingObject.lightProbeSpecularIndices = new Array<number>();\n\n\t\tfor (i = 0; i < this._pNumProbeRegisters; ++i) {\n\t\t\tweightRegisters[i] = this._pRegisterCache.getFreeFragmentConstant();\n\n\t\t\tif (i == 0)\n\t\t\t\tthis._shaderLightingObject.probeWeightsIndex = weightRegisters[i].index*4;\n\t\t}\n\n\t\tfor (i = 0; i < this._shaderLightingObject.numLightProbes; ++i) {\n\t\t\tweightReg = weightRegisters[Math.floor(i/4)].toString() + weightComponents[i%4];\n\n\t\t\tif (addDiff) {\n\t\t\t\ttexReg = this._pRegisterCache.getFreeTextureReg();\n\t\t\t\tthis._shaderLightingObject.lightProbeDiffuseIndices[i] = texReg.index;\n\t\t\t\tthis._pFragmentCode += this._lightingPass._iGetPerProbeDiffuseFragmentCode(this._shaderLightingObject, texReg, weightReg, this._pRegisterCache, this._pSharedRegisters);\n\t\t\t}\n\n\t\t\tif (addSpec) {\n\t\t\t\ttexReg = this._pRegisterCache.getFreeTextureReg();\n\t\t\t\tthis._shaderLightingObject.lightProbeSpecularIndices[i] = texReg.index;\n\t\t\t\tthis._pFragmentCode += this._lightingPass._iGetPerProbeSpecularFragmentCode(this._shaderLightingObject, texReg, weightReg, this._pRegisterCache, this._pSharedRegisters);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Reset all the indices to \"unused\".\n\t */\n\tpublic pInitRegisterIndices():void\n\t{\n\t\tsuper.pInitRegisterIndices();\n\n\t\tthis._shaderLightingObject.lightVertexConstantIndex = -1;\n\t\tthis._shaderLightingObject.lightFragmentConstantIndex = -1;\n\t\tthis._shaderLightingObject.probeWeightsIndex = -1;\n\n\t\tthis._pNumProbeRegisters = Math.ceil(this._shaderLightingObject.numLightProbes/4);\n\n\t\t//init light data\n\t\tif (this._shaderLightingObject.usesTangentSpace || !this._shaderLightingObject.usesGlobalPosFragment) {\n\t\t\tthis._pointLightVertexConstants = new Array<ShaderRegisterElement>(this._shaderLightingObject.numPointLights);\n\t\t\tthis._pointLightFragmentConstants = new Array<ShaderRegisterElement>(this._shaderLightingObject.numPointLights*2);\n\t\t} else {\n\t\t\tthis._pointLightFragmentConstants = new Array<ShaderRegisterElement>(this._shaderLightingObject.numPointLights*3);\n\t\t}\n\n\t\tif (this._shaderLightingObject.usesTangentSpace) {\n\t\t\tthis._dirLightVertexConstants = new Array<ShaderRegisterElement>(this._shaderLightingObject.numDirectionalLights);\n\t\t\tthis._dirLightFragmentConstants = new Array<ShaderRegisterElement>(this._shaderLightingObject.numDirectionalLights*2);\n\t\t} else {\n\t\t\tthis._dirLightFragmentConstants = new Array<ShaderRegisterElement>(this._shaderLightingObject.numDirectionalLights*3);\n\t\t}\n\t}\n}",
    "export {CompilerBase}\t\t\t\t\tfrom \"./shaders/compilers/CompilerBase\";\nexport {LightingCompiler}\t\t\t\tfrom \"./shaders/compilers/LightingCompiler\";\nexport {LightingShader}\t\t\t\t\tfrom \"./shaders/LightingShader\";\nexport {RegisterPool}\t\t\t\t\tfrom \"./shaders/RegisterPool\";\nexport {ShaderBase}\t\t\t\t\t\tfrom \"./shaders/ShaderBase\";\nexport {ShaderRegisterCache}\t\t\t\tfrom \"./shaders/ShaderRegisterCache\";\nexport {ShaderRegisterData}\t\t\t\tfrom \"./shaders/ShaderRegisterData\";\nexport {ShaderRegisterElement}\t\t\tfrom \"./shaders/ShaderRegisterElement\";",
    "import {IEntitySorter}\t\t\t\tfrom \"../sort/IEntitySorter\";\n\nimport {GL_RenderableBase}\t\t\tfrom \"../renderables/GL_RenderableBase\";\n/**\n * @class away.sort.RenderableMergeSort\n */\nexport class RenderableMergeSort implements IEntitySorter\n{\n\tpublic sortBlendedRenderables(head:GL_RenderableBase):GL_RenderableBase\n\t{\n\t\tvar headB:GL_RenderableBase;\n\t\tvar fast:GL_RenderableBase;\n\t\tvar slow:GL_RenderableBase;\n\n\t\tif (!head || !head.next) {\n\t\t\treturn head;\n\t\t}\n\n\t\t// split in two sublists\n\t\tslow = head;\n\t\tfast = head.next;\n\n\t\twhile (fast) {\n\t\t\tfast = fast.next;\n\t\t\tif (fast) {\n\t\t\t\tslow = slow.next;\n\t\t\t\tfast = fast.next;\n\t\t\t}\n\t\t}\n\n\t\theadB = slow.next;\n\t\tslow.next = null;\n\n\t\t// recurse\n\t\thead = this.sortBlendedRenderables(head);\n\t\theadB = this.sortBlendedRenderables(headB);\n\n\t\t// merge sublists while respecting order\n\t\tvar result:GL_RenderableBase;\n\t\tvar curr:GL_RenderableBase;\n\t\tvar l:GL_RenderableBase;\n\n\t\tif (!head)\n\t\t\treturn headB;\n\t\tif (!headB)\n\t\t\treturn head;\n\n\t\twhile (head && headB) {\n\t\t\tif (head.zIndex < headB.zIndex) {\n\t\t\t\tl = head;\n\t\t\t\thead = head.next;\n\t\t\t} else {\n\t\t\t\tl = headB;\n\t\t\t\theadB = headB.next;\n\t\t\t}\n\n\t\t\tif (!result)\n\t\t\t\tresult = l; else\n\t\t\t\tcurr.next = l;\n\n\t\t\tcurr = l;\n\t\t}\n\n\t\tif (head)\n\t\t\tcurr.next = head; else if (headB)\n\t\t\tcurr.next = headB;\n\n\t\treturn result;\n\t}\n\n\tpublic sortOpaqueRenderables(head:GL_RenderableBase):GL_RenderableBase\n\t{\n\t\tvar headB:GL_RenderableBase;\n\t\tvar fast:GL_RenderableBase, slow:GL_RenderableBase;\n\n\t\tif (!head || !head.next) {\n\t\t\treturn head;\n\t\t}\n\n\t\t// split in two sublists\n\t\tslow = head;\n\t\tfast = head.next;\n\n\t\twhile (fast) {\n\t\t\tfast = fast.next;\n\t\t\tif (fast) {\n\t\t\t\tslow = slow.next;\n\t\t\t\tfast = fast.next;\n\t\t\t}\n\t\t}\n\n\t\theadB = slow.next;\n\t\tslow.next = null;\n\n\t\t// recurse\n\t\thead = this.sortOpaqueRenderables(head);\n\t\theadB = this.sortOpaqueRenderables(headB);\n\n\t\t// merge sublists while respecting order\n\t\tvar result:GL_RenderableBase;\n\t\tvar curr:GL_RenderableBase;\n\t\tvar l:GL_RenderableBase;\n\t\tvar cmp:number = 0;\n\n\t\tif (!head)\n\t\t\treturn headB;\n\t\tif (!headB)\n\t\t\treturn head;\n\n\t\twhile (head && headB && head != null && headB != null) {\n\n\t\t\t// first sort per render order id (reduces program3D switches),\n\t\t\t// then on render object id (reduces setting props),\n\t\t\t// then on zIndex (reduces overdraw)\n\t\t\tvar aid:number = head.renderOrderId;\n\t\t\tvar bid:number = headB.renderOrderId;\n\n\t\t\tif (aid == bid) {\n\t\t\t\tvar ma:number = head.surfaceID;\n\t\t\t\tvar mb:number = headB.surfaceID;\n\n\t\t\t\tif (ma == mb) {\n\t\t\t\t\tif (head.zIndex < headB.zIndex)\n\t\t\t\t\t\tcmp = 1; else\n\t\t\t\t\t\tcmp = -1;\n\t\t\t\t} else if (ma > mb) {\n\t\t\t\t\tcmp = 1;\n\t\t\t\t} else {\n\t\t\t\t\tcmp = -1;\n\t\t\t\t}\n\t\t\t} else if (aid > bid) {\n\t\t\t\tcmp = 1;\n\t\t\t} else {\n\t\t\t\tcmp = -1;\n\t\t\t}\n\n\t\t\tif (cmp < 0) {\n\t\t\t\tl = head;\n\t\t\t\thead = head.next;\n\t\t\t} else {\n\t\t\t\tl = headB;\n\t\t\t\theadB = headB.next;\n\t\t\t}\n\n\t\t\tif (!result) {\n\t\t\t\tresult = l;\n\t\t\t\tcurr = l;\n\t\t\t} else {\n\t\t\t\tcurr.next = l;\n\t\t\t\tcurr = l;\n\t\t\t}\n\t\t}\n\n\t\tif (head)\n\t\t\tcurr.next = head; else if (headB)\n\t\t\tcurr.next = headB;\n\n\t\treturn result;\n\t}\n}",
    "import {IEntitySorter}\t\t\t\tfrom \"../sort/IEntitySorter\";\n\nimport {GL_RenderableBase}\t\t\tfrom \"../renderables/GL_RenderableBase\";\n\n/**\n * @class away.sort.NullSort\n */\nexport class RenderableNullSort implements IEntitySorter\n{\n\tpublic sortBlendedRenderables(head:GL_RenderableBase):GL_RenderableBase\n\t{\n\t\treturn head;\n\t}\n\n\tpublic sortOpaqueRenderables(head:GL_RenderableBase):GL_RenderableBase\n\t{\n\t\treturn head;\n\t}\n}",
    "export {IEntitySorter}\t\t\t\t\tfrom \"./sort/IEntitySorter\";\nexport {RenderableMergeSort}\t\t\t\tfrom \"./sort/RenderableMergeSort\";\nexport {RenderableNullSort}\t\t\t\tfrom \"./sort/RenderableNullSort\";",
    "import {AssetEvent}\t\t\t\t\tfrom \"awayjs-core/lib/events/AssetEvent\";\nimport {BlendMode}\t\t\t\t\tfrom \"awayjs-core/lib/image/BlendMode\";\n\nimport {BasicMaterial}\t\t\t\tfrom \"awayjs-display/lib/materials/BasicMaterial\";\n\nimport {BasicMaterialPass}\t\t\tfrom \"../surfaces/passes/BasicMaterialPass\";\nimport {IElementsClassGL}\t\t\t\tfrom \"../elements/IElementsClassGL\";\nimport {GL_SurfaceBase}\t\t\t\tfrom \"../surfaces/GL_SurfaceBase\";\nimport {SurfacePool}\t\t\t\t\tfrom \"../surfaces/SurfacePool\";\n\n/**\n * RenderMaterialObject forms an abstract base class for the default shaded materials provided by Stage,\n * using material methods to define their appearance.\n */\nexport class GL_BasicMaterialSurface extends GL_SurfaceBase\n{\n\tprivate _material:BasicMaterial;\n\tprivate _pass:BasicMaterialPass;\n\n\n\tconstructor(material:BasicMaterial, elementsClass:IElementsClassGL, renderPool:SurfacePool)\n\t{\n\t\tsuper(material, elementsClass, renderPool);\n\n\t\tthis._material = material;\n\n\t\tthis._pAddPass(this._pass = new BasicMaterialPass(this, material, elementsClass, this._stage));\n\t}\n\n\tpublic onClear(event:AssetEvent):void\n\t{\n\t\tsuper.onClear(event);\n\n\t\tthis._material = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pUpdateRender():void\n\t{\n\t\tsuper._pUpdateRender();\n\n\t\tthis._pRequiresBlending = (this._material.blendMode != BlendMode.NORMAL || this._material.alphaBlending || (this._material.colorTransform && this._material.colorTransform.alphaMultiplier < 1));\n\t\tthis._pass.preserveAlpha = this._material.preserveAlpha;//this._pRequiresBlending;\n\t\tthis._pass.shader.setBlendMode((this._surface.blendMode == BlendMode.NORMAL && this._pRequiresBlending)? BlendMode.LAYER : this._material.blendMode);\n\t\t//this._pass.forceSeparateMVP = false;\n\t}\n}",
    "import {ISurface}\t\t\t\t\t\tfrom \"awayjs-display/lib/base/ISurface\";\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\n\nimport {IElementsClassGL}\t\t\t\tfrom \"../elements/IElementsClassGL\";\nimport {GL_SurfacePassBase}\t\t\tfrom \"../surfaces/GL_SurfacePassBase\";\nimport {SurfacePool}\t\t\t\t\tfrom \"../surfaces/SurfacePool\";\nimport {ShaderBase}\t\t\t\t\tfrom \"../shaders/ShaderBase\";\nimport {ShaderRegisterCache}\t\t\tfrom \"../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterData}\t\t\tfrom \"../shaders/ShaderRegisterData\";\nimport {ShaderRegisterElement}\t\tfrom \"../shaders/ShaderRegisterElement\";\nimport {GL_TextureBase}\t\t\t\tfrom \"../textures/GL_TextureBase\";\n\n/**\n * GL_DepthSurface forms an abstract base class for the default shaded materials provided by Stage,\n * using material methods to define their appearance.\n */\nexport class GL_DepthSurface extends GL_SurfacePassBase\n{\n\tprivate _fragmentConstantsIndex:number;\n\tprivate _textureVO:GL_TextureBase;\n\n\t/**\n\t *\n\t * @param pool\n\t * @param surface\n\t * @param elementsClass\n\t * @param stage\n\t */\n\tconstructor(surface:ISurface, elementsClass:IElementsClassGL, renderPool:SurfacePool)\n\t{\n\t\tsuper(surface, elementsClass, renderPool);\n\n\t\tthis._shader = new ShaderBase(elementsClass, this, this._stage);\n\n\t\tthis._pAddPass(this);\n\t}\n\n\tpublic invalidate():void\n\t{\n\t\tsuper.invalidate();\n\n\t\tthis._textureVO = this._surface.getTextureAt(0)? <GL_TextureBase> this._shader.getAbstraction(this._surface.getTextureAt(0)) : null;\n\t}\n\n\tpublic _iIncludeDependencies(shader:ShaderBase):void\n\t{\n\t\tsuper._iIncludeDependencies(shader);\n\n\t\tshader.projectionDependencies++;\n\n\t\tif (shader.alphaThreshold > 0)\n\t\t\tshader.uvDependencies++;\n\t}\n\n\n\tpublic _iInitConstantData(shader:ShaderBase):void\n\t{\n\t\tsuper._iInitConstantData(shader);\n\n\t\tvar index:number = this._fragmentConstantsIndex;\n\t\tvar data:Float32Array = shader.fragmentConstantData;\n\t\tdata[index] = 1.0;\n\t\tdata[index + 1] = 255.0;\n\t\tdata[index + 2] = 65025.0;\n\t\tdata[index + 3] = 16581375.0;\n\t\tdata[index + 4] = 1.0/255.0;\n\t\tdata[index + 5] = 1.0/255.0;\n\t\tdata[index + 6] = 1.0/255.0;\n\t\tdata[index + 7] = 0.0;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGetFragmentCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar targetReg:ShaderRegisterElement = sharedRegisters.shadedTarget;\n\t\tvar dataReg1:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar dataReg2:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\n\t\tthis._fragmentConstantsIndex = dataReg1.index*4;\n\n\t\tvar temp1:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(temp1, 1);\n\t\tvar temp2:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(temp2, 1);\n\n\t\tcode += \"div \" + temp1 + \", \" + sharedRegisters.projectionFragment + \", \" + sharedRegisters.projectionFragment + \".w\\n\" + //\"sub ft2.z, fc0.x, ft2.z\\n\" +    //invert\n\t\t\t\"mul \" + temp1 + \", \" + dataReg1 + \", \" + temp1 + \".z\\n\" +\n\t\t\t\"frc \" + temp1 + \", \" + temp1 + \"\\n\" +\n\t\t\t\"mul \" + temp2 + \", \" + temp1 + \".yzww, \" + dataReg2 + \"\\n\";\n\n\t\t//codeF += \"mov ft1.w, fc1.w\t\\n\" +\n\t\t//    \"mov ft0.w, fc0.x\t\\n\";\n\n\t\tif (this._textureVO && shader.alphaThreshold > 0) {\n\n\t\t\tvar albedo:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\t\tcode += this._textureVO._iGetFragmentCode(albedo, registerCache, sharedRegisters, sharedRegisters.uvVarying);\n\n\t\t\tvar cutOffReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\n\t\t\tcode += \"sub \" + albedo + \".w, \" + albedo + \".w, \" + cutOffReg + \".x\\n\" +\n\t\t\t\t\"kil \" + albedo + \".w\\n\";\n\t\t}\n\n\t\tcode += \"sub \" + targetReg + \", \" + temp1 + \", \" + temp2 + \"\\n\";\n\n\t\tregisterCache.removeFragmentTempUsage(temp1);\n\t\tregisterCache.removeFragmentTempUsage(temp2);\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iActivate(camera:Camera):void\n\t{\n\t\tsuper._iActivate(camera);\n\n\t\tif (this._textureVO && this._shader.alphaThreshold > 0) {\n\t\t\tthis._textureVO.activate(this);\n\n\t\t\tthis._shader.fragmentConstantData[this._fragmentConstantsIndex + 8] = this._shader.alphaThreshold;\n\t\t}\n\t}\n}",
    "﻿import {ISurface}\t\t\t\t\t\tfrom \"awayjs-display/lib/base/ISurface\";\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\n\nimport {SurfacePool}\t\t\t\t\tfrom \"../surfaces/SurfacePool\";\nimport {GL_SurfacePassBase}\t\t\tfrom \"../surfaces/GL_SurfacePassBase\";\nimport {IElementsClassGL}\t\t\t\tfrom \"../elements/IElementsClassGL\";\nimport {ShaderBase}\t\t\t\t\tfrom \"../shaders/ShaderBase\";\nimport {ShaderRegisterCache}\t\t\tfrom \"../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterData}\t\t\tfrom \"../shaders/ShaderRegisterData\";\nimport {ShaderRegisterElement}\t\tfrom \"../shaders/ShaderRegisterElement\";\nimport {GL_TextureBase}\t\t\t\tfrom \"../textures/GL_TextureBase\";\n\n/**\n * DistanceRender is a pass that writes distance values to a depth map as a 32-bit value exploded over the 4 texture channels.\n * This is used to render omnidirectional shadow maps.\n */\nexport class GL_DistanceSurface extends GL_SurfacePassBase\n{\n\tprivate _textureVO:GL_TextureBase;\n\tprivate _fragmentConstantsIndex:number;\n\n\t/**\n\t * Creates a new DistanceRender object.\n\t *\n\t * @param material The material to which this pass belongs.\n\t */\n\tconstructor(surface:ISurface, elementsClass:IElementsClassGL, renderPool:SurfacePool)\n\t{\n\t\tsuper(surface, elementsClass, renderPool);\n\n\t\tthis._shader = new ShaderBase(elementsClass, this, this._stage);\n\n\t\tthis._pAddPass(this);\n\t}\n\n\tpublic invalidate():void\n\t{\n\t\tsuper.invalidate();\n\n\t\tthis._textureVO = this._surface.getTextureAt(0)? <GL_TextureBase> this._shader.getAbstraction(this._surface.getTextureAt(0)) : null;\n\t}\n\n\t/**\n\t * Initializes the unchanging constant data for this material.\n\t */\n\tpublic _iInitConstantData(shader:ShaderBase):void\n\t{\n\t\tsuper._iInitConstantData(shader);\n\n\t\tvar index:number = this._fragmentConstantsIndex;\n\t\tvar data:Float32Array = shader.fragmentConstantData;\n\t\tdata[index + 4] = 1.0/255.0;\n\t\tdata[index + 5] = 1.0/255.0;\n\t\tdata[index + 6] = 1.0/255.0;\n\t\tdata[index + 7] = 0.0;\n\t}\n\n\tpublic _iIncludeDependencies(shader:ShaderBase):void\n\t{\n\t\tsuper._iIncludeDependencies(shader);\n\n\t\tshader.projectionDependencies++;\n\t\tshader.viewDirDependencies++;\n\n\t\tif (shader.alphaThreshold > 0)\n\t\t\tshader.uvDependencies++;\n\n\t\tif (shader.viewDirDependencies > 0)\n\t\t\tshader.globalPosDependencies++;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGetFragmentCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string;\n\t\tvar targetReg:ShaderRegisterElement = sharedRegisters.shadedTarget;\n\t\tvar dataReg1:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar dataReg2:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\n\t\tthis._fragmentConstantsIndex = dataReg1.index*4;\n\n\t\tvar temp1:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(temp1, 1);\n\t\tvar temp2:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(temp2, 1);\n\n\t\t// squared distance to view\n\t\tcode = \"dp3 \" + temp1 + \".z, \" + sharedRegisters.viewDirVarying + \".xyz, \" + sharedRegisters.viewDirVarying + \".xyz\\n\" +\n\t\t\t\"mul \" + temp1 + \", \" + dataReg1 + \", \" + temp1 + \".z\\n\" +\n\t\t\t\"frc \" + temp1 + \", \" + temp1 + \"\\n\" +\n\t\t\t\"mul \" + temp2 + \", \" + temp1 + \".yzww, \" + dataReg2 + \"\\n\";\n\n\t\tif (this._textureVO && shader.alphaThreshold > 0) {\n\n\t\t\tvar albedo:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\t\tcode += this._textureVO._iGetFragmentCode(albedo, registerCache, sharedRegisters, sharedRegisters.uvVarying);\n\n\t\t\tvar cutOffReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\n\t\t\tcode += \"sub \" + albedo + \".w, \" + albedo + \".w, \" + cutOffReg + \".x\\n\" +\n\t\t\t\t\"kil \" + albedo + \".w\\n\";\n\t\t}\n\n\t\tcode += \"sub \" + targetReg + \", \" + temp1 + \", \" + temp2 + \"\\n\";\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iActivate(camera:Camera):void\n\t{\n\t\tsuper._iActivate(camera);\n\n\t\tvar f:number = camera.projection.far;\n\n\t\tf = 1/(2*f*f);\n\t\t// sqrt(f*f+f*f) is largest possible distance for any frustum, so we need to divide by it. Rarely a tight fit, but with 32 bits precision, it's enough.\n\t\tvar index:number = this._fragmentConstantsIndex;\n\t\tvar data:Float32Array = this._shader.fragmentConstantData;\n\t\tdata[index] = 1.0*f;\n\t\tdata[index + 1] = 255.0*f;\n\t\tdata[index + 2] = 65025.0*f;\n\t\tdata[index + 3] = 16581375.0*f;\n\n\t\tif (this._textureVO && this._shader.alphaThreshold > 0) {\n\t\t\tthis._textureVO.activate(this);\n\n\t\t\tdata[index + 8] = this._shader.alphaThreshold;\n\t\t}\n\t}\n}",
    "import {AssetEvent}\t\t\t\t\tfrom \"awayjs-core/lib/events/AssetEvent\";\nimport {Matrix3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\nimport {BlendMode}\t\t\t\t\tfrom \"awayjs-core/lib/image/BlendMode\";\n\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\nimport {Skybox}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Skybox\";\n\nimport {ContextGLCompareMode}\t\t\tfrom \"awayjs-stagegl/lib/base/ContextGLCompareMode\";\n\nimport {GL_RenderableBase}\t\t\tfrom \"../renderables/GL_RenderableBase\";\nimport {IElementsClassGL}\t\t\t\tfrom \"../elements/IElementsClassGL\";\nimport {GL_SurfacePassBase}\t\t\tfrom \"../surfaces/GL_SurfacePassBase\";\nimport {SurfacePool}\t\t\t\t\tfrom \"../surfaces/SurfacePool\";\nimport {ShaderBase}\t\t\t\t\tfrom \"../shaders/ShaderBase\";\nimport {ShaderRegisterCache}\t\t\tfrom \"../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterData}\t\t\tfrom \"../shaders/ShaderRegisterData\";\nimport {GL_TextureBase}\t\t\t\tfrom \"../textures/GL_TextureBase\";\n\n/**\n * GL_SkyboxSurface forms an abstract base class for the default shaded materials provided by Stage,\n * using material methods to define their appearance.\n */\nexport class GL_SkyboxSurface extends GL_SurfacePassBase\n{\n\tpublic _skybox:Skybox;\n\tpublic _texture:GL_TextureBase;\n\n\tconstructor(skybox:Skybox, elementsClass:IElementsClassGL, renderPool:SurfacePool)\n\t{\n\t\tsuper(skybox, elementsClass, renderPool);\n\n\t\tthis._skybox = skybox;\n\n\t\tthis._shader = new ShaderBase(elementsClass, this, this._stage);\n\n\t\tthis._texture = <GL_TextureBase> this._shader.getAbstraction(this._skybox.texture);\n\n\t\tthis._pAddPass(this);\n\t}\n\n\tpublic onClear(event:AssetEvent):void\n\t{\n\t\tsuper.onClear(event);\n\n\t\tthis._texture.onClear(new AssetEvent(AssetEvent.CLEAR, this._skybox.texture));\n\t\tthis._texture = null;\n\n\t\tthis._skybox = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pUpdateRender():void\n\t{\n\t\tsuper._pUpdateRender();\n\n\t\tthis._pRequiresBlending = (this._surface.blendMode != BlendMode.NORMAL);\n\n\t\tthis.shader.setBlendMode((this._surface.blendMode == BlendMode.NORMAL && this._pRequiresBlending)? BlendMode.LAYER : this._surface.blendMode);\n\t}\n\n\tpublic _iIncludeDependencies(shader:ShaderBase):void\n\t{\n\t\tsuper._iIncludeDependencies(shader);\n\n\t\tshader.usesPositionFragment = true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGetFragmentCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn this._texture._iGetFragmentCode(sharedRegisters.shadedTarget, registerCache, sharedRegisters, sharedRegisters.positionVarying);\n\t}\n\n\n\tpublic _setRenderState(renderable:GL_RenderableBase, camera:Camera, viewProjection:Matrix3D):void\n\t{\n\t\tsuper._setRenderState(renderable, camera, viewProjection);\n\n\t\tthis._texture._setRenderState(renderable);\n\t}\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iActivate(camera:Camera):void\n\t{\n\t\tsuper._iActivate(camera);\n\n\t\tthis._stage.context.setDepthTest(false, ContextGLCompareMode.LESS);\n\n\t\tthis._texture.activate(this);\n\t}\n}",
    "import {Matrix3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\nimport {AssetEvent}\t\t\t\t\tfrom \"awayjs-core/lib/events/AssetEvent\";\nimport {ImageBase}\t\t\t\t\tfrom \"awayjs-core/lib/image/ImageBase\";\nimport {SamplerBase}\t\t\t\t\tfrom \"awayjs-core/lib/image/SamplerBase\";\nimport {Sampler2D}\t\t\t\t\tfrom \"awayjs-core/lib/image/Sampler2D\";\n\nimport {AbstractionBase}\t\t\t\tfrom \"awayjs-core/lib/library/AbstractionBase\";\n\nimport {ISurface}\t\t\t\t\t\tfrom \"awayjs-display/lib/base/ISurface\";\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\nimport {SurfaceEvent}\t\t\t\t\tfrom \"awayjs-display/lib/events/SurfaceEvent\";\nimport {IRenderable}\t\t\t\t\tfrom \"awayjs-display/lib/base/IRenderable\";\nimport {MaterialBase}\t\t\t\t\tfrom \"awayjs-display/lib/materials/MaterialBase\";\nimport {DefaultMaterialManager}\t\tfrom \"awayjs-display/lib/managers/DefaultMaterialManager\";\nimport {TextureBase}\t\t\t\t\tfrom \"awayjs-display/lib/textures/TextureBase\";\n\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\nimport {GL_ImageBase}\t\t\t\t\tfrom \"awayjs-stagegl/lib/image/GL_ImageBase\";\nimport {GL_SamplerBase}\t\t\t\tfrom \"awayjs-stagegl/lib/image/GL_SamplerBase\";\n\nimport {AnimatorBase}\t\t\t\t\tfrom \"../animators/AnimatorBase\";\nimport {PassEvent}\t\t\t\t\tfrom \"../events/PassEvent\";\nimport {ShaderBase}\t\t\t\t\tfrom \"../shaders/ShaderBase\";\nimport {ShaderRegisterCache}\t\t\tfrom \"../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterData}\t\t\tfrom \"../shaders/ShaderRegisterData\";\nimport {SurfacePool}\t\t\t\t\tfrom \"../surfaces/SurfacePool\";\nimport {IPass}\t\t\t\t\t\tfrom \"../surfaces/passes/IPass\";\nimport {IElementsClassGL}\t\t\t\tfrom \"../elements/IElementsClassGL\";\nimport {GL_TextureBase}\t\t\t\tfrom \"../textures/GL_TextureBase\";\n\n/**\n *\n * @class away.pool.Passes\n */\nexport class GL_SurfaceBase extends AbstractionBase\n{\n\tprivate _onInvalidateAnimationDelegate:(event:SurfaceEvent) => void;\n\tprivate _onInvalidatePassesDelegate:(event:SurfaceEvent) => void;\n\n\tpublic usages:number = 0;\n\tpublic _forceSeparateMVP:boolean = false;\n\n\tpublic _surface:ISurface;\n\tpublic _elementsClass:IElementsClassGL;\n\tpublic _stage:Stage;\n\n\tprivate _renderOrderId:number;\n\tprivate _usesAnimation:boolean = true;\n\tprivate _invalidAnimation:boolean = true;\n\tprivate _invalidRender:boolean = true;\n\tprivate _invalidImages:boolean = true;\n\tprivate _passes:Array<IPass> = new Array<IPass>();\n\tprivate _imageIndices:Object = new Object();\n\tprivate _numImages:number;\n\n\n\n\n\tpublic _pRequiresBlending:boolean = false;\n\n\tprivate _onPassInvalidateDelegate:(event:PassEvent) => void;\n\n\tpublic surfaceID:number;\n\n\tpublic images:Array<GL_ImageBase> = new Array<GL_ImageBase>();\n\tpublic samplers:Array<GL_SamplerBase> = new Array<GL_SamplerBase>();\n\n\t/**\n\t * Indicates whether or not the renderable requires alpha blending during rendering.\n\t */\n\tpublic get requiresBlending():boolean\n\t{\n\t\treturn this._pRequiresBlending;\n\t}\n\n\tpublic get renderOrderId():number\n\t{\n\t\tif (this._invalidAnimation)\n\t\t\tthis._updateAnimation();\n\n\t\treturn this._renderOrderId;\n\t}\n\n\tpublic get passes():Array<IPass>\n\t{\n\t\tif (this._invalidAnimation)\n\t\t\tthis._updateAnimation();\n\n\t\treturn this._passes;\n\t}\n\n\tpublic get surface():ISurface\n\t{\n\t\treturn this._surface;\n\t}\n\n\tpublic get numImages():number\n\t{\n\t\tif (this._invalidImages)\n\t\t\tthis._updateImages();\n\n\t\treturn this._numImages;\n\t}\n\n\tconstructor(surface:ISurface, elementsClass:IElementsClassGL, renderPool:SurfacePool)\n\t{\n\t\tsuper(surface, renderPool);\n\n\t\tthis._onInvalidateAnimationDelegate = (event:SurfaceEvent) => this.onInvalidateAnimation(event);\n\t\tthis._onInvalidatePassesDelegate = (event:SurfaceEvent) => this.onInvalidatePasses(event);\n\n\t\tthis.surfaceID = surface.id;\n\t\tthis._surface = surface;\n\t\tthis._elementsClass = elementsClass;\n\t\tthis._stage = renderPool.stage;\n\n\t\tthis._surface.addEventListener(SurfaceEvent.INVALIDATE_ANIMATION, this._onInvalidateAnimationDelegate);\n\t\tthis._surface.addEventListener(SurfaceEvent.INVALIDATE_PASSES, this._onInvalidatePassesDelegate);\n\n\t\tthis._onPassInvalidateDelegate = (event:PassEvent) => this.onPassInvalidate(event);\n\t}\n\n\tpublic _iIncludeDependencies(shader:ShaderBase):void\n\t{\n\t\tthis._elementsClass._iIncludeDependencies(shader);\n\n\t\tshader.alphaThreshold = this._surface.alphaThreshold;\n\t\tshader.useImageRect = this._surface.imageRect;\n\t\tshader.usesCurves = this._surface.curves;\n\n\t\tif (this._surface instanceof MaterialBase) {\n\t\t\tvar material:MaterialBase = <MaterialBase> this._surface;\n\t\t\tshader.useAlphaPremultiplied = material.alphaPremultiplied;\n\t\t\tshader.useBothSides = material.bothSides;\n\t\t\tshader.usesUVTransform = material.animateUVs;\n\t\t\tshader.usesColorTransform = material.useColorTransform;\n\t\t}\n\t}\n\n\tpublic getImageIndex(texture:TextureBase, index:number = 0):number\n\t{\n\t\tif (this._invalidImages)\n\t\t\tthis._updateImages();\n\n\t\treturn this._imageIndices[texture.id][index];\n\t}\n\n\t/**\n\t *\n\t */\n\tpublic onClear(event:AssetEvent):void\n\t{\n\t\tsuper.onClear(event);\n\n\t\tthis._surface = null;\n\t\tthis._elementsClass = null;\n\t\tthis._stage = null;\n\n\t\tvar len:number = this._passes.length;\n\t\tfor (var i:number = 0; i < len; i++) {\n\t\t\tthis._passes[i].removeEventListener(PassEvent.INVALIDATE, this._onPassInvalidateDelegate);\n\t\t\tthis._passes[i].dispose();\n\t\t}\n\n\t\tthis._passes = null;\n\t}\n\n\t/**\n\t *\n\t */\n\tpublic onInvalidate(event:AssetEvent):void\n\t{\n\t\tsuper.onInvalidate(event);\n\n\t\tthis._invalidRender = true;\n\t\tthis._invalidAnimation = true;\n\t}\n\n\t/**\n\t *\n\t */\n\tpublic onInvalidatePasses(event:SurfaceEvent):void\n\t{\n\t\tvar len:number = this._passes.length;\n\t\tfor (var i:number = 0; i < len; i++)\n\t\t\tthis._passes[i].invalidate();\n\n\t\tthis._invalidAnimation = true;\n\t\tthis._invalidImages = true;\n\t}\n\n\t/**\n\t *\n\t */\n\tpublic onInvalidateAnimation(event:SurfaceEvent):void\n\t{\n\t\tthis._invalidAnimation = true;\n\t}\n\n\t/**\n\t *\n\t * @param surface\n\t */\n\tprivate _updateAnimation():void\n\t{\n\t\tif (this._invalidRender)\n\t\t\tthis._pUpdateRender();\n\n\t\tthis._invalidAnimation = false;\n\n\t\tvar usesAnimation:boolean = this._getEnabledGPUAnimation();\n\n\t\tvar renderOrderId = 0;\n\t\tvar mult:number = 1;\n\t\tvar shader:ShaderBase;\n\t\tvar len:number = this._passes.length;\n\t\tfor (var i:number = 0; i < len; i++) {\n\t\t\tshader = this._passes[i].shader;\n\t\t\tshader.usesAnimation = usesAnimation;\n\n\t\t\trenderOrderId += shader.programData.id*mult;\n\t\t\tmult *= 1000;\n\t\t}\n\t\t\n\t\tif (this._usesAnimation != usesAnimation) {\n\t\t\tthis._usesAnimation = usesAnimation;\n\n\t\t\tvar renderables:Array<IRenderable> = this._surface.iOwners;\n\t\t\tvar numOwners:number = renderables.length;\n\t\t\tfor (var j:number = 0; j < numOwners; j++)\n\t\t\t\trenderables[j].invalidateElements();\n\t\t}\n\n\t\tthis._renderOrderId = renderOrderId;\n\t}\n\n\tprivate _updateImages():void\n\t{\n\t\tthis._invalidImages = false;\n\n\t\tvar numTextures:number = this._surface.getNumTextures();\n\t\tvar texture:TextureBase;\n\t\tvar numImages:number;\n\t\tvar images:Array<number>;\n\t\tvar image:ImageBase;\n\t\tvar sampler:SamplerBase;\n\t\tvar index:number = 0;\n\n\t\tfor (var i:number = 0; i < numTextures; i++) {\n\t\t\ttexture = this._surface.getTextureAt(i);\n\t\t\tnumImages = texture.getNumImages();\n\t\t\timages = this._imageIndices[texture.id] = new Array<number>();\n\t\t\tfor (var j:number = 0; j < numImages; j++) {\n\t\t\t\timage = texture.getImageAt(j) || (this._surface.style? this._surface.style.getImageAt(texture, j) : null) || DefaultMaterialManager.getDefaultImage2D();\n\t\t\t\tthis.images[index] = <GL_ImageBase> this._stage.getAbstraction(image);\n\n\t\t\t\tsampler = texture.getSamplerAt(j) || (this._surface.style? this._surface.style.getSamplerAt(texture, j) : null) || DefaultMaterialManager.getDefaultSampler();\n\t\t\t\tthis.samplers[index] = <GL_SamplerBase> this._stage.getAbstraction(sampler);\n\n\t\t\t\timages[j] = index++;\n\t\t\t}\n\t\t}\n\n\t\tthis._numImages = index;\n\t}\n\n\t/**\n\t * Performs any processing that needs to occur before any of its passes are used.\n\t *\n\t * @private\n\t */\n\tpublic _pUpdateRender():void\n\t{\n\t\tthis._invalidRender = false;\n\n\t\t//overrride to update shader object properties\n\t}\n\n\t/**\n\t * Removes a pass from the surface.\n\t * @param pass The pass to be removed.\n\t */\n\tpublic _pRemovePass(pass:IPass):void\n\t{\n\t\tpass.removeEventListener(PassEvent.INVALIDATE, this._onPassInvalidateDelegate);\n\t\tthis._passes.splice(this._passes.indexOf(pass), 1);\n\t}\n\n\t/**\n\t * Removes all passes from the surface\n\t */\n\tpublic _pClearPasses():void\n\t{\n\t\tvar len:number = this._passes.length;\n\t\tfor (var i:number = 0; i < len; ++i)\n\t\t\tthis._passes[i].removeEventListener(PassEvent.INVALIDATE, this._onPassInvalidateDelegate);\n\n\t\tthis._passes.length = 0;\n\t}\n\n\t/**\n\t * Adds a pass to the surface\n\t * @param pass\n\t */\n\tpublic _pAddPass(pass:IPass):void\n\t{\n\t\tthis._passes.push(pass);\n\t\tpass.addEventListener(PassEvent.INVALIDATE, this._onPassInvalidateDelegate);\n\t}\n\n\t/**\n\t * Listener for when a pass's shader code changes. It recalculates the render order id.\n\t */\n\tprivate onPassInvalidate(event:PassEvent):void\n\t{\n\t\tthis._invalidAnimation = true;\n\t}\n\n\n\t/**\n\t * test if animation will be able to run on gpu BEFORE compiling materials\n\t * test if the shader objects supports animating the animation set in the vertex shader\n\t * if any object using this material fails to support accelerated animations for any of the shader objects,\n\t * we should do everything on cpu (otherwise we have the cost of both gpu + cpu animations)\n\t */\n\tprivate _getEnabledGPUAnimation():boolean\n\t{\n\t\tif (this._surface.animationSet) {\n\t\t\tthis._surface.animationSet.resetGPUCompatibility();\n\n\t\t\tvar renderables:Array<IRenderable> = this._surface.iOwners;\n\t\t\tvar numOwners:number = renderables.length;\n\n\t\t\tvar len:number = this._passes.length;\n\t\t\tvar shader:ShaderBase;\n\t\t\tfor (var i:number = 0; i < len; i++) {\n\t\t\t\tshader = this._passes[i].shader;\n\t\t\t\tshader.usesAnimation = false;\n\t\t\t\tfor (var j:number = 0; j < numOwners; j++)\n\t\t\t\t\tif (renderables[j].animator)\n\t\t\t\t\t\t(<AnimatorBase> renderables[j].animator).testGPUCompatibility(shader);\n\t\t\t}\n\n\n\t\t\treturn !this._surface.animationSet.usesCPU;\n\t\t}\n\n\t\treturn false;\n\t}\n}",
    "import {AssetEvent}\t\t\t\t\tfrom \"awayjs-core/lib/events/AssetEvent\";\nimport {ImageBase}\t\t\t\t\tfrom \"awayjs-core/lib/image/ImageBase\";\nimport {Matrix3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\n\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\n\nimport {AnimationSetBase}\t\t\t\tfrom \"../animators/AnimationSetBase\";\nimport {PassEvent}\t\t\t\t\tfrom \"../events/PassEvent\";\nimport {ShaderBase}\t\t\t\t\tfrom \"../shaders/ShaderBase\";\nimport {ShaderRegisterCache}\t\t\tfrom \"../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterData}\t\t\tfrom \"../shaders/ShaderRegisterData\";\nimport {IPass}\t\t\t\t\t\tfrom \"../surfaces/passes/IPass\";\nimport {GL_RenderableBase}\t\t\tfrom \"../renderables/GL_RenderableBase\";\nimport {GL_SurfaceBase}\t\t\t\tfrom \"../surfaces/GL_SurfaceBase\";\n\n/**\n * GL_SurfacePassBase provides an abstract base class for material shader passes. A material pass constitutes at least\n * a render call per required renderable.\n */\nexport class GL_SurfacePassBase extends GL_SurfaceBase implements IPass\n{\n\tpublic _shader:ShaderBase;\n\n\tpublic get shader():ShaderBase\n\t{\n\t\treturn this._shader;\n\t}\n\n\tpublic get animationSet():AnimationSetBase\n\t{\n\t\treturn <AnimationSetBase> this._surface.animationSet;\n\t}\n\n\t/**\n\t * Marks the shader program as invalid, so it will be recompiled before the next render.\n\t */\n\tpublic invalidate():void\n\t{\n\t\tthis._shader.invalidateProgram();\n\n\t\tthis.dispatchEvent(new PassEvent(PassEvent.INVALIDATE, this));\n\t}\n\n\tpublic dispose():void\n\t{\n\t\tif (this._shader) {\n\t\t\tthis._shader.dispose();\n\t\t\tthis._shader = null;\n\t\t}\n\t}\n\n\t/**\n\t * Renders the current pass. Before calling pass, activatePass needs to be called with the same index.\n\t * @param pass The pass used to render the renderable.\n\t * @param renderable The IRenderable object to draw.\n\t * @param stage The Stage object used for rendering.\n\t * @param entityCollector The EntityCollector object that contains the visible scene data.\n\t * @param viewProjection The view-projection matrix used to project to the screen. This is not the same as\n\t * camera.viewProjection as it includes the scaling factors when rendering to textures.\n\t *\n\t * @internal\n\t */\n\tpublic _setRenderState(renderable:GL_RenderableBase, camera:Camera, viewProjection:Matrix3D):void\n\t{\n\t\tthis._shader._setRenderState(renderable, camera, viewProjection);\n\t}\n\n\t/**\n\t * Sets the render state for the pass that is independent of the rendered object. This needs to be called before\n\t * calling pass. Before activating a pass, the previously used pass needs to be deactivated.\n\t * @param stage The Stage object which is currently used for rendering.\n\t * @param camera The camera from which the scene is viewed.\n\t * @private\n\t */\n\tpublic _iActivate(camera:Camera):void\n\t{\n\t\tthis._shader._iActivate(camera);\n\t}\n\n\t/**\n\t * Clears the render state for the pass. This needs to be called before activating another pass.\n\t * @param stage The Stage used for rendering\n\t *\n\t * @private\n\t */\n\tpublic _iDeactivate():void\n\t{\n\t\tthis._shader._iDeactivate();\n\t}\n\n\tpublic _iInitConstantData(shader:ShaderBase):void\n\t{\n\n\t}\n\n\tpublic _iGetPreLightingVertexCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"\";\n\t}\n\n\tpublic _iGetPreLightingFragmentCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"\";\n\t}\n\n\tpublic _iGetVertexCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"\";\n\t}\n\n\tpublic _iGetFragmentCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"\";\n\t}\n\n\tpublic _iGetNormalVertexCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"\";\n\t}\n\n\tpublic _iGetNormalFragmentCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"\";\n\t}\n}",
    "import {IAssetClass}\t\t\t\t\tfrom \"awayjs-core/lib/library/IAssetClass\";\nimport {IAbstractionPool}\t\t\t\tfrom \"awayjs-core/lib/library/IAbstractionPool\";\n\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\n\nimport {ISurface}\t\t\t\t\t\tfrom \"awayjs-display/lib/base/ISurface\";\n\nimport {IElementsClassGL}\t\t\t\tfrom \"../elements/IElementsClassGL\";\nimport {ISurfaceClassGL}\t\t\t\tfrom \"../surfaces/ISurfaceClassGL\";\nimport {GL_SurfaceBase}\t\t\t\tfrom \"../surfaces/GL_SurfaceBase\";\n\n/**\n * @class away.pool.SurfacePool\n */\nexport class SurfacePool implements IAbstractionPool\n{\n\tprivate static _abstractionClassPool:Object = new Object();\n\n\tprivate _abstractionPool:Object = new Object();\n\tprivate _elementsClass:IElementsClassGL;\n\tprivate _stage:Stage;\n\tprivate _surfaceClassGL:ISurfaceClassGL;\n\n\tget stage():Stage\n\t{\n\t\treturn this._stage;\n\t}\n\n\t/**\n\t * //TODO\n\t *\n\t * @param surfaceClassGL\n\t */\n\tconstructor(elementsClass:IElementsClassGL, stage:Stage, surfaceClassGL:ISurfaceClassGL = null)\n\t{\n\t\tthis._elementsClass = elementsClass;\n\t\tthis._stage = stage;\n\t\tthis._surfaceClassGL = surfaceClassGL;\n\t}\n\n\t/**\n\t * //TODO\n\t *\n\t * @param elementsOwner\n\t * @returns IElements\n\t */\n\tpublic getAbstraction(surface:ISurface):GL_SurfaceBase\n\t{\n\t\treturn (this._abstractionPool[surface.id] || (this._abstractionPool[surface.id] = new (<ISurfaceClassGL> this._surfaceClassGL || SurfacePool._abstractionClassPool[surface.assetType])(surface, this._elementsClass, this)));\n\t}\n\n\t/**\n\t * //TODO\n\t *\n\t * @param elementsOwner\n\t */\n\tpublic clearAbstraction(surface:ISurface):void\n\t{\n\t\tdelete this._abstractionPool[surface.id];\n\t}\n\n\t/**\n\t *\n\t * @param imageObjectClass\n\t */\n\tpublic static registerAbstraction(surfaceClassGL:ISurfaceClassGL, assetClass:IAssetClass):void\n\t{\n\t\tSurfacePool._abstractionClassPool[assetClass.assetType] = surfaceClassGL;\n\t}\n}",
    "import {AssetEvent}\t\t\t\t\tfrom \"awayjs-core/lib/events/AssetEvent\";\nimport {Matrix3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\n\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\nimport {ISurface}\t\t\t\t\t\tfrom \"awayjs-display/lib/base/ISurface\";\n\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\n\nimport {GL_RenderableBase}\t\t\tfrom \"../../renderables/GL_RenderableBase\";\nimport {GL_SurfaceBase}\t\t\t\tfrom \"../../surfaces/GL_SurfaceBase\";\nimport {ShaderBase}\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\nimport {ShaderRegisterCache}\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterData}\t\t\tfrom \"../../shaders/ShaderRegisterData\";\nimport {ShaderRegisterElement}\t\tfrom \"../../shaders/ShaderRegisterElement\";\nimport {IElementsClassGL}\t\t\t\tfrom \"../../elements/IElementsClassGL\";\nimport {PassBase}\t\t\t\t\t\tfrom \"../../surfaces/passes/PassBase\";\nimport {GL_TextureBase}\t\t\t\tfrom \"../../textures/GL_TextureBase\";\n\n/**\n * BasicMaterialPass forms an abstract base class for the default shaded materials provided by Stage,\n * using material methods to define their appearance.\n */\nexport class BasicMaterialPass extends PassBase\n{\n\tprivate _textureVO:GL_TextureBase;\n\tprivate _diffuseR:number = 1;\n\tprivate _diffuseG:number = 1;\n\tprivate _diffuseB:number = 1;\n\tprivate _diffuseA:number = 1;\n\n\tprivate _fragmentConstantsIndex:number;\n\n\tconstructor(render:GL_SurfaceBase, surface:ISurface, elementsClass:IElementsClassGL, stage:Stage)\n\t{\n\t\tsuper(render, surface, elementsClass, stage);\n\n\t\tthis._shader = new ShaderBase(elementsClass, this, this._stage);\n\n\t\tthis.invalidate();\n\t}\n\n\tpublic _iIncludeDependencies(shader:ShaderBase):void\n\t{\n\t\tsuper._iIncludeDependencies(shader);\n\n\t\tif (this._textureVO != null)\n\t\t\tshader.uvDependencies++;\n    }\n\n\tpublic invalidate():void\n\t{\n\t\tsuper.invalidate();\n\n\t\tthis._textureVO = this._surface.getTextureAt(0)? <GL_TextureBase> this._shader.getAbstraction(this._surface.getTextureAt(0)) : null;\n\t}\n\n\tpublic dispose():void\n\t{\n\t\tif (this._textureVO) {\n\t\t\tthis._textureVO.onClear(new AssetEvent(AssetEvent.CLEAR, this._surface.getTextureAt(0)));\n\t\t\tthis._textureVO = null;\n\t\t}\n\n\t\tsuper.dispose();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGetFragmentCode(shader:ShaderBase, regCache:ShaderRegisterCache, sharedReg:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\n        var alphaReg:ShaderRegisterElement;\n\n        if (this.preserveAlpha) {\n            alphaReg = regCache.getFreeFragmentSingleTemp();\n            regCache.addFragmentTempUsages(alphaReg, 1);\n            code += \"mov \" + alphaReg + \", \" + sharedReg.shadedTarget + \".w\\n\";\n        }\n\n\t\tvar targetReg:ShaderRegisterElement = sharedReg.shadedTarget;\n\n\t\tif (this._textureVO != null) {\n\n\t\t\tcode += this._textureVO._iGetFragmentCode(targetReg, regCache, sharedReg, sharedReg.uvVarying);\n\n\t\t\tif (shader.alphaThreshold > 0) {\n\t\t\t\tvar cutOffReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\t\t\t\tthis._fragmentConstantsIndex = cutOffReg.index*4;\n\n\t\t\t\tcode += \"sub \" + targetReg + \".w, \" + targetReg + \".w, \" + cutOffReg + \".x\\n\" + \"kil \" + targetReg + \".w\\n\" + \"add \" + targetReg + \".w, \" + targetReg + \".w, \" + cutOffReg + \".x\\n\";\n\t\t\t}\n\t\t} else if (shader.colorBufferIndex != -1) {\n\n\t\t\tcode += \"mov \" + targetReg + \", \" + sharedReg.colorVarying + \"\\n\";\n\t\t} else {\n\t\t\tvar diffuseInputReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\n\t\t\tthis._fragmentConstantsIndex = diffuseInputReg.index*4;\n\n\t\t\tcode += \"mov \" + targetReg + \", \" + diffuseInputReg + \"\\n\";\n\t\t}\n\n        if (this.preserveAlpha) {\n            code += \"mul \" + sharedReg.shadedTarget + \".w, \" + sharedReg.shadedTarget + \".w, \" + alphaReg + \"\\n\";\n            regCache.removeFragmentTempUsage(alphaReg);\n        }\n\n\t\treturn code;\n\t}\n\n\tpublic _setRenderState(renderable:GL_RenderableBase, camera:Camera, viewProjection:Matrix3D):void\n\t{\n\t\tsuper._setRenderState(renderable, camera, viewProjection);\n\n\t\tif (this._textureVO != null)\n\t\t\tthis._textureVO._setRenderState(renderable);\n\t}\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iActivate(camera:Camera):void\n\t{\n\t\tsuper._iActivate(camera);\n\n\t\tif (this._textureVO != null) {\n\t\t\tthis._textureVO.activate(this._render);\n\n\t\t\tif (this._shader.alphaThreshold > 0)\n\t\t\t\tthis._shader.fragmentConstantData[this._fragmentConstantsIndex] = this._shader.alphaThreshold;\n\t\t} else if (this._shader.colorBufferIndex == -1) {\n\t\t\tvar index:number = this._fragmentConstantsIndex;\n\t\t\tvar data:Float32Array = this._shader.fragmentConstantData;\n\t\t\tdata[index] = this._diffuseR;\n\t\t\tdata[index + 1] = this._diffuseG;\n\t\t\tdata[index + 2] = this._diffuseB;\n\t\t\tdata[index + 3] = this._diffuseA;\n\t\t}\n\t}\n}",
    "import {Matrix3D}\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\nimport {EventDispatcher}\t\t\t\tfrom \"awayjs-core/lib/events/EventDispatcher\";\n\nimport {Camera}\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Camera\";\nimport {ISurface}\t\t\t\t\t\tfrom \"awayjs-display/lib/base/ISurface\";\nimport {TextureBase}\t\t\t\t\tfrom \"awayjs-display/lib/textures/TextureBase\";\n\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\n\nimport {AnimationSetBase}\t\t\t\tfrom \"../../animators/AnimationSetBase\";\nimport {PassEvent}\t\t\t\t\tfrom \"../../events/PassEvent\";\nimport {ShaderBase}\t\t\t\t\tfrom \"../../shaders/ShaderBase\";\nimport {ShaderRegisterCache}\t\t\tfrom \"../../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterData}\t\t\tfrom \"../../shaders/ShaderRegisterData\";\nimport {IPass}\t\t\t\t\t\tfrom \"../../surfaces/passes/IPass\";\nimport {IElementsClassGL}\t\t\t\tfrom \"../../elements/IElementsClassGL\";\nimport {GL_RenderableBase}\t\t\tfrom \"../../renderables/GL_RenderableBase\";\nimport {GL_SurfaceBase}\t\t\t\tfrom \"../../surfaces/GL_SurfaceBase\";\n\n/**\n * PassBase provides an abstract base class for material shader passes. A material pass constitutes at least\n * a render call per required renderable.\n */\nexport class PassBase extends EventDispatcher implements IPass\n{\n\tpublic _render:GL_SurfaceBase;\n\tpublic _surface:ISurface;\n\tpublic _elementsClass:IElementsClassGL;\n\tpublic _stage:Stage;\n\t\n\tpublic _shader:ShaderBase;\n\n\tprivate _preserveAlpha:boolean = true;\n\tprivate _forceSeparateMVP:boolean = false;\n\n\tpublic get shader():ShaderBase\n\t{\n\t\treturn this._shader;\n\t}\n\n\tpublic get animationSet():AnimationSetBase\n\t{\n\t\treturn <AnimationSetBase> this._surface.animationSet;\n\t}\n\n\t/**\n\t * Indicates whether the output alpha value should remain unchanged compared to the material's original alpha.\n\t */\n\tpublic get preserveAlpha():boolean\n\t{\n\t\treturn this._preserveAlpha;\n\t}\n\n\tpublic set preserveAlpha(value:boolean)\n\t{\n\t\tif (this._preserveAlpha == value)\n\t\t\treturn;\n\n\t\tthis._preserveAlpha = value;\n\n\t\tthis.invalidate();\n\t}\n\n\t/**\n\t * Indicates whether the screen projection should be calculated by forcing a separate scene matrix and\n\t * view-projection matrix. This is used to prevent rounding errors when using multiple passes with different\n\t * projection code.\n\t */\n\tpublic get forceSeparateMVP():boolean\n\t{\n\t\treturn this._forceSeparateMVP;\n\t}\n\n\tpublic set forceSeparateMVP(value:boolean)\n\t{\n\t\tif (this._forceSeparateMVP == value)\n\t\t\treturn;\n\n\t\tthis._forceSeparateMVP = value;\n\n\t\tthis.invalidate();\n\t}\n\n\t/**\n\t * Creates a new PassBase object.\n\t */\n\tconstructor(render:GL_SurfaceBase, surface:ISurface, elementsClass:IElementsClassGL, stage:Stage)\n\t{\n\t\tsuper();\n\n\t\tthis._render = render;\n\t\tthis._surface = surface;\n\t\tthis._elementsClass = elementsClass;\n\t\tthis._stage = stage;\n\t}\n\n\tpublic getImageIndex(texture:TextureBase, index:number = 0):number\n\t{\n\t\treturn this._render.getImageIndex(texture, index);\n\t}\n\n\t/**\n\t * Marks the shader program as invalid, so it will be recompiled before the next render.\n\t */\n\tpublic invalidate():void\n\t{\n\t\tthis._shader.invalidateProgram();\n\n\t\tthis.dispatchEvent(new PassEvent(PassEvent.INVALIDATE, this));\n\t}\n\n\t/**\n\t * Cleans up any resources used by the current object.\n\t * @param deep Indicates whether other resources should be cleaned up, that could potentially be shared across different instances.\n\t */\n\tpublic dispose():void\n\t{\n\t\tthis._render = null;\n\t\tthis._surface = null;\n\t\tthis._elementsClass = null;\n\t\tthis._stage = null;\n\n\t\tif (this._shader) {\n\t\t\tthis._shader.dispose();\n\t\t\tthis._shader = null;\n\t\t}\n\t}\n\n\t/**\n\t * Renders the current pass. Before calling pass, activatePass needs to be called with the same index.\n\t * @param pass The pass used to render the renderable.\n\t * @param renderable The IRenderable object to draw.\n\t * @param stage The Stage object used for rendering.\n\t * @param entityCollector The EntityCollector object that contains the visible scene data.\n\t * @param viewProjection The view-projection matrix used to project to the screen. This is not the same as\n\t * camera.viewProjection as it includes the scaling factors when rendering to textures.\n\t *\n\t * @internal\n\t */\n\tpublic _setRenderState(renderable:GL_RenderableBase, camera:Camera, viewProjection:Matrix3D):void\n\t{\n\t\tthis._shader._setRenderState(renderable, camera, viewProjection);\n\t}\n\n\t/**\n\t * Sets the render state for the pass that is independent of the rendered object. This needs to be called before\n\t * calling pass. Before activating a pass, the previously used pass needs to be deactivated.\n\t * @param stage The Stage object which is currently used for rendering.\n\t * @param camera The camera from which the scene is viewed.\n\t * @private\n\t */\n\tpublic _iActivate(camera:Camera):void\n\t{\n\t\tthis._shader._iActivate(camera);\n\t}\n\n\t/**\n\t * Clears the render state for the pass. This needs to be called before activating another pass.\n\t * @param stage The Stage used for rendering\n\t *\n\t * @private\n\t */\n\tpublic _iDeactivate():void\n\t{\n\t\tthis._shader._iDeactivate();\n\t}\n\n\tpublic _iIncludeDependencies(shader:ShaderBase):void\n\t{\n\t\tthis._render._iIncludeDependencies(shader);\n\t\t\n\t\tif (this._forceSeparateMVP)\n\t\t\tshader.globalPosDependencies++;\n\t}\n\n\n\tpublic _iInitConstantData(shader:ShaderBase):void\n\t{\n\n\t}\n\n\tpublic _iGetPreLightingVertexCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"\";\n\t}\n\n\tpublic _iGetPreLightingFragmentCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"\";\n\t}\n\n\tpublic _iGetVertexCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"\";\n\t}\n\n\tpublic _iGetFragmentCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"\";\n\t}\n\n\tpublic _iGetNormalVertexCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"\";\n\t}\n\n\tpublic _iGetNormalFragmentCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"\";\n\t}\n}",
    "export {BasicMaterialPass}\t\t\t\tfrom \"./surfaces/passes/BasicMaterialPass\";\nexport {ILightingPass}\t\t\t\t\tfrom \"./surfaces/passes/ILightingPass\";\nexport {IPass}\t\t\t\t\t\t\tfrom \"./surfaces/passes/IPass\";\nexport {PassBase}\t\t\t\t\t\tfrom \"./surfaces/passes/PassBase\";\nexport {GL_BasicMaterialSurface}\t\t\tfrom \"./surfaces/GL_BasicMaterialSurface\";\nexport {GL_DepthSurface}\t\t\t\t\tfrom \"./surfaces/GL_DepthSurface\";\nexport {GL_DistanceSurface}\t\t\t\tfrom \"./surfaces/GL_DistanceSurface\";\nexport {GL_SkyboxSurface}\t\t\t\tfrom \"./surfaces/GL_SkyboxSurface\";\nexport {GL_SurfaceBase}\t\t\t\t\tfrom \"./surfaces/GL_SurfaceBase\";\nexport {GL_SurfacePassBase}\t\t\t\tfrom \"./surfaces/GL_SurfacePassBase\";\nexport {ISurfaceClassGL}\t\t\t\t\tfrom \"./surfaces/ISurfaceClassGL\";\nexport {SurfacePool}\t\t\t\t\t\tfrom \"./surfaces/SurfacePool\";",
    "import {AssetEvent}\t\t\t\t\tfrom \"awayjs-core/lib/events/AssetEvent\";\nimport {Image2D}\t\t\t\t\t\tfrom \"awayjs-core/lib/image/Image2D\";\n\nimport {GL_Image2D}\t\t\t\t\tfrom \"awayjs-stagegl/lib/image/GL_Image2D\";\nimport {GL_Sampler2D}\t\t\t\t\tfrom \"awayjs-stagegl/lib/image/GL_Sampler2D\";\n\nimport {MappingMode}\t\t\t\t\tfrom \"awayjs-display/lib/textures/MappingMode\";\nimport {Single2DTexture}\t\t\t\tfrom \"awayjs-display/lib/textures/Single2DTexture\";\n\nimport {GL_SurfaceBase}\t\t\t\tfrom \"../surfaces/GL_SurfaceBase\";\nimport {GL_RenderableBase}\t\t\tfrom \"../renderables/GL_RenderableBase\";\nimport {ShaderBase}\t\t\t\t\tfrom \"../shaders/ShaderBase\";\nimport {ShaderRegisterCache}\t\t\tfrom \"../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterData}\t\t\tfrom \"../shaders/ShaderRegisterData\";\nimport {ShaderRegisterElement}\t\tfrom \"../shaders/ShaderRegisterElement\";\nimport {GL_TextureBase}\t\t\t\tfrom \"../textures/GL_TextureBase\";\n\n/**\n *\n * @class away.pool.GL_Single2DTexture\n */\nexport class GL_Single2DTexture extends GL_TextureBase\n{\n\n\tprivate _single2DTexture:Single2DTexture;\n\tprivate _textureIndex:number;\n\tprivate _imageIndex:number;\n\tprivate _samplerIndex:number;\n\n\tconstructor(single2DTexture:Single2DTexture, shader:ShaderBase)\n\t{\n\t\tsuper(single2DTexture, shader);\n\n\t\tthis._single2DTexture = single2DTexture;\n\t}\n\n\tpublic onClear(event:AssetEvent):void\n\t{\n\t\tsuper.onClear(event);\n\n\t\tthis._single2DTexture = null;\n\t}\n\n\t/**\n\t *\n\t * @param shader\n\t * @param regCache\n\t * @param targetReg The register in which to store the sampled colour.\n\t * @param uvReg The uv coordinate vector with which to sample the texture map.\n\t * @returns {string}\n\t * @private\n\t */\n\tpublic _iGetFragmentCode(targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedReg:ShaderRegisterData, inputReg:ShaderRegisterElement):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar wrap:string = \"wrap\";\n\t\tvar format:string = \"\";//this.getFormatString(this._single2DTexture.image2D);\n\t\tvar filter:string = \"linear,miplinear\";\n\n\t\tvar temp:ShaderRegisterElement;\n\n\t\t//modify depending on mapping mode\n\t\tif (this._single2DTexture.mappingMode == MappingMode.RADIAL_GRADIENT) {\n\t\t\ttemp = regCache.getFreeFragmentVectorTemp();\n\t\t\tcode += \"mul \" + temp + \".xy, \" + inputReg + \", \" + inputReg + \"\\n\";\n\t\t\tcode += \"mul \" + temp + \".xy, \" + inputReg + \", \" + inputReg + \"\\n\";\n\t\t\tcode += \"add \" + temp + \".x, \" + temp + \".x, \" + temp + \".y\\n\";\n\t\t\tcode += \"sub \" + temp + \".y, \" + temp + \".y, \" + temp + \".y\\n\";\n\t\t\tcode += \"sqt \" + temp + \".x, \" + temp + \".x, \" + temp + \".x\\n\";\n\t\t\tinputReg = temp;\n\t\t}\n\n\t\t//handles texture atlasing\n\t\tif (this._shader.useImageRect) {\n\t\t\tvar samplerReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\t\t\tthis._samplerIndex = samplerReg.index*4;\n\t\t\ttemp = regCache.getFreeFragmentVectorTemp();\n\n\t\t\tcode += \"mul \" + temp + \", \" + inputReg + \", \" + samplerReg + \".xy\\n\";\n\t\t\tcode += \"add \" + temp + \", \" + temp + \", \" + samplerReg + \".zw\\n\";\n\t\t\tinputReg = temp;\n\t\t}\n\n\t\tthis._imageIndex = this._shader.getImageIndex(this._single2DTexture, 0);\n\n\t\tvar textureReg:ShaderRegisterElement = this.getTextureReg(this._imageIndex, regCache, sharedReg);\n\t\tthis._textureIndex = textureReg.index;\n\n\t\tcode += \"tex \" + targetReg + \", \" + inputReg + \", \" + textureReg + \" <2d,\" + filter + \",\" + format + wrap + \">\\n\";\n\n\t\treturn code;\n\t}\n\n\tpublic activate(render:GL_SurfaceBase):void\n\t{\n\t\tvar sampler:GL_Sampler2D = <GL_Sampler2D> render.samplers[this._imageIndex];\n\t\tsampler.activate(this._textureIndex);\n\n\t\tvar image:GL_Image2D = render.images[this._imageIndex];\n\t\timage.activate(this._textureIndex, sampler._sampler.mipmap);\n\n\t\tif (this._shader.useImageRect) {\n\t\t\tvar index:number = this._samplerIndex;\n\t\t\tvar data:Float32Array = this._shader.fragmentConstantData;\n\t\t\tif (!sampler._sampler.imageRect) {\n\t\t\t\tdata[index] = 1;\n\t\t\t\tdata[index + 1] = 1;\n\t\t\t\tdata[index + 2] = 0;\n\t\t\t\tdata[index + 3] = 0;\n\t\t\t} else {\n\t\t\t\tdata[index] = sampler._sampler.imageRect.width;\n\t\t\t\tdata[index + 1] = sampler._sampler.imageRect.height;\n\t\t\t\tdata[index + 2] = sampler._sampler.imageRect.x;\n\t\t\t\tdata[index + 3] = sampler._sampler.imageRect.y;\n\n\t\t\t}\n\t\t}\n\t}\n\n\n\tpublic _setRenderState(renderable:GL_RenderableBase):void\n\t{\n\t\tvar sampler:GL_Sampler2D = <GL_Sampler2D> renderable.samplers[this._imageIndex];\n\n\t\tif (sampler)\n\t\t\tsampler.activate(this._textureIndex);\n\n\t\tvar image:GL_Image2D = renderable.images[this._imageIndex];\n\n\t\tif (image)\n\t\t\timage.activate(this._textureIndex, sampler._sampler.mipmap);\n\n\t\tif (this._shader.useImageRect && sampler) {\n\t\t\tvar index:number = this._samplerIndex;\n\t\t\tvar data:Float32Array = this._shader.fragmentConstantData;\n\t\t\tif (!sampler._sampler.imageRect) {\n\t\t\t\tdata[index] = 1;\n\t\t\t\tdata[index + 1] = 1;\n\t\t\t\tdata[index + 2] = 0;\n\t\t\t\tdata[index + 3] = 0;\n\t\t\t} else {\n\t\t\t\tdata[index] = sampler._sampler.imageRect.width;\n\t\t\t\tdata[index + 1] = sampler._sampler.imageRect.height;\n\t\t\t\tdata[index + 2] = sampler._sampler.imageRect.x;\n\t\t\t\tdata[index + 3] = sampler._sampler.imageRect.y;\n\n\t\t\t}\n\t\t}\n\t}\n}",
    "import {AssetEvent}\t\t\t\t\tfrom \"awayjs-core/lib/events/AssetEvent\";\n\nimport {GL_SamplerCube}\t\t\t\tfrom \"awayjs-stagegl/lib/image/GL_SamplerCube\";\n\nimport {SingleCubeTexture}\t\t\tfrom \"awayjs-display/lib/textures/SingleCubeTexture\";\n\nimport {GL_SurfaceBase}\t\t\t\tfrom \"../surfaces/GL_SurfaceBase\";\nimport {GL_RenderableBase}\t\t\tfrom \"../renderables/GL_RenderableBase\";\nimport {ShaderBase}\t\t\t\t\tfrom \"../shaders/ShaderBase\";\nimport {ShaderRegisterCache}\t\t\tfrom \"../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterData}\t\t\tfrom \"../shaders/ShaderRegisterData\";\nimport {ShaderRegisterElement}\t\tfrom \"../shaders/ShaderRegisterElement\";\nimport {GL_TextureBase}\t\t\t\tfrom \"../textures/GL_TextureBase\";\n\n/**\n *\n * @class away.pool.TextureDataBase\n */\nexport class GL_SingleCubeTexture extends GL_TextureBase\n{\n\tprivate _singleCubeTexture:SingleCubeTexture;\n\tprivate _textureIndex:number;\n\tprivate _imageIndex:number;\n\n\tconstructor(singleCubeTexture:SingleCubeTexture, shader:ShaderBase)\n\t{\n\t\tsuper(singleCubeTexture, shader);\n\n\t\tthis._singleCubeTexture = singleCubeTexture;\n\t}\n\n\n\tpublic onClear(event:AssetEvent):void\n\t{\n\t\tsuper.onClear(event);\n\n\t\tthis._singleCubeTexture = null;\n\t}\n\n\tpublic _iIncludeDependencies(includeInput:boolean = true):void\n\t{\n\t\tif (includeInput)\n\t\t\tthis._shader.usesPositionFragment = true;\n\t}\n\n\t/**\n\t *\n\t * @param shader\n\t * @param regCache\n\t * @param targetReg The register in which to store the sampled colour.\n\t * @param uvReg The direction vector with which to sample the cube map.\n\t * @returns {string}\n\t * @private\n\t */\n\tpublic _iGetFragmentCode(targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedReg:ShaderRegisterData, inputReg:ShaderRegisterElement):string\n\t{\n\t\tvar format:string = \"\";//this.getFormatString(this._singleCubeTexture.imageCube);\n\t\tvar filter:string = \"linear,miplinear\";\n\n\t\tthis._imageIndex = this._shader.getImageIndex(this._singleCubeTexture, 0);\n\n\t\tvar textureReg:ShaderRegisterElement = this.getTextureReg(this._imageIndex, regCache, sharedReg);\n\t\tthis._textureIndex = textureReg.index;\n\n\t\treturn \"tex \" + targetReg + \", \" + inputReg + \", \" + textureReg + \" <cube,\" + format + filter + \">\\n\";\n\t}\n\n\n\tpublic activate(render:GL_SurfaceBase):void\n\t{\n\t\tvar sampler:GL_SamplerCube = <GL_SamplerCube> render.samplers[this._imageIndex];\n\n\t\tif (sampler)\n\t\t\tsampler.activate(this._textureIndex);\n\n\t\tif (render.images[this._imageIndex])\n\t\t\trender.images[this._imageIndex].activate(this._textureIndex, sampler._sampler.mipmap);\n\n\t}\n\n\tpublic _setRenderState(renderable:GL_RenderableBase):void\n\t{\n\t\tvar sampler:GL_SamplerCube = <GL_SamplerCube> renderable.samplers[this._imageIndex];\n\n\t\tif (sampler)\n\t\t\tsampler.activate(this._textureIndex);\n\n\t\tif (renderable.images[this._imageIndex] && sampler) //TODO: allow image to be re-written without accompanying sampler on the renderable\n\t\t\trenderable.images[this._imageIndex].activate(this._textureIndex, sampler._sampler.mipmap);\n\t}\n}",
    "import {AbstractMethodError}\t\t\tfrom \"awayjs-core/lib/errors/AbstractMethodError\";\nimport {AssetEvent}\t\t\t\t\tfrom \"awayjs-core/lib/events/AssetEvent\";\nimport {ImageBase}\t\t\t\t\tfrom \"awayjs-core/lib/image/ImageBase\";\nimport {SamplerBase}\t\t\t\t\tfrom \"awayjs-core/lib/image/SamplerBase\";\nimport {AbstractionBase}\t\t\t\tfrom \"awayjs-core/lib/library/AbstractionBase\";\n\nimport {ContextGLTextureFormat}\t\tfrom \"awayjs-stagegl/lib/base/ContextGLTextureFormat\";\nimport {Stage}\t\t\t\t\t\tfrom \"awayjs-stagegl/lib/base/Stage\";\n\nimport {TextureBase}\t\t\t\t\tfrom \"awayjs-display/lib/textures/TextureBase\";\n\nimport {GL_SurfaceBase}\t\t\t\tfrom \"../surfaces/GL_SurfaceBase\";\nimport {GL_RenderableBase}\t\t\tfrom \"../renderables/GL_RenderableBase\";\nimport {ShaderBase}\t\t\t\t\tfrom \"../shaders/ShaderBase\";\nimport {ShaderRegisterCache}\t\t\tfrom \"../shaders/ShaderRegisterCache\";\nimport {ShaderRegisterData}\t\t\tfrom \"../shaders/ShaderRegisterData\";\nimport {ShaderRegisterElement}\t\tfrom \"../shaders/ShaderRegisterElement\";\n\n/**\n *\n * @class away.pool.GL_TextureBaseBase\n */\nexport class GL_TextureBase extends AbstractionBase\n{\n\tprivate _texture:TextureBase;\n\tpublic _shader:ShaderBase;\n\tpublic _stage:Stage;\n\n\tconstructor(texture:TextureBase, shader:ShaderBase)\n\t{\n\t\tsuper(texture, shader);\n\n\t\tthis._texture = texture;\n\t\tthis._shader = shader;\n\t\tthis._stage = shader._stage;\n\t}\n\n\t/**\n\t *\n\t */\n\tpublic onClear(event:AssetEvent):void\n\t{\n\t\tsuper.onClear(event);\n\n\t\tthis._texture = null;\n\t\tthis._shader = null;\n\t\tthis._stage = null;\n\t}\n\n\tpublic _iGetFragmentCode(targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedReg:ShaderRegisterData, inputReg:ShaderRegisterElement = null):string\n\t{\n\t\tthrow new AbstractMethodError();\n\t}\n\n\tpublic _setRenderState(renderable:GL_RenderableBase):void\n\t{\n\t\t//overidden for state logic\n\t}\n\n\tpublic activate(render:GL_SurfaceBase):void\n\t{\n\t\t//overridden for activation logic\n\t}\n\n\tpublic getTextureReg(imageIndex:number, regCache:ShaderRegisterCache, sharedReg:ShaderRegisterData):ShaderRegisterElement\n\t{\n\t\tvar index:number = this._shader.imageIndices.indexOf(imageIndex); //todo: collapse the index based on duplicate image objects to save registrations\n\n\t\tif (index == -1) {\n\t\t\tvar textureReg:ShaderRegisterElement = regCache.getFreeTextureReg();\n\t\t\tsharedReg.textures.push(textureReg);\n\t\t\tthis._shader.imageIndices.push(imageIndex);\n\n\t\t\treturn textureReg;\n\t\t}\n\n\t\treturn sharedReg.textures[index];\n\t}\n\n\tpublic getFormatString(image:ImageBase):string\n\t{\n\t\tswitch (image.format) {\n\t\t\tcase ContextGLTextureFormat.COMPRESSED:\n\t\t\t\treturn \"dxt1,\";\n\t\t\tcase ContextGLTextureFormat.COMPRESSED_ALPHA:\n\t\t\t\treturn \"dxt5,\";\n\t\t\tdefault:\n\t\t\t\treturn \"\";\n\t\t}\n\t}\n}",
    "export {GL_Single2DTexture}\t\t\t\tfrom \"./textures/GL_Single2DTexture\";\nexport {GL_SingleCubeTexture}\t\t\tfrom \"./textures/GL_SingleCubeTexture\";\nexport {GL_TextureBase}\t\t\t\t\tfrom \"./textures/GL_TextureBase\";",
    "import {AttributesBuffer}\t\t\t\t\tfrom \"awayjs-core/lib/attributes/AttributesBuffer\";\nimport {Matrix3DUtils}\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3DUtils\";\n\nimport {DisplayObjectContainer}\t\t\tfrom \"awayjs-display/lib/display/DisplayObjectContainer\";\nimport {Graphics}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphics\";\nimport {TriangleElements}\t\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\nimport {Sprite}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Sprite\";\nimport {MaterialBase}\t\t\t\t\t\tfrom \"awayjs-display/lib/materials/MaterialBase\";\n\n/**\n *  Class Merge merges two or more static sprites into one.<code>Merge</code>\n */\nexport class Merge\n{\n\n\t//private const LIMIT:uint = 196605;\n\tprivate _objectSpace:boolean;\n\tprivate _keepMaterial:boolean;\n\tprivate _disposeSources:boolean;\n\tprivate _graphicVOs:Array<GraphicVO>;\n\tprivate _toDispose:Array<Sprite>;\n\n\t/**\n\t * @param    keepMaterial    [optional]    Determines if the merged object uses the recevier sprite material information or keeps its source material(s). Defaults to false.\n\t * If false and receiver object has multiple materials, the last material found in receiver subsprites is applied to the merged subsprite(es).\n\t * @param    disposeSources  [optional]    Determines if the sprite and geometry source(s) used for the merging are disposed. Defaults to false.\n\t * If true, only receiver geometry and resulting sprite are kept in  memory.\n\t * @param    objectSpace     [optional]    Determines if source sprite(es) is/are merged using objectSpace or worldspace. Defaults to false.\n\t */\n\tconstructor(keepMaterial:boolean = false, disposeSources:boolean = false, objectSpace:boolean = false)\n\t{\n\t\tthis._keepMaterial = keepMaterial;\n\t\tthis._disposeSources = disposeSources;\n\t\tthis._objectSpace = objectSpace;\n\t}\n\n\t/**\n\t * Determines if the sprite and geometry source(s) used for the merging are disposed. Defaults to false.\n\t */\n\tpublic set disposeSources(b:boolean)\n\t{\n\t\tthis._disposeSources = b;\n\t}\n\n\tpublic get disposeSources():boolean\n\t{\n\t\treturn this._disposeSources;\n\t}\n\n\t/**\n\t * Determines if the material source(s) used for the merging are disposed. Defaults to false.\n\t */\n\tpublic set keepMaterial(b:boolean)\n\t{\n\t\tthis._keepMaterial = b;\n\t}\n\n\tpublic get keepMaterial():boolean\n\t{\n\t\treturn this._keepMaterial;\n\t}\n\n\t/**\n\t * Determines if source sprite(es) is/are merged using objectSpace or worldspace. Defaults to false.\n\t */\n\tpublic set objectSpace(b:boolean)\n\t{\n\t\tthis._objectSpace = b;\n\t}\n\n\tpublic get objectSpace():boolean\n\t{\n\t\treturn this._objectSpace;\n\t}\n\n\t/**\n\t * Merges all the children of a container into a single Sprite. If no Sprite object is found, method returns the receiver without modification.\n\t *\n\t * @param    receiver           The Sprite to receive the merged contents of the container.\n\t * @param    objectContainer    The DisplayObjectContainer holding the sprites to be mergd.\n\t *\n\t * @return The merged Sprite instance.\n\t */\n\tpublic applyToContainer(receiver:Sprite, objectContainer:DisplayObjectContainer):void\n\t{\n\t\tthis.reset();\n\n\t\t//collect container sprites\n\t\tthis.parseContainer(receiver, objectContainer);\n\n\t\t//collect receiver\n\t\tthis.collect(receiver, false);\n\n\t\t//merge to receiver\n\t\tthis.merge(receiver, this._disposeSources);\n\t}\n\n\t/**\n\t * Merges all the sprites found in the Array&lt;Sprite&gt; into a single Sprite.\n\t *\n\t * @param    receiver    The Sprite to receive the merged contents of the sprites.\n\t * @param    sprites      A series of Spritees to be merged with the reciever sprite.\n\t */\n\tpublic applyToSpritees(receiver:Sprite, sprites:Array<Sprite>):void\n\t{\n\t\tthis.reset();\n\n\t\tif (!sprites.length)\n\t\t\treturn;\n\n\t\t//collect sprites in vector\n\t\tfor (var i:number /*uint*/ = 0; i < sprites.length; i++)\n\t\t\tif (sprites[i] != receiver)\n\t\t\t\tthis.collect(sprites[i], this._disposeSources);\n\n\t\t//collect receiver\n\t\tthis.collect(receiver, false);\n\n\t\t//merge to receiver\n\t\tthis.merge(receiver, this._disposeSources);\n\t}\n\n\t/**\n\t *  Merges 2 sprites into one. It is recommand to use apply when 2 sprites are to be merged. If more need to be merged, use either applyToSpritees or applyToContainer methods.\n\t *\n\t * @param    receiver    The Sprite to receive the merged contents of both sprites.\n\t * @param    sprite        The Sprite to be merged with the receiver sprite\n\t */\n\tpublic apply(receiver:Sprite, sprite:Sprite):void\n\t{\n\t\tthis.reset();\n\n\t\t//collect sprite\n\t\tthis.collect(sprite, this._disposeSources);\n\n\t\t//collect receiver\n\t\tthis.collect(receiver, false);\n\n\t\t//merge to receiver\n\t\tthis.merge(receiver, this._disposeSources);\n\t}\n\n\tprivate reset():void\n\t{\n\t\tthis._toDispose  = new Array<Sprite>();\n\t\tthis._graphicVOs = new Array<GraphicVO>();\n\t}\n\n\tprivate merge(destSprite:Sprite, dispose:boolean):void\n\t{\n\t\tvar i:number /*uint*/;\n\t\t//var oldGraphics:Graphics;\n\t\tvar destGraphics:Graphics;\n\t\tvar useSubMaterials:boolean;\n\n\t\t//oldGraphics = destSprite.graphics.clone();\n\t\tdestGraphics = destSprite.graphics;\n\n\t\t// Only apply materials directly to sub-sprites if necessary,\n\t\t// i.e. if there is more than one material available.\n\t\tuseSubMaterials = (this._graphicVOs.length > 1);\n\n\t\tfor (i = 0; i < this._graphicVOs.length; i++) {\n\t\t\tvar elements:TriangleElements = new TriangleElements(new AttributesBuffer());\n\t\t\telements.autoDeriveNormals = false;\n\t\t\telements.autoDeriveTangents = false;\n\n\t\t\tvar data:GraphicVO = this._graphicVOs[i];\n\t\t\telements.setIndices(data.indices);\n\t\t\telements.setPositions(data.vertices);\n\t\t\telements.setNormals(data.normals);\n\t\t\telements.setTangents(data.tangents);\n\t\t\telements.setUVs(data.uvs);\n\n\t\t\tdestGraphics.addGraphic(elements);\n\n\t\t\tif (this._keepMaterial && useSubMaterials)\n\t\t\t\tdestSprite.graphics[i].material = data.material;\n\t\t}\n\n\t\tif (this._keepMaterial && !useSubMaterials && this._graphicVOs.length)\n\t\t\tdestSprite.material = this._graphicVOs[0].material;\n\n\t\tif (dispose) {\n\t\t\tvar len:number = this._toDispose.length;\n\t\t\tfor (var i:number; i < len; i++)\n\t\t\t\tthis._toDispose[i].dispose();;\n\t\t}\n\n\t\tthis._toDispose = null;\n\t}\n\n\tprivate collect(sprite:Sprite, dispose:boolean):void\n\t{\n\t\tvar subIdx:number /*uint*/;\n\t\tvar calc:number /*uint*/;\n\t\tfor (subIdx = 0; subIdx < sprite.graphics.count; subIdx++) {\n\t\t\tvar i:number /*uint*/;\n\t\t\tvar len:number /*uint*/;\n\t\t\tvar iIdx:number /*uint*/, vIdx:number /*uint*/, nIdx:number /*uint*/, tIdx:number /*uint*/, uIdx:number /*uint*/;\n\t\t\tvar indexOffset:number /*uint*/;\n\t\t\tvar elements:TriangleElements;\n\t\t\tvar vo:GraphicVO;\n\t\t\tvar vertices:Array<number>;\n\t\t\tvar normals:Array<number>;\n\t\t\tvar tangents:Array<number>;\n\t\t\tvar ind:Uint16Array, pd:ArrayBufferView, nd:Float32Array, td:Float32Array, ud:ArrayBufferView;\n\n\t\t\telements = <TriangleElements> sprite.graphics.getGraphicAt(subIdx).elements;\n\t\t\tpd = elements.positions.get(elements.numVertices);\n\t\t\tnd = elements.normals.get(elements.numVertices);\n\t\t\ttd = elements.tangents.get(elements.numVertices);\n\t\t\tud = elements.uvs.get(elements.numVertices);\n\n\t\t\t// Get (or create) a VO for this material\n\t\t\tvo = this.getGraphicData(sprite.graphics.getGraphicAt(subIdx).material);\n\n\t\t\t// Vertices and normals are copied to temporary vectors, to be transformed\n\t\t\t// before concatenated onto those of the data. This is unnecessary if no\n\t\t\t// transformation will be performed, i.e. for object space merging.\n\t\t\tvertices = (this._objectSpace)? vo.vertices : new Array<number>();\n\t\t\tnormals = (this._objectSpace)? vo.normals : new Array<number>();\n\t\t\ttangents = (this._objectSpace)? vo.tangents : new Array<number>();\n\n\t\t\t// Copy over vertex attributes\n\t\t\tvIdx = vertices.length;\n\t\t\tnIdx = normals.length;\n\t\t\ttIdx = tangents.length;\n\t\t\tuIdx = vo.uvs.length;\n\t\t\tlen = elements.numVertices;\n\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\tcalc = i*3;\n\n\t\t\t\t// Position\n\t\t\t\tvertices[vIdx++] = pd[calc];\n\t\t\t\tvertices[vIdx++] = pd[calc + 1];\n\t\t\t\tvertices[vIdx++] = pd[calc + 2];\n\n\t\t\t\t// Normal\n\t\t\t\tnormals[nIdx++] = nd[calc];\n\t\t\t\tnormals[nIdx++] = nd[calc + 1];\n\t\t\t\tnormals[nIdx++] = nd[calc + 2];\n\n\t\t\t\t// Tangent\n\t\t\t\ttangents[tIdx++] = td[calc];\n\t\t\t\ttangents[tIdx++] = td[calc + 1];\n\t\t\t\ttangents[tIdx++] = td[calc + 2];\n\n\t\t\t\t// UV\n\t\t\t\tvo.uvs[uIdx++] = ud[i*2];\n\t\t\t\tvo.uvs[uIdx++] = ud[i*2 + 1];\n\t\t\t}\n\n\t\t\t// Copy over triangle indices\n\t\t\tindexOffset = (!this._objectSpace)? vo.vertices.length/3 :0;\n\t\t\tiIdx = vo.indices.length;\n\t\t\tlen = elements.numElements;\n\t\t\tind = elements.indices.get(len);\n\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\tcalc = i*3;\n\t\t\t\tvo.indices[iIdx++] = ind[calc] + indexOffset;\n\t\t\t\tvo.indices[iIdx++] = ind[calc + 1] + indexOffset;\n\t\t\t\tvo.indices[iIdx++] = ind[calc + 2] + indexOffset;\n\t\t\t}\n\n\t\t\tif (!this._objectSpace) {\n\t\t\t\tsprite.sceneTransform.transformVectors(vertices, vertices);\n\t\t\t\tMatrix3DUtils.deltaTransformVectors(sprite.sceneTransform, normals, normals);\n\t\t\t\tMatrix3DUtils.deltaTransformVectors(sprite.sceneTransform, tangents, tangents);\n\n\t\t\t\t// Copy vertex data from temporary (transformed) vectors\n\t\t\t\tvIdx = vo.vertices.length;\n\t\t\t\tnIdx = vo.normals.length;\n\t\t\t\ttIdx = vo.tangents.length;\n\t\t\t\tlen = vertices.length;\n\t\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\t\tvo.vertices[vIdx++] = vertices[i];\n\t\t\t\t\tvo.normals[nIdx++] = normals[i];\n\t\t\t\t\tvo.tangents[tIdx++] = tangents[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (dispose)\n\t\t\tthis._toDispose.push(sprite);\n\t}\n\n\tprivate getGraphicData(material:MaterialBase):GraphicVO\n\t{\n\t\tvar data:GraphicVO;\n\n\t\tif (this._keepMaterial) {\n\t\t\tvar i:number /*uint*/;\n\t\t\tvar len:number /*uint*/;\n\n\t\t\tlen = this._graphicVOs.length;\n\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\tif (this._graphicVOs[i].material == material) {\n\t\t\t\t\tdata = this._graphicVOs[i];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (this._graphicVOs.length) {\n\t\t\t// If materials are not to be kept, all data can be\n\t\t\t// put into a single VO, so return that one.\n\t\t\tdata = this._graphicVOs[0];\n\t\t}\n\n\t\t// No data (for this material) found, create new.\n\t\tif (!data) {\n\t\t\tdata = new GraphicVO();\n\t\t\tdata.vertices = new Array<number>();\n\t\t\tdata.normals = new Array<number>();\n\t\t\tdata.tangents = new Array<number>();\n\t\t\tdata.uvs = new Array<number>();\n\t\t\tdata.indices = new Array<number /*uint*/>();\n\t\t\tdata.material = material;\n\n\t\t\tthis._graphicVOs.push(data);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tprivate parseContainer(receiver:Sprite, object:DisplayObjectContainer):void\n\t{\n\t\tvar child:DisplayObjectContainer;\n\t\tvar i:number /*uint*/;\n\n\t\tif (object instanceof Sprite && object != (<DisplayObjectContainer> receiver))\n\t\t\tthis.collect(<Sprite> object, this._disposeSources);\n\n\t\tfor (i = 0; i < object.numChildren; ++i) {\n\t\t\tchild = <DisplayObjectContainer> object.getChildAt(i);\n\t\t\tthis.parseContainer(receiver, child);\n\t\t}\n\t}\n}\n\nexport class GraphicVO\n{\n\tpublic uvs:Array<number>;\n\tpublic vertices:Array<number>;\n\tpublic normals:Array<number>;\n\tpublic tangents:Array<number>;\n\tpublic indices:Array<number /*uint*/>;\n\tpublic material:MaterialBase;\n}\n",
    "import {Matrix}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix\";\nimport {Matrix3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\n\n/**\n * ...\n */\nexport class ParticleGraphicsTransform\n{\n\tprivate _defaultVertexTransform:Matrix3D;\n\tprivate _defaultInvVertexTransform:Matrix3D;\n\tprivate _defaultUVTransform:Matrix;\n\n\tpublic set vertexTransform(value:Matrix3D)\n\t{\n\t\tthis._defaultVertexTransform = value;\n\t\tthis._defaultInvVertexTransform = value.clone();\n\t\tthis._defaultInvVertexTransform.invert();\n\t\tthis._defaultInvVertexTransform.transpose();\n\t}\n\n\tpublic set UVTransform(value:Matrix)\n\t{\n\t\tthis._defaultUVTransform = value;\n\t}\n\n\tpublic get UVTransform():Matrix\n\t{\n\t\treturn this._defaultUVTransform;\n\t}\n\n\tpublic get vertexTransform():Matrix3D\n\t{\n\t\treturn this._defaultVertexTransform;\n\t}\n\n\tpublic get invVertexTransform():Matrix3D\n\t{\n\t\treturn this._defaultInvVertexTransform;\n\t}\n}",
    "export {Merge}\t\t\t\t\t\t\tfrom \"./tools/commands/Merge\";\nexport {ParticleGraphicsTransform}\t\tfrom \"./tools/data/ParticleGraphicsTransform\";",
    "import {AttributesBuffer}\t\t\t\t\tfrom \"awayjs-core/lib/attributes/AttributesBuffer\";\nimport {Matrix}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix\";\nimport {Matrix3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\nimport {Point}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Point\";\nimport {Vector3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Vector3D\";\n\nimport {ParticleData}\t\t\t\t\t\tfrom \"awayjs-display/lib/animators/data/ParticleData\";\nimport {Graphics}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/graphics/Graphics\";\nimport {TriangleElements}\t\t\t\t\tfrom \"awayjs-display/lib/graphics/TriangleElements\";\nimport {Sprite}\t\t\t\t\t\t\tfrom \"awayjs-display/lib/display/Sprite\";\n\nimport {ParticleGraphicsTransform}\t\tfrom \"../tools/data/ParticleGraphicsTransform\";\n\n/**\n * ...\n */\nexport class ParticleGraphicsHelper\n{\n\tpublic static MAX_VERTEX:number = 65535;\n\n\tpublic static generateGraphics(output:Graphics, graphicsArray:Array<Graphics>, transforms:Array<ParticleGraphicsTransform> = null):void\n\t{\n\t\tvar indicesVector:Array<Array<number>> = new Array<Array<number>>();\n\t\tvar positionsVector:Array<Array<number>> = new Array<Array<number>>();\n\t\tvar normalsVector:Array<Array<number>> = new Array<Array<number>>();\n\t\tvar tangentsVector:Array<Array<number>> = new Array<Array<number>>();\n\t\tvar uvsVector:Array<Array<number>> = new Array<Array<number>>();\n\t\tvar vertexCounters:Array<number> = new Array<number>();\n\t\tvar particles:Array<ParticleData> = new Array<ParticleData>();\n\t\tvar elementsArray:Array<TriangleElements> = new Array<TriangleElements>();\n\t\tvar numParticles:number = graphicsArray.length;\n\n\t\tvar sourceGraphics:Graphics;\n\t\tvar sourceElements:TriangleElements;\n\t\tvar numGraphics:number;\n\t\tvar indices:Array<number>;\n\t\tvar positions:Array<number>;\n\t\tvar normals:Array<number>;\n\t\tvar tangents:Array<number>;\n\t\tvar uvs:Array<number>;\n\t\tvar vertexCounter:number;\n\t\tvar elements:TriangleElements;\n\t\tvar i:number;\n\t\tvar j:number;\n\t\tvar sub2SubMap:Array<number> = new Array<number>();\n\n\t\tvar tempVertex:Vector3D = new Vector3D;\n\t\tvar tempNormal:Vector3D = new Vector3D;\n\t\tvar tempTangents:Vector3D = new Vector3D;\n\t\tvar tempUV:Point = new Point;\n\n\t\tfor (i = 0; i < numParticles; i++) {\n\t\t\tsourceGraphics = graphicsArray[i];\n\t\t\tnumGraphics = sourceGraphics.count;\n\t\t\tfor (var srcIndex:number = 0; srcIndex < numGraphics; srcIndex++) {\n\t\t\t\t//create a different particle subgeometry group for each source subgeometry in a particle.\n\t\t\t\tif (sub2SubMap.length <= srcIndex) {\n\t\t\t\t\tsub2SubMap.push(elementsArray.length);\n\t\t\t\t\tindicesVector.push(new Array<number>());\n\t\t\t\t\tpositionsVector.push(new Array<number>());\n\t\t\t\t\tnormalsVector.push(new Array<number>());\n\t\t\t\t\ttangentsVector.push(new Array<number>());\n\t\t\t\t\tuvsVector.push(new Array<number>());\n\t\t\t\t\telementsArray.push(new TriangleElements(new AttributesBuffer()));\n\t\t\t\t\tvertexCounters.push(0);\n\t\t\t\t}\n\n\t\t\t\tsourceElements = <TriangleElements> sourceGraphics.getGraphicAt(srcIndex).elements;\n\n\t\t\t\t//add a new particle subgeometry if this source subgeometry will take us over the maxvertex limit\n\t\t\t\tif (sourceElements.numVertices + vertexCounters[sub2SubMap[srcIndex]] > ParticleGraphicsHelper.MAX_VERTEX) {\n\t\t\t\t\t//update submap and add new subgeom vectors\n\t\t\t\t\tsub2SubMap[srcIndex] = elementsArray.length;\n\t\t\t\t\tindicesVector.push(new Array<number>());\n\t\t\t\t\tpositionsVector.push(new Array<number>());\n\t\t\t\t\tnormalsVector.push(new Array<number>());\n\t\t\t\t\ttangentsVector.push(new Array<number>());\n\t\t\t\t\tuvsVector.push(new Array<number>());\n\t\t\t\t\telementsArray.push(new TriangleElements(new AttributesBuffer()));\n\t\t\t\t\tvertexCounters.push(0);\n\t\t\t\t}\n\n\t\t\t\tj = sub2SubMap[srcIndex];\n\n\t\t\t\t//select the correct vector\n\t\t\t\tindices = indicesVector[j];\n\t\t\t\tpositions = positionsVector[j];\n\t\t\t\tnormals = normalsVector[j];\n\t\t\t\ttangents = tangentsVector[j];\n\t\t\t\tuvs = uvsVector[j];\n\t\t\t\tvertexCounter = vertexCounters[j];\n\t\t\t\telements = elementsArray[j];\n\n\t\t\t\tvar particleData:ParticleData = new ParticleData();\n\t\t\t\tparticleData.numVertices = sourceElements.numVertices;\n\t\t\t\tparticleData.startVertexIndex = vertexCounter;\n\t\t\t\tparticleData.particleIndex = i;\n\t\t\t\tparticleData.elements = elements;\n\t\t\t\tparticles.push(particleData);\n\n\t\t\t\tvertexCounters[j] += sourceElements.numVertices;\n\n\t\t\t\tvar k:number;\n\t\t\t\tvar tempLen:number;\n\t\t\t\tvar compact:TriangleElements = sourceElements;\n\t\t\t\tvar product:number;\n\t\t\t\tvar sourcePositions:ArrayBufferView;\n\t\t\t\tvar sourceNormals:Float32Array;\n\t\t\t\tvar sourceTangents:Float32Array;\n\t\t\t\tvar sourceUVs:ArrayBufferView;\n\n\t\t\t\tif (compact) {\n\t\t\t\t\ttempLen = compact.numVertices;\n\t\t\t\t\tsourcePositions = compact.positions.get(tempLen);\n\t\t\t\t\tsourceNormals = compact.normals.get(tempLen);\n\t\t\t\t\tsourceTangents = compact.tangents.get(tempLen);\n\t\t\t\t\tsourceUVs = compact.uvs.get(tempLen);\n\n\t\t\t\t\tif (transforms) {\n\t\t\t\t\t\tvar particleGraphicsTransform:ParticleGraphicsTransform = transforms[i];\n\t\t\t\t\t\tvar vertexTransform:Matrix3D = particleGraphicsTransform.vertexTransform;\n\t\t\t\t\t\tvar invVertexTransform:Matrix3D = particleGraphicsTransform.invVertexTransform;\n\t\t\t\t\t\tvar UVTransform:Matrix = particleGraphicsTransform.UVTransform;\n\n\t\t\t\t\t\tfor (k = 0; k < tempLen; k++) {\n\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\t * 0 - 2: vertex position X, Y, Z\n\t\t\t\t\t\t\t * 3 - 5: normal X, Y, Z\n\t\t\t\t\t\t\t * 6 - 8: tangent X, Y, Z\n\t\t\t\t\t\t\t * 9 - 10: U V\n\t\t\t\t\t\t\t * 11 - 12: Secondary U V*/\n\t\t\t\t\t\t\tproduct = k*3;\n\t\t\t\t\t\t\ttempVertex.x = sourcePositions[product];\n\t\t\t\t\t\t\ttempVertex.y = sourcePositions[product + 1];\n\t\t\t\t\t\t\ttempVertex.z = sourcePositions[product + 2];\n\t\t\t\t\t\t\ttempNormal.x = sourceNormals[product];\n\t\t\t\t\t\t\ttempNormal.y = sourceNormals[product + 1];\n\t\t\t\t\t\t\ttempNormal.z = sourceNormals[product + 2];\n\t\t\t\t\t\t\ttempTangents.x = sourceTangents[product];\n\t\t\t\t\t\t\ttempTangents.y = sourceTangents[product + 1];\n\t\t\t\t\t\t\ttempTangents.z = sourceTangents[product + 2];\n\t\t\t\t\t\t\ttempUV.x = sourceUVs[k*2];\n\t\t\t\t\t\t\ttempUV.y = sourceUVs[k*2 + 1];\n\t\t\t\t\t\t\tif (vertexTransform) {\n\t\t\t\t\t\t\t\ttempVertex = vertexTransform.transformVector(tempVertex);\n\t\t\t\t\t\t\t\ttempNormal = invVertexTransform.deltaTransformVector(tempNormal);\n\t\t\t\t\t\t\t\ttempTangents = invVertexTransform.deltaTransformVector(tempNormal);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (UVTransform)\n\t\t\t\t\t\t\t\ttempUV = UVTransform.transformPoint(tempUV);\n\t\t\t\t\t\t\t//this is faster than that only push one data\n\t\t\t\t\t\t\tpositions.push(tempVertex.x, tempVertex.y, tempVertex.z);\n\t\t\t\t\t\t\tnormals.push(tempNormal.x, tempNormal.y, tempNormal.z);\n\t\t\t\t\t\t\ttangents.push(tempTangents.x, tempTangents.y, tempTangents.z);\n\t\t\t\t\t\t\tuvs.push(tempUV.x, tempUV.y);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (k = 0; k < tempLen; k++) {\n\t\t\t\t\t\t\tproduct = k*3;\n\t\t\t\t\t\t\t//this is faster than that only push one data\n\t\t\t\t\t\t\tpositions.push(sourcePositions[product], sourcePositions[product + 1], sourcePositions[product + 2]);\n\t\t\t\t\t\t\tnormals.push(sourceNormals[product], sourceNormals[product + 1], sourceNormals[product + 2]);\n\t\t\t\t\t\t\ttangents.push(sourceTangents[product], sourceTangents[product + 1], sourceTangents[product + 2]);\n\t\t\t\t\t\t\tuvs.push(sourceUVs[k*2], sourceUVs[k*2 + 1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t//Todo\n\t\t\t\t}\n\n\t\t\t\ttempLen = sourceElements.numElements;\n\t\t\t\tvar sourceIndices:Uint16Array = sourceElements.indices.get(tempLen);\n\t\t\t\tfor (k = 0; k < tempLen; k++) {\n\t\t\t\t\tproduct = k*3;\n\t\t\t\t\tindices.push(sourceIndices[product] + vertexCounter, sourceIndices[product + 1] + vertexCounter, sourceIndices[product + 2] + vertexCounter);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\toutput.particles = particles;\n\t\toutput.numParticles = numParticles;\n\n\t\tnumParticles = elementsArray.length;\n\t\tfor (i = 0; i < numParticles; i++) {\n\t\t\telements = elementsArray[i];\n\t\t\telements.autoDeriveNormals = false;\n\t\t\telements.autoDeriveTangents = false;\n\t\t\telements.setIndices(indicesVector[i]);\n\t\t\telements.setPositions(positionsVector[i]);\n\t\t\telements.setNormals(normalsVector[i]);\n\t\t\telements.setTangents(tangentsVector[i]);\n\t\t\telements.setUVs(uvsVector[i]);\n\t\t\toutput.addGraphic(elements);\n\t\t}\n\t}\n}",
    "import {Matrix3D}\t\t\t\t\t\t\tfrom \"awayjs-core/lib/geom/Matrix3D\";\n\n/**\n *\n */\nexport class PerspectiveMatrix3D extends Matrix3D\n{\n\tconstructor(v:Float32Array = null)\n\t{\n\t\tsuper(v);\n\t}\n\n\tpublic perspectiveFieldOfViewLH(fieldOfViewY:number, aspectRatio:number, zNear:number, zFar:number):void\n\t{\n\t\tvar yScale:number = 1/Math.tan(fieldOfViewY/2);\n\t\tvar xScale:number = yScale/aspectRatio;\n\n\t\tthis.rawData[0] = xScale;\n\t\tthis.rawData[1] = 0.0;\n\t\tthis.rawData[2] = 0.0;\n\t\tthis.rawData[3] = 0.0;\n\n\t\tthis.rawData[4] = 0.0;\n\t\tthis.rawData[5] = yScale;\n\t\tthis.rawData[6] = 0.0;\n\t\tthis.rawData[7] = 0.0;\n\n\t\tthis.rawData[8] = 0.0;\n\t\tthis.rawData[9] = 0.0;\n\t\tthis.rawData[10] = zFar/(zFar - zNear);\n\t\tthis.rawData[11] = 1.0;\n\n\t\tthis.rawData[12] = 0.0;\n\t\tthis.rawData[13] = 0.0;\n\t\tthis.rawData[14] = (zNear*zFar)/(zNear - zFar);\n\t\tthis.rawData[15] = 0.0;\n\t}\n}",
    "export {ParticleGraphicsHelper}\t\t\tfrom \"./utils/ParticleGraphicsHelper\";\nexport {PerspectiveMatrix3D}\t\t\t\tfrom \"./utils/PerspectiveMatrix3D\";"
  ],
  "sourceRoot": ""
}