var BitmapData = require("awayjs-core/lib/base/BitmapData");
var AssetLibrary = require("awayjs-core/lib/library/AssetLibrary");
var AssetType = require("awayjs-core/lib/library/AssetType");
var URLRequest = require("awayjs-core/lib/net/URLRequest");
var LoaderEvent = require("awayjs-core/lib/events/LoaderEvent");
var BitmapTexture = require("awayjs-core/lib/textures/BitmapTexture");
var RequestAnimationFrame = require("awayjs-core/lib/utils/RequestAnimationFrame");
var View = require("awayjs-display/lib/containers/View");
var PrimitivePlanePrefab = require("awayjs-display/lib/prefabs/PrimitivePlanePrefab");
var BasicMaterial = require("awayjs-display/lib/materials/BasicMaterial");
var DefaultRenderer = require("awayjs-renderergl/lib/DefaultRenderer");
var BitmapDataReflectionTest = (function () {
    function BitmapDataReflectionTest() {
        var _this = this;
        this.view = new View(new DefaultRenderer());
        this.raf = new RequestAnimationFrame(this.render, this);
        var token = AssetLibrary.load(new URLRequest('assets/dots.png'));
        token.addEventListener(LoaderEvent.RESOURCE_COMPLETE, function (event) { return _this.onResourceComplete(event); });
        window.onresize = function (event) { return _this.onResize(event); };
    }
    BitmapDataReflectionTest.prototype.onResourceComplete = function (event) {
        var loader = event.target;
        var l = loader.baseDependency.assets.length;
        for (var c = 0; c < l; c++) {
            var asset = loader.baseDependency.assets[c];
            switch (asset.assetType) {
                case AssetType.TEXTURE:
                    var prefab = new PrimitivePlanePrefab(500, 500, 1, 1, false);
                    var tx = asset;
                    var bitmap = new BitmapData(1024, 1024, true, 0x00000000);
                    bitmap.context.translate(0, 1024);
                    bitmap.context.scale(1, -1);
                    bitmap.context.drawImage(tx.htmlImageElement, 0, 0, 1024, 1024);
                    var gradient = bitmap.context.createLinearGradient(0, 0, 0, 1024);
                    gradient.addColorStop(0.8, "rgba(255, 255, 255, 1.0)");
                    gradient.addColorStop(1, "rgba(255, 255, 255, 0.5)");
                    bitmap.context.fillStyle = gradient;
                    bitmap.context.rect(0, 0, 1024, 1024);
                    bitmap.context.globalCompositeOperation = "destination-out";
                    bitmap.context.fill();
                    var bitmapClone = new BitmapData(1024, 1024, true, 0x00000000);
                    bitmapClone.copyPixels(bitmap, bitmapClone.rect, bitmapClone.rect);
                    document.body.appendChild(bitmap.canvas);
                    var bmpTX = new BitmapTexture(bitmapClone, false);
                    var material = new BasicMaterial(bmpTX);
                    material.bothSides = true;
                    material.alphaBlending = true;
                    var material2 = new BasicMaterial(tx);
                    material2.bothSides = true;
                    material2.alphaBlending = true;
                    this.reflectionMesh = prefab.getNewObject();
                    this.reflectionMesh.material = material;
                    this.view.scene.addChild(this.reflectionMesh);
                    this.fullmesh = prefab.getNewObject();
                    this.fullmesh.material = material2;
                    this.fullmesh.rotationY = 90;
                    this.view.scene.addChild(this.fullmesh);
                    break;
            }
        }
        this.raf.start();
        this.onResize();
    };
    BitmapDataReflectionTest.prototype.onResize = function (event) {
        if (event === void 0) { event = null; }
        this.view.x = window.innerWidth / 2;
        this.view.width = window.innerWidth / 2;
        this.view.height = window.innerHeight;
    };
    BitmapDataReflectionTest.prototype.render = function () {
        this.fullmesh.rotationY += .5;
        this.reflectionMesh.rotationY += .5;
        this.view.render();
    };
    return BitmapDataReflectionTest;
})();

//# sourceMappingURL=data:application/json;base64,