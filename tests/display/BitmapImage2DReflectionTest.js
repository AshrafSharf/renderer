"use strict";
var BitmapImage2D_1 = require("awayjs-core/lib/image/BitmapImage2D");
var AssetLibrary_1 = require("awayjs-core/lib/library/AssetLibrary");
var URLRequest_1 = require("awayjs-core/lib/net/URLRequest");
var LoaderEvent_1 = require("awayjs-core/lib/events/LoaderEvent");
var RequestAnimationFrame_1 = require("awayjs-core/lib/utils/RequestAnimationFrame");
var View_1 = require("awayjs-display/lib/View");
var PrimitivePlanePrefab_1 = require("awayjs-display/lib/prefabs/PrimitivePlanePrefab");
var ElementsType_1 = require("awayjs-display/lib/graphics/ElementsType");
var BasicMaterial_1 = require("awayjs-display/lib/materials/BasicMaterial");
var DefaultRenderer_1 = require("awayjs-renderergl/lib/DefaultRenderer");
var BitmapImage2DReflectionTest = (function () {
    function BitmapImage2DReflectionTest() {
        var _this = this;
        this.view = new View_1.default(new DefaultRenderer_1.default());
        this.raf = new RequestAnimationFrame_1.default(this.render, this);
        var session = AssetLibrary_1.default.getLoader();
        session.addEventListener(LoaderEvent_1.default.LOAD_COMPLETE, function (event) { return _this.onLoadComplete(event); });
        session.load(new URLRequest_1.default('assets/dots.png'));
        window.onresize = function (event) { return _this.onResize(event); };
    }
    BitmapImage2DReflectionTest.prototype.onLoadComplete = function (event) {
        var loader = event.target;
        var l = loader.baseDependency.assets.length;
        for (var c = 0; c < l; c++) {
            var asset = loader.baseDependency.assets[c];
            switch (asset.assetType) {
                case BitmapImage2D_1.default.assetType:
                    var prefab = new PrimitivePlanePrefab_1.default(null, ElementsType_1.default.TRIANGLE, 500, 500, 1, 1, false);
                    var bitmap = new BitmapImage2D_1.default(1024, 1024, true, 0x00000000);
                    var imageCanvas = document.createElement("canvas");
                    imageCanvas.width = 1024;
                    imageCanvas.height = 1024;
                    var context = imageCanvas.getContext("2d");
                    var imageData = context.getImageData(0, 0, 1024, 1024);
                    context.translate(0, 1024);
                    context.scale(1, -1);
                    context.drawImage(asset.getCanvas(), 0, 0, 1024, 1024);
                    var gradient = context.createLinearGradient(0, 0, 0, 1024);
                    gradient.addColorStop(0.8, "rgba(255, 255, 255, 1.0)");
                    gradient.addColorStop(1, "rgba(255, 255, 255, 0.5)");
                    context.fillStyle = gradient;
                    context.rect(0, 0, 1024, 1024);
                    context.globalCompositeOperation = "destination-out";
                    context.fill();
                    bitmap.draw(imageCanvas);
                    var bitmapClone = new BitmapImage2D_1.default(1024, 1024, true, 0x00000000);
                    bitmapClone.copyPixels(bitmap, bitmapClone.rect, bitmapClone.rect);
                    document.body.appendChild(bitmap.getCanvas());
                    var material = new BasicMaterial_1.default(bitmapClone);
                    material.bothSides = true;
                    material.alphaBlending = true;
                    var material2 = new BasicMaterial_1.default(asset);
                    material2.bothSides = true;
                    material2.alphaBlending = true;
                    this.reflectionSprite = prefab.getNewObject();
                    this.reflectionSprite.material = material;
                    this.view.scene.addChild(this.reflectionSprite);
                    this.fullmesh = prefab.getNewObject();
                    this.fullmesh.material = material2;
                    this.fullmesh.rotationY = 90;
                    this.view.scene.addChild(this.fullmesh);
                    break;
            }
        }
        this.raf.start();
        this.onResize();
    };
    BitmapImage2DReflectionTest.prototype.onResize = function (event) {
        if (event === void 0) { event = null; }
        this.view.x = window.innerWidth / 2;
        this.view.width = window.innerWidth / 2;
        this.view.height = window.innerHeight;
    };
    BitmapImage2DReflectionTest.prototype.render = function () {
        this.fullmesh.rotationY += .5;
        this.reflectionSprite.rotationY += .5;
        this.view.render();
    };
    return BitmapImage2DReflectionTest;
}());

//# sourceMappingURL=data:application/json;base64,