"use strict";
var LoaderEvent_1 = require("awayjs-core/lib/events/LoaderEvent");
var URLRequest_1 = require("awayjs-core/lib/net/URLRequest");
var AssetLibrary_1 = require("awayjs-core/lib/library/AssetLibrary");
var RequestAnimationFrame_1 = require("awayjs-core/lib/utils/RequestAnimationFrame");
var Debug_1 = require("awayjs-core/lib/utils/Debug");
var View_1 = require("awayjs-display/lib/View");
var Skybox_1 = require("awayjs-display/lib/display/Skybox");
var DefaultRenderer_1 = require("awayjs-renderergl/lib/DefaultRenderer");
var CubeTextures = (function () {
    function CubeTextures() {
        var _this = this;
        Debug_1.default.LOG_PI_ERRORS = false;
        Debug_1.default.THROW_ERRORS = false;
        this._view = new View_1.default(new DefaultRenderer_1.default());
        this._view.camera.z = -500;
        this._view.camera.y = 250;
        this._view.camera.rotationX = 20;
        this._view.camera.projection.near = 0.5;
        this._view.camera.projection.far = 14000;
        this._view.backgroundColor = 0x2c2c32;
        var session = AssetLibrary_1.default.getLoader();
        session.addEventListener(LoaderEvent_1.default.LOAD_COMPLETE, function (event) { return _this.onLoadComplete(event); });
        session.load(new URLRequest_1.default('assets/SingleCubeTextureTest.cube'));
        window.onresize = function (event) { return _this.onResize(event); };
        this.onResize();
        this._timer = new RequestAnimationFrame_1.default(this.render, this);
        this._timer.start();
    }
    CubeTextures.prototype.onLoadComplete = function (event) {
        var loader = event.target;
        switch (event.url) {
            case 'assets/SingleCubeTextureTest.cube':
                this._view.scene.addChild(new Skybox_1.default(loader.baseDependency.assets[0]));
                break;
        }
    };
    CubeTextures.prototype.render = function (dt) {
        this._view.camera.rotationY += 0.01 * dt;
        this._view.render();
    };
    CubeTextures.prototype.onResize = function (event) {
        if (event === void 0) { event = null; }
        this._view.y = 0;
        this._view.x = 0;
        this._view.width = window.innerWidth;
        this._view.height = window.innerHeight;
    };
    return CubeTextures;
}());

//# sourceMappingURL=data:application/json;base64,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QixZQUFvQjtRQUVuQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUM7UUFDckMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQztJQUN4QyxDQUFDO0lBQ0YsbUJBQUM7QUFBRCxDQXZEQSxBQXVEQyxJQUFBIiwiZmlsZSI6InRleHR1cmVzL0N1YmVUZXh0dXJlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCaXRtYXBJbWFnZUN1YmVcdFx0XHRcdGZyb20gXCJhd2F5anMtY29yZS9saWIvaW1hZ2UvQml0bWFwSW1hZ2VDdWJlXCI7XG5pbXBvcnQgTG9hZGVyRXZlbnRcdFx0XHRcdFx0ZnJvbSBcImF3YXlqcy1jb3JlL2xpYi9ldmVudHMvTG9hZGVyRXZlbnRcIjtcbmltcG9ydCBVUkxSZXF1ZXN0XHRcdFx0XHRcdGZyb20gXCJhd2F5anMtY29yZS9saWIvbmV0L1VSTFJlcXVlc3RcIjtcbmltcG9ydCBBc3NldExpYnJhcnlcdFx0XHRcdFx0ZnJvbSBcImF3YXlqcy1jb3JlL2xpYi9saWJyYXJ5L0Fzc2V0TGlicmFyeVwiO1xuaW1wb3J0IExvYWRlclx0XHRcdFx0XHRcdGZyb20gXCJhd2F5anMtY29yZS9saWIvbGlicmFyeS9Mb2FkZXJcIjtcbmltcG9ydCBSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcdFx0ZnJvbSBcImF3YXlqcy1jb3JlL2xpYi91dGlscy9SZXF1ZXN0QW5pbWF0aW9uRnJhbWVcIjtcbmltcG9ydCBEZWJ1Z1x0XHRcdFx0XHRcdGZyb20gXCJhd2F5anMtY29yZS9saWIvdXRpbHMvRGVidWdcIjtcblxuaW1wb3J0IFZpZXdcdFx0XHRcdFx0XHRcdGZyb20gXCJhd2F5anMtZGlzcGxheS9saWIvVmlld1wiO1xuaW1wb3J0IFNreWJveFx0XHRcdFx0XHRcdGZyb20gXCJhd2F5anMtZGlzcGxheS9saWIvZGlzcGxheS9Ta3lib3hcIjtcblxuaW1wb3J0IERlZmF1bHRSZW5kZXJlclx0XHRcdFx0ZnJvbSBcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9EZWZhdWx0UmVuZGVyZXJcIjtcblxuY2xhc3MgQ3ViZVRleHR1cmVzXG57XG5cdHByaXZhdGUgX3ZpZXc6Vmlldztcblx0cHJpdmF0ZSBfdGltZXI6UmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuXG5cdGNvbnN0cnVjdG9yKClcblx0e1xuXHRcdERlYnVnLkxPR19QSV9FUlJPUlMgICAgPSBmYWxzZTtcblx0XHREZWJ1Zy5USFJPV19FUlJPUlMgICAgID0gZmFsc2U7XG5cblx0XHR0aGlzLl92aWV3ID0gbmV3IFZpZXcobmV3IERlZmF1bHRSZW5kZXJlcigpKTtcblx0XHR0aGlzLl92aWV3LmNhbWVyYS56ID0gLTUwMDtcblx0XHR0aGlzLl92aWV3LmNhbWVyYS55XHQ9IDI1MDtcblx0XHR0aGlzLl92aWV3LmNhbWVyYS5yb3RhdGlvblggPSAyMDtcblx0XHR0aGlzLl92aWV3LmNhbWVyYS5wcm9qZWN0aW9uLm5lYXIgPSAwLjU7XG5cdFx0dGhpcy5fdmlldy5jYW1lcmEucHJvamVjdGlvbi5mYXIgPSAxNDAwMDtcblx0XHR0aGlzLl92aWV3LmJhY2tncm91bmRDb2xvciA9IDB4MmMyYzMyO1xuXG5cdFx0dmFyIHNlc3Npb246TG9hZGVyID0gQXNzZXRMaWJyYXJ5LmdldExvYWRlcigpO1xuXHRcdHNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lcihMb2FkZXJFdmVudC5MT0FEX0NPTVBMRVRFLCAoZXZlbnQ6TG9hZGVyRXZlbnQpID0+IHRoaXMub25Mb2FkQ29tcGxldGUoZXZlbnQpKTtcblx0XHRzZXNzaW9uLmxvYWQobmV3IFVSTFJlcXVlc3QoJ2Fzc2V0cy9TaW5nbGVDdWJlVGV4dHVyZVRlc3QuY3ViZScpKTtcblxuXHRcdHdpbmRvdy5vbnJlc2l6ZSA9IChldmVudDpVSUV2ZW50KSA9PiB0aGlzLm9uUmVzaXplKGV2ZW50KTtcblxuXHRcdHRoaXMub25SZXNpemUoKTtcblxuXHRcdHRoaXMuX3RpbWVyID0gbmV3IFJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnJlbmRlciwgdGhpcyk7XG5cdFx0dGhpcy5fdGltZXIuc3RhcnQoKTtcblx0fVxuXG5cdHB1YmxpYyBvbkxvYWRDb21wbGV0ZShldmVudDpMb2FkZXJFdmVudClcblx0e1xuXHRcdHZhciBsb2FkZXI6TG9hZGVyID0gPExvYWRlcj4gZXZlbnQudGFyZ2V0O1xuXG5cdFx0c3dpdGNoKGV2ZW50LnVybCkge1xuXHRcdFx0Y2FzZSAnYXNzZXRzL1NpbmdsZUN1YmVUZXh0dXJlVGVzdC5jdWJlJzpcblx0XHRcdFx0dGhpcy5fdmlldy5zY2VuZS5hZGRDaGlsZChuZXcgU2t5Ym94KDxCaXRtYXBJbWFnZUN1YmU+IGxvYWRlci5iYXNlRGVwZW5kZW5jeS5hc3NldHNbMF0pKTtcblxuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIHJlbmRlcihkdDpudW1iZXIpXG5cdHtcblx0XHR0aGlzLl92aWV3LmNhbWVyYS5yb3RhdGlvblkgKz0gMC4wMSAqIGR0O1xuXHRcdHRoaXMuX3ZpZXcucmVuZGVyKCk7XG5cdH1cblxuXHRwdWJsaWMgb25SZXNpemUoZXZlbnQ6VUlFdmVudCA9IG51bGwpXG5cdHtcblx0XHR0aGlzLl92aWV3LnkgPSAwO1xuXHRcdHRoaXMuX3ZpZXcueCA9IDA7XG5cdFx0dGhpcy5fdmlldy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuXHRcdHRoaXMuX3ZpZXcuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuXHR9XG59Il0sInNvdXJjZVJvb3QiOiIuL3Rlc3RzIn0=