var RequestAnimationFrame = require("awayjs-core/lib/utils/RequestAnimationFrame");
var Debug = require("awayjs-core/lib/utils/Debug");
var View = require("awayjs-display/lib/containers/View");
var PrimitivePolygonPrefab = require("awayjs-display/lib/prefabs/PrimitivePolygonPrefab");
var PrimitiveConePrefab = require("awayjs-display/lib/prefabs/PrimitiveConePrefab");
var PrimitiveCubePrefab = require("awayjs-display/lib/prefabs/PrimitiveCubePrefab");
var PrimitiveCylinderPrefab = require("awayjs-display/lib/prefabs/PrimitiveCylinderPrefab");
var PrimitivePlanePrefab = require("awayjs-display/lib/prefabs/PrimitivePlanePrefab");
var PrimitiveSpherePrefab = require("awayjs-display/lib/prefabs/PrimitiveSpherePrefab");
var DefaultRenderer = require("awayjs-renderergl/lib/DefaultRenderer");
var ElementsType = require("awayjs-display/lib/graphics/ElementsType");
var WireframePrimitiveTest = (function () {
    function WireframePrimitiveTest() {
        var _this = this;
        this.meshes = new Array();
        this.radius = 400;
        Debug.LOG_PI_ERRORS = false;
        Debug.THROW_ERRORS = false;
        this.view = new View(new DefaultRenderer());
        this.raf = new RequestAnimationFrame(this.render, this);
        this.view.backgroundColor = 0x222222;
        window.onresize = function (event) { return _this.onResize(event); };
        this.initMeshes();
        this.raf.start();
        this.onResize();
    }
    WireframePrimitiveTest.prototype.initMeshes = function () {
        var primitives = new Array();
        primitives.push(new PrimitivePolygonPrefab(null, ElementsType.LINE));
        primitives.push(new PrimitiveSpherePrefab(null, ElementsType.LINE));
        primitives.push(new PrimitiveSpherePrefab(null, ElementsType.LINE));
        primitives.push(new PrimitiveCylinderPrefab(null, ElementsType.LINE));
        primitives.push(new PrimitivePlanePrefab(null, ElementsType.LINE));
        primitives.push(new PrimitiveConePrefab(null, ElementsType.LINE));
        primitives.push(new PrimitiveCubePrefab(null, ElementsType.LINE));
        var mesh;
        for (var c = 0; c < primitives.length; c++) {
            var t = Math.PI * 2 * c / primitives.length;
            mesh = primitives[c].getNewObject();
            mesh.x = Math.cos(t) * this.radius;
            mesh.y = Math.sin(t) * this.radius;
            mesh.z = 0;
            mesh.transform.scaleTo(2, 2, 2);
            this.view.scene.addChild(mesh);
            this.meshes.push(mesh);
        }
    };
    WireframePrimitiveTest.prototype.render = function () {
        if (this.meshes)
            for (var c = 0; c < this.meshes.length; c++)
                this.meshes[c].rotationY += 1;
        this.view.render();
    };
    WireframePrimitiveTest.prototype.onResize = function (event) {
        if (event === void 0) { event = null; }
        this.view.y = 0;
        this.view.x = 0;
        this.view.width = window.innerWidth;
        this.view.height = window.innerHeight;
    };
    return WireframePrimitiveTest;
})();

//# sourceMappingURL=data:application/json;base64,