var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var TriangleSubGeometry = require("awayjs-display/lib/base/TriangleSubGeometry");
var ContextGLCompareMode = require("awayjs-stagegl/lib/base/ContextGLCompareMode");
var ContextGLMipFilter = require("awayjs-stagegl/lib/base/ContextGLMipFilter");
var ContextGLProgramType = require("awayjs-stagegl/lib/base/ContextGLProgramType");
var ContextGLTextureFilter = require("awayjs-stagegl/lib/base/ContextGLTextureFilter");
var ContextGLWrapMode = require("awayjs-stagegl/lib/base/ContextGLWrapMode");
var MaterialGLBase = require("awayjs-renderergl/lib/materials/MaterialGLBase");
var SkyboxPass = require("awayjs-renderergl/lib/passes/SkyboxPass");
var ShaderCompilerHelper = require("awayjs-renderergl/lib/utils/ShaderCompilerHelper");
/**
 * SkyboxMaterial is a material exclusively used to render skyboxes
 *
 * @see away3d.primitives.Skybox
 */
var SkyboxMaterial = (function (_super) {
    __extends(SkyboxMaterial, _super);
    /**
     * Creates a new SkyboxMaterial object.
     * @param cubeMap The CubeMap to use as the skybox.
     */
    function SkyboxMaterial(cubeMap, smooth, repeat, mipmap) {
        if (smooth === void 0) { smooth = true; }
        if (repeat === void 0) { repeat = false; }
        if (mipmap === void 0) { mipmap = false; }
        _super.call(this);
        this._cubeMap = cubeMap;
        this._pAddScreenPass(this._skyboxPass = new SkyboxPass());
        this._vertexData = new Array(0, 0, 0, 0, 1, 1, 1, 1);
    }
    Object.defineProperty(SkyboxMaterial.prototype, "cubeMap", {
        /**
         * The cube texture to use as the skybox.
         */
        get: function () {
            return this._cubeMap;
        },
        set: function (value) {
            if (value && this._cubeMap && (value.hasMipmaps != this._cubeMap.hasMipmaps || value.format != this._cubeMap.format))
                this._pInvalidatePasses();
            this._cubeMap = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @inheritDoc
     */
    SkyboxMaterial.prototype._iGetVertexCode = function (shaderObject, registerCache, sharedRegisters) {
        return "mul vt0, va0, vc5\n" + "add vt0, vt0, vc4\n" + "m44 op, vt0, vc0\n" + "mov v0, va0\n";
    };
    /**
     * @inheritDoc
     */
    SkyboxMaterial.prototype._iGetFragmentCode = function (shaderObject, registerCache, sharedRegisters) {
        //var cubeMapReg:ShaderRegisterElement = registerCache.getFreeTextureReg();
        //this._texturesIndex = cubeMapReg.index;
        //ShaderCompilerHelper.getTexCubeSampleCode(sharedRegisters.shadedTarget, cubeMapReg, this._cubeTexture, shaderObject.useSmoothTextures, shaderObject.useMipmapping);
        var mip = ",mipnone";
        if (this._cubeMap.hasMipmaps)
            mip = ",miplinear";
        return "tex ft0, v0, fs0 <cube," + ShaderCompilerHelper.getFormatStringForTexture(this._cubeMap) + "linear,clamp" + mip + ">\n";
    };
    /**
     * @inheritDoc
     */
    SkyboxMaterial.prototype._iActivatePass = function (pass, renderer, camera) {
        _super.prototype._iActivatePass.call(this, pass, renderer, camera);
        var context = renderer.context;
        context.setSamplerStateAt(0, ContextGLWrapMode.CLAMP, ContextGLTextureFilter.LINEAR, this._cubeMap.hasMipmaps ? ContextGLMipFilter.MIPLINEAR : ContextGLMipFilter.MIPNONE);
        context.setDepthTest(false, ContextGLCompareMode.LESS);
        renderer.stage.activateCubeTexture(0, this._cubeMap);
    };
    /**
     * @inheritDoc
     */
    SkyboxMaterial.prototype._iRenderPass = function (pass, renderable, stage, camera, viewProjection) {
        _super.prototype._iRenderPass.call(this, pass, renderable, stage, camera, viewProjection);
        var context = stage.context;
        var pos = camera.scenePosition;
        this._vertexData[0] = pos.x;
        this._vertexData[1] = pos.y;
        this._vertexData[2] = pos.z;
        this._vertexData[4] = this._vertexData[5] = this._vertexData[6] = camera.projection.far / Math.sqrt(3);
        context.setProgramConstantsFromMatrix(ContextGLProgramType.VERTEX, 0, viewProjection, true);
        context.setProgramConstantsFromArray(ContextGLProgramType.VERTEX, 4, this._vertexData, 2);
        stage.activateBuffer(0, renderable.getVertexData(TriangleSubGeometry.POSITION_DATA), renderable.getVertexOffset(TriangleSubGeometry.POSITION_DATA), TriangleSubGeometry.POSITION_FORMAT);
        context.drawTriangles(stage.getIndexBuffer(renderable.getIndexData()), 0, renderable.numTriangles);
    };
    return SkyboxMaterial;
})(MaterialGLBase);
module.exports = SkyboxMaterial;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9tYXRlcmlhbHMvc2t5Ym94bWF0ZXJpYWwudHMiXSwibmFtZXMiOlsiU2t5Ym94TWF0ZXJpYWwiLCJTa3lib3hNYXRlcmlhbC5jb25zdHJ1Y3RvciIsIlNreWJveE1hdGVyaWFsLmN1YmVNYXAiLCJTa3lib3hNYXRlcmlhbC5faUdldFZlcnRleENvZGUiLCJTa3lib3hNYXRlcmlhbC5faUdldEZyYWdtZW50Q29kZSIsIlNreWJveE1hdGVyaWFsLl9pQWN0aXZhdGVQYXNzIiwiU2t5Ym94TWF0ZXJpYWwuX2lSZW5kZXJQYXNzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFJQSxJQUFPLG1CQUFtQixXQUFhLDZDQUE2QyxDQUFDLENBQUM7QUFHdEYsSUFBTyxvQkFBb0IsV0FBYSw4Q0FBOEMsQ0FBQyxDQUFDO0FBQ3hGLElBQU8sa0JBQWtCLFdBQWEsNENBQTRDLENBQUMsQ0FBQztBQUNwRixJQUFPLG9CQUFvQixXQUFhLDhDQUE4QyxDQUFDLENBQUM7QUFDeEYsSUFBTyxzQkFBc0IsV0FBWSxnREFBZ0QsQ0FBQyxDQUFDO0FBQzNGLElBQU8saUJBQWlCLFdBQWEsMkNBQTJDLENBQUMsQ0FBQztBQU9sRixJQUFPLGNBQWMsV0FBYyxnREFBZ0QsQ0FBQyxDQUFDO0FBSXJGLElBQU8sVUFBVSxXQUFlLHlDQUF5QyxDQUFDLENBQUM7QUFDM0UsSUFBTyxvQkFBb0IsV0FBYSxrREFBa0QsQ0FBQyxDQUFDO0FBRTVGLEFBS0E7Ozs7R0FERztJQUNHLGNBQWM7SUFBU0EsVUFBdkJBLGNBQWNBLFVBQXVCQTtJQU0xQ0E7OztPQUdHQTtJQUNIQSxTQVZLQSxjQUFjQSxDQVVQQSxPQUF1QkEsRUFBRUEsTUFBcUJBLEVBQUVBLE1BQXNCQSxFQUFFQSxNQUFzQkE7UUFBckVDLHNCQUFxQkEsR0FBckJBLGFBQXFCQTtRQUFFQSxzQkFBc0JBLEdBQXRCQSxjQUFzQkE7UUFBRUEsc0JBQXNCQSxHQUF0QkEsY0FBc0JBO1FBR3pHQSxpQkFBT0Es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RUEsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsV0FBV0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFMUZBLEtBQUtBLENBQUNBLGNBQWNBLENBQUNBLENBQUNBLEVBQUVBLFVBQVVBLENBQUNBLGFBQWFBLENBQUNBLG1CQUFtQkEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsRUFBRUEsVUFBVUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsbUJBQW1CQSxDQUFDQSxhQUFhQSxDQUFDQSxFQUFFQSxtQkFBbUJBLENBQUNBLGVBQWVBLENBQUNBLENBQUNBO1FBQ3pMQSxPQUFPQSxDQUFDQSxhQUFhQSxDQUFDQSxLQUFLQSxDQUFDQSxjQUFjQSxDQUFDQSxVQUFVQSxDQUFDQSxZQUFZQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxVQUFVQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQTtJQUNwR0EsQ0FBQ0E7SUFDRk4scUJBQUNBO0FBQURBLENBbkdBLEFBbUdDQSxFQW5HNEIsY0FBYyxFQW1HMUM7QUFFRCxBQUF3QixpQkFBZixjQUFjLENBQUMiLCJmaWxlIjoibWF0ZXJpYWxzL1NreWJveE1hdGVyaWFsLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNYXRyaXgzRFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9nZW9tL01hdHJpeDNEXCIpO1xuaW1wb3J0IFZlY3RvcjNEXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2dlb20vVmVjdG9yM0RcIik7XG5pbXBvcnQgQ3ViZVRleHR1cmVCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvdGV4dHVyZXMvQ3ViZVRleHR1cmVCYXNlXCIpO1xuXG5pbXBvcnQgVHJpYW5nbGVTdWJHZW9tZXRyeVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9iYXNlL1RyaWFuZ2xlU3ViR2VvbWV0cnlcIik7XG5pbXBvcnQgQ2FtZXJhXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2VudGl0aWVzL0NhbWVyYVwiKTtcblxuaW1wb3J0IENvbnRleHRHTENvbXBhcmVNb2RlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvQ29udGV4dEdMQ29tcGFyZU1vZGVcIik7XG5pbXBvcnQgQ29udGV4dEdMTWlwRmlsdGVyXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvQ29udGV4dEdMTWlwRmlsdGVyXCIpO1xuaW1wb3J0IENvbnRleHRHTFByb2dyYW1UeXBlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvQ29udGV4dEdMUHJvZ3JhbVR5cGVcIik7XG5pbXBvcnQgQ29udGV4dEdMVGV4dHVyZUZpbHRlclx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYmFzZS9Db250ZXh0R0xUZXh0dXJlRmlsdGVyXCIpO1xuaW1wb3J0IENvbnRleHRHTFdyYXBNb2RlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvQ29udGV4dEdMV3JhcE1vZGVcIik7XG5pbXBvcnQgSUNvbnRleHRHTFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYmFzZS9JQ29udGV4dEdMXCIpO1xuaW1wb3J0IFN0YWdlXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvU3RhZ2VcIik7XG5cbmltcG9ydCBSZW5kZXJlckJhc2VcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2Jhc2UvUmVuZGVyZXJCYXNlXCIpO1xuaW1wb3J0IE1hdGVyaWFsUGFzc0RhdGFcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9wb29sL01hdGVyaWFsUGFzc0RhdGFcIik7XG5pbXBvcnQgUmVuZGVyYWJsZUJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9wb29sL1JlbmRlcmFibGVCYXNlXCIpO1xuaW1wb3J0IE1hdGVyaWFsR0xCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvbWF0ZXJpYWxzL01hdGVyaWFsR0xCYXNlXCIpO1xuaW1wb3J0IFNoYWRlck9iamVjdEJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9TaGFkZXJPYmplY3RCYXNlXCIpO1xuaW1wb3J0IFNoYWRlclJlZ2lzdGVyQ2FjaGVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vU2hhZGVyUmVnaXN0ZXJDYWNoZVwiKTtcbmltcG9ydCBTaGFkZXJSZWdpc3RlckRhdGFcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vU2hhZGVyUmVnaXN0ZXJEYXRhXCIpO1xuaW1wb3J0IFNreWJveFBhc3NcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL3Bhc3Nlcy9Ta3lib3hQYXNzXCIpO1xuaW1wb3J0IFNoYWRlckNvbXBpbGVySGVscGVyXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL3V0aWxzL1NoYWRlckNvbXBpbGVySGVscGVyXCIpO1xuXG4vKipcbiAqIFNreWJveE1hdGVyaWFsIGlzIGEgbWF0ZXJpYWwgZXhjbHVzaXZlbHkgdXNlZCB0byByZW5kZXIgc2t5Ym94ZXNcbiAqXG4gKiBAc2VlIGF3YXkzZC5wcmltaXRpdmVzLlNreWJveFxuICovXG5jbGFzcyBTa3lib3hNYXRlcmlhbCBleHRlbmRzIE1hdGVyaWFsR0xCYXNlXG57XG5cdHByaXZhdGUgX3ZlcnRleERhdGE6QXJyYXk8bnVtYmVyPjtcblx0cHJpdmF0ZSBfY3ViZU1hcDpDdWJlVGV4dHVyZUJhc2U7XG5cdHByaXZhdGUgX3NreWJveFBhc3M6U2t5Ym94UGFzcztcblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIG5ldyBTa3lib3hNYXRlcmlhbCBvYmplY3QuXG5cdCAqIEBwYXJhbSBjdWJlTWFwIFRoZSBDdWJlTWFwIHRvIHVzZSBhcyB0aGUgc2t5Ym94LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoY3ViZU1hcDpDdWJlVGV4dHVyZUJhc2UsIHNtb290aDpib29sZWFuID0gdHJ1ZSwgcmVwZWF0OmJvb2xlYW4gPSBmYWxzZSwgbWlwbWFwOmJvb2xlYW4gPSBmYWxzZSlcblx0e1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuX2N1YmVNYXAgPSBjdWJlTWFwO1xuXHRcdHRoaXMuX3BBZGRTY3JlZW5QYXNzKHRoaXMuX3NreWJveFBhc3MgPSBuZXcgU2t5Ym94UGFzcygpKTtcblxuXHRcdHRoaXMuX3ZlcnRleERhdGEgPSBuZXcgQXJyYXk8bnVtYmVyPigwLCAwLCAwLCAwLCAxLCAxLCAxLCAxKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgY3ViZSB0ZXh0dXJlIHRvIHVzZSBhcyB0aGUgc2t5Ym94LlxuXHQgKi9cblx0cHVibGljIGdldCBjdWJlTWFwKCk6Q3ViZVRleHR1cmVCYXNlXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5fY3ViZU1hcDtcblx0fVxuXG5cdHB1YmxpYyBzZXQgY3ViZU1hcCh2YWx1ZTpDdWJlVGV4dHVyZUJhc2UpXG5cdHtcblx0XHRpZiAodmFsdWUgJiYgdGhpcy5fY3ViZU1hcCAmJiAodmFsdWUuaGFzTWlwbWFwcyAhPSB0aGlzLl9jdWJlTWFwLmhhc01pcG1hcHMgfHwgdmFsdWUuZm9ybWF0ICE9IHRoaXMuX2N1YmVNYXAuZm9ybWF0KSlcblx0XHRcdHRoaXMuX3BJbnZhbGlkYXRlUGFzc2VzKCk7XG5cblx0XHR0aGlzLl9jdWJlTWFwID0gdmFsdWU7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHB1YmxpYyBfaUdldFZlcnRleENvZGUoc2hhZGVyT2JqZWN0OlNoYWRlck9iamVjdEJhc2UsIHJlZ2lzdGVyQ2FjaGU6U2hhZGVyUmVnaXN0ZXJDYWNoZSwgc2hhcmVkUmVnaXN0ZXJzOlNoYWRlclJlZ2lzdGVyRGF0YSk6c3RyaW5nXG5cdHtcblx0XHRyZXR1cm4gXCJtdWwgdnQwLCB2YTAsIHZjNVxcblwiICtcblx0XHRcdFwiYWRkIHZ0MCwgdnQwLCB2YzRcXG5cIiArXG5cdFx0XHRcIm00NCBvcCwgdnQwLCB2YzBcXG5cIiArXG5cdFx0XHRcIm1vdiB2MCwgdmEwXFxuXCI7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHB1YmxpYyBfaUdldEZyYWdtZW50Q29kZShzaGFkZXJPYmplY3Q6U2hhZGVyT2JqZWN0QmFzZSwgcmVnaXN0ZXJDYWNoZTpTaGFkZXJSZWdpc3RlckNhY2hlLCBzaGFyZWRSZWdpc3RlcnM6U2hhZGVyUmVnaXN0ZXJEYXRhKTpzdHJpbmdcblx0e1xuXHRcdC8vdmFyIGN1YmVNYXBSZWc6U2hhZGVyUmVnaXN0ZXJFbGVtZW50ID0gcmVnaXN0ZXJDYWNoZS5nZXRGcmVlVGV4dHVyZVJlZygpO1xuXG5cdFx0Ly90aGlzLl90ZXh0dXJlc0luZGV4ID0gY3ViZU1hcFJlZy5pbmRleDtcblxuXHRcdC8vU2hhZGVyQ29tcGlsZXJIZWxwZXIuZ2V0VGV4Q3ViZVNhbXBsZUNvZGUoc2hhcmVkUmVnaXN0ZXJzLnNoYWRlZFRhcmdldCwgY3ViZU1hcFJlZywgdGhpcy5fY3ViZVRleHR1cmUsIHNoYWRlck9iamVjdC51c2VTbW9vdGhUZXh0dXJlcywgc2hhZGVyT2JqZWN0LnVzZU1pcG1hcHBpbmcpO1xuXG5cdFx0dmFyIG1pcDpzdHJpbmcgPSBcIixtaXBub25lXCI7XG5cblx0XHRpZiAodGhpcy5fY3ViZU1hcC5oYXNNaXBtYXBzKVxuXHRcdFx0bWlwID0gXCIsbWlwbGluZWFyXCI7XG5cblx0XHRyZXR1cm4gXCJ0ZXggZnQwLCB2MCwgZnMwIDxjdWJlLFwiICsgU2hhZGVyQ29tcGlsZXJIZWxwZXIuZ2V0Rm9ybWF0U3RyaW5nRm9yVGV4dHVyZSh0aGlzLl9jdWJlTWFwKSArIFwibGluZWFyLGNsYW1wXCIgKyBtaXAgKyBcIj5cXG5cIjtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIF9pQWN0aXZhdGVQYXNzKHBhc3M6TWF0ZXJpYWxQYXNzRGF0YSwgcmVuZGVyZXI6UmVuZGVyZXJCYXNlLCBjYW1lcmE6Q2FtZXJhKVxuXHR7XG5cdFx0c3VwZXIuX2lBY3RpdmF0ZVBhc3MocGFzcywgcmVuZGVyZXIsIGNhbWVyYSk7XG5cblx0XHR2YXIgY29udGV4dDpJQ29udGV4dEdMID0gcmVuZGVyZXIuY29udGV4dDtcblx0XHRjb250ZXh0LnNldFNhbXBsZXJTdGF0ZUF0KDAsIENvbnRleHRHTFdyYXBNb2RlLkNMQU1QLCBDb250ZXh0R0xUZXh0dXJlRmlsdGVyLkxJTkVBUiwgdGhpcy5fY3ViZU1hcC5oYXNNaXBtYXBzPyBDb250ZXh0R0xNaXBGaWx0ZXIuTUlQTElORUFSIDogQ29udGV4dEdMTWlwRmlsdGVyLk1JUE5PTkUpO1xuXHRcdGNvbnRleHQuc2V0RGVwdGhUZXN0KGZhbHNlLCBDb250ZXh0R0xDb21wYXJlTW9kZS5MRVNTKTtcblx0XHRyZW5kZXJlci5zdGFnZS5hY3RpdmF0ZUN1YmVUZXh0dXJlKDAsIHRoaXMuX2N1YmVNYXApO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRwdWJsaWMgX2lSZW5kZXJQYXNzKHBhc3M6TWF0ZXJpYWxQYXNzRGF0YSwgcmVuZGVyYWJsZTpSZW5kZXJhYmxlQmFzZSwgc3RhZ2U6U3RhZ2UsIGNhbWVyYTpDYW1lcmEsIHZpZXdQcm9qZWN0aW9uOk1hdHJpeDNEKVxuXHR7XG5cdFx0c3VwZXIuX2lSZW5kZXJQYXNzKHBhc3MsIHJlbmRlcmFibGUsIHN0YWdlLCBjYW1lcmEsIHZpZXdQcm9qZWN0aW9uKTtcblxuXHRcdHZhciBjb250ZXh0OklDb250ZXh0R0wgPSBzdGFnZS5jb250ZXh0O1xuXHRcdHZhciBwb3M6VmVjdG9yM0QgPSBjYW1lcmEuc2NlbmVQb3NpdGlvbjtcblx0XHR0aGlzLl92ZXJ0ZXhEYXRhWzBdID0gcG9zLng7XG5cdFx0dGhpcy5fdmVydGV4RGF0YVsxXSA9IHBvcy55O1xuXHRcdHRoaXMuX3ZlcnRleERhdGFbMl0gPSBwb3Muejtcblx0XHR0aGlzLl92ZXJ0ZXhEYXRhWzRdID0gdGhpcy5fdmVydGV4RGF0YVs1XSA9IHRoaXMuX3ZlcnRleERhdGFbNl0gPSBjYW1lcmEucHJvamVjdGlvbi5mYXIvTWF0aC5zcXJ0KDMpO1xuXHRcdGNvbnRleHQuc2V0UHJvZ3JhbUNvbnN0YW50c0Zyb21NYXRyaXgoQ29udGV4dEdMUHJvZ3JhbVR5cGUuVkVSVEVYLCAwLCB2aWV3UHJvamVjdGlvbiwgdHJ1ZSk7XG5cdFx0Y29udGV4dC5zZXRQcm9ncmFtQ29uc3RhbnRzRnJvbUFycmF5KENvbnRleHRHTFByb2dyYW1UeXBlLlZFUlRFWCwgNCwgdGhpcy5fdmVydGV4RGF0YSwgMik7XG5cblx0XHRzdGFnZS5hY3RpdmF0ZUJ1ZmZlcigwLCByZW5kZXJhYmxlLmdldFZlcnRleERhdGEoVHJpYW5nbGVTdWJHZW9tZXRyeS5QT1NJVElPTl9EQVRBKSwgcmVuZGVyYWJsZS5nZXRWZXJ0ZXhPZmZzZXQoVHJpYW5nbGVTdWJHZW9tZXRyeS5QT1NJVElPTl9EQVRBKSwgVHJpYW5nbGVTdWJHZW9tZXRyeS5QT1NJVElPTl9GT1JNQVQpO1xuXHRcdGNvbnRleHQuZHJhd1RyaWFuZ2xlcyhzdGFnZS5nZXRJbmRleEJ1ZmZlcihyZW5kZXJhYmxlLmdldEluZGV4RGF0YSgpKSwgMCwgcmVuZGVyYWJsZS5udW1UcmlhbmdsZXMpO1xuXHR9XG59XG5cbmV4cG9ydCA9IFNreWJveE1hdGVyaWFsOyJdfQ==