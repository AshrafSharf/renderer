var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var TriangleSubGeometry = require("awayjs-display/lib/base/TriangleSubGeometry");
var ContextGLCompareMode = require("awayjs-stagegl/lib/base/ContextGLCompareMode");
var ContextGLMipFilter = require("awayjs-stagegl/lib/base/ContextGLMipFilter");
var ContextGLProgramType = require("awayjs-stagegl/lib/base/ContextGLProgramType");
var ContextGLTextureFilter = require("awayjs-stagegl/lib/base/ContextGLTextureFilter");
var ContextGLWrapMode = require("awayjs-stagegl/lib/base/ContextGLWrapMode");
var StageGLMaterialBase = require("awayjs-renderergl/lib/materials/StageGLMaterialBase");
var SkyboxPass = require("awayjs-renderergl/lib/materials/passes/SkyboxPass");
var ShaderCompilerHelper = require("awayjs-renderergl/lib/materials/utils/ShaderCompilerHelper");
/**
 * SkyboxMaterial is a material exclusively used to render skyboxes
 *
 * @see away3d.primitives.Skybox
 */
var SkyboxMaterial = (function (_super) {
    __extends(SkyboxMaterial, _super);
    /**
     * Creates a new SkyboxMaterial object.
     * @param cubeMap The CubeMap to use as the skybox.
     */
    function SkyboxMaterial(cubeMap, smooth, repeat, mipmap) {
        if (smooth === void 0) { smooth = true; }
        if (repeat === void 0) { repeat = false; }
        if (mipmap === void 0) { mipmap = false; }
        _super.call(this);
        this._cubeMap = cubeMap;
        this._pAddScreenPass(this._skyboxPass = new SkyboxPass());
        this._vertexData = new Array(0, 0, 0, 0, 1, 1, 1, 1);
    }
    Object.defineProperty(SkyboxMaterial.prototype, "cubeMap", {
        /**
         * The cube texture to use as the skybox.
         */
        get: function () {
            return this._cubeMap;
        },
        set: function (value) {
            if (value && this._cubeMap && (value.hasMipmaps != this._cubeMap.hasMipmaps || value.format != this._cubeMap.format))
                this._pInvalidatePasses();
            this._cubeMap = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @inheritDoc
     */
    SkyboxMaterial.prototype._iGetVertexCode = function (shaderObject, registerCache, sharedRegisters) {
        return "mul vt0, va0, vc5\n" + "add vt0, vt0, vc4\n" + "m44 op, vt0, vc0\n" + "mov v0, va0\n";
    };
    /**
     * @inheritDoc
     */
    SkyboxMaterial.prototype._iGetFragmentCode = function (shaderObject, registerCache, sharedRegisters) {
        //var cubeMapReg:ShaderRegisterElement = registerCache.getFreeTextureReg();
        //this._texturesIndex = cubeMapReg.index;
        //ShaderCompilerHelper.getTexCubeSampleCode(sharedRegisters.shadedTarget, cubeMapReg, this._cubeTexture, shaderObject.useSmoothTextures, shaderObject.useMipmapping);
        var mip = ",mipnone";
        if (this._cubeMap.hasMipmaps)
            mip = ",miplinear";
        return "tex ft0, v0, fs0 <cube," + ShaderCompilerHelper.getFormatStringForTexture(this._cubeMap) + "linear,clamp" + mip + ">\n";
    };
    /**
     * @inheritDoc
     */
    SkyboxMaterial.prototype._iActivatePass = function (pass, renderer, camera) {
        _super.prototype._iActivatePass.call(this, pass, renderer, camera);
        var context = renderer.context;
        context.setSamplerStateAt(0, ContextGLWrapMode.CLAMP, ContextGLTextureFilter.LINEAR, this._cubeMap.hasMipmaps ? ContextGLMipFilter.MIPLINEAR : ContextGLMipFilter.MIPNONE);
        context.setDepthTest(false, ContextGLCompareMode.LESS);
        context.activateCubeTexture(0, this._cubeMap);
    };
    /**
     * @inheritDoc
     */
    SkyboxMaterial.prototype._iRenderPass = function (pass, renderable, stage, camera, viewProjection) {
        _super.prototype._iRenderPass.call(this, pass, renderable, stage, camera, viewProjection);
        var context = stage.context;
        var pos = camera.scenePosition;
        this._vertexData[0] = pos.x;
        this._vertexData[1] = pos.y;
        this._vertexData[2] = pos.z;
        this._vertexData[4] = this._vertexData[5] = this._vertexData[6] = camera.projection.far / Math.sqrt(3);
        context.setProgramConstantsFromMatrix(ContextGLProgramType.VERTEX, 0, viewProjection, true);
        context.setProgramConstantsFromArray(ContextGLProgramType.VERTEX, 4, this._vertexData, 2);
        context.activateBuffer(0, renderable.getVertexData(TriangleSubGeometry.POSITION_DATA), renderable.getVertexOffset(TriangleSubGeometry.POSITION_DATA), TriangleSubGeometry.POSITION_FORMAT);
        context.drawTriangles(context.getIndexBuffer(renderable.getIndexData()), 0, renderable.numTriangles);
    };
    return SkyboxMaterial;
})(StageGLMaterialBase);
module.exports = SkyboxMaterial;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9tYXRlcmlhbHMvc2t5Ym94bWF0ZXJpYWwudHMiXSwibmFtZXMiOlsiU2t5Ym94TWF0ZXJpYWwiLCJTa3lib3hNYXRlcmlhbC5jb25zdHJ1Y3RvciIsIlNreWJveE1hdGVyaWFsLmN1YmVNYXAiLCJTa3lib3hNYXRlcmlhbC5faUdldFZlcnRleENvZGUiLCJTa3lib3hNYXRlcmlhbC5faUdldEZyYWdtZW50Q29kZSIsIlNreWJveE1hdGVyaWFsLl9pQWN0aXZhdGVQYXNzIiwiU2t5Ym94TWF0ZXJpYWwuX2lSZW5kZXJQYXNzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFJQSxJQUFPLG1CQUFtQixXQUFhLDZDQUE2QyxDQUFDLENBQUM7QUFHdEYsSUFBTyxvQkFBb0IsV0FBYSw4Q0FBOEMsQ0FBQyxDQUFDO0FBQ3hGLElBQU8sa0JBQWtCLFdBQWEsNENBQTRDLENBQUMsQ0FBQztBQUNwRixJQUFPLG9CQUFvQixXQUFhLDhDQUE4QyxDQUFDLENBQUM7QUFDeEYsSUFBTyxzQkFBc0IsV0FBWSxnREFBZ0QsQ0FBQyxDQUFDO0FBQzNGLElBQU8saUJBQWlCLFdBQWEsMkNBQTJDLENBQUMsQ0FBQztBQU1sRixJQUFPLG1CQUFtQixXQUFhLHFEQUFxRCxDQUFDLENBQUM7QUFJOUYsSUFBTyxVQUFVLFdBQWUsbURBQW1ELENBQUMsQ0FBQztBQUNyRixJQUFPLG9CQUFvQixXQUFhLDREQUE0RCxDQUFDLENBQUM7QUFHdEcsQUFLQTs7OztHQURHO0lBQ0csY0FBYztJQUFTQSxVQUF2QkEsY0FBY0EsVUFBNEJBO0lBTS9DQTs7O09BR0dBO0lBQ0hBLFNBVktBLGNBQWNBLENBVVBBLE9BQXVCQSxFQUFFQSxNQUFxQkEsRUFBRUEsTUFBc0JBLEVBQUVBLE1BQXNCQTtRQUFyRUMsc0JBQXFCQSxHQUFyQkEsYUFBcUJBO1FBQUVBLHNCQUFzQkEsR0FBdEJBLGNBQXNCQTtRQUFFQSxzQkFBc0JBLEdBQXRCQSxjQUFzQkE7UUFHekdBLGlCQUFP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LEVBQUVBLElBQUlBLENBQUNBLFdBQVdBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO1FBRTFGQSxPQUFPQSxDQUFDQSxjQUFjQSxDQUFDQSxDQUFDQSxFQUFFQSxVQUFVQSxDQUFDQSxhQUFhQSxDQUFDQSxtQkFBbUJBLENBQUNBLGFBQWFBLENBQUNBLEVBQUVBLFVBQVVBLENBQUNBLGVBQWVBLENBQUNBLG1CQUFtQkEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsRUFBRUEsbUJBQW1CQSxDQUFDQSxlQUFlQSxDQUFDQSxDQUFDQTtRQUMzTEEsT0FBT0EsQ0FBQ0EsYUFBYUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsY0FBY0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsWUFBWUEsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsVUFBVUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0E7SUFDdEdBLENBQUNBO0lBQ0ZOLHFCQUFDQTtBQUFEQSxDQW5HQSxBQW1HQ0EsRUFuRzRCLG1CQUFtQixFQW1HL0M7QUFFRCxBQUF3QixpQkFBZixjQUFjLENBQUMiLCJmaWxlIjoibWF0ZXJpYWxzL1NreWJveE1hdGVyaWFsLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNYXRyaXgzRFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9nZW9tL01hdHJpeDNEXCIpO1xuaW1wb3J0IFZlY3RvcjNEXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2dlb20vVmVjdG9yM0RcIik7XG5pbXBvcnQgQ3ViZVRleHR1cmVCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvdGV4dHVyZXMvQ3ViZVRleHR1cmVCYXNlXCIpO1xuXG5pbXBvcnQgVHJpYW5nbGVTdWJHZW9tZXRyeVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9iYXNlL1RyaWFuZ2xlU3ViR2VvbWV0cnlcIik7XG5pbXBvcnQgQ2FtZXJhXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2VudGl0aWVzL0NhbWVyYVwiKTtcblxuaW1wb3J0IENvbnRleHRHTENvbXBhcmVNb2RlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvQ29udGV4dEdMQ29tcGFyZU1vZGVcIik7XG5pbXBvcnQgQ29udGV4dEdMTWlwRmlsdGVyXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvQ29udGV4dEdMTWlwRmlsdGVyXCIpO1xuaW1wb3J0IENvbnRleHRHTFByb2dyYW1UeXBlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvQ29udGV4dEdMUHJvZ3JhbVR5cGVcIik7XG5pbXBvcnQgQ29udGV4dEdMVGV4dHVyZUZpbHRlclx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYmFzZS9Db250ZXh0R0xUZXh0dXJlRmlsdGVyXCIpO1xuaW1wb3J0IENvbnRleHRHTFdyYXBNb2RlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvQ29udGV4dEdMV3JhcE1vZGVcIik7XG5pbXBvcnQgSUNvbnRleHRTdGFnZUdMXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYmFzZS9JQ29udGV4dFN0YWdlR0xcIik7XG5pbXBvcnQgU3RhZ2VcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYmFzZS9TdGFnZVwiKTtcblxuaW1wb3J0IE1hdGVyaWFsUGFzc0RhdGFcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9wb29sL01hdGVyaWFsUGFzc0RhdGFcIik7XG5pbXBvcnQgUmVuZGVyYWJsZUJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9wb29sL1JlbmRlcmFibGVCYXNlXCIpO1xuaW1wb3J0IFN0YWdlR0xNYXRlcmlhbEJhc2VcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvbWF0ZXJpYWxzL1N0YWdlR0xNYXRlcmlhbEJhc2VcIik7XG5pbXBvcnQgU2hhZGVyT2JqZWN0QmFzZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL21hdGVyaWFscy9jb21waWxhdGlvbi9TaGFkZXJPYmplY3RCYXNlXCIpO1xuaW1wb3J0IFNoYWRlclJlZ2lzdGVyQ2FjaGVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvbWF0ZXJpYWxzL2NvbXBpbGF0aW9uL1NoYWRlclJlZ2lzdGVyQ2FjaGVcIik7XG5pbXBvcnQgU2hhZGVyUmVnaXN0ZXJEYXRhXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL21hdGVyaWFscy9jb21waWxhdGlvbi9TaGFkZXJSZWdpc3RlckRhdGFcIik7XG5pbXBvcnQgU2t5Ym94UGFzc1x0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvbWF0ZXJpYWxzL3Bhc3Nlcy9Ta3lib3hQYXNzXCIpO1xuaW1wb3J0IFNoYWRlckNvbXBpbGVySGVscGVyXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL21hdGVyaWFscy91dGlscy9TaGFkZXJDb21waWxlckhlbHBlclwiKTtcbmltcG9ydCBSZW5kZXJlckJhc2VcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL3JlbmRlci9SZW5kZXJlckJhc2VcIik7XG5cbi8qKlxuICogU2t5Ym94TWF0ZXJpYWwgaXMgYSBtYXRlcmlhbCBleGNsdXNpdmVseSB1c2VkIHRvIHJlbmRlciBza3lib3hlc1xuICpcbiAqIEBzZWUgYXdheTNkLnByaW1pdGl2ZXMuU2t5Ym94XG4gKi9cbmNsYXNzIFNreWJveE1hdGVyaWFsIGV4dGVuZHMgU3RhZ2VHTE1hdGVyaWFsQmFzZVxue1xuXHRwcml2YXRlIF92ZXJ0ZXhEYXRhOkFycmF5PG51bWJlcj47XG5cdHByaXZhdGUgX2N1YmVNYXA6Q3ViZVRleHR1cmVCYXNlO1xuXHRwcml2YXRlIF9za3lib3hQYXNzOlNreWJveFBhc3M7XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBuZXcgU2t5Ym94TWF0ZXJpYWwgb2JqZWN0LlxuXHQgKiBAcGFyYW0gY3ViZU1hcCBUaGUgQ3ViZU1hcCB0byB1c2UgYXMgdGhlIHNreWJveC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKGN1YmVNYXA6Q3ViZVRleHR1cmVCYXNlLCBzbW9vdGg6Ym9vbGVhbiA9IHRydWUsIHJlcGVhdDpib29sZWFuID0gZmFsc2UsIG1pcG1hcDpib29sZWFuID0gZmFsc2UpXG5cdHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLl9jdWJlTWFwID0gY3ViZU1hcDtcblx0XHR0aGlzLl9wQWRkU2NyZWVuUGFzcyh0aGlzLl9za3lib3hQYXNzID0gbmV3IFNreWJveFBhc3MoKSk7XG5cblx0XHR0aGlzLl92ZXJ0ZXhEYXRhID0gbmV3IEFycmF5PG51bWJlcj4oMCwgMCwgMCwgMCwgMSwgMSwgMSwgMSk7XG5cdH1cblxuXHQvKipcblx0ICogVGhlIGN1YmUgdGV4dHVyZSB0byB1c2UgYXMgdGhlIHNreWJveC5cblx0ICovXG5cdHB1YmxpYyBnZXQgY3ViZU1hcCgpOkN1YmVUZXh0dXJlQmFzZVxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX2N1YmVNYXA7XG5cdH1cblxuXHRwdWJsaWMgc2V0IGN1YmVNYXAodmFsdWU6Q3ViZVRleHR1cmVCYXNlKVxuXHR7XG5cdFx0aWYgKHZhbHVlICYmIHRoaXMuX2N1YmVNYXAgJiYgKHZhbHVlLmhhc01pcG1hcHMgIT0gdGhpcy5fY3ViZU1hcC5oYXNNaXBtYXBzIHx8IHZhbHVlLmZvcm1hdCAhPSB0aGlzLl9jdWJlTWFwLmZvcm1hdCkpXG5cdFx0XHR0aGlzLl9wSW52YWxpZGF0ZVBhc3NlcygpO1xuXG5cdFx0dGhpcy5fY3ViZU1hcCA9IHZhbHVlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRwdWJsaWMgX2lHZXRWZXJ0ZXhDb2RlKHNoYWRlck9iamVjdDpTaGFkZXJPYmplY3RCYXNlLCByZWdpc3RlckNhY2hlOlNoYWRlclJlZ2lzdGVyQ2FjaGUsIHNoYXJlZFJlZ2lzdGVyczpTaGFkZXJSZWdpc3RlckRhdGEpOnN0cmluZ1xuXHR7XG5cdFx0cmV0dXJuIFwibXVsIHZ0MCwgdmEwLCB2YzVcXG5cIiArXG5cdFx0XHRcImFkZCB2dDAsIHZ0MCwgdmM0XFxuXCIgK1xuXHRcdFx0XCJtNDQgb3AsIHZ0MCwgdmMwXFxuXCIgK1xuXHRcdFx0XCJtb3YgdjAsIHZhMFxcblwiO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRwdWJsaWMgX2lHZXRGcmFnbWVudENvZGUoc2hhZGVyT2JqZWN0OlNoYWRlck9iamVjdEJhc2UsIHJlZ2lzdGVyQ2FjaGU6U2hhZGVyUmVnaXN0ZXJDYWNoZSwgc2hhcmVkUmVnaXN0ZXJzOlNoYWRlclJlZ2lzdGVyRGF0YSk6c3RyaW5nXG5cdHtcblx0XHQvL3ZhciBjdWJlTWFwUmVnOlNoYWRlclJlZ2lzdGVyRWxlbWVudCA9IHJlZ2lzdGVyQ2FjaGUuZ2V0RnJlZVRleHR1cmVSZWcoKTtcblxuXHRcdC8vdGhpcy5fdGV4dHVyZXNJbmRleCA9IGN1YmVNYXBSZWcuaW5kZXg7XG5cblx0XHQvL1NoYWRlckNvbXBpbGVySGVscGVyLmdldFRleEN1YmVTYW1wbGVDb2RlKHNoYXJlZFJlZ2lzdGVycy5zaGFkZWRUYXJnZXQsIGN1YmVNYXBSZWcsIHRoaXMuX2N1YmVUZXh0dXJlLCBzaGFkZXJPYmplY3QudXNlU21vb3RoVGV4dHVyZXMsIHNoYWRlck9iamVjdC51c2VNaXBtYXBwaW5nKTtcblxuXHRcdHZhciBtaXA6c3RyaW5nID0gXCIsbWlwbm9uZVwiO1xuXG5cdFx0aWYgKHRoaXMuX2N1YmVNYXAuaGFzTWlwbWFwcylcblx0XHRcdG1pcCA9IFwiLG1pcGxpbmVhclwiO1xuXG5cdFx0cmV0dXJuIFwidGV4IGZ0MCwgdjAsIGZzMCA8Y3ViZSxcIiArIFNoYWRlckNvbXBpbGVySGVscGVyLmdldEZvcm1hdFN0cmluZ0ZvclRleHR1cmUodGhpcy5fY3ViZU1hcCkgKyBcImxpbmVhcixjbGFtcFwiICsgbWlwICsgXCI+XFxuXCI7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHB1YmxpYyBfaUFjdGl2YXRlUGFzcyhwYXNzOk1hdGVyaWFsUGFzc0RhdGEsIHJlbmRlcmVyOlJlbmRlcmVyQmFzZSwgY2FtZXJhOkNhbWVyYSlcblx0e1xuXHRcdHN1cGVyLl9pQWN0aXZhdGVQYXNzKHBhc3MsIHJlbmRlcmVyLCBjYW1lcmEpO1xuXG5cdFx0dmFyIGNvbnRleHQ6SUNvbnRleHRTdGFnZUdMID0gcmVuZGVyZXIuY29udGV4dDtcblx0XHRjb250ZXh0LnNldFNhbXBsZXJTdGF0ZUF0KDAsIENvbnRleHRHTFdyYXBNb2RlLkNMQU1QLCBDb250ZXh0R0xUZXh0dXJlRmlsdGVyLkxJTkVBUiwgdGhpcy5fY3ViZU1hcC5oYXNNaXBtYXBzPyBDb250ZXh0R0xNaXBGaWx0ZXIuTUlQTElORUFSIDogQ29udGV4dEdMTWlwRmlsdGVyLk1JUE5PTkUpO1xuXHRcdGNvbnRleHQuc2V0RGVwdGhUZXN0KGZhbHNlLCBDb250ZXh0R0xDb21wYXJlTW9kZS5MRVNTKTtcblx0XHRjb250ZXh0LmFjdGl2YXRlQ3ViZVRleHR1cmUoMCwgdGhpcy5fY3ViZU1hcCk7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHB1YmxpYyBfaVJlbmRlclBhc3MocGFzczpNYXRlcmlhbFBhc3NEYXRhLCByZW5kZXJhYmxlOlJlbmRlcmFibGVCYXNlLCBzdGFnZTpTdGFnZSwgY2FtZXJhOkNhbWVyYSwgdmlld1Byb2plY3Rpb246TWF0cml4M0QpXG5cdHtcblx0XHRzdXBlci5faVJlbmRlclBhc3MocGFzcywgcmVuZGVyYWJsZSwgc3RhZ2UsIGNhbWVyYSwgdmlld1Byb2plY3Rpb24pO1xuXG5cdFx0dmFyIGNvbnRleHQ6SUNvbnRleHRTdGFnZUdMID0gPElDb250ZXh0U3RhZ2VHTD4gc3RhZ2UuY29udGV4dDtcblx0XHR2YXIgcG9zOlZlY3RvcjNEID0gY2FtZXJhLnNjZW5lUG9zaXRpb247XG5cdFx0dGhpcy5fdmVydGV4RGF0YVswXSA9IHBvcy54O1xuXHRcdHRoaXMuX3ZlcnRleERhdGFbMV0gPSBwb3MueTtcblx0XHR0aGlzLl92ZXJ0ZXhEYXRhWzJdID0gcG9zLno7XG5cdFx0dGhpcy5fdmVydGV4RGF0YVs0XSA9IHRoaXMuX3ZlcnRleERhdGFbNV0gPSB0aGlzLl92ZXJ0ZXhEYXRhWzZdID0gY2FtZXJhLnByb2plY3Rpb24uZmFyL01hdGguc3FydCgzKTtcblx0XHRjb250ZXh0LnNldFByb2dyYW1Db25zdGFudHNGcm9tTWF0cml4KENvbnRleHRHTFByb2dyYW1UeXBlLlZFUlRFWCwgMCwgdmlld1Byb2plY3Rpb24sIHRydWUpO1xuXHRcdGNvbnRleHQuc2V0UHJvZ3JhbUNvbnN0YW50c0Zyb21BcnJheShDb250ZXh0R0xQcm9ncmFtVHlwZS5WRVJURVgsIDQsIHRoaXMuX3ZlcnRleERhdGEsIDIpO1xuXG5cdFx0Y29udGV4dC5hY3RpdmF0ZUJ1ZmZlcigwLCByZW5kZXJhYmxlLmdldFZlcnRleERhdGEoVHJpYW5nbGVTdWJHZW9tZXRyeS5QT1NJVElPTl9EQVRBKSwgcmVuZGVyYWJsZS5nZXRWZXJ0ZXhPZmZzZXQoVHJpYW5nbGVTdWJHZW9tZXRyeS5QT1NJVElPTl9EQVRBKSwgVHJpYW5nbGVTdWJHZW9tZXRyeS5QT1NJVElPTl9GT1JNQVQpO1xuXHRcdGNvbnRleHQuZHJhd1RyaWFuZ2xlcyhjb250ZXh0LmdldEluZGV4QnVmZmVyKHJlbmRlcmFibGUuZ2V0SW5kZXhEYXRhKCkpLCAwLCByZW5kZXJhYmxlLm51bVRyaWFuZ2xlcyk7XG5cdH1cbn1cblxuZXhwb3J0ID0gU2t5Ym94TWF0ZXJpYWw7Il19