var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var DirectionalLight = require("awayjs-core/lib/entities/DirectionalLight");
var Event = require("awayjs-core/lib/events/Event");
var ShadingMethodEvent = require("awayjs-stagegl/lib/events/ShadingMethodEvent");
var MethodVO = require("awayjs-stagegl/lib/materials/compilation/MethodVO");
var ShadowMapMethodBase = require("awayjs-stagegl/lib/materials/methods/ShadowMapMethodBase");
/**
 * ShadowCascadeMethod is a shadow map method to apply cascade shadow mapping on materials.
 * Must be used with a DirectionalLight with a CascadeShadowMapper assigned to its shadowMapper property.
 *
 * @see away.lights.CascadeShadowMapper
 */
var ShadowCascadeMethod = (function (_super) {
    __extends(ShadowCascadeMethod, _super);
    /**
     * Creates a new ShadowCascadeMethod object.
     *
     * @param shadowMethodBase The shadow map sampling method used to sample individual cascades (fe: ShadowHardMethod, ShadowSoftMethod)
     */
    function ShadowCascadeMethod(shadowMethodBase) {
        var _this = this;
        _super.call(this, shadowMethodBase.castingLight);
        this._baseMethod = shadowMethodBase;
        if (!(this._pCastingLight instanceof DirectionalLight))
            throw new Error("ShadowCascadeMethod is only compatible with DirectionalLight");
        this._cascadeShadowMapper = this._pCastingLight.shadowMapper;
        if (!this._cascadeShadowMapper)
            throw new Error("ShadowCascadeMethod requires a light that has a CascadeShadowMapper instance assigned to shadowMapper.");
        this._cascadeShadowMapper.addEventListener(Event.CHANGE, function (event) { return _this.onCascadeChange(event); });
        this._baseMethod.addEventListener(ShadingMethodEvent.SHADER_INVALIDATED, function (event) { return _this.onShaderInvalidated(event); });
    }
    Object.defineProperty(ShadowCascadeMethod.prototype, "baseMethod", {
        /**
         * The shadow map sampling method used to sample individual cascades. These are typically those used in conjunction
         * with a DirectionalShadowMapper.
         *
         * @see ShadowHardMethod
         * @see ShadowSoftMethod
         */
        get: function () {
            return this._baseMethod;
        },
        set: function (value) {
            var _this = this;
            if (this._baseMethod == value)
                return;
            this._baseMethod.removeEventListener(ShadingMethodEvent.SHADER_INVALIDATED, function (event) { return _this.onShaderInvalidated(event); });
            this._baseMethod = value;
            this._baseMethod.addEventListener(ShadingMethodEvent.SHADER_INVALIDATED, function (event) { return _this.onShaderInvalidated(event); });
            this.iInvalidateShaderProgram();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @inheritDoc
     */
    ShadowCascadeMethod.prototype.iInitVO = function (shaderObject, methodVO) {
        var tempVO = new MethodVO(this._baseMethod);
        this._baseMethod.iInitVO(shaderObject, tempVO);
        methodVO.needsGlobalVertexPos = true;
        methodVO.needsProjection = true;
    };
    /**
     * @inheritDoc
     */
    ShadowCascadeMethod.prototype.iInitConstants = function (shaderObject, methodVO) {
        var fragmentData = shaderObject.fragmentConstantData;
        var vertexData = shaderObject.vertexConstantData;
        var index = methodVO.fragmentConstantsIndex;
        fragmentData[index] = 1.0;
        fragmentData[index + 1] = 1 / 255.0;
        fragmentData[index + 2] = 1 / 65025.0;
        fragmentData[index + 3] = 1 / 16581375.0;
        fragmentData[index + 6] = .5;
        fragmentData[index + 7] = -.5;
        index = methodVO.vertexConstantsIndex;
        vertexData[index] = .5;
        vertexData[index + 1] = -.5;
        vertexData[index + 2] = 0;
    };
    /**
     * @inheritDoc
     */
    ShadowCascadeMethod.prototype.iCleanCompilationData = function () {
        _super.prototype.iCleanCompilationData.call(this);
        this._cascadeProjections = null;
        this._depthMapCoordVaryings = null;
    };
    /**
     * @inheritDoc
     */
    ShadowCascadeMethod.prototype.iGetVertexCode = function (shaderObject, methodVO, registerCache, sharedRegisters) {
        var code = "";
        var dataReg = registerCache.getFreeVertexConstant();
        this.initProjectionsRegs(registerCache);
        methodVO.vertexConstantsIndex = dataReg.index * 4;
        var temp = registerCache.getFreeVertexVectorTemp();
        for (var i = 0; i < this._cascadeShadowMapper.numCascades; ++i) {
            code += "m44 " + temp + ", " + sharedRegisters.globalPositionVertex + ", " + this._cascadeProjections[i] + "\n" + "add " + this._depthMapCoordVaryings[i] + ", " + temp + ", " + dataReg + ".zzwz\n";
        }
        return code;
    };
    /**
     * Creates the registers for the cascades' projection coordinates.
     */
    ShadowCascadeMethod.prototype.initProjectionsRegs = function (registerCache) {
        this._cascadeProjections = new Array(this._cascadeShadowMapper.numCascades);
        this._depthMapCoordVaryings = new Array(this._cascadeShadowMapper.numCascades);
        for (var i = 0; i < this._cascadeShadowMapper.numCascades; ++i) {
            this._depthMapCoordVaryings[i] = registerCache.getFreeVarying();
            this._cascadeProjections[i] = registerCache.getFreeVertexConstant();
            registerCache.getFreeVertexConstant();
            registerCache.getFreeVertexConstant();
            registerCache.getFreeVertexConstant();
        }
    };
    /**
     * @inheritDoc
     */
    ShadowCascadeMethod.prototype.iGetFragmentCode = function (shaderObject, methodVO, targetReg, registerCache, sharedRegisters) {
        var numCascades = this._cascadeShadowMapper.numCascades;
        var depthMapRegister = registerCache.getFreeTextureReg();
        var decReg = registerCache.getFreeFragmentConstant();
        var dataReg = registerCache.getFreeFragmentConstant();
        var planeDistanceReg = registerCache.getFreeFragmentConstant();
        var planeDistances = Array(planeDistanceReg + ".x", planeDistanceReg + ".y", planeDistanceReg + ".z", planeDistanceReg + ".w");
        var code;
        methodVO.fragmentConstantsIndex = decReg.index * 4;
        methodVO.texturesIndex = depthMapRegister.index;
        var inQuad = registerCache.getFreeFragmentVectorTemp();
        registerCache.addFragmentTempUsages(inQuad, 1);
        var uvCoord = registerCache.getFreeFragmentVectorTemp();
        registerCache.addFragmentTempUsages(uvCoord, 1);
        // assume lowest partition is selected, will be overwritten later otherwise
        code = "mov " + uvCoord + ", " + this._depthMapCoordVaryings[numCascades - 1] + "\n";
        for (var i = numCascades - 2; i >= 0; --i) {
            var uvProjection = this._depthMapCoordVaryings[i];
            // calculate if in texturemap (result == 0 or 1, only 1 for a single partition)
            code += "slt " + inQuad + ".z, " + sharedRegisters.projectionFragment + ".z, " + planeDistances[i] + "\n"; // z = x > minX, w = y > minY
            var temp = registerCache.getFreeFragmentVectorTemp();
            // linearly interpolate between old and new uv coords using predicate value == conditional toggle to new value if predicate == 1 (true)
            code += "sub " + temp + ", " + uvProjection + ", " + uvCoord + "\n" + "mul " + temp + ", " + temp + ", " + inQuad + ".z\n" + "add " + uvCoord + ", " + uvCoord + ", " + temp + "\n";
        }
        registerCache.removeFragmentTempUsage(inQuad);
        code += "div " + uvCoord + ", " + uvCoord + ", " + uvCoord + ".w\n" + "mul " + uvCoord + ".xy, " + uvCoord + ".xy, " + dataReg + ".zw\n" + "add " + uvCoord + ".xy, " + uvCoord + ".xy, " + dataReg + ".zz\n";
        code += this._baseMethod._iGetCascadeFragmentCode(shaderObject, methodVO, decReg, depthMapRegister, uvCoord, targetReg, registerCache, sharedRegisters) + "add " + targetReg + ".w, " + targetReg + ".w, " + dataReg + ".y\n";
        registerCache.removeFragmentTempUsage(uvCoord);
        return code;
    };
    /**
     * @inheritDoc
     */
    ShadowCascadeMethod.prototype.iActivate = function (shaderObject, methodVO, stage) {
        stage.context.activateTexture(methodVO.texturesIndex, this._pCastingLight.shadowMapper.depthMap);
        var vertexData = shaderObject.vertexConstantData;
        var vertexIndex = methodVO.vertexConstantsIndex;
        shaderObject.vertexConstantData[methodVO.vertexConstantsIndex + 3] = -1 / (this._cascadeShadowMapper.depth * this._pEpsilon);
        var numCascades = this._cascadeShadowMapper.numCascades;
        vertexIndex += 4;
        for (var k = 0; k < numCascades; ++k) {
            this._cascadeShadowMapper.getDepthProjections(k).copyRawDataTo(vertexData, vertexIndex, true);
            vertexIndex += 16;
        }
        var fragmentData = shaderObject.fragmentConstantData;
        var fragmentIndex = methodVO.fragmentConstantsIndex;
        fragmentData[fragmentIndex + 5] = 1 - this._pAlpha;
        var nearPlaneDistances = this._cascadeShadowMapper._iNearPlaneDistances;
        fragmentIndex += 8;
        for (var i = 0; i < numCascades; ++i)
            fragmentData[fragmentIndex + i] = nearPlaneDistances[i];
        this._baseMethod.iActivateForCascade(shaderObject, methodVO, stage);
    };
    /**
     * @inheritDoc
     */
    ShadowCascadeMethod.prototype.iSetRenderState = function (shaderObject, methodVO, renderable, stage, camera) {
    };
    /**
     * Called when the shadow mappers cascade configuration changes.
     */
    ShadowCascadeMethod.prototype.onCascadeChange = function (event) {
        this.iInvalidateShaderProgram();
    };
    /**
     * Called when the base method's shader code is invalidated.
     */
    ShadowCascadeMethod.prototype.onShaderInvalidated = function (event) {
        this.iInvalidateShaderProgram();
    };
    return ShadowCascadeMethod;
})(ShadowMapMethodBase);
module.exports = ShadowCascadeMethod;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hdGVyaWFscy9tZXRob2RzL3NoYWRvd2Nhc2NhZGVtZXRob2QudHMiXSwibmFtZXMiOlsiU2hhZG93Q2FzY2FkZU1ldGhvZCIsIlNoYWRvd0Nhc2NhZGVNZXRob2QuY29uc3RydWN0b3IiLCJTaGFkb3dDYXNjYWRlTWV0aG9kLmJhc2VNZXRob2QiLCJTaGFkb3dDYXNjYWRlTWV0aG9kLmlJbml0Vk8iLCJTaGFkb3dDYXNjYWRlTWV0aG9kLmlJbml0Q29uc3RhbnRzIiwiU2hhZG93Q2FzY2FkZU1ldGhvZC5pQ2xlYW5Db21waWxhdGlvbkRhdGEiLCJTaGFkb3dDYXNjYWRlTWV0aG9kLmlHZXRWZXJ0ZXhDb2RlIiwiU2hhZG93Q2FzY2FkZU1ldGhvZC5pbml0UHJvamVjdGlvbnNSZWdzIiwiU2hhZG93Q2FzY2FkZU1ldGhvZC5pR2V0RnJhZ21lbnRDb2RlIiwiU2hhZG93Q2FzY2FkZU1ldGhvZC5pQWN0aXZhdGUiLCJTaGFkb3dDYXNjYWRlTWV0aG9kLmlTZXRSZW5kZXJTdGF0ZSIsIlNoYWRvd0Nhc2NhZGVNZXRob2Qub25DYXNjYWRlQ2hhbmdlIiwiU2hhZG93Q2FzY2FkZU1ldGhvZC5vblNoYWRlckludmFsaWRhdGVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxJQUFPLGdCQUFnQixXQUFlLDJDQUEyQyxDQUFDLENBQUM7QUFDbkYsSUFBTyxLQUFLLFdBQWlCLDhCQUE4QixDQUFDLENBQUM7QUFPN0QsSUFBTyxrQkFBa0IsV0FBYyw4Q0FBOEMsQ0FBQyxDQUFDO0FBQ3ZGLElBQU8sUUFBUSxXQUFpQixtREFBbUQsQ0FBQyxDQUFDO0FBTXJGLElBQU8sbUJBQW1CLFdBQWMsMERBQTBELENBQUMsQ0FBQztBQUlwRyxBQU1BOzs7OztHQURHO0lBQ0csbUJBQW1CO0lBQVNBLFVBQTVCQSxtQkFBbUJBLFVBQTRCQTtJQU9wREE7Ozs7T0FJR0E7SUFDSEEsU0FaS0EsbUJBQW1CQSxDQVlaQSxnQkFBaUNBO1FBWjlDQyxpQkFtUENBO1FBck9DQSxrQkFBTUEs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WUFBWUEsR0FBeUJBLElBQUlBLENBQUNBLHNCQUFzQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFeEVBLEFBQ0FBLCtFQUQrRUE7WUFDL0VBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLE1BQU1BLEdBQUdBLE1BQU1BLEdBQUdBLGVBQWVBLENBQUNBLGtCQUFrQkEsR0FBR0EsTUFBTUEsR0FBR0EsY0FBY0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsRUFBRUEsNkJBQTZCQTtZQUV4SUEsSUFBSUEsSUFBSUEsR0FBeUJBLGFBQWFBLENBQUNBLHlCQUF5QkEsRUFBRUEsQ0FBQ0E7WUFFM0VBLEFBQ0FBLHVJQUR1SUE7WUFDdklBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLElBQUlBLEdBQUdBLElBQUlBLEdBQUdBLFlBQVlBLEdBQUdBLElBQUlBLEdBQUdBLE9BQU9BLEdBQUdBLElBQUlBLEdBQ2xFQSxNQUFNQSxHQUFHQSxJQUFJQSxHQUFHQSxJQUFJQSxHQUFHQSxJQUFJQSxHQUFHQSxJQUFJQSxHQUFHQSxNQUFNQSxHQUFHQSxNQUFNQSxHQUNwREEsTUFBTUEsR0FBR0EsT0FBT0EsR0FBR0EsSUFBSUEsR0FBR0EsT0FBT0EsR0FBR0EsSUFBSUEsR0FBR0EsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFDekRBLENBQUNBO1FBRURBLGFBQWFBLENBQUNBLHVCQUF1QkEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7UUFFOUNBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLE9BQU9BLEdBQUdBLElBQUlBLEdBQUdBLE9BQU9BLEdBQUdBLElBQUlBLEdBQUdBLE9BQU9BLEdBQUdBLE1BQU1BLEdBQ2xFQSxNQUFNQSxHQUFHQSxPQUFPQSxHQUFHQSxPQUFPQSxHQUFHQSxPQUFPQSxHQUFHQSxPQUFPQSxHQUFHQSxPQUFPQSxHQUFHQSxPQUFPQSxHQUNsRUEsTUFBTUEsR0FBR0EsT0FBT0EsR0FBR0EsT0FBT0EsR0FBR0EsT0FBT0EsR0FBR0EsT0FBT0EsR0FBR0EsT0FBT0EsR0FBR0EsT0FB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QWlCQSxFQUFFQSxVQUF5QkEsRUFBRUEsS0FBV0EsRUFBRUEsTUFBYUE7SUFFOUhVLENBQUNBO0lBRURWOztPQUVHQTtJQUNLQSw2Q0FBZUEsR0FBdkJBLFVBQXdCQSxLQUFXQTtRQUVsQ1csSUFBSUEsQ0FBQ0Esd0JBQXdCQSxFQUFFQSxDQUFDQTtJQUNqQ0EsQ0FBQ0E7SUFFRFg7O09BRUdBO0lBQ0tBLGlEQUFtQkEsR0FBM0JBLFVBQTRCQSxLQUF3QkE7UUFFbkRZLElBQUlBLENBQUNBLHdCQUF3QkEsRUFBRUEsQ0FBQ0E7SUFDakNBLENBQUNBO0lBQ0ZaLDBCQUFDQTtBQUFEQSxDQW5QQSxBQW1QQ0EsRUFuUGlDLG1CQUFtQixFQW1QcEQ7QUFFRCxBQUE2QixpQkFBcEIsbUJBQW1CLENBQUMiLCJmaWxlIjoibWF0ZXJpYWxzL21ldGhvZHMvU2hhZG93Q2FzY2FkZU1ldGhvZC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvcm9iYmF0ZW1hbi9XZWJzdG9ybVByb2plY3RzL2F3YXlqcy1yZW5kZXJlcmdsLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDYW1lcmFcdFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9lbnRpdGllcy9DYW1lcmFcIik7XG5pbXBvcnQgRGlyZWN0aW9uYWxMaWdodFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZW50aXRpZXMvRGlyZWN0aW9uYWxMaWdodFwiKTtcbmltcG9ydCBFdmVudFx0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2V2ZW50cy9FdmVudFwiKTtcbmltcG9ydCBDYXNjYWRlU2hhZG93TWFwcGVyXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvbWF0ZXJpYWxzL3NoYWRvd21hcHBlcnMvQ2FzY2FkZVNoYWRvd01hcHBlclwiKTtcbmltcG9ydCBUZXh0dXJlMkRCYXNlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi90ZXh0dXJlcy9UZXh0dXJlMkRCYXNlXCIpO1xuXG5pbXBvcnQgU3RhZ2VcdFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9jb3JlL2Jhc2UvU3RhZ2VcIik7XG5pbXBvcnQgUmVuZGVyYWJsZUJhc2VcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2NvcmUvcG9vbC9SZW5kZXJhYmxlQmFzZVwiKTtcbmltcG9ydCBJQ29udGV4dFN0YWdlR0xcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2NvcmUvc3RhZ2VnbC9JQ29udGV4dFN0YWdlR0xcIik7XG5pbXBvcnQgU2hhZGluZ01ldGhvZEV2ZW50XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvZXZlbnRzL1NoYWRpbmdNZXRob2RFdmVudFwiKTtcbmltcG9ydCBNZXRob2RWT1x0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL21hdGVyaWFscy9jb21waWxhdGlvbi9NZXRob2RWT1wiKTtcbmltcG9ydCBTaGFkZXJMaWdodGluZ09iamVjdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL21hdGVyaWFscy9jb21waWxhdGlvbi9TaGFkZXJMaWdodGluZ09iamVjdFwiKTtcbmltcG9ydCBTaGFkZXJPYmplY3RCYXNlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9tYXRlcmlhbHMvY29tcGlsYXRpb24vU2hhZGVyT2JqZWN0QmFzZVwiKTtcbmltcG9ydCBTaGFkZXJSZWdpc3RlckNhY2hlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvbWF0ZXJpYWxzL2NvbXBpbGF0aW9uL1NoYWRlclJlZ2lzdGVyQ2FjaGVcIik7XG5pbXBvcnQgU2hhZGVyUmVnaXN0ZXJEYXRhXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvbWF0ZXJpYWxzL2NvbXBpbGF0aW9uL1NoYWRlclJlZ2lzdGVyRGF0YVwiKTtcbmltcG9ydCBTaGFkZXJSZWdpc3RlckVsZW1lbnRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvbWF0ZXJpYWxzL2NvbXBpbGF0aW9uL1NoYWRlclJlZ2lzdGVyRWxlbWVudFwiKTtcbmltcG9ydCBTaGFkb3dNYXBNZXRob2RCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvbWF0ZXJpYWxzL21ldGhvZHMvU2hhZG93TWFwTWV0aG9kQmFzZVwiKTtcbmltcG9ydCBTaGFkb3dNZXRob2RCYXNlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9tYXRlcmlhbHMvbWV0aG9kcy9TaGFkb3dNZXRob2RCYXNlXCIpO1xuaW1wb3J0IFNoYWRlckNvbXBpbGVySGVscGVyXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvbWF0ZXJpYWxzL3V0aWxzL1NoYWRlckNvbXBpbGVySGVscGVyXCIpO1xuXG4vKipcbiAqIFNoYWRvd0Nhc2NhZGVNZXRob2QgaXMgYSBzaGFkb3cgbWFwIG1ldGhvZCB0byBhcHBseSBjYXNjYWRlIHNoYWRvdyBtYXBwaW5nIG9uIG1hdGVyaWFscy5cbiAqIE11c3QgYmUgdXNlZCB3aXRoIGEgRGlyZWN0aW9uYWxMaWdodCB3aXRoIGEgQ2FzY2FkZVNoYWRvd01hcHBlciBhc3NpZ25lZCB0byBpdHMgc2hhZG93TWFwcGVyIHByb3BlcnR5LlxuICpcbiAqIEBzZWUgYXdheS5saWdodHMuQ2FzY2FkZVNoYWRvd01hcHBlclxuICovXG5jbGFzcyBTaGFkb3dDYXNjYWRlTWV0aG9kIGV4dGVuZHMgU2hhZG93TWFwTWV0aG9kQmFzZVxue1xuXHRwcml2YXRlIF9iYXNlTWV0aG9kOlNoYWRvd01ldGhvZEJhc2U7XG5cdHByaXZhdGUgX2Nhc2NhZGVTaGFkb3dNYXBwZXI6Q2FzY2FkZVNoYWRvd01hcHBlcjtcblx0cHJpdmF0ZSBfZGVwdGhNYXBDb29yZFZhcnlpbmdzOkFycmF5PFNoYWRlclJlZ2lzdGVyRWxlbWVudD47XG5cdHByaXZhdGUgX2Nhc2NhZGVQcm9qZWN0aW9uczpBcnJheTxTaGFkZXJSZWdpc3RlckVsZW1lbnQ+O1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgbmV3IFNoYWRvd0Nhc2NhZGVNZXRob2Qgb2JqZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0gc2hhZG93TWV0aG9kQmFzZSBUaGUgc2hhZG93IG1hcCBzYW1wbGluZyBtZXRob2QgdXNlZCB0byBzYW1wbGUgaW5kaXZpZHVhbCBjYXNjYWRlcyAoZmU6IFNoYWRvd0hhcmRNZXRob2QsIFNoYWRvd1NvZnRNZXRob2QpXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihzaGFkb3dNZXRob2RCYXNlOlNoYWRvd01ldGhvZEJhc2UpXG5cdHtcblx0XHRzdXBlcihzaGFkb3dNZXRob2RCYXNlLmNhc3RpbmdMaWdodCk7XG5cblx0XHR0aGlzLl9iYXNlTWV0aG9kID0gc2hhZG93TWV0aG9kQmFzZTtcblx0XHRpZiAoISh0aGlzLl9wQ2FzdGluZ0xpZ2h0IGluc3RhbmNlb2YgRGlyZWN0aW9uYWxMaWdodCkpXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJTaGFkb3dDYXNjYWRlTWV0aG9kIGlzIG9ubHkgY29tcGF0aWJsZSB3aXRoIERpcmVjdGlvbmFsTGlnaHRcIik7XG5cblx0XHR0aGlzLl9jYXNjYWRlU2hhZG93TWFwcGVyID0gPENhc2NhZGVTaGFkb3dNYXBwZXI+IHRoaXMuX3BDYXN0aW5nTGlnaHQuc2hhZG93TWFwcGVyO1xuXG5cdFx0aWYgKCF0aGlzLl9jYXNjYWRlU2hhZG93TWFwcGVyKVxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiU2hhZG93Q2FzY2FkZU1ldGhvZCByZXF1aXJlcyBhIGxpZ2h0IHRoYXQgaGFzIGEgQ2FzY2FkZVNoYWRvd01hcHBlciBpbnN0YW5jZSBhc3NpZ25lZCB0byBzaGFkb3dNYXBwZXIuXCIpO1xuXG5cdFx0dGhpcy5fY2FzY2FkZVNoYWRvd01hcHBlci5hZGRFdmVudExpc3RlbmVyKEV2ZW50LkNIQU5HRSwgKGV2ZW50OkV2ZW50KSA9PiB0aGlzLm9uQ2FzY2FkZUNoYW5nZShldmVudCkpO1xuXHRcdHRoaXMuX2Jhc2VNZXRob2QuYWRkRXZlbnRMaXN0ZW5lcihTaGFkaW5nTWV0aG9kRXZlbnQuU0hBREVSX0lOVkFMSURBVEVELCAoZXZlbnQ6U2hhZGluZ01ldGhvZEV2ZW50KSA9PiB0aGlzLm9uU2hhZGVySW52YWxpZGF0ZWQoZXZlbnQpKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgc2hhZG93IG1hcCBzYW1wbGluZyBtZXRob2QgdXNlZCB0byBzYW1wbGUgaW5kaXZpZHVhbCBjYXNjYWRlcy4gVGhlc2UgYXJlIHR5cGljYWxseSB0aG9zZSB1c2VkIGluIGNvbmp1bmN0aW9uXG5cdCAqIHdpdGggYSBEaXJlY3Rpb25hbFNoYWRvd01hcHBlci5cblx0ICpcblx0ICogQHNlZSBTaGFkb3dIYXJkTWV0aG9kXG5cdCAqIEBzZWUgU2hhZG93U29mdE1ldGhvZFxuXHQgKi9cblx0cHVibGljIGdldCBiYXNlTWV0aG9kKCk6U2hhZG93TWV0aG9kQmFzZVxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX2Jhc2VNZXRob2Q7XG5cdH1cblxuXHRwdWJsaWMgc2V0IGJhc2VNZXRob2QodmFsdWU6U2hhZG93TWV0aG9kQmFzZSlcblx0e1xuXHRcdGlmICh0aGlzLl9iYXNlTWV0aG9kID09IHZhbHVlKVxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0dGhpcy5fYmFzZU1ldGhvZC5yZW1vdmVFdmVudExpc3RlbmVyKFNoYWRpbmdNZXRob2RFdmVudC5TSEFERVJfSU5WQUxJREFURUQsIChldmVudDpTaGFkaW5nTWV0aG9kRXZlbnQpID0+IHRoaXMub25TaGFkZXJJbnZhbGlkYXRlZChldmVudCkpO1xuXG5cdFx0dGhpcy5fYmFzZU1ldGhvZCA9IHZhbHVlO1xuXG5cdFx0dGhpcy5fYmFzZU1ldGhvZC5hZGRFdmVudExpc3RlbmVyKFNoYWRpbmdNZXRob2RFdmVudC5TSEFERVJfSU5WQUxJREFURUQsIChldmVudDpTaGFkaW5nTWV0aG9kRXZlbnQpID0+IHRoaXMub25TaGFkZXJJbnZhbGlkYXRlZChldmVudCkpO1xuXG5cdFx0dGhpcy5pSW52YWxpZGF0ZVNoYWRlclByb2dyYW0oKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIGlJbml0Vk8oc2hhZGVyT2JqZWN0OlNoYWRlckxpZ2h0aW5nT2JqZWN0LCBtZXRob2RWTzpNZXRob2RWTylcblx0e1xuXHRcdHZhciB0ZW1wVk86TWV0aG9kVk8gPSBuZXcgTWV0aG9kVk8odGhpcy5fYmFzZU1ldGhvZCk7XG5cdFx0dGhpcy5fYmFzZU1ldGhvZC5pSW5pdFZPKHNoYWRlck9iamVjdCwgdGVtcFZPKTtcblxuXHRcdG1ldGhvZFZPLm5lZWRzR2xvYmFsVmVydGV4UG9zID0gdHJ1ZTtcblx0XHRtZXRob2RWTy5uZWVkc1Byb2plY3Rpb24gPSB0cnVlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRwdWJsaWMgaUluaXRDb25zdGFudHMoc2hhZGVyT2JqZWN0OlNoYWRlck9iamVjdEJhc2UsIG1ldGhvZFZPOk1ldGhvZFZPKVxuXHR7XG5cdFx0dmFyIGZyYWdtZW50RGF0YTpBcnJheTxudW1iZXI+ID0gc2hhZGVyT2JqZWN0LmZyYWdtZW50Q29uc3RhbnREYXRhO1xuXHRcdHZhciB2ZXJ0ZXhEYXRhOkFycmF5PG51bWJlcj4gPSBzaGFkZXJPYmplY3QudmVydGV4Q29uc3RhbnREYXRhO1xuXHRcdHZhciBpbmRleDpudW1iZXIgPSBtZXRob2RWTy5mcmFnbWVudENvbnN0YW50c0luZGV4O1xuXHRcdGZyYWdtZW50RGF0YVtpbmRleF0gPSAxLjA7XG5cdFx0ZnJhZ21lbnREYXRhW2luZGV4ICsgMV0gPSAxLzI1NS4wO1xuXHRcdGZyYWdtZW50RGF0YVtpbmRleCArIDJdID0gMS82NTAyNS4wO1xuXHRcdGZyYWdtZW50RGF0YVtpbmRleCArIDNdID0gMS8xNjU4MTM3NS4wO1xuXG5cdFx0ZnJhZ21lbnREYXRhW2luZGV4ICsgNl0gPSAuNTtcblx0XHRmcmFnbWVudERhdGFbaW5kZXggKyA3XSA9IC0uNTtcblxuXHRcdGluZGV4ID0gbWV0aG9kVk8udmVydGV4Q29uc3RhbnRzSW5kZXg7XG5cdFx0dmVydGV4RGF0YVtpbmRleF0gPSAuNTtcblx0XHR2ZXJ0ZXhEYXRhW2luZGV4ICsgMV0gPSAtLjU7XG5cdFx0dmVydGV4RGF0YVtpbmRleCArIDJdID0gMDtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIGlDbGVhbkNvbXBpbGF0aW9uRGF0YSgpXG5cdHtcblx0XHRzdXBlci5pQ2xlYW5Db21waWxhdGlvbkRhdGEoKTtcblx0XHR0aGlzLl9jYXNjYWRlUHJvamVjdGlvbnMgPSBudWxsO1xuXHRcdHRoaXMuX2RlcHRoTWFwQ29vcmRWYXJ5aW5ncyA9IG51bGw7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHB1YmxpYyBpR2V0VmVydGV4Q29kZShzaGFkZXJPYmplY3Q6U2hhZGVyT2JqZWN0QmFzZSwgbWV0aG9kVk86TWV0aG9kVk8sIHJlZ2lzdGVyQ2FjaGU6U2hhZGVyUmVnaXN0ZXJDYWNoZSwgc2hhcmVkUmVnaXN0ZXJzOlNoYWRlclJlZ2lzdGVyRGF0YSk6c3RyaW5nXG5cdHtcblx0XHR2YXIgY29kZTpzdHJpbmcgPSBcIlwiO1xuXHRcdHZhciBkYXRhUmVnOlNoYWRlclJlZ2lzdGVyRWxlbWVudCA9IHJlZ2lzdGVyQ2FjaGUuZ2V0RnJlZVZlcnRleENvbnN0YW50KCk7XG5cblx0XHR0aGlzLmluaXRQcm9qZWN0aW9uc1JlZ3MocmVnaXN0ZXJDYWNoZSk7XG5cdFx0bWV0aG9kVk8udmVydGV4Q29uc3RhbnRzSW5kZXggPSBkYXRhUmVnLmluZGV4KjQ7XG5cblx0XHR2YXIgdGVtcDpTaGFkZXJSZWdpc3RlckVsZW1lbnQgPSByZWdpc3RlckNhY2hlLmdldEZyZWVWZXJ0ZXhWZWN0b3JUZW1wKCk7XG5cblx0XHRmb3IgKHZhciBpOm51bWJlciA9IDA7IGkgPCB0aGlzLl9jYXNjYWRlU2hhZG93TWFwcGVyLm51bUNhc2NhZGVzOyArK2kpIHtcblx0XHRcdGNvZGUgKz0gXCJtNDQgXCIgKyB0ZW1wICsgXCIsIFwiICsgc2hhcmVkUmVnaXN0ZXJzLmdsb2JhbFBvc2l0aW9uVmVydGV4ICsgXCIsIFwiICsgdGhpcy5fY2FzY2FkZVByb2plY3Rpb25zW2ldICsgXCJcXG5cIiArXG5cdFx0XHRcdFwiYWRkIFwiICsgdGhpcy5fZGVwdGhNYXBDb29yZFZhcnlpbmdzW2ldICsgXCIsIFwiICsgdGVtcCArIFwiLCBcIiArIGRhdGFSZWcgKyBcIi56end6XFxuXCI7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvZGU7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyB0aGUgcmVnaXN0ZXJzIGZvciB0aGUgY2FzY2FkZXMnIHByb2plY3Rpb24gY29vcmRpbmF0ZXMuXG5cdCAqL1xuXHRwcml2YXRlIGluaXRQcm9qZWN0aW9uc1JlZ3MocmVnaXN0ZXJDYWNoZTpTaGFkZXJSZWdpc3RlckNhY2hlKVxuXHR7XG5cdFx0dGhpcy5fY2FzY2FkZVByb2plY3Rpb25zID0gbmV3IEFycmF5PFNoYWRlclJlZ2lzdGVyRWxlbWVudD4odGhpcy5fY2FzY2FkZVNoYWRvd01hcHBlci5udW1DYXNjYWRlcyk7XG5cdFx0dGhpcy5fZGVwdGhNYXBDb29yZFZhcnlpbmdzID0gbmV3IEFycmF5PFNoYWRlclJlZ2lzdGVyRWxlbWVudD4odGhpcy5fY2FzY2FkZVNoYWRvd01hcHBlci5udW1DYXNjYWRlcyk7XG5cblx0XHRmb3IgKHZhciBpOm51bWJlciA9IDA7IGkgPCB0aGlzLl9jYXNjYWRlU2hhZG93TWFwcGVyLm51bUNhc2NhZGVzOyArK2kpIHtcblx0XHRcdHRoaXMuX2RlcHRoTWFwQ29vcmRWYXJ5aW5nc1tpXSA9IHJlZ2lzdGVyQ2FjaGUuZ2V0RnJlZVZhcnlpbmcoKTtcblx0XHRcdHRoaXMuX2Nhc2NhZGVQcm9qZWN0aW9uc1tpXSA9IHJlZ2lzdGVyQ2FjaGUuZ2V0RnJlZVZlcnRleENvbnN0YW50KCk7XG5cdFx0XHRyZWdpc3RlckNhY2hlLmdldEZyZWVWZXJ0ZXhDb25zdGFudCgpO1xuXHRcdFx0cmVnaXN0ZXJDYWNoZS5nZXRGcmVlVmVydGV4Q29uc3RhbnQoKTtcblx0XHRcdHJlZ2lzdGVyQ2FjaGUuZ2V0RnJlZVZlcnRleENvbnN0YW50KCk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRwdWJsaWMgaUdldEZyYWdtZW50Q29kZShzaGFkZXJPYmplY3Q6U2hhZGVyT2JqZWN0QmFzZSwgbWV0aG9kVk86TWV0aG9kVk8sIHRhcmdldFJlZzpTaGFkZXJSZWdpc3RlckVsZW1lbnQsIHJlZ2lzdGVyQ2FjaGU6U2hhZGVyUmVnaXN0ZXJDYWNoZSwgc2hhcmVkUmVnaXN0ZXJzOlNoYWRlclJlZ2lzdGVyRGF0YSk6c3RyaW5nXG5cdHtcblx0XHR2YXIgbnVtQ2FzY2FkZXM6bnVtYmVyID0gdGhpcy5fY2FzY2FkZVNoYWRvd01hcHBlci5udW1DYXNjYWRlcztcblx0XHR2YXIgZGVwdGhNYXBSZWdpc3RlcjpTaGFkZXJSZWdpc3RlckVsZW1lbnQgPSByZWdpc3RlckNhY2hlLmdldEZyZWVUZXh0dXJlUmVnKCk7XG5cdFx0dmFyIGRlY1JlZzpTaGFkZXJSZWdpc3RlckVsZW1lbnQgPSByZWdpc3RlckNhY2hlLmdldEZyZWVGcmFnbWVudENvbnN0YW50KCk7XG5cdFx0dmFyIGRhdGFSZWc6U2hhZGVyUmVnaXN0ZXJFbGVtZW50ID0gcmVnaXN0ZXJDYWNoZS5nZXRGcmVlRnJhZ21lbnRDb25zdGFudCgpO1xuXHRcdHZhciBwbGFuZURpc3RhbmNlUmVnOlNoYWRlclJlZ2lzdGVyRWxlbWVudCA9IHJlZ2lzdGVyQ2FjaGUuZ2V0RnJlZUZyYWdtZW50Q29uc3RhbnQoKTtcblx0XHR2YXIgcGxhbmVEaXN0YW5jZXM6QXJyYXk8c3RyaW5nPiA9IEFycmF5PHN0cmluZz4oIHBsYW5lRGlzdGFuY2VSZWcgKyBcIi54XCIsIHBsYW5lRGlzdGFuY2VSZWcgKyBcIi55XCIsIHBsYW5lRGlzdGFuY2VSZWcgKyBcIi56XCIsIHBsYW5lRGlzdGFuY2VSZWcgKyBcIi53XCIgKTtcblx0XHR2YXIgY29kZTpzdHJpbmc7XG5cblx0XHRtZXRob2RWTy5mcmFnbWVudENvbnN0YW50c0luZGV4ID0gZGVjUmVnLmluZGV4KjQ7XG5cdFx0bWV0aG9kVk8udGV4dHVyZXNJbmRleCA9IGRlcHRoTWFwUmVnaXN0ZXIuaW5kZXg7XG5cblx0XHR2YXIgaW5RdWFkOlNoYWRlclJlZ2lzdGVyRWxlbWVudCA9IHJlZ2lzdGVyQ2FjaGUuZ2V0RnJlZUZyYWdtZW50VmVjdG9yVGVtcCgpO1xuXHRcdHJlZ2lzdGVyQ2FjaGUuYWRkRnJhZ21lbnRUZW1wVXNhZ2VzKGluUXVhZCwgMSk7XG5cdFx0dmFyIHV2Q29vcmQ6U2hhZGVyUmVnaXN0ZXJFbGVtZW50ID0gcmVnaXN0ZXJDYWNoZS5nZXRGcmVlRnJhZ21lbnRWZWN0b3JUZW1wKCk7XG5cdFx0cmVnaXN0ZXJDYWNoZS5hZGRGcmFnbWVudFRlbXBVc2FnZXModXZDb29yZCwgMSk7XG5cblx0XHQvLyBhc3N1bWUgbG93ZXN0IHBhcnRpdGlvbiBpcyBzZWxlY3RlZCwgd2lsbCBiZSBvdmVyd3JpdHRlbiBsYXRlciBvdGhlcndpc2Vcblx0XHRjb2RlID0gXCJtb3YgXCIgKyB1dkNvb3JkICsgXCIsIFwiICsgdGhpcy5fZGVwdGhNYXBDb29yZFZhcnlpbmdzW251bUNhc2NhZGVzIC0gMV0gKyBcIlxcblwiO1xuXG5cdFx0Zm9yICh2YXIgaTpudW1iZXIgPSBudW1DYXNjYWRlcyAtIDI7IGkgPj0gMDsgLS1pKSB7XG5cdFx0XHR2YXIgdXZQcm9qZWN0aW9uOlNoYWRlclJlZ2lzdGVyRWxlbWVudCA9IHRoaXMuX2RlcHRoTWFwQ29vcmRWYXJ5aW5nc1tpXTtcblxuXHRcdFx0Ly8gY2FsY3VsYXRlIGlmIGluIHRleHR1cmVtYXAgKHJlc3VsdCA9PSAwIG9yIDEsIG9ubHkgMSBmb3IgYSBzaW5nbGUgcGFydGl0aW9uKVxuXHRcdFx0Y29kZSArPSBcInNsdCBcIiArIGluUXVhZCArIFwiLnosIFwiICsgc2hhcmVkUmVnaXN0ZXJzLnByb2plY3Rpb25GcmFnbWVudCArIFwiLnosIFwiICsgcGxhbmVEaXN0YW5jZXNbaV0gKyBcIlxcblwiOyAvLyB6ID0geCA+IG1pblgsIHcgPSB5ID4gbWluWVxuXG5cdFx0XHR2YXIgdGVtcDpTaGFkZXJSZWdpc3RlckVsZW1lbnQgPSByZWdpc3RlckNhY2hlLmdldEZyZWVGcmFnbWVudFZlY3RvclRlbXAoKTtcblxuXHRcdFx0Ly8gbGluZWFybHkgaW50ZXJwb2xhdGUgYmV0d2VlbiBvbGQgYW5kIG5ldyB1diBjb29yZHMgdXNpbmcgcHJlZGljYXRlIHZhbHVlID09IGNvbmRpdGlvbmFsIHRvZ2dsZSB0byBuZXcgdmFsdWUgaWYgcHJlZGljYXRlID09IDEgKHRydWUpXG5cdFx0XHRjb2RlICs9IFwic3ViIFwiICsgdGVtcCArIFwiLCBcIiArIHV2UHJvamVjdGlvbiArIFwiLCBcIiArIHV2Q29vcmQgKyBcIlxcblwiICtcblx0XHRcdFx0XCJtdWwgXCIgKyB0ZW1wICsgXCIsIFwiICsgdGVtcCArIFwiLCBcIiArIGluUXVhZCArIFwiLnpcXG5cIiArXG5cdFx0XHRcdFwiYWRkIFwiICsgdXZDb29yZCArIFwiLCBcIiArIHV2Q29vcmQgKyBcIiwgXCIgKyB0ZW1wICsgXCJcXG5cIjtcblx0XHR9XG5cblx0XHRyZWdpc3RlckNhY2hlLnJlbW92ZUZyYWdtZW50VGVtcFVzYWdlKGluUXVhZCk7XG5cblx0XHRjb2RlICs9IFwiZGl2IFwiICsgdXZDb29yZCArIFwiLCBcIiArIHV2Q29vcmQgKyBcIiwgXCIgKyB1dkNvb3JkICsgXCIud1xcblwiICtcblx0XHRcdFwibXVsIFwiICsgdXZDb29yZCArIFwiLnh5LCBcIiArIHV2Q29vcmQgKyBcIi54eSwgXCIgKyBkYXRhUmVnICsgXCIuendcXG5cIiArXG5cdFx0XHRcImFkZCBcIiArIHV2Q29vcmQgKyBcIi54eSwgXCIgKyB1dkNvb3JkICsgXCIueHksIFwiICsgZGF0YVJlZyArIFwiLnp6XFxuXCI7XG5cblx0XHRjb2RlICs9IHRoaXMuX2Jhc2VNZXRob2QuX2lHZXRDYXNjYWRlRnJhZ21lbnRDb2RlKHNoYWRlck9iamVjdCwgbWV0aG9kVk8sIGRlY1JlZywgZGVwdGhNYXBSZWdpc3RlciwgdXZDb29yZCwgdGFyZ2V0UmVnLCByZWdpc3RlckNhY2hlLCBzaGFyZWRSZWdpc3RlcnMpICtcblx0XHRcdFwiYWRkIFwiICsgdGFyZ2V0UmVnICsgXCIudywgXCIgKyB0YXJnZXRSZWcgKyBcIi53LCBcIiArIGRhdGFSZWcgKyBcIi55XFxuXCI7XG5cblx0XHRyZWdpc3RlckNhY2hlLnJlbW92ZUZyYWdtZW50VGVtcFVzYWdlKHV2Q29vcmQpO1xuXG5cdFx0cmV0dXJuIGNvZGU7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHB1YmxpYyBpQWN0aXZhdGUoc2hhZGVyT2JqZWN0OlNoYWRlck9iamVjdEJhc2UsIG1ldGhvZFZPOk1ldGhvZFZPLCBzdGFnZTpTdGFnZSlcblx0e1xuXHRcdCg8SUNvbnRleHRTdGFnZUdMPiBzdGFnZS5jb250ZXh0KS5hY3RpdmF0ZVRleHR1cmUobWV0aG9kVk8udGV4dHVyZXNJbmRleCwgPFRleHR1cmUyREJhc2U+IHRoaXMuX3BDYXN0aW5nTGlnaHQuc2hhZG93TWFwcGVyLmRlcHRoTWFwKTtcblxuXHRcdHZhciB2ZXJ0ZXhEYXRhOkFycmF5PG51bWJlcj4gPSBzaGFkZXJPYmplY3QudmVydGV4Q29uc3RhbnREYXRhO1xuXHRcdHZhciB2ZXJ0ZXhJbmRleDpudW1iZXIgPSBtZXRob2RWTy52ZXJ0ZXhDb25zdGFudHNJbmRleDtcblxuXHRcdHNoYWRlck9iamVjdC52ZXJ0ZXhDb25zdGFudERhdGFbbWV0aG9kVk8udmVydGV4Q29uc3RhbnRzSW5kZXggKyAzXSA9IC0xLyh0aGlzLl9jYXNjYWRlU2hhZG93TWFwcGVyLmRlcHRoKnRoaXMuX3BFcHNpbG9uKTtcblxuXHRcdHZhciBudW1DYXNjYWRlczpudW1iZXIgPSB0aGlzLl9jYXNjYWRlU2hhZG93TWFwcGVyLm51bUNhc2NhZGVzO1xuXHRcdHZlcnRleEluZGV4ICs9IDQ7XG5cdFx0Zm9yICh2YXIgazpudW1iZXIgPSAwOyBrIDwgbnVtQ2FzY2FkZXM7ICsraykge1xuXHRcdFx0dGhpcy5fY2FzY2FkZVNoYWRvd01hcHBlci5nZXREZXB0aFByb2plY3Rpb25zKGspLmNvcHlSYXdEYXRhVG8odmVydGV4RGF0YSwgdmVydGV4SW5kZXgsIHRydWUpO1xuXHRcdFx0dmVydGV4SW5kZXggKz0gMTY7XG5cdFx0fVxuXG5cdFx0dmFyIGZyYWdtZW50RGF0YTpBcnJheTxudW1iZXI+ID0gc2hhZGVyT2JqZWN0LmZyYWdtZW50Q29uc3RhbnREYXRhO1xuXHRcdHZhciBmcmFnbWVudEluZGV4Om51bWJlciA9IG1ldGhvZFZPLmZyYWdtZW50Q29uc3RhbnRzSW5kZXg7XG5cdFx0ZnJhZ21lbnREYXRhW2ZyYWdtZW50SW5kZXggKyA1XSA9IDEgLSB0aGlzLl9wQWxwaGE7XG5cblx0XHR2YXIgbmVhclBsYW5lRGlzdGFuY2VzOkFycmF5PG51bWJlcj4gPSB0aGlzLl9jYXNjYWRlU2hhZG93TWFwcGVyLl9pTmVhclBsYW5lRGlzdGFuY2VzO1xuXG5cdFx0ZnJhZ21lbnRJbmRleCArPSA4O1xuXHRcdGZvciAodmFyIGk6bnVtYmVyID0gMDsgaSA8IG51bUNhc2NhZGVzOyArK2kpXG5cdFx0XHRmcmFnbWVudERhdGFbZnJhZ21lbnRJbmRleCArIGldID0gbmVhclBsYW5lRGlzdGFuY2VzW2ldO1xuXG5cdFx0dGhpcy5fYmFzZU1ldGhvZC5pQWN0aXZhdGVGb3JDYXNjYWRlKHNoYWRlck9iamVjdCwgbWV0aG9kVk8sIHN0YWdlKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIGlTZXRSZW5kZXJTdGF0ZShzaGFkZXJPYmplY3Q6U2hhZGVyT2JqZWN0QmFzZSwgbWV0aG9kVk86TWV0aG9kVk8sIHJlbmRlcmFibGU6UmVuZGVyYWJsZUJhc2UsIHN0YWdlOlN0YWdlLCBjYW1lcmE6Q2FtZXJhKVxuXHR7XG5cdH1cblxuXHQvKipcblx0ICogQ2FsbGVkIHdoZW4gdGhlIHNoYWRvdyBtYXBwZXJzIGNhc2NhZGUgY29uZmlndXJhdGlvbiBjaGFuZ2VzLlxuXHQgKi9cblx0cHJpdmF0ZSBvbkNhc2NhZGVDaGFuZ2UoZXZlbnQ6RXZlbnQpXG5cdHtcblx0XHR0aGlzLmlJbnZhbGlkYXRlU2hhZGVyUHJvZ3JhbSgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENhbGxlZCB3aGVuIHRoZSBiYXNlIG1ldGhvZCdzIHNoYWRlciBjb2RlIGlzIGludmFsaWRhdGVkLlxuXHQgKi9cblx0cHJpdmF0ZSBvblNoYWRlckludmFsaWRhdGVkKGV2ZW50OlNoYWRpbmdNZXRob2RFdmVudClcblx0e1xuXHRcdHRoaXMuaUludmFsaWRhdGVTaGFkZXJQcm9ncmFtKCk7XG5cdH1cbn1cblxuZXhwb3J0ID0gU2hhZG93Q2FzY2FkZU1ldGhvZDsiXX0=