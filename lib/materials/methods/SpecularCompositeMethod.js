var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var ShadingMethodEvent = require("awayjs-stagegl/lib/events/ShadingMethodEvent");
var SpecularBasicMethod = require("awayjs-stagegl/lib/materials/methods/SpecularBasicMethod");
/**
 * SpecularCompositeMethod provides a base class for specular methods that wrap a specular method to alter the
 * calculated specular reflection strength.
 */
var SpecularCompositeMethod = (function (_super) {
    __extends(SpecularCompositeMethod, _super);
    /**
     * Creates a new <code>SpecularCompositeMethod</code> object.
     *
     * @param modulateMethod The method which will add the code to alter the base method's strength. It needs to have the signature modSpecular(t:ShaderRegisterElement, regCache:ShaderRegisterCache):string, in which t.w will contain the specular strength and t.xyz will contain the half-vector or the reflection vector.
     * @param baseMethod The base specular method on which this method's shading is based.
     */
    function SpecularCompositeMethod(modulateMethod, baseMethod) {
        var _this = this;
        if (baseMethod === void 0) { baseMethod = null; }
        _super.call(this);
        this._onShaderInvalidatedDelegate = function (event) { return _this.onShaderInvalidated(event); };
        this._baseMethod = baseMethod || new SpecularBasicMethod();
        this._baseMethod._iModulateMethod = modulateMethod;
        this._baseMethod.addEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);
    }
    /**
     * @inheritDoc
     */
    SpecularCompositeMethod.prototype.iInitVO = function (shaderObject, methodVO) {
        this._baseMethod.iInitVO(shaderObject, methodVO);
    };
    /**
     * @inheritDoc
     */
    SpecularCompositeMethod.prototype.iInitConstants = function (shaderObject, methodVO) {
        this._baseMethod.iInitConstants(shaderObject, methodVO);
    };
    Object.defineProperty(SpecularCompositeMethod.prototype, "baseMethod", {
        /**
         * The base specular method on which this method's shading is based.
         */
        get: function () {
            return this._baseMethod;
        },
        set: function (value) {
            if (this._baseMethod == value)
                return;
            this._baseMethod.removeEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);
            this._baseMethod = value;
            this._baseMethod.addEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);
            this.iInvalidateShaderProgram();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpecularCompositeMethod.prototype, "gloss", {
        /**
         * @inheritDoc
         */
        get: function () {
            return this._baseMethod.gloss;
        },
        set: function (value) {
            this._baseMethod.gloss = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpecularCompositeMethod.prototype, "specular", {
        /**
         * @inheritDoc
         */
        get: function () {
            return this._baseMethod.specular;
        },
        set: function (value) {
            this._baseMethod.specular = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpecularCompositeMethod.prototype, "passes", {
        /**
         * @inheritDoc
         */
        get: function () {
            return this._baseMethod.passes;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @inheritDoc
     */
    SpecularCompositeMethod.prototype.dispose = function () {
        this._baseMethod.removeEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);
        this._baseMethod.dispose();
    };
    Object.defineProperty(SpecularCompositeMethod.prototype, "texture", {
        /**
         * @inheritDoc
         */
        get: function () {
            return this._baseMethod.texture;
        },
        set: function (value) {
            this._baseMethod.texture = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @inheritDoc
     */
    SpecularCompositeMethod.prototype.iActivate = function (shaderObject, methodVO, stage) {
        this._baseMethod.iActivate(shaderObject, methodVO, stage);
    };
    /**
     * @inheritDoc
     */
    SpecularCompositeMethod.prototype.iSetRenderState = function (shaderObject, methodVO, renderable, stage, camera) {
        this._baseMethod.iSetRenderState(shaderObject, methodVO, renderable, stage, camera);
    };
    /**
     * @inheritDoc
     */
    SpecularCompositeMethod.prototype.iDeactivate = function (shaderObject, methodVO, stage) {
        this._baseMethod.iDeactivate(shaderObject, methodVO, stage);
    };
    /**
     * @inheritDoc
     */
    SpecularCompositeMethod.prototype.iGetVertexCode = function (shaderObject, methodVO, registerCache, sharedRegisters) {
        return this._baseMethod.iGetVertexCode(shaderObject, methodVO, registerCache, sharedRegisters);
    };
    /**
     * @inheritDoc
     */
    SpecularCompositeMethod.prototype.iGetFragmentPreLightingCode = function (shaderObject, methodVO, registerCache, sharedRegisters) {
        return this._baseMethod.iGetFragmentPreLightingCode(shaderObject, methodVO, registerCache, sharedRegisters);
    };
    /**
     * @inheritDoc
     */
    SpecularCompositeMethod.prototype.iGetFragmentCodePerLight = function (shaderObject, methodVO, lightDirReg, lightColReg, registerCache, sharedRegisters) {
        return this._baseMethod.iGetFragmentCodePerLight(shaderObject, methodVO, lightDirReg, lightColReg, registerCache, sharedRegisters);
    };
    /**
     * @inheritDoc
     * @return
     */
    SpecularCompositeMethod.prototype.iGetFragmentCodePerProbe = function (shaderObject, methodVO, cubeMapReg, weightRegister, registerCache, sharedRegisters) {
        return this._baseMethod.iGetFragmentCodePerProbe(shaderObject, methodVO, cubeMapReg, weightRegister, registerCache, sharedRegisters);
    };
    /**
     * @inheritDoc
     */
    SpecularCompositeMethod.prototype.iGetFragmentPostLightingCode = function (shaderObject, methodVO, targetReg, registerCache, sharedRegisters) {
        return this._baseMethod.iGetFragmentPostLightingCode(shaderObject, methodVO, targetReg, registerCache, sharedRegisters);
    };
    /**
     * @inheritDoc
     */
    SpecularCompositeMethod.prototype.iReset = function () {
        this._baseMethod.iReset();
    };
    /**
     * @inheritDoc
     */
    SpecularCompositeMethod.prototype.iCleanCompilationData = function () {
        _super.prototype.iCleanCompilationData.call(this);
        this._baseMethod.iCleanCompilationData();
    };
    /**
     * Called when the base method's shader code is invalidated.
     */
    SpecularCompositeMethod.prototype.onShaderInvalidated = function (event) {
        this.iInvalidateShaderProgram();
    };
    return SpecularCompositeMethod;
})(SpecularBasicMethod);
module.exports = SpecularCompositeMethod;

//# sourceMappingURL=data:application/json;base64,