var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var DiffuseBasicMethod = require("awayjs-stagegl/lib/materials/methods/DiffuseBasicMethod");
var ShaderCompilerHelper = require("awayjs-stagegl/lib/materials/utils/ShaderCompilerHelper");
/**
 * DiffuseDepthMethod provides a debug method to visualise depth maps
 */
var DiffuseDepthMethod = (function (_super) {
    __extends(DiffuseDepthMethod, _super);
    /**
     * Creates a new DiffuseBasicMethod object.
     */
    function DiffuseDepthMethod() {
        _super.call(this);
    }
    /**
     * @inheritDoc
     */
    DiffuseDepthMethod.prototype.iInitConstants = function (shaderObject, methodVO) {
        var data = shaderObject.fragmentConstantData;
        var index = methodVO.fragmentConstantsIndex;
        data[index] = 1.0;
        data[index + 1] = 1 / 255.0;
        data[index + 2] = 1 / 65025.0;
        data[index + 3] = 1 / 16581375.0;
    };
    /**
     * @inheritDoc
     */
    DiffuseDepthMethod.prototype.iGetFragmentPostLightingCode = function (shaderObject, methodVO, targetReg, registerCache, sharedRegisters) {
        var code = "";
        var temp;
        var decReg;
        if (!this._pUseTexture)
            throw new Error("DiffuseDepthMethod requires texture!");
        // incorporate input from ambient
        if (shaderObject.numLights > 0) {
            if (sharedRegisters.shadowTarget)
                code += "mul " + this._pTotalLightColorReg + ".xyz, " + this._pTotalLightColorReg + ".xyz, " + sharedRegisters.shadowTarget + ".w\n";
            code += "add " + targetReg + ".xyz, " + this._pTotalLightColorReg + ".xyz, " + targetReg + ".xyz\n" + "sat " + targetReg + ".xyz, " + targetReg + ".xyz\n";
            registerCache.removeFragmentTempUsage(this._pTotalLightColorReg);
        }
        temp = shaderObject.numLights > 0 ? registerCache.getFreeFragmentVectorTemp() : targetReg;
        this._pDiffuseInputRegister = registerCache.getFreeTextureReg();
        methodVO.texturesIndex = this._pDiffuseInputRegister.index;
        decReg = registerCache.getFreeFragmentConstant();
        methodVO.fragmentConstantsIndex = decReg.index * 4;
        code += ShaderCompilerHelper.getTex2DSampleCode(temp, sharedRegisters, this._pDiffuseInputRegister, this.texture, shaderObject.useSmoothTextures, shaderObject.repeatTextures, shaderObject.useMipmapping) + "dp4 " + temp + ".x, " + temp + ", " + decReg + "\n" + "mov " + temp + ".yz, " + temp + ".xx			\n" + "mov " + temp + ".w, " + decReg + ".x\n" + "sub " + temp + ".xyz, " + decReg + ".xxx, " + temp + ".xyz\n";
        if (shaderObject.numLights == 0)
            return code;
        code += "mul " + targetReg + ".xyz, " + temp + ".xyz, " + targetReg + ".xyz\n" + "mov " + targetReg + ".w, " + temp + ".w\n";
        return code;
    };
    return DiffuseDepthMethod;
})(DiffuseBasicMethod);
module.exports = DiffuseDepthMethod;

//# sourceMappingURL=data:application/json;base64,