var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
var RenderTexture = require("awayjs-core/lib/textures/RenderTexture");
var TriangleSubGeometry = require("awayjs-display/lib/base/TriangleSubGeometry");
var ContextGLProgramType = require("awayjs-stagegl/lib/base/ContextGLProgramType");
var MaterialPassBase = require("awayjs-renderergl/lib/materials/passes/MaterialPassBase");
/**
 * The SingleObjectDepthPass provides a material pass that renders a single object to a depth map from the point
 * of view from a light.
 */
var SingleObjectDepthPass = (function (_super) {
    __extends(SingleObjectDepthPass, _super);
    /**
     * Creates a new SingleObjectDepthPass object.
     */
    function SingleObjectDepthPass() {
        _super.call(this);
        this._textureSize = 512;
        this._polyOffset = Array(15, 0, 0, 0);
        this._projectionTexturesInvalid = true;
        //this._pNumUsedStreams = 2;
        //this._pNumUsedVertexConstants = 7;
        //this._enc = Array<number>(1.0, 255.0, 65025.0, 16581375.0, 1.0/255.0, 1.0/255.0, 1.0/255.0, 0.0);
        //
        //this._pAnimatableAttributes = Array<string>("va0", "va1");
        //this._pAnimationTargetRegisters = Array<string>("vt0", "vt1");
    }
    Object.defineProperty(SingleObjectDepthPass.prototype, "textureSize", {
        /**
         * The size of the depth map texture to render to.
         */
        get: function () {
            return this._textureSize;
        },
        set: function (value) {
            this._textureSize = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SingleObjectDepthPass.prototype, "polyOffset", {
        /**
         * The amount by which the rendered object will be inflated, to prevent depth map rounding errors.
         */
        get: function () {
            return this._polyOffset[0];
        },
        set: function (value) {
            this._polyOffset[0] = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @inheritDoc
     */
    SingleObjectDepthPass.prototype.dispose = function () {
        if (this._textures) {
            for (var key in this._textures) {
                var texture = this._textures[key];
                texture.dispose();
            }
            this._textures = null;
        }
    };
    /**
     * Updates the projection textures used to contain the depth renders.
     */
    SingleObjectDepthPass.prototype.updateProjectionTextures = function () {
        if (this._textures) {
            for (var key in this._textures) {
                var texture = this._textures[key];
                texture.dispose();
            }
        }
        this._textures = new Object();
        this._projections = new Object();
        this._projectionTexturesInvalid = false;
    };
    /**
     * @inheritDoc
     */
    SingleObjectDepthPass.prototype._iGetVertexCode = function () {
        var code;
        // offset
        code = "mul vt7, vt1, vc4.x	\n" + "add vt7, vt7, vt0\n" + "mov vt7.w, vt0.w\n";
        // project
        code += "m44 vt2, vt7, vc0\n" + "mov op, vt2\n";
        // perspective divide
        code += "div v0, vt2, vt2.w\n";
        return code;
    };
    /**
     * @inheritDoc
     */
    SingleObjectDepthPass.prototype._iGetFragmentCode = function (shaderObject, registerCache, sharedRegisters) {
        var code = "";
        // encode float -> rgba
        code += "mul ft0, fc0, v0.z\n" + "frc ft0, ft0\n" + "mul ft1, ft0.yzww, fc1\n" + "sub ft0, ft0, ft1\n" + "mov oc, ft0\n";
        return code;
    };
    /**
     * Gets the depth maps rendered for this object from all lights.
     * @param renderable The renderable for which to retrieve the depth maps.
     * @param stage3DProxy The Stage3DProxy object currently used for rendering.
     * @return A list of depth map textures for all supported lights.
     */
    SingleObjectDepthPass.prototype._iGetDepthMap = function (renderable) {
        return this._textures[renderable.materialOwner.id];
    };
    /**
     * Retrieves the depth map projection maps for all lights.
     * @param renderable The renderable for which to retrieve the projection maps.
     * @return A list of projection maps for all supported lights.
     */
    SingleObjectDepthPass.prototype._iGetProjection = function (renderable) {
        return this._projections[renderable.materialOwner.id];
    };
    /**
     * @inheritDoc
     */
    SingleObjectDepthPass.prototype._iRender = function (pass, renderable, stage, camera, viewProjection) {
        var matrix;
        var context = stage.context;
        var len /*uint*/;
        var light;
        var lights = this._pLightPicker.allPickedLights;
        var rId = renderable.materialOwner.id;
        if (!this._textures[rId])
            this._textures[rId] = new RenderTexture(this._textureSize, this._textureSize);
        if (!this._projections[rId])
            this._projections[rId] = new Matrix3D();
        len = lights.length;
        // local position = enough
        light = lights[0];
        matrix = light.iGetObjectProjectionMatrix(renderable.sourceEntity, camera, this._projections[rId]);
        stage.setRenderTarget(this._textures[rId], true);
        context.clear(1.0, 1.0, 1.0);
        context.setProgramConstantsFromMatrix(ContextGLProgramType.VERTEX, 0, matrix, true);
        context.setProgramConstantsFromArray(ContextGLProgramType.FRAGMENT, 0, this._enc, 2);
        stage.activateBuffer(0, renderable.getVertexData(TriangleSubGeometry.POSITION_DATA), renderable.getVertexOffset(TriangleSubGeometry.POSITION_DATA), TriangleSubGeometry.POSITION_FORMAT);
        stage.activateBuffer(1, renderable.getVertexData(TriangleSubGeometry.NORMAL_DATA), renderable.getVertexOffset(TriangleSubGeometry.NORMAL_DATA), TriangleSubGeometry.NORMAL_FORMAT);
        context.drawTriangles(stage.getIndexBuffer(renderable.getIndexData()), 0, renderable.numTriangles);
    };
    /**
     * @inheritDoc
     */
    SingleObjectDepthPass.prototype._iActivate = function (pass, renderer, camera) {
        if (this._projectionTexturesInvalid)
            this.updateProjectionTextures();
        // never scale
        _super.prototype._iActivate.call(this, pass, renderer, camera);
        renderer.context.setProgramConstantsFromArray(ContextGLProgramType.VERTEX, 4, this._polyOffset, 1);
    };
    return SingleObjectDepthPass;
})(MaterialPassBase);
module.exports = SingleObjectDepthPass;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9tYXRlcmlhbHMvcGFzc2VzL3NpbmdsZW9iamVjdGRlcHRocGFzcy50cyJdLCJuYW1lcyI6WyJTaW5nbGVPYmplY3REZXB0aFBhc3MiLCJTaW5nbGVPYmplY3REZXB0aFBhc3MuY29uc3RydWN0b3IiLCJTaW5nbGVPYmplY3REZXB0aFBhc3MudGV4dHVyZVNpemUiLCJTaW5nbGVPYmplY3REZXB0aFBhc3MucG9seU9mZnNldCIsIlNpbmdsZU9iamVjdERlcHRoUGFzcy5kaXNwb3NlIiwiU2luZ2xlT2JqZWN0RGVwdGhQYXNzLnVwZGF0ZVByb2plY3Rpb25UZXh0dXJlcyIsIlNpbmdsZU9iamVjdERlcHRoUGFzcy5faUdldFZlcnRleENvZGUiLCJTaW5nbGVPYmplY3REZXB0aFBhc3MuX2lHZXRGcmFnbWVudENvZGUiLCJTaW5nbGVPYmplY3REZXB0aFBhc3MuX2lHZXREZXB0aE1hcCIsIlNpbmdsZU9iamVjdERlcHRoUGFzcy5faUdldFByb2plY3Rpb24iLCJTaW5nbGVPYmplY3REZXB0aFBhc3MuX2lSZW5kZXIiLCJTaW5nbGVPYmplY3REZXB0aFBhc3MuX2lBY3RpdmF0ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBTyxRQUFRLFdBQWlCLCtCQUErQixDQUFDLENBQUM7QUFDakUsSUFBTyxhQUFhLFdBQWUsd0NBQXdDLENBQUMsQ0FBQztBQUc3RSxJQUFPLG1CQUFtQixXQUFjLDZDQUE2QyxDQUFDLENBQUM7QUFJdkYsSUFBTyxvQkFBb0IsV0FBYyw4Q0FBOEMsQ0FBQyxDQUFDO0FBVXpGLElBQU8sZ0JBQWdCLFdBQWUseURBQXlELENBQUMsQ0FBQztBQUdqRyxBQUlBOzs7R0FERztJQUNHLHFCQUFxQjtJQUFTQSxVQUE5QkEscUJBQXFCQSxVQUF5QkE7SUFtQ25EQTs7T0FFR0E7SUFDSEEsU0F0Q0tBLHFCQUFxQkE7UUF3Q3pCQyxpQkFBT0EsQ0FBQ0E7UUFwQ0RBLGlCQUFZQSxHQUFtQkEsR0FBR0EsQ0FB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QUlBLENBQUNBLFdBQVdBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO0lBQ3BHQSxDQUFDQTtJQUNGWCw0QkFBQ0E7QUFBREEsQ0EzTEEsQUEyTENBLEVBM0xtQyxnQkFBZ0IsRUEyTG5EO0FBRUQsQUFBK0IsaUJBQXRCLHFCQUFxQixDQUFDIiwiZmlsZSI6Im1hdGVyaWFscy9wYXNzZXMvU2luZ2xlT2JqZWN0RGVwdGhQYXNzLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNYXRyaXgzRFx0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2dlb20vTWF0cml4M0RcIik7XG5pbXBvcnQgUmVuZGVyVGV4dHVyZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvdGV4dHVyZXMvUmVuZGVyVGV4dHVyZVwiKTtcblxuaW1wb3J0IExpZ2h0QmFzZVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9iYXNlL0xpZ2h0QmFzZVwiKTtcbmltcG9ydCBUcmlhbmdsZVN1Ykdlb21ldHJ5XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvYmFzZS9UcmlhbmdsZVN1Ykdlb21ldHJ5XCIpO1xuaW1wb3J0IENhbWVyYVx0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2VudGl0aWVzL0NhbWVyYVwiKTtcbmltcG9ydCBNYXRlcmlhbEJhc2VcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvbWF0ZXJpYWxzL01hdGVyaWFsQmFzZVwiKTtcblxuaW1wb3J0IENvbnRleHRHTFByb2dyYW1UeXBlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYmFzZS9Db250ZXh0R0xQcm9ncmFtVHlwZVwiKTtcbmltcG9ydCBJQ29udGV4dEdMXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvSUNvbnRleHRHTFwiKTtcbmltcG9ydCBTdGFnZVx0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvU3RhZ2VcIik7XG5cbmltcG9ydCBNYXRlcmlhbFBhc3NEYXRhXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9wb29sL01hdGVyaWFsUGFzc0RhdGFcIik7XG5pbXBvcnQgUmVuZGVyYWJsZUJhc2VcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL3Bvb2wvUmVuZGVyYWJsZUJhc2VcIik7XG5pbXBvcnQgTWV0aG9kVk9cdFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9tYXRlcmlhbHMvY29tcGlsYXRpb24vTWV0aG9kVk9cIik7XG5pbXBvcnQgU2hhZGVyT2JqZWN0QmFzZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvbWF0ZXJpYWxzL2NvbXBpbGF0aW9uL1NoYWRlck9iamVjdEJhc2VcIik7XG5pbXBvcnQgU2hhZGVyUmVnaXN0ZXJDYWNoZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL21hdGVyaWFscy9jb21waWxhdGlvbi9TaGFkZXJSZWdpc3RlckNhY2hlXCIpO1xuaW1wb3J0IFNoYWRlclJlZ2lzdGVyRGF0YVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL21hdGVyaWFscy9jb21waWxhdGlvbi9TaGFkZXJSZWdpc3RlckRhdGFcIik7XG5pbXBvcnQgTWF0ZXJpYWxQYXNzQmFzZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvbWF0ZXJpYWxzL3Bhc3Nlcy9NYXRlcmlhbFBhc3NCYXNlXCIpO1xuaW1wb3J0IFJlbmRlcmVyQmFzZVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9yZW5kZXIvUmVuZGVyZXJCYXNlXCIpO1xuXG4vKipcbiAqIFRoZSBTaW5nbGVPYmplY3REZXB0aFBhc3MgcHJvdmlkZXMgYSBtYXRlcmlhbCBwYXNzIHRoYXQgcmVuZGVycyBhIHNpbmdsZSBvYmplY3QgdG8gYSBkZXB0aCBtYXAgZnJvbSB0aGUgcG9pbnRcbiAqIG9mIHZpZXcgZnJvbSBhIGxpZ2h0LlxuICovXG5jbGFzcyBTaW5nbGVPYmplY3REZXB0aFBhc3MgZXh0ZW5kcyBNYXRlcmlhbFBhc3NCYXNlXG57XG5cdHByaXZhdGUgX3RleHR1cmVzOk9iamVjdDtcblx0cHJpdmF0ZSBfcHJvamVjdGlvbnM6T2JqZWN0O1xuXHRwcml2YXRlIF90ZXh0dXJlU2l6ZTpudW1iZXIgLyp1aW50Ki8gPSA1MTI7XG5cdHByaXZhdGUgX3BvbHlPZmZzZXQ6QXJyYXk8bnVtYmVyPiA9IEFycmF5PG51bWJlcj4oMTUsIDAsIDAsIDApO1xuXHRwcml2YXRlIF9lbmM6QXJyYXk8bnVtYmVyPjtcblx0cHJpdmF0ZSBfcHJvamVjdGlvblRleHR1cmVzSW52YWxpZDpCb29sZWFuID0gdHJ1ZTtcblxuXHQvKipcblx0ICogVGhlIHNpemUgb2YgdGhlIGRlcHRoIG1hcCB0ZXh0dXJlIHRvIHJlbmRlciB0by5cblx0ICovXG5cdHB1YmxpYyBnZXQgdGV4dHVyZVNpemUoKTpudW1iZXJcblx0e1xuXHRcdHJldHVybiB0aGlzLl90ZXh0dXJlU2l6ZTtcblx0fVxuXG5cdHB1YmxpYyBzZXQgdGV4dHVyZVNpemUodmFsdWU6bnVtYmVyKVxuXHR7XG5cdFx0dGhpcy5fdGV4dHVyZVNpemUgPSB2YWx1ZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgYW1vdW50IGJ5IHdoaWNoIHRoZSByZW5kZXJlZCBvYmplY3Qgd2lsbCBiZSBpbmZsYXRlZCwgdG8gcHJldmVudCBkZXB0aCBtYXAgcm91bmRpbmcgZXJyb3JzLlxuXHQgKi9cblx0cHVibGljIGdldCBwb2x5T2Zmc2V0KCk6bnVtYmVyXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5fcG9seU9mZnNldFswXTtcblx0fVxuXG5cdHB1YmxpYyBzZXQgcG9seU9mZnNldCh2YWx1ZTpudW1iZXIpXG5cdHtcblx0XHR0aGlzLl9wb2x5T2Zmc2V0WzBdID0gdmFsdWU7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIG5ldyBTaW5nbGVPYmplY3REZXB0aFBhc3Mgb2JqZWN0LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoKVxuXHR7XG5cdFx0c3VwZXIoKTtcblxuXHRcdC8vdGhpcy5fcE51bVVzZWRTdHJlYW1zID0gMjtcblx0XHQvL3RoaXMuX3BOdW1Vc2VkVmVydGV4Q29uc3RhbnRzID0gNztcblx0XHQvL3RoaXMuX2VuYyA9IEFycmF5PG51bWJlcj4oMS4wLCAyNTUuMCwgNjUwMjUuMCwgMTY1ODEzNzUuMCwgMS4wLzI1NS4wLCAxLjAvMjU1LjAsIDEuMC8yNTUuMCwgMC4wKTtcblx0XHQvL1xuXHRcdC8vdGhpcy5fcEFuaW1hdGFibGVBdHRyaWJ1dGVzID0gQXJyYXk8c3RyaW5nPihcInZhMFwiLCBcInZhMVwiKTtcblx0XHQvL3RoaXMuX3BBbmltYXRpb25UYXJnZXRSZWdpc3RlcnMgPSBBcnJheTxzdHJpbmc+KFwidnQwXCIsIFwidnQxXCIpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRwdWJsaWMgZGlzcG9zZSgpXG5cdHtcblx0XHRpZiAodGhpcy5fdGV4dHVyZXMpIHtcblx0XHRcdGZvciAodmFyIGtleSBpbiB0aGlzLl90ZXh0dXJlcykge1xuXHRcdFx0XHR2YXIgdGV4dHVyZTpSZW5kZXJUZXh0dXJlID0gdGhpcy5fdGV4dHVyZXNba2V5XTtcblx0XHRcdFx0dGV4dHVyZS5kaXNwb3NlKCk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl90ZXh0dXJlcyA9IG51bGw7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgdGhlIHByb2plY3Rpb24gdGV4dHVyZXMgdXNlZCB0byBjb250YWluIHRoZSBkZXB0aCByZW5kZXJzLlxuXHQgKi9cblx0cHJpdmF0ZSB1cGRhdGVQcm9qZWN0aW9uVGV4dHVyZXMoKVxuXHR7XG5cdFx0aWYgKHRoaXMuX3RleHR1cmVzKSB7XG5cdFx0XHRmb3IgKHZhciBrZXkgaW4gdGhpcy5fdGV4dHVyZXMpIHtcblx0XHRcdFx0dmFyIHRleHR1cmU6UmVuZGVyVGV4dHVyZSA9IHRoaXMuX3RleHR1cmVzW2tleV07XG5cdFx0XHRcdHRleHR1cmUuZGlzcG9zZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMuX3RleHR1cmVzID0gbmV3IE9iamVjdCgpO1xuXHRcdHRoaXMuX3Byb2plY3Rpb25zID0gbmV3IE9iamVjdCgpO1xuXHRcdHRoaXMuX3Byb2plY3Rpb25UZXh0dXJlc0ludmFsaWQgPSBmYWxzZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIF9pR2V0VmVydGV4Q29kZSgpOnN0cmluZ1xuXHR7XG5cdFx0dmFyIGNvZGU6c3RyaW5nO1xuXHRcdC8vIG9mZnNldFxuXHRcdGNvZGUgPSBcIm11bCB2dDcsIHZ0MSwgdmM0LnhcdFxcblwiICtcblx0XHRcdFx0XCJhZGQgdnQ3LCB2dDcsIHZ0MFxcblwiICtcblx0XHRcdFx0XCJtb3YgdnQ3LncsIHZ0MC53XFxuXCI7XG5cdFx0Ly8gcHJvamVjdFxuXHRcdGNvZGUgKz0gXCJtNDQgdnQyLCB2dDcsIHZjMFxcblwiICtcblx0XHRcdFx0XCJtb3Ygb3AsIHZ0MlxcblwiO1xuXG5cdFx0Ly8gcGVyc3BlY3RpdmUgZGl2aWRlXG5cdFx0Y29kZSArPSBcImRpdiB2MCwgdnQyLCB2dDIud1xcblwiO1xuXG5cdFx0cmV0dXJuIGNvZGU7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHB1YmxpYyBfaUdldEZyYWdtZW50Q29kZShzaGFkZXJPYmplY3Q6U2hhZGVyT2JqZWN0QmFzZSwgcmVnaXN0ZXJDYWNoZTpTaGFkZXJSZWdpc3RlckNhY2hlLCBzaGFyZWRSZWdpc3RlcnM6U2hhZGVyUmVnaXN0ZXJEYXRhKTpzdHJpbmdcblx0e1xuXHRcdHZhciBjb2RlOnN0cmluZyA9IFwiXCI7XG5cblx0XHQvLyBlbmNvZGUgZmxvYXQgLT4gcmdiYVxuXHRcdGNvZGUgKz0gXCJtdWwgZnQwLCBmYzAsIHYwLnpcXG5cIiArXG5cdFx0XHRcdFwiZnJjIGZ0MCwgZnQwXFxuXCIgK1xuXHRcdFx0XHRcIm11bCBmdDEsIGZ0MC55end3LCBmYzFcXG5cIiArXG5cdFx0XHRcdFwic3ViIGZ0MCwgZnQwLCBmdDFcXG5cIiArXG5cdFx0XHRcdFwibW92IG9jLCBmdDBcXG5cIjtcblxuXHRcdHJldHVybiBjb2RlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIGRlcHRoIG1hcHMgcmVuZGVyZWQgZm9yIHRoaXMgb2JqZWN0IGZyb20gYWxsIGxpZ2h0cy5cblx0ICogQHBhcmFtIHJlbmRlcmFibGUgVGhlIHJlbmRlcmFibGUgZm9yIHdoaWNoIHRvIHJldHJpZXZlIHRoZSBkZXB0aCBtYXBzLlxuXHQgKiBAcGFyYW0gc3RhZ2UzRFByb3h5IFRoZSBTdGFnZTNEUHJveHkgb2JqZWN0IGN1cnJlbnRseSB1c2VkIGZvciByZW5kZXJpbmcuXG5cdCAqIEByZXR1cm4gQSBsaXN0IG9mIGRlcHRoIG1hcCB0ZXh0dXJlcyBmb3IgYWxsIHN1cHBvcnRlZCBsaWdodHMuXG5cdCAqL1xuXHRwdWJsaWMgX2lHZXREZXB0aE1hcChyZW5kZXJhYmxlOlJlbmRlcmFibGVCYXNlKTpSZW5kZXJUZXh0dXJlXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5fdGV4dHVyZXNbcmVuZGVyYWJsZS5tYXRlcmlhbE93bmVyLmlkXTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXRyaWV2ZXMgdGhlIGRlcHRoIG1hcCBwcm9qZWN0aW9uIG1hcHMgZm9yIGFsbCBsaWdodHMuXG5cdCAqIEBwYXJhbSByZW5kZXJhYmxlIFRoZSByZW5kZXJhYmxlIGZvciB3aGljaCB0byByZXRyaWV2ZSB0aGUgcHJvamVjdGlvbiBtYXBzLlxuXHQgKiBAcmV0dXJuIEEgbGlzdCBvZiBwcm9qZWN0aW9uIG1hcHMgZm9yIGFsbCBzdXBwb3J0ZWQgbGlnaHRzLlxuXHQgKi9cblx0cHVibGljIF9pR2V0UHJvamVjdGlvbihyZW5kZXJhYmxlOlJlbmRlcmFibGVCYXNlKTpNYXRyaXgzRFxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX3Byb2plY3Rpb25zW3JlbmRlcmFibGUubWF0ZXJpYWxPd25lci5pZF07XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHB1YmxpYyBfaVJlbmRlcihwYXNzOk1hdGVyaWFsUGFzc0RhdGEsIHJlbmRlcmFibGU6UmVuZGVyYWJsZUJhc2UsIHN0YWdlOlN0YWdlLCBjYW1lcmE6Q2FtZXJhLCB2aWV3UHJvamVjdGlvbjpNYXRyaXgzRClcblx0e1xuXHRcdHZhciBtYXRyaXg6TWF0cml4M0Q7XG5cdFx0dmFyIGNvbnRleHQ6SUNvbnRleHRHTCA9IHN0YWdlLmNvbnRleHQ7XG5cdFx0dmFyIGxlbjpudW1iZXIgLyp1aW50Ki87XG5cdFx0dmFyIGxpZ2h0OkxpZ2h0QmFzZTtcblx0XHR2YXIgbGlnaHRzOkFycmF5PExpZ2h0QmFzZT4gPSB0aGlzLl9wTGlnaHRQaWNrZXIuYWxsUGlja2VkTGlnaHRzO1xuXHRcdHZhciBySWQ6bnVtYmVyID0gcmVuZGVyYWJsZS5tYXRlcmlhbE93bmVyLmlkO1xuXG5cdFx0aWYgKCF0aGlzLl90ZXh0dXJlc1tySWRdKVxuXHRcdFx0dGhpcy5fdGV4dHVyZXNbcklkXSA9IG5ldyBSZW5kZXJUZXh0dXJlKHRoaXMuX3RleHR1cmVTaXplLCB0aGlzLl90ZXh0dXJlU2l6ZSk7XG5cblx0XHRpZiAoIXRoaXMuX3Byb2plY3Rpb25zW3JJZF0pXG5cdFx0XHR0aGlzLl9wcm9qZWN0aW9uc1tySWRdID0gbmV3IE1hdHJpeDNEKCk7XG5cblx0XHRsZW4gPSBsaWdodHMubGVuZ3RoO1xuXG5cdFx0Ly8gbG9jYWwgcG9zaXRpb24gPSBlbm91Z2hcblx0XHRsaWdodCA9IGxpZ2h0c1swXTtcblxuXHRcdG1hdHJpeCA9IGxpZ2h0LmlHZXRPYmplY3RQcm9qZWN0aW9uTWF0cml4KHJlbmRlcmFibGUuc291cmNlRW50aXR5LCBjYW1lcmEsIHRoaXMuX3Byb2plY3Rpb25zW3JJZF0pO1xuXG5cdFx0c3RhZ2Uuc2V0UmVuZGVyVGFyZ2V0KHRoaXMuX3RleHR1cmVzW3JJZF0sIHRydWUpO1xuXHRcdGNvbnRleHQuY2xlYXIoMS4wLCAxLjAsIDEuMCk7XG5cdFx0Y29udGV4dC5zZXRQcm9ncmFtQ29uc3RhbnRzRnJvbU1hdHJpeChDb250ZXh0R0xQcm9ncmFtVHlwZS5WRVJURVgsIDAsIG1hdHJpeCwgdHJ1ZSk7XG5cdFx0Y29udGV4dC5zZXRQcm9ncmFtQ29uc3RhbnRzRnJvbUFycmF5KENvbnRleHRHTFByb2dyYW1UeXBlLkZSQUdNRU5ULCAwLCB0aGlzLl9lbmMsIDIpO1xuXG5cdFx0c3RhZ2UuYWN0aXZhdGVCdWZmZXIoMCwgcmVuZGVyYWJsZS5nZXRWZXJ0ZXhEYXRhKFRyaWFuZ2xlU3ViR2VvbWV0cnkuUE9TSVRJT05fREFUQSksIHJlbmRlcmFibGUuZ2V0VmVydGV4T2Zmc2V0KFRyaWFuZ2xlU3ViR2VvbWV0cnkuUE9TSVRJT05fREFUQSksIFRyaWFuZ2xlU3ViR2VvbWV0cnkuUE9TSVRJT05fRk9STUFUKTtcblx0XHRzdGFnZS5hY3RpdmF0ZUJ1ZmZlcigxLCByZW5kZXJhYmxlLmdldFZlcnRleERhdGEoVHJpYW5nbGVTdWJHZW9tZXRyeS5OT1JNQUxfREFUQSksIHJlbmRlcmFibGUuZ2V0VmVydGV4T2Zmc2V0KFRyaWFuZ2xlU3ViR2VvbWV0cnkuTk9STUFMX0RBVEEpLCBUcmlhbmdsZVN1Ykdlb21ldHJ5Lk5PUk1BTF9GT1JNQVQpO1xuXHRcdGNvbnRleHQuZHJhd1RyaWFuZ2xlcyhzdGFnZS5nZXRJbmRleEJ1ZmZlcihyZW5kZXJhYmxlLmdldEluZGV4RGF0YSgpKSwgMCwgcmVuZGVyYWJsZS5udW1UcmlhbmdsZXMpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRwdWJsaWMgX2lBY3RpdmF0ZShwYXNzOk1hdGVyaWFsUGFzc0RhdGEsIHJlbmRlcmVyOlJlbmRlcmVyQmFzZSwgY2FtZXJhOkNhbWVyYSlcblx0e1xuXHRcdGlmICh0aGlzLl9wcm9qZWN0aW9uVGV4dHVyZXNJbnZhbGlkKVxuXHRcdFx0dGhpcy51cGRhdGVQcm9qZWN0aW9uVGV4dHVyZXMoKTtcblxuXHRcdC8vIG5ldmVyIHNjYWxlXG5cdFx0c3VwZXIuX2lBY3RpdmF0ZShwYXNzLCByZW5kZXJlciwgY2FtZXJhKTtcblxuXHRcdHJlbmRlcmVyLmNvbnRleHQuc2V0UHJvZ3JhbUNvbnN0YW50c0Zyb21BcnJheShDb250ZXh0R0xQcm9ncmFtVHlwZS5WRVJURVgsIDQsIHRoaXMuX3BvbHlPZmZzZXQsIDEpO1xuXHR9XG59XG5cbmV4cG9ydCA9IFNpbmdsZU9iamVjdERlcHRoUGFzczsiXX0=