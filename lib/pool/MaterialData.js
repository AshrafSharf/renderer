var MaterialPassDataPool = require("awayjs-renderergl/lib/pool/MaterialPassDataPool");
/**
 *
 * @class away.pool.MaterialData
 */
var MaterialData = (function () {
    function MaterialData(pool, material) {
        this.invalidAnimation = true;
        this._pool = pool;
        this.material = material;
        this._materialPassDataPool = new MaterialPassDataPool(material);
    }
    MaterialData.prototype.getMaterialPass = function (materialPass, profile) {
        var materialPassData = this._materialPassDataPool.getItem(materialPass);
        if (!materialPassData.shaderObject) {
            materialPassData.shaderObject = materialPass.createShaderObject(profile);
            materialPassData.invalid = true;
        }
        if (materialPassData.invalid) {
            materialPassData.invalid = false;
            var compiler = materialPassData.shaderObject.createCompiler(this.material, materialPass);
            compiler.compile();
            materialPassData.shadedTarget = compiler.shadedTarget;
            materialPassData.vertexCode = compiler.vertexCode;
            materialPassData.fragmentCode = compiler.fragmentCode;
            materialPassData.postAnimationFragmentCode = compiler.postAnimationFragmentCode;
            materialPassData.key = "";
        }
        return materialPassData;
    };
    MaterialData.prototype.getMaterialPasses = function (profile) {
        if (this._passes == null) {
            var passes = this.material._iScreenPasses;
            var numPasses = passes.length;
            //reset the material passes in MaterialData
            this._passes = new Array(numPasses);
            for (var i = 0; i < numPasses; i++)
                this._passes[i] = this.getMaterialPass(passes[i], profile);
        }
        return this._passes;
    };
    /**
     *
     */
    MaterialData.prototype.dispose = function () {
        this._materialPassDataPool.disposePool();
        this._materialPassDataPool = null;
        this._pool.disposeItem(this.material);
        this._passes = null;
    };
    /**
     *
     */
    MaterialData.prototype.invalidateMaterial = function () {
        this._passes = null;
        this.invalidateAnimation();
    };
    /**
     *
     */
    MaterialData.prototype.invalidateAnimation = function () {
        this.invalidAnimation = true;
    };
    return MaterialData;
})();
module.exports = MaterialData;

//# sourceMappingURL=data:application/json;base64,