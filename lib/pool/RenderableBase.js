var AbstractMethodError = require("awayjs-core/lib/errors/AbstractMethodError");
var SubGeometryBase = require("awayjs-display/lib/base/SubGeometryBase");
var TriangleSubGeometry = require("awayjs-display/lib/base/TriangleSubGeometry");
var SubGeometryEvent = require("awayjs-display/lib/events/SubGeometryEvent");
var IndexDataPool = require("awayjs-stagegl/lib/pool/IndexDataPool");
var VertexDataPool = require("awayjs-stagegl/lib/pool/VertexDataPool");
/**
 * @class RenderableListItem
 */
var RenderableBase = (function () {
    /**
     *
     * @param sourceEntity
     * @param renderableOwner
     * @param subGeometry
     * @param animationSubGeometry
     */
    function RenderableBase(pool, sourceEntity, renderableOwner, renderObjectOwner, stage, level, indexOffset) {
        var _this = this;
        if (level === void 0) { level = 0; }
        if (indexOffset === void 0) { indexOffset = 0; }
        this._geometryDirty = true;
        this._indexDataDirty = true;
        this._vertexData = new Object();
        this._pVertexDataDirty = new Object();
        this._vertexOffset = new Object();
        this._onIndicesUpdatedDelegate = function (event) { return _this._onIndicesUpdated(event); };
        this._onVerticesUpdatedDelegate = function (event) { return _this._onVerticesUpdated(event); };
        //store a reference to the pool for later disposal
        this._pool = pool;
        this._stage = stage;
        //reference to level of overflow
        this._level = level;
        //reference to the offset on indices (if this is an overflow renderable)
        this._indexOffset = indexOffset;
        this.sourceEntity = sourceEntity;
        this.renderableOwner = renderableOwner;
        this.renderObjectOwner = renderObjectOwner;
    }
    Object.defineProperty(RenderableBase.prototype, "overflow", {
        /**
         *
         */
        get: function () {
            if (this._indexDataDirty)
                this._updateIndexData();
            return this._overflow;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RenderableBase.prototype, "numTriangles", {
        /**
         *
         */
        get: function () {
            return this._numTriangles;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *
     */
    RenderableBase.prototype.getIndexData = function () {
        if (this._indexDataDirty)
            this._updateIndexData();
        return this._indexData;
    };
    /**
     *
     */
    RenderableBase.prototype.getVertexData = function (dataType) {
        if (this._indexDataDirty)
            this._updateIndexData();
        if (this._pVertexDataDirty[dataType])
            this._updateVertexData(dataType);
        return this._vertexData[this._concatenateArrays ? TriangleSubGeometry.VERTEX_DATA : dataType];
    };
    /**
     *
     */
    RenderableBase.prototype.getVertexOffset = function (dataType) {
        if (this._indexDataDirty)
            this._updateIndexData();
        if (this._pVertexDataDirty[dataType])
            this._updateVertexData(dataType);
        return this._vertexOffset[dataType];
    };
    RenderableBase.prototype.dispose = function () {
        this._pool.disposeItem(this.renderableOwner);
        this._indexData.dispose();
        this._indexData = null;
        for (var dataType in this._vertexData) {
            this._vertexData[dataType].dispose();
            this._vertexData[dataType] = null;
        }
        if (this._overflow) {
            this._overflow.dispose();
            this._overflow = null;
        }
    };
    RenderableBase.prototype.invalidateGeometry = function () {
        this._geometryDirty = true;
        //invalidate indices
        if (this._level == 0)
            this._indexDataDirty = true;
        if (this._overflow)
            this._overflow.invalidateGeometry();
    };
    /**
     *
     */
    RenderableBase.prototype.invalidateIndexData = function () {
        this._indexDataDirty = true;
    };
    /**
     * //TODO
     *
     * @param dataType
     */
    RenderableBase.prototype.invalidateVertexData = function (dataType) {
        this._pVertexDataDirty[dataType] = true;
    };
    RenderableBase.prototype._pGetSubGeometry = function () {
        throw new AbstractMethodError();
    };
    RenderableBase._iGetVertexCode = function (shaderObject, registerCache, sharedRegisters) {
        return "";
    };
    RenderableBase._iGetFragmentCode = function (shaderObject, registerCache, sharedRegisters) {
        return "";
    };
    /**
     * //TODO
     *
     * @param subGeometry
     * @param offset
     * @internal
     */
    RenderableBase.prototype._iFillIndexData = function (indexOffset) {
        if (this._geometryDirty)
            this._updateGeometry();
        this._indexData = IndexDataPool.getItem(this._subGeometry, this._level, indexOffset);
        this._numTriangles = this._indexData.data.length / 3;
        indexOffset = this._indexData.offset;
        //check if there is more to split
        if (indexOffset < this._subGeometry.indices.length) {
            if (!this._overflow)
                this._overflow = this._pGetOverflowRenderable(indexOffset);
            this._overflow._iFillIndexData(indexOffset);
        }
        else if (this._overflow) {
            this._overflow.dispose();
            this._overflow = null;
        }
    };
    RenderableBase.prototype._pGetOverflowRenderable = function (indexOffset) {
        throw new AbstractMethodError();
    };
    /**
     * Sets the render state for the pass that is independent of the rendered object. This needs to be called before
     * calling renderPass. Before activating a pass, the previously used pass needs to be deactivated.
     * @param stage The Stage object which is currently used for rendering.
     * @param camera The camera from which the scene is viewed.
     * @private
     */
    RenderableBase.prototype._iActivate = function (shader, camera) {
        this.renderObject._iActivate(shader, camera);
    };
    /**
     * Renders an object to the current render target.
     *
     * @private
     */
    RenderableBase.prototype._iRender = function (shader, camera, viewProjection) {
        this.renderObject._iRender(this, shader, camera, viewProjection);
    };
    /**
     * Clears the render state for the pass. This needs to be called before activating another pass.
     * @param stage The Stage used for rendering
     *
     * @private
     */
    RenderableBase.prototype._iDeactivate = function (shader) {
        this.renderObject._iDeactivate(shader);
    };
    /**
     * //TODO
     *
     * @private
     */
    RenderableBase.prototype._updateGeometry = function () {
        if (this._subGeometry) {
            if (this._level == 0)
                this._subGeometry.removeEventListener(SubGeometryEvent.INDICES_UPDATED, this._onIndicesUpdatedDelegate);
            this._subGeometry.removeEventListener(SubGeometryEvent.VERTICES_UPDATED, this._onVerticesUpdatedDelegate);
        }
        this._subGeometry = this._pGetSubGeometry();
        this._concatenateArrays = this._subGeometry.concatenateArrays;
        if (this._subGeometry) {
            if (this._level == 0)
                this._subGeometry.addEventListener(SubGeometryEvent.INDICES_UPDATED, this._onIndicesUpdatedDelegate);
            this._subGeometry.addEventListener(SubGeometryEvent.VERTICES_UPDATED, this._onVerticesUpdatedDelegate);
        }
        //dispose
        //			if (this._indexData) {
        //				this._indexData.dispose(); //TODO where is a good place to dispose?
        //				this._indexData = null;
        //			}
        //			for (var dataType in this._vertexData) {
        //				(<VertexData> this._vertexData[dataType]).dispose(); //TODO where is a good place to dispose?
        //				this._vertexData[dataType] = null;
        //			}
        this._geometryDirty = false;
        //specific vertex data types have to be invalidated in the specific renderable
    };
    /**
     * //TODO
     *
     * @private
     */
    RenderableBase.prototype._updateIndexData = function () {
        this._iFillIndexData(this._indexOffset);
        this._indexDataDirty = false;
    };
    /**
     * //TODO
     *
     * @param dataType
     * @private
     */
    RenderableBase.prototype._updateVertexData = function (dataType) {
        this._vertexOffset[dataType] = this._subGeometry.getOffset(dataType);
        if (this._subGeometry.concatenateArrays)
            dataType = SubGeometryBase.VERTEX_DATA;
        this._vertexData[dataType] = VertexDataPool.getItem(this._subGeometry, this.getIndexData(), dataType);
        this._pVertexDataDirty[dataType] = false;
    };
    /**
     * //TODO
     *
     * @param event
     * @private
     */
    RenderableBase.prototype._onIndicesUpdated = function (event) {
        this.invalidateIndexData();
    };
    /**
     * //TODO
     *
     * @param event
     * @private
     */
    RenderableBase.prototype._onVerticesUpdated = function (event) {
        this._concatenateArrays = event.target.concatenateArrays;
        this.invalidateVertexData(event.dataType);
    };
    return RenderableBase;
})();
module.exports = RenderableBase;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9wb29sL3JlbmRlcmFibGViYXNlLnRzIl0sIm5hbWVzIjpbIlJlbmRlcmFibGVCYXNlIiwiUmVuZGVyYWJsZUJhc2UuY29uc3RydWN0b3IiLCJSZW5kZXJhYmxlQmFzZS5vdmVyZmxvdyIsIlJlbmRlcmFibGVCYXNlLm51bVRyaWFuZ2xlcyIsIlJlbmRlcmFibGVCYXNlLmdldEluZGV4RGF0YSIsIlJlbmRlcmFibGVCYXNlLmdldFZlcnRleERhdGEiLCJSZW5kZXJhYmxlQmFzZS5nZXRWZXJ0ZXhPZmZzZXQiLCJSZW5kZXJhYmxlQmFzZS5kaXNwb3NlIiwiUmVuZGVyYWJsZUJhc2UuaW52YWxpZGF0ZUdlb21ldHJ5IiwiUmVuZGVyYWJsZUJhc2UuaW52YWxpZGF0ZUluZGV4RGF0YSIsIlJlbmRlcmFibGVCYXNlLmludmFsaWRhdGVWZXJ0ZXhEYXRhIiwiUmVuZGVyYWJsZUJhc2UuX3BHZXRTdWJHZW9tZXRyeSIsIlJlbmRlcmFibGVCYXNlLl9pR2V0VmVydGV4Q29kZSIsIlJlbmRlcmFibGVCYXNlLl9pR2V0RnJhZ21lbnRDb2RlIiwiUmVuZGVyYWJsZUJhc2UuX2lGaWxsSW5kZXhEYXRhIiwiUmVuZGVyYWJsZUJhc2UuX3BHZXRPdmVyZmxvd1JlbmRlcmFibGUiLCJSZW5kZXJhYmxlQmFzZS5faUFjdGl2YXRlIiwiUmVuZGVyYWJsZUJhc2UuX2lSZW5kZXIiLCJSZW5kZXJhYmxlQmFzZS5faURlYWN0aXZhdGUiLCJSZW5kZXJhYmxlQmFzZS5fdXBkYXRlR2VvbWV0cnkiLCJSZW5kZXJhYmxlQmFzZS5fdXBkYXRlSW5kZXhEYXRhIiwiUmVuZGVyYWJsZUJhc2UuX3VwZGF0ZVZlcnRleERhdGEiLCJSZW5kZXJhYmxlQmFzZS5fb25JbmRpY2VzVXBkYXRlZCIsIlJlbmRlcmFibGVCYXNlLl9vblZlcnRpY2VzVXBkYXRlZCJdLCJtYXBwaW5ncyI6IkFBQ0EsSUFBTyxtQkFBbUIsV0FBYSw0Q0FBNEMsQ0FBQyxDQUFDO0FBSXJGLElBQU8sZUFBZSxXQUFjLHlDQUF5QyxDQUFDLENBQUM7QUFDL0UsSUFBTyxtQkFBbUIsV0FBYSw2Q0FBNkMsQ0FBQyxDQUFDO0FBSXRGLElBQU8sZ0JBQWdCLFdBQWMsNENBQTRDLENBQUMsQ0FBQztBQUtuRixJQUFPLGFBQWEsV0FBYyx1Q0FBdUMsQ0FBQyxDQUFDO0FBRTNFLElBQU8sY0FBYyxXQUFjLHdDQUF3QyxDQUFDLENBQUM7QUFTN0UsQUFHQTs7R0FERztJQUNHLGNBQWM7SUE2SW5CQTs7Ozs7O09BTUdBO0lBQ0hBLFNBcEpLQSxjQUFjQSxDQW9KUEEsSUFBbUJBLEVBQUVBLFlBQW9CQSxFQUFFQSxlQUFnQ0EsRUFBRUEsaUJBQW9DQSxFQUFFQSxLQUFXQSxFQUFFQSxLQUFnQkEsRUFBRUEsV0FBc0JBO1FBcEpyTEMsaUJBeVlDQTtRQXJQNElBLHFCQUFnQkEsR0FBaEJBLFNBQWdCQTtRQUFFQSwyQkFBc0JBLEdBQXRCQSxlQUFzQkE7UUE3STVLQSxtQkFBY0EsR0FBV0EsSUFBSUEsQ0FBQ0E7UUFFOUJBLG9CQUFlQSxHQUFXQSxJQUFJQSxDQUFDQTtRQUMvQkEsZ0JBQVdBLEdBQVVBLElBQUlBLE1BQU1BLEVBQUVBLENBQUNBO1FBQ25DQSxzQkFBaUJBLEdBQVVBLElBQUlBLE1BQU1BLEVBQUVBLENBQUNBO1FBQ3ZDQSxrQkFBYUEsR0FBVUEsSUFBSUEsTUFBTUEsRUFBRUEsQ0FBQ0E7UUEwSTNDQSxJQUFJQSxDQUFDQSx5QkFBeUJBLEdBQUdBLFVBQUNBLEtBQXNCQSxJQUFLQSxPQUFBQSxLQUFJQSxDQUFDQSxpQkFBaUJBLENBQUNBLEtBQUtBLENBQUNBLEVBQTdCQSxDQUE2QkEsQ0FBQ0E7UUFDM0ZBLElBQUlBLENBQUNBLDBCQUEwQkEsR0FBR0EsVUFBQ0EsS0FBc0JBLElBQUtBLE9BQUFBLEtBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsRUFBOUJBLENBQThCQSxDQUFDQTtRQUU3RkEsQUFDQUEsa0RBRGtEQTtRQUNsREEsSUFBSUEsQ0FBQ0EsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFDbEJBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLEtBQUtBLENBQUNBO1FBRXBCQSxBQUNBQSxnQ0FEZ0NBO1FBQ2hDQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxLQUFLQSxDQUFDQTtRQUVwQkEsQUFDQUEsd0VBRHdFQTtRQUN4RUEsSUFBSUEsQ0FBQ0EsWUFBWUEsR0FBR0EsV0FBV0EsQ0FBQ0E7UUFFaENBLElBQUlBLENBQUNBLFlBQVlBLEdBQUdBLFlBQVlBLENBQUNBO1FBRWpDQSxJQUFJQSxDQUFDQSxlQUFlQSxHQUFHQSxlQUFlQSxDQUFDQTtRQUV2Q0EsSUFBSUEsQ0FBQ0EsaUJBQWlCQSxHQUFHQSxpQkFBaUJBLENBQUNBO0lBQzVDQSxDQUFDQTtJQXZJREQsc0JBQVdBLG9DQUFRQTtRQUhuQkE7O1dBRUdBO2FBQ0hBO1lBRUNFLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLGVBQWVBLENBQUNBO2dCQUN4QkEsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxFQUFFQSxDQUFDQTtZQUV6QkEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0E7UUFDdkJBLENBQUNBOzs7T0FBQUY7SUFLREEsc0JBQVdBLHdDQUFZQTtRQUh2QkE7O1dBRUdBO2FBQ0hBO1lBRUNHLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBO1FBQzNCQSxDQUFDQTs7O09BQUFIO0lBdUREQTs7T0FFR0E7SUFDSUEscUNBQVlBLEdBQW5CQTtRQUVDSSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxlQUFlQSxDQUFDQTtZQUN4QkEsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxFQUFFQSxDQUFDQTtRQUV6QkEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0E7SUFDeEJBLENBQUNBO0lBRURKOztPQUVHQTtJQUNJQSxzQ0FBYUEsR0FBcEJBLFVBQXFCQSxRQUFlQTtRQUVuQ0ssRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZUFBZUEsQ0FBQ0E7WUFDeEJBLElBQUlBLENBQUNBLGdCQUFnQkEsRUFBRUEsQ0FBQ0E7UUFFekJBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7WUFDcENBLElBQUlBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7UUFFbENBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLElBQUlBLENBQUNBLGtCQUFrQkEsR0FBRUEsbUJBQW1CQSxDQUFDQSxXQUFXQSxHQUFHQSxRQUFRQSxDQUFDQSxDQUFBQTtJQUM3RkEsQ0FBQ0E7SUFFREw7O09BRUdBO0lBQ0lBLHdDQUFlQSxHQUF0QkEsVUFBdUJBLFFBQWVBO1FBRXJDTSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxlQUFlQSxDQUFDQTtZQUN4QkEsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxFQUFFQSxDQUFDQTtRQUV6QkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtZQUNwQ0EsSUFBSUEsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtRQUVsQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7SUFDckNBLENBQUNBO0lBK0JNTixnQ0FBT0EsR0FBZEE7UUFFQ08sSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsQ0FBQ0E7UUFFN0NBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBO1FBQzFCQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUV2QkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsUUFBUUEsSUFBSUEsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDekJBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLFFBQVFBLENBQUVBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBO1lBQ3BEQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxRQUFRQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUNuQ0EsQ0FBQ0E7UUFFREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDcEJBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBO1lBQ3pCQSxJQUFJQSxDQUFDQSxTQUFTQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUN2QkEsQ0FBQ0E7SUFDRkEsQ0FBQ0E7SUFFTVAsMkNBQWtCQSxHQUF6QkE7UUFFQ1EsSUFBSUEsQ0FBQ0EsY0FBY0EsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFFM0JBLEFBQ0FBLG9CQURvQkE7UUFDcEJBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLElBQUlBLENBQUNBLENBQUNBO1lBQ3BCQSxJQUFJQSxDQUFDQSxlQUFlQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUU3QkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0E7WUFDbEJBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLGtCQUFrQkEsRUFBRUEsQ0FBQ0E7SUFDdENBLENBQUNBO0lBRURSOztPQUVHQTtJQUNJQSw0Q0FBbUJBLEdBQTFCQTtRQUVDUyxJQUFJQSxDQUFDQSxlQUFlQSxHQUFHQSxJQUFJQSxDQUFDQTtJQUM3QkEsQ0FBQ0E7SUFFRFQ7Ozs7T0FJR0E7SUFDSUEsNkNBQW9CQSxHQUEzQkEsVUFBNEJBLFFBQWVBO1FBRTFDVSxJQUFJQSxDQUFDQSxpQkFBaUJBLENBQUNBLFFBQVFBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBO0lBQ3pDQSxDQUFDQTtJQUVNVix5Q0FBZ0JBLEdBQXZCQTtRQUVDVyxNQUFNQSxJQUFJQSxtQkFBbUJBLEVBQUVBLENBQUNBO0lBQ2pDQSxDQUFDQTtJQUVhWCw4QkFBZUEsR0FBN0JBLFVBQThCQSxZQUE2QkEsRUFBRUEsYUFBaUNBLEVBQUVBLGVBQWtDQTtRQUVqSVksTUFBTUEsQ0FBQ0EsRUFBRUEsQ0FBQ0E7SUFDWEEsQ0FBQ0E7SUFFYVosZ0NBQWlCQSxHQUEvQkEsVUFBZ0NBLFlBQTZCQSxFQUFFQSxhQUFpQ0EsRUFBRUEsZUFBa0NBO1FBRW5JYSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQTtJQUNYQSxDQUFDQTtJQUVEYjs7Ozs7O09BTUdBO0lBQ0lBLHdDQUFlQSxHQUF0QkEsVUFBdUJBLFdBQWtCQTtRQUV4Q2MsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0E7WUFDdkJBLElBQUlBLENBQUNBLGVBQWVBLEVBQUVBLENBQUNBO1FBRXhCQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxhQUFhQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxFQUFFQSxJQUFJQSxDQUFDQSxNQUFNQSxFQUFFQSxXQUFXQSxDQUFDQSxDQUFDQTtRQUVyRkEsSUFBSUEsQ0FBQ0EsYUFBYUEsR0FBR0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFbkRBLFdBQVdBLEdBQUdBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLE1BQU1BLENBQUNBO1FBRXJDQSxBQUNBQSxpQ0FEaUNBO1FBQ2pDQSxFQUFFQSxDQUFDQSxDQUFDQSxXQUFXQSxHQUFHQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxPQUFPQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNwREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0E7Z0JBQ25CQSxJQUFJQSxDQUFDQSxTQUFTQSxHQUFHQSxJQUFJQSxDQUFDQSx1QkFBdUJBLENBQUNBLFdBQVdBLENBQUNBLENBQUNBO1lBRTVEQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxlQUFlQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQTtRQUM3Q0EsQ0FBQ0E7UUFBQ0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDM0JBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBO1lBQ3pCQSxJQUFJQSxDQUFDQSxTQUFTQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUN2QkEsQ0FBQ0E7SUFDRkEsQ0FBQ0E7SUFFTWQsZ0RBQXVCQSxHQUE5QkEsVUFBK0JBLFdBQWtCQTtRQUVoRGUsTUFBTUEsSUFBSUEsbUJBQW1CQSxFQUFFQSxDQUFDQTtJQUNqQ0EsQ0FBQ0E7SUFFRGY7Ozs7OztPQU1HQTtJQUNJQSxtQ0FBVUEsR0FBakJBLFVBQWtCQSxNQUF1QkEsRUFBRUEsTUFBYUE7UUFFdkRnQixJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxVQUFVQSxDQUFDQSxNQUFNQSxFQUFFQSxNQUFNQSxDQUFDQSxDQUFDQTtJQUM5Q0EsQ0FBQ0E7SUFFRGhCOzs7O09BSUdBO0lBQ0lBLGlDQUFRQSxHQUFmQSxVQUFnQkEsTUFBdUJBLEVBQUVBLE1BQWFBLEVBQUVBLGNBQXVCQTtRQUU5RWlCLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLEVBQUVBLE1BQU1BLEVBQUVBLE1BQU1BLEVBQUVBLGNBQWNBLENBQUNBLENBQUNBO0lBQ2xFQSxDQUFDQTtJQUVEakI7Ozs7O09BS0dBO0lBQ0lBLHFDQUFZQSxHQUFuQkEsVUFBb0JBLE1BQXVCQTtRQUUxQ2tCLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLFlBQVlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO0lBQ3hDQSxDQUFDQTtJQUVEbEI7Ozs7T0FJR0E7SUFDS0Esd0NBQWVBLEdBQXZCQTtRQUVDbUIsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDdkJBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLElBQUlBLENBQUNBLENBQUNBO2dCQUNwQkEsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsbUJBQW1CQSxDQUFDQSxnQkFBZ0JBLENBQUNBLGVBQWVBLEVBQUVBLElBQUlBLENBQUNBLHlCQUF5QkEsQ0FBQ0EsQ0FBQ0E7WUFDekdBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLG1CQUFtQkEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxnQkFBZ0JBLEVBQUVBLElBQUlBLENBQUNBLDBCQUEwQkEsQ0FBQ0EsQ0FBQ0E7UUFDM0dBLENBQUNBO1FBRURBLElBQUlBLENBQUNBLFlBQVlBLEdBQUdBLElBQUlBLENBQUNBLGdCQUFnQkEsRUFBRUEsQ0FBQ0E7UUFFNUNBLElBQUlBLENBQUNBLGtCQUFrQkEsR0FBR0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsaUJBQWlCQSxDQUFDQTtRQUU5REEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDdkJBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLElBQUlBLENBQUNBLENBQUNBO2dCQUNwQkEsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxnQkFBZ0JBLENBQUNBLGVBQWVBLEVBQUVBLElBQUlBLENBQUNBLHlCQUF5QkEsQ0FBQ0EsQ0FBQ0E7WUFDdEdBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxnQkFBZ0JBLEVBQUVBLElBQUlBLENBQUNBLDBCQUEwQkEsQ0FBQ0EsQ0FBQ0E7UUFDeEdBLENBQUNBO1FBRURBLEFBV0FBLFNBWFNBO1FBQ1hBLDJCQUEyQkE7UUFDM0JBLHlFQUF5RUE7UUFDekVBLDZCQUE2QkE7UUFDN0JBLE1BQU1BO1FBRU5BLDZDQUE2Q0E7UUFDN0NBLG1HQUFtR0E7UUFDbkdBLHdDQUF3Q0E7UUFDeENBLE1BQU1BO1FBRUpBLElBQUlBLENBQUNBLGNBQWNBLEdBQUdBLEtBQUtBLENBQUNBO1FBRTVCQSw4RUFBOEVBO0lBQy9FQSxDQUFDQTtJQUVEbkI7Ozs7T0FJR0E7SUFDS0EseUNBQWdCQSxHQUF4QkE7UUFFQ29CLElBQUlBLENBQUNBLGVBQWVBLENBQUNBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBO1FBRXhDQSxJQUFJQSxDQUFDQSxlQUFlQSxHQUFHQSxLQUFLQSxDQUFDQTtJQUM5QkEsQ0FBQ0E7SUFFRHBCOzs7OztPQUtHQTtJQUNLQSwwQ0FBaUJBLEdBQXpCQSxVQUEwQkEsUUFBZUE7UUFFeENxQixJQUFJQSxDQUFDQSxhQUFhQSxDQUFDQSxRQUFRQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxTQUFTQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtRQUVyRUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsaUJBQWlCQSxDQUFDQTtZQUN2Q0EsUUFBUUEsR0FBR0EsZUFBZUEsQ0FBQ0EsV0FBV0EsQ0FBQ0E7UUFFeENBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLFFBQVFBLENBQUNBLEdBQUdBLGNBQWNBLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLFlBQVlBLEVBQUVBLElBQUlBLENBQUNBLFlBQVlBLEVBQUVBLEVBQUVBLFFBQVFBLENBQUNBLENBQUNBO1FBRXRHQSxJQUFJQSxDQUFDQSxpQkFBaUJBLENBQUNBLFFBQVFBLENBQUNBLEdBQUdBLEtBQUtBLENBQUNBO0lBQzFDQSxDQUFDQTtJQUVEckI7Ozs7O09BS0dBO0lBQ0tBLDBDQUFpQkEsR0FBekJBLFVBQTBCQSxLQUFzQkE7UUFFL0NzQixJQUFJQSxDQUFDQSxtQkFBbUJBLEVBQUVBLENBQUNBO0lBQzVCQSxDQUFDQTtJQUVEdEI7Ozs7O09BS0dBO0lBQ0tBLDJDQUFrQkEsR0FBMUJBLFVBQTJCQSxLQUFzQkE7UUFFaER1QixJQUFJQSxDQUFDQSxrQkFBa0JBLEdBQXNCQSxLQUFLQSxDQUFDQSxNQUFPQSxDQUFDQSxpQkFBaUJBLENBQUNBO1FBRTdFQSxJQUFJQSxDQUFDQSxvQkFBb0JBLENBQUNBLEtBQUtBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO0lBQzNDQSxDQUFDQTtJQUNGdkIscUJBQUNBO0FBQURBLENBellBLEFBeVlDQSxJQUFBO0FBRUQsQUFBd0IsaUJBQWYsY0FBYyxDQUFDIiwiZmlsZSI6InBvb2wvUmVuZGVyYWJsZUJhc2UuanMiLCJzb3VyY2VSb290IjoiLi4vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE1hdHJpeDNEXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2dlb20vTWF0cml4M0RcIik7XG5pbXBvcnQgQWJzdHJhY3RNZXRob2RFcnJvclx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9lcnJvcnMvQWJzdHJhY3RNZXRob2RFcnJvclwiKTtcblxuaW1wb3J0IElSZW5kZXJhYmxlT3duZXJcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9iYXNlL0lSZW5kZXJhYmxlT3duZXJcIik7XG5pbXBvcnQgSVJlbmRlck9iamVjdE93bmVyXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2Jhc2UvSVJlbmRlck9iamVjdE93bmVyXCIpO1xuaW1wb3J0IFN1Ykdlb21ldHJ5QmFzZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2Jhc2UvU3ViR2VvbWV0cnlCYXNlXCIpO1xuaW1wb3J0IFRyaWFuZ2xlU3ViR2VvbWV0cnlcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvYmFzZS9UcmlhbmdsZVN1Ykdlb21ldHJ5XCIpO1xuaW1wb3J0IElSZW5kZXJhYmxlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9wb29sL0lSZW5kZXJhYmxlXCIpO1xuaW1wb3J0IElFbnRpdHlcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvZW50aXRpZXMvSUVudGl0eVwiKTtcbmltcG9ydCBDYW1lcmFcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvZW50aXRpZXMvQ2FtZXJhXCIpO1xuaW1wb3J0IFN1Ykdlb21ldHJ5RXZlbnRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9ldmVudHMvU3ViR2VvbWV0cnlFdmVudFwiKTtcbmltcG9ydCBJUmVuZGVyZXJcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL3JlbmRlci9JUmVuZGVyZXJcIik7XG5pbXBvcnQgTWF0ZXJpYWxCYXNlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9tYXRlcmlhbHMvTWF0ZXJpYWxCYXNlXCIpO1xuXG5pbXBvcnQgSW5kZXhEYXRhXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9wb29sL0luZGV4RGF0YVwiKTtcbmltcG9ydCBJbmRleERhdGFQb29sXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvcG9vbC9JbmRleERhdGFQb29sXCIpO1xuaW1wb3J0IFZlcnRleERhdGFcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL3Bvb2wvVmVydGV4RGF0YVwiKTtcbmltcG9ydCBWZXJ0ZXhEYXRhUG9vbFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL3Bvb2wvVmVydGV4RGF0YVBvb2xcIik7XG5pbXBvcnQgU3RhZ2VcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYmFzZS9TdGFnZVwiKTtcblxuaW1wb3J0IFNoYWRlck9iamVjdEJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9TaGFkZXJPYmplY3RCYXNlXCIpO1xuaW1wb3J0IFNoYWRlclJlZ2lzdGVyQ2FjaGVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vU2hhZGVyUmVnaXN0ZXJDYWNoZVwiKTtcbmltcG9ydCBTaGFkZXJSZWdpc3RlckRhdGFcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vU2hhZGVyUmVnaXN0ZXJEYXRhXCIpO1xuaW1wb3J0IFJlbmRlcmFibGVQb29sXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvcG9vbC9SZW5kZXJhYmxlUG9vbFwiKTtcbmltcG9ydCBSZW5kZXJPYmplY3RCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vUmVuZGVyT2JqZWN0QmFzZVwiKTtcblxuLyoqXG4gKiBAY2xhc3MgUmVuZGVyYWJsZUxpc3RJdGVtXG4gKi9cbmNsYXNzIFJlbmRlcmFibGVCYXNlIGltcGxlbWVudHMgSVJlbmRlcmFibGVcbntcblxuXHRwcml2YXRlIF9vbkluZGljZXNVcGRhdGVkRGVsZWdhdGU6KGV2ZW50OlN1Ykdlb21ldHJ5RXZlbnQpID0+IHZvaWQ7XG5cdHByaXZhdGUgX29uVmVydGljZXNVcGRhdGVkRGVsZWdhdGU6KGV2ZW50OlN1Ykdlb21ldHJ5RXZlbnQpID0+IHZvaWQ7XG5cblx0cHJpdmF0ZSBfc3ViR2VvbWV0cnk6U3ViR2VvbWV0cnlCYXNlO1xuXHRwcml2YXRlIF9nZW9tZXRyeURpcnR5OmJvb2xlYW4gPSB0cnVlO1xuXHRwcml2YXRlIF9pbmRleERhdGE6SW5kZXhEYXRhO1xuXHRwcml2YXRlIF9pbmRleERhdGFEaXJ0eTpib29sZWFuID0gdHJ1ZTtcblx0cHJpdmF0ZSBfdmVydGV4RGF0YTpPYmplY3QgPSBuZXcgT2JqZWN0KCk7XG5cdHB1YmxpYyBfcFZlcnRleERhdGFEaXJ0eTpPYmplY3QgPSBuZXcgT2JqZWN0KCk7XG5cdHByaXZhdGUgX3ZlcnRleE9mZnNldDpPYmplY3QgPSBuZXcgT2JqZWN0KCk7XG5cblx0cHVibGljIF9sZXZlbDpudW1iZXI7XG5cdHByaXZhdGUgX2luZGV4T2Zmc2V0Om51bWJlcjtcblx0cHJpdmF0ZSBfb3ZlcmZsb3c6UmVuZGVyYWJsZUJhc2U7XG5cdHByaXZhdGUgX251bVRyaWFuZ2xlczpudW1iZXI7XG5cdHByaXZhdGUgX2NvbmNhdGVuYXRlQXJyYXlzOmJvb2xlYW47XG5cblx0cHVibGljIEpPSU5UX0lOREVYX0ZPUk1BVDpzdHJpbmc7XG5cdHB1YmxpYyBKT0lOVF9XRUlHSFRfRk9STUFUOnN0cmluZztcblxuXHQvKipcblx0ICpcblx0ICovXG5cdHB1YmxpYyBfcG9vbDpSZW5kZXJhYmxlUG9vbDtcblxuXHRwdWJsaWMgX3N0YWdlOlN0YWdlO1xuXG5cdC8qKlxuXHQgKlxuXHQgKi9cblx0cHVibGljIGdldCBvdmVyZmxvdygpOlJlbmRlcmFibGVCYXNlXG5cdHtcblx0XHRpZiAodGhpcy5faW5kZXhEYXRhRGlydHkpXG5cdFx0XHR0aGlzLl91cGRhdGVJbmRleERhdGEoKTtcblxuXHRcdHJldHVybiB0aGlzLl9vdmVyZmxvdztcblx0fVxuXG5cdC8qKlxuXHQgKlxuXHQgKi9cblx0cHVibGljIGdldCBudW1UcmlhbmdsZXMoKTpudW1iZXJcblx0e1xuXHRcdHJldHVybiB0aGlzLl9udW1UcmlhbmdsZXM7XG5cdH1cblxuXHQvKipcblx0ICpcblx0ICovXG5cdHB1YmxpYyBuZXh0OlJlbmRlcmFibGVCYXNlO1xuXG5cdHB1YmxpYyBpZDpudW1iZXI7XG5cblx0LyoqXG5cdCAqXG5cdCAqL1xuXHRwdWJsaWMgcmVuZGVyT2JqZWN0SWQ6bnVtYmVyO1xuXG5cdC8qKlxuXHQgKlxuXHQgKi9cblx0cHVibGljIHJlbmRlck9yZGVySWQ6bnVtYmVyO1xuXG5cdC8qKlxuXHQgKlxuXHQgKi9cblx0cHVibGljIHpJbmRleDpudW1iZXI7XG5cblx0LyoqXG5cdCAqXG5cdCAqL1xuXHRwdWJsaWMgY2FzY2FkZWQ6Ym9vbGVhbjtcblxuXHQvKipcblx0ICpcblx0ICovXG5cdHB1YmxpYyByZW5kZXJTY2VuZVRyYW5zZm9ybTpNYXRyaXgzRDtcblxuXHQvKipcblx0ICpcblx0ICovXG5cdHB1YmxpYyBzb3VyY2VFbnRpdHk6SUVudGl0eTtcblxuXHQvKipcblx0ICpcblx0ICovXG5cdHB1YmxpYyByZW5kZXJhYmxlT3duZXI6SVJlbmRlcmFibGVPd25lcjtcblxuXG5cdC8qKlxuXHQgKlxuXHQgKi9cblx0cHVibGljIHJlbmRlck9iamVjdE93bmVyOklSZW5kZXJPYmplY3RPd25lcjtcblxuXHQvKipcblx0ICpcblx0ICovXG5cdHB1YmxpYyByZW5kZXJPYmplY3Q6UmVuZGVyT2JqZWN0QmFzZTtcblxuXHQvKipcblx0ICpcblx0ICovXG5cdHB1YmxpYyBnZXRJbmRleERhdGEoKTpJbmRleERhdGFcblx0e1xuXHRcdGlmICh0aGlzLl9pbmRleERhdGFEaXJ0eSlcblx0XHRcdHRoaXMuX3VwZGF0ZUluZGV4RGF0YSgpO1xuXG5cdFx0cmV0dXJuIHRoaXMuX2luZGV4RGF0YTtcblx0fVxuXG5cdC8qKlxuXHQgKlxuXHQgKi9cblx0cHVibGljIGdldFZlcnRleERhdGEoZGF0YVR5cGU6c3RyaW5nKTpWZXJ0ZXhEYXRhXG5cdHtcblx0XHRpZiAodGhpcy5faW5kZXhEYXRhRGlydHkpXG5cdFx0XHR0aGlzLl91cGRhdGVJbmRleERhdGEoKTtcblxuXHRcdGlmICh0aGlzLl9wVmVydGV4RGF0YURpcnR5W2RhdGFUeXBlXSlcblx0XHRcdHRoaXMuX3VwZGF0ZVZlcnRleERhdGEoZGF0YVR5cGUpO1xuXG5cdFx0cmV0dXJuIHRoaXMuX3ZlcnRleERhdGFbdGhpcy5fY29uY2F0ZW5hdGVBcnJheXM/IFRyaWFuZ2xlU3ViR2VvbWV0cnkuVkVSVEVYX0RBVEEgOiBkYXRhVHlwZV1cblx0fVxuXG5cdC8qKlxuXHQgKlxuXHQgKi9cblx0cHVibGljIGdldFZlcnRleE9mZnNldChkYXRhVHlwZTpzdHJpbmcpOm51bWJlclxuXHR7XG5cdFx0aWYgKHRoaXMuX2luZGV4RGF0YURpcnR5KVxuXHRcdFx0dGhpcy5fdXBkYXRlSW5kZXhEYXRhKCk7XG5cblx0XHRpZiAodGhpcy5fcFZlcnRleERhdGFEaXJ0eVtkYXRhVHlwZV0pXG5cdFx0XHR0aGlzLl91cGRhdGVWZXJ0ZXhEYXRhKGRhdGFUeXBlKTtcblxuXHRcdHJldHVybiB0aGlzLl92ZXJ0ZXhPZmZzZXRbZGF0YVR5cGVdO1xuXHR9XG5cblx0LyoqXG5cdCAqXG5cdCAqIEBwYXJhbSBzb3VyY2VFbnRpdHlcblx0ICogQHBhcmFtIHJlbmRlcmFibGVPd25lclxuXHQgKiBAcGFyYW0gc3ViR2VvbWV0cnlcblx0ICogQHBhcmFtIGFuaW1hdGlvblN1Ykdlb21ldHJ5XG5cdCAqL1xuXHRjb25zdHJ1Y3Rvcihwb29sOlJlbmRlcmFibGVQb29sLCBzb3VyY2VFbnRpdHk6SUVudGl0eSwgcmVuZGVyYWJsZU93bmVyOklSZW5kZXJhYmxlT3duZXIsIHJlbmRlck9iamVjdE93bmVyOklSZW5kZXJPYmplY3RPd25lciwgc3RhZ2U6U3RhZ2UsIGxldmVsOm51bWJlciA9IDAsIGluZGV4T2Zmc2V0Om51bWJlciA9IDApXG5cdHtcblx0XHR0aGlzLl9vbkluZGljZXNVcGRhdGVkRGVsZWdhdGUgPSAoZXZlbnQ6U3ViR2VvbWV0cnlFdmVudCkgPT4gdGhpcy5fb25JbmRpY2VzVXBkYXRlZChldmVudCk7XG5cdFx0dGhpcy5fb25WZXJ0aWNlc1VwZGF0ZWREZWxlZ2F0ZSA9IChldmVudDpTdWJHZW9tZXRyeUV2ZW50KSA9PiB0aGlzLl9vblZlcnRpY2VzVXBkYXRlZChldmVudCk7XG5cblx0XHQvL3N0b3JlIGEgcmVmZXJlbmNlIHRvIHRoZSBwb29sIGZvciBsYXRlciBkaXNwb3NhbFxuXHRcdHRoaXMuX3Bvb2wgPSBwb29sO1xuXHRcdHRoaXMuX3N0YWdlID0gc3RhZ2U7XG5cblx0XHQvL3JlZmVyZW5jZSB0byBsZXZlbCBvZiBvdmVyZmxvd1xuXHRcdHRoaXMuX2xldmVsID0gbGV2ZWw7XG5cblx0XHQvL3JlZmVyZW5jZSB0byB0aGUgb2Zmc2V0IG9uIGluZGljZXMgKGlmIHRoaXMgaXMgYW4gb3ZlcmZsb3cgcmVuZGVyYWJsZSlcblx0XHR0aGlzLl9pbmRleE9mZnNldCA9IGluZGV4T2Zmc2V0O1xuXG5cdFx0dGhpcy5zb3VyY2VFbnRpdHkgPSBzb3VyY2VFbnRpdHk7XG5cblx0XHR0aGlzLnJlbmRlcmFibGVPd25lciA9IHJlbmRlcmFibGVPd25lcjtcblxuXHRcdHRoaXMucmVuZGVyT2JqZWN0T3duZXIgPSByZW5kZXJPYmplY3RPd25lcjtcblx0fVxuXG5cdHB1YmxpYyBkaXNwb3NlKClcblx0e1xuXHRcdHRoaXMuX3Bvb2wuZGlzcG9zZUl0ZW0odGhpcy5yZW5kZXJhYmxlT3duZXIpO1xuXG5cdFx0dGhpcy5faW5kZXhEYXRhLmRpc3Bvc2UoKTtcblx0XHR0aGlzLl9pbmRleERhdGEgPSBudWxsO1xuXG5cdFx0Zm9yICh2YXIgZGF0YVR5cGUgaW4gdGhpcy5fdmVydGV4RGF0YSkge1xuXHRcdFx0KDxWZXJ0ZXhEYXRhPiB0aGlzLl92ZXJ0ZXhEYXRhW2RhdGFUeXBlXSkuZGlzcG9zZSgpO1xuXHRcdFx0dGhpcy5fdmVydGV4RGF0YVtkYXRhVHlwZV0gPSBudWxsO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLl9vdmVyZmxvdykge1xuXHRcdFx0dGhpcy5fb3ZlcmZsb3cuZGlzcG9zZSgpO1xuXHRcdFx0dGhpcy5fb3ZlcmZsb3cgPSBudWxsO1xuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyBpbnZhbGlkYXRlR2VvbWV0cnkoKVxuXHR7XG5cdFx0dGhpcy5fZ2VvbWV0cnlEaXJ0eSA9IHRydWU7XG5cblx0XHQvL2ludmFsaWRhdGUgaW5kaWNlc1xuXHRcdGlmICh0aGlzLl9sZXZlbCA9PSAwKVxuXHRcdFx0dGhpcy5faW5kZXhEYXRhRGlydHkgPSB0cnVlO1xuXG5cdFx0aWYgKHRoaXMuX292ZXJmbG93KVxuXHRcdFx0dGhpcy5fb3ZlcmZsb3cuaW52YWxpZGF0ZUdlb21ldHJ5KCk7XG5cdH1cblxuXHQvKipcblx0ICpcblx0ICovXG5cdHB1YmxpYyBpbnZhbGlkYXRlSW5kZXhEYXRhKClcblx0e1xuXHRcdHRoaXMuX2luZGV4RGF0YURpcnR5ID0gdHJ1ZTtcblx0fVxuXG5cdC8qKlxuXHQgKiAvL1RPRE9cblx0ICpcblx0ICogQHBhcmFtIGRhdGFUeXBlXG5cdCAqL1xuXHRwdWJsaWMgaW52YWxpZGF0ZVZlcnRleERhdGEoZGF0YVR5cGU6c3RyaW5nKVxuXHR7XG5cdFx0dGhpcy5fcFZlcnRleERhdGFEaXJ0eVtkYXRhVHlwZV0gPSB0cnVlO1xuXHR9XG5cblx0cHVibGljIF9wR2V0U3ViR2VvbWV0cnkoKTpTdWJHZW9tZXRyeUJhc2Vcblx0e1xuXHRcdHRocm93IG5ldyBBYnN0cmFjdE1ldGhvZEVycm9yKCk7XG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIF9pR2V0VmVydGV4Q29kZShzaGFkZXJPYmplY3Q6U2hhZGVyT2JqZWN0QmFzZSwgcmVnaXN0ZXJDYWNoZTpTaGFkZXJSZWdpc3RlckNhY2hlLCBzaGFyZWRSZWdpc3RlcnM6U2hhZGVyUmVnaXN0ZXJEYXRhKTpzdHJpbmdcblx0e1xuXHRcdHJldHVybiBcIlwiO1xuXHR9XG5cblx0cHVibGljIHN0YXRpYyBfaUdldEZyYWdtZW50Q29kZShzaGFkZXJPYmplY3Q6U2hhZGVyT2JqZWN0QmFzZSwgcmVnaXN0ZXJDYWNoZTpTaGFkZXJSZWdpc3RlckNhY2hlLCBzaGFyZWRSZWdpc3RlcnM6U2hhZGVyUmVnaXN0ZXJEYXRhKTpzdHJpbmdcblx0e1xuXHRcdHJldHVybiBcIlwiO1xuXHR9XG5cblx0LyoqXG5cdCAqIC8vVE9ET1xuXHQgKlxuXHQgKiBAcGFyYW0gc3ViR2VvbWV0cnlcblx0ICogQHBhcmFtIG9mZnNldFxuXHQgKiBAaW50ZXJuYWxcblx0ICovXG5cdHB1YmxpYyBfaUZpbGxJbmRleERhdGEoaW5kZXhPZmZzZXQ6bnVtYmVyKVxuXHR7XG5cdFx0aWYgKHRoaXMuX2dlb21ldHJ5RGlydHkpXG5cdFx0XHR0aGlzLl91cGRhdGVHZW9tZXRyeSgpO1xuXG5cdFx0dGhpcy5faW5kZXhEYXRhID0gSW5kZXhEYXRhUG9vbC5nZXRJdGVtKHRoaXMuX3N1Ykdlb21ldHJ5LCB0aGlzLl9sZXZlbCwgaW5kZXhPZmZzZXQpO1xuXG5cdFx0dGhpcy5fbnVtVHJpYW5nbGVzID0gdGhpcy5faW5kZXhEYXRhLmRhdGEubGVuZ3RoLzM7XG5cblx0XHRpbmRleE9mZnNldCA9IHRoaXMuX2luZGV4RGF0YS5vZmZzZXQ7XG5cblx0XHQvL2NoZWNrIGlmIHRoZXJlIGlzIG1vcmUgdG8gc3BsaXRcblx0XHRpZiAoaW5kZXhPZmZzZXQgPCB0aGlzLl9zdWJHZW9tZXRyeS5pbmRpY2VzLmxlbmd0aCkge1xuXHRcdFx0aWYgKCF0aGlzLl9vdmVyZmxvdylcblx0XHRcdFx0dGhpcy5fb3ZlcmZsb3cgPSB0aGlzLl9wR2V0T3ZlcmZsb3dSZW5kZXJhYmxlKGluZGV4T2Zmc2V0KTtcblxuXHRcdFx0dGhpcy5fb3ZlcmZsb3cuX2lGaWxsSW5kZXhEYXRhKGluZGV4T2Zmc2V0KTtcblx0XHR9IGVsc2UgaWYgKHRoaXMuX292ZXJmbG93KSB7XG5cdFx0XHR0aGlzLl9vdmVyZmxvdy5kaXNwb3NlKCk7XG5cdFx0XHR0aGlzLl9vdmVyZmxvdyA9IG51bGw7XG5cdFx0fVxuXHR9XG5cblx0cHVibGljIF9wR2V0T3ZlcmZsb3dSZW5kZXJhYmxlKGluZGV4T2Zmc2V0Om51bWJlcik6UmVuZGVyYWJsZUJhc2Vcblx0e1xuXHRcdHRocm93IG5ldyBBYnN0cmFjdE1ldGhvZEVycm9yKCk7XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgcmVuZGVyIHN0YXRlIGZvciB0aGUgcGFzcyB0aGF0IGlzIGluZGVwZW5kZW50IG9mIHRoZSByZW5kZXJlZCBvYmplY3QuIFRoaXMgbmVlZHMgdG8gYmUgY2FsbGVkIGJlZm9yZVxuXHQgKiBjYWxsaW5nIHJlbmRlclBhc3MuIEJlZm9yZSBhY3RpdmF0aW5nIGEgcGFzcywgdGhlIHByZXZpb3VzbHkgdXNlZCBwYXNzIG5lZWRzIHRvIGJlIGRlYWN0aXZhdGVkLlxuXHQgKiBAcGFyYW0gc3RhZ2UgVGhlIFN0YWdlIG9iamVjdCB3aGljaCBpcyBjdXJyZW50bHkgdXNlZCBmb3IgcmVuZGVyaW5nLlxuXHQgKiBAcGFyYW0gY2FtZXJhIFRoZSBjYW1lcmEgZnJvbSB3aGljaCB0aGUgc2NlbmUgaXMgdmlld2VkLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cHVibGljIF9pQWN0aXZhdGUoc2hhZGVyOlNoYWRlck9iamVjdEJhc2UsIGNhbWVyYTpDYW1lcmEpXG5cdHtcblx0XHR0aGlzLnJlbmRlck9iamVjdC5faUFjdGl2YXRlKHNoYWRlciwgY2FtZXJhKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZW5kZXJzIGFuIG9iamVjdCB0byB0aGUgY3VycmVudCByZW5kZXIgdGFyZ2V0LlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cHVibGljIF9pUmVuZGVyKHNoYWRlcjpTaGFkZXJPYmplY3RCYXNlLCBjYW1lcmE6Q2FtZXJhLCB2aWV3UHJvamVjdGlvbjpNYXRyaXgzRClcblx0e1xuXHRcdHRoaXMucmVuZGVyT2JqZWN0Ll9pUmVuZGVyKHRoaXMsIHNoYWRlciwgY2FtZXJhLCB2aWV3UHJvamVjdGlvbik7XG5cdH1cblxuXHQvKipcblx0ICogQ2xlYXJzIHRoZSByZW5kZXIgc3RhdGUgZm9yIHRoZSBwYXNzLiBUaGlzIG5lZWRzIHRvIGJlIGNhbGxlZCBiZWZvcmUgYWN0aXZhdGluZyBhbm90aGVyIHBhc3MuXG5cdCAqIEBwYXJhbSBzdGFnZSBUaGUgU3RhZ2UgdXNlZCBmb3IgcmVuZGVyaW5nXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRwdWJsaWMgX2lEZWFjdGl2YXRlKHNoYWRlcjpTaGFkZXJPYmplY3RCYXNlKVxuXHR7XG5cdFx0dGhpcy5yZW5kZXJPYmplY3QuX2lEZWFjdGl2YXRlKHNoYWRlcik7XG5cdH1cblxuXHQvKipcblx0ICogLy9UT0RPXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRwcml2YXRlIF91cGRhdGVHZW9tZXRyeSgpXG5cdHtcblx0XHRpZiAodGhpcy5fc3ViR2VvbWV0cnkpIHtcblx0XHRcdGlmICh0aGlzLl9sZXZlbCA9PSAwKVxuXHRcdFx0XHR0aGlzLl9zdWJHZW9tZXRyeS5yZW1vdmVFdmVudExpc3RlbmVyKFN1Ykdlb21ldHJ5RXZlbnQuSU5ESUNFU19VUERBVEVELCB0aGlzLl9vbkluZGljZXNVcGRhdGVkRGVsZWdhdGUpO1xuXHRcdFx0dGhpcy5fc3ViR2VvbWV0cnkucmVtb3ZlRXZlbnRMaXN0ZW5lcihTdWJHZW9tZXRyeUV2ZW50LlZFUlRJQ0VTX1VQREFURUQsIHRoaXMuX29uVmVydGljZXNVcGRhdGVkRGVsZWdhdGUpO1xuXHRcdH1cblxuXHRcdHRoaXMuX3N1Ykdlb21ldHJ5ID0gdGhpcy5fcEdldFN1Ykdlb21ldHJ5KCk7XG5cblx0XHR0aGlzLl9jb25jYXRlbmF0ZUFycmF5cyA9IHRoaXMuX3N1Ykdlb21ldHJ5LmNvbmNhdGVuYXRlQXJyYXlzO1xuXG5cdFx0aWYgKHRoaXMuX3N1Ykdlb21ldHJ5KSB7XG5cdFx0XHRpZiAodGhpcy5fbGV2ZWwgPT0gMClcblx0XHRcdFx0dGhpcy5fc3ViR2VvbWV0cnkuYWRkRXZlbnRMaXN0ZW5lcihTdWJHZW9tZXRyeUV2ZW50LklORElDRVNfVVBEQVRFRCwgdGhpcy5fb25JbmRpY2VzVXBkYXRlZERlbGVnYXRlKTtcblx0XHRcdHRoaXMuX3N1Ykdlb21ldHJ5LmFkZEV2ZW50TGlzdGVuZXIoU3ViR2VvbWV0cnlFdmVudC5WRVJUSUNFU19VUERBVEVELCB0aGlzLl9vblZlcnRpY2VzVXBkYXRlZERlbGVnYXRlKTtcblx0XHR9XG5cblx0XHQvL2Rpc3Bvc2Vcbi8vXHRcdFx0aWYgKHRoaXMuX2luZGV4RGF0YSkge1xuLy9cdFx0XHRcdHRoaXMuX2luZGV4RGF0YS5kaXNwb3NlKCk7IC8vVE9ETyB3aGVyZSBpcyBhIGdvb2QgcGxhY2UgdG8gZGlzcG9zZT9cbi8vXHRcdFx0XHR0aGlzLl9pbmRleERhdGEgPSBudWxsO1xuLy9cdFx0XHR9XG5cbi8vXHRcdFx0Zm9yICh2YXIgZGF0YVR5cGUgaW4gdGhpcy5fdmVydGV4RGF0YSkge1xuLy9cdFx0XHRcdCg8VmVydGV4RGF0YT4gdGhpcy5fdmVydGV4RGF0YVtkYXRhVHlwZV0pLmRpc3Bvc2UoKTsgLy9UT0RPIHdoZXJlIGlzIGEgZ29vZCBwbGFjZSB0byBkaXNwb3NlP1xuLy9cdFx0XHRcdHRoaXMuX3ZlcnRleERhdGFbZGF0YVR5cGVdID0gbnVsbDtcbi8vXHRcdFx0fVxuXG5cdFx0dGhpcy5fZ2VvbWV0cnlEaXJ0eSA9IGZhbHNlO1xuXG5cdFx0Ly9zcGVjaWZpYyB2ZXJ0ZXggZGF0YSB0eXBlcyBoYXZlIHRvIGJlIGludmFsaWRhdGVkIGluIHRoZSBzcGVjaWZpYyByZW5kZXJhYmxlXG5cdH1cblxuXHQvKipcblx0ICogLy9UT0RPXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRwcml2YXRlIF91cGRhdGVJbmRleERhdGEoKVxuXHR7XG5cdFx0dGhpcy5faUZpbGxJbmRleERhdGEodGhpcy5faW5kZXhPZmZzZXQpO1xuXG5cdFx0dGhpcy5faW5kZXhEYXRhRGlydHkgPSBmYWxzZTtcblx0fVxuXG5cdC8qKlxuXHQgKiAvL1RPRE9cblx0ICpcblx0ICogQHBhcmFtIGRhdGFUeXBlXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRwcml2YXRlIF91cGRhdGVWZXJ0ZXhEYXRhKGRhdGFUeXBlOnN0cmluZylcblx0e1xuXHRcdHRoaXMuX3ZlcnRleE9mZnNldFtkYXRhVHlwZV0gPSB0aGlzLl9zdWJHZW9tZXRyeS5nZXRPZmZzZXQoZGF0YVR5cGUpO1xuXG5cdFx0aWYgKHRoaXMuX3N1Ykdlb21ldHJ5LmNvbmNhdGVuYXRlQXJyYXlzKVxuXHRcdFx0ZGF0YVR5cGUgPSBTdWJHZW9tZXRyeUJhc2UuVkVSVEVYX0RBVEE7XG5cblx0XHR0aGlzLl92ZXJ0ZXhEYXRhW2RhdGFUeXBlXSA9IFZlcnRleERhdGFQb29sLmdldEl0ZW0odGhpcy5fc3ViR2VvbWV0cnksIHRoaXMuZ2V0SW5kZXhEYXRhKCksIGRhdGFUeXBlKTtcblxuXHRcdHRoaXMuX3BWZXJ0ZXhEYXRhRGlydHlbZGF0YVR5cGVdID0gZmFsc2U7XG5cdH1cblxuXHQvKipcblx0ICogLy9UT0RPXG5cdCAqXG5cdCAqIEBwYXJhbSBldmVudFxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cHJpdmF0ZSBfb25JbmRpY2VzVXBkYXRlZChldmVudDpTdWJHZW9tZXRyeUV2ZW50KVxuXHR7XG5cdFx0dGhpcy5pbnZhbGlkYXRlSW5kZXhEYXRhKCk7XG5cdH1cblxuXHQvKipcblx0ICogLy9UT0RPXG5cdCAqXG5cdCAqIEBwYXJhbSBldmVudFxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cHJpdmF0ZSBfb25WZXJ0aWNlc1VwZGF0ZWQoZXZlbnQ6U3ViR2VvbWV0cnlFdmVudClcblx0e1xuXHRcdHRoaXMuX2NvbmNhdGVuYXRlQXJyYXlzID0gKDxTdWJHZW9tZXRyeUJhc2U+IGV2ZW50LnRhcmdldCkuY29uY2F0ZW5hdGVBcnJheXM7XG5cblx0XHR0aGlzLmludmFsaWRhdGVWZXJ0ZXhEYXRhKGV2ZW50LmRhdGFUeXBlKTtcblx0fVxufVxuXG5leHBvcnQgPSBSZW5kZXJhYmxlQmFzZTsiXX0=