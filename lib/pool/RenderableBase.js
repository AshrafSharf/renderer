var AbstractMethodError = require("awayjs-core/lib/errors/AbstractMethodError");
var SubGeometryBase = require("awayjs-display/lib/base/SubGeometryBase");
var TriangleSubGeometry = require("awayjs-display/lib/base/TriangleSubGeometry");
var RenderableOwnerEvent = require("awayjs-display/lib/events/RenderableOwnerEvent");
var SubGeometryEvent = require("awayjs-display/lib/events/SubGeometryEvent");
var IndexDataPool = require("awayjs-stagegl/lib/pool/IndexDataPool");
var VertexDataPool = require("awayjs-stagegl/lib/pool/VertexDataPool");
/**
 * @class RenderableListItem
 */
var RenderableBase = (function () {
    /**
     *
     * @param sourceEntity
     * @param renderableOwner
     * @param subGeometry
     * @param animationSubGeometry
     */
    function RenderableBase(pool, sourceEntity, renderableOwner, renderObjectOwner, stage, level, indexOffset) {
        var _this = this;
        if (level === void 0) { level = 0; }
        if (indexOffset === void 0) { indexOffset = 0; }
        this._geometryDirty = true;
        this._indexDataDirty = true;
        this._vertexData = new Object();
        this._pVertexDataDirty = new Object();
        this._vertexOffset = new Object();
        this._onIndicesUpdatedDelegate = function (event) { return _this._onIndicesUpdated(event); };
        this._onVerticesUpdatedDelegate = function (event) { return _this._onVerticesUpdated(event); };
        this._onRenderObjectOwnerUpdatedDelegate = function (event) { return _this._onRenderObjectOwnerUpdated(event); };
        //store a reference to the pool for later disposal
        this._pool = pool;
        this._stage = stage;
        //reference to level of overflow
        this._level = level;
        //reference to the offset on indices (if this is an overflow renderable)
        this._indexOffset = indexOffset;
        this.sourceEntity = sourceEntity;
        this.renderableOwner = renderableOwner;
        this.renderableOwner.addEventListener(RenderableOwnerEvent.RENDER_OBJECT_OWNER_UPDATED, this._onRenderObjectOwnerUpdatedDelegate);
        this.renderObjectOwner = renderObjectOwner;
    }
    Object.defineProperty(RenderableBase.prototype, "overflow", {
        /**
         *
         */
        get: function () {
            if (this._indexDataDirty)
                this._updateIndexData();
            return this._overflow;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RenderableBase.prototype, "numTriangles", {
        /**
         *
         */
        get: function () {
            return this._numTriangles;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *
     */
    RenderableBase.prototype.getIndexData = function () {
        if (this._indexDataDirty)
            this._updateIndexData();
        return this._indexData;
    };
    /**
     *
     */
    RenderableBase.prototype.getVertexData = function (dataType) {
        if (this._indexDataDirty)
            this._updateIndexData();
        if (this._pVertexDataDirty[dataType])
            this._updateVertexData(dataType);
        return this._vertexData[this._concatenateArrays ? TriangleSubGeometry.VERTEX_DATA : dataType];
    };
    /**
     *
     */
    RenderableBase.prototype.getVertexOffset = function (dataType) {
        if (this._indexDataDirty)
            this._updateIndexData();
        if (this._pVertexDataDirty[dataType])
            this._updateVertexData(dataType);
        return this._vertexOffset[dataType];
    };
    RenderableBase.prototype.dispose = function () {
        this._pool.disposeItem(this.renderableOwner);
        this._indexData.dispose();
        this._indexData = null;
        for (var dataType in this._vertexData) {
            this._vertexData[dataType].dispose();
            this._vertexData[dataType] = null;
        }
        if (this._overflow) {
            this._overflow.dispose();
            this._overflow = null;
        }
    };
    RenderableBase.prototype.invalidateGeometry = function () {
        this._geometryDirty = true;
        //invalidate indices
        if (this._level == 0)
            this._indexDataDirty = true;
        if (this._overflow)
            this._overflow.invalidateGeometry();
    };
    /**
     *
     */
    RenderableBase.prototype.invalidateIndexData = function () {
        this._indexDataDirty = true;
    };
    /**
     * //TODO
     *
     * @param dataType
     */
    RenderableBase.prototype.invalidateVertexData = function (dataType) {
        this._pVertexDataDirty[dataType] = true;
    };
    RenderableBase.prototype._pGetSubGeometry = function () {
        throw new AbstractMethodError();
    };
    RenderableBase._iGetVertexCode = function (shaderObject, registerCache, sharedRegisters) {
        return "";
    };
    RenderableBase._iGetFragmentCode = function (shaderObject, registerCache, sharedRegisters) {
        return "";
    };
    /**
     * //TODO
     *
     * @param subGeometry
     * @param offset
     * @internal
     */
    RenderableBase.prototype._iFillIndexData = function (indexOffset) {
        if (this._geometryDirty)
            this._updateGeometry();
        this._indexData = IndexDataPool.getItem(this._subGeometry, this._level, indexOffset);
        this._numTriangles = this._indexData.data.length / 3;
        indexOffset = this._indexData.offset;
        //check if there is more to split
        if (indexOffset < this._subGeometry.indices.length) {
            if (!this._overflow)
                this._overflow = this._pGetOverflowRenderable(indexOffset);
            this._overflow._iFillIndexData(indexOffset);
        }
        else if (this._overflow) {
            this._overflow.dispose();
            this._overflow = null;
        }
    };
    RenderableBase.prototype._pGetOverflowRenderable = function (indexOffset) {
        throw new AbstractMethodError();
    };
    /**
     * Sets the render state for the pass that is independent of the rendered object. This needs to be called before
     * calling renderPass. Before activating a pass, the previously used pass needs to be deactivated.
     * @param stage The Stage object which is currently used for rendering.
     * @param camera The camera from which the scene is viewed.
     * @private
     */
    RenderableBase.prototype._iActivate = function (pass, camera) {
        pass._iActivate(camera);
    };
    /**
     * Renders an object to the current render target.
     *
     * @private
     */
    RenderableBase.prototype._iRender = function (pass, camera, viewProjection) {
        pass._iRender(this, camera, viewProjection);
    };
    /**
     * Clears the render state for the pass. This needs to be called before activating another pass.
     * @param stage The Stage used for rendering
     *
     * @private
     */
    RenderableBase.prototype._iDeactivate = function (pass) {
        pass._iDeactivate();
    };
    /**
     * //TODO
     *
     * @private
     */
    RenderableBase.prototype._updateGeometry = function () {
        if (this._subGeometry) {
            if (this._level == 0)
                this._subGeometry.removeEventListener(SubGeometryEvent.INDICES_UPDATED, this._onIndicesUpdatedDelegate);
            this._subGeometry.removeEventListener(SubGeometryEvent.VERTICES_UPDATED, this._onVerticesUpdatedDelegate);
        }
        this._subGeometry = this._pGetSubGeometry();
        this._concatenateArrays = this._subGeometry.concatenateArrays;
        if (this._subGeometry) {
            if (this._level == 0)
                this._subGeometry.addEventListener(SubGeometryEvent.INDICES_UPDATED, this._onIndicesUpdatedDelegate);
            this._subGeometry.addEventListener(SubGeometryEvent.VERTICES_UPDATED, this._onVerticesUpdatedDelegate);
        }
        //dispose
        //			if (this._indexData) {
        //				this._indexData.dispose(); //TODO where is a good place to dispose?
        //				this._indexData = null;
        //			}
        //			for (var dataType in this._vertexData) {
        //				(<VertexData> this._vertexData[dataType]).dispose(); //TODO where is a good place to dispose?
        //				this._vertexData[dataType] = null;
        //			}
        this._geometryDirty = false;
        //specific vertex data types have to be invalidated in the specific renderable
    };
    /**
     * //TODO
     *
     * @private
     */
    RenderableBase.prototype._updateIndexData = function () {
        this._iFillIndexData(this._indexOffset);
        this._indexDataDirty = false;
    };
    /**
     * //TODO
     *
     * @param dataType
     * @private
     */
    RenderableBase.prototype._updateVertexData = function (dataType) {
        this._vertexOffset[dataType] = this._subGeometry.getOffset(dataType);
        if (this._subGeometry.concatenateArrays)
            dataType = SubGeometryBase.VERTEX_DATA;
        this._vertexData[dataType] = VertexDataPool.getItem(this._subGeometry, this.getIndexData(), dataType);
        this._pVertexDataDirty[dataType] = false;
    };
    /**
     * //TODO
     *
     * @param event
     * @private
     */
    RenderableBase.prototype._onIndicesUpdated = function (event) {
        this.invalidateIndexData();
    };
    /**
     * //TODO
     *
     * @param event
     * @private
     */
    RenderableBase.prototype._onVerticesUpdated = function (event) {
        this._concatenateArrays = event.target.concatenateArrays;
        this.invalidateVertexData(event.dataType);
    };
    RenderableBase.prototype._onRenderObjectOwnerUpdated = function (event) {
        //TODO flag unused renderObjects for deletion
        this.renderObjectOwner = event.renderObjectOwner;
    };
    return RenderableBase;
})();
module.exports = RenderableBase;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9wb29sL3JlbmRlcmFibGViYXNlLnRzIl0sIm5hbWVzIjpbIlJlbmRlcmFibGVCYXNlIiwiUmVuZGVyYWJsZUJhc2UuY29uc3RydWN0b3IiLCJSZW5kZXJhYmxlQmFzZS5vdmVyZmxvdyIsIlJlbmRlcmFibGVCYXNlLm51bVRyaWFuZ2xlcyIsIlJlbmRlcmFibGVCYXNlLmdldEluZGV4RGF0YSIsIlJlbmRlcmFibGVCYXNlLmdldFZlcnRleERhdGEiLCJSZW5kZXJhYmxlQmFzZS5nZXRWZXJ0ZXhPZmZzZXQiLCJSZW5kZXJhYmxlQmFzZS5kaXNwb3NlIiwiUmVuZGVyYWJsZUJhc2UuaW52YWxpZGF0ZUdlb21ldHJ5IiwiUmVuZGVyYWJsZUJhc2UuaW52YWxpZGF0ZUluZGV4RGF0YSIsIlJlbmRlcmFibGVCYXNlLmludmFsaWRhdGVWZXJ0ZXhEYXRhIiwiUmVuZGVyYWJsZUJhc2UuX3BHZXRTdWJHZW9tZXRyeSIsIlJlbmRlcmFibGVCYXNlLl9pR2V0VmVydGV4Q29kZSIsIlJlbmRlcmFibGVCYXNlLl9pR2V0RnJhZ21lbnRDb2RlIiwiUmVuZGVyYWJsZUJhc2UuX2lGaWxsSW5kZXhEYXRhIiwiUmVuZGVyYWJsZUJhc2UuX3BHZXRPdmVyZmxvd1JlbmRlcmFibGUiLCJSZW5kZXJhYmxlQmFzZS5faUFjdGl2YXRlIiwiUmVuZGVyYWJsZUJhc2UuX2lSZW5kZXIiLCJSZW5kZXJhYmxlQmFzZS5faURlYWN0aXZhdGUiLCJSZW5kZXJhYmxlQmFzZS5fdXBkYXRlR2VvbWV0cnkiLCJSZW5kZXJhYmxlQmFzZS5fdXBkYXRlSW5kZXhEYXRhIiwiUmVuZGVyYWJsZUJhc2UuX3VwZGF0ZVZlcnRleERhdGEiLCJSZW5kZXJhYmxlQmFzZS5fb25JbmRpY2VzVXBkYXRlZCIsIlJlbmRlcmFibGVCYXNlLl9vblZlcnRpY2VzVXBkYXRlZCIsIlJlbmRlcmFibGVCYXNlLl9vblJlbmRlck9iamVjdE93bmVyVXBkYXRlZCJdLCJtYXBwaW5n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O09BS0dBO0lBQ0tBLDBDQUFpQkEsR0FBekJBLFVBQTBCQSxLQUFzQkE7UUFFL0NzQixJQUFJQSxDQUFDQSxtQkFBbUJBLEVBQUVBLENBQUNBO0lBQzVCQSxDQUFDQTtJQUVEdEI7Ozs7O09BS0dBO0lBQ0tBLDJDQUFrQkEsR0FBMUJBLFVBQTJCQSxLQUFzQkE7UUFFaER1QixJQUFJQSxDQUFDQSxrQkFBa0JBLEdBQXNCQSxLQUFLQSxDQUFDQSxNQUFPQSxDQUFDQSxpQkFBaUJBLENBQUNBO1FBRTdFQSxJQUFJQSxDQUFDQSxvQkFBb0JBLENBQUNBLEtBQUtBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO0lBQzNDQSxDQUFDQTtJQUVPdkIsb0RBQTJCQSxHQUFuQ0EsVUFBb0NBLEtBQTBCQTtRQUU3RHdCLEFBQ0FBLDZDQUQ2Q0E7UUFDN0NBLElBQUlBLENBQUNBLGlCQUFpQkEsR0FBR0EsS0FBS0EsQ0FBQ0EsaUJBQWlCQSxDQUFDQTtJQUNsREEsQ0FBQ0E7SUFDRnhCLHFCQUFDQTtBQUFEQSxDQW5aQSxBQW1aQ0EsSUFBQTtBQUVELEFBQXdCLGlCQUFmLGNBQWMsQ0FBQyIsImZpbGUiOiJwb29sL1JlbmRlcmFibGVCYXNlLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNYXRyaXgzRFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9nZW9tL01hdHJpeDNEXCIpO1xuaW1wb3J0IEFic3RyYWN0TWV0aG9kRXJyb3JcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZXJyb3JzL0Fic3RyYWN0TWV0aG9kRXJyb3JcIik7XG5cbmltcG9ydCBJUmVuZGVyYWJsZU93bmVyXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvYmFzZS9JUmVuZGVyYWJsZU93bmVyXCIpO1xuaW1wb3J0IElSZW5kZXJPYmplY3RPd25lclx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9iYXNlL0lSZW5kZXJPYmplY3RPd25lclwiKTtcbmltcG9ydCBTdWJHZW9tZXRyeUJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9iYXNlL1N1Ykdlb21ldHJ5QmFzZVwiKTtcbmltcG9ydCBUcmlhbmdsZVN1Ykdlb21ldHJ5XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2Jhc2UvVHJpYW5nbGVTdWJHZW9tZXRyeVwiKTtcbmltcG9ydCBJUmVuZGVyYWJsZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvcG9vbC9JUmVuZGVyYWJsZVwiKTtcbmltcG9ydCBJRW50aXR5XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2VudGl0aWVzL0lFbnRpdHlcIik7XG5pbXBvcnQgQ2FtZXJhXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2VudGl0aWVzL0NhbWVyYVwiKTtcbmltcG9ydCBSZW5kZXJhYmxlT3duZXJFdmVudFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9ldmVudHMvUmVuZGVyYWJsZU93bmVyRXZlbnRcIik7XG5pbXBvcnQgU3ViR2VvbWV0cnlFdmVudFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2V2ZW50cy9TdWJHZW9tZXRyeUV2ZW50XCIpO1xuaW1wb3J0IElSZW5kZXJlclx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvcmVuZGVyL0lSZW5kZXJlclwiKTtcbmltcG9ydCBNYXRlcmlhbEJhc2VcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL21hdGVyaWFscy9NYXRlcmlhbEJhc2VcIik7XG5cbmltcG9ydCBJbmRleERhdGFcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL3Bvb2wvSW5kZXhEYXRhXCIpO1xuaW1wb3J0IEluZGV4RGF0YVBvb2xcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9wb29sL0luZGV4RGF0YVBvb2xcIik7XG5pbXBvcnQgVmVydGV4RGF0YVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvcG9vbC9WZXJ0ZXhEYXRhXCIpO1xuaW1wb3J0IFZlcnRleERhdGFQb29sXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvcG9vbC9WZXJ0ZXhEYXRhUG9vbFwiKTtcbmltcG9ydCBTdGFnZVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL1N0YWdlXCIpO1xuXG5pbXBvcnQgU2hhZGVyT2JqZWN0QmFzZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2NvbXBpbGF0aW9uL1NoYWRlck9iamVjdEJhc2VcIik7XG5pbXBvcnQgU2hhZGVyUmVnaXN0ZXJDYWNoZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9TaGFkZXJSZWdpc3RlckNhY2hlXCIpO1xuaW1wb3J0IFNoYWRlclJlZ2lzdGVyRGF0YVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9TaGFkZXJSZWdpc3RlckRhdGFcIik7XG5pbXBvcnQgUmVuZGVyYWJsZVBvb2xCYXNlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL3Bvb2wvUmVuZGVyYWJsZVBvb2xCYXNlXCIpO1xuaW1wb3J0IFJlbmRlck9iamVjdEJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9SZW5kZXJPYmplY3RCYXNlXCIpO1xuaW1wb3J0IFJlbmRlclBhc3NCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvcGFzc2VzL1JlbmRlclBhc3NCYXNlXCIpO1xuXG4vKipcbiAqIEBjbGFzcyBSZW5kZXJhYmxlTGlzdEl0ZW1cbiAqL1xuY2xhc3MgUmVuZGVyYWJsZUJhc2UgaW1wbGVtZW50cyBJUmVuZGVyYWJsZVxue1xuXG5cdHByaXZhdGUgX29uSW5kaWNlc1VwZGF0ZWREZWxlZ2F0ZTooZXZlbnQ6U3ViR2VvbWV0cnlFdmVudCkgPT4gdm9pZDtcblx0cHJpdmF0ZSBfb25WZXJ0aWNlc1VwZGF0ZWREZWxlZ2F0ZTooZXZlbnQ6U3ViR2VvbWV0cnlFdmVudCkgPT4gdm9pZDtcblx0cHJpdmF0ZSBfb25SZW5kZXJPYmplY3RPd25lclVwZGF0ZWREZWxlZ2F0ZTooZXZlbnQ6UmVuZGVyYWJsZU93bmVyRXZlbnQpID0+IHZvaWQ7XG5cblx0cHJpdmF0ZSBfc3ViR2VvbWV0cnk6U3ViR2VvbWV0cnlCYXNlO1xuXHRwcml2YXRlIF9nZW9tZXRyeURpcnR5OmJvb2xlYW4gPSB0cnVlO1xuXHRwcml2YXRlIF9pbmRleERhdGE6SW5kZXhEYXRhO1xuXHRwcml2YXRlIF9pbmRleERhdGFEaXJ0eTpib29sZWFuID0gdHJ1ZTtcblx0cHJpdmF0ZSBfdmVydGV4RGF0YTpPYmplY3QgPSBuZXcgT2JqZWN0KCk7XG5cdHB1YmxpYyBfcFZlcnRleERhdGFEaXJ0eTpPYmplY3QgPSBuZXcgT2JqZWN0KCk7XG5cdHByaXZhdGUgX3ZlcnRleE9mZnNldDpPYmplY3QgPSBuZXcgT2JqZWN0KCk7XG5cblx0cHVibGljIF9sZXZlbDpudW1iZXI7XG5cdHByaXZhdGUgX2luZGV4T2Zmc2V0Om51bWJlcjtcblx0cHJpdmF0ZSBfb3ZlcmZsb3c6UmVuZGVyYWJsZUJhc2U7XG5cdHByaXZhdGUgX251bVRyaWFuZ2xlczpudW1iZXI7XG5cdHByaXZhdGUgX2NvbmNhdGVuYXRlQXJyYXlzOmJvb2xlYW47XG5cblx0cHVibGljIEpPSU5UX0lOREVYX0ZPUk1BVDpzdHJpbmc7XG5cdHB1YmxpYyBKT0lOVF9XRUlHSFRfRk9STUFUOnN0cmluZztcblxuXHQvKipcblx0ICpcblx0ICovXG5cdHB1YmxpYyBfcG9vbDpSZW5kZXJhYmxlUG9vbEJhc2U7XG5cblx0cHVibGljIF9zdGFnZTpTdGFnZTtcblxuXHQvKipcblx0ICpcblx0ICovXG5cdHB1YmxpYyBnZXQgb3ZlcmZsb3coKTpSZW5kZXJhYmxlQmFzZVxuXHR7XG5cdFx0aWYgKHRoaXMuX2luZGV4RGF0YURpcnR5KVxuXHRcdFx0dGhpcy5fdXBkYXRlSW5kZXhEYXRhKCk7XG5cblx0XHRyZXR1cm4gdGhpcy5fb3ZlcmZsb3c7XG5cdH1cblxuXHQvKipcblx0ICpcblx0ICovXG5cdHB1YmxpYyBnZXQgbnVtVHJpYW5nbGVzKCk6bnVtYmVyXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5fbnVtVHJpYW5nbGVzO1xuXHR9XG5cblx0LyoqXG5cdCAqXG5cdCAqL1xuXHRwdWJsaWMgbmV4dDpSZW5kZXJhYmxlQmFzZTtcblxuXHRwdWJsaWMgaWQ6bnVtYmVyO1xuXG5cdC8qKlxuXHQgKlxuXHQgKi9cblx0cHVibGljIHJlbmRlck9iamVjdElkOm51bWJlcjtcblxuXHQvKipcblx0ICpcblx0ICovXG5cdHB1YmxpYyByZW5kZXJPcmRlcklkOm51bWJlcjtcblxuXHQvKipcblx0ICpcblx0ICovXG5cdHB1YmxpYyB6SW5kZXg6bnVtYmVyO1xuXG5cdC8qKlxuXHQgKlxuXHQgKi9cblx0cHVibGljIGNhc2NhZGVkOmJvb2xlYW47XG5cblx0LyoqXG5cdCAqXG5cdCAqL1xuXHRwdWJsaWMgcmVuZGVyU2NlbmVUcmFuc2Zvcm06TWF0cml4M0Q7XG5cblx0LyoqXG5cdCAqXG5cdCAqL1xuXHRwdWJsaWMgc291cmNlRW50aXR5OklFbnRpdHk7XG5cblx0LyoqXG5cdCAqXG5cdCAqL1xuXHRwdWJsaWMgcmVuZGVyYWJsZU93bmVyOklSZW5kZXJhYmxlT3duZXI7XG5cblxuXHQvKipcblx0ICpcblx0ICovXG5cdHB1YmxpYyByZW5kZXJPYmplY3RPd25lcjpJUmVuZGVyT2JqZWN0T3duZXI7XG5cblx0LyoqXG5cdCAqXG5cdCAqL1xuXHRwdWJsaWMgcmVuZGVyT2JqZWN0OlJlbmRlck9iamVjdEJhc2U7XG5cblx0LyoqXG5cdCAqXG5cdCAqL1xuXHRwdWJsaWMgZ2V0SW5kZXhEYXRhKCk6SW5kZXhEYXRhXG5cdHtcblx0XHRpZiAodGhpcy5faW5kZXhEYXRhRGlydHkpXG5cdFx0XHR0aGlzLl91cGRhdGVJbmRleERhdGEoKTtcblxuXHRcdHJldHVybiB0aGlzLl9pbmRleERhdGE7XG5cdH1cblxuXHQvKipcblx0ICpcblx0ICovXG5cdHB1YmxpYyBnZXRWZXJ0ZXhEYXRhKGRhdGFUeXBlOnN0cmluZyk6VmVydGV4RGF0YVxuXHR7XG5cdFx0aWYgKHRoaXMuX2luZGV4RGF0YURpcnR5KVxuXHRcdFx0dGhpcy5fdXBkYXRlSW5kZXhEYXRhKCk7XG5cblx0XHRpZiAodGhpcy5fcFZlcnRleERhdGFEaXJ0eVtkYXRhVHlwZV0pXG5cdFx0XHR0aGlzLl91cGRhdGVWZXJ0ZXhEYXRhKGRhdGFUeXBlKTtcblxuXHRcdHJldHVybiB0aGlzLl92ZXJ0ZXhEYXRhW3RoaXMuX2NvbmNhdGVuYXRlQXJyYXlzPyBUcmlhbmdsZVN1Ykdlb21ldHJ5LlZFUlRFWF9EQVRBIDogZGF0YVR5cGVdXG5cdH1cblxuXHQvKipcblx0ICpcblx0ICovXG5cdHB1YmxpYyBnZXRWZXJ0ZXhPZmZzZXQoZGF0YVR5cGU6c3RyaW5nKTpudW1iZXJcblx0e1xuXHRcdGlmICh0aGlzLl9pbmRleERhdGFEaXJ0eSlcblx0XHRcdHRoaXMuX3VwZGF0ZUluZGV4RGF0YSgpO1xuXG5cdFx0aWYgKHRoaXMuX3BWZXJ0ZXhEYXRhRGlydHlbZGF0YVR5cGVdKVxuXHRcdFx0dGhpcy5fdXBkYXRlVmVydGV4RGF0YShkYXRhVHlwZSk7XG5cblx0XHRyZXR1cm4gdGhpcy5fdmVydGV4T2Zmc2V0W2RhdGFUeXBlXTtcblx0fVxuXG5cdC8qKlxuXHQgKlxuXHQgKiBAcGFyYW0gc291cmNlRW50aXR5XG5cdCAqIEBwYXJhbSByZW5kZXJhYmxlT3duZXJcblx0ICogQHBhcmFtIHN1Ykdlb21ldHJ5XG5cdCAqIEBwYXJhbSBhbmltYXRpb25TdWJHZW9tZXRyeVxuXHQgKi9cblx0Y29uc3RydWN0b3IocG9vbDpSZW5kZXJhYmxlUG9vbEJhc2UsIHNvdXJjZUVudGl0eTpJRW50aXR5LCByZW5kZXJhYmxlT3duZXI6SVJlbmRlcmFibGVPd25lciwgcmVuZGVyT2JqZWN0T3duZXI6SVJlbmRlck9iamVjdE93bmVyLCBzdGFnZTpTdGFnZSwgbGV2ZWw6bnVtYmVyID0gMCwgaW5kZXhPZmZzZXQ6bnVtYmVyID0gMClcblx0e1xuXHRcdHRoaXMuX29uSW5kaWNlc1VwZGF0ZWREZWxlZ2F0ZSA9IChldmVudDpTdWJHZW9tZXRyeUV2ZW50KSA9PiB0aGlzLl9vbkluZGljZXNVcGRhdGVkKGV2ZW50KTtcblx0XHR0aGlzLl9vblZlcnRpY2VzVXBkYXRlZERlbGVnYXRlID0gKGV2ZW50OlN1Ykdlb21ldHJ5RXZlbnQpID0+IHRoaXMuX29uVmVydGljZXNVcGRhdGVkKGV2ZW50KTtcblx0XHR0aGlzLl9vblJlbmRlck9iamVjdE93bmVyVXBkYXRlZERlbGVnYXRlID0gKGV2ZW50OlJlbmRlcmFibGVPd25lckV2ZW50KSA9PiB0aGlzLl9vblJlbmRlck9iamVjdE93bmVyVXBkYXRlZChldmVudCk7XG5cblx0XHQvL3N0b3JlIGEgcmVmZXJlbmNlIHRvIHRoZSBwb29sIGZvciBsYXRlciBkaXNwb3NhbFxuXHRcdHRoaXMuX3Bvb2wgPSBwb29sO1xuXHRcdHRoaXMuX3N0YWdlID0gc3RhZ2U7XG5cblx0XHQvL3JlZmVyZW5jZSB0byBsZXZlbCBvZiBvdmVyZmxvd1xuXHRcdHRoaXMuX2xldmVsID0gbGV2ZWw7XG5cblx0XHQvL3JlZmVyZW5jZSB0byB0aGUgb2Zmc2V0IG9uIGluZGljZXMgKGlmIHRoaXMgaXMgYW4gb3ZlcmZsb3cgcmVuZGVyYWJsZSlcblx0XHR0aGlzLl9pbmRleE9mZnNldCA9IGluZGV4T2Zmc2V0O1xuXG5cdFx0dGhpcy5zb3VyY2VFbnRpdHkgPSBzb3VyY2VFbnRpdHk7XG5cblx0XHR0aGlzLnJlbmRlcmFibGVPd25lciA9IHJlbmRlcmFibGVPd25lcjtcblxuXHRcdHRoaXMucmVuZGVyYWJsZU93bmVyLmFkZEV2ZW50TGlzdGVuZXIoUmVuZGVyYWJsZU93bmVyRXZlbnQuUkVOREVSX09CSkVDVF9PV05FUl9VUERBVEVELCB0aGlzLl9vblJlbmRlck9iamVjdE93bmVyVXBkYXRlZERlbGVnYXRlKVxuXG5cdFx0dGhpcy5yZW5kZXJPYmplY3RPd25lciA9IHJlbmRlck9iamVjdE93bmVyO1xuXHR9XG5cblx0cHVibGljIGRpc3Bvc2UoKVxuXHR7XG5cdFx0dGhpcy5fcG9vbC5kaXNwb3NlSXRlbSh0aGlzLnJlbmRlcmFibGVPd25lcik7XG5cblx0XHR0aGlzLl9pbmRleERhdGEuZGlzcG9zZSgpO1xuXHRcdHRoaXMuX2luZGV4RGF0YSA9IG51bGw7XG5cblx0XHRmb3IgKHZhciBkYXRhVHlwZSBpbiB0aGlzLl92ZXJ0ZXhEYXRhKSB7XG5cdFx0XHQoPFZlcnRleERhdGE+IHRoaXMuX3ZlcnRleERhdGFbZGF0YVR5cGVdKS5kaXNwb3NlKCk7XG5cdFx0XHR0aGlzLl92ZXJ0ZXhEYXRhW2RhdGFUeXBlXSA9IG51bGw7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuX292ZXJmbG93KSB7XG5cdFx0XHR0aGlzLl9vdmVyZmxvdy5kaXNwb3NlKCk7XG5cdFx0XHR0aGlzLl9vdmVyZmxvdyA9IG51bGw7XG5cdFx0fVxuXHR9XG5cblx0cHVibGljIGludmFsaWRhdGVHZW9tZXRyeSgpXG5cdHtcblx0XHR0aGlzLl9nZW9tZXRyeURpcnR5ID0gdHJ1ZTtcblxuXHRcdC8vaW52YWxpZGF0ZSBpbmRpY2VzXG5cdFx0aWYgKHRoaXMuX2xldmVsID09IDApXG5cdFx0XHR0aGlzLl9pbmRleERhdGFEaXJ0eSA9IHRydWU7XG5cblx0XHRpZiAodGhpcy5fb3ZlcmZsb3cpXG5cdFx0XHR0aGlzLl9vdmVyZmxvdy5pbnZhbGlkYXRlR2VvbWV0cnkoKTtcblx0fVxuXG5cdC8qKlxuXHQgKlxuXHQgKi9cblx0cHVibGljIGludmFsaWRhdGVJbmRleERhdGEoKVxuXHR7XG5cdFx0dGhpcy5faW5kZXhEYXRhRGlydHkgPSB0cnVlO1xuXHR9XG5cblx0LyoqXG5cdCAqIC8vVE9ET1xuXHQgKlxuXHQgKiBAcGFyYW0gZGF0YVR5cGVcblx0ICovXG5cdHB1YmxpYyBpbnZhbGlkYXRlVmVydGV4RGF0YShkYXRhVHlwZTpzdHJpbmcpXG5cdHtcblx0XHR0aGlzLl9wVmVydGV4RGF0YURpcnR5W2RhdGFUeXBlXSA9IHRydWU7XG5cdH1cblxuXHRwdWJsaWMgX3BHZXRTdWJHZW9tZXRyeSgpOlN1Ykdlb21ldHJ5QmFzZVxuXHR7XG5cdFx0dGhyb3cgbmV3IEFic3RyYWN0TWV0aG9kRXJyb3IoKTtcblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMgX2lHZXRWZXJ0ZXhDb2RlKHNoYWRlck9iamVjdDpTaGFkZXJPYmplY3RCYXNlLCByZWdpc3RlckNhY2hlOlNoYWRlclJlZ2lzdGVyQ2FjaGUsIHNoYXJlZFJlZ2lzdGVyczpTaGFkZXJSZWdpc3RlckRhdGEpOnN0cmluZ1xuXHR7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIF9pR2V0RnJhZ21lbnRDb2RlKHNoYWRlck9iamVjdDpTaGFkZXJPYmplY3RCYXNlLCByZWdpc3RlckNhY2hlOlNoYWRlclJlZ2lzdGVyQ2FjaGUsIHNoYXJlZFJlZ2lzdGVyczpTaGFkZXJSZWdpc3RlckRhdGEpOnN0cmluZ1xuXHR7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblxuXHQvKipcblx0ICogLy9UT0RPXG5cdCAqXG5cdCAqIEBwYXJhbSBzdWJHZW9tZXRyeVxuXHQgKiBAcGFyYW0gb2Zmc2V0XG5cdCAqIEBpbnRlcm5hbFxuXHQgKi9cblx0cHVibGljIF9pRmlsbEluZGV4RGF0YShpbmRleE9mZnNldDpudW1iZXIpXG5cdHtcblx0XHRpZiAodGhpcy5fZ2VvbWV0cnlEaXJ0eSlcblx0XHRcdHRoaXMuX3VwZGF0ZUdlb21ldHJ5KCk7XG5cblx0XHR0aGlzLl9pbmRleERhdGEgPSBJbmRleERhdGFQb29sLmdldEl0ZW0odGhpcy5fc3ViR2VvbWV0cnksIHRoaXMuX2xldmVsLCBpbmRleE9mZnNldCk7XG5cblx0XHR0aGlzLl9udW1UcmlhbmdsZXMgPSB0aGlzLl9pbmRleERhdGEuZGF0YS5sZW5ndGgvMztcblxuXHRcdGluZGV4T2Zmc2V0ID0gdGhpcy5faW5kZXhEYXRhLm9mZnNldDtcblxuXHRcdC8vY2hlY2sgaWYgdGhlcmUgaXMgbW9yZSB0byBzcGxpdFxuXHRcdGlmIChpbmRleE9mZnNldCA8IHRoaXMuX3N1Ykdlb21ldHJ5LmluZGljZXMubGVuZ3RoKSB7XG5cdFx0XHRpZiAoIXRoaXMuX292ZXJmbG93KVxuXHRcdFx0XHR0aGlzLl9vdmVyZmxvdyA9IHRoaXMuX3BHZXRPdmVyZmxvd1JlbmRlcmFibGUoaW5kZXhPZmZzZXQpO1xuXG5cdFx0XHR0aGlzLl9vdmVyZmxvdy5faUZpbGxJbmRleERhdGEoaW5kZXhPZmZzZXQpO1xuXHRcdH0gZWxzZSBpZiAodGhpcy5fb3ZlcmZsb3cpIHtcblx0XHRcdHRoaXMuX292ZXJmbG93LmRpc3Bvc2UoKTtcblx0XHRcdHRoaXMuX292ZXJmbG93ID0gbnVsbDtcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgX3BHZXRPdmVyZmxvd1JlbmRlcmFibGUoaW5kZXhPZmZzZXQ6bnVtYmVyKTpSZW5kZXJhYmxlQmFzZVxuXHR7XG5cdFx0dGhyb3cgbmV3IEFic3RyYWN0TWV0aG9kRXJyb3IoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSByZW5kZXIgc3RhdGUgZm9yIHRoZSBwYXNzIHRoYXQgaXMgaW5kZXBlbmRlbnQgb2YgdGhlIHJlbmRlcmVkIG9iamVjdC4gVGhpcyBuZWVkcyB0byBiZSBjYWxsZWQgYmVmb3JlXG5cdCAqIGNhbGxpbmcgcmVuZGVyUGFzcy4gQmVmb3JlIGFjdGl2YXRpbmcgYSBwYXNzLCB0aGUgcHJldmlvdXNseSB1c2VkIHBhc3MgbmVlZHMgdG8gYmUgZGVhY3RpdmF0ZWQuXG5cdCAqIEBwYXJhbSBzdGFnZSBUaGUgU3RhZ2Ugb2JqZWN0IHdoaWNoIGlzIGN1cnJlbnRseSB1c2VkIGZvciByZW5kZXJpbmcuXG5cdCAqIEBwYXJhbSBjYW1lcmEgVGhlIGNhbWVyYSBmcm9tIHdoaWNoIHRoZSBzY2VuZSBpcyB2aWV3ZWQuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRwdWJsaWMgX2lBY3RpdmF0ZShwYXNzOlJlbmRlclBhc3NCYXNlLCBjYW1lcmE6Q2FtZXJhKVxuXHR7XG5cdFx0cGFzcy5faUFjdGl2YXRlKGNhbWVyYSk7XG5cdH1cblxuXHQvKipcblx0ICogUmVuZGVycyBhbiBvYmplY3QgdG8gdGhlIGN1cnJlbnQgcmVuZGVyIHRhcmdldC5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICovXG5cdHB1YmxpYyBfaVJlbmRlcihwYXNzOlJlbmRlclBhc3NCYXNlLCBjYW1lcmE6Q2FtZXJhLCB2aWV3UHJvamVjdGlvbjpNYXRyaXgzRClcblx0e1xuXHRcdHBhc3MuX2lSZW5kZXIodGhpcywgY2FtZXJhLCB2aWV3UHJvamVjdGlvbik7XG5cdH1cblxuXHQvKipcblx0ICogQ2xlYXJzIHRoZSByZW5kZXIgc3RhdGUgZm9yIHRoZSBwYXNzLiBUaGlzIG5lZWRzIHRvIGJlIGNhbGxlZCBiZWZvcmUgYWN0aXZhdGluZyBhbm90aGVyIHBhc3MuXG5cdCAqIEBwYXJhbSBzdGFnZSBUaGUgU3RhZ2UgdXNlZCBmb3IgcmVuZGVyaW5nXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRwdWJsaWMgX2lEZWFjdGl2YXRlKHBhc3M6UmVuZGVyUGFzc0Jhc2UpXG5cdHtcblx0XHRwYXNzLl9pRGVhY3RpdmF0ZSgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIC8vVE9ET1xuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cHJpdmF0ZSBfdXBkYXRlR2VvbWV0cnkoKVxuXHR7XG5cdFx0aWYgKHRoaXMuX3N1Ykdlb21ldHJ5KSB7XG5cdFx0XHRpZiAodGhpcy5fbGV2ZWwgPT0gMClcblx0XHRcdFx0dGhpcy5fc3ViR2VvbWV0cnkucmVtb3ZlRXZlbnRMaXN0ZW5lcihTdWJHZW9tZXRyeUV2ZW50LklORElDRVNfVVBEQVRFRCwgdGhpcy5fb25JbmRpY2VzVXBkYXRlZERlbGVnYXRlKTtcblx0XHRcdHRoaXMuX3N1Ykdlb21ldHJ5LnJlbW92ZUV2ZW50TGlzdGVuZXIoU3ViR2VvbWV0cnlFdmVudC5WRVJUSUNFU19VUERBVEVELCB0aGlzLl9vblZlcnRpY2VzVXBkYXRlZERlbGVnYXRlKTtcblx0XHR9XG5cblx0XHR0aGlzLl9zdWJHZW9tZXRyeSA9IHRoaXMuX3BHZXRTdWJHZW9tZXRyeSgpO1xuXG5cdFx0dGhpcy5fY29uY2F0ZW5hdGVBcnJheXMgPSB0aGlzLl9zdWJHZW9tZXRyeS5jb25jYXRlbmF0ZUFycmF5cztcblxuXHRcdGlmICh0aGlzLl9zdWJHZW9tZXRyeSkge1xuXHRcdFx0aWYgKHRoaXMuX2xldmVsID09IDApXG5cdFx0XHRcdHRoaXMuX3N1Ykdlb21ldHJ5LmFkZEV2ZW50TGlzdGVuZXIoU3ViR2VvbWV0cnlFdmVudC5JTkRJQ0VTX1VQREFURUQsIHRoaXMuX29uSW5kaWNlc1VwZGF0ZWREZWxlZ2F0ZSk7XG5cdFx0XHR0aGlzLl9zdWJHZW9tZXRyeS5hZGRFdmVudExpc3RlbmVyKFN1Ykdlb21ldHJ5RXZlbnQuVkVSVElDRVNfVVBEQVRFRCwgdGhpcy5fb25WZXJ0aWNlc1VwZGF0ZWREZWxlZ2F0ZSk7XG5cdFx0fVxuXG5cdFx0Ly9kaXNwb3NlXG4vL1x0XHRcdGlmICh0aGlzLl9pbmRleERhdGEpIHtcbi8vXHRcdFx0XHR0aGlzLl9pbmRleERhdGEuZGlzcG9zZSgpOyAvL1RPRE8gd2hlcmUgaXMgYSBnb29kIHBsYWNlIHRvIGRpc3Bvc2U/XG4vL1x0XHRcdFx0dGhpcy5faW5kZXhEYXRhID0gbnVsbDtcbi8vXHRcdFx0fVxuXG4vL1x0XHRcdGZvciAodmFyIGRhdGFUeXBlIGluIHRoaXMuX3ZlcnRleERhdGEpIHtcbi8vXHRcdFx0XHQoPFZlcnRleERhdGE+IHRoaXMuX3ZlcnRleERhdGFbZGF0YVR5cGVdKS5kaXNwb3NlKCk7IC8vVE9ETyB3aGVyZSBpcyBhIGdvb2QgcGxhY2UgdG8gZGlzcG9zZT9cbi8vXHRcdFx0XHR0aGlzLl92ZXJ0ZXhEYXRhW2RhdGFUeXBlXSA9IG51bGw7XG4vL1x0XHRcdH1cblxuXHRcdHRoaXMuX2dlb21ldHJ5RGlydHkgPSBmYWxzZTtcblxuXHRcdC8vc3BlY2lmaWMgdmVydGV4IGRhdGEgdHlwZXMgaGF2ZSB0byBiZSBpbnZhbGlkYXRlZCBpbiB0aGUgc3BlY2lmaWMgcmVuZGVyYWJsZVxuXHR9XG5cblx0LyoqXG5cdCAqIC8vVE9ET1xuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cHJpdmF0ZSBfdXBkYXRlSW5kZXhEYXRhKClcblx0e1xuXHRcdHRoaXMuX2lGaWxsSW5kZXhEYXRhKHRoaXMuX2luZGV4T2Zmc2V0KTtcblxuXHRcdHRoaXMuX2luZGV4RGF0YURpcnR5ID0gZmFsc2U7XG5cdH1cblxuXHQvKipcblx0ICogLy9UT0RPXG5cdCAqXG5cdCAqIEBwYXJhbSBkYXRhVHlwZVxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cHJpdmF0ZSBfdXBkYXRlVmVydGV4RGF0YShkYXRhVHlwZTpzdHJpbmcpXG5cdHtcblx0XHR0aGlzLl92ZXJ0ZXhPZmZzZXRbZGF0YVR5cGVdID0gdGhpcy5fc3ViR2VvbWV0cnkuZ2V0T2Zmc2V0KGRhdGFUeXBlKTtcblxuXHRcdGlmICh0aGlzLl9zdWJHZW9tZXRyeS5jb25jYXRlbmF0ZUFycmF5cylcblx0XHRcdGRhdGFUeXBlID0gU3ViR2VvbWV0cnlCYXNlLlZFUlRFWF9EQVRBO1xuXG5cdFx0dGhpcy5fdmVydGV4RGF0YVtkYXRhVHlwZV0gPSBWZXJ0ZXhEYXRhUG9vbC5nZXRJdGVtKHRoaXMuX3N1Ykdlb21ldHJ5LCB0aGlzLmdldEluZGV4RGF0YSgpLCBkYXRhVHlwZSk7XG5cblx0XHR0aGlzLl9wVmVydGV4RGF0YURpcnR5W2RhdGFUeXBlXSA9IGZhbHNlO1xuXHR9XG5cblx0LyoqXG5cdCAqIC8vVE9ET1xuXHQgKlxuXHQgKiBAcGFyYW0gZXZlbnRcblx0ICogQHByaXZhdGVcblx0ICovXG5cdHByaXZhdGUgX29uSW5kaWNlc1VwZGF0ZWQoZXZlbnQ6U3ViR2VvbWV0cnlFdmVudClcblx0e1xuXHRcdHRoaXMuaW52YWxpZGF0ZUluZGV4RGF0YSgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIC8vVE9ET1xuXHQgKlxuXHQgKiBAcGFyYW0gZXZlbnRcblx0ICogQHByaXZhdGVcblx0ICovXG5cdHByaXZhdGUgX29uVmVydGljZXNVcGRhdGVkKGV2ZW50OlN1Ykdlb21ldHJ5RXZlbnQpXG5cdHtcblx0XHR0aGlzLl9jb25jYXRlbmF0ZUFycmF5cyA9ICg8U3ViR2VvbWV0cnlCYXNlPiBldmVudC50YXJnZXQpLmNvbmNhdGVuYXRlQXJyYXlzO1xuXG5cdFx0dGhpcy5pbnZhbGlkYXRlVmVydGV4RGF0YShldmVudC5kYXRhVHlwZSk7XG5cdH1cblxuXHRwcml2YXRlIF9vblJlbmRlck9iamVjdE93bmVyVXBkYXRlZChldmVudDpSZW5kZXJhYmxlT3duZXJFdmVudClcblx0e1xuXHRcdC8vVE9ETyBmbGFnIHVudXNlZCByZW5kZXJPYmplY3RzIGZvciBkZWxldGlvblxuXHRcdHRoaXMucmVuZGVyT2JqZWN0T3duZXIgPSBldmVudC5yZW5kZXJPYmplY3RPd25lcjtcblx0fVxufVxuXG5leHBvcnQgPSBSZW5kZXJhYmxlQmFzZTsiXX0=