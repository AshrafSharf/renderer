var BillboardRenderable = require("awayjs-renderergl/lib/pool/BillboardRenderable");
var LineSubMeshRenderable = require("awayjs-renderergl/lib/pool/LineSubMeshRenderable");
var TriangleSubMeshRenderable = require("awayjs-renderergl/lib/pool/TriangleSubMeshRenderable");
var RenderablePoolBase = require("awayjs-renderergl/lib/pool/RenderablePoolBase");
/**
 * RendererPoolBase forms an abstract base class for classes that are used in the rendering pipeline to render the
 * contents of a partition
 *
 * @class away.render.RendererPoolBase
 */
var RendererPoolBase = (function () {
    /**
     * Creates a new RendererPoolBase object.
     */
    function RendererPoolBase(renderer) {
        this._renderer = renderer;
    }
    Object.defineProperty(RendererPoolBase.prototype, "stage", {
        /**
         * The Stage that will provide the ContextGL used for rendering.
         */
        get: function () {
            return this._pStage;
        },
        set: function (value) {
            if (this._pStage == value)
                return;
            if (this._pStage)
                this.dispose();
            this._pStage = value;
            if (this._pStage)
                this._pUpdatePool();
        },
        enumerable: true,
        configurable: true
    });
    RendererPoolBase.prototype._pUpdatePool = function () {
        this._billboardRenderablePool = RenderablePoolBase.getPool(BillboardRenderable, this._pStage);
        this._triangleSubMeshRenderablePool = RenderablePoolBase.getPool(TriangleSubMeshRenderable, this._pStage);
        this._lineSubMeshRenderablePool = RenderablePoolBase.getPool(LineSubMeshRenderable, this._pStage);
    };
    /**
     * Disposes the resources used by the RendererPoolBase.
     */
    RendererPoolBase.prototype.dispose = function () {
        this._billboardRenderablePool.dispose();
        this._billboardRenderablePool = null;
        this._triangleSubMeshRenderablePool.dispose();
        this._triangleSubMeshRenderablePool = null;
        this._lineSubMeshRenderablePool.dispose();
        this._lineSubMeshRenderablePool = null;
    };
    /**
     *
     * @param billboard
     * @protected
     */
    RendererPoolBase.prototype.applyBillboard = function (billboard) {
        this._renderer.applyRenderable(this._billboardRenderablePool.getItem(billboard));
    };
    /**
     *
     * @param triangleSubMesh
     */
    RendererPoolBase.prototype.applyTriangleSubMesh = function (triangleSubMesh) {
        this._renderer.applyRenderable(this._triangleSubMeshRenderablePool.getItem(triangleSubMesh));
    };
    /**
     *
     * @param lineSubMesh
     */
    RendererPoolBase.prototype.applyLineSubMesh = function (lineSubMesh) {
        this._renderer.applyRenderable(this._lineSubMeshRenderablePool.getItem(lineSubMesh));
    };
    return RendererPoolBase;
})();
module.exports = RendererPoolBase;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9wb29sL3JlbmRlcmVycG9vbGJhc2UudHMiXSwibmFtZXMiOlsiUmVuZGVyZXJQb29sQmFzZSIsIlJlbmRlcmVyUG9vbEJhc2UuY29uc3RydWN0b3IiLCJSZW5kZXJlclBvb2xCYXNlLnN0YWdlIiwiUmVuZGVyZXJQb29sQmFzZS5fcFVwZGF0ZVBvb2wiLCJSZW5kZXJlclBvb2xCYXNlLmRpc3Bvc2UiLCJSZW5kZXJlclBvb2xCYXNlLmFwcGx5QmlsbGJvYXJkIiwiUmVuZGVyZXJQb29sQmFzZS5hcHBseVRyaWFuZ2xlU3ViTWVzaCIsIlJlbmRlcmVyUG9vbEJhc2UuYXBwbHlMaW5lU3ViTWVzaCJdLCJtYXBwaW5ncyI6IkFBU0EsSUFBTyxtQkFBbUIsV0FBYSxnREFBZ0QsQ0FBQyxDQUFDO0FBQ3pGLElBQU8scUJBQXFCLFdBQVksa0RBQWtELENBQUMsQ0FBQztBQUM1RixJQUFPLHlCQUF5QixXQUFXLHNEQUFzRCxDQUFDLENBQUM7QUFDbkcsSUFBTyxrQkFBa0IsV0FBYSwrQ0FBK0MsQ0FBQyxDQUFDO0FBR3ZGLEFBTUE7Ozs7O0dBREc7SUFDRyxnQkFBZ0I7SUFZckJBOztPQUVHQTtJQUNIQSxTQWZLQSxnQkFBZ0JBLENBZVRBLFFBQXFCQTtRQUVoQ0MsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsUUFBUUEsQ0FBQ0E7SUFDM0JBLENBQUNBO0lBS0RELHNCQUFXQSxtQ0FBS0E7UUFIaEJBOztXQUVHQTthQUNIQTtZQUVDRSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQTtRQUNyQkEsQ0FBQ0E7YUFFREYsVUFBaUJBLEtBQVdBO1lBRTNCRSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxJQUFJQSxLQUFLQSxDQUFDQTtnQkFDekJBLE1BQU1BLENBQUNBO1lBRVJBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBO2dCQUNoQkEsSUFBSUEsQ0FBQ0EsT0FBT0EsRUFBRUEsQ0FBQ0E7WUFFaEJBLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLEtBQUtBLENBQUNBO1lBRXJCQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQTtnQkFDaEJBLElBQUlBLENBQUNBLFlBQVlBLEVBQUVBLENBQUNBO1FBQ3RCQSxDQUFDQTs7O09BZEFGO0lBZ0JNQSx1Q0FBWUEsR0FBbkJBO1FBRUNHLElBQUlBLENBQUNBLHdCQUF3QkEsR0FBR0Esa0JBQWtCQSxDQUFDQSxPQUFPQSxDQUFDQSxtQkFBbUJBLEVBQUVBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO1FBQzlGQSxJQUFJQSxDQUFDQSw4QkFBOEJBLEdBQUdBLGtCQUFrQkEsQ0FBQ0EsT0FBT0EsQ0FBQ0EseUJBQXlCQSxFQUFFQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtRQUMxR0EsSUFBSUEsQ0FBQ0EsMEJBQTBCQSxHQUFHQSxrQkFBa0JBLENBQUNBLE9BQU9BLENBQUNBLHFCQUFxQkEsRUFBRUEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7SUFDbkdBLENBQUNBO0lBRURIOztPQUVHQTtJQUNJQSxrQ0FBT0EsR0FBZEE7UUFFQ0ksSUFBSUEsQ0FBQ0Esd0JBQXdCQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQTtRQUN4Q0EsSUFBSUEsQ0FBQ0Esd0JBQXdCQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUVyQ0EsSUFBSUEsQ0FBQ0EsOEJBQThCQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQTtRQUM5Q0EsSUFBSUEsQ0FBQ0EsOEJBQThCQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUUzQ0EsSUFBSUEsQ0FBQ0EsMEJBQTBCQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQTtRQUMxQ0EsSUFBSUEsQ0FBQ0EsMEJBQTBCQSxHQUFHQSxJQUFJQSxDQUFDQTtJQUN4Q0EsQ0FBQ0E7SUFFREo7Ozs7T0FJR0E7SUFDSUEseUNBQWNBLEdBQXJCQSxVQUFzQkEsU0FBbUJBO1FBRXhDSyxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxlQUFlQSxDQUFDQSxJQUFJQSxDQUFDQSx3QkFBd0JBLENBQUNBLE9BQU9BLENBQUNBLFNBQVNBLENBQUNBLENBQUNBLENBQUNBO0lBQ2xGQSxDQUFDQTtJQUVETDs7O09BR0dBO0lBQ0lBLCtDQUFvQkEsR0FBM0JBLFVBQTRCQSxlQUErQkE7UUFFMURNLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLGVBQWVBLENBQUNBLElBQUlBLENBQUNBLDhCQUE4QkEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsZUFBZUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDOUZBLENBQUNBO0lBRUROOzs7T0FHR0E7SUFDSUEsMkNBQWdCQSxHQUF2QkEsVUFBd0JBLFdBQXVCQTtRQUU5Q08sSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsZUFBZUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsMEJBQTBCQSxDQUFDQSxPQUFPQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUN0RkEsQ0FBQ0E7SUFDRlAsdUJBQUNBO0FBQURBLENBM0ZBLEFBMkZDQSxJQUFBO0FBRUQsQUFBMEIsaUJBQWpCLGdCQUFnQixDQUFDIiwiZmlsZSI6InBvb2wvUmVuZGVyZXJQb29sQmFzZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCBMaW5lU3ViTWVzaFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvYmFzZS9MaW5lU3ViTWVzaFwiKTtcbmltcG9ydCBUcmlhbmdsZVN1Yk1lc2hcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9iYXNlL1RyaWFuZ2xlU3ViTWVzaFwiKTtcbmltcG9ydCBJUmVuZGVyZXJQb29sXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvcG9vbC9JUmVuZGVyZXJQb29sXCIpO1xuaW1wb3J0IEJpbGxib2FyZFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvZW50aXRpZXMvQmlsbGJvYXJkXCIpO1xuaW1wb3J0IFNreWJveFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9lbnRpdGllcy9Ta3lib3hcIik7XG5cbmltcG9ydCBTdGFnZVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL1N0YWdlXCIpO1xuXG5pbXBvcnQgQmlsbGJvYXJkUmVuZGVyYWJsZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9wb29sL0JpbGxib2FyZFJlbmRlcmFibGVcIik7XG5pbXBvcnQgTGluZVN1Yk1lc2hSZW5kZXJhYmxlXHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9wb29sL0xpbmVTdWJNZXNoUmVuZGVyYWJsZVwiKTtcbmltcG9ydCBUcmlhbmdsZVN1Yk1lc2hSZW5kZXJhYmxlXHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvcG9vbC9UcmlhbmdsZVN1Yk1lc2hSZW5kZXJhYmxlXCIpO1xuaW1wb3J0IFJlbmRlcmFibGVQb29sQmFzZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9wb29sL1JlbmRlcmFibGVQb29sQmFzZVwiKTtcbmltcG9ydCBSZW5kZXJlckJhc2VcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2Jhc2UvUmVuZGVyZXJCYXNlXCIpO1xuXG4vKipcbiAqIFJlbmRlcmVyUG9vbEJhc2UgZm9ybXMgYW4gYWJzdHJhY3QgYmFzZSBjbGFzcyBmb3IgY2xhc3NlcyB0aGF0IGFyZSB1c2VkIGluIHRoZSByZW5kZXJpbmcgcGlwZWxpbmUgdG8gcmVuZGVyIHRoZVxuICogY29udGVudHMgb2YgYSBwYXJ0aXRpb25cbiAqXG4gKiBAY2xhc3MgYXdheS5yZW5kZXIuUmVuZGVyZXJQb29sQmFzZVxuICovXG5jbGFzcyBSZW5kZXJlclBvb2xCYXNlIGltcGxlbWVudHMgSVJlbmRlcmVyUG9vbFxue1xuXHRwdWJsaWMgX2JpbGxib2FyZFJlbmRlcmFibGVQb29sOlJlbmRlcmFibGVQb29sQmFzZTtcblx0cHVibGljIF90cmlhbmdsZVN1Yk1lc2hSZW5kZXJhYmxlUG9vbDpSZW5kZXJhYmxlUG9vbEJhc2U7XG5cdHB1YmxpYyBfbGluZVN1Yk1lc2hSZW5kZXJhYmxlUG9vbDpSZW5kZXJhYmxlUG9vbEJhc2U7XG5cblx0cHVibGljIF9wUmVuZGVyZXI6UmVuZGVyZXJCYXNlO1xuXHRwdWJsaWMgX3BTdGFnZTpTdGFnZTtcblxuXG5cdHByaXZhdGUgX3JlbmRlcmVyOlJlbmRlcmVyQmFzZTtcblx0XG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgbmV3IFJlbmRlcmVyUG9vbEJhc2Ugb2JqZWN0LlxuXHQgKi9cblx0Y29uc3RydWN0b3IocmVuZGVyZXI6UmVuZGVyZXJCYXNlKVxuXHR7XG5cdFx0dGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgU3RhZ2UgdGhhdCB3aWxsIHByb3ZpZGUgdGhlIENvbnRleHRHTCB1c2VkIGZvciByZW5kZXJpbmcuXG5cdCAqL1xuXHRwdWJsaWMgZ2V0IHN0YWdlKCk6U3RhZ2Vcblx0e1xuXHRcdHJldHVybiB0aGlzLl9wU3RhZ2U7XG5cdH1cblxuXHRwdWJsaWMgc2V0IHN0YWdlKHZhbHVlOlN0YWdlKVxuXHR7XG5cdFx0aWYgKHRoaXMuX3BTdGFnZSA9PSB2YWx1ZSlcblx0XHRcdHJldHVybjtcblxuXHRcdGlmICh0aGlzLl9wU3RhZ2UpXG5cdFx0XHR0aGlzLmRpc3Bvc2UoKTtcblxuXHRcdHRoaXMuX3BTdGFnZSA9IHZhbHVlO1xuXG5cdFx0aWYgKHRoaXMuX3BTdGFnZSlcblx0XHRcdHRoaXMuX3BVcGRhdGVQb29sKCk7XG5cdH1cblxuXHRwdWJsaWMgX3BVcGRhdGVQb29sKClcblx0e1xuXHRcdHRoaXMuX2JpbGxib2FyZFJlbmRlcmFibGVQb29sID0gUmVuZGVyYWJsZVBvb2xCYXNlLmdldFBvb2woQmlsbGJvYXJkUmVuZGVyYWJsZSwgdGhpcy5fcFN0YWdlKTtcblx0XHR0aGlzLl90cmlhbmdsZVN1Yk1lc2hSZW5kZXJhYmxlUG9vbCA9IFJlbmRlcmFibGVQb29sQmFzZS5nZXRQb29sKFRyaWFuZ2xlU3ViTWVzaFJlbmRlcmFibGUsIHRoaXMuX3BTdGFnZSk7XG5cdFx0dGhpcy5fbGluZVN1Yk1lc2hSZW5kZXJhYmxlUG9vbCA9IFJlbmRlcmFibGVQb29sQmFzZS5nZXRQb29sKExpbmVTdWJNZXNoUmVuZGVyYWJsZSwgdGhpcy5fcFN0YWdlKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBEaXNwb3NlcyB0aGUgcmVzb3VyY2VzIHVzZWQgYnkgdGhlIFJlbmRlcmVyUG9vbEJhc2UuXG5cdCAqL1xuXHRwdWJsaWMgZGlzcG9zZSgpXG5cdHtcblx0XHR0aGlzLl9iaWxsYm9hcmRSZW5kZXJhYmxlUG9vbC5kaXNwb3NlKCk7XG5cdFx0dGhpcy5fYmlsbGJvYXJkUmVuZGVyYWJsZVBvb2wgPSBudWxsO1xuXG5cdFx0dGhpcy5fdHJpYW5nbGVTdWJNZXNoUmVuZGVyYWJsZVBvb2wuZGlzcG9zZSgpO1xuXHRcdHRoaXMuX3RyaWFuZ2xlU3ViTWVzaFJlbmRlcmFibGVQb29sID0gbnVsbDtcblxuXHRcdHRoaXMuX2xpbmVTdWJNZXNoUmVuZGVyYWJsZVBvb2wuZGlzcG9zZSgpO1xuXHRcdHRoaXMuX2xpbmVTdWJNZXNoUmVuZGVyYWJsZVBvb2wgPSBudWxsO1xuXHR9XG5cblx0LyoqXG5cdCAqXG5cdCAqIEBwYXJhbSBiaWxsYm9hcmRcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0cHVibGljIGFwcGx5QmlsbGJvYXJkKGJpbGxib2FyZDpCaWxsYm9hcmQpXG5cdHtcblx0XHR0aGlzLl9yZW5kZXJlci5hcHBseVJlbmRlcmFibGUodGhpcy5fYmlsbGJvYXJkUmVuZGVyYWJsZVBvb2wuZ2V0SXRlbShiaWxsYm9hcmQpKTtcblx0fVxuXG5cdC8qKlxuXHQgKlxuXHQgKiBAcGFyYW0gdHJpYW5nbGVTdWJNZXNoXG5cdCAqL1xuXHRwdWJsaWMgYXBwbHlUcmlhbmdsZVN1Yk1lc2godHJpYW5nbGVTdWJNZXNoOlRyaWFuZ2xlU3ViTWVzaClcblx0e1xuXHRcdHRoaXMuX3JlbmRlcmVyLmFwcGx5UmVuZGVyYWJsZSh0aGlzLl90cmlhbmdsZVN1Yk1lc2hSZW5kZXJhYmxlUG9vbC5nZXRJdGVtKHRyaWFuZ2xlU3ViTWVzaCkpO1xuXHR9XG5cblx0LyoqXG5cdCAqXG5cdCAqIEBwYXJhbSBsaW5lU3ViTWVzaFxuXHQgKi9cblx0cHVibGljIGFwcGx5TGluZVN1Yk1lc2gobGluZVN1Yk1lc2g6TGluZVN1Yk1lc2gpXG5cdHtcblx0XHR0aGlzLl9yZW5kZXJlci5hcHBseVJlbmRlcmFibGUodGhpcy5fbGluZVN1Yk1lc2hSZW5kZXJhYmxlUG9vbC5nZXRJdGVtKGxpbmVTdWJNZXNoKSk7XG5cdH1cbn1cblxuZXhwb3J0ID0gUmVuZGVyZXJQb29sQmFzZTsiXX0=