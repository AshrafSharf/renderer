var BillboardRenderable = require("awayjs-renderergl/lib/pool/BillboardRenderable");
var LineSegmentRenderable = require("awayjs-renderergl/lib/pool/LineSegmentRenderable");
var LineSubMeshRenderable = require("awayjs-renderergl/lib/pool/LineSubMeshRenderable");
var TriangleSubMeshRenderable = require("awayjs-renderergl/lib/pool/TriangleSubMeshRenderable");
var CurveSubMeshRenderable = require("awayjs-renderergl/lib/pool/CurveSubMeshRenderable");
var RenderablePoolBase = require("awayjs-renderergl/lib/pool/RenderablePoolBase");
/**
 * RendererPoolBase forms an abstract base class for classes that are used in the rendering pipeline to render the
 * contents of a partition
 *
 * @class away.render.RendererPoolBase
 */
var RendererPoolBase = (function () {
    /**
     * Creates a new RendererPoolBase object.
     */
    function RendererPoolBase(renderer) {
        this._renderer = renderer;
    }
    Object.defineProperty(RendererPoolBase.prototype, "stage", {
        /**
         * The Stage that will provide the ContextGL used for rendering.
         */
        get: function () {
            return this._pStage;
        },
        set: function (value) {
            if (this._pStage == value)
                return;
            if (this._pStage)
                this.dispose();
            this._pStage = value;
            if (this._pStage)
                this._pUpdatePool();
        },
        enumerable: true,
        configurable: true
    });
    RendererPoolBase.prototype._pUpdatePool = function () {
        this._billboardRenderablePool = RenderablePoolBase.getPool(BillboardRenderable, this._pStage);
        this._lineSegmentRenderablePool = RenderablePoolBase.getPool(LineSegmentRenderable, this._pStage);
        this._triangleSubMeshRenderablePool = RenderablePoolBase.getPool(TriangleSubMeshRenderable, this._pStage);
        this._lineSubMeshRenderablePool = RenderablePoolBase.getPool(LineSubMeshRenderable, this._pStage);
        this._curveSubMeshRenderablePool = RenderablePoolBase.getPool(CurveSubMeshRenderable, this._pStage);
    };
    /**
     * Disposes the resources used by the RendererPoolBase.
     */
    RendererPoolBase.prototype.dispose = function () {
        this._billboardRenderablePool.dispose();
        this._billboardRenderablePool = null;
        this._lineSegmentRenderablePool.dispose();
        this._lineSegmentRenderablePool = null;
        this._triangleSubMeshRenderablePool.dispose();
        this._triangleSubMeshRenderablePool = null;
        this._lineSubMeshRenderablePool.dispose();
        this._lineSubMeshRenderablePool = null;
        this._curveSubMeshRenderablePool.dispose();
        this._curveSubMeshRenderablePool = null;
    };
    /**
     *
     * @param billboard
     * @protected
     */
    RendererPoolBase.prototype.applyBillboard = function (billboard) {
        this._renderer.applyRenderable(this._billboardRenderablePool.getItem(billboard));
    };
    /**
     *
     * @param lineSubMesh
     */
    RendererPoolBase.prototype.applyLineSegment = function (lineSegment) {
        this._renderer.applyRenderable(this._lineSegmentRenderablePool.getItem(lineSegment));
    };
    /**
     *
     * @param triangleSubMesh
     */
    RendererPoolBase.prototype.applyTriangleSubMesh = function (triangleSubMesh) {
        this._renderer.applyRenderable(this._triangleSubMeshRenderablePool.getItem(triangleSubMesh));
    };
    /**
     *
     * @param curveSubMesh
     */
    RendererPoolBase.prototype.applyCurveSubMesh = function (curveSubMesh) {
        this._renderer.applyRenderable(this._curveSubMeshRenderablePool.getItem(curveSubMesh));
    };
    /**
     *
     * @param lineSubMesh
     */
    RendererPoolBase.prototype.applyLineSubMesh = function (lineSubMesh) {
        this._renderer.applyRenderable(this._lineSubMeshRenderablePool.getItem(lineSubMesh));
    };
    return RendererPoolBase;
})();
module.exports = RendererPoolBase;

//# sourceMappingURL=data:application/json;base64,