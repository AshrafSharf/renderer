var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Matrix3DUtils = require("awayjs-core/lib/geom/Matrix3DUtils");
var CurveSubGeometry = require("awayjs-display/lib/base/CurveSubGeometry");
var ContextGLProgramType = require("awayjs-stagegl/lib/base/ContextGLProgramType");
var RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
/**
 * @class away.pool.TriangleSubMeshRenderable
 */
var CurveSubMeshRenderable = (function (_super) {
    __extends(CurveSubMeshRenderable, _super);
    /**
     * //TODO
     *
     * @param pool
     * @param subMesh
     * @param level
     * @param indexOffset
     */
    function CurveSubMeshRenderable(pool, subMesh, stage, level, indexOffset) {
        if (level === void 0) { level = 0; }
        if (indexOffset === void 0) { indexOffset = 0; }
        _super.call(this, pool, subMesh.parentMesh, subMesh, subMesh.material, stage, level, indexOffset);
        this._constants = new Array(0, 1, 2, 0.5);
        this.subMesh = subMesh;
    }
    /**
     *
     * @returns {SubGeometryBase}
     * @protected
     */
    CurveSubMeshRenderable.prototype._pGetSubGeometry = function () {
        var subGeometry;
        if (this.subMesh.animator)
            subGeometry = this.subMesh.animator.getRenderableSubGeometry(this, this.subMesh.subGeometry);
        else
            subGeometry = this.subMesh.subGeometry;
        this._pVertexDataDirty[CurveSubGeometry.POSITION_DATA] = true;
        if (subGeometry.curves)
            this._pVertexDataDirty[CurveSubGeometry.CURVE_DATA] = true;
        if (subGeometry.uvs)
            this._pVertexDataDirty[CurveSubGeometry.UV_DATA] = true;
        return subGeometry;
    };
    CurveSubMeshRenderable._iIncludeDependencies = function (shaderObject) {
        shaderObject.localPosDependencies++;
    };
    CurveSubMeshRenderable._iGetVertexCode = function (shaderObject, registerCache, sharedRegisters) {
        var code = "";
        //get the projection coordinates
        var position = (shaderObject.globalPosDependencies > 0) ? sharedRegisters.globalPositionVertex : sharedRegisters.localPosition;
        //reserving vertex constants for projection matrix
        var viewMatrixReg = registerCache.getFreeVertexConstant();
        registerCache.getFreeVertexConstant();
        registerCache.getFreeVertexConstant();
        registerCache.getFreeVertexConstant();
        shaderObject.viewMatrixIndex = viewMatrixReg.index * 4;
        if (shaderObject.projectionDependencies > 0) {
            sharedRegisters.projectionFragment = registerCache.getFreeVarying();
            var temp = registerCache.getFreeVertexVectorTemp();
            code += "m44 " + temp + ", " + position + ".xyw, " + viewMatrixReg + "\n" + "mov " + sharedRegisters.projectionFragment + ", " + temp + "\n" + "mov v2 va1 \n" + "mov op, " + temp + "\n";
        }
        else {
            code += "mov v2 va1 \n";
            code += "m44 op, " + position + ".xyw, " + viewMatrixReg + "\n";
        }
        return code;
    };
    /**
     * @inheritDoc
     */
    CurveSubMeshRenderable._iGetFragmentCode = function (shaderObject, registerCache, sharedRegisters) {
        var sd = shaderObject._stage.context.standardDerivatives;
        var curve = "v2";
        var curveX = "v2.x"; //sharedRegisters.uvVarying //shaderObject.uvTarget;
        var curveY = "v2.y"; //sharedRegisters.uvVarying //shaderObject.uvTarget;
        var pos = sharedRegisters.localPositionVarying;
        var out = sharedRegisters.shadedTarget; //registerCache.fragmentOutputRegister.toString();
        //get some free registers
        var free = registerCache.getFreeFragmentVectorTemp();
        registerCache.addFragmentTempUsages(free, 1);
        var free1 = registerCache.getFreeFragmentVectorTemp();
        registerCache.addFragmentTempUsages(free1, 1);
        var free2 = registerCache.getFreeFragmentVectorTemp();
        registerCache.addFragmentTempUsages(free2, 1);
        //distance from curve
        var d = free + ".x"; //registerCache.getFreeFragmentConstant().toString();
        var less = free + ".y"; //registerCache.getFreeFragmentSingleTemp().toString();
        var half = free + ".z"; //registerCache.getFreeFragmentSingleTemp().toString();
        var px = free + ".xy";
        var pxx = free + ".x";
        var pxy = free + ".y";
        var py = free1 + ".xy";
        var pyx = free1 + ".x";
        var pyy = free1 + ".y";
        var fx = free2 + ".x";
        var fy = free2 + ".y";
        var len = free2 + ".z";
        var dist = "fc7.z";
        var code = "";
        //derivatives
        code += "ddx " + px + " " + curve + "\n";
        code += "ddy " + py + " " + curve + "\n";
        code += "mul " + fx + " " + curveX + " " + pxx + "\n";
        code += "mul " + fx + " " + fx + " " + dist + "\n";
        code += "sub " + fx + " " + fx + " " + pxy + "\n";
        code += "mul " + fy + " " + curveY + " " + pyx + "\n";
        code += "mul " + fy + " " + fy + " " + dist + "\n";
        code += "sub " + fy + " " + fy + " " + pyy + "\n";
        //len
        code += "mul " + fx + " " + fx + " " + fx + "\n";
        code += "mul " + fy + " " + fy + " " + fy + "\n";
        code += "add " + len + " " + fx + " " + fy + "\n";
        code += "sqt " + len + " " + len + "\n";
        //distance
        code += "mul " + d + " " + curveX + " " + curveX + "\n";
        code += "sub " + d + " " + d + " " + curveY + "\n";
        //flip
        code += "mul " + d + " " + d + " " + pos + ".z " + "\n";
        //code += "abs "+ d + " " + d + "\n";
        code += "div " + d + " " + d + " " + len + "\n";
        /*

        //AA
        code += "mul " + dx + " " + dx + " " + dx+"\n";
        code += "mul " + dy + " " + dy + " " + dy+"\n";
        code += "add " + t + " " + dx + " " +  dy+"\n";
        code += "sqt " + t + " " + t+"\n";
        */
        code += "sub " + d + " fc7.w " + d + "\n";
        //code += "add " + t + " " + t + " " +  t+"\n";
        //
        //	code += "add " + d + " " + d + " " + " fc7.x\n";
        // code += "mov "+ out + " " + sharedRegisters.uvVarying+"\n";
        // code += "mul "+ d + " " + d + " " + less + "\n";
        //code += "sub "+ d + " " + d + " " + pos + ".z " + "\n";
        /*
        code += "mul "+ d + " " + d + " " + pos + ".z " + "\n";
        code += "mov "+ half + " fc7.x\n";
        code += "slt "+ less + " " + d + " " + half + "\n";
        code += "mul "+ d + " " + d + " " + less + "\n";
        code += "abs "+ d + " " + d + "\n";*/
        //code += "ddx " + d + " " + curve + ".x\n";
        // code += "kil " + less + "\n";
        //  code += "sub "+ less + " " + less + " " + pos + ".z " + "\n";
        code += "mov " + out + ".w " + d + "\n";
        return code;
        /*
        var curve:String = "v2";//sharedRegisters.uvVarying //shaderObject.uvTarget;
        var pos:ShaderRegisterElement = sharedRegisters.localPositionVarying;
        var out:ShaderRegisterElement = sharedRegisters.shadedTarget;//registerCache.fragmentOutputRegister.toString();

        var free:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();
        var d:String = free + ".x";//registerCache.getFreeFragmentConstant().toString();
        var less:String = free + ".y";//registerCache.getFreeFragmentSingleTemp().toString();
        var half:String = free + ".z";//registerCache.getFreeFragmentSingleTemp().toString();

        var code:string = "";
        code += "mov " + d + " " + curve + ".x\n";
        code += "mul " + d + " " + d + " " + d+"\n";
        code += "sub " + d + " " + d + " " + curve+".y\n";

             // code += "mov "+ out + " " + sharedRegisters.uvVarying+"\n";

       // code += "mul "+ d + " " + d + " " + less + "\n";
        //code += "sub "+ d + " " + d + " " + pos + ".z " + "\n";
        code += "mul "+ d + " " + d + " " + pos + ".z " + "\n";
        code += "mov "+ half + " fc7.x\n";
        code += "slt "+ less + " " + d + " " + half + "\n";
        code += "mul "+ d + " " + d + " " + less + "\n";
        code += "abs "+ d + " " + d + "\n";
        code += "ddx " + d + " " + curve + ".x\n";
       // code += "kil " + less + "\n";
      //  code += "sub "+ less + " " + less + " " + pos + ".z " + "\n";

        code += "mov " + out + ".w " + less + "\n";
        return code;*/
    };
    /**
     * @inheritDoc
     */
    CurveSubMeshRenderable.prototype._iActivate = function (pass, camera) {
        _super.prototype._iActivate.call(this, pass, camera);
        var context = this._stage.context;
        context.setProgramConstantsFromArray(ContextGLProgramType.FRAGMENT, 7, this._constants, 1);
    };
    /**
     * @inheritDoc
     */
    CurveSubMeshRenderable.prototype._iRender = function (pass, camera, viewProjection) {
        _super.prototype._iRender.call(this, pass, camera, viewProjection);
        var shader = pass.shader;
        if (shader.sceneMatrixIndex >= 0) {
            this.sourceEntity.getRenderSceneTransform(camera).copyRawDataTo(shader.vertexConstantData, shader.sceneMatrixIndex, true);
            viewProjection.copyRawDataTo(shader.vertexConstantData, shader.viewMatrixIndex, true);
        }
        else {
            var matrix3D = Matrix3DUtils.CALCULATION_MATRIX;
            matrix3D.copyFrom(this.sourceEntity.getRenderSceneTransform(camera));
            matrix3D.append(viewProjection);
            matrix3D.copyRawDataTo(shader.vertexConstantData, shader.viewMatrixIndex, true);
        }
        var context = this._stage.context;
        context.setProgramConstantsFromArray(ContextGLProgramType.VERTEX, 0, shader.vertexConstantData, shader.numUsedVertexConstants);
        context.setProgramConstantsFromArray(ContextGLProgramType.FRAGMENT, 0, shader.fragmentConstantData, shader.numUsedFragmentConstants);
        this._stage.activateBuffer(0, this.getVertexData(CurveSubGeometry.POSITION_DATA), this.getVertexOffset(CurveSubGeometry.POSITION_DATA), CurveSubGeometry.POSITION_FORMAT);
        this._stage.activateBuffer(1, this.getVertexData(CurveSubGeometry.CURVE_DATA), this.getVertexOffset(CurveSubGeometry.CURVE_DATA), CurveSubGeometry.CURVE_FORMAT);
        this._stage.context.drawTriangles(this._stage.getIndexBuffer(this.getIndexData()), 0, this.numTriangles);
    };
    /**
     * //TODO
     *
     * @param pool
     * @param renderableOwner
     * @param level
     * @param indexOffset
     * @returns {away.pool.TriangleSubMeshRenderable}
     * @protected
     */
    CurveSubMeshRenderable.prototype._pGetOverflowRenderable = function (indexOffset) {
        return new CurveSubMeshRenderable(this._pool, this.renderableOwner, this._stage, this._level + 1, indexOffset);
    };
    /**
     *
     */
    CurveSubMeshRenderable.id = "curvesubmesh";
    CurveSubMeshRenderable.vertexAttributesOffset = 2;
    return CurveSubMeshRenderable;
})(RenderableBase);
module.exports = CurveSubMeshRenderable;

//# sourceMappingURL=data:application/json;base64,