var RenderObjectPool = require("awayjs-renderergl/lib/compilation/RenderObjectPool");
var RenderBasicMaterialObject = require("awayjs-renderergl/lib/compilation/RenderBasicMaterialObject");
var SkyboxRenderObject = require("awayjs-renderergl/lib/compilation/SkyboxRenderObject");
var DepthRenderObject = require("awayjs-renderergl/lib/compilation/DepthRenderObject");
var DistanceRenderObject = require("awayjs-renderergl/lib/compilation/DistanceRenderObject");
/**
 * @class away.pool.RenderablePoolBase
 */
var RenderablePoolBase = (function () {
    /**
     * //TODO
     *
     * @param renderableClass
     */
    function RenderablePoolBase(renderableClass, stage) {
        this._renderablePool = new Object();
        this._renderableClass = renderableClass;
        this._stage = stage;
        this._materialRenderObjectPool = new RenderObjectPool(RenderBasicMaterialObject, this._renderableClass, this._stage);
        this._skyboxRenderObjectPool = new RenderObjectPool(SkyboxRenderObject, this._renderableClass, this._stage);
        this._depthRenderObjectPool = new RenderObjectPool(DepthRenderObject, this._renderableClass, this._stage);
        this._distanceRenderObjectPool = new RenderObjectPool(DistanceRenderObject, this._renderableClass, this._stage);
    }
    /**
     * //TODO
     *
     * @param renderableOwner
     * @returns IRenderable
     */
    RenderablePoolBase.prototype.getItem = function (renderableOwner) {
        return (this._renderablePool[renderableOwner.id] || (this._renderablePool[renderableOwner.id] = renderableOwner._iAddRenderable(new this._renderableClass(this, renderableOwner, this._stage))));
    };
    /**
     *
     * @param material
     * @param renderable
     */
    RenderablePoolBase.prototype.getMaterialRenderObject = function (renderObjectOwner) {
        return this._materialRenderObjectPool.getItem(renderObjectOwner);
    };
    /**
     *
     * @param material
     * @param renderable
     */
    RenderablePoolBase.prototype.getSkyboxRenderObject = function (renderObjectOwner) {
        return this._skyboxRenderObjectPool.getItem(renderObjectOwner);
    };
    /**
     *
     * @param material
     * @param renderable
     */
    RenderablePoolBase.prototype.getDepthRenderObject = function (renderObjectOwner) {
        return this._depthRenderObjectPool.getItem(renderObjectOwner);
    };
    /**
     *
     * @param material
     * @param renderable
     */
    RenderablePoolBase.prototype.getDistanceRenderObject = function (renderObjectOwner) {
        return this._distanceRenderObjectPool.getItem(renderObjectOwner);
    };
    /**
     * //TODO
     *
     * @param renderableOwner
     */
    RenderablePoolBase.prototype.disposeItem = function (renderableOwner) {
        renderableOwner._iRemoveRenderable(this._renderablePool[renderableOwner.id]);
        this._renderablePool[renderableOwner.id] = null;
    };
    RenderablePoolBase.prototype.dispose = function () {
        for (var id in this._renderablePool)
            this._renderablePool[id].dispose();
        RenderablePoolBase.disposePool(this._renderableClass, this._stage);
    };
    /**
     * //TODO
     *
     * @param renderableClass
     * @returns RenderablePoolBase
     */
    RenderablePoolBase.getPool = function (renderableClass, stage) {
        var pools = (RenderablePoolBase._pools[stage.stageIndex] || (RenderablePoolBase._pools[stage.stageIndex] = new Object()));
        return (pools[renderableClass.id] || (pools[renderableClass.id] = new RenderablePoolBase(renderableClass, stage)));
    };
    /**
     * //TODO
     *
     * @param renderableClass
     */
    RenderablePoolBase.disposePool = function (renderableClass, stage) {
        var pools = RenderablePoolBase._pools[stage.stageIndex];
        if (pools == undefined)
            return;
        if (pools[renderableClass.id])
            pools[renderableClass.id] = undefined;
    };
    RenderablePoolBase._pools = new Object();
    return RenderablePoolBase;
})();
module.exports = RenderablePoolBase;

//# sourceMappingURL=data:application/json;base64,