var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
var LineSubGeometry = require("awayjs-display/lib/base/LineSubGeometry");
var ContextGLProgramType = require("awayjs-stagegl/lib/base/ContextGLProgramType");
var RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
/**
 * @class away.pool.LineSubMeshRenderable
 */
var LineSubMeshRenderable = (function (_super) {
    __extends(LineSubMeshRenderable, _super);
    /**
     * //TODO
     *
     * @param pool
     * @param subMesh
     * @param level
     * @param dataOffset
     */
    function LineSubMeshRenderable(pool, subMesh, stage, level, indexOffset) {
        if (level === void 0) { level = 0; }
        if (indexOffset === void 0) { indexOffset = 0; }
        _super.call(this, pool, subMesh.parentMesh, subMesh, subMesh.material, stage, level, indexOffset);
        this._constants = new Array(0, 0, 0, 0);
        this._thickness = 1.25;
        this.subMesh = subMesh;
        this._calcMatrix = new Matrix3D();
        this._constants[1] = 1 / 255;
    }
    /**
     * //TODO
     *
     * @returns {base.LineSubGeometry}
     * @protected
     */
    LineSubMeshRenderable.prototype._pGetSubGeometry = function () {
        var subGeometry = this.subMesh.subGeometry;
        this._pVertexDataDirty[LineSubGeometry.START_POSITION_DATA] = true;
        this._pVertexDataDirty[LineSubGeometry.END_POSITION_DATA] = true;
        if (subGeometry.thickness)
            this._pVertexDataDirty[LineSubGeometry.THICKNESS_DATA] = true;
        if (subGeometry.startColors)
            this._pVertexDataDirty[LineSubGeometry.COLOR_DATA] = true;
        return subGeometry;
    };
    LineSubMeshRenderable._iIncludeDependencies = function (shaderObject) {
        shaderObject.colorDependencies++;
    };
    /**
     * @inheritDoc
     */
    LineSubMeshRenderable._iGetVertexCode = function (shader, regCache, sharedReg) {
        return "m44 vt0, va0, vc8			\n" + "m44 vt1, va1, vc8			\n" + "sub vt2, vt1, vt0 			\n" + "slt vt5.x, vt0.z, vc7.z			\n" + "sub vt5.y, vc5.x, vt5.x			\n" + "add vt4.x, vt0.z, vc7.z			\n" + "sub vt4.y, vt0.z, vt1.z			\n" + "seq vt4.z, vt4.y vc6.x			\n" + "add vt4.y, vt4.y, vt4.z			\n" + "div vt4.z, vt4.x, vt4.y			\n" + "mul vt4.xyz, vt4.zzz, vt2.xyz	\n" + "add vt3.xyz, vt0.xyz, vt4.xyz	\n" + "mov vt3.w, vc5.x			\n" + "mul vt0, vt0, vt5.yyyy			\n" + "mul vt3, vt3, vt5.xxxx			\n" + "add vt0, vt0, vt3				\n" + "sub vt2, vt1, vt0 			\n" + "nrm vt2.xyz, vt2.xyz			\n" + "nrm vt5.xyz, vt0.xyz			\n" + "mov vt5.w, vc5.x				\n" + "crs vt3.xyz, vt2, vt5			\n" + "nrm vt3.xyz, vt3.xyz			\n" + "mul vt3.xyz, vt3.xyz, va2.xxx	\n" + "mov vt3.w, vc5.x			\n" + "dp3 vt4.x, vt0, vc6			\n" + "mul vt4.x, vt4.x, vc7.x			\n" + "mul vt3.xyz, vt3.xyz, vt4.xxx	\n" + "add vt0.xyz, vt0.xyz, vt3.xyz	\n" + "m44 op, vt0, vc0			\n"; // transform Q0 to clip space
    };
    /**
     * @inheritDoc
     */
    LineSubMeshRenderable.prototype._iActivate = function (shader, camera) {
        _super.prototype._iActivate.call(this, shader, camera);
        this._constants[0] = this._thickness / ((this._stage.scissorRect) ? Math.min(this._stage.scissorRect.width, this._stage.scissorRect.height) : Math.min(this._stage.width, this._stage.height));
        // value to convert distance from camera to model length per pixel width
        this._constants[2] = camera.projection.near;
        var context = this._stage.context;
        context.setProgramConstantsFromArray(ContextGLProgramType.VERTEX, 5, LineSubMeshRenderable.pONE_VECTOR, 1);
        context.setProgramConstantsFromArray(ContextGLProgramType.VERTEX, 6, LineSubMeshRenderable.pFRONT_VECTOR, 1);
        context.setProgramConstantsFromArray(ContextGLProgramType.VERTEX, 7, this._constants, 1);
        // projection matrix
        context.setProgramConstantsFromMatrix(ContextGLProgramType.VERTEX, 0, camera.projection.matrix, true);
    };
    /**
     * @inheritDoc
     */
    LineSubMeshRenderable.prototype._iRender = function (shader, camera, viewProjection) {
        _super.prototype._iRender.call(this, shader, camera, viewProjection);
        var context = this._stage.context;
        this._calcMatrix.copyFrom(this.sourceEntity.sceneTransform);
        this._calcMatrix.append(camera.inverseSceneTransform);
        context.setProgramConstantsFromMatrix(ContextGLProgramType.VERTEX, 8, this._calcMatrix, true);
        this._stage.activateBuffer(0, this.getVertexData(LineSubGeometry.START_POSITION_DATA), this.getVertexOffset(LineSubGeometry.START_POSITION_DATA), LineSubGeometry.POSITION_FORMAT);
        this._stage.activateBuffer(1, this.getVertexData(LineSubGeometry.END_POSITION_DATA), this.getVertexOffset(LineSubGeometry.END_POSITION_DATA), LineSubGeometry.POSITION_FORMAT);
        this._stage.activateBuffer(2, this.getVertexData(LineSubGeometry.THICKNESS_DATA), this.getVertexOffset(LineSubGeometry.THICKNESS_DATA), LineSubGeometry.THICKNESS_FORMAT);
        context.drawTriangles(this._stage.getIndexBuffer(this.getIndexData()), 0, this.numTriangles);
    };
    /**
     * //TODO
     *
     * @param pool
     * @param renderableOwner
     * @param level
     * @param indexOffset
     * @returns {away.pool.LineSubMeshRenderable}
     * @private
     */
    LineSubMeshRenderable.prototype._pGetOverflowRenderable = function (indexOffset) {
        return new LineSubMeshRenderable(this._pool, this.renderableOwner, this._stage, this._level + 1, indexOffset);
    };
    LineSubMeshRenderable.pONE_VECTOR = Array(1, 1, 1, 1);
    LineSubMeshRenderable.pFRONT_VECTOR = Array(0, 0, -1, 0);
    /**
     *
     */
    LineSubMeshRenderable.id = "linesubmesh";
    LineSubMeshRenderable.vertexAttributesOffset = 3;
    return LineSubMeshRenderable;
})(RenderableBase);
module.exports = LineSubMeshRenderable;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9wb29sL2xpbmVzdWJtZXNocmVuZGVyYWJsZS50cyJdLCJuYW1lcyI6WyJMaW5lU3ViTWVzaFJlbmRlcmFibGUiLCJMaW5lU3ViTWVzaFJlbmRlcmFibGUuY29uc3RydWN0b3IiLCJMaW5lU3ViTWVzaFJlbmRlcmFibGUuX3BHZXRTdWJHZW9tZXRyeSIsIkxpbmVTdWJNZXNoUmVuZGVyYWJsZS5faUluY2x1ZGVEZXBlbmRlbmNpZXMiLCJMaW5lU3ViTWVzaFJlbmRlcmFibGUuX2lHZXRWZXJ0ZXhDb2RlIiwiTGluZVN1Yk1lc2hSZW5kZXJhYmxlLl9pQWN0aXZhdGUiLCJMaW5lU3ViTWVzaFJlbmRlcmFibGUuX2lSZW5kZXIiLCJMaW5lU3ViTWVzaFJlbmRlcmFibGUuX3BHZXRPdmVyZmxvd1JlbmRlcmFibGUiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQU8sUUFBUSxXQUFnQiwrQkFBK0IsQ0FBQyxDQUFDO0FBSWhFLElBQU8sZUFBZSxXQUFjLHlDQUF5QyxDQUFDLENBQUM7QUFNL0UsSUFBTyxvQkFBb0IsV0FBYSw4Q0FBOEMsQ0FBQyxDQUFDO0FBT3hGLElBQU8sY0FBYyxXQUFjLDJDQUEyQyxDQUFDLENBQUM7QUFJaEYsQUFHQTs7R0FERztJQUNHLHFCQUFxQjtJQUFTQSxVQUE5QkEscUJBQXFCQSxVQUF1QkE7SUFxQmpEQTs7Ozs7OztPQU9HQTtJQUNIQSxTQTdCS0EscUJBQXFCQSxDQTZCZEEsSUFBbUJBLEVBQUVBLE9BQW1CQSxFQUFFQSxLQUFXQSxFQUFFQSxLQUFnQkEsRUFBRUEsV0FBc0JBO1FBQXhDQyxxQkFBZ0JBLEdBQWhCQSxTQUFnQkE7UUFBRUEsMkJBQXNCQSxHQUF0QkEsZUFBc0JBO1FBRTFHQSxrQkFBTUEsSUFBSUEsRUFBRUEsT0FBT0EsQ0FBQ0EsVUFBVUEsRUFBRUEsT0FBT0EsRUFBRUEsT0FBT0EsQ0FBQ0EsUUFBUUEsRUFBRUEsS0FBS0EsRUFBRUEsS0FBS0EsRUFBRUEsV0FBV0Es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c291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNYXRyaXgzRFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9nZW9tL01hdHJpeDNEXCIpO1xuXG5pbXBvcnQgSVJlbmRlcmFibGVPd25lclx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2Jhc2UvSVJlbmRlcmFibGVPd25lclwiKTtcbmltcG9ydCBMaW5lU3ViTWVzaFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvYmFzZS9MaW5lU3ViTWVzaFwiKTtcbmltcG9ydCBMaW5lU3ViR2VvbWV0cnlcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9iYXNlL0xpbmVTdWJHZW9tZXRyeVwiKTtcbmltcG9ydCBTdWJHZW9tZXRyeUV2ZW50XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvZXZlbnRzL1N1Ykdlb21ldHJ5RXZlbnRcIik7XG5pbXBvcnQgQ2FtZXJhXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2VudGl0aWVzL0NhbWVyYVwiKTtcbmltcG9ydCBEZWZhdWx0TWF0ZXJpYWxNYW5hZ2VyXHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9tYW5hZ2Vycy9EZWZhdWx0TWF0ZXJpYWxNYW5hZ2VyXCIpO1xuXG5pbXBvcnQgSUNvbnRleHRHTFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYmFzZS9JQ29udGV4dEdMXCIpO1xuaW1wb3J0IENvbnRleHRHTFByb2dyYW1UeXBlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvQ29udGV4dEdMUHJvZ3JhbVR5cGVcIik7XG5pbXBvcnQgU3RhZ2VcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYmFzZS9TdGFnZVwiKTtcblxuaW1wb3J0IFNoYWRlck9iamVjdEJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9TaGFkZXJPYmplY3RCYXNlXCIpO1xuaW1wb3J0IFNoYWRlclJlZ2lzdGVyQ2FjaGVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vU2hhZGVyUmVnaXN0ZXJDYWNoZVwiKTtcbmltcG9ydCBTaGFkZXJSZWdpc3RlckRhdGFcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vU2hhZGVyUmVnaXN0ZXJEYXRhXCIpO1xuaW1wb3J0IFNoYWRlclJlZ2lzdGVyRWxlbWVudFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vU2hhZGVyUmVnaXN0ZXJFbGVtZW50XCIpO1xuaW1wb3J0IFJlbmRlcmFibGVCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvcG9vbC9SZW5kZXJhYmxlQmFzZVwiKTtcbmltcG9ydCBSZW5kZXJhYmxlUG9vbFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL3Bvb2wvUmVuZGVyYWJsZVBvb2xcIik7XG5pbXBvcnQgUmVuZGVyT2JqZWN0QmFzZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2NvbXBpbGF0aW9uL1JlbmRlck9iamVjdEJhc2VcIik7XG5cbi8qKlxuICogQGNsYXNzIGF3YXkucG9vbC5MaW5lU3ViTWVzaFJlbmRlcmFibGVcbiAqL1xuY2xhc3MgTGluZVN1Yk1lc2hSZW5kZXJhYmxlIGV4dGVuZHMgUmVuZGVyYWJsZUJhc2Vcbntcblx0cHVibGljIHN0YXRpYyBwT05FX1ZFQ1RPUjpBcnJheTxudW1iZXI+ID0gQXJyYXk8bnVtYmVyPigxLCAxLCAxLCAxKTtcblx0cHVibGljIHN0YXRpYyBwRlJPTlRfVkVDVE9SOkFycmF5PG51bWJlcj4gPSBBcnJheTxudW1iZXI+KDAsIDAsIC0xLCAwKTtcblxuXHRwcml2YXRlIF9jb25zdGFudHM6QXJyYXk8bnVtYmVyPiA9IG5ldyBBcnJheTxudW1iZXI+KDAsIDAsIDAsIDApO1xuXHRwcml2YXRlIF9jYWxjTWF0cml4Ok1hdHJpeDNEO1xuXHRwcml2YXRlIF90aGlja25lc3M6bnVtYmVyID0gMS4yNTtcblxuXHQvKipcblx0ICpcblx0ICovXG5cdHB1YmxpYyBzdGF0aWMgaWQ6c3RyaW5nID0gXCJsaW5lc3VibWVzaFwiO1xuXG5cdHB1YmxpYyBzdGF0aWMgdmVydGV4QXR0cmlidXRlc09mZnNldDpudW1iZXIgPSAzO1xuXG5cdC8qKlxuXHQgKlxuXHQgKi9cblx0cHVibGljIHN1Yk1lc2g6TGluZVN1Yk1lc2g7XG5cblx0LyoqXG5cdCAqIC8vVE9ET1xuXHQgKlxuXHQgKiBAcGFyYW0gcG9vbFxuXHQgKiBAcGFyYW0gc3ViTWVzaFxuXHQgKiBAcGFyYW0gbGV2ZWxcblx0ICogQHBhcmFtIGRhdGFPZmZzZXRcblx0ICovXG5cdGNvbnN0cnVjdG9yKHBvb2w6UmVuZGVyYWJsZVBvb2wsIHN1Yk1lc2g6TGluZVN1Yk1lc2gsIHN0YWdlOlN0YWdlLCBsZXZlbDpudW1iZXIgPSAwLCBpbmRleE9mZnNldDpudW1iZXIgPSAwKVxuXHR7XG5cdFx0c3VwZXIocG9vbCwgc3ViTWVzaC5wYXJlbnRNZXNoLCBzdWJNZXNoLCBzdWJNZXNoLm1hdGVyaWFsLCBzdGFnZSwgbGV2ZWwsIGluZGV4T2Zmc2V0KTtcblxuXHRcdHRoaXMuc3ViTWVzaCA9IHN1Yk1lc2g7XG5cblx0XHR0aGlzLl9jYWxjTWF0cml4ID0gbmV3IE1hdHJpeDNEKCk7XG5cblx0XHR0aGlzLl9jb25zdGFudHNbMV0gPSAxLzI1NTtcblx0fVxuXG5cdC8qKlxuXHQgKiAvL1RPRE9cblx0ICpcblx0ICogQHJldHVybnMge2Jhc2UuTGluZVN1Ykdlb21ldHJ5fVxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHRwdWJsaWMgX3BHZXRTdWJHZW9tZXRyeSgpOkxpbmVTdWJHZW9tZXRyeVxuXHR7XG5cdFx0dmFyIHN1Ykdlb21ldHJ5OkxpbmVTdWJHZW9tZXRyeSA9IHRoaXMuc3ViTWVzaC5zdWJHZW9tZXRyeTtcblxuXHRcdHRoaXMuX3BWZXJ0ZXhEYXRhRGlydHlbTGluZVN1Ykdlb21ldHJ5LlNUQVJUX1BPU0lUSU9OX0RBVEFdID0gdHJ1ZTtcblx0XHR0aGlzLl9wVmVydGV4RGF0YURpcnR5W0xpbmVTdWJHZW9tZXRyeS5FTkRfUE9TSVRJT05fREFUQV0gPSB0cnVlO1xuXG5cdFx0aWYgKHN1Ykdlb21ldHJ5LnRoaWNrbmVzcylcblx0XHRcdHRoaXMuX3BWZXJ0ZXhEYXRhRGlydHlbTGluZVN1Ykdlb21ldHJ5LlRISUNLTkVTU19EQVRBXSA9IHRydWU7XG5cblx0XHRpZiAoc3ViR2VvbWV0cnkuc3RhcnRDb2xvcnMpXG5cdFx0XHR0aGlzLl9wVmVydGV4RGF0YURpcnR5W0xpbmVTdWJHZW9tZXRyeS5DT0xPUl9EQVRBXSA9IHRydWU7XG5cblx0XHRyZXR1cm4gc3ViR2VvbWV0cnk7XG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIF9pSW5jbHVkZURlcGVuZGVuY2llcyhzaGFkZXJPYmplY3Q6U2hhZGVyT2JqZWN0QmFzZSlcblx0e1xuXHRcdHNoYWRlck9iamVjdC5jb2xvckRlcGVuZGVuY2llcysrO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRwdWJsaWMgc3RhdGljIF9pR2V0VmVydGV4Q29kZShzaGFkZXI6U2hhZGVyT2JqZWN0QmFzZSwgcmVnQ2FjaGU6U2hhZGVyUmVnaXN0ZXJDYWNoZSwgc2hhcmVkUmVnOlNoYWRlclJlZ2lzdGVyRGF0YSk6c3RyaW5nXG5cdHtcblx0XHRyZXR1cm4gXCJtNDQgdnQwLCB2YTAsIHZjOFx0XHRcdFxcblwiICsgLy8gdHJhbnNmb3JtIFEwIHRvIGV5ZSBzcGFjZVxuXHRcdFx0XCJtNDQgdnQxLCB2YTEsIHZjOFx0XHRcdFxcblwiICsgLy8gdHJhbnNmb3JtIFExIHRvIGV5ZSBzcGFjZVxuXHRcdFx0XCJzdWIgdnQyLCB2dDEsIHZ0MCBcdFx0XHRcXG5cIiArIC8vIEwgPSBRMSAtIFEwXG5cblx0XHRcdFx0Ly8gdGVzdCBpZiBiZWhpbmQgY2FtZXJhIG5lYXIgcGxhbmVcblx0XHRcdFx0Ly8gaWYgMCAtIFEwLnogPCBDYW1lcmEubmVhciB0aGVuIHRoZSBwb2ludCBuZWVkcyB0byBiZSBjbGlwcGVkXG5cdFx0XHRcdC8vXCJuZWcgdnQ1LngsIHZ0MC56XHRcdFx0XHRcXG5cIiArIC8vIDAgLSBRMC56XG5cdFx0XHRcInNsdCB2dDUueCwgdnQwLnosIHZjNy56XHRcdFx0XFxuXCIgKyAvLyBiZWhpbmQgPSAoIDAgLSBRMC56IDwgLUNhbWVyYS5uZWFyICkgPyAxIDogMFxuXHRcdFx0XCJzdWIgdnQ1LnksIHZjNS54LCB2dDUueFx0XHRcdFxcblwiICsgLy8gIWJlaGluZCA9IDEgLSBiZWhpbmRcblxuXHRcdFx0XHQvLyBwID0gcG9pbnQgb24gdGhlIHBsYW5lICgwLDAsLW5lYXIpXG5cdFx0XHRcdC8vIG4gPSBwbGFuZSBub3JtYWwgKDAsMCwtMSlcblx0XHRcdFx0Ly8gRCA9IFExIC0gUTBcblx0XHRcdFx0Ly8gdCA9ICggZG90KCBuLCAoIHAgLSBRMCApICkgLyAoIGRvdCggbiwgZCApXG5cblx0XHRcdFx0Ly8gc29sdmUgZm9yIHQgd2hlcmUgbGluZSBjcm9zc2VzIENhbWVyYS5uZWFyXG5cdFx0XHRcImFkZCB2dDQueCwgdnQwLnosIHZjNy56XHRcdFx0XFxuXCIgKyAvLyBRMC56ICsgKCAtQ2FtZXJhLm5lYXIgKVxuXHRcdFx0XCJzdWIgdnQ0LnksIHZ0MC56LCB2dDEuelx0XHRcdFxcblwiICsgLy8gUTAueiAtIFExLnpcblxuXHRcdFx0XHQvLyBmaXggZGl2aWRlIGJ5IHplcm8gZm9yIGhvcml6b250YWwgbGluZXNcblx0XHRcdFwic2VxIHZ0NC56LCB2dDQueSB2YzYueFx0XHRcdFxcblwiICsgLy8gb2Zmc2V0ID0gKFEwLnogLSBRMS56KT09MCA/IDEgOiAwXG5cdFx0XHRcImFkZCB2dDQueSwgdnQ0LnksIHZ0NC56XHRcdFx0XFxuXCIgKyAvLyAoIFEwLnogLSBRMS56ICkgKyBvZmZzZXRcblxuXHRcdFx0XCJkaXYgdnQ0LnosIHZ0NC54LCB2dDQueVx0XHRcdFxcblwiICsgLy8gdCA9ICggUTAueiAtIG5lYXIgKSAvICggUTAueiAtIFExLnogKVxuXG5cdFx0XHRcIm11bCB2dDQueHl6LCB2dDQuenp6LCB2dDIueHl6XHRcXG5cIiArIC8vIHQoTClcblx0XHRcdFwiYWRkIHZ0My54eXosIHZ0MC54eXosIHZ0NC54eXpcdFxcblwiICsgLy8gUWNsaXBwZWQgPSBRMCArIHQoTClcblx0XHRcdFwibW92IHZ0My53LCB2YzUueFx0XHRcdFxcblwiICsgLy8gUWNsaXBwZWQudyA9IDFcblxuXHRcdFx0XHQvLyBJZiBuZWNlc3NhcnksIHJlcGxhY2UgUTAgd2l0aCBuZXcgUWNsaXBwZWRcblx0XHRcdFwibXVsIHZ0MCwgdnQwLCB2dDUueXl5eVx0XHRcdFxcblwiICsgLy8gIWJlaGluZCAqIFEwXG5cdFx0XHRcIm11bCB2dDMsIHZ0MywgdnQ1Lnh4eHhcdFx0XHRcXG5cIiArIC8vIGJlaGluZCAqIFFjbGlwcGVkXG5cdFx0XHRcImFkZCB2dDAsIHZ0MCwgdnQzXHRcdFx0XHRcXG5cIiArIC8vIG5ld1EwID0gUTAgKyBRY2xpcHBlZFxuXG5cdFx0XHRcdC8vIGNhbGN1bGF0ZSBzaWRlIHZlY3RvciBmb3IgbGluZVxuXHRcdFx0XCJzdWIgdnQyLCB2dDEsIHZ0MCBcdFx0XHRcXG5cIiArIC8vIEwgPSBRMSAtIFEwXG5cdFx0XHRcIm5ybSB2dDIueHl6LCB2dDIueHl6XHRcdFx0XFxuXCIgKyAvLyBub3JtYWxpemUoIEwgKVxuXHRcdFx0XCJucm0gdnQ1Lnh5eiwgdnQwLnh5elx0XHRcdFxcblwiICsgLy8gRCA9IG5vcm1hbGl6ZSggUTEgKVxuXHRcdFx0XCJtb3YgdnQ1LncsIHZjNS54XHRcdFx0XHRcXG5cIiArIC8vIEQudyA9IDFcblx0XHRcdFwiY3JzIHZ0My54eXosIHZ0MiwgdnQ1XHRcdFx0XFxuXCIgKyAvLyBTID0gTCB4IERcblx0XHRcdFwibnJtIHZ0My54eXosIHZ0My54eXpcdFx0XHRcXG5cIiArIC8vIG5vcm1hbGl6ZSggUyApXG5cblx0XHRcdFx0Ly8gZmFjZSB0aGUgc2lkZSB2ZWN0b3IgcHJvcGVybHkgZm9yIHRoZSBnaXZlbiBwb2ludFxuXHRcdFx0XCJtdWwgdnQzLnh5eiwgdnQzLnh5eiwgdmEyLnh4eFx0XFxuXCIgKyAvLyBTICo9IHdlaWdodFxuXHRcdFx0XCJtb3YgdnQzLncsIHZjNS54XHRcdFx0XFxuXCIgKyAvLyBTLncgPSAxXG5cblx0XHRcdFx0Ly8gY2FsY3VsYXRlIHRoZSBhbW91bnQgcmVxdWlyZWQgdG8gbW92ZSBhdCB0aGUgcG9pbnQncyBkaXN0YW5jZSB0byBjb3JyZXNwb25kIHRvIHRoZSBsaW5lJ3MgcGl4ZWwgd2lkdGhcblx0XHRcdFx0Ly8gc2NhbGUgdGhlIHNpZGUgdmVjdG9yIGJ5IHRoYXQgYW1vdW50XG5cdFx0XHRcImRwMyB2dDQueCwgdnQwLCB2YzZcdFx0XHRcXG5cIiArIC8vIGRpc3RhbmNlID0gZG90KCB2aWV3IClcblx0XHRcdFwibXVsIHZ0NC54LCB2dDQueCwgdmM3LnhcdFx0XHRcXG5cIiArIC8vIGRpc3RhbmNlICo9IHZwc29kXG5cdFx0XHRcIm11bCB2dDMueHl6LCB2dDMueHl6LCB2dDQueHh4XHRcXG5cIiArIC8vIFMueHl6ICo9IHBpeGVsU2NhbGVGYWN0b3JcblxuXHRcdFx0XHQvLyBhZGQgc2NhbGVkIHNpZGUgdmVjdG9yIHRvIFEwIGFuZCB0cmFuc2Zvcm0gdG8gY2xpcCBzcGFjZVxuXHRcdFx0XCJhZGQgdnQwLnh5eiwgdnQwLnh5eiwgdnQzLnh5elx0XFxuXCIgKyAvLyBRMCArIFNcblxuXHRcdFx0XCJtNDQgb3AsIHZ0MCwgdmMwXHRcdFx0XFxuXCIgIC8vIHRyYW5zZm9ybSBRMCB0byBjbGlwIHNwYWNlXG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHB1YmxpYyBfaUFjdGl2YXRlKHNoYWRlcjpTaGFkZXJPYmplY3RCYXNlLCBjYW1lcmE6Q2FtZXJhKVxuXHR7XG5cdFx0c3VwZXIuX2lBY3RpdmF0ZShzaGFkZXIsIGNhbWVyYSk7XG5cblx0XHR0aGlzLl9jb25zdGFudHNbMF0gPSB0aGlzLl90aGlja25lc3MvKCh0aGlzLl9zdGFnZS5zY2lzc29yUmVjdCk/IE1hdGgubWluKHRoaXMuX3N0YWdlLnNjaXNzb3JSZWN0LndpZHRoLCB0aGlzLl9zdGFnZS5zY2lzc29yUmVjdC5oZWlnaHQpIDogTWF0aC5taW4odGhpcy5fc3RhZ2Uud2lkdGgsIHRoaXMuX3N0YWdlLmhlaWdodCkpO1xuXG5cdFx0Ly8gdmFsdWUgdG8gY29udmVydCBkaXN0YW5jZSBmcm9tIGNhbWVyYSB0byBtb2RlbCBsZW5ndGggcGVyIHBpeGVsIHdpZHRoXG5cdFx0dGhpcy5fY29uc3RhbnRzWzJdID0gY2FtZXJhLnByb2plY3Rpb24ubmVhcjtcblxuXHRcdHZhciBjb250ZXh0OklDb250ZXh0R0wgPSB0aGlzLl9zdGFnZS5jb250ZXh0O1xuXG5cdFx0Y29udGV4dC5zZXRQcm9ncmFtQ29uc3RhbnRzRnJvbUFycmF5KENvbnRleHRHTFByb2dyYW1UeXBlLlZFUlRFWCwgNSwgTGluZVN1Yk1lc2hSZW5kZXJhYmxlLnBPTkVfVkVDVE9SLCAxKTtcblx0XHRjb250ZXh0LnNldFByb2dyYW1Db25zdGFudHNGcm9tQXJyYXkoQ29udGV4dEdMUHJvZ3JhbVR5cGUuVkVSVEVYLCA2LCBMaW5lU3ViTWVzaFJlbmRlcmFibGUucEZST05UX1ZFQ1RPUiwgMSk7XG5cdFx0Y29udGV4dC5zZXRQcm9ncmFtQ29uc3RhbnRzRnJvbUFycmF5KENvbnRleHRHTFByb2dyYW1UeXBlLlZFUlRFWCwgNywgdGhpcy5fY29uc3RhbnRzLCAxKTtcblxuXHRcdC8vIHByb2plY3Rpb24gbWF0cml4XG5cdFx0Y29udGV4dC5zZXRQcm9ncmFtQ29uc3RhbnRzRnJvbU1hdHJpeChDb250ZXh0R0xQcm9ncmFtVHlwZS5WRVJURVgsIDAsIGNhbWVyYS5wcm9qZWN0aW9uLm1hdHJpeCwgdHJ1ZSk7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHB1YmxpYyBfaVJlbmRlcihzaGFkZXI6U2hhZGVyT2JqZWN0QmFzZSwgY2FtZXJhOkNhbWVyYSwgdmlld1Byb2plY3Rpb246TWF0cml4M0QpXG5cdHtcblx0XHRzdXBlci5faVJlbmRlcihzaGFkZXIsIGNhbWVyYSwgdmlld1Byb2plY3Rpb24pO1xuXG5cdFx0dmFyIGNvbnRleHQ6SUNvbnRleHRHTCA9IHRoaXMuX3N0YWdlLmNvbnRleHQ7XG5cdFx0dGhpcy5fY2FsY01hdHJpeC5jb3B5RnJvbSh0aGlzLnNvdXJjZUVudGl0eS5zY2VuZVRyYW5zZm9ybSk7XG5cdFx0dGhpcy5fY2FsY01hdHJpeC5hcHBlbmQoY2FtZXJhLmludmVyc2VTY2VuZVRyYW5zZm9ybSk7XG5cblx0XHRjb250ZXh0LnNldFByb2dyYW1Db25zdGFudHNGcm9tTWF0cml4KENvbnRleHRHTFByb2dyYW1UeXBlLlZFUlRFWCwgOCwgdGhpcy5fY2FsY01hdHJpeCwgdHJ1ZSk7XG5cblx0XHR0aGlzLl9zdGFnZS5hY3RpdmF0ZUJ1ZmZlcigwLCB0aGlzLmdldFZlcnRleERhdGEoTGluZVN1Ykdlb21ldHJ5LlNUQVJUX1BPU0lUSU9OX0RBVEEpLCB0aGlzLmdldFZlcnRleE9mZnNldChMaW5lU3ViR2VvbWV0cnkuU1RBUlRfUE9TSVRJT05fREFUQSksIExpbmVTdWJHZW9tZXRyeS5QT1NJVElPTl9GT1JNQVQpO1xuXHRcdHRoaXMuX3N0YWdlLmFjdGl2YXRlQnVmZmVyKDEsIHRoaXMuZ2V0VmVydGV4RGF0YShMaW5lU3ViR2VvbWV0cnkuRU5EX1BPU0lUSU9OX0RBVEEpLCB0aGlzLmdldFZlcnRleE9mZnNldChMaW5lU3ViR2VvbWV0cnkuRU5EX1BPU0lUSU9OX0RBVEEpLCBMaW5lU3ViR2VvbWV0cnkuUE9TSVRJT05fRk9STUFUKTtcblx0XHR0aGlzLl9zdGFnZS5hY3RpdmF0ZUJ1ZmZlcigyLCB0aGlzLmdldFZlcnRleERhdGEoTGluZVN1Ykdlb21ldHJ5LlRISUNLTkVTU19EQVRBKSwgdGhpcy5nZXRWZXJ0ZXhPZmZzZXQoTGluZVN1Ykdlb21ldHJ5LlRISUNLTkVTU19EQVRBKSwgTGluZVN1Ykdlb21ldHJ5LlRISUNLTkVTU19GT1JNQVQpO1xuXG5cdFx0Y29udGV4dC5kcmF3VHJpYW5nbGVzKHRoaXMuX3N0YWdlLmdldEluZGV4QnVmZmVyKHRoaXMuZ2V0SW5kZXhEYXRhKCkpLCAwLCB0aGlzLm51bVRyaWFuZ2xlcyk7XG5cdH1cblxuXHQvKipcblx0ICogLy9UT0RPXG5cdCAqXG5cdCAqIEBwYXJhbSBwb29sXG5cdCAqIEBwYXJhbSByZW5kZXJhYmxlT3duZXJcblx0ICogQHBhcmFtIGxldmVsXG5cdCAqIEBwYXJhbSBpbmRleE9mZnNldFxuXHQgKiBAcmV0dXJucyB7YXdheS5wb29sLkxpbmVTdWJNZXNoUmVuZGVyYWJsZX1cblx0ICogQHByaXZhdGVcblx0ICovXG5cdHB1YmxpYyBfcEdldE92ZXJmbG93UmVuZGVyYWJsZShpbmRleE9mZnNldDpudW1iZXIpOlJlbmRlcmFibGVCYXNlXG5cdHtcblx0XHRyZXR1cm4gbmV3IExpbmVTdWJNZXNoUmVuZGVyYWJsZSh0aGlzLl9wb29sLCA8TGluZVN1Yk1lc2g+IHRoaXMucmVuZGVyYWJsZU93bmVyLCB0aGlzLl9zdGFnZSwgdGhpcy5fbGV2ZWwgKyAxLCBpbmRleE9mZnNldCk7XG5cdH1cbn1cblxuZXhwb3J0ID0gTGluZVN1Yk1lc2hSZW5kZXJhYmxlOyJdfQ==