var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
var LineSubGeometry = require("awayjs-display/lib/base/LineSubGeometry");
var ContextGLProgramType = require("awayjs-stagegl/lib/base/ContextGLProgramType");
var RenderableBase = require("awayjs-renderergl/lib/pool/RenderableBase");
/**
 * @class away.pool.LineSubMeshRenderable
 */
var LineSegmentRenderable = (function (_super) {
    __extends(LineSegmentRenderable, _super);
    /**
     * //TODO
     *
     * @param pool
     * @param subMesh
     * @param level
     * @param dataOffset
     */
    function LineSegmentRenderable(pool, lineSegment, stage, level, indexOffset) {
        if (level === void 0) { level = 0; }
        if (indexOffset === void 0) { indexOffset = 0; }
        _super.call(this, pool, lineSegment, lineSegment, lineSegment.material, stage, level, indexOffset);
        this._constants = new Array(0, 0, 0, 0);
        this._thickness = 1.25;
        this._lineSegment = lineSegment;
        this._calcMatrix = new Matrix3D();
        this._constants[1] = 1 / 255;
    }
    /**
     * //TODO
     *
     * @returns {base.LineSubGeometry}
     * @protected
     */
    LineSegmentRenderable.prototype._pGetSubGeometry = function () {
        var geometry = LineSegmentRenderable._lineGeometry[this._lineSegment.id] || (LineSegmentRenderable._lineGeometry[this._lineSegment.id] = new LineSubGeometry());
        this._pVertexDataDirty[LineSubGeometry.START_POSITION_DATA] = true;
        this._pVertexDataDirty[LineSubGeometry.END_POSITION_DATA] = true;
        this._pVertexDataDirty[LineSubGeometry.THICKNESS_DATA] = true;
        this._pVertexDataDirty[LineSubGeometry.COLOR_DATA] = true;
        var start = this._lineSegment.startPostion;
        var end = this._lineSegment.endPosition;
        var startPositions;
        var endPositions;
        var thickness;
        if (geometry.indices != null) {
            startPositions = geometry.startPositions;
            endPositions = geometry.endPositions;
            thickness = geometry.thickness;
        }
        else {
            startPositions = new Array(3);
            endPositions = new Array(3);
            thickness = new Array(1);
        }
        startPositions[0] = start.x;
        startPositions[1] = start.y;
        startPositions[2] = start.z;
        endPositions[0] = end.x;
        endPositions[1] = end.y;
        endPositions[2] = end.z;
        thickness[0] = this._lineSegment.thickness;
        geometry.updatePositions(startPositions, endPositions);
        geometry.updateThickness(thickness);
        return geometry;
    };
    LineSegmentRenderable._iIncludeDependencies = function (shaderObject) {
        shaderObject.colorDependencies++;
    };
    /**
     * @inheritDoc
     */
    LineSegmentRenderable._iGetVertexCode = function (shader, regCache, sharedReg) {
        return "m44 vt0, va0, vc8			\n" + "m44 vt1, va1, vc8			\n" + "sub vt2, vt1, vt0 			\n" + "slt vt5.x, vt0.z, vc7.z			\n" + "sub vt5.y, vc5.x, vt5.x			\n" + "add vt4.x, vt0.z, vc7.z			\n" + "sub vt4.y, vt0.z, vt1.z			\n" + "seq vt4.z, vt4.y vc6.x			\n" + "add vt4.y, vt4.y, vt4.z			\n" + "div vt4.z, vt4.x, vt4.y			\n" + "mul vt4.xyz, vt4.zzz, vt2.xyz	\n" + "add vt3.xyz, vt0.xyz, vt4.xyz	\n" + "mov vt3.w, vc5.x			\n" + "mul vt0, vt0, vt5.yyyy			\n" + "mul vt3, vt3, vt5.xxxx			\n" + "add vt0, vt0, vt3				\n" + "sub vt2, vt1, vt0 			\n" + "nrm vt2.xyz, vt2.xyz			\n" + "nrm vt5.xyz, vt0.xyz			\n" + "mov vt5.w, vc5.x				\n" + "crs vt3.xyz, vt2, vt5			\n" + "nrm vt3.xyz, vt3.xyz			\n" + "mul vt3.xyz, vt3.xyz, va2.xxx	\n" + "mov vt3.w, vc5.x			\n" + "dp3 vt4.x, vt0, vc6			\n" + "mul vt4.x, vt4.x, vc7.x			\n" + "mul vt3.xyz, vt3.xyz, vt4.xxx	\n" + "add vt0.xyz, vt0.xyz, vt3.xyz	\n" + "m44 op, vt0, vc0			\n"; // transform Q0 to clip space
    };
    /**
     * @inheritDoc
     */
    LineSegmentRenderable.prototype._iActivate = function (pass, camera) {
        _super.prototype._iActivate.call(this, pass, camera);
        this._constants[0] = this._thickness / ((this._stage.scissorRect) ? Math.min(this._stage.scissorRect.width, this._stage.scissorRect.height) : Math.min(this._stage.width, this._stage.height));
        // value to convert distance from camera to model length per pixel width
        this._constants[2] = camera.projection.near;
        var context = this._stage.context;
        context.setProgramConstantsFromArray(ContextGLProgramType.VERTEX, 5, LineSegmentRenderable.pONE_VECTOR, 1);
        context.setProgramConstantsFromArray(ContextGLProgramType.VERTEX, 6, LineSegmentRenderable.pFRONT_VECTOR, 1);
        context.setProgramConstantsFromArray(ContextGLProgramType.VERTEX, 7, this._constants, 1);
        // projection matrix
        context.setProgramConstantsFromMatrix(ContextGLProgramType.VERTEX, 0, camera.projection.matrix, true);
    };
    /**
     * @inheritDoc
     */
    LineSegmentRenderable.prototype._iRender = function (pass, camera, viewProjection) {
        _super.prototype._iRender.call(this, pass, camera, viewProjection);
        var context = this._stage.context;
        this._calcMatrix.copyFrom(this.sourceEntity.sceneTransform);
        this._calcMatrix.append(camera.inverseSceneTransform);
        context.setProgramConstantsFromMatrix(ContextGLProgramType.VERTEX, 8, this._calcMatrix, true);
        this._stage.activateBuffer(0, this.getVertexData(LineSubGeometry.START_POSITION_DATA), this.getVertexOffset(LineSubGeometry.START_POSITION_DATA), LineSubGeometry.POSITION_FORMAT);
        this._stage.activateBuffer(1, this.getVertexData(LineSubGeometry.END_POSITION_DATA), this.getVertexOffset(LineSubGeometry.END_POSITION_DATA), LineSubGeometry.POSITION_FORMAT);
        this._stage.activateBuffer(2, this.getVertexData(LineSubGeometry.THICKNESS_DATA), this.getVertexOffset(LineSubGeometry.THICKNESS_DATA), LineSubGeometry.THICKNESS_FORMAT);
        context.drawTriangles(this._stage.getIndexBuffer(this.getIndexData()), 0, this.numTriangles);
    };
    /**
     * //TODO
     *
     * @param pool
     * @param renderableOwner
     * @param level
     * @param indexOffset
     * @returns {away.pool.LineSubMeshRenderable}
     * @private
     */
    LineSegmentRenderable.prototype._pGetOverflowRenderable = function (indexOffset) {
        return new LineSegmentRenderable(this._pool, this.renderableOwner, this._stage, this._level + 1, indexOffset);
    };
    LineSegmentRenderable._lineGeometry = new Object();
    LineSegmentRenderable.pONE_VECTOR = Array(1, 1, 1, 1);
    LineSegmentRenderable.pFRONT_VECTOR = Array(0, 0, -1, 0);
    /**
     *
     */
    LineSegmentRenderable.id = "linesegment";
    LineSegmentRenderable.vertexAttributesOffset = 3;
    return LineSegmentRenderable;
})(RenderableBase);
module.exports = LineSegmentRenderable;

//# sourceMappingURL=data:application/json;base64,