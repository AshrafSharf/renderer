var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Vector3D = require("awayjs-core/lib/geom/Vector3D");
var TriangleSubGeometry = require("awayjs-display/lib/base/TriangleSubGeometry");
var PickingColliderBase = require("awayjs-renderergl/lib/pick/PickingColliderBase");
/**
 * Pure JS picking collider for display objects. Used with the <code>RaycastPicker</code> picking object.
 *
 * @see away.base.DisplayObject#pickingCollider
 * @see away.pick.RaycastPicker
 *
 * @class away.pick.JSPickingCollider
 */
var JSPickingCollider = (function (_super) {
    __extends(JSPickingCollider, _super);
    /**
     * Creates a new <code>JSPickingCollider</code> object.
     *
     * @param findClosestCollision Determines whether the picking collider searches for the closest collision along the ray. Defaults to false.
     */
    function JSPickingCollider(findClosestCollision) {
        if (findClosestCollision === void 0) { findClosestCollision = false; }
        _super.call(this);
        this._findClosestCollision = findClosestCollision;
    }
    /**
     * @inheritDoc
     */
    JSPickingCollider.prototype._pTestRenderableCollision = function (renderable, pickingCollisionVO, shortestCollisionDistance) {
        var t;
        var i0, i1, i2;
        var rx, ry, rz;
        var nx, ny, nz;
        var cx, cy, cz;
        var coeff, u, v, w;
        var p0x, p0y, p0z;
        var p1x, p1y, p1z;
        var p2x, p2y, p2z;
        var s0x, s0y, s0z;
        var s1x, s1y, s1z;
        var nl, nDotV, D, disToPlane;
        var Q1Q2, Q1Q1, Q2Q2, RQ1, RQ2;
        var indexData = renderable.getIndexData().data;
        var collisionTriangleIndex = -1;
        var bothSides = renderable.materialOwner.material.bothSides;
        var positionData = renderable.getVertexData(TriangleSubGeometry.POSITION_DATA).data;
        var positionStride = renderable.getVertexData(TriangleSubGeometry.POSITION_DATA).dataPerVertex;
        var positionOffset = renderable.getVertexOffset(TriangleSubGeometry.POSITION_DATA);
        var uvData = renderable.getVertexData(TriangleSubGeometry.UV_DATA).data;
        var uvStride = renderable.getVertexData(TriangleSubGeometry.UV_DATA).dataPerVertex;
        var uvOffset = renderable.getVertexOffset(TriangleSubGeometry.UV_DATA);
        var numIndices = indexData.length;
        for (var index = 0; index < numIndices; index += 3) {
            // evaluate triangle indices
            i0 = positionOffset + indexData[index] * positionStride;
            i1 = positionOffset + indexData[(index + 1)] * positionStride;
            i2 = positionOffset + indexData[(index + 2)] * positionStride;
            // evaluate triangle positions
            p0x = positionData[i0];
            p0y = positionData[(i0 + 1)];
            p0z = positionData[(i0 + 2)];
            p1x = positionData[i1];
            p1y = positionData[(i1 + 1)];
            p1z = positionData[(i1 + 2)];
            p2x = positionData[i2];
            p2y = positionData[(i2 + 1)];
            p2z = positionData[(i2 + 2)];
            // evaluate sides and triangle normal
            s0x = p1x - p0x; // s0 = p1 - p0
            s0y = p1y - p0y;
            s0z = p1z - p0z;
            s1x = p2x - p0x; // s1 = p2 - p0
            s1y = p2y - p0y;
            s1z = p2z - p0z;
            nx = s0y * s1z - s0z * s1y; // n = s0 x s1
            ny = s0z * s1x - s0x * s1z;
            nz = s0x * s1y - s0y * s1x;
            nl = 1 / Math.sqrt(nx * nx + ny * ny + nz * nz); // normalize n
            nx *= nl;
            ny *= nl;
            nz *= nl;
            // -- plane intersection test --
            nDotV = nx * this.rayDirection.x + ny * +this.rayDirection.y + nz * this.rayDirection.z; // rayDirection . normal
            if ((!bothSides && nDotV < 0.0) || (bothSides && nDotV != 0.0)) {
                // find collision t
                D = -(nx * p0x + ny * p0y + nz * p0z);
                disToPlane = -(nx * this.rayPosition.x + ny * this.rayPosition.y + nz * this.rayPosition.z + D);
                t = disToPlane / nDotV;
                // find collision point
                cx = this.rayPosition.x + t * this.rayDirection.x;
                cy = this.rayPosition.y + t * this.rayDirection.y;
                cz = this.rayPosition.z + t * this.rayDirection.z;
                // collision point inside triangle? ( using barycentric coordinates )
                Q1Q2 = s0x * s1x + s0y * s1y + s0z * s1z;
                Q1Q1 = s0x * s0x + s0y * s0y + s0z * s0z;
                Q2Q2 = s1x * s1x + s1y * s1y + s1z * s1z;
                rx = cx - p0x;
                ry = cy - p0y;
                rz = cz - p0z;
                RQ1 = rx * s0x + ry * s0y + rz * s0z;
                RQ2 = rx * s1x + ry * s1y + rz * s1z;
                coeff = 1 / (Q1Q1 * Q2Q2 - Q1Q2 * Q1Q2);
                v = coeff * (Q2Q2 * RQ1 - Q1Q2 * RQ2);
                w = coeff * (-Q1Q2 * RQ1 + Q1Q1 * RQ2);
                if (v < 0)
                    continue;
                if (w < 0)
                    continue;
                u = 1 - v - w;
                if (!(u < 0) && t > 0 && t < shortestCollisionDistance) {
                    shortestCollisionDistance = t;
                    collisionTriangleIndex = index / 3;
                    pickingCollisionVO.rayEntryDistance = t;
                    pickingCollisionVO.localPosition = new Vector3D(cx, cy, cz);
                    pickingCollisionVO.localNormal = new Vector3D(nx, ny, nz);
                    pickingCollisionVO.uv = this._pGetCollisionUV(indexData, uvData, index, v, w, u, uvOffset, uvStride);
                    pickingCollisionVO.index = index;
                    //						pickingCollisionVO.subGeometryIndex = this.pGetMeshSubMeshIndex(renderable);
                    // if not looking for best hit, first found will do...
                    if (!this._findClosestCollision)
                        return true;
                }
            }
        }
        if (collisionTriangleIndex >= 0)
            return true;
        return false;
    };
    return JSPickingCollider;
})(PickingColliderBase);
module.exports = JSPickingCollider;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9waWNrL2pzcGlja2luZ2NvbGxpZGVyLnRzIl0sIm5hbWVzIjpbIkpTUGlja2luZ0NvbGxpZGVyIiwiSlNQaWNraW5nQ29sbGlkZXIuY29uc3RydWN0b3IiLCJKU1BpY2tpbmdDb2xsaWRlci5fcFRlc3RSZW5kZXJhYmxlQ29sbGlzaW9uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFPLFFBQVEsV0FBaUIsK0JBQStCLENBQUMsQ0FBQztBQUVqRSxJQUFPLG1CQUFtQixXQUFjLDZDQUE2QyxDQUFDLENBQUM7QUFLdkYsSUFBTyxtQkFBbUIsV0FBYyxnREFBZ0QsQ0FBQyxDQUFDO0FBRzFGLEFBUUE7Ozs7Ozs7R0FERztJQUNHLGlCQUFpQjtJQUFTQSxVQUExQkEsaUJBQWlCQSxVQUE0QkE7SUFJbERBOzs7O09BSUdBO0lBQ0hBLFNBVEtBLGlCQUFpQkEsQ0FTVkEsb0JBQW9DQTtRQUFwQ0Msb0NBQW9DQSxHQUFwQ0EsNEJBQW9DQTtRQUUvQ0EsaUJBQU9BLENBQUNBO1FBRVJBLElBQUlBLENBQUNBLHFCQUFxQkEsR0FBR0Esb0JBQW9CQSxDQUFDQTtJQUNuREEsQ0FBQ0E7SUFFREQ7O09BRUdBO0lBQ0lBLHFEQUF5QkEsR0FBaENBLFVBQWlDQSxVQUF5QkEsRUFBRUEsa0JBQXFDQSxFQUFFQSx5QkFBZ0NBO1FBRWxJRSxJQUFJQSxDQUFRQSxDQUFDQTtRQUNiQSxJQUFJQSxFQUFTQSxFQUFFQSxFQUFTQSxFQUFFQSxFQUFTQSxDQUFDQTtRQUNwQ0EsSUFBSUEsRUFBU0EsRUFBRUEsRUFBU0EsRUFBRUEsRUFBU0EsQ0FBQ0E7UUFDcENBLElBQUlBLEVBQVNBLEVBQUVBLEVBQVNBLEVBQUVBLEVBQVNBLENBQUNBO1FBQ3BDQSxJQUFJQSxFQUFTQSxFQUFFQSxFQUFTQSxFQUFFQSxFQUFTQSxDQUFDQTtRQUNwQ0EsSUFBSUEsS0FBWUEsRUFBRUEsQ0FBUUEsRUFBRUEsQ0FBUUEsRUFBRUEsQ0FBUUEsQ0FBQ0E7UUFDL0NBLElBQUlBLEdBQVVBLEVBQUVBLEdBQVVBLEVBQUVBLEdBQVVBLENBQUNBO1FBQ3ZDQSxJQUFJQSxHQUFVQSxFQUFFQSxHQUFVQSxFQUFFQSxHQUFVQSxDQUFDQTtRQUN2Q0EsSUFBSUEsR0FBVUEsRUFBRUEsR0FBVUEsRUFBRUEsR0FBVUEsQ0FBQ0E7UUFDdkNBLElBQUlBLEdBQVVBLEVBQUVBLEdBQVVBLEVBQUVBLEdBQVVBLENBQUNBO1FBQ3ZDQSxJQUFJQSxHQUFVQSxFQUFFQSxHQUFVQSxFQUFFQSxHQUFVQSxDQUFDQTtRQUN2Q0EsSUFBSUEsRUFBU0EsRUFBRUEsS0FBWUEsRUFBRUEsQ0FBUUEsRUFBRUEsVUFBaUJBLENBQUNBO1FBQ3pEQSxJQUFJQSxJQUFXQSxFQUFFQSxJQUFXQSxFQUFFQSxJQUFXQSxFQUFFQSxHQUFVQSxFQUFFQSxHQUFVQSxDQUFDQTtRQUNsRUEsSUFBSUEsU0FBU0EsR0FBaUJBLFVBQVVBLENBQUNBLFlBQVlBLEVBQUVBLENBQUNBLElBQUlBLENBQUNBO1FBQzdEQSxJQUFJQSxzQkFBc0JBLEdBQVVBLENBQUNBLENBQUNBLENBQUNBO1FBQ3ZDQSxJQUFJQSxTQUFTQSxHQUEyQkEsVUFBVUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsUUFBU0EsQ0FBQ0EsU0FBU0EsQ0FBQ0E7UUFFckZBLElBQUlBLFlBQVlBLEdBQWlCQSxVQUFVQSxDQUFDQSxhQUFhQSxDQUFDQSxtQkFBbUJBLENBQUNBLGFBQWFBLENBQUNBLENBQUNBLElBQUlBLENBQUNBO1FBQ2xHQSxJQUFJQSxjQUFjQSxHQUFVQSxVQUFVQSxDQUFDQSxhQUFhQSxDQUFDQSxtQkFBbUJBLENBQUNBLGFBQWFBLENBQUNBLENBQUNBLGFBQWFBLENBQUNBO1FBQ3RHQSxJQUFJQSxjQUFjQSxHQUFVQSxVQUFVQSxDQUFDQSxlQUFlQSxDQUFDQSxtQkFBbUJBLENBQUNBLGFBQWFBLENBQUNBLENBQUNBO1FBQzFGQSxJQUFJQSxNQUFNQSxHQUFpQkEsVUFBVUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsbUJBQW1CQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQTtRQUN0RkEsSUFBSUEsUUFBUUEsR0FBVUEsVUFBVUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsbUJBQW1CQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxhQUFhQSxDQUFDQTtRQUMxRkEsSUFBSUEsUUFBUUEsR0FBVUEsVUFBVUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsbUJBQW1CQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtRQUM5RUEsSUFBSUEsVUFBVUEsR0FBVUEsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0E7UUFFekNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEtBQUtBLEdBQVVBLENBQUNBLEVBQUVBLEtBQUtBLEdBQUdBLFVBQVVBLEVBQUVBLEtBQUtBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBO1lBQzNEQSxBQUNBQSw0QkFENEJBO1lBQzVCQSxFQUFFQSxHQUFHQSxjQUFjQSxHQUFHQSxTQUFTQSxDQUFFQSxLQUFLQSxDQUFFQSxHQUFDQSxjQUFjQSxDQUFDQTtZQUN4REEsRUFBRUEsR0FBR0EsY0FBY0EsR0FBR0EsU0FBU0EsQ0FBRUEsQ0FBQ0EsS0FBS0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBRUEsR0FBQ0EsY0FBY0EsQ0FBQ0E7WUFDOURBLEVBQUVBLEdBQUdBLGNBQWNBLEdBQUdBLFNBQVNBLENBQUVBLENBQUNBLEtBQUtBLEdBQUdBLENBQUNBLENBQUNBLENBQUVBLEdBQUNBLGNBQWNBLENBQUNBO1lBRTlEQSxBQUNBQSw4QkFEOEJBO1lBQzlCQSxHQUFHQSxHQUFHQSxZQUFZQSxDQUFFQSxFQUFFQSxDQUFFQSxDQUFDQTtZQUN6QkEsR0FBR0EsR0FBR0EsWUFBWUEsQ0FBRUEsQ0FBQ0EsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBRUEsQ0FBQ0E7WUFDL0JBLEdBQUdBLEdBQUdBLFlBQVlBLENBQUVBLENBQUNBLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBLENBQUVBLENBQUNBO1lBQy9CQSxHQUFHQSxHQUFHQSxZQUFZQSxDQUFFQSxFQUFFQSxDQUFFQSxDQUFDQTtZQUN6QkEsR0FBR0EsR0FBR0EsWUFBWUEsQ0FBRUEsQ0FBQ0EsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBRUEsQ0FBQ0E7WUFDL0JBLEdBQUdBLEdBQUdBLFlBQVlBLENBQUVBLENBQUNBLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBLENBQUVBLENBQUNBO1lBQy9CQSxHQUFHQSxHQUFHQSxZQUFZQSxDQUFFQSxFQUFFQSxDQUFFQSxDQUFDQTtZQUN6QkEsR0FBR0EsR0FBR0EsWUFBWUEsQ0FBRUEsQ0FBQ0EsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBRUEsQ0FBQ0E7WUFDL0JBLEdBQUdBLEdBQUdBLFlBQVlBLENBQUVBLENBQUNBLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBLENBQUVBLENBQUNBO1lBRS9CQSxBQUNBQSxxQ0FEcUNBO1lBQ3JDQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxFQUFFQSxlQUFlQTtZQUNoQ0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0E7WUFDaEJBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLENBQUNBO1lBQ2hCQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxFQUFFQSxlQUFlQTtZQUNoQ0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0E7WUFDaEJBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLENBQUNBO1lBQ2hCQSxFQUFFQSxHQUFHQSxHQUFHQSxHQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFDQSxHQUFHQSxFQUFFQSxjQUFjQTtZQUN0Q0EsRUFBRUEsR0FBR0EsR0FBR0EsR0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBQ0EsR0FBR0EsQ0FBQ0E7WUFDdkJBLEVBQUVBLEdBQUdBLEdBQUdBLEdBQUNBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUNBLEdBQUdBLENBQUNBO1lBQ3ZCQSxFQUFFQSxHQUFHQSxDQUFDQSxHQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxHQUFDQSxFQUFFQSxHQUFHQSxFQUFFQSxHQUFDQSxFQUFFQSxHQUFHQSxFQUFFQSxHQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxjQUFjQTtZQUN2REEsRUFBRUEsSUFBSUEsRUFBRUEsQ0FBQ0E7WUFDVEEsRUFBRUEsSUFBSUEsRUFBRUEsQ0FBQ0E7WUFDVEEsRUFBRUEsSUFBSUEsRUFBRUEsQ0FBQ0E7WUFFVEEsQUFDQUEsZ0NBRGdDQTtZQUNoQ0EsS0FBS0EsR0FBR0EsRUFBRUEsR0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsR0FBRUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsR0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsd0JBQXdCQTtZQUM1R0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBRUEsQ0FBQ0EsU0FBU0EsSUFBSUEsS0FBS0EsR0FBR0EsR0FBR0EsQ0FBRUEsSUFBSUEsQ0FBRUEsU0FBU0EsSUFBSUEsS0FBS0EsSUFBSUEsR0FBR0EsQ0FBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ3BFQSxBQUNBQSxtQkFEbUJBO2dCQUNuQkEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBRUEsRUFBRUEsR0FBQ0EsR0FBR0EsR0FBR0EsRUFBRUEsR0FBQ0EsR0FBR0EsR0FBR0EsRUFBRUEsR0FBQ0EsR0FBR0EsQ0FBRUEsQ0FBQ0E7Z0JBQ2xDQSxVQUFVQSxHQUFHQSxDQUFDQSxDQUFFQSxFQUFFQSxHQUFDQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQSxHQUFHQSxFQUFFQSxHQUFDQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQSxHQUFHQSxFQUFFQSxHQUFDQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFFQSxDQUFDQTtnQkFDNUZBLENBQUNBLEdBQUdBLFVBQVVBLEdBQUNBLEtBQUtBLENBQUNBO2dCQUNyQkEsQUFDQUEsdUJBRHVCQTtnQkFDdkJBLEVBQUVBLEdBQUdBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEdBQUNBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBLENBQUNBO2dCQUNoREEsRUFBRUEsR0FBR0EsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ2hEQSxFQUFFQSxHQUFHQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDaERBLEFBQ0FBLHFFQURxRUE7Z0JBQ3JFQSxJQUFJQSxHQUFHQSxHQUFHQSxHQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFDQSxHQUFHQSxDQUFDQTtnQkFDbkNBLElBQUlBLEdBQUdBLEdBQUdBLEdBQUNBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUNBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUNBLEdBQUdBLENBQUNBO2dCQUNuQ0EsSUFBSUEsR0FBR0EsR0FBR0EsR0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBQ0EsR0FBR0EsQ0FBQ0E7Z0JBQ25DQSxFQUFFQSxHQUFHQSxFQUFFQSxHQUFHQSxHQUFHQSxDQUFDQTtnQkFDZEEsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsR0FBR0EsQ0FBQ0E7Z0JBQ2RBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUdBLEdBQUdBLENBQUNBO2dCQUNkQSxHQUFHQSxHQUFHQSxFQUFFQSxHQUFDQSxHQUFHQSxHQUFHQSxFQUFFQSxHQUFDQSxHQUFHQSxHQUFHQSxFQUFFQSxHQUFDQSxHQUFHQSxDQUFDQTtnQkFDL0JBLEdBQUdBLEdBQUdBLEVBQUVBLEdBQUNBLEdBQUdBLEdBQUdBLEVBQUVBLEdBQUNBLEdBQUdBLEdBQUdBLEVBQUVBLEdBQUNBLEdBQUdBLENBQUNBO2dCQUMvQkEsS0FBS0EsR0FBR0EsQ0FBQ0EsR0FBQ0EsQ0FBRUEsSUFBSUEsR0FBQ0EsSUFBSUEsR0FBR0EsSUFBSUEsR0FBQ0EsSUFBSUEsQ0FBRUEsQ0FBQ0E7Z0JBQ3BDQSxDQUFDQSxHQUFHQSxLQUFLQSxHQUFDQSxDQUFFQSxJQUFJQSxHQUFDQSxHQUFHQSxHQUFHQSxJQUFJQSxHQUFDQSxHQUFHQSxDQUFFQSxDQUFDQTtnQkFDbENBLENBQUNBLEdBQUdBLEtBQUtBLEdBQUNBLENBQUVBLENBQUNBLElBQUlBLEdBQUNBLEdBQUdBLEdBQUdBLElBQUlBLEdBQUNBLEdBQUdBLENBQUVBLENBQUNBO2dCQUNuQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7b0JBQ1RBLFFBQVFBLENBQUNBO2dCQUNWQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtvQkFDVEEsUUFBUUEsQ0FBQ0E7Z0JBQ1ZBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO2dCQUNkQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFFQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSx5QkFBeUJBLENBQUNBLENBQUNBLENBQUNBO29CQUMxREEseUJBQXlCQSxHQUFHQSxDQUFDQSxDQUFDQTtvQkFDOUJBLHNCQUFzQkEsR0FBR0EsS0FBS0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ2pDQSxrQkFBa0JBLENBQUNBLGdCQUFnQkEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7b0JBQ3hDQSxrQkFBa0JBLENBQUNBLGFBQWFBLEdBQUdBLElBQUlBLFFBQVFBLENBQUNBLEVBQUVBLEVBQUVBLEVBQUVBLEVBQUVBLEVBQUVBLENBQUNBLENBQUNBO29CQUM1REEsa0JBQWtCQSxDQUFDQSxXQUFXQSxHQUFHQSxJQUFJQSxRQUFRQSxDQUFDQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxDQUFDQSxDQUFDQTtvQkFDMURBLGtCQUFrQkEsQ0FBQ0EsRUFBRUEsR0FBR0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxTQUFTQSxFQUFFQSxNQUFNQSxFQUFFQSxLQUFLQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxRQUFRQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQTtvQkFDckdBLGtCQUFrQkEsQ0FBQ0EsS0FBS0EsR0FBR0EsS0FBS0EsQ0FBQ0E7b0JBQ3RDQSxBQUdLQSxvRkFIK0VBO29CQUUvRUEsc0RBQXNEQTtvQkFDdERBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLHFCQUFxQkEsQ0FBQ0E7d0JBQy9CQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtnQkFDZEEsQ0FBQ0E7WUFDRkEsQ0FBQ0E7UUFDRkEsQ0FBQ0E7UUFHREEsRUFBRUEsQ0FBQ0EsQ0FBQ0Esc0JBQXNCQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUMvQkEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFFYkEsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7SUFDZEEsQ0FBQ0E7SUFDRkYsd0JBQUNBO0FBQURBLENBaklBLEFBaUlDQSxFQWpJK0IsbUJBQW1CLEVBaUlsRDtBQUVELEFBQTJCLGlCQUFsQixpQkFBaUIsQ0FBQyIsImZpbGUiOiJwaWNrL0pTUGlja2luZ0NvbGxpZGVyLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWZWN0b3IzRFx0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2dlb20vVmVjdG9yM0RcIik7XG5cbmltcG9ydCBUcmlhbmdsZVN1Ykdlb21ldHJ5XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvYmFzZS9UcmlhbmdsZVN1Ykdlb21ldHJ5XCIpO1xuaW1wb3J0IFBpY2tpbmdDb2xsaXNpb25WT1x0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL3BpY2svUGlja2luZ0NvbGxpc2lvblZPXCIpO1xuaW1wb3J0IElQaWNraW5nQ29sbGlkZXJcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL3BpY2svSVBpY2tpbmdDb2xsaWRlclwiKTtcbmltcG9ydCBNYXRlcmlhbEJhc2VcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvbWF0ZXJpYWxzL01hdGVyaWFsQmFzZVwiKTtcblxuaW1wb3J0IFBpY2tpbmdDb2xsaWRlckJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9waWNrL1BpY2tpbmdDb2xsaWRlckJhc2VcIik7XG5pbXBvcnQgUmVuZGVyYWJsZUJhc2VcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL3Bvb2wvUmVuZGVyYWJsZUJhc2VcIik7XG5cbi8qKlxuICogUHVyZSBKUyBwaWNraW5nIGNvbGxpZGVyIGZvciBkaXNwbGF5IG9iamVjdHMuIFVzZWQgd2l0aCB0aGUgPGNvZGU+UmF5Y2FzdFBpY2tlcjwvY29kZT4gcGlja2luZyBvYmplY3QuXG4gKlxuICogQHNlZSBhd2F5LmJhc2UuRGlzcGxheU9iamVjdCNwaWNraW5nQ29sbGlkZXJcbiAqIEBzZWUgYXdheS5waWNrLlJheWNhc3RQaWNrZXJcbiAqXG4gKiBAY2xhc3MgYXdheS5waWNrLkpTUGlja2luZ0NvbGxpZGVyXG4gKi9cbmNsYXNzIEpTUGlja2luZ0NvbGxpZGVyIGV4dGVuZHMgUGlja2luZ0NvbGxpZGVyQmFzZSBpbXBsZW1lbnRzIElQaWNraW5nQ29sbGlkZXJcbntcblx0cHJpdmF0ZSBfZmluZENsb3Nlc3RDb2xsaXNpb246Ym9vbGVhbjtcblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIG5ldyA8Y29kZT5KU1BpY2tpbmdDb2xsaWRlcjwvY29kZT4gb2JqZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0gZmluZENsb3Nlc3RDb2xsaXNpb24gRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBwaWNraW5nIGNvbGxpZGVyIHNlYXJjaGVzIGZvciB0aGUgY2xvc2VzdCBjb2xsaXNpb24gYWxvbmcgdGhlIHJheS4gRGVmYXVsdHMgdG8gZmFsc2UuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihmaW5kQ2xvc2VzdENvbGxpc2lvbjpib29sZWFuID0gZmFsc2UpXG5cdHtcblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5fZmluZENsb3Nlc3RDb2xsaXNpb24gPSBmaW5kQ2xvc2VzdENvbGxpc2lvbjtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIF9wVGVzdFJlbmRlcmFibGVDb2xsaXNpb24ocmVuZGVyYWJsZTpSZW5kZXJhYmxlQmFzZSwgcGlja2luZ0NvbGxpc2lvblZPOlBpY2tpbmdDb2xsaXNpb25WTywgc2hvcnRlc3RDb2xsaXNpb25EaXN0YW5jZTpudW1iZXIpOmJvb2xlYW5cblx0e1xuXHRcdHZhciB0Om51bWJlcjtcblx0XHR2YXIgaTA6bnVtYmVyLCBpMTpudW1iZXIsIGkyOm51bWJlcjtcblx0XHR2YXIgcng6bnVtYmVyLCByeTpudW1iZXIsIHJ6Om51bWJlcjtcblx0XHR2YXIgbng6bnVtYmVyLCBueTpudW1iZXIsIG56Om51bWJlcjtcblx0XHR2YXIgY3g6bnVtYmVyLCBjeTpudW1iZXIsIGN6Om51bWJlcjtcblx0XHR2YXIgY29lZmY6bnVtYmVyLCB1Om51bWJlciwgdjpudW1iZXIsIHc6bnVtYmVyO1xuXHRcdHZhciBwMHg6bnVtYmVyLCBwMHk6bnVtYmVyLCBwMHo6bnVtYmVyO1xuXHRcdHZhciBwMXg6bnVtYmVyLCBwMXk6bnVtYmVyLCBwMXo6bnVtYmVyO1xuXHRcdHZhciBwMng6bnVtYmVyLCBwMnk6bnVtYmVyLCBwMno6bnVtYmVyO1xuXHRcdHZhciBzMHg6bnVtYmVyLCBzMHk6bnVtYmVyLCBzMHo6bnVtYmVyO1xuXHRcdHZhciBzMXg6bnVtYmVyLCBzMXk6bnVtYmVyLCBzMXo6bnVtYmVyO1xuXHRcdHZhciBubDpudW1iZXIsIG5Eb3RWOm51bWJlciwgRDpudW1iZXIsIGRpc1RvUGxhbmU6bnVtYmVyO1xuXHRcdHZhciBRMVEyOm51bWJlciwgUTFRMTpudW1iZXIsIFEyUTI6bnVtYmVyLCBSUTE6bnVtYmVyLCBSUTI6bnVtYmVyO1xuXHRcdHZhciBpbmRleERhdGE6QXJyYXk8bnVtYmVyPiA9IHJlbmRlcmFibGUuZ2V0SW5kZXhEYXRhKCkuZGF0YTtcblx0XHR2YXIgY29sbGlzaW9uVHJpYW5nbGVJbmRleDpudW1iZXIgPSAtMTtcblx0XHR2YXIgYm90aFNpZGVzOmJvb2xlYW4gPSAoPE1hdGVyaWFsQmFzZT4gcmVuZGVyYWJsZS5tYXRlcmlhbE93bmVyLm1hdGVyaWFsKS5ib3RoU2lkZXM7XG5cblx0XHR2YXIgcG9zaXRpb25EYXRhOkFycmF5PG51bWJlcj4gPSByZW5kZXJhYmxlLmdldFZlcnRleERhdGEoVHJpYW5nbGVTdWJHZW9tZXRyeS5QT1NJVElPTl9EQVRBKS5kYXRhO1xuXHRcdHZhciBwb3NpdGlvblN0cmlkZTpudW1iZXIgPSByZW5kZXJhYmxlLmdldFZlcnRleERhdGEoVHJpYW5nbGVTdWJHZW9tZXRyeS5QT1NJVElPTl9EQVRBKS5kYXRhUGVyVmVydGV4O1xuXHRcdHZhciBwb3NpdGlvbk9mZnNldDpudW1iZXIgPSByZW5kZXJhYmxlLmdldFZlcnRleE9mZnNldChUcmlhbmdsZVN1Ykdlb21ldHJ5LlBPU0lUSU9OX0RBVEEpO1xuXHRcdHZhciB1dkRhdGE6QXJyYXk8bnVtYmVyPiA9IHJlbmRlcmFibGUuZ2V0VmVydGV4RGF0YShUcmlhbmdsZVN1Ykdlb21ldHJ5LlVWX0RBVEEpLmRhdGE7XG5cdFx0dmFyIHV2U3RyaWRlOm51bWJlciA9IHJlbmRlcmFibGUuZ2V0VmVydGV4RGF0YShUcmlhbmdsZVN1Ykdlb21ldHJ5LlVWX0RBVEEpLmRhdGFQZXJWZXJ0ZXg7XG5cdFx0dmFyIHV2T2Zmc2V0Om51bWJlciA9IHJlbmRlcmFibGUuZ2V0VmVydGV4T2Zmc2V0KFRyaWFuZ2xlU3ViR2VvbWV0cnkuVVZfREFUQSk7XG5cdFx0dmFyIG51bUluZGljZXM6bnVtYmVyID0gaW5kZXhEYXRhLmxlbmd0aDtcblxuXHRcdGZvciAodmFyIGluZGV4Om51bWJlciA9IDA7IGluZGV4IDwgbnVtSW5kaWNlczsgaW5kZXggKz0gMykgeyAvLyBzd2VlcCBhbGwgdHJpYW5nbGVzXG5cdFx0XHQvLyBldmFsdWF0ZSB0cmlhbmdsZSBpbmRpY2VzXG5cdFx0XHRpMCA9IHBvc2l0aW9uT2Zmc2V0ICsgaW5kZXhEYXRhWyBpbmRleCBdKnBvc2l0aW9uU3RyaWRlO1xuXHRcdFx0aTEgPSBwb3NpdGlvbk9mZnNldCArIGluZGV4RGF0YVsgKGluZGV4ICsgMSkgXSpwb3NpdGlvblN0cmlkZTtcblx0XHRcdGkyID0gcG9zaXRpb25PZmZzZXQgKyBpbmRleERhdGFbIChpbmRleCArIDIpIF0qcG9zaXRpb25TdHJpZGU7XG5cblx0XHRcdC8vIGV2YWx1YXRlIHRyaWFuZ2xlIHBvc2l0aW9uc1xuXHRcdFx0cDB4ID0gcG9zaXRpb25EYXRhWyBpMCBdO1xuXHRcdFx0cDB5ID0gcG9zaXRpb25EYXRhWyAoaTAgKyAxKSBdO1xuXHRcdFx0cDB6ID0gcG9zaXRpb25EYXRhWyAoaTAgKyAyKSBdO1xuXHRcdFx0cDF4ID0gcG9zaXRpb25EYXRhWyBpMSBdO1xuXHRcdFx0cDF5ID0gcG9zaXRpb25EYXRhWyAoaTEgKyAxKSBdO1xuXHRcdFx0cDF6ID0gcG9zaXRpb25EYXRhWyAoaTEgKyAyKSBdO1xuXHRcdFx0cDJ4ID0gcG9zaXRpb25EYXRhWyBpMiBdO1xuXHRcdFx0cDJ5ID0gcG9zaXRpb25EYXRhWyAoaTIgKyAxKSBdO1xuXHRcdFx0cDJ6ID0gcG9zaXRpb25EYXRhWyAoaTIgKyAyKSBdO1xuXG5cdFx0XHQvLyBldmFsdWF0ZSBzaWRlcyBhbmQgdHJpYW5nbGUgbm9ybWFsXG5cdFx0XHRzMHggPSBwMXggLSBwMHg7IC8vIHMwID0gcDEgLSBwMFxuXHRcdFx0czB5ID0gcDF5IC0gcDB5O1xuXHRcdFx0czB6ID0gcDF6IC0gcDB6O1xuXHRcdFx0czF4ID0gcDJ4IC0gcDB4OyAvLyBzMSA9IHAyIC0gcDBcblx0XHRcdHMxeSA9IHAyeSAtIHAweTtcblx0XHRcdHMxeiA9IHAyeiAtIHAwejtcblx0XHRcdG54ID0gczB5KnMxeiAtIHMweipzMXk7IC8vIG4gPSBzMCB4IHMxXG5cdFx0XHRueSA9IHMweipzMXggLSBzMHgqczF6O1xuXHRcdFx0bnogPSBzMHgqczF5IC0gczB5KnMxeDtcblx0XHRcdG5sID0gMS9NYXRoLnNxcnQobngqbnggKyBueSpueSArIG56Km56KTsgLy8gbm9ybWFsaXplIG5cblx0XHRcdG54ICo9IG5sO1xuXHRcdFx0bnkgKj0gbmw7XG5cdFx0XHRueiAqPSBubDtcblxuXHRcdFx0Ly8gLS0gcGxhbmUgaW50ZXJzZWN0aW9uIHRlc3QgLS1cblx0XHRcdG5Eb3RWID0gbngqdGhpcy5yYXlEaXJlY3Rpb24ueCArIG55KiArdGhpcy5yYXlEaXJlY3Rpb24ueSArIG56KnRoaXMucmF5RGlyZWN0aW9uLno7IC8vIHJheURpcmVjdGlvbiAuIG5vcm1hbFxuXHRcdFx0aWYgKCggIWJvdGhTaWRlcyAmJiBuRG90ViA8IDAuMCApIHx8ICggYm90aFNpZGVzICYmIG5Eb3RWICE9IDAuMCApKSB7IC8vIGFuIGludGVyc2VjdGlvbiBtdXN0IGV4aXN0XG5cdFx0XHRcdC8vIGZpbmQgY29sbGlzaW9uIHRcblx0XHRcdFx0RCA9IC0oIG54KnAweCArIG55KnAweSArIG56KnAweiApO1xuXHRcdFx0XHRkaXNUb1BsYW5lID0gLSggbngqdGhpcy5yYXlQb3NpdGlvbi54ICsgbnkqdGhpcy5yYXlQb3NpdGlvbi55ICsgbnoqdGhpcy5yYXlQb3NpdGlvbi56ICsgRCApO1xuXHRcdFx0XHR0ID0gZGlzVG9QbGFuZS9uRG90Vjtcblx0XHRcdFx0Ly8gZmluZCBjb2xsaXNpb24gcG9pbnRcblx0XHRcdFx0Y3ggPSB0aGlzLnJheVBvc2l0aW9uLnggKyB0KnRoaXMucmF5RGlyZWN0aW9uLng7XG5cdFx0XHRcdGN5ID0gdGhpcy5yYXlQb3NpdGlvbi55ICsgdCp0aGlzLnJheURpcmVjdGlvbi55O1xuXHRcdFx0XHRjeiA9IHRoaXMucmF5UG9zaXRpb24ueiArIHQqdGhpcy5yYXlEaXJlY3Rpb24uejtcblx0XHRcdFx0Ly8gY29sbGlzaW9uIHBvaW50IGluc2lkZSB0cmlhbmdsZT8gKCB1c2luZyBiYXJ5Y2VudHJpYyBjb29yZGluYXRlcyApXG5cdFx0XHRcdFExUTIgPSBzMHgqczF4ICsgczB5KnMxeSArIHMweipzMXo7XG5cdFx0XHRcdFExUTEgPSBzMHgqczB4ICsgczB5KnMweSArIHMweipzMHo7XG5cdFx0XHRcdFEyUTIgPSBzMXgqczF4ICsgczF5KnMxeSArIHMxeipzMXo7XG5cdFx0XHRcdHJ4ID0gY3ggLSBwMHg7XG5cdFx0XHRcdHJ5ID0gY3kgLSBwMHk7XG5cdFx0XHRcdHJ6ID0gY3ogLSBwMHo7XG5cdFx0XHRcdFJRMSA9IHJ4KnMweCArIHJ5KnMweSArIHJ6KnMwejtcblx0XHRcdFx0UlEyID0gcngqczF4ICsgcnkqczF5ICsgcnoqczF6O1xuXHRcdFx0XHRjb2VmZiA9IDEvKCBRMVExKlEyUTIgLSBRMVEyKlExUTIgKTtcblx0XHRcdFx0diA9IGNvZWZmKiggUTJRMipSUTEgLSBRMVEyKlJRMiApO1xuXHRcdFx0XHR3ID0gY29lZmYqKCAtUTFRMipSUTEgKyBRMVExKlJRMiApO1xuXHRcdFx0XHRpZiAodiA8IDApXG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdGlmICh3IDwgMClcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0dSA9IDEgLSB2IC0gdztcblx0XHRcdFx0aWYgKCEoIHUgPCAwICkgJiYgdCA+IDAgJiYgdCA8IHNob3J0ZXN0Q29sbGlzaW9uRGlzdGFuY2UpIHsgLy8gYWxsIHRlc3RzIHBhc3NlZFxuXHRcdFx0XHRcdHNob3J0ZXN0Q29sbGlzaW9uRGlzdGFuY2UgPSB0O1xuXHRcdFx0XHRcdGNvbGxpc2lvblRyaWFuZ2xlSW5kZXggPSBpbmRleC8zO1xuXHRcdFx0XHRcdHBpY2tpbmdDb2xsaXNpb25WTy5yYXlFbnRyeURpc3RhbmNlID0gdDtcblx0XHRcdFx0XHRwaWNraW5nQ29sbGlzaW9uVk8ubG9jYWxQb3NpdGlvbiA9IG5ldyBWZWN0b3IzRChjeCwgY3ksIGN6KTtcblx0XHRcdFx0XHRwaWNraW5nQ29sbGlzaW9uVk8ubG9jYWxOb3JtYWwgPSBuZXcgVmVjdG9yM0QobngsIG55LCBueik7XG5cdFx0XHRcdFx0cGlja2luZ0NvbGxpc2lvblZPLnV2ID0gdGhpcy5fcEdldENvbGxpc2lvblVWKGluZGV4RGF0YSwgdXZEYXRhLCBpbmRleCwgdiwgdywgdSwgdXZPZmZzZXQsIHV2U3RyaWRlKTtcblx0XHRcdFx0XHRwaWNraW5nQ29sbGlzaW9uVk8uaW5kZXggPSBpbmRleDtcbi8vXHRcdFx0XHRcdFx0cGlja2luZ0NvbGxpc2lvblZPLnN1Ykdlb21ldHJ5SW5kZXggPSB0aGlzLnBHZXRNZXNoU3ViTWVzaEluZGV4KHJlbmRlcmFibGUpO1xuXG5cdFx0XHRcdFx0Ly8gaWYgbm90IGxvb2tpbmcgZm9yIGJlc3QgaGl0LCBmaXJzdCBmb3VuZCB3aWxsIGRvLi4uXG5cdFx0XHRcdFx0aWYgKCF0aGlzLl9maW5kQ2xvc2VzdENvbGxpc2lvbilcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cblx0XHRpZiAoY29sbGlzaW9uVHJpYW5nbGVJbmRleCA+PSAwKVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxuZXhwb3J0ID0gSlNQaWNraW5nQ29sbGlkZXI7Il19