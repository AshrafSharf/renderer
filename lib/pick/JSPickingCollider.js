var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Vector3D = require("awayjs-core/lib/geom/Vector3D");
var TriangleSubGeometry = require("awayjs-display/lib/base/TriangleSubGeometry");
var PickingColliderBase = require("awayjs-renderergl/lib/pick/PickingColliderBase");
/**
 * Pure JS picking collider for display objects. Used with the <code>RaycastPicker</code> picking object.
 *
 * @see away.base.DisplayObject#pickingCollider
 * @see away.pick.RaycastPicker
 *
 * @class away.pick.JSPickingCollider
 */
var JSPickingCollider = (function (_super) {
    __extends(JSPickingCollider, _super);
    /**
     * Creates a new <code>JSPickingCollider</code> object.
     *
     * @param findClosestCollision Determines whether the picking collider searches for the closest collision along the ray. Defaults to false.
     */
    function JSPickingCollider(stage, findClosestCollision) {
        if (findClosestCollision === void 0) { findClosestCollision = false; }
        _super.call(this, stage);
        this._findClosestCollision = findClosestCollision;
    }
    /**
     * @inheritDoc
     */
    JSPickingCollider.prototype._pTestRenderableCollision = function (renderable, pickingCollisionVO, shortestCollisionDistance) {
        var t;
        var i0, i1, i2;
        var rx, ry, rz;
        var nx, ny, nz;
        var cx, cy, cz;
        var coeff, u, v, w;
        var p0x, p0y, p0z;
        var p1x, p1y, p1z;
        var p2x, p2y, p2z;
        var s0x, s0y, s0z;
        var s1x, s1y, s1z;
        var nl, nDotV, D, disToPlane;
        var Q1Q2, Q1Q1, Q2Q2, RQ1, RQ2;
        var indexData = renderable.getIndexData().data;
        var collisionTriangleIndex = -1;
        var bothSides = renderable.renderObjectOwner.bothSides;
        var positionData = renderable.getVertexData(TriangleSubGeometry.POSITION_DATA).data;
        var positionStride = renderable.getVertexData(TriangleSubGeometry.POSITION_DATA).dataPerVertex;
        var positionOffset = renderable.getVertexOffset(TriangleSubGeometry.POSITION_DATA);
        var uvData = renderable.getVertexData(TriangleSubGeometry.UV_DATA).data;
        var uvStride = renderable.getVertexData(TriangleSubGeometry.UV_DATA).dataPerVertex;
        var uvOffset = renderable.getVertexOffset(TriangleSubGeometry.UV_DATA);
        var numIndices = indexData.length;
        for (var index = 0; index < numIndices; index += 3) {
            // evaluate triangle indices
            i0 = positionOffset + indexData[index] * positionStride;
            i1 = positionOffset + indexData[(index + 1)] * positionStride;
            i2 = positionOffset + indexData[(index + 2)] * positionStride;
            // evaluate triangle positions
            p0x = positionData[i0];
            p0y = positionData[(i0 + 1)];
            p0z = positionData[(i0 + 2)];
            p1x = positionData[i1];
            p1y = positionData[(i1 + 1)];
            p1z = positionData[(i1 + 2)];
            p2x = positionData[i2];
            p2y = positionData[(i2 + 1)];
            p2z = positionData[(i2 + 2)];
            // evaluate sides and triangle normal
            s0x = p1x - p0x; // s0 = p1 - p0
            s0y = p1y - p0y;
            s0z = p1z - p0z;
            s1x = p2x - p0x; // s1 = p2 - p0
            s1y = p2y - p0y;
            s1z = p2z - p0z;
            nx = s0y * s1z - s0z * s1y; // n = s0 x s1
            ny = s0z * s1x - s0x * s1z;
            nz = s0x * s1y - s0y * s1x;
            nl = 1 / Math.sqrt(nx * nx + ny * ny + nz * nz); // normalize n
            nx *= nl;
            ny *= nl;
            nz *= nl;
            // -- plane intersection test --
            nDotV = nx * this.rayDirection.x + ny * +this.rayDirection.y + nz * this.rayDirection.z; // rayDirection . normal
            if ((!bothSides && nDotV < 0.0) || (bothSides && nDotV != 0.0)) {
                // find collision t
                D = -(nx * p0x + ny * p0y + nz * p0z);
                disToPlane = -(nx * this.rayPosition.x + ny * this.rayPosition.y + nz * this.rayPosition.z + D);
                t = disToPlane / nDotV;
                // find collision point
                cx = this.rayPosition.x + t * this.rayDirection.x;
                cy = this.rayPosition.y + t * this.rayDirection.y;
                cz = this.rayPosition.z + t * this.rayDirection.z;
                // collision point inside triangle? ( using barycentric coordinates )
                Q1Q2 = s0x * s1x + s0y * s1y + s0z * s1z;
                Q1Q1 = s0x * s0x + s0y * s0y + s0z * s0z;
                Q2Q2 = s1x * s1x + s1y * s1y + s1z * s1z;
                rx = cx - p0x;
                ry = cy - p0y;
                rz = cz - p0z;
                RQ1 = rx * s0x + ry * s0y + rz * s0z;
                RQ2 = rx * s1x + ry * s1y + rz * s1z;
                coeff = 1 / (Q1Q1 * Q2Q2 - Q1Q2 * Q1Q2);
                v = coeff * (Q2Q2 * RQ1 - Q1Q2 * RQ2);
                w = coeff * (-Q1Q2 * RQ1 + Q1Q1 * RQ2);
                if (v < 0)
                    continue;
                if (w < 0)
                    continue;
                u = 1 - v - w;
                if (!(u < 0) && t > 0 && t < shortestCollisionDistance) {
                    shortestCollisionDistance = t;
                    collisionTriangleIndex = index / 3;
                    pickingCollisionVO.rayEntryDistance = t;
                    pickingCollisionVO.localPosition = new Vector3D(cx, cy, cz);
                    pickingCollisionVO.localNormal = new Vector3D(nx, ny, nz);
                    pickingCollisionVO.uv = this._pGetCollisionUV(indexData, uvData, index, v, w, u, uvOffset, uvStride);
                    pickingCollisionVO.index = index;
                    //						pickingCollisionVO.subGeometryIndex = this.pGetMeshSubMeshIndex(renderable);
                    // if not looking for best hit, first found will do...
                    if (!this._findClosestCollision)
                        return true;
                }
            }
        }
        if (collisionTriangleIndex >= 0)
            return true;
        return false;
    };
    return JSPickingCollider;
})(PickingColliderBase);
module.exports = JSPickingCollider;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9waWNrL0pTUGlja2luZ0NvbGxpZGVyLnRzIl0sIm5hbWVzIjpbIkpTUGlja2luZ0NvbGxpZGVyIiwiSlNQaWNraW5nQ29sbGlkZXIuY29uc3RydWN0b3IiLCJKU1BpY2tpbmdDb2xsaWRlci5fcFRlc3RSZW5kZXJhYmxlQ29sbGlzaW9uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFPLFFBQVEsV0FBaUIsK0JBQStCLENBQUMsQ0FBQztBQUVqRSxJQUFPLG1CQUFtQixXQUFjLDZDQUE2QyxDQUFDLENBQUM7QUFPdkYsSUFBTyxtQkFBbUIsV0FBYyxnREFBZ0QsQ0FBQyxDQUFDO0FBRzFGLEFBUUE7Ozs7Ozs7R0FERztJQUNHLGlCQUFpQjtJQUFTQSxVQUExQkEsaUJBQWlCQSxVQUE0QkE7SUFJbERBOzs7O09BSUdBO0lBQ0hBLFNBVEtBLGlCQUFpQkEsQ0FTVkEsS0FBV0EsRUFBRUEsb0JBQW9DQTtRQUFwQ0Msb0NBQW9DQSxHQUFwQ0EsNEJBQW9DQTtRQUU1REEsa0JBQU1BLEtBQUtBLENBQUNBLENBQUNBO1FBRWJBLElBQUlBLENBQUNBLHFCQUFxQkEsR0FBR0Esb0JBQW9CQSxDQUFDQTtJQUNuREEsQ0FBQ0E7SUFFREQ7O09BRUdBO0lBQ0lBLHFEQUF5QkEsR0FBaENBLFVBQWlDQSxVQUF5QkEsRUFBRUEsa0JBQXFDQSxFQUFFQSx5QkFBZ0NBO1FBRWxJRSxJQUFJQSxDQUFRQSxDQUFDQTtRQUNiQSxJQUFJQSxFQUFTQSxFQUFFQSxFQUFTQSxFQUFFQSxFQUFTQSxDQUFDQTtRQUNwQ0EsSUFBSUEsRUFBU0EsRUFBRUEsRUFBU0EsRUFBRUEsRUFBU0EsQ0FBQ0E7UUFDcENBLElBQUlBLEVBQVNBLEVBQUVBLEVBQVNBLEVBQUVBLEVBQVNBLENBQUNBO1FBQ3BDQSxJQUFJQSxFQUFTQSxFQUFFQSxFQUFTQSxFQUFFQSxFQUFTQSxDQUFDQTtRQUNwQ0EsSUFBSUEsS0FBWUEsRUFBRUEsQ0FBUUEsRUFBRUEsQ0FB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LFlBQVlBLENBQUVBLEVBQUVBLENBQUVBLENBQUNBO1lBQ3pCQSxHQUFHQSxHQUFHQSxZQUFZQSxDQUFFQSxDQUFDQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFFQSxDQUFDQTtZQUMvQkEsR0FBR0EsR0FBR0EsWUFBWUEsQ0FBRUEsQ0FBQ0EsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBRUEsQ0FBQ0E7WUFDL0JBLEdBQUdBLEdBQUdBLFlBQVlBLENBQUVBLEVBQUVBLENBQUVBLENBQUNBO1lBQ3pCQSxHQUFHQSxHQUFHQSxZQUFZQSxDQUFFQSxDQUFDQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFFQSxDQUFDQTtZQUMvQkEsR0FBR0EsR0FBR0EsWUFBWUEsQ0FBRUEsQ0FBQ0EsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBRUEsQ0FBQ0E7WUFFL0JBLEFBQ0FBLHFDQURxQ0E7WUFDckNBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEVBQUVBLGVBQWVBO1lBQ2hDQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxDQUFDQTtZQUNoQkEsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0E7WUFDaEJBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEVBQUVBLGVBQWVBO1lBQ2hDQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxDQUFDQTtZQUNoQkEsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0E7WUFDaEJBLEVBQUVBLEdBQUdBLEdBQUdBLEdBQUNBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUNBLEdBQUdBLEVBQUVBLGNBQWNBO1lBQ3RDQSxFQUFFQSxHQUFHQSxHQUFHQSxHQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFDQSxHQUFHQSxDQUFDQTtZQUN2QkEsRUFBRUEsR0FBR0EsR0FBR0EsR0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBQ0EsR0FBR0EsQ0FBQ0E7WUFDdkJBLEVBQUVBLEdBQUdBLENBQUNBLEdBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLEdBQUNBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUNBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUNBLEVBQUVBLENBQUNBLEVBQUVBLGNBQWNBO1lBQ3ZEQSxFQUFFQSxJQUFJQSxFQUFFQSxDQUFDQTtZQUNUQSxFQUFFQSxJQUFJQSxFQUFFQSxDQUFDQTtZQUNUQSxFQUFFQSxJQUFJQSxFQUFFQSxDQUFDQTtZQUVUQSxBQUNBQSxnQ0FEZ0NBO1lBQ2hDQSxLQUFLQSxHQUFHQSxFQUFFQSxHQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQSxHQUFHQSxFQUFFQSxHQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQSxHQUFHQSxFQUFFQSxHQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQSxFQUFFQSx3QkFBd0JBO1lBQzVHQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFFQSxDQUFDQSxTQUFTQSxJQUFJQSxLQUFLQSxHQUFHQSxHQUFHQSxDQUFFQSxJQUFJQSxDQUFFQSxTQUFTQSxJQUFJQSxLQUFLQSxJQUFJQSxHQUFHQSxDQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDcEVBLEFBQ0FBLG1CQURtQkE7Z0JBQ25CQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFFQSxFQUFFQSxHQUFDQSxHQUFHQSxHQUFHQSxFQUFFQSxHQUFDQSxHQUFHQSxHQUFHQSxFQUFFQSxHQUFDQSxHQUFHQSxDQUFFQSxDQUFDQTtnQkFDbENBLFVBQVVBLEdBQUdBLENBQUNBLENBQUVBLEVBQUVBLEdBQUNBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLENBQUNBLEdBQUdBLEVBQUVBLEdBQUNBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLENBQUNBLEdBQUdBLEVBQUVBLEdBQUNBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUVBLENBQUNBO2dCQUM1RkEsQ0FBQ0EsR0FBR0EsVUFBVUEsR0FBQ0EsS0FBS0Es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QVdBLEdBQUdBLElBQUlBLFFBQVFBLENBQUNBLEVBQUVBLEVBQUVBLEVBQUVBLEVBQUVBLEVBQUVBLENBQUNBLENBQUNBO29CQUMxREEsa0JBQWtCQSxDQUFDQSxFQUFFQSxHQUFHQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLENBQUNBLFNBQVNBLEVBQUVBLE1BQU1BLEVBQUVBLEtBQUtBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLFFBQVFBLEVBQUVBLFFBQVFBLENBQUNBLENBQUNBO29CQUNyR0Esa0JBQWtCQSxDQUFDQSxLQUFLQSxHQUFHQSxLQUFLQSxDQUFDQTtvQkFDdENBLEFBR0tBLG9GQUgrRUE7b0JBRS9FQSxzREFBc0RBO29CQUN0REEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EscUJBQXFCQSxDQUFDQTt3QkFDL0JBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO2dCQUNkQSxDQUFDQTtZQUNGQSxDQUFDQTtRQUNGQSxDQUFDQTtRQUdEQSxFQUFFQSxDQUFDQSxDQUFDQSxzQkFBc0JBLElBQUlBLENBQUNBLENBQUNBO1lBQy9CQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtRQUViQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQTtJQUNkQSxDQUFDQTtJQUNGRix3QkFBQ0E7QUFBREEsQ0FqSUEsQUFpSUNBLEVBakkrQixtQkFBbUIsRUFpSWxEO0FBRUQsQUFBMkIsaUJBQWxCLGlCQUFpQixDQUFDIiwiZmlsZSI6InBpY2svSlNQaWNraW5nQ29sbGlkZXIuanMiLCJzb3VyY2VSb290IjoiLi4vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZlY3RvcjNEXHRcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9WZWN0b3IzRFwiKTtcclxuXHJcbmltcG9ydCBUcmlhbmdsZVN1Ykdlb21ldHJ5XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvYmFzZS9UcmlhbmdsZVN1Ykdlb21ldHJ5XCIpO1xyXG5pbXBvcnQgUGlja2luZ0NvbGxpc2lvblZPXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvcGljay9QaWNraW5nQ29sbGlzaW9uVk9cIik7XHJcbmltcG9ydCBJUGlja2luZ0NvbGxpZGVyXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9waWNrL0lQaWNraW5nQ29sbGlkZXJcIik7XHJcbmltcG9ydCBNYXRlcmlhbEJhc2VcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvbWF0ZXJpYWxzL01hdGVyaWFsQmFzZVwiKTtcclxuXHJcbmltcG9ydCBTdGFnZVx0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvU3RhZ2VcIik7XHJcblxyXG5pbXBvcnQgUGlja2luZ0NvbGxpZGVyQmFzZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL3BpY2svUGlja2luZ0NvbGxpZGVyQmFzZVwiKTtcclxuaW1wb3J0IFJlbmRlcmFibGVCYXNlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9wb29sL1JlbmRlcmFibGVCYXNlXCIpO1xyXG5cclxuLyoqXHJcbiAqIFB1cmUgSlMgcGlja2luZyBjb2xsaWRlciBmb3IgZGlzcGxheSBvYmplY3RzLiBVc2VkIHdpdGggdGhlIDxjb2RlPlJheWNhc3RQaWNrZXI8L2NvZGU+IHBpY2tpbmcgb2JqZWN0LlxyXG4gKlxyXG4gKiBAc2VlIGF3YXkuYmFzZS5EaXNwbGF5T2JqZWN0I3BpY2tpbmdDb2xsaWRlclxyXG4gKiBAc2VlIGF3YXkucGljay5SYXljYXN0UGlja2VyXHJcbiAqXHJcbiAqIEBjbGFzcyBhd2F5LnBpY2suSlNQaWNraW5nQ29sbGlkZXJcclxuICovXHJcbmNsYXNzIEpTUGlja2luZ0NvbGxpZGVyIGV4dGVuZHMgUGlja2luZ0NvbGxpZGVyQmFzZSBpbXBsZW1lbnRzIElQaWNraW5nQ29sbGlkZXJcclxue1xyXG5cdHByaXZhdGUgX2ZpbmRDbG9zZXN0Q29sbGlzaW9uOmJvb2xlYW47XHJcblxyXG5cdC8qKlxyXG5cdCAqIENyZWF0ZXMgYSBuZXcgPGNvZGU+SlNQaWNraW5nQ29sbGlkZXI8L2NvZGU+IG9iamVjdC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBmaW5kQ2xvc2VzdENvbGxpc2lvbiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBpY2tpbmcgY29sbGlkZXIgc2VhcmNoZXMgZm9yIHRoZSBjbG9zZXN0IGNvbGxpc2lvbiBhbG9uZyB0aGUgcmF5LiBEZWZhdWx0cyB0byBmYWxzZS5cclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihzdGFnZTpTdGFnZSwgZmluZENsb3Nlc3RDb2xsaXNpb246Ym9vbGVhbiA9IGZhbHNlKVxyXG5cdHtcclxuXHRcdHN1cGVyKHN0YWdlKTtcclxuXHJcblx0XHR0aGlzLl9maW5kQ2xvc2VzdENvbGxpc2lvbiA9IGZpbmRDbG9zZXN0Q29sbGlzaW9uO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXREb2NcclxuXHQgKi9cclxuXHRwdWJsaWMgX3BUZXN0UmVuZGVyYWJsZUNvbGxpc2lvbihyZW5kZXJhYmxlOlJlbmRlcmFibGVCYXNlLCBwaWNraW5nQ29sbGlzaW9uVk86UGlja2luZ0NvbGxpc2lvblZPLCBzaG9ydGVzdENvbGxpc2lvbkRpc3RhbmNlOm51bWJlcik6Ym9vbGVhblxyXG5cdHtcclxuXHRcdHZhciB0Om51bWJlcjtcclxuXHRcdHZhciBpMDpudW1iZXIsIGkxOm51bWJlciwgaTI6bnVtYmVyO1xyXG5cdFx0dmFyIHJ4Om51bWJlciwgcnk6bnVtYmVyLCByejpudW1iZXI7XHJcblx0XHR2YXIgbng6bnVtYmVyLCBueTpudW1iZXIsIG56Om51bWJlcjtcclxuXHRcdHZhciBjeDpudW1iZXIsIGN5Om51bWJlciwgY3o6bnVtYmVyO1xyXG5cdFx0dmFyIGNvZWZmOm51bWJlciwgdTpudW1iZXIsIHY6bnVtYmVyLCB3Om51bWJlcjtcclxuXHRcdHZhciBwMHg6bnVtYmVyLCBwMHk6bnVtYmVyLCBwMHo6bnVtYmVyO1xyXG5cdFx0dmFyIHAxeDpudW1iZXIsIHAxeTpudW1iZXIsIHAxejpudW1iZXI7XHJcblx0XHR2YXIgcDJ4Om51bWJlciwgcDJ5Om51bWJlciwgcDJ6Om51bWJlcjtcclxuXHRcdHZhciBzMHg6bnVtYmVyLCBzMHk6bnVtYmVyLCBzMHo6bnVtYmVyO1xyXG5cdFx0dmFyIHMxeDpudW1iZXIsIHMxeTpudW1iZXIsIHMxejpudW1iZXI7XHJcblx0XHR2YXIgbmw6bnVtYmVyLCBuRG90VjpudW1iZXIsIEQ6bnVtYmVyLCBkaXNUb1BsYW5lOm51bWJlcjtcclxuXHRcdHZhciBRMVEyOm51bWJlciwgUTFRMTpudW1iZXIsIFEyUTI6bnVtYmVyLCBSUTE6bnVtYmVyLCBSUTI6bnVtYmVyO1xyXG5cdFx0dmFyIGluZGV4RGF0YTpBcnJheTxudW1iZXI+ID0gcmVuZGVyYWJsZS5nZXRJbmRleERhdGEoKS5kYXRhO1xyXG5cdFx0dmFyIGNvbGxpc2lvblRyaWFuZ2xlSW5kZXg6bnVtYmVyID0gLTE7XHJcblx0XHR2YXIgYm90aFNpZGVzOmJvb2xlYW4gPSAoPE1hdGVyaWFsQmFzZT4gcmVuZGVyYWJsZS5yZW5kZXJPYmplY3RPd25lcikuYm90aFNpZGVzO1xyXG5cclxuXHRcdHZhciBwb3NpdGlvbkRhdGE6QXJyYXk8bnVtYmVyPiA9IHJlbmRlcmFibGUuZ2V0VmVydGV4RGF0YShUcmlhbmdsZVN1Ykdlb21ldHJ5LlBPU0lUSU9OX0RBVEEpLmRhdGE7XHJcblx0XHR2YXIgcG9zaXRpb25TdHJpZGU6bnVtYmVyID0gcmVuZGVyYWJsZS5nZXRWZXJ0ZXhEYXRhKFRyaWFuZ2xlU3ViR2VvbWV0cnkuUE9TSVRJT05fREFUQSkuZGF0YVBlclZlcnRleDtcclxuXHRcdHZhciBwb3NpdGlvbk9mZnNldDpudW1iZXIgPSByZW5kZXJhYmxlLmdldFZlcnRleE9mZnNldChUcmlhbmdsZVN1Ykdlb21ldHJ5LlBPU0lUSU9OX0RBVEEpO1xyXG5cdFx0dmFyIHV2RGF0YTpBcnJheTxudW1iZXI+ID0gcmVuZGVyYWJsZS5nZXRWZXJ0ZXhEYXRhKFRyaWFuZ2xlU3ViR2VvbWV0cnkuVVZfREFUQSkuZGF0YTtcclxuXHRcdHZhciB1dlN0cmlkZTpudW1iZXIgPSByZW5kZXJhYmxlLmdldFZlcnRleERhdGEoVHJpYW5nbGVTdWJHZW9tZXRyeS5VVl9EQVRBKS5kYXRhUGVyVmVydGV4O1xyXG5cdFx0dmFyIHV2T2Zmc2V0Om51bWJlciA9IHJlbmRlcmFibGUuZ2V0VmVydGV4T2Zmc2V0KFRyaWFuZ2xlU3ViR2VvbWV0cnkuVVZfREFUQSk7XHJcblx0XHR2YXIgbnVtSW5kaWNlczpudW1iZXIgPSBpbmRleERhdGEubGVuZ3RoO1xyXG5cclxuXHRcdGZvciAodmFyIGluZGV4Om51bWJlciA9IDA7IGluZGV4IDwgbnVtSW5kaWNlczsgaW5kZXggKz0gMykgeyAvLyBzd2VlcCBhbGwgdHJpYW5nbGVzXHJcblx0XHRcdC8vIGV2YWx1YXRlIHRyaWFuZ2xlIGluZGljZXNcclxuXHRcdFx0aTAgPSBwb3NpdGlvbk9mZnNldCArIGluZGV4RGF0YVsgaW5kZXggXSpwb3NpdGlvblN0cmlkZTtcclxuXHRcdFx0aTEgPSBwb3NpdGlvbk9mZnNldCArIGluZGV4RGF0YVsgKGluZGV4ICsgMSkgXSpwb3NpdGlvblN0cmlkZTtcclxuXHRcdFx0aTIgPSBwb3NpdGlvbk9mZnNldCArIGluZGV4RGF0YVsgKGluZGV4ICsgMikgXSpwb3NpdGlvblN0cmlkZTtcclxuXHJcblx0XHRcdC8vIGV2YWx1YXRlIHRyaWFuZ2xlIHBvc2l0aW9uc1xyXG5cdFx0XHRwMHggPSBwb3NpdGlvbkRhdGFbIGkwIF07XHJcblx0XHRcdHAweSA9IHBvc2l0aW9uRGF0YVsgKGkwICsgMSkgXTtcclxuXHRcdFx0cDB6ID0gcG9zaXRpb25EYXRhWyAoaTAgKyAyKSBdO1xyXG5cdFx0XHRwMXggPSBwb3NpdGlvbkRhdGFbIGkxIF07XHJcblx0XHRcdHAxeSA9IHBvc2l0aW9uRGF0YVsgKGkxICsgMSkgXTtcclxuXHRcdFx0cDF6ID0gcG9zaXRpb25EYXRhWyAoaTEgKyAyKSBdO1xyXG5cdFx0XHRwMnggPSBwb3NpdGlvbkRhdGFbIGkyIF07XHJcblx0XHRcdHAyeSA9IHBvc2l0aW9uRGF0YVsgKGkyICsgMSkgXTtcclxuXHRcdFx0cDJ6ID0gcG9zaXRpb25EYXRhWyAoaTIgKyAyKSBdO1xyXG5cclxuXHRcdFx0Ly8gZXZhbHVhdGUgc2lkZXMgYW5kIHRyaWFuZ2xlIG5vcm1hbFxyXG5cdFx0XHRzMHggPSBwMXggLSBwMHg7IC8vIHMwID0gcDEgLSBwMFxyXG5cdFx0XHRzMHkgPSBwMXkgLSBwMHk7XHJcblx0XHRcdHMweiA9IHAxeiAtIHAwejtcclxuXHRcdFx0czF4ID0gcDJ4IC0gcDB4OyAvLyBzMSA9IHAyIC0gcDBcclxuXHRcdFx0czF5ID0gcDJ5IC0gcDB5O1xyXG5cdFx0XHRzMXogPSBwMnogLSBwMHo7XHJcblx0XHRcdG54ID0gczB5KnMxeiAtIHMweipzMXk7IC8vIG4gPSBzMCB4IHMxXHJcblx0XHRcdG55ID0gczB6KnMxeCAtIHMweCpzMXo7XHJcblx0XHRcdG56ID0gczB4KnMxeSAtIHMweSpzMXg7XHJcblx0XHRcdG5sID0gMS9NYXRoLnNxcnQobngqbnggKyBueSpueSArIG56Km56KTsgLy8gbm9ybWFsaXplIG5cclxuXHRcdFx0bnggKj0gbmw7XHJcblx0XHRcdG55ICo9IG5sO1xyXG5cdFx0XHRueiAqPSBubDtcclxuXHJcblx0XHRcdC8vIC0tIHBsYW5lIGludGVyc2VjdGlvbiB0ZXN0IC0tXHJcblx0XHRcdG5Eb3RWID0gbngqdGhpcy5yYXlEaXJlY3Rpb24ueCArIG55KiArdGhpcy5yYXlEaXJlY3Rpb24ueSArIG56KnRoaXMucmF5RGlyZWN0aW9uLno7IC8vIHJheURpcmVjdGlvbiAuIG5vcm1hbFxyXG5cdFx0XHRpZiAoKCAhYm90aFNpZGVzICYmIG5Eb3RWIDwgMC4wICkgfHwgKCBib3RoU2lkZXMgJiYgbkRvdFYgIT0gMC4wICkpIHsgLy8gYW4gaW50ZXJzZWN0aW9uIG11c3QgZXhpc3RcclxuXHRcdFx0XHQvLyBmaW5kIGNvbGxpc2lvbiB0XHJcblx0XHRcdFx0RCA9IC0oIG54KnAweCArIG55KnAweSArIG56KnAweiApO1xyXG5cdFx0XHRcdGRpc1RvUGxhbmUgPSAtKCBueCp0aGlzLnJheVBvc2l0aW9uLnggKyBueSp0aGlzLnJheVBvc2l0aW9uLnkgKyBueip0aGlzLnJheVBvc2l0aW9uLnogKyBEICk7XHJcblx0XHRcdFx0dCA9IGRpc1RvUGxhbmUvbkRvdFY7XHJcblx0XHRcdFx0Ly8gZmluZCBjb2xsaXNpb24gcG9pbnRcclxuXHRcdFx0XHRjeCA9IHRoaXMucmF5UG9zaXRpb24ueCArIHQqdGhpcy5yYXlEaXJlY3Rpb24ueDtcclxuXHRcdFx0XHRjeSA9IHRoaXMucmF5UG9zaXRpb24ueSArIHQqdGhpcy5yYXlEaXJlY3Rpb24ueTtcclxuXHRcdFx0XHRjeiA9IHRoaXMucmF5UG9zaXRpb24ueiArIHQqdGhpcy5yYXlEaXJlY3Rpb24uejtcclxuXHRcdFx0XHQvLyBjb2xsaXNpb24gcG9pbnQgaW5zaWRlIHRyaWFuZ2xlPyAoIHVzaW5nIGJhcnljZW50cmljIGNvb3JkaW5hdGVzIClcclxuXHRcdFx0XHRRMVEyID0gczB4KnMxeCArIHMweSpzMXkgKyBzMHoqczF6O1xyXG5cdFx0XHRcdFExUTEgPSBzMHgqczB4ICsgczB5KnMweSArIHMweipzMHo7XHJcblx0XHRcdFx0UTJRMiA9IHMxeCpzMXggKyBzMXkqczF5ICsgczF6KnMxejtcclxuXHRcdFx0XHRyeCA9IGN4IC0gcDB4O1xyXG5cdFx0XHRcdHJ5ID0gY3kgLSBwMHk7XHJcblx0XHRcdFx0cnogPSBjeiAtIHAwejtcclxuXHRcdFx0XHRSUTEgPSByeCpzMHggKyByeSpzMHkgKyByeipzMHo7XHJcblx0XHRcdFx0UlEyID0gcngqczF4ICsgcnkqczF5ICsgcnoqczF6O1xyXG5cdFx0XHRcdGNvZWZmID0gMS8oIFExUTEqUTJRMiAtIFExUTIqUTFRMiApO1xyXG5cdFx0XHRcdHYgPSBjb2VmZiooIFEyUTIqUlExIC0gUTFRMipSUTIgKTtcclxuXHRcdFx0XHR3ID0gY29lZmYqKCAtUTFRMipSUTEgKyBRMVExKlJRMiApO1xyXG5cdFx0XHRcdGlmICh2IDwgMClcclxuXHRcdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHRcdGlmICh3IDwgMClcclxuXHRcdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHRcdHUgPSAxIC0gdiAtIHc7XHJcblx0XHRcdFx0aWYgKCEoIHUgPCAwICkgJiYgdCA+IDAgJiYgdCA8IHNob3J0ZXN0Q29sbGlzaW9uRGlzdGFuY2UpIHsgLy8gYWxsIHRlc3RzIHBhc3NlZFxyXG5cdFx0XHRcdFx0c2hvcnRlc3RDb2xsaXNpb25EaXN0YW5jZSA9IHQ7XHJcblx0XHRcdFx0XHRjb2xsaXNpb25UcmlhbmdsZUluZGV4ID0gaW5kZXgvMztcclxuXHRcdFx0XHRcdHBpY2tpbmdDb2xsaXNpb25WTy5yYXlFbnRyeURpc3RhbmNlID0gdDtcclxuXHRcdFx0XHRcdHBpY2tpbmdDb2xsaXNpb25WTy5sb2NhbFBvc2l0aW9uID0gbmV3IFZlY3RvcjNEKGN4LCBjeSwgY3opO1xyXG5cdFx0XHRcdFx0cGlja2luZ0NvbGxpc2lvblZPLmxvY2FsTm9ybWFsID0gbmV3IFZlY3RvcjNEKG54LCBueSwgbnopO1xyXG5cdFx0XHRcdFx0cGlja2luZ0NvbGxpc2lvblZPLnV2ID0gdGhpcy5fcEdldENvbGxpc2lvblVWKGluZGV4RGF0YSwgdXZEYXRhLCBpbmRleCwgdiwgdywgdSwgdXZPZmZzZXQsIHV2U3RyaWRlKTtcclxuXHRcdFx0XHRcdHBpY2tpbmdDb2xsaXNpb25WTy5pbmRleCA9IGluZGV4O1xyXG4vL1x0XHRcdFx0XHRcdHBpY2tpbmdDb2xsaXNpb25WTy5zdWJHZW9tZXRyeUluZGV4ID0gdGhpcy5wR2V0TWVzaFN1Yk1lc2hJbmRleChyZW5kZXJhYmxlKTtcclxuXHJcblx0XHRcdFx0XHQvLyBpZiBub3QgbG9va2luZyBmb3IgYmVzdCBoaXQsIGZpcnN0IGZvdW5kIHdpbGwgZG8uLi5cclxuXHRcdFx0XHRcdGlmICghdGhpcy5fZmluZENsb3Nlc3RDb2xsaXNpb24pXHJcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHJcblx0XHRpZiAoY29sbGlzaW9uVHJpYW5nbGVJbmRleCA+PSAwKVxyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgPSBKU1BpY2tpbmdDb2xsaWRlcjsiXX0=