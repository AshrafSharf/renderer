var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Vector3D = require("awayjs-core/lib/geom/Vector3D");
var TriangleSubGeometry = require("awayjs-display/lib/base/TriangleSubGeometry");
var PickingColliderBase = require("awayjs-renderergl/lib/pick/PickingColliderBase");
/**
 * Pure JS picking collider for display objects. Used with the <code>RaycastPicker</code> picking object.
 *
 * @see away.base.DisplayObject#pickingCollider
 * @see away.pick.RaycastPicker
 *
 * @class away.pick.JSPickingCollider
 */
var JSPickingCollider = (function (_super) {
    __extends(JSPickingCollider, _super);
    /**
     * Creates a new <code>JSPickingCollider</code> object.
     *
     * @param findClosestCollision Determines whether the picking collider searches for the closest collision along the ray. Defaults to false.
     */
    function JSPickingCollider(findClosestCollision) {
        if (findClosestCollision === void 0) { findClosestCollision = false; }
        _super.call(this);
        this._findClosestCollision = findClosestCollision;
    }
    /**
     * @inheritDoc
     */
    JSPickingCollider.prototype._pTestRenderableCollision = function (renderable, pickingCollisionVO, shortestCollisionDistance) {
        var t;
        var i0, i1, i2;
        var rx, ry, rz;
        var nx, ny, nz;
        var cx, cy, cz;
        var coeff, u, v, w;
        var p0x, p0y, p0z;
        var p1x, p1y, p1z;
        var p2x, p2y, p2z;
        var s0x, s0y, s0z;
        var s1x, s1y, s1z;
        var nl, nDotV, D, disToPlane;
        var Q1Q2, Q1Q1, Q2Q2, RQ1, RQ2;
        var indexData = renderable.getIndexData().data;
        var collisionTriangleIndex = -1;
        var bothSides = renderable.materialOwner.material.bothSides;
        var positionData = renderable.getVertexData(TriangleSubGeometry.POSITION_DATA).data;
        var positionStride = renderable.getVertexData(TriangleSubGeometry.POSITION_DATA).dataPerVertex;
        var positionOffset = renderable.getVertexOffset(TriangleSubGeometry.POSITION_DATA);
        var uvData = renderable.getVertexData(TriangleSubGeometry.UV_DATA).data;
        var uvStride = renderable.getVertexData(TriangleSubGeometry.UV_DATA).dataPerVertex;
        var uvOffset = renderable.getVertexOffset(TriangleSubGeometry.UV_DATA);
        var numIndices = indexData.length;
        for (var index = 0; index < numIndices; index += 3) {
            // evaluate triangle indices
            i0 = positionOffset + indexData[index] * positionStride;
            i1 = positionOffset + indexData[(index + 1)] * positionStride;
            i2 = positionOffset + indexData[(index + 2)] * positionStride;
            // evaluate triangle positions
            p0x = positionData[i0];
            p0y = positionData[(i0 + 1)];
            p0z = positionData[(i0 + 2)];
            p1x = positionData[i1];
            p1y = positionData[(i1 + 1)];
            p1z = positionData[(i1 + 2)];
            p2x = positionData[i2];
            p2y = positionData[(i2 + 1)];
            p2z = positionData[(i2 + 2)];
            // evaluate sides and triangle normal
            s0x = p1x - p0x; // s0 = p1 - p0
            s0y = p1y - p0y;
            s0z = p1z - p0z;
            s1x = p2x - p0x; // s1 = p2 - p0
            s1y = p2y - p0y;
            s1z = p2z - p0z;
            nx = s0y * s1z - s0z * s1y; // n = s0 x s1
            ny = s0z * s1x - s0x * s1z;
            nz = s0x * s1y - s0y * s1x;
            nl = 1 / Math.sqrt(nx * nx + ny * ny + nz * nz); // normalize n
            nx *= nl;
            ny *= nl;
            nz *= nl;
            // -- plane intersection test --
            nDotV = nx * this.rayDirection.x + ny * +this.rayDirection.y + nz * this.rayDirection.z; // rayDirection . normal
            if ((!bothSides && nDotV < 0.0) || (bothSides && nDotV != 0.0)) {
                // find collision t
                D = -(nx * p0x + ny * p0y + nz * p0z);
                disToPlane = -(nx * this.rayPosition.x + ny * this.rayPosition.y + nz * this.rayPosition.z + D);
                t = disToPlane / nDotV;
                // find collision point
                cx = this.rayPosition.x + t * this.rayDirection.x;
                cy = this.rayPosition.y + t * this.rayDirection.y;
                cz = this.rayPosition.z + t * this.rayDirection.z;
                // collision point inside triangle? ( using barycentric coordinates )
                Q1Q2 = s0x * s1x + s0y * s1y + s0z * s1z;
                Q1Q1 = s0x * s0x + s0y * s0y + s0z * s0z;
                Q2Q2 = s1x * s1x + s1y * s1y + s1z * s1z;
                rx = cx - p0x;
                ry = cy - p0y;
                rz = cz - p0z;
                RQ1 = rx * s0x + ry * s0y + rz * s0z;
                RQ2 = rx * s1x + ry * s1y + rz * s1z;
                coeff = 1 / (Q1Q1 * Q2Q2 - Q1Q2 * Q1Q2);
                v = coeff * (Q2Q2 * RQ1 - Q1Q2 * RQ2);
                w = coeff * (-Q1Q2 * RQ1 + Q1Q1 * RQ2);
                if (v < 0)
                    continue;
                if (w < 0)
                    continue;
                u = 1 - v - w;
                if (!(u < 0) && t > 0 && t < shortestCollisionDistance) {
                    shortestCollisionDistance = t;
                    collisionTriangleIndex = index / 3;
                    pickingCollisionVO.rayEntryDistance = t;
                    pickingCollisionVO.localPosition = new Vector3D(cx, cy, cz);
                    pickingCollisionVO.localNormal = new Vector3D(nx, ny, nz);
                    pickingCollisionVO.uv = this._pGetCollisionUV(indexData, uvData, index, v, w, u, uvOffset, uvStride);
                    pickingCollisionVO.index = index;
                    //						pickingCollisionVO.subGeometryIndex = this.pGetMeshSubMeshIndex(renderable);
                    // if not looking for best hit, first found will do...
                    if (!this._findClosestCollision)
                        return true;
                }
            }
        }
        if (collisionTriangleIndex >= 0)
            return true;
        return false;
    };
    return JSPickingCollider;
})(PickingColliderBase);
module.exports = JSPickingCollider;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9waWNrL2pzcGlja2luZ2NvbGxpZGVyLnRzIl0sIm5hbWVzIjpbIkpTUGlja2luZ0NvbGxpZGVyIiwiSlNQaWNraW5nQ29sbGlkZXIuY29uc3RydWN0b3IiLCJKU1BpY2tpbmdDb2xsaWRlci5fcFRlc3RSZW5kZXJhYmxlQ29sbGlzaW9uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFPLFFBQVEsV0FBaUIsK0JBQStCLENBQUMsQ0FBQztBQUVqRSxJQUFPLG1CQUFtQixXQUFjLDZDQUE2QyxDQUFDLENBQUM7QUFPdkYsSUFBTyxtQkFBbUIsV0FBYyxnREFBZ0QsQ0FBQyxDQUFDO0FBRTFGLEFBUUE7Ozs7Ozs7R0FERztJQUNHLGlCQUFpQjtJQUFTQSxVQUExQkEsaUJBQWlCQSxVQUE0QkE7SUFJbERBOzs7O09BSUdBO0lBQ0hBLFNBVEtBLGlCQUFpQkEsQ0FTVkEsb0JBQW9DQTtRQUFwQ0Msb0NBQW9DQSxHQUFwQ0EsNEJBQW9DQTtRQUUvQ0EsaUJBQU9BLENBQUNBO1FBRVJBLElBQUlBLENBQUNBLHFCQUFxQkEsR0FBR0Esb0JBQW9CQSxDQUFDQTtJQUNuREEsQ0FBQ0E7SUFFREQ7O09BRUdBO0lBQ0lBLHFEQUF5QkEsR0FBaENBLFVBQWlDQSxVQUF5QkEsRUFBRUEsa0JBQXFDQSxFQUFFQSx5QkFBZ0NBO1FBRWxJRSxJQUFJQSxDQUFRQSxDQUFDQTtRQUNiQSxJQUFJQSxFQUFTQSxFQUFFQSxFQUFTQSxFQUFFQSxFQUFTQSxDQUFDQTtRQUNwQ0EsSUFBSUEsRUFBU0EsRUFBRUEsRUFBU0EsRUFBRUEsRUFBU0EsQ0FBQ0E7UUFDcENBLElBQUlBLEVBQVNBLEVBQUVBLEVBQVNBLEVBQUVBLEVBQVNBLENBQUNBO1FBQ3BDQSxJQUFJQSxFQUFTQSxFQUFFQSxFQUFTQSxFQUFFQSxFQUFTQSxDQUFDQTtRQUNwQ0EsSUFBSUEsS0FBWUEsRUFBRUEsQ0FBUUEsRUFBRUEsQ0FBUUEsRUFBRUEsQ0FBUUEsQ0FBQ0E7UUFD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QUFFQSxDQUFFQSxDQUFDQTtZQUN6QkEsR0FBR0EsR0FBR0EsWUFBWUEsQ0FBRUEsQ0FBQ0EsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBRUEsQ0FBQ0E7WUFDL0JBLEdBQUdBLEdBQUdBLFlBQVlBLENBQUVBLENBQUNBLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBLENBQUVBLENBQUNBO1lBQy9CQSxHQUFHQSxHQUFHQSxZQUFZQSxDQUFFQSxFQUFFQSxDQUFFQSxDQUFDQTtZQUN6QkEsR0FBR0EsR0FBR0EsWUFBWUEsQ0FBRUEsQ0FBQ0EsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBRUEsQ0FBQ0E7WUFDL0JBLEdBQUdBLEdBQUdBLFlBQVlBLENBQUVBLENBQUNBLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBLENBQUVBLENBQUNBO1lBRS9CQSxBQUNBQSxxQ0FEcUNBO1lBQ3JDQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxFQUFFQSxlQUFlQTtZQUNoQ0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0E7WUFDaEJBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLENBQUNBO1lBQ2hCQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxFQUFFQSxlQUFlQTtZQUNoQ0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0E7WUFDaEJBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLENBQUNBO1lBQ2hCQSxFQUFFQSxHQUFHQSxHQUFHQSxHQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFDQSxHQUFHQSxFQUFFQSxjQUFjQTtZQUN0Q0EsRUFBRUEsR0FBR0EsR0FBR0EsR0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBQ0EsR0FBR0EsQ0FBQ0E7WUFDdkJBLEVBQUVBLEdBQUdBLEdBQUdBLEdBQUNBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUNBLEdBQUdBLENBQUNBO1lBQ3ZCQSxFQUFFQSxHQUFHQSxDQUFDQSxHQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxHQUFDQSxFQUFFQSxHQUFHQSxFQUFFQSxHQUFDQSxFQUFFQSxHQUFHQSxFQUFFQSxHQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxjQUFjQTtZQUN2REEsRUFBRUEsSUFBSUEsRUFBRUEsQ0FBQ0E7WUFDVEEsRUFBRUEsSUFBSUEsRUFBRUEsQ0FBQ0E7WUFDVEEsRUFBRUEsSUFBSUEsRUFBRUEsQ0FBQ0E7WUFFVEEsQUFDQUEsZ0NBRGdDQTtZQUNoQ0EsS0FBS0EsR0FBR0EsRUFBRUEsR0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsR0FBRUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsR0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsd0JBQXdCQTtZQUM1R0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBRUEsQ0FBQ0EsU0FBU0EsSUFBSUEsS0FBS0EsR0FBR0EsR0FBR0EsQ0FBRUEsSUFBSUEsQ0FBRUEsU0FBU0EsSUFBSUEsS0FBS0EsSUFBSUEsR0FBR0EsQ0FBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ3BFQSxBQUNBQSxtQkFEbUJBO2dCQUNuQkEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBRUEsRUFBRUEsR0FBQ0EsR0FBR0EsR0FBR0EsRUFBRUEsR0FBQ0EsR0FBR0EsR0FBR0EsRUFBRUEsR0FBQ0EsR0FBR0EsQ0FBRUEsQ0FBQ0E7Z0JBQ2xDQSxVQUFVQSxHQUFHQSxDQUFDQSxDQUFFQSxFQUFFQSxHQUFDQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQSxHQUFHQSxFQUFFQSxHQUFDQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQSxHQUFHQSxFQUFFQSxHQUFDQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFFQSxDQUFDQTtnQkFDNUZBLENBQUNBLEdBQUdBLFVBQVVBLEdBQUNBLEtBQUtBLENBQUNBO2dCQUNyQkEsQUFDQUEsdUJBRHVCQTtnQkFDdkJBLEVBQUVBLEdBQUdBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEdBQUNBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBLENBQUNBO2dCQUNoREEsRUFBRUEsR0FBR0EsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ2hEQSxFQUFFQSxHQUFHQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDaERBLEFBQ0FBLHFFQURxRUE7Z0JBQ3JFQSxJQUFJQSxHQUFHQSxHQUFHQSxHQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFDQSxHQUFHQSxDQUFDQTtnQkFDbkNBLElBQUlBLEdBQUdBLEdBQUdBLEdBQUNBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUNBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUNBLEdBQUdBLENBQUNBO2dCQUNuQ0EsSUFBSUEsR0FBR0EsR0FBR0EsR0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBQ0EsR0FBR0EsQ0FBQ0E7Z0JBQ25DQSxFQUFFQSxHQUFHQSxFQUFFQSxHQUFHQSxHQUFHQSxDQUFDQTtnQkFDZEEsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsR0FBR0EsQ0FBQ0E7Z0JBQ2RBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUdBLEdBQUdBLENBQUNBO2dCQUNkQSxHQUFHQSxHQUFHQSxFQUFFQSxHQUFDQSxHQUFHQSxHQUFHQSxFQUFFQSxHQUFDQSxHQUFHQSxHQUFHQSxFQUFFQSxHQUFDQSxHQUFHQSxDQUFDQTtnQkFDL0JBLEdBQUdBLEdBQUdBLEVBQUVBLEdBQUNBLEdBQUdBLEdBQUdBLEVBQUVBLEdBQUNBLEdBQUdBLEdBQUdBLEVBQUVBLEdBQUNBLEdBQUdBLENBQUNBO2dCQUMvQkEsS0FBS0EsR0FBR0EsQ0FBQ0EsR0FBQ0EsQ0FBRUEsSUFBSUEsR0FBQ0EsSUFBSUEsR0FBR0EsSUFBSUEsR0FBQ0EsSUFBSUEsQ0FBRUEsQ0FBQ0E7Z0JBQ3BDQSxDQUFDQSxHQUFHQSxLQUFLQSxHQUFDQSxDQUFFQSxJQUFJQSxHQUFDQSxHQUFHQSxHQUFHQSxJQUFJQSxHQUFDQSxHQUFHQSxDQUFFQSxDQUFDQTtnQkFDbENBLENBQUNBLEdBQUdBLEtBQUtBLEdBQUNBLENBQUVBLENBQUNBLElBQUlBLEdBQUNBLEdBQUdBLEdBQUdBLElBQUlBLEdBQUNBLEdBQUdBLENBQUVBLENBQUNBO2dCQUNuQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7b0JBQ1RBLFFBQVFBLENBQUNBO2dCQUNWQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtvQkFDVEEsUUFBUUEsQ0FBQ0E7Z0JBQ1ZBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO2dCQUNkQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFFQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSx5QkFBeUJBLENBQUNBLENBQUNBLENBQUNBO29CQUMxREEseUJBQXlCQSxHQUFHQSxDQUFDQSxDQUFDQTtvQkFDOUJBLHNCQUFzQkEsR0FBR0EsS0FBS0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ2pDQSxrQkFBa0JBLENBQUNBLGdCQUFnQkEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7b0JBQ3hDQSxrQkFBa0JBLENBQUNBLGFBQWFBLEdBQUdBLElBQUlBLFFBQVFBLENBQUNBLEVBQUVBLEVBQUVBLEVBQUVBLEVBQUVBLEVBQUVBLENBQUNBLENBQUNBO29CQUM1REEsa0JBQWtCQSxDQUFDQSxXQUFXQSxHQUFHQSxJQUFJQSxRQUFRQSxDQUFDQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxFQUFFQSxDQUFDQSxDQUFDQTtvQkFDMURBLGtCQUFrQkEsQ0FBQ0EsRUFBRUEsR0FBR0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxTQUFTQSxFQUFFQSxNQUFNQSxFQUFFQSxLQUFLQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxRQUFRQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQTtvQkFDckdBLGtCQUFrQkEsQ0FBQ0EsS0FBS0EsR0FBR0EsS0FBS0EsQ0FBQ0E7b0JBQ3RDQSxBQUdLQSxvRkFIK0VBO29CQUUvRUEsc0RBQXNEQTtvQkFDdERBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLHFCQUFxQkEsQ0FBQ0E7d0JBQy9CQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtnQkFDZEEsQ0FBQ0E7WUFDRkEsQ0FBQ0E7UUFDRkEsQ0FBQ0E7UUFHREEsRUFBRUEsQ0FBQ0EsQ0FBQ0Esc0JBQXNCQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUMvQkEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFFYkEsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7SUFDZEEsQ0FBQ0E7SUFDRkYsd0JBQUNBO0FBQURBLENBaklBLEFBaUlDQSxFQWpJK0IsbUJBQW1CLEVBaUlsRDtBQUVELEFBQTJCLGlCQUFsQixpQkFBaUIsQ0FBQyIsImZpbGUiOiJwaWNrL0pTUGlja2luZ0NvbGxpZGVyLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWZWN0b3IzRFx0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2dlb20vVmVjdG9yM0RcIik7XG5cbmltcG9ydCBUcmlhbmdsZVN1Ykdlb21ldHJ5XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvYmFzZS9UcmlhbmdsZVN1Ykdlb21ldHJ5XCIpO1xuaW1wb3J0IFBpY2tpbmdDb2xsaXNpb25WT1x0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL3BpY2svUGlja2luZ0NvbGxpc2lvblZPXCIpO1xuaW1wb3J0IElQaWNraW5nQ29sbGlkZXJcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL3BpY2svSVBpY2tpbmdDb2xsaWRlclwiKTtcbmltcG9ydCBNYXRlcmlhbEJhc2VcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvbWF0ZXJpYWxzL01hdGVyaWFsQmFzZVwiKTtcblxuaW1wb3J0IFJlbmRlcmFibGVCYXNlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9wb29sL1JlbmRlcmFibGVCYXNlXCIpO1xuXG5pbXBvcnQgUGlja2luZ0NvbGxpZGVyQmFzZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL3BpY2svUGlja2luZ0NvbGxpZGVyQmFzZVwiKTtcblxuLyoqXG4gKiBQdXJlIEpTIHBpY2tpbmcgY29sbGlkZXIgZm9yIGRpc3BsYXkgb2JqZWN0cy4gVXNlZCB3aXRoIHRoZSA8Y29kZT5SYXljYXN0UGlja2VyPC9jb2RlPiBwaWNraW5nIG9iamVjdC5cbiAqXG4gKiBAc2VlIGF3YXkuYmFzZS5EaXNwbGF5T2JqZWN0I3BpY2tpbmdDb2xsaWRlclxuICogQHNlZSBhd2F5LnBpY2suUmF5Y2FzdFBpY2tlclxuICpcbiAqIEBjbGFzcyBhd2F5LnBpY2suSlNQaWNraW5nQ29sbGlkZXJcbiAqL1xuY2xhc3MgSlNQaWNraW5nQ29sbGlkZXIgZXh0ZW5kcyBQaWNraW5nQ29sbGlkZXJCYXNlIGltcGxlbWVudHMgSVBpY2tpbmdDb2xsaWRlclxue1xuXHRwcml2YXRlIF9maW5kQ2xvc2VzdENvbGxpc2lvbjpib29sZWFuO1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgbmV3IDxjb2RlPkpTUGlja2luZ0NvbGxpZGVyPC9jb2RlPiBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSBmaW5kQ2xvc2VzdENvbGxpc2lvbiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBpY2tpbmcgY29sbGlkZXIgc2VhcmNoZXMgZm9yIHRoZSBjbG9zZXN0IGNvbGxpc2lvbiBhbG9uZyB0aGUgcmF5LiBEZWZhdWx0cyB0byBmYWxzZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKGZpbmRDbG9zZXN0Q29sbGlzaW9uOmJvb2xlYW4gPSBmYWxzZSlcblx0e1xuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLl9maW5kQ2xvc2VzdENvbGxpc2lvbiA9IGZpbmRDbG9zZXN0Q29sbGlzaW9uO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRwdWJsaWMgX3BUZXN0UmVuZGVyYWJsZUNvbGxpc2lvbihyZW5kZXJhYmxlOlJlbmRlcmFibGVCYXNlLCBwaWNraW5nQ29sbGlzaW9uVk86UGlja2luZ0NvbGxpc2lvblZPLCBzaG9ydGVzdENvbGxpc2lvbkRpc3RhbmNlOm51bWJlcik6Ym9vbGVhblxuXHR7XG5cdFx0dmFyIHQ6bnVtYmVyO1xuXHRcdHZhciBpMDpudW1iZXIsIGkxOm51bWJlciwgaTI6bnVtYmVyO1xuXHRcdHZhciByeDpudW1iZXIsIHJ5Om51bWJlciwgcno6bnVtYmVyO1xuXHRcdHZhciBueDpudW1iZXIsIG55Om51bWJlciwgbno6bnVtYmVyO1xuXHRcdHZhciBjeDpudW1iZXIsIGN5Om51bWJlciwgY3o6bnVtYmVyO1xuXHRcdHZhciBjb2VmZjpudW1iZXIsIHU6bnVtYmVyLCB2Om51bWJlciwgdzpudW1iZXI7XG5cdFx0dmFyIHAweDpudW1iZXIsIHAweTpudW1iZXIsIHAwejpudW1iZXI7XG5cdFx0dmFyIHAxeDpudW1iZXIsIHAxeTpudW1iZXIsIHAxejpudW1iZXI7XG5cdFx0dmFyIHAyeDpudW1iZXIsIHAyeTpudW1iZXIsIHAyejpudW1iZXI7XG5cdFx0dmFyIHMweDpudW1iZXIsIHMweTpudW1iZXIsIHMwejpudW1iZXI7XG5cdFx0dmFyIHMxeDpudW1iZXIsIHMxeTpudW1iZXIsIHMxejpudW1iZXI7XG5cdFx0dmFyIG5sOm51bWJlciwgbkRvdFY6bnVtYmVyLCBEOm51bWJlciwgZGlzVG9QbGFuZTpudW1iZXI7XG5cdFx0dmFyIFExUTI6bnVtYmVyLCBRMVExOm51bWJlciwgUTJRMjpudW1iZXIsIFJRMTpudW1iZXIsIFJRMjpudW1iZXI7XG5cdFx0dmFyIGluZGV4RGF0YTpBcnJheTxudW1iZXI+ID0gcmVuZGVyYWJsZS5nZXRJbmRleERhdGEoKS5kYXRhO1xuXHRcdHZhciBjb2xsaXNpb25UcmlhbmdsZUluZGV4Om51bWJlciA9IC0xO1xuXHRcdHZhciBib3RoU2lkZXM6Ym9vbGVhbiA9ICg8TWF0ZXJpYWxCYXNlPiByZW5kZXJhYmxlLm1hdGVyaWFsT3duZXIubWF0ZXJpYWwpLmJvdGhTaWRlcztcblxuXHRcdHZhciBwb3NpdGlvbkRhdGE6QXJyYXk8bnVtYmVyPiA9IHJlbmRlcmFibGUuZ2V0VmVydGV4RGF0YShUcmlhbmdsZVN1Ykdlb21ldHJ5LlBPU0lUSU9OX0RBVEEpLmRhdGE7XG5cdFx0dmFyIHBvc2l0aW9uU3RyaWRlOm51bWJlciA9IHJlbmRlcmFibGUuZ2V0VmVydGV4RGF0YShUcmlhbmdsZVN1Ykdlb21ldHJ5LlBPU0lUSU9OX0RBVEEpLmRhdGFQZXJWZXJ0ZXg7XG5cdFx0dmFyIHBvc2l0aW9uT2Zmc2V0Om51bWJlciA9IHJlbmRlcmFibGUuZ2V0VmVydGV4T2Zmc2V0KFRyaWFuZ2xlU3ViR2VvbWV0cnkuUE9TSVRJT05fREFUQSk7XG5cdFx0dmFyIHV2RGF0YTpBcnJheTxudW1iZXI+ID0gcmVuZGVyYWJsZS5nZXRWZXJ0ZXhEYXRhKFRyaWFuZ2xlU3ViR2VvbWV0cnkuVVZfREFUQSkuZGF0YTtcblx0XHR2YXIgdXZTdHJpZGU6bnVtYmVyID0gcmVuZGVyYWJsZS5nZXRWZXJ0ZXhEYXRhKFRyaWFuZ2xlU3ViR2VvbWV0cnkuVVZfREFUQSkuZGF0YVBlclZlcnRleDtcblx0XHR2YXIgdXZPZmZzZXQ6bnVtYmVyID0gcmVuZGVyYWJsZS5nZXRWZXJ0ZXhPZmZzZXQoVHJpYW5nbGVTdWJHZW9tZXRyeS5VVl9EQVRBKTtcblx0XHR2YXIgbnVtSW5kaWNlczpudW1iZXIgPSBpbmRleERhdGEubGVuZ3RoO1xuXG5cdFx0Zm9yICh2YXIgaW5kZXg6bnVtYmVyID0gMDsgaW5kZXggPCBudW1JbmRpY2VzOyBpbmRleCArPSAzKSB7IC8vIHN3ZWVwIGFsbCB0cmlhbmdsZXNcblx0XHRcdC8vIGV2YWx1YXRlIHRyaWFuZ2xlIGluZGljZXNcblx0XHRcdGkwID0gcG9zaXRpb25PZmZzZXQgKyBpbmRleERhdGFbIGluZGV4IF0qcG9zaXRpb25TdHJpZGU7XG5cdFx0XHRpMSA9IHBvc2l0aW9uT2Zmc2V0ICsgaW5kZXhEYXRhWyAoaW5kZXggKyAxKSBdKnBvc2l0aW9uU3RyaWRlO1xuXHRcdFx0aTIgPSBwb3NpdGlvbk9mZnNldCArIGluZGV4RGF0YVsgKGluZGV4ICsgMikgXSpwb3NpdGlvblN0cmlkZTtcblxuXHRcdFx0Ly8gZXZhbHVhdGUgdHJpYW5nbGUgcG9zaXRpb25zXG5cdFx0XHRwMHggPSBwb3NpdGlvbkRhdGFbIGkwIF07XG5cdFx0XHRwMHkgPSBwb3NpdGlvbkRhdGFbIChpMCArIDEpIF07XG5cdFx0XHRwMHogPSBwb3NpdGlvbkRhdGFbIChpMCArIDIpIF07XG5cdFx0XHRwMXggPSBwb3NpdGlvbkRhdGFbIGkxIF07XG5cdFx0XHRwMXkgPSBwb3NpdGlvbkRhdGFbIChpMSArIDEpIF07XG5cdFx0XHRwMXogPSBwb3NpdGlvbkRhdGFbIChpMSArIDIpIF07XG5cdFx0XHRwMnggPSBwb3NpdGlvbkRhdGFbIGkyIF07XG5cdFx0XHRwMnkgPSBwb3NpdGlvbkRhdGFbIChpMiArIDEpIF07XG5cdFx0XHRwMnogPSBwb3NpdGlvbkRhdGFbIChpMiArIDIpIF07XG5cblx0XHRcdC8vIGV2YWx1YXRlIHNpZGVzIGFuZCB0cmlhbmdsZSBub3JtYWxcblx0XHRcdHMweCA9IHAxeCAtIHAweDsgLy8gczAgPSBwMSAtIHAwXG5cdFx0XHRzMHkgPSBwMXkgLSBwMHk7XG5cdFx0XHRzMHogPSBwMXogLSBwMHo7XG5cdFx0XHRzMXggPSBwMnggLSBwMHg7IC8vIHMxID0gcDIgLSBwMFxuXHRcdFx0czF5ID0gcDJ5IC0gcDB5O1xuXHRcdFx0czF6ID0gcDJ6IC0gcDB6O1xuXHRcdFx0bnggPSBzMHkqczF6IC0gczB6KnMxeTsgLy8gbiA9IHMwIHggczFcblx0XHRcdG55ID0gczB6KnMxeCAtIHMweCpzMXo7XG5cdFx0XHRueiA9IHMweCpzMXkgLSBzMHkqczF4O1xuXHRcdFx0bmwgPSAxL01hdGguc3FydChueCpueCArIG55Km55ICsgbnoqbnopOyAvLyBub3JtYWxpemUgblxuXHRcdFx0bnggKj0gbmw7XG5cdFx0XHRueSAqPSBubDtcblx0XHRcdG56ICo9IG5sO1xuXG5cdFx0XHQvLyAtLSBwbGFuZSBpbnRlcnNlY3Rpb24gdGVzdCAtLVxuXHRcdFx0bkRvdFYgPSBueCp0aGlzLnJheURpcmVjdGlvbi54ICsgbnkqICt0aGlzLnJheURpcmVjdGlvbi55ICsgbnoqdGhpcy5yYXlEaXJlY3Rpb24uejsgLy8gcmF5RGlyZWN0aW9uIC4gbm9ybWFsXG5cdFx0XHRpZiAoKCAhYm90aFNpZGVzICYmIG5Eb3RWIDwgMC4wICkgfHwgKCBib3RoU2lkZXMgJiYgbkRvdFYgIT0gMC4wICkpIHsgLy8gYW4gaW50ZXJzZWN0aW9uIG11c3QgZXhpc3Rcblx0XHRcdFx0Ly8gZmluZCBjb2xsaXNpb24gdFxuXHRcdFx0XHREID0gLSggbngqcDB4ICsgbnkqcDB5ICsgbnoqcDB6ICk7XG5cdFx0XHRcdGRpc1RvUGxhbmUgPSAtKCBueCp0aGlzLnJheVBvc2l0aW9uLnggKyBueSp0aGlzLnJheVBvc2l0aW9uLnkgKyBueip0aGlzLnJheVBvc2l0aW9uLnogKyBEICk7XG5cdFx0XHRcdHQgPSBkaXNUb1BsYW5lL25Eb3RWO1xuXHRcdFx0XHQvLyBmaW5kIGNvbGxpc2lvbiBwb2ludFxuXHRcdFx0XHRjeCA9IHRoaXMucmF5UG9zaXRpb24ueCArIHQqdGhpcy5yYXlEaXJlY3Rpb24ueDtcblx0XHRcdFx0Y3kgPSB0aGlzLnJheVBvc2l0aW9uLnkgKyB0KnRoaXMucmF5RGlyZWN0aW9uLnk7XG5cdFx0XHRcdGN6ID0gdGhpcy5yYXlQb3NpdGlvbi56ICsgdCp0aGlzLnJheURpcmVjdGlvbi56O1xuXHRcdFx0XHQvLyBjb2xsaXNpb24gcG9pbnQgaW5zaWRlIHRyaWFuZ2xlPyAoIHVzaW5nIGJhcnljZW50cmljIGNvb3JkaW5hdGVzIClcblx0XHRcdFx0UTFRMiA9IHMweCpzMXggKyBzMHkqczF5ICsgczB6KnMxejtcblx0XHRcdFx0UTFRMSA9IHMweCpzMHggKyBzMHkqczB5ICsgczB6KnMwejtcblx0XHRcdFx0UTJRMiA9IHMxeCpzMXggKyBzMXkqczF5ICsgczF6KnMxejtcblx0XHRcdFx0cnggPSBjeCAtIHAweDtcblx0XHRcdFx0cnkgPSBjeSAtIHAweTtcblx0XHRcdFx0cnogPSBjeiAtIHAwejtcblx0XHRcdFx0UlExID0gcngqczB4ICsgcnkqczB5ICsgcnoqczB6O1xuXHRcdFx0XHRSUTIgPSByeCpzMXggKyByeSpzMXkgKyByeipzMXo7XG5cdFx0XHRcdGNvZWZmID0gMS8oIFExUTEqUTJRMiAtIFExUTIqUTFRMiApO1xuXHRcdFx0XHR2ID0gY29lZmYqKCBRMlEyKlJRMSAtIFExUTIqUlEyICk7XG5cdFx0XHRcdHcgPSBjb2VmZiooIC1RMVEyKlJRMSArIFExUTEqUlEyICk7XG5cdFx0XHRcdGlmICh2IDwgMClcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0aWYgKHcgPCAwKVxuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR1ID0gMSAtIHYgLSB3O1xuXHRcdFx0XHRpZiAoISggdSA8IDAgKSAmJiB0ID4gMCAmJiB0IDwgc2hvcnRlc3RDb2xsaXNpb25EaXN0YW5jZSkgeyAvLyBhbGwgdGVzdHMgcGFzc2VkXG5cdFx0XHRcdFx0c2hvcnRlc3RDb2xsaXNpb25EaXN0YW5jZSA9IHQ7XG5cdFx0XHRcdFx0Y29sbGlzaW9uVHJpYW5nbGVJbmRleCA9IGluZGV4LzM7XG5cdFx0XHRcdFx0cGlja2luZ0NvbGxpc2lvblZPLnJheUVudHJ5RGlzdGFuY2UgPSB0O1xuXHRcdFx0XHRcdHBpY2tpbmdDb2xsaXNpb25WTy5sb2NhbFBvc2l0aW9uID0gbmV3IFZlY3RvcjNEKGN4LCBjeSwgY3opO1xuXHRcdFx0XHRcdHBpY2tpbmdDb2xsaXNpb25WTy5sb2NhbE5vcm1hbCA9IG5ldyBWZWN0b3IzRChueCwgbnksIG56KTtcblx0XHRcdFx0XHRwaWNraW5nQ29sbGlzaW9uVk8udXYgPSB0aGlzLl9wR2V0Q29sbGlzaW9uVVYoaW5kZXhEYXRhLCB1dkRhdGEsIGluZGV4LCB2LCB3LCB1LCB1dk9mZnNldCwgdXZTdHJpZGUpO1xuXHRcdFx0XHRcdHBpY2tpbmdDb2xsaXNpb25WTy5pbmRleCA9IGluZGV4O1xuLy9cdFx0XHRcdFx0XHRwaWNraW5nQ29sbGlzaW9uVk8uc3ViR2VvbWV0cnlJbmRleCA9IHRoaXMucEdldE1lc2hTdWJNZXNoSW5kZXgocmVuZGVyYWJsZSk7XG5cblx0XHRcdFx0XHQvLyBpZiBub3QgbG9va2luZyBmb3IgYmVzdCBoaXQsIGZpcnN0IGZvdW5kIHdpbGwgZG8uLi5cblx0XHRcdFx0XHRpZiAoIXRoaXMuX2ZpbmRDbG9zZXN0Q29sbGlzaW9uKVxuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblxuXHRcdGlmIChjb2xsaXNpb25UcmlhbmdsZUluZGV4ID49IDApXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5leHBvcnQgPSBKU1BpY2tpbmdDb2xsaWRlcjsiXX0=