var Geometry = require("awayjs-core/lib/core/base/Geometry");
var TriangleSubGeometry = require("awayjs-core/lib/core/base/TriangleSubGeometry");
var Matrix3DUtils = require("awayjs-core/lib/core/geom/Matrix3DUtils");
var Mesh = require("awayjs-core/lib/entities/Mesh");
/**
 *  Class Merge merges two or more static meshes into one.<code>Merge</code>
 */
var Merge = (function () {
    /**
     * @param    keepMaterial    [optional]    Determines if the merged object uses the recevier mesh material information or keeps its source material(s). Defaults to false.
     * If false and receiver object has multiple materials, the last material found in receiver submeshes is applied to the merged submesh(es).
     * @param    disposeSources  [optional]    Determines if the mesh and geometry source(s) used for the merging are disposed. Defaults to false.
     * If true, only receiver geometry and resulting mesh are kept in  memory.
     * @param    objectSpace     [optional]    Determines if source mesh(es) is/are merged using objectSpace or worldspace. Defaults to false.
     */
    function Merge(keepMaterial, disposeSources, objectSpace) {
        if (keepMaterial === void 0) { keepMaterial = false; }
        if (disposeSources === void 0) { disposeSources = false; }
        if (objectSpace === void 0) { objectSpace = false; }
        this._keepMaterial = keepMaterial;
        this._disposeSources = disposeSources;
        this._objectSpace = objectSpace;
    }
    Object.defineProperty(Merge.prototype, "disposeSources", {
        get: function () {
            return this._disposeSources;
        },
        /**
         * Determines if the mesh and geometry source(s) used for the merging are disposed. Defaults to false.
         */
        set: function (b) {
            this._disposeSources = b;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Merge.prototype, "keepMaterial", {
        get: function () {
            return this._keepMaterial;
        },
        /**
         * Determines if the material source(s) used for the merging are disposed. Defaults to false.
         */
        set: function (b) {
            this._keepMaterial = b;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Merge.prototype, "objectSpace", {
        get: function () {
            return this._objectSpace;
        },
        /**
         * Determines if source mesh(es) is/are merged using objectSpace or worldspace. Defaults to false.
         */
        set: function (b) {
            this._objectSpace = b;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Merges all the children of a container into a single Mesh. If no Mesh object is found, method returns the receiver without modification.
     *
     * @param    receiver           The Mesh to receive the merged contents of the container.
     * @param    objectContainer    The DisplayObjectContainer holding the meshes to be mergd.
     *
     * @return The merged Mesh instance.
     */
    Merge.prototype.applyToContainer = function (receiver, objectContainer) {
        this.reset();
        //collect container meshes
        this.parseContainer(receiver, objectContainer);
        //collect receiver
        this.collect(receiver, false);
        //merge to receiver
        this.merge(receiver, this._disposeSources);
    };
    /**
     * Merges all the meshes found in the Array&lt;Mesh&gt; into a single Mesh.
     *
     * @param    receiver    The Mesh to receive the merged contents of the meshes.
     * @param    meshes      A series of Meshes to be merged with the reciever mesh.
     */
    Merge.prototype.applyToMeshes = function (receiver, meshes) {
        this.reset();
        if (!meshes.length)
            return;
        for (var i = 0; i < meshes.length; i++)
            if (meshes[i] != receiver)
                this.collect(meshes[i], this._disposeSources);
        //collect receiver
        this.collect(receiver, false);
        //merge to receiver
        this.merge(receiver, this._disposeSources);
    };
    /**
     *  Merges 2 meshes into one. It is recommand to use apply when 2 meshes are to be merged. If more need to be merged, use either applyToMeshes or applyToContainer methods.
     *
     * @param    receiver    The Mesh to receive the merged contents of both meshes.
     * @param    mesh        The Mesh to be merged with the receiver mesh
     */
    Merge.prototype.apply = function (receiver, mesh) {
        this.reset();
        //collect mesh
        this.collect(mesh, this._disposeSources);
        //collect receiver
        this.collect(receiver, false);
        //merge to receiver
        this.merge(receiver, this._disposeSources);
    };
    Merge.prototype.reset = function () {
        this._toDispose = new Array();
        this._geomVOs = new Array();
    };
    Merge.prototype.merge = function (destMesh, dispose) {
        var i /*uint*/;
        var subIdx /*uint*/;
        var oldGeom;
        var destGeom;
        var useSubMaterials;
        oldGeom = destMesh.geometry;
        destGeom = destMesh.geometry = new Geometry();
        subIdx = destMesh.subMeshes.length;
        // Only apply materials directly to sub-meshes if necessary,
        // i.e. if there is more than one material available.
        useSubMaterials = (this._geomVOs.length > 1);
        for (i = 0; i < this._geomVOs.length; i++) {
            var s /*uint*/;
            var data;
            var sub = new TriangleSubGeometry(true);
            sub.autoDeriveNormals = false;
            sub.autoDeriveTangents = false;
            data = this._geomVOs[i];
            sub.updateIndices(data.indices);
            sub.updatePositions(data.vertices);
            sub.updateVertexNormals(data.normals);
            sub.updateVertexTangents(data.tangents);
            sub.updateUVs(data.uvs);
            destGeom.addSubGeometry(sub);
            if (this._keepMaterial && useSubMaterials)
                destMesh.subMeshes[subIdx].material = data.material;
        }
        if (this._keepMaterial && !useSubMaterials && this._geomVOs.length)
            destMesh.material = this._geomVOs[0].material;
        if (dispose) {
            var m;
            var len = this._toDispose.length;
            for (var i; i < len; i++) {
                m = this._toDispose[i];
                m.geometry.dispose();
                m.dispose();
            }
            //dispose of the original receiver geometry
            oldGeom.dispose();
        }
        this._toDispose = null;
    };
    Merge.prototype.collect = function (mesh, dispose) {
        if (mesh.geometry) {
            var subIdx /*uint*/;
            var subGeometries = mesh.geometry.subGeometries;
            var calc /*uint*/;
            for (subIdx = 0; subIdx < subGeometries.length; subIdx++) {
                var i /*uint*/;
                var len /*uint*/;
                var iIdx /*uint*/, vIdx /*uint*/, nIdx /*uint*/, tIdx /*uint*/, uIdx /*uint*/;
                var indexOffset /*uint*/;
                var subGeom;
                var vo;
                var vertices;
                var normals;
                var tangents;
                var pd, nd, td, ud;
                subGeom = subGeometries[subIdx];
                pd = subGeom.positions;
                nd = subGeom.vertexNormals;
                td = subGeom.vertexTangents;
                ud = subGeom.uvs;
                // Get (or create) a VO for this material
                vo = this.getSubGeomData(mesh.subMeshes[subIdx].material || mesh.material);
                // Vertices and normals are copied to temporary vectors, to be transformed
                // before concatenated onto those of the data. This is unnecessary if no
                // transformation will be performed, i.e. for object space merging.
                vertices = (this._objectSpace) ? vo.vertices : new Array();
                normals = (this._objectSpace) ? vo.normals : new Array();
                tangents = (this._objectSpace) ? vo.tangents : new Array();
                // Copy over vertex attributes
                vIdx = vertices.length;
                nIdx = normals.length;
                tIdx = tangents.length;
                uIdx = vo.uvs.length;
                len = subGeom.numVertices;
                for (i = 0; i < len; i++) {
                    calc = i * 3;
                    // Position
                    vertices[vIdx++] = pd[calc];
                    vertices[vIdx++] = pd[calc + 1];
                    vertices[vIdx++] = pd[calc + 2];
                    // Normal
                    normals[nIdx++] = nd[calc];
                    normals[nIdx++] = nd[calc + 1];
                    normals[nIdx++] = nd[calc + 2];
                    // Tangent
                    tangents[tIdx++] = td[calc];
                    tangents[tIdx++] = td[calc + 1];
                    tangents[tIdx++] = td[calc + 2];
                    // UV
                    vo.uvs[uIdx++] = ud[i * 2];
                    vo.uvs[uIdx++] = ud[i * 2 + 1];
                }
                // Copy over triangle indices
                indexOffset = (!this._objectSpace) ? vo.vertices.length / 3 : 0;
                iIdx = vo.indices.length;
                len = subGeom.numTriangles;
                for (i = 0; i < len; i++) {
                    calc = i * 3;
                    vo.indices[iIdx++] = subGeom.indices[calc] + indexOffset;
                    vo.indices[iIdx++] = subGeom.indices[calc + 1] + indexOffset;
                    vo.indices[iIdx++] = subGeom.indices[calc + 2] + indexOffset;
                }
                if (!this._objectSpace) {
                    mesh.sceneTransform.transformVectors(vertices, vertices);
                    Matrix3DUtils.deltaTransformVectors(mesh.sceneTransform, normals, normals);
                    Matrix3DUtils.deltaTransformVectors(mesh.sceneTransform, tangents, tangents);
                    // Copy vertex data from temporary (transformed) vectors
                    vIdx = vo.vertices.length;
                    nIdx = vo.normals.length;
                    tIdx = vo.tangents.length;
                    len = vertices.length;
                    for (i = 0; i < len; i++) {
                        vo.vertices[vIdx++] = vertices[i];
                        vo.normals[nIdx++] = normals[i];
                        vo.tangents[tIdx++] = tangents[i];
                    }
                }
            }
            if (dispose)
                this._toDispose.push(mesh);
        }
    };
    Merge.prototype.getSubGeomData = function (material) {
        var data;
        if (this._keepMaterial) {
            var i /*uint*/;
            var len /*uint*/;
            len = this._geomVOs.length;
            for (i = 0; i < len; i++) {
                if (this._geomVOs[i].material == material) {
                    data = this._geomVOs[i];
                    break;
                }
            }
        }
        else if (this._geomVOs.length) {
            // If materials are not to be kept, all data can be
            // put into a single VO, so return that one.
            data = this._geomVOs[0];
        }
        // No data (for this material) found, create new.
        if (!data) {
            data = new GeometryVO();
            data.vertices = new Array();
            data.normals = new Array();
            data.tangents = new Array();
            data.uvs = new Array();
            data.indices = new Array();
            data.material = material;
            this._geomVOs.push(data);
        }
        return data;
    };
    Merge.prototype.parseContainer = function (receiver, object) {
        var child;
        var i /*uint*/;
        if (object instanceof Mesh && object != receiver)
            this.collect(object, this._disposeSources);
        for (i = 0; i < object.numChildren; ++i) {
            child = object.getChildAt(i);
            this.parseContainer(receiver, child);
        }
    };
    return Merge;
})();
var GeometryVO = (function () {
    function GeometryVO() {
    }
    return GeometryVO;
})();
module.exports = Merge;

//# sourceMappingURL=data:application/json;base64,