var Matrix3DUtils = require("awayjs-core/lib/geom/Matrix3DUtils");
var Geometry = require("awayjs-core/lib/data/Geometry");
var TriangleSubGeometry = require("awayjs-core/lib/data/TriangleSubGeometry");
var Mesh = require("awayjs-display/lib/entities/Mesh");
/**
 *  Class Merge merges two or more static meshes into one.<code>Merge</code>
 */
var Merge = (function () {
    /**
     * @param    keepMaterial    [optional]    Determines if the merged object uses the recevier mesh material information or keeps its source material(s). Defaults to false.
     * If false and receiver object has multiple materials, the last material found in receiver submeshes is applied to the merged submesh(es).
     * @param    disposeSources  [optional]    Determines if the mesh and geometry source(s) used for the merging are disposed. Defaults to false.
     * If true, only receiver geometry and resulting mesh are kept in  memory.
     * @param    objectSpace     [optional]    Determines if source mesh(es) is/are merged using objectSpace or worldspace. Defaults to false.
     */
    function Merge(keepMaterial, disposeSources, objectSpace) {
        if (keepMaterial === void 0) { keepMaterial = false; }
        if (disposeSources === void 0) { disposeSources = false; }
        if (objectSpace === void 0) { objectSpace = false; }
        this._keepMaterial = keepMaterial;
        this._disposeSources = disposeSources;
        this._objectSpace = objectSpace;
    }
    Object.defineProperty(Merge.prototype, "disposeSources", {
        get: function () {
            return this._disposeSources;
        },
        /**
         * Determines if the mesh and geometry source(s) used for the merging are disposed. Defaults to false.
         */
        set: function (b) {
            this._disposeSources = b;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Merge.prototype, "keepMaterial", {
        get: function () {
            return this._keepMaterial;
        },
        /**
         * Determines if the material source(s) used for the merging are disposed. Defaults to false.
         */
        set: function (b) {
            this._keepMaterial = b;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Merge.prototype, "objectSpace", {
        get: function () {
            return this._objectSpace;
        },
        /**
         * Determines if source mesh(es) is/are merged using objectSpace or worldspace. Defaults to false.
         */
        set: function (b) {
            this._objectSpace = b;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Merges all the children of a container into a single Mesh. If no Mesh object is found, method returns the receiver without modification.
     *
     * @param    receiver           The Mesh to receive the merged contents of the container.
     * @param    objectContainer    The DisplayObjectContainer holding the meshes to be mergd.
     *
     * @return The merged Mesh instance.
     */
    Merge.prototype.applyToContainer = function (receiver, objectContainer) {
        this.reset();
        //collect container meshes
        this.parseContainer(receiver, objectContainer);
        //collect receiver
        this.collect(receiver, false);
        //merge to receiver
        this.merge(receiver, this._disposeSources);
    };
    /**
     * Merges all the meshes found in the Array&lt;Mesh&gt; into a single Mesh.
     *
     * @param    receiver    The Mesh to receive the merged contents of the meshes.
     * @param    meshes      A series of Meshes to be merged with the reciever mesh.
     */
    Merge.prototype.applyToMeshes = function (receiver, meshes) {
        this.reset();
        if (!meshes.length)
            return;
        for (var i = 0; i < meshes.length; i++)
            if (meshes[i] != receiver)
                this.collect(meshes[i], this._disposeSources);
        //collect receiver
        this.collect(receiver, false);
        //merge to receiver
        this.merge(receiver, this._disposeSources);
    };
    /**
     *  Merges 2 meshes into one. It is recommand to use apply when 2 meshes are to be merged. If more need to be merged, use either applyToMeshes or applyToContainer methods.
     *
     * @param    receiver    The Mesh to receive the merged contents of both meshes.
     * @param    mesh        The Mesh to be merged with the receiver mesh
     */
    Merge.prototype.apply = function (receiver, mesh) {
        this.reset();
        //collect mesh
        this.collect(mesh, this._disposeSources);
        //collect receiver
        this.collect(receiver, false);
        //merge to receiver
        this.merge(receiver, this._disposeSources);
    };
    Merge.prototype.reset = function () {
        this._toDispose = new Array();
        this._geomVOs = new Array();
    };
    Merge.prototype.merge = function (destMesh, dispose) {
        var i /*uint*/;
        var subIdx /*uint*/;
        var oldGeom;
        var destGeom;
        var useSubMaterials;
        oldGeom = destMesh.geometry;
        destGeom = destMesh.geometry = new Geometry();
        subIdx = destMesh.subMeshes.length;
        // Only apply materials directly to sub-meshes if necessary,
        // i.e. if there is more than one material available.
        useSubMaterials = (this._geomVOs.length > 1);
        for (i = 0; i < this._geomVOs.length; i++) {
            var s /*uint*/;
            var data;
            var sub = new TriangleSubGeometry(true);
            sub.autoDeriveNormals = false;
            sub.autoDeriveTangents = false;
            data = this._geomVOs[i];
            sub.updateIndices(data.indices);
            sub.updatePositions(data.vertices);
            sub.updateVertexNormals(data.normals);
            sub.updateVertexTangents(data.tangents);
            sub.updateUVs(data.uvs);
            destGeom.addSubGeometry(sub);
            if (this._keepMaterial && useSubMaterials)
                destMesh.subMeshes[subIdx].material = data.material;
        }
        if (this._keepMaterial && !useSubMaterials && this._geomVOs.length)
            destMesh.material = this._geomVOs[0].material;
        if (dispose) {
            var m;
            var len = this._toDispose.length;
            for (var i; i < len; i++) {
                m = this._toDispose[i];
                m.geometry.dispose();
                m.dispose();
            }
            //dispose of the original receiver geometry
            oldGeom.dispose();
        }
        this._toDispose = null;
    };
    Merge.prototype.collect = function (mesh, dispose) {
        if (mesh.geometry) {
            var subIdx /*uint*/;
            var subGeometries = mesh.geometry.subGeometries;
            var calc /*uint*/;
            for (subIdx = 0; subIdx < subGeometries.length; subIdx++) {
                var i /*uint*/;
                var len /*uint*/;
                var iIdx /*uint*/, vIdx /*uint*/, nIdx /*uint*/, tIdx /*uint*/, uIdx /*uint*/;
                var indexOffset /*uint*/;
                var subGeom;
                var vo;
                var vertices;
                var normals;
                var tangents;
                var pd, nd, td, ud;
                subGeom = subGeometries[subIdx];
                pd = subGeom.positions;
                nd = subGeom.vertexNormals;
                td = subGeom.vertexTangents;
                ud = subGeom.uvs;
                // Get (or create) a VO for this material
                vo = this.getSubGeomData(mesh.subMeshes[subIdx].material || mesh.material);
                // Vertices and normals are copied to temporary vectors, to be transformed
                // before concatenated onto those of the data. This is unnecessary if no
                // transformation will be performed, i.e. for object space merging.
                vertices = (this._objectSpace) ? vo.vertices : new Array();
                normals = (this._objectSpace) ? vo.normals : new Array();
                tangents = (this._objectSpace) ? vo.tangents : new Array();
                // Copy over vertex attributes
                vIdx = vertices.length;
                nIdx = normals.length;
                tIdx = tangents.length;
                uIdx = vo.uvs.length;
                len = subGeom.numVertices;
                for (i = 0; i < len; i++) {
                    calc = i * 3;
                    // Position
                    vertices[vIdx++] = pd[calc];
                    vertices[vIdx++] = pd[calc + 1];
                    vertices[vIdx++] = pd[calc + 2];
                    // Normal
                    normals[nIdx++] = nd[calc];
                    normals[nIdx++] = nd[calc + 1];
                    normals[nIdx++] = nd[calc + 2];
                    // Tangent
                    tangents[tIdx++] = td[calc];
                    tangents[tIdx++] = td[calc + 1];
                    tangents[tIdx++] = td[calc + 2];
                    // UV
                    vo.uvs[uIdx++] = ud[i * 2];
                    vo.uvs[uIdx++] = ud[i * 2 + 1];
                }
                // Copy over triangle indices
                indexOffset = (!this._objectSpace) ? vo.vertices.length / 3 : 0;
                iIdx = vo.indices.length;
                len = subGeom.numTriangles;
                for (i = 0; i < len; i++) {
                    calc = i * 3;
                    vo.indices[iIdx++] = subGeom.indices[calc] + indexOffset;
                    vo.indices[iIdx++] = subGeom.indices[calc + 1] + indexOffset;
                    vo.indices[iIdx++] = subGeom.indices[calc + 2] + indexOffset;
                }
                if (!this._objectSpace) {
                    mesh.sceneTransform.transformVectors(vertices, vertices);
                    Matrix3DUtils.deltaTransformVectors(mesh.sceneTransform, normals, normals);
                    Matrix3DUtils.deltaTransformVectors(mesh.sceneTransform, tangents, tangents);
                    // Copy vertex data from temporary (transformed) vectors
                    vIdx = vo.vertices.length;
                    nIdx = vo.normals.length;
                    tIdx = vo.tangents.length;
                    len = vertices.length;
                    for (i = 0; i < len; i++) {
                        vo.vertices[vIdx++] = vertices[i];
                        vo.normals[nIdx++] = normals[i];
                        vo.tangents[tIdx++] = tangents[i];
                    }
                }
            }
            if (dispose)
                this._toDispose.push(mesh);
        }
    };
    Merge.prototype.getSubGeomData = function (material) {
        var data;
        if (this._keepMaterial) {
            var i /*uint*/;
            var len /*uint*/;
            len = this._geomVOs.length;
            for (i = 0; i < len; i++) {
                if (this._geomVOs[i].material == material) {
                    data = this._geomVOs[i];
                    break;
                }
            }
        }
        else if (this._geomVOs.length) {
            // If materials are not to be kept, all data can be
            // put into a single VO, so return that one.
            data = this._geomVOs[0];
        }
        // No data (for this material) found, create new.
        if (!data) {
            data = new GeometryVO();
            data.vertices = new Array();
            data.normals = new Array();
            data.tangents = new Array();
            data.uvs = new Array();
            data.indices = new Array();
            data.material = material;
            this._geomVOs.push(data);
        }
        return data;
    };
    Merge.prototype.parseContainer = function (receiver, object) {
        var child;
        var i /*uint*/;
        if (object instanceof Mesh && object != receiver)
            this.collect(object, this._disposeSources);
        for (i = 0; i < object.numChildren; ++i) {
            child = object.getChildAt(i);
            this.parseContainer(receiver, child);
        }
    };
    return Merge;
})();
var GeometryVO = (function () {
    function GeometryVO() {
    }
    return GeometryVO;
})();
module.exports = Merge;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi90b29scy9jb21tYW5kcy9NZXJnZS50cyJdLCJuYW1lcyI6WyJNZXJnZSIsIk1lcmdlLmNvbnN0cnVjdG9yIiwiTWVyZ2UuZGlzcG9zZVNvdXJjZXMiLCJNZXJnZS5rZWVwTWF0ZXJpYWwiLCJNZXJnZS5vYmplY3RTcGFjZSIsIk1lcmdlLmFwcGx5VG9Db250YWluZXIiLCJNZXJnZS5hcHBseVRvTWVzaGVzIiwiTWVyZ2UuYXBwbHkiLCJNZXJnZS5yZXNldCIsIk1lcmdlLm1lcmdlIiwiTWVyZ2UuY29sbGVjdCIsIk1lcmdlLmdldFN1Ykdlb21EYXRhIiwiTWVyZ2UucGFyc2VDb250YWluZXIiLCJHZW9tZXRyeVZPIiwiR2VvbWV0cnlWTy5jb25zdHJ1Y3RvciJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBTyxhQUFhLFdBQWUsb0NBQW9DLENBQUMsQ0FBQztBQUd6RSxJQUFPLFFBQVEsV0FBaUIsK0JBQStCLENBQUMsQ0FBQztBQUNqRSxJQUFPLG1CQUFtQixXQUFjLDBDQUEwQyxDQUFDLENBQUM7QUFDcEYsSUFBTyxJQUFJLFdBQWtCLGtDQUFrQyxDQUFDLENBQUM7QUFHakUsQUFHQTs7R0FERztJQUNHLEtBQUs7SUFVVkE7Ozs7OztPQU1HQTtJQUNIQSxTQWpCS0EsS0FBS0EsQ0FpQkVBLFlBQTRCQSxFQUFFQSxjQUE4QkEsRUFBRUEsV0FBMkJBO1FBQXpGQyw0QkFBNEJBLEdBQTVCQSxvQkFBNEJBO1FBQUVBLDhCQUE4QkEsR0FBOUJBLHNCQUE4QkE7UUFBRUEsMkJBQTJCQSxHQUEzQkEsbUJBQTJCQTtRQUVwR0EsSUFBSUEsQ0FBQ0EsYUFBYUEsR0FBR0EsWUFBWUEsQ0FBQ0E7UUFDbENBLElBQUlBLENBQUNBLGVBQWVBLEdBQUdBLGNBQWNBLENBQUNBO1FBQ3RDQSxJQUFJQSxDQUFDQSxZQUFZQSxHQUFHQSxXQUFXQSxDQUFDQTtJQUNqQ0EsQ0FBQ0E7SUFLREQsc0JBQVdBLGlDQUFjQTthQUt6QkE7WUFFQ0UsTUFB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QTtRQUN0Q0EsQ0FBQ0E7SUFDRkEsQ0FBQ0E7SUFDRlosWUFBQ0E7QUFBREEsQ0FsVkEsQUFrVkNBLElBQUE7QUFJRCxJQUFNLFVBQVU7SUFBaEJhLFNBQU1BLFVBQVVBO0lBUWhCQyxDQUFDQTtJQUFERCxpQkFBQ0E7QUFBREEsQ0FSQSxBQVFDQSxJQUFBO0FBVkQsaUJBQVMsS0FBSyxDQUFDIiwiZmlsZSI6InRvb2xzL2NvbW1hbmRzL01lcmdlLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNYXRyaXgzRFV0aWxzXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9nZW9tL01hdHJpeDNEVXRpbHNcIik7XG5cbmltcG9ydCBEaXNwbGF5T2JqZWN0Q29udGFpbmVyXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2NvbnRhaW5lcnMvRGlzcGxheU9iamVjdENvbnRhaW5lclwiKTtcbmltcG9ydCBHZW9tZXRyeVx0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2RhdGEvR2VvbWV0cnlcIik7XG5pbXBvcnQgVHJpYW5nbGVTdWJHZW9tZXRyeVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2RhdGEvVHJpYW5nbGVTdWJHZW9tZXRyeVwiKTtcbmltcG9ydCBNZXNoXHRcdFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9lbnRpdGllcy9NZXNoXCIpO1xuaW1wb3J0IE1hdGVyaWFsQmFzZVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9tYXRlcmlhbHMvTWF0ZXJpYWxCYXNlXCIpO1xuXG4vKipcbiAqICBDbGFzcyBNZXJnZSBtZXJnZXMgdHdvIG9yIG1vcmUgc3RhdGljIG1lc2hlcyBpbnRvIG9uZS48Y29kZT5NZXJnZTwvY29kZT5cbiAqL1xuY2xhc3MgTWVyZ2VcbntcblxuXHQvL3ByaXZhdGUgY29uc3QgTElNSVQ6dWludCA9IDE5NjYwNTtcblx0cHJpdmF0ZSBfb2JqZWN0U3BhY2U6Ym9vbGVhbjtcblx0cHJpdmF0ZSBfa2VlcE1hdGVyaWFsOmJvb2xlYW47XG5cdHByaXZhdGUgX2Rpc3Bvc2VTb3VyY2VzOmJvb2xlYW47XG5cdHByaXZhdGUgX2dlb21WT3M6QXJyYXk8R2VvbWV0cnlWTz47XG5cdHByaXZhdGUgX3RvRGlzcG9zZTpBcnJheTxNZXNoPjtcblxuXHQvKipcblx0ICogQHBhcmFtICAgIGtlZXBNYXRlcmlhbCAgICBbb3B0aW9uYWxdICAgIERldGVybWluZXMgaWYgdGhlIG1lcmdlZCBvYmplY3QgdXNlcyB0aGUgcmVjZXZpZXIgbWVzaCBtYXRlcmlhbCBpbmZvcm1hdGlvbiBvciBrZWVwcyBpdHMgc291cmNlIG1hdGVyaWFsKHMpLiBEZWZhdWx0cyB0byBmYWxzZS5cblx0ICogSWYgZmFsc2UgYW5kIHJlY2VpdmVyIG9iamVjdCBoYXMgbXVsdGlwbGUgbWF0ZXJpYWxzLCB0aGUgbGFzdCBtYXRlcmlhbCBmb3VuZCBpbiByZWNlaXZlciBzdWJtZXNoZXMgaXMgYXBwbGllZCB0byB0aGUgbWVyZ2VkIHN1Ym1lc2goZXMpLlxuXHQgKiBAcGFyYW0gICAgZGlzcG9zZVNvdXJjZXMgIFtvcHRpb25hbF0gICAgRGV0ZXJtaW5lcyBpZiB0aGUgbWVzaCBhbmQgZ2VvbWV0cnkgc291cmNlKHMpIHVzZWQgZm9yIHRoZSBtZXJnaW5nIGFyZSBkaXNwb3NlZC4gRGVmYXVsdHMgdG8gZmFsc2UuXG5cdCAqIElmIHRydWUsIG9ubHkgcmVjZWl2ZXIgZ2VvbWV0cnkgYW5kIHJlc3VsdGluZyBtZXNoIGFyZSBrZXB0IGluICBtZW1vcnkuXG5cdCAqIEBwYXJhbSAgICBvYmplY3RTcGFjZSAgICAgW29wdGlvbmFsXSAgICBEZXRlcm1pbmVzIGlmIHNvdXJjZSBtZXNoKGVzKSBpcy9hcmUgbWVyZ2VkIHVzaW5nIG9iamVjdFNwYWNlIG9yIHdvcmxkc3BhY2UuIERlZmF1bHRzIHRvIGZhbHNlLlxuXHQgKi9cblx0Y29uc3RydWN0b3Ioa2VlcE1hdGVyaWFsOmJvb2xlYW4gPSBmYWxzZSwgZGlzcG9zZVNvdXJjZXM6Ym9vbGVhbiA9IGZhbHNlLCBvYmplY3RTcGFjZTpib29sZWFuID0gZmFsc2UpXG5cdHtcblx0XHR0aGlzLl9rZWVwTWF0ZXJpYWwgPSBrZWVwTWF0ZXJpYWw7XG5cdFx0dGhpcy5fZGlzcG9zZVNvdXJjZXMgPSBkaXNwb3NlU291cmNlcztcblx0XHR0aGlzLl9vYmplY3RTcGFjZSA9IG9iamVjdFNwYWNlO1xuXHR9XG5cblx0LyoqXG5cdCAqIERldGVybWluZXMgaWYgdGhlIG1lc2ggYW5kIGdlb21ldHJ5IHNvdXJjZShzKSB1c2VkIGZvciB0aGUgbWVyZ2luZyBhcmUgZGlzcG9zZWQuIERlZmF1bHRzIHRvIGZhbHNlLlxuXHQgKi9cblx0cHVibGljIHNldCBkaXNwb3NlU291cmNlcyhiOmJvb2xlYW4pXG5cdHtcblx0XHR0aGlzLl9kaXNwb3NlU291cmNlcyA9IGI7XG5cdH1cblxuXHRwdWJsaWMgZ2V0IGRpc3Bvc2VTb3VyY2VzKCk6Ym9vbGVhblxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX2Rpc3Bvc2VTb3VyY2VzO1xuXHR9XG5cblx0LyoqXG5cdCAqIERldGVybWluZXMgaWYgdGhlIG1hdGVyaWFsIHNvdXJjZShzKSB1c2VkIGZvciB0aGUgbWVyZ2luZyBhcmUgZGlzcG9zZWQuIERlZmF1bHRzIHRvIGZhbHNlLlxuXHQgKi9cblx0cHVibGljIHNldCBrZWVwTWF0ZXJpYWwoYjpib29sZWFuKVxuXHR7XG5cdFx0dGhpcy5fa2VlcE1hdGVyaWFsID0gYjtcblx0fVxuXG5cdHB1YmxpYyBnZXQga2VlcE1hdGVyaWFsKCk6Ym9vbGVhblxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX2tlZXBNYXRlcmlhbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBEZXRlcm1pbmVzIGlmIHNvdXJjZSBtZXNoKGVzKSBpcy9hcmUgbWVyZ2VkIHVzaW5nIG9iamVjdFNwYWNlIG9yIHdvcmxkc3BhY2UuIERlZmF1bHRzIHRvIGZhbHNlLlxuXHQgKi9cblx0cHVibGljIHNldCBvYmplY3RTcGFjZShiOmJvb2xlYW4pXG5cdHtcblx0XHR0aGlzLl9vYmplY3RTcGFjZSA9IGI7XG5cdH1cblxuXHRwdWJsaWMgZ2V0IG9iamVjdFNwYWNlKCk6Ym9vbGVhblxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX29iamVjdFNwYWNlO1xuXHR9XG5cblx0LyoqXG5cdCAqIE1lcmdlcyBhbGwgdGhlIGNoaWxkcmVuIG9mIGEgY29udGFpbmVyIGludG8gYSBzaW5nbGUgTWVzaC4gSWYgbm8gTWVzaCBvYmplY3QgaXMgZm91bmQsIG1ldGhvZCByZXR1cm5zIHRoZSByZWNlaXZlciB3aXRob3V0IG1vZGlmaWNhdGlvbi5cblx0ICpcblx0ICogQHBhcmFtICAgIHJlY2VpdmVyICAgICAgICAgICBUaGUgTWVzaCB0byByZWNlaXZlIHRoZSBtZXJnZWQgY29udGVudHMgb2YgdGhlIGNvbnRhaW5lci5cblx0ICogQHBhcmFtICAgIG9iamVjdENvbnRhaW5lciAgICBUaGUgRGlzcGxheU9iamVjdENvbnRhaW5lciBob2xkaW5nIHRoZSBtZXNoZXMgdG8gYmUgbWVyZ2QuXG5cdCAqXG5cdCAqIEByZXR1cm4gVGhlIG1lcmdlZCBNZXNoIGluc3RhbmNlLlxuXHQgKi9cblx0cHVibGljIGFwcGx5VG9Db250YWluZXIocmVjZWl2ZXI6TWVzaCwgb2JqZWN0Q29udGFpbmVyOkRpc3BsYXlPYmplY3RDb250YWluZXIpXG5cdHtcblx0XHR0aGlzLnJlc2V0KCk7XG5cblx0XHQvL2NvbGxlY3QgY29udGFpbmVyIG1lc2hlc1xuXHRcdHRoaXMucGFyc2VDb250YWluZXIocmVjZWl2ZXIsIG9iamVjdENvbnRhaW5lcik7XG5cblx0XHQvL2NvbGxlY3QgcmVjZWl2ZXJcblx0XHR0aGlzLmNvbGxlY3QocmVjZWl2ZXIsIGZhbHNlKTtcblxuXHRcdC8vbWVyZ2UgdG8gcmVjZWl2ZXJcblx0XHR0aGlzLm1lcmdlKHJlY2VpdmVyLCB0aGlzLl9kaXNwb3NlU291cmNlcyk7XG5cdH1cblxuXHQvKipcblx0ICogTWVyZ2VzIGFsbCB0aGUgbWVzaGVzIGZvdW5kIGluIHRoZSBBcnJheSZsdDtNZXNoJmd0OyBpbnRvIGEgc2luZ2xlIE1lc2guXG5cdCAqXG5cdCAqIEBwYXJhbSAgICByZWNlaXZlciAgICBUaGUgTWVzaCB0byByZWNlaXZlIHRoZSBtZXJnZWQgY29udGVudHMgb2YgdGhlIG1lc2hlcy5cblx0ICogQHBhcmFtICAgIG1lc2hlcyAgICAgIEEgc2VyaWVzIG9mIE1lc2hlcyB0byBiZSBtZXJnZWQgd2l0aCB0aGUgcmVjaWV2ZXIgbWVzaC5cblx0ICovXG5cdHB1YmxpYyBhcHBseVRvTWVzaGVzKHJlY2VpdmVyOk1lc2gsIG1lc2hlczpBcnJheTxNZXNoPilcblx0e1xuXHRcdHRoaXMucmVzZXQoKTtcblxuXHRcdGlmICghbWVzaGVzLmxlbmd0aClcblx0XHRcdHJldHVybjtcblxuXHRcdC8vY29sbGVjdCBtZXNoZXMgaW4gdmVjdG9yXG5cdFx0Zm9yICh2YXIgaTpudW1iZXIgLyp1aW50Ki8gPSAwOyBpIDwgbWVzaGVzLmxlbmd0aDsgaSsrKVxuXHRcdFx0aWYgKG1lc2hlc1tpXSAhPSByZWNlaXZlcilcblx0XHRcdFx0dGhpcy5jb2xsZWN0KG1lc2hlc1tpXSwgdGhpcy5fZGlzcG9zZVNvdXJjZXMpO1xuXG5cdFx0Ly9jb2xsZWN0IHJlY2VpdmVyXG5cdFx0dGhpcy5jb2xsZWN0KHJlY2VpdmVyLCBmYWxzZSk7XG5cblx0XHQvL21lcmdlIHRvIHJlY2VpdmVyXG5cdFx0dGhpcy5tZXJnZShyZWNlaXZlciwgdGhpcy5fZGlzcG9zZVNvdXJjZXMpO1xuXHR9XG5cblx0LyoqXG5cdCAqICBNZXJnZXMgMiBtZXNoZXMgaW50byBvbmUuIEl0IGlzIHJlY29tbWFuZCB0byB1c2UgYXBwbHkgd2hlbiAyIG1lc2hlcyBhcmUgdG8gYmUgbWVyZ2VkLiBJZiBtb3JlIG5lZWQgdG8gYmUgbWVyZ2VkLCB1c2UgZWl0aGVyIGFwcGx5VG9NZXNoZXMgb3IgYXBwbHlUb0NvbnRhaW5lciBtZXRob2RzLlxuXHQgKlxuXHQgKiBAcGFyYW0gICAgcmVjZWl2ZXIgICAgVGhlIE1lc2ggdG8gcmVjZWl2ZSB0aGUgbWVyZ2VkIGNvbnRlbnRzIG9mIGJvdGggbWVzaGVzLlxuXHQgKiBAcGFyYW0gICAgbWVzaCAgICAgICAgVGhlIE1lc2ggdG8gYmUgbWVyZ2VkIHdpdGggdGhlIHJlY2VpdmVyIG1lc2hcblx0ICovXG5cdHB1YmxpYyBhcHBseShyZWNlaXZlcjpNZXNoLCBtZXNoOk1lc2gpXG5cdHtcblx0XHR0aGlzLnJlc2V0KCk7XG5cblx0XHQvL2NvbGxlY3QgbWVzaFxuXHRcdHRoaXMuY29sbGVjdChtZXNoLCB0aGlzLl9kaXNwb3NlU291cmNlcyk7XG5cblx0XHQvL2NvbGxlY3QgcmVjZWl2ZXJcblx0XHR0aGlzLmNvbGxlY3QocmVjZWl2ZXIsIGZhbHNlKTtcblxuXHRcdC8vbWVyZ2UgdG8gcmVjZWl2ZXJcblx0XHR0aGlzLm1lcmdlKHJlY2VpdmVyLCB0aGlzLl9kaXNwb3NlU291cmNlcyk7XG5cdH1cblxuXHRwcml2YXRlIHJlc2V0KClcblx0e1xuXHRcdHRoaXMuX3RvRGlzcG9zZSAgPSBuZXcgQXJyYXk8TWVzaD4oKTtcblx0XHR0aGlzLl9nZW9tVk9zID0gbmV3IEFycmF5PEdlb21ldHJ5Vk8+KCk7XG5cdH1cblxuXHRwcml2YXRlIG1lcmdlKGRlc3RNZXNoOk1lc2gsIGRpc3Bvc2U6Ym9vbGVhbilcblx0e1xuXHRcdHZhciBpOm51bWJlciAvKnVpbnQqLztcblx0XHR2YXIgc3ViSWR4Om51bWJlciAvKnVpbnQqLztcblx0XHR2YXIgb2xkR2VvbTpHZW9tZXRyeTtcblx0XHR2YXIgZGVzdEdlb206R2VvbWV0cnk7XG5cdFx0dmFyIHVzZVN1Yk1hdGVyaWFsczpib29sZWFuO1xuXG5cdFx0b2xkR2VvbSA9IGRlc3RNZXNoLmdlb21ldHJ5O1xuXHRcdGRlc3RHZW9tID0gZGVzdE1lc2guZ2VvbWV0cnkgPSBuZXcgR2VvbWV0cnkoKTtcblx0XHRzdWJJZHggPSBkZXN0TWVzaC5zdWJNZXNoZXMubGVuZ3RoO1xuXG5cdFx0Ly8gT25seSBhcHBseSBtYXRlcmlhbHMgZGlyZWN0bHkgdG8gc3ViLW1lc2hlcyBpZiBuZWNlc3NhcnksXG5cdFx0Ly8gaS5lLiBpZiB0aGVyZSBpcyBtb3JlIHRoYW4gb25lIG1hdGVyaWFsIGF2YWlsYWJsZS5cblx0XHR1c2VTdWJNYXRlcmlhbHMgPSAodGhpcy5fZ2VvbVZPcy5sZW5ndGggPiAxKTtcblxuXHRcdGZvciAoaSA9IDA7IGkgPCB0aGlzLl9nZW9tVk9zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgczpudW1iZXIgLyp1aW50Ki87XG5cdFx0XHR2YXIgZGF0YTpHZW9tZXRyeVZPO1xuXHRcdFx0dmFyIHN1YjpUcmlhbmdsZVN1Ykdlb21ldHJ5ID0gbmV3IFRyaWFuZ2xlU3ViR2VvbWV0cnkodHJ1ZSk7XG5cdFx0XHRzdWIuYXV0b0Rlcml2ZU5vcm1hbHMgPSBmYWxzZTtcblx0XHRcdHN1Yi5hdXRvRGVyaXZlVGFuZ2VudHMgPSBmYWxzZTtcblxuXHRcdFx0ZGF0YSA9IHRoaXMuX2dlb21WT3NbaV07XG5cdFx0XHRzdWIudXBkYXRlSW5kaWNlcyhkYXRhLmluZGljZXMpO1xuXHRcdFx0c3ViLnVwZGF0ZVBvc2l0aW9ucyhkYXRhLnZlcnRpY2VzKTtcblx0XHRcdHN1Yi51cGRhdGVWZXJ0ZXhOb3JtYWxzKGRhdGEubm9ybWFscyk7XG5cdFx0XHRzdWIudXBkYXRlVmVydGV4VGFuZ2VudHMoZGF0YS50YW5nZW50cyk7XG5cdFx0XHRzdWIudXBkYXRlVVZzKGRhdGEudXZzKTtcblxuXHRcdFx0ZGVzdEdlb20uYWRkU3ViR2VvbWV0cnkoc3ViKTtcblxuXHRcdFx0aWYgKHRoaXMuX2tlZXBNYXRlcmlhbCAmJiB1c2VTdWJNYXRlcmlhbHMpXG5cdFx0XHRcdGRlc3RNZXNoLnN1Yk1lc2hlc1tzdWJJZHhdLm1hdGVyaWFsID0gZGF0YS5tYXRlcmlhbDtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5fa2VlcE1hdGVyaWFsICYmICF1c2VTdWJNYXRlcmlhbHMgJiYgdGhpcy5fZ2VvbVZPcy5sZW5ndGgpXG5cdFx0XHRkZXN0TWVzaC5tYXRlcmlhbCA9IHRoaXMuX2dlb21WT3NbMF0ubWF0ZXJpYWw7XG5cblx0XHRpZiAoZGlzcG9zZSkge1xuXHRcdFx0dmFyIG06TWVzaDtcblx0XHRcdHZhciBsZW46bnVtYmVyID0gdGhpcy5fdG9EaXNwb3NlLmxlbmd0aDtcblx0XHRcdGZvciAodmFyIGk6bnVtYmVyOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdFx0bSA9IHRoaXMuX3RvRGlzcG9zZVtpXTtcblx0XHRcdFx0bS5nZW9tZXRyeS5kaXNwb3NlKCk7XG5cdFx0XHRcdG0uZGlzcG9zZSgpO1xuXHRcdFx0fVxuXG5cdFx0XHQvL2Rpc3Bvc2Ugb2YgdGhlIG9yaWdpbmFsIHJlY2VpdmVyIGdlb21ldHJ5XG5cdFx0XHRvbGRHZW9tLmRpc3Bvc2UoKTtcblx0XHR9XG5cblx0XHR0aGlzLl90b0Rpc3Bvc2UgPSBudWxsO1xuXHR9XG5cblx0cHJpdmF0ZSBjb2xsZWN0KG1lc2g6TWVzaCwgZGlzcG9zZTpib29sZWFuKVxuXHR7XG5cdFx0aWYgKG1lc2guZ2VvbWV0cnkpIHtcblx0XHRcdHZhciBzdWJJZHg6bnVtYmVyIC8qdWludCovO1xuXHRcdFx0dmFyIHN1Ykdlb21ldHJpZXM6QXJyYXk8VHJpYW5nbGVTdWJHZW9tZXRyeT4gPSA8QXJyYXk8VHJpYW5nbGVTdWJHZW9tZXRyeT4+IG1lc2guZ2VvbWV0cnkuc3ViR2VvbWV0cmllcztcblx0XHRcdHZhciBjYWxjOm51bWJlciAvKnVpbnQqLztcblx0XHRcdGZvciAoc3ViSWR4ID0gMDsgc3ViSWR4IDwgc3ViR2VvbWV0cmllcy5sZW5ndGg7IHN1YklkeCsrKSB7XG5cdFx0XHRcdHZhciBpOm51bWJlciAvKnVpbnQqLztcblx0XHRcdFx0dmFyIGxlbjpudW1iZXIgLyp1aW50Ki87XG5cdFx0XHRcdHZhciBpSWR4Om51bWJlciAvKnVpbnQqLywgdklkeDpudW1iZXIgLyp1aW50Ki8sIG5JZHg6bnVtYmVyIC8qdWludCovLCB0SWR4Om51bWJlciAvKnVpbnQqLywgdUlkeDpudW1iZXIgLyp1aW50Ki87XG5cdFx0XHRcdHZhciBpbmRleE9mZnNldDpudW1iZXIgLyp1aW50Ki87XG5cdFx0XHRcdHZhciBzdWJHZW9tOlRyaWFuZ2xlU3ViR2VvbWV0cnk7XG5cdFx0XHRcdHZhciB2bzpHZW9tZXRyeVZPO1xuXHRcdFx0XHR2YXIgdmVydGljZXM6QXJyYXk8bnVtYmVyPjtcblx0XHRcdFx0dmFyIG5vcm1hbHM6QXJyYXk8bnVtYmVyPjtcblx0XHRcdFx0dmFyIHRhbmdlbnRzOkFycmF5PG51bWJlcj47XG5cdFx0XHRcdHZhciBwZDpBcnJheTxudW1iZXI+LCBuZDpBcnJheTxudW1iZXI+LCB0ZDpBcnJheTxudW1iZXI+LCB1ZDpBcnJheTxudW1iZXI+O1xuXG5cdFx0XHRcdHN1Ykdlb20gPSBzdWJHZW9tZXRyaWVzW3N1YklkeF07XG5cdFx0XHRcdHBkID0gc3ViR2VvbS5wb3NpdGlvbnM7XG5cdFx0XHRcdG5kID0gc3ViR2VvbS52ZXJ0ZXhOb3JtYWxzO1xuXHRcdFx0XHR0ZCA9IHN1Ykdlb20udmVydGV4VGFuZ2VudHM7XG5cdFx0XHRcdHVkID0gc3ViR2VvbS51dnM7XG5cblx0XHRcdFx0Ly8gR2V0IChvciBjcmVhdGUpIGEgVk8gZm9yIHRoaXMgbWF0ZXJpYWxcblx0XHRcdFx0dm8gPSB0aGlzLmdldFN1Ykdlb21EYXRhKG1lc2guc3ViTWVzaGVzW3N1YklkeF0ubWF0ZXJpYWwgfHwgbWVzaC5tYXRlcmlhbCk7XG5cblx0XHRcdFx0Ly8gVmVydGljZXMgYW5kIG5vcm1hbHMgYXJlIGNvcGllZCB0byB0ZW1wb3JhcnkgdmVjdG9ycywgdG8gYmUgdHJhbnNmb3JtZWRcblx0XHRcdFx0Ly8gYmVmb3JlIGNvbmNhdGVuYXRlZCBvbnRvIHRob3NlIG9mIHRoZSBkYXRhLiBUaGlzIGlzIHVubmVjZXNzYXJ5IGlmIG5vXG5cdFx0XHRcdC8vIHRyYW5zZm9ybWF0aW9uIHdpbGwgYmUgcGVyZm9ybWVkLCBpLmUuIGZvciBvYmplY3Qgc3BhY2UgbWVyZ2luZy5cblx0XHRcdFx0dmVydGljZXMgPSAodGhpcy5fb2JqZWN0U3BhY2UpPyB2by52ZXJ0aWNlcyA6IG5ldyBBcnJheTxudW1iZXI+KCk7XG5cdFx0XHRcdG5vcm1hbHMgPSAodGhpcy5fb2JqZWN0U3BhY2UpPyB2by5ub3JtYWxzIDogbmV3IEFycmF5PG51bWJlcj4oKTtcblx0XHRcdFx0dGFuZ2VudHMgPSAodGhpcy5fb2JqZWN0U3BhY2UpPyB2by50YW5nZW50cyA6IG5ldyBBcnJheTxudW1iZXI+KCk7XG5cblx0XHRcdFx0Ly8gQ29weSBvdmVyIHZlcnRleCBhdHRyaWJ1dGVzXG5cdFx0XHRcdHZJZHggPSB2ZXJ0aWNlcy5sZW5ndGg7XG5cdFx0XHRcdG5JZHggPSBub3JtYWxzLmxlbmd0aDtcblx0XHRcdFx0dElkeCA9IHRhbmdlbnRzLmxlbmd0aDtcblx0XHRcdFx0dUlkeCA9IHZvLnV2cy5sZW5ndGg7XG5cdFx0XHRcdGxlbiA9IHN1Ykdlb20ubnVtVmVydGljZXM7XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0XHRcdGNhbGMgPSBpKjM7XG5cblx0XHRcdFx0XHQvLyBQb3NpdGlvblxuXHRcdFx0XHRcdHZlcnRpY2VzW3ZJZHgrK10gPSBwZFtjYWxjXTtcblx0XHRcdFx0XHR2ZXJ0aWNlc1t2SWR4KytdID0gcGRbY2FsYyArIDFdO1xuXHRcdFx0XHRcdHZlcnRpY2VzW3ZJZHgrK10gPSBwZFtjYWxjICsgMl07XG5cblx0XHRcdFx0XHQvLyBOb3JtYWxcblx0XHRcdFx0XHRub3JtYWxzW25JZHgrK10gPSBuZFtjYWxjXTtcblx0XHRcdFx0XHRub3JtYWxzW25JZHgrK10gPSBuZFtjYWxjICsgMV07XG5cdFx0XHRcdFx0bm9ybWFsc1tuSWR4KytdID0gbmRbY2FsYyArIDJdO1xuXG5cdFx0XHRcdFx0Ly8gVGFuZ2VudFxuXHRcdFx0XHRcdHRhbmdlbnRzW3RJZHgrK10gPSB0ZFtjYWxjXTtcblx0XHRcdFx0XHR0YW5nZW50c1t0SWR4KytdID0gdGRbY2FsYyArIDFdO1xuXHRcdFx0XHRcdHRhbmdlbnRzW3RJZHgrK10gPSB0ZFtjYWxjICsgMl07XG5cblx0XHRcdFx0XHQvLyBVVlxuXHRcdFx0XHRcdHZvLnV2c1t1SWR4KytdID0gdWRbaSoyXTtcblx0XHRcdFx0XHR2by51dnNbdUlkeCsrXSA9IHVkW2kqMiArIDFdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ29weSBvdmVyIHRyaWFuZ2xlIGluZGljZXNcblx0XHRcdFx0aW5kZXhPZmZzZXQgPSAoIXRoaXMuX29iamVjdFNwYWNlKT8gdm8udmVydGljZXMubGVuZ3RoLzMgOjA7XG5cdFx0XHRcdGlJZHggPSB2by5pbmRpY2VzLmxlbmd0aDtcblx0XHRcdFx0bGVuID0gc3ViR2VvbS5udW1UcmlhbmdsZXM7XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0XHRcdGNhbGMgPSBpKjM7XG5cdFx0XHRcdFx0dm8uaW5kaWNlc1tpSWR4KytdID0gc3ViR2VvbS5pbmRpY2VzW2NhbGNdICsgaW5kZXhPZmZzZXQ7XG5cdFx0XHRcdFx0dm8uaW5kaWNlc1tpSWR4KytdID0gc3ViR2VvbS5pbmRpY2VzW2NhbGMgKyAxXSArIGluZGV4T2Zmc2V0O1xuXHRcdFx0XHRcdHZvLmluZGljZXNbaUlkeCsrXSA9IHN1Ykdlb20uaW5kaWNlc1tjYWxjICsgMl0gKyBpbmRleE9mZnNldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICghdGhpcy5fb2JqZWN0U3BhY2UpIHtcblx0XHRcdFx0XHRtZXNoLnNjZW5lVHJhbnNmb3JtLnRyYW5zZm9ybVZlY3RvcnModmVydGljZXMsIHZlcnRpY2VzKTtcblx0XHRcdFx0XHRNYXRyaXgzRFV0aWxzLmRlbHRhVHJhbnNmb3JtVmVjdG9ycyhtZXNoLnNjZW5lVHJhbnNmb3JtLCBub3JtYWxzLCBub3JtYWxzKTtcblx0XHRcdFx0XHRNYXRyaXgzRFV0aWxzLmRlbHRhVHJhbnNmb3JtVmVjdG9ycyhtZXNoLnNjZW5lVHJhbnNmb3JtLCB0YW5nZW50cywgdGFuZ2VudHMpO1xuXG5cdFx0XHRcdFx0Ly8gQ29weSB2ZXJ0ZXggZGF0YSBmcm9tIHRlbXBvcmFyeSAodHJhbnNmb3JtZWQpIHZlY3RvcnNcblx0XHRcdFx0XHR2SWR4ID0gdm8udmVydGljZXMubGVuZ3RoO1xuXHRcdFx0XHRcdG5JZHggPSB2by5ub3JtYWxzLmxlbmd0aDtcblx0XHRcdFx0XHR0SWR4ID0gdm8udGFuZ2VudHMubGVuZ3RoO1xuXHRcdFx0XHRcdGxlbiA9IHZlcnRpY2VzLmxlbmd0aDtcblx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdFx0XHRcdHZvLnZlcnRpY2VzW3ZJZHgrK10gPSB2ZXJ0aWNlc1tpXTtcblx0XHRcdFx0XHRcdHZvLm5vcm1hbHNbbklkeCsrXSA9IG5vcm1hbHNbaV07XG5cdFx0XHRcdFx0XHR2by50YW5nZW50c1t0SWR4KytdID0gdGFuZ2VudHNbaV07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmIChkaXNwb3NlKVxuXHRcdFx0XHR0aGlzLl90b0Rpc3Bvc2UucHVzaChtZXNoKTtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIGdldFN1Ykdlb21EYXRhKG1hdGVyaWFsOk1hdGVyaWFsQmFzZSk6R2VvbWV0cnlWT1xuXHR7XG5cdFx0dmFyIGRhdGE6R2VvbWV0cnlWTztcblxuXHRcdGlmICh0aGlzLl9rZWVwTWF0ZXJpYWwpIHtcblx0XHRcdHZhciBpOm51bWJlciAvKnVpbnQqLztcblx0XHRcdHZhciBsZW46bnVtYmVyIC8qdWludCovO1xuXG5cdFx0XHRsZW4gPSB0aGlzLl9nZW9tVk9zLmxlbmd0aDtcblx0XHRcdGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0XHRpZiAodGhpcy5fZ2VvbVZPc1tpXS5tYXRlcmlhbCA9PSBtYXRlcmlhbCkge1xuXHRcdFx0XHRcdGRhdGEgPSB0aGlzLl9nZW9tVk9zW2ldO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICh0aGlzLl9nZW9tVk9zLmxlbmd0aCkge1xuXHRcdFx0Ly8gSWYgbWF0ZXJpYWxzIGFyZSBub3QgdG8gYmUga2VwdCwgYWxsIGRhdGEgY2FuIGJlXG5cdFx0XHQvLyBwdXQgaW50byBhIHNpbmdsZSBWTywgc28gcmV0dXJuIHRoYXQgb25lLlxuXHRcdFx0ZGF0YSA9IHRoaXMuX2dlb21WT3NbMF07XG5cdFx0fVxuXG5cdFx0Ly8gTm8gZGF0YSAoZm9yIHRoaXMgbWF0ZXJpYWwpIGZvdW5kLCBjcmVhdGUgbmV3LlxuXHRcdGlmICghZGF0YSkge1xuXHRcdFx0ZGF0YSA9IG5ldyBHZW9tZXRyeVZPKCk7XG5cdFx0XHRkYXRhLnZlcnRpY2VzID0gbmV3IEFycmF5PG51bWJlcj4oKTtcblx0XHRcdGRhdGEubm9ybWFscyA9IG5ldyBBcnJheTxudW1iZXI+KCk7XG5cdFx0XHRkYXRhLnRhbmdlbnRzID0gbmV3IEFycmF5PG51bWJlcj4oKTtcblx0XHRcdGRhdGEudXZzID0gbmV3IEFycmF5PG51bWJlcj4oKTtcblx0XHRcdGRhdGEuaW5kaWNlcyA9IG5ldyBBcnJheTxudW1iZXIgLyp1aW50Ki8+KCk7XG5cdFx0XHRkYXRhLm1hdGVyaWFsID0gbWF0ZXJpYWw7XG5cblx0XHRcdHRoaXMuX2dlb21WT3MucHVzaChkYXRhKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YTtcblx0fVxuXG5cdHByaXZhdGUgcGFyc2VDb250YWluZXIocmVjZWl2ZXI6TWVzaCwgb2JqZWN0OkRpc3BsYXlPYmplY3RDb250YWluZXIpXG5cdHtcblx0XHR2YXIgY2hpbGQ6RGlzcGxheU9iamVjdENvbnRhaW5lcjtcblx0XHR2YXIgaTpudW1iZXIgLyp1aW50Ki87XG5cblx0XHRpZiAob2JqZWN0IGluc3RhbmNlb2YgTWVzaCAmJiBvYmplY3QgIT0gKDxEaXNwbGF5T2JqZWN0Q29udGFpbmVyPiByZWNlaXZlcikpXG5cdFx0XHR0aGlzLmNvbGxlY3QoPE1lc2g+IG9iamVjdCwgdGhpcy5fZGlzcG9zZVNvdXJjZXMpO1xuXG5cdFx0Zm9yIChpID0gMDsgaSA8IG9iamVjdC5udW1DaGlsZHJlbjsgKytpKSB7XG5cdFx0XHRjaGlsZCA9IDxEaXNwbGF5T2JqZWN0Q29udGFpbmVyPiBvYmplY3QuZ2V0Q2hpbGRBdChpKTtcblx0XHRcdHRoaXMucGFyc2VDb250YWluZXIocmVjZWl2ZXIsIGNoaWxkKTtcblx0XHR9XG5cdH1cbn1cblxuZXhwb3J0ID0gTWVyZ2U7XG5cbmNsYXNzIEdlb21ldHJ5Vk9cbntcblx0cHVibGljIHV2czpBcnJheTxudW1iZXI+O1xuXHRwdWJsaWMgdmVydGljZXM6QXJyYXk8bnVtYmVyPjtcblx0cHVibGljIG5vcm1hbHM6QXJyYXk8bnVtYmVyPjtcblx0cHVibGljIHRhbmdlbnRzOkFycmF5PG51bWJlcj47XG5cdHB1YmxpYyBpbmRpY2VzOkFycmF5PG51bWJlciAvKnVpbnQqLz47XG5cdHB1YmxpYyBtYXRlcmlhbDpNYXRlcmlhbEJhc2U7XG59XG4iXX0=