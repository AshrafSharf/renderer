var TriangleSubGeometry = require("awayjs-core/lib/core/base/TriangleSubGeometry");
var Point = require("awayjs-core/lib/core/geom/Point");
var Vector3D = require("awayjs-core/lib/core/geom/Vector3D");
var ParticleData = require("awayjs-renderergl/lib/animators/data/ParticleData");
var ParticleGeometry = require("awayjs-renderergl/lib/core/base/ParticleGeometry");
/**
 * ...
 */
var ParticleGeometryHelper = (function () {
    function ParticleGeometryHelper() {
    }
    ParticleGeometryHelper.generateGeometry = function (geometries, transforms) {
        if (transforms === void 0) { transforms = null; }
        var indicesVector = new Array() /*uint*/;
        var positionsVector = new Array();
        var normalsVector = new Array();
        var tangentsVector = new Array();
        var uvsVector = new Array();
        var vertexCounters = new Array() /*uint*/;
        var particles = new Array();
        var subGeometries = new Array();
        var numParticles = geometries.length;
        var sourceSubGeometries;
        var sourceSubGeometry;
        var numSubGeometries /*uint*/;
        var indices /*uint*/;
        var positions;
        var normals;
        var tangents;
        var uvs;
        var vertexCounter /*uint*/;
        var subGeometry;
        var i /*int*/;
        var j /*int*/;
        var sub2SubMap = new Array() /*int*/;
        var tempVertex = new Vector3D;
        var tempNormal = new Vector3D;
        var tempTangents = new Vector3D;
        var tempUV = new Point;
        for (i = 0; i < numParticles; i++) {
            sourceSubGeometries = geometries[i].subGeometries;
            numSubGeometries = sourceSubGeometries.length;
            for (var srcIndex = 0; srcIndex < numSubGeometries; srcIndex++) {
                //create a different particle subgeometry group for each source subgeometry in a particle.
                if (sub2SubMap.length <= srcIndex) {
                    sub2SubMap.push(subGeometries.length);
                    indicesVector.push(new Array());
                    positionsVector.push(new Array());
                    normalsVector.push(new Array());
                    tangentsVector.push(new Array());
                    uvsVector.push(new Array());
                    subGeometries.push(new TriangleSubGeometry(true));
                    vertexCounters.push(0);
                }
                sourceSubGeometry = sourceSubGeometries[srcIndex];
                //add a new particle subgeometry if this source subgeometry will take us over the maxvertex limit
                if (sourceSubGeometry.numVertices + vertexCounters[sub2SubMap[srcIndex]] > ParticleGeometryHelper.MAX_VERTEX) {
                    //update submap and add new subgeom vectors
                    sub2SubMap[srcIndex] = subGeometries.length;
                    indicesVector.push(new Array());
                    positionsVector.push(new Array());
                    normalsVector.push(new Array());
                    tangentsVector.push(new Array());
                    uvsVector.push(new Array());
                    subGeometries.push(new TriangleSubGeometry(true));
                    vertexCounters.push(0);
                }
                j = sub2SubMap[srcIndex];
                //select the correct vector
                indices = indicesVector[j];
                positions = positionsVector[j];
                normals = normalsVector[j];
                tangents = tangentsVector[j];
                uvs = uvsVector[j];
                vertexCounter = vertexCounters[j];
                subGeometry = subGeometries[j];
                var particleData = new ParticleData();
                particleData.numVertices = sourceSubGeometry.numVertices;
                particleData.startVertexIndex = vertexCounter;
                particleData.particleIndex = i;
                particleData.subGeometry = subGeometry;
                particles.push(particleData);
                vertexCounters[j] += sourceSubGeometry.numVertices;
                var k /*int*/;
                var tempLen /*int*/;
                var compact = sourceSubGeometry;
                var product /*uint*/;
                var sourcePositions;
                var sourceNormals;
                var sourceTangents;
                var sourceUVs;
                if (compact) {
                    tempLen = compact.numVertices;
                    compact.numTriangles;
                    sourcePositions = compact.positions;
                    sourceNormals = compact.vertexNormals;
                    sourceTangents = compact.vertexTangents;
                    sourceUVs = compact.uvs;
                    if (transforms) {
                        var particleGeometryTransform = transforms[i];
                        var vertexTransform = particleGeometryTransform.vertexTransform;
                        var invVertexTransform = particleGeometryTransform.invVertexTransform;
                        var UVTransform = particleGeometryTransform.UVTransform;
                        for (k = 0; k < tempLen; k++) {
                            /*
                             * 0 - 2: vertex position X, Y, Z
                             * 3 - 5: normal X, Y, Z
                             * 6 - 8: tangent X, Y, Z
                             * 9 - 10: U V
                             * 11 - 12: Secondary U V*/
                            product = k * 3;
                            tempVertex.x = sourcePositions[product];
                            tempVertex.y = sourcePositions[product + 1];
                            tempVertex.z = sourcePositions[product + 2];
                            tempNormal.x = sourceNormals[product];
                            tempNormal.y = sourceNormals[product + 1];
                            tempNormal.z = sourceNormals[product + 2];
                            tempTangents.x = sourceTangents[product];
                            tempTangents.y = sourceTangents[product + 1];
                            tempTangents.z = sourceTangents[product + 2];
                            tempUV.x = sourceUVs[k * 2];
                            tempUV.y = sourceUVs[k * 2 + 1];
                            if (vertexTransform) {
                                tempVertex = vertexTransform.transformVector(tempVertex);
                                tempNormal = invVertexTransform.deltaTransformVector(tempNormal);
                                tempTangents = invVertexTransform.deltaTransformVector(tempNormal);
                            }
                            if (UVTransform)
                                tempUV = UVTransform.transformPoint(tempUV);
                            //this is faster than that only push one data
                            sourcePositions.push(tempVertex.x, tempVertex.y, tempVertex.z);
                            sourceNormals.push(tempNormal.x, tempNormal.y, tempNormal.z);
                            sourceTangents.push(tempTangents.x, tempTangents.y, tempTangents.z);
                            sourceUVs.push(tempUV.x, tempUV.y);
                        }
                    }
                    else {
                        for (k = 0; k < tempLen; k++) {
                            product = k * 3;
                            //this is faster than that only push one data
                            positions.push(sourcePositions[product], sourcePositions[product + 1], sourcePositions[product + 2]);
                            normals.push(sourceNormals[product], sourceNormals[product + 1], sourceNormals[product + 2]);
                            tangents.push(sourceTangents[product], sourceTangents[product + 1], sourceTangents[product + 2]);
                            uvs.push(sourceUVs[k * 2], sourceUVs[k * 2 + 1]);
                        }
                    }
                }
                else {
                }
                var sourceIndices = sourceSubGeometry.indices;
                tempLen = sourceSubGeometry.numTriangles;
                for (k = 0; k < tempLen; k++) {
                    product = k * 3;
                    indices.push(sourceIndices[product] + vertexCounter, sourceIndices[product + 1] + vertexCounter, sourceIndices[product + 2] + vertexCounter);
                }
            }
        }
        var particleGeometry = new ParticleGeometry();
        particleGeometry.particles = particles;
        particleGeometry.numParticles = numParticles;
        numParticles = subGeometries.length;
        for (i = 0; i < numParticles; i++) {
            subGeometry = subGeometries[i];
            subGeometry.autoDeriveNormals = false;
            subGeometry.autoDeriveTangents = false;
            subGeometry.updateIndices(indicesVector[i]);
            subGeometry.updatePositions(positionsVector[i]);
            subGeometry.updateVertexNormals(normalsVector[i]);
            subGeometry.updateVertexTangents(tangentsVector[i]);
            subGeometry.updateUVs(uvsVector[i]);
            particleGeometry.addSubGeometry(subGeometry);
        }
        return particleGeometry;
    };
    ParticleGeometryHelper.MAX_VERTEX = 65535;
    return ParticleGeometryHelper;
})();
module.exports = ParticleGeometryHelper;

//# sourceMappingURL=data:application/json;base64,