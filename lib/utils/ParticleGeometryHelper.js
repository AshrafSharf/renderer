var Point = require("awayjs-core/lib/geom/Point");
var Vector3D = require("awayjs-core/lib/geom/Vector3D");
var TriangleSubGeometry = require("awayjs-display/lib/base/TriangleSubGeometry");
var ParticleData = require("awayjs-renderergl/lib/animators/data/ParticleData");
var ParticleGeometry = require("awayjs-renderergl/lib/base/ParticleGeometry");
/**
 * ...
 */
var ParticleGeometryHelper = (function () {
    function ParticleGeometryHelper() {
    }
    ParticleGeometryHelper.generateGeometry = function (geometries, transforms) {
        if (transforms === void 0) { transforms = null; }
        var indicesVector = new Array() /*uint*/;
        var positionsVector = new Array();
        var normalsVector = new Array();
        var tangentsVector = new Array();
        var uvsVector = new Array();
        var vertexCounters = new Array() /*uint*/;
        var particles = new Array();
        var subGeometries = new Array();
        var numParticles = geometries.length;
        var sourceSubGeometries;
        var sourceSubGeometry;
        var numSubGeometries /*uint*/;
        var indices /*uint*/;
        var positions;
        var normals;
        var tangents;
        var uvs;
        var vertexCounter /*uint*/;
        var subGeometry;
        var i /*int*/;
        var j /*int*/;
        var sub2SubMap = new Array() /*int*/;
        var tempVertex = new Vector3D;
        var tempNormal = new Vector3D;
        var tempTangents = new Vector3D;
        var tempUV = new Point;
        for (i = 0; i < numParticles; i++) {
            sourceSubGeometries = geometries[i].subGeometries;
            numSubGeometries = sourceSubGeometries.length;
            for (var srcIndex = 0; srcIndex < numSubGeometries; srcIndex++) {
                //create a different particle subgeometry group for each source subgeometry in a particle.
                if (sub2SubMap.length <= srcIndex) {
                    sub2SubMap.push(subGeometries.length);
                    indicesVector.push(new Array());
                    positionsVector.push(new Array());
                    normalsVector.push(new Array());
                    tangentsVector.push(new Array());
                    uvsVector.push(new Array());
                    subGeometries.push(new TriangleSubGeometry(true));
                    vertexCounters.push(0);
                }
                sourceSubGeometry = sourceSubGeometries[srcIndex];
                //add a new particle subgeometry if this source subgeometry will take us over the maxvertex limit
                if (sourceSubGeometry.numVertices + vertexCounters[sub2SubMap[srcIndex]] > ParticleGeometryHelper.MAX_VERTEX) {
                    //update submap and add new subgeom vectors
                    sub2SubMap[srcIndex] = subGeometries.length;
                    indicesVector.push(new Array());
                    positionsVector.push(new Array());
                    normalsVector.push(new Array());
                    tangentsVector.push(new Array());
                    uvsVector.push(new Array());
                    subGeometries.push(new TriangleSubGeometry(true));
                    vertexCounters.push(0);
                }
                j = sub2SubMap[srcIndex];
                //select the correct vector
                indices = indicesVector[j];
                positions = positionsVector[j];
                normals = normalsVector[j];
                tangents = tangentsVector[j];
                uvs = uvsVector[j];
                vertexCounter = vertexCounters[j];
                subGeometry = subGeometries[j];
                var particleData = new ParticleData();
                particleData.numVertices = sourceSubGeometry.numVertices;
                particleData.startVertexIndex = vertexCounter;
                particleData.particleIndex = i;
                particleData.subGeometry = subGeometry;
                particles.push(particleData);
                vertexCounters[j] += sourceSubGeometry.numVertices;
                var k /*int*/;
                var tempLen /*int*/;
                var compact = sourceSubGeometry;
                var product /*uint*/;
                var sourcePositions;
                var sourceNormals;
                var sourceTangents;
                var sourceUVs;
                if (compact) {
                    tempLen = compact.numVertices;
                    compact.numTriangles;
                    sourcePositions = compact.positions;
                    sourceNormals = compact.vertexNormals;
                    sourceTangents = compact.vertexTangents;
                    sourceUVs = compact.uvs;
                    if (transforms) {
                        var particleGeometryTransform = transforms[i];
                        var vertexTransform = particleGeometryTransform.vertexTransform;
                        var invVertexTransform = particleGeometryTransform.invVertexTransform;
                        var UVTransform = particleGeometryTransform.UVTransform;
                        for (k = 0; k < tempLen; k++) {
                            /*
                             * 0 - 2: vertex position X, Y, Z
                             * 3 - 5: normal X, Y, Z
                             * 6 - 8: tangent X, Y, Z
                             * 9 - 10: U V
                             * 11 - 12: Secondary U V*/
                            product = k * 3;
                            tempVertex.x = sourcePositions[product];
                            tempVertex.y = sourcePositions[product + 1];
                            tempVertex.z = sourcePositions[product + 2];
                            tempNormal.x = sourceNormals[product];
                            tempNormal.y = sourceNormals[product + 1];
                            tempNormal.z = sourceNormals[product + 2];
                            tempTangents.x = sourceTangents[product];
                            tempTangents.y = sourceTangents[product + 1];
                            tempTangents.z = sourceTangents[product + 2];
                            tempUV.x = sourceUVs[k * 2];
                            tempUV.y = sourceUVs[k * 2 + 1];
                            if (vertexTransform) {
                                tempVertex = vertexTransform.transformVector(tempVertex);
                                tempNormal = invVertexTransform.deltaTransformVector(tempNormal);
                                tempTangents = invVertexTransform.deltaTransformVector(tempNormal);
                            }
                            if (UVTransform)
                                tempUV = UVTransform.transformPoint(tempUV);
                            //this is faster than that only push one data
                            sourcePositions.push(tempVertex.x, tempVertex.y, tempVertex.z);
                            sourceNormals.push(tempNormal.x, tempNormal.y, tempNormal.z);
                            sourceTangents.push(tempTangents.x, tempTangents.y, tempTangents.z);
                            sourceUVs.push(tempUV.x, tempUV.y);
                        }
                    }
                    else {
                        for (k = 0; k < tempLen; k++) {
                            product = k * 3;
                            //this is faster than that only push one data
                            positions.push(sourcePositions[product], sourcePositions[product + 1], sourcePositions[product + 2]);
                            normals.push(sourceNormals[product], sourceNormals[product + 1], sourceNormals[product + 2]);
                            tangents.push(sourceTangents[product], sourceTangents[product + 1], sourceTangents[product + 2]);
                            uvs.push(sourceUVs[k * 2], sourceUVs[k * 2 + 1]);
                        }
                    }
                }
                else {
                }
                var sourceIndices = sourceSubGeometry.indices;
                tempLen = sourceSubGeometry.numTriangles;
                for (k = 0; k < tempLen; k++) {
                    product = k * 3;
                    indices.push(sourceIndices[product] + vertexCounter, sourceIndices[product + 1] + vertexCounter, sourceIndices[product + 2] + vertexCounter);
                }
            }
        }
        var particleGeometry = new ParticleGeometry();
        particleGeometry.particles = particles;
        particleGeometry.numParticles = numParticles;
        numParticles = subGeometries.length;
        for (i = 0; i < numParticles; i++) {
            subGeometry = subGeometries[i];
            subGeometry.autoDeriveNormals = false;
            subGeometry.autoDeriveTangents = false;
            subGeometry.updateIndices(indicesVector[i]);
            subGeometry.updatePositions(positionsVector[i]);
            subGeometry.updateVertexNormals(normalsVector[i]);
            subGeometry.updateVertexTangents(tangentsVector[i]);
            subGeometry.updateUVs(uvsVector[i]);
            particleGeometry.addSubGeometry(subGeometry);
        }
        return particleGeometry;
    };
    ParticleGeometryHelper.MAX_VERTEX = 65535;
    return ParticleGeometryHelper;
})();
module.exports = ParticleGeometryHelper;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi91dGlscy9QYXJ0aWNsZUdlb21ldHJ5SGVscGVyLnRzIl0sIm5hbWVzIjpbIlBhcnRpY2xlR2VvbWV0cnlIZWxwZXIiLCJQYXJ0aWNsZUdlb21ldHJ5SGVscGVyLmNvbnN0cnVjdG9yIiwiUGFydGljbGVHZW9tZXRyeUhlbHBlci5nZW5lcmF0ZUdlb21ldHJ5Il0sIm1hcHBpbmdzIjoiQUFFQSxJQUFPLEtBQUssV0FBaUIsNEJBQTRCLENBQUMsQ0FBQztBQUMzRCxJQUFPLFFBQVEsV0FBaUIsK0JBQStCLENBQUMsQ0FBQztBQUdqRSxJQUFPLG1CQUFtQixXQUFjLDZDQUE2QyxDQUFDLENBQUM7QUFJdkYsSUFBTyxZQUFZLFdBQWdCLG1EQUFtRCxDQUFDLENBQUM7QUFDeEYsSUFBTyxnQkFBZ0IsV0FBZSw2Q0FBNkMsQ0FBQyxDQUFDO0FBR3JGLEFBR0E7O0dBREc7SUFDRyxzQkFBc0I7SUFBNUJBLFNBQU1BLHNCQUFzQkE7SUF1TDVCQyxDQUFDQTtJQW5MY0QsdUNBQWdCQSxHQUE5QkEsVUFBK0JBLFVBQTBCQSxFQUFFQSxVQUFrREE7UUFBbERFLDBCQUFrREEsR0FBbERBLGlCQUFrREE7UUFFNUdBLElBQUlBLGFBQWFBLEdBQWlDQSxJQUFJQSxLQUFLQSxFQUFpQkEsQ0FBQ0EsUUFBREEsQUFBU0EsQ0FBQ0E7UUFDdEZBLElBQUlBLGVBQWVBLEdBQXdCQSxJQUFJQSxLQUFLQSxFQUFpQkEsQ0FBQ0E7UUFDdEVBLElBQUlBLGFBQWFBLEdBQXdCQSxJQUFJQSxLQUFLQSxFQUFpQkEsQ0FBQ0E7UUFDcEVBLElBQUlBLGNBQWNBLEdBQXdCQSxJQUFJQSxLQUFLQSxFQUFpQkEsQ0FBQ0E7UUFDckVBLElBQUlBLFNBQVNBLEdBQXdCQSxJQUFJQSxLQUFLQSxFQUFpQkEsQ0FBQ0E7UUFDaEVBLElBQUlBLGNBQWNBLEdBQTBCQSxJQUFJQSxLQUFLQSxFQUFVQSxDQUFDQSxRQUFEQSxBQUFTQSxDQUFDQTtRQUN6RUEsSUFBSUEs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QzdDQSxBQUNBQSw2Q0FENkNBOzRCQUM3Q0EsZUFBZUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsVUFBVUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsVUFBVUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7NEJBQy9EQSxhQUFhQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQSxFQUFFQSxVQUFVQSxDQUFDQSxDQUFDQSxFQUFFQSxVQUFVQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTs0QkFDN0RBLGNBQWNBLENBQUNBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBLEVBQUVBLFlBQVlBLENBQUNBLENBQUNBLEVBQUVBLFlBQVlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBOzRCQUNwRUEsU0FBU0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7d0JBQ3BDQSxDQUFDQTtvQkFDRkEsQ0FBQ0E7b0JBQUNBLElBQUlBLENBQUNBLENBQUNBO3dCQUNQQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxPQUFPQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTs0QkFDOUJBLE9BQU9BLEdBQUdBLENBQUNBLEdBQUNBLENBQUNBLENBQUNBOzRCQUNkQSxBQUNBQSw2Q0FENkNBOzRCQUM3Q0EsU0FBU0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsRUFBRUEsZUFBZUEsQ0FBQ0EsT0FBT0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsZUFBZUEsQ0FBQ0EsT0FBT0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7NEJBQ3JHQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxhQUFhQSxDQUFDQSxPQUFPQSxDQUFDQSxFQUFFQSxhQUFhQSxDQUFDQSxPQUFPQSxHQUFHQSxDQUFDQSxDQUFDQSxF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QUFBREEsQ0F2TEEsQUF1TENBLElBQUE7QUFFRCxBQUFnQyxpQkFBdkIsc0JBQXNCLENBQUMiLCJmaWxlIjoidXRpbHMvUGFydGljbGVHZW9tZXRyeUhlbHBlci5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTWF0cml4XHRcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9NYXRyaXhcIik7XG5pbXBvcnQgTWF0cml4M0RcdFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9nZW9tL01hdHJpeDNEXCIpO1xuaW1wb3J0IFBvaW50XHRcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9Qb2ludFwiKTtcbmltcG9ydCBWZWN0b3IzRFx0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2dlb20vVmVjdG9yM0RcIik7XG5cbmltcG9ydCBHZW9tZXRyeVx0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2Jhc2UvR2VvbWV0cnlcIik7XG5pbXBvcnQgVHJpYW5nbGVTdWJHZW9tZXRyeVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2Jhc2UvVHJpYW5nbGVTdWJHZW9tZXRyeVwiKTtcbmltcG9ydCBNZXNoXHRcdFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9lbnRpdGllcy9NZXNoXCIpO1xuaW1wb3J0IE1hdGVyaWFsQmFzZVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9tYXRlcmlhbHMvTWF0ZXJpYWxCYXNlXCIpO1xuXG5pbXBvcnQgUGFydGljbGVEYXRhXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9kYXRhL1BhcnRpY2xlRGF0YVwiKTtcbmltcG9ydCBQYXJ0aWNsZUdlb21ldHJ5XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9iYXNlL1BhcnRpY2xlR2VvbWV0cnlcIik7XG5pbXBvcnQgUGFydGljbGVHZW9tZXRyeVRyYW5zZm9ybVx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvdG9vbHMvZGF0YS9QYXJ0aWNsZUdlb21ldHJ5VHJhbnNmb3JtXCIpO1xuXG4vKipcbiAqIC4uLlxuICovXG5jbGFzcyBQYXJ0aWNsZUdlb21ldHJ5SGVscGVyXG57XG5cdHB1YmxpYyBzdGF0aWMgTUFYX1ZFUlRFWDpudW1iZXIgLyppbnQqLyA9IDY1NTM1O1xuXG5cdHB1YmxpYyBzdGF0aWMgZ2VuZXJhdGVHZW9tZXRyeShnZW9tZXRyaWVzOkFycmF5PEdlb21ldHJ5PiwgdHJhbnNmb3JtczpBcnJheTxQYXJ0aWNsZUdlb21ldHJ5VHJhbnNmb3JtPiA9IG51bGwpOlBhcnRpY2xlR2VvbWV0cnlcblx0e1xuXHRcdHZhciBpbmRpY2VzVmVjdG9yOkFycmF5PEFycmF5PG51bWJlcj4+IC8qdWludCovID0gbmV3IEFycmF5PEFycmF5PG51bWJlcj4+KCkgLyp1aW50Ki87XG5cdFx0dmFyIHBvc2l0aW9uc1ZlY3RvcjpBcnJheTxBcnJheTxudW1iZXI+PiA9IG5ldyBBcnJheTxBcnJheTxudW1iZXI+PigpO1xuXHRcdHZhciBub3JtYWxzVmVjdG9yOkFycmF5PEFycmF5PG51bWJlcj4+ID0gbmV3IEFycmF5PEFycmF5PG51bWJlcj4+KCk7XG5cdFx0dmFyIHRhbmdlbnRzVmVjdG9yOkFycmF5PEFycmF5PG51bWJlcj4+ID0gbmV3IEFycmF5PEFycmF5PG51bWJlcj4+KCk7XG5cdFx0dmFyIHV2c1ZlY3RvcjpBcnJheTxBcnJheTxudW1iZXI+PiA9IG5ldyBBcnJheTxBcnJheTxudW1iZXI+PigpO1xuXHRcdHZhciB2ZXJ0ZXhDb3VudGVyczpBcnJheTxudW1iZXI+IC8qdWludCovID0gbmV3IEFycmF5PG51bWJlcj4oKSAvKnVpbnQqLztcblx0XHR2YXIgcGFydGljbGVzOkFycmF5PFBhcnRpY2xlRGF0YT4gPSBuZXcgQXJyYXk8UGFydGljbGVEYXRhPigpO1xuXHRcdHZhciBzdWJHZW9tZXRyaWVzOkFycmF5PFRyaWFuZ2xlU3ViR2VvbWV0cnk+ID0gbmV3IEFycmF5PFRyaWFuZ2xlU3ViR2VvbWV0cnk+KCk7XG5cdFx0dmFyIG51bVBhcnRpY2xlczpudW1iZXIgLyp1aW50Ki8gPSBnZW9tZXRyaWVzLmxlbmd0aDtcblxuXHRcdHZhciBzb3VyY2VTdWJHZW9tZXRyaWVzOkFycmF5PFRyaWFuZ2xlU3ViR2VvbWV0cnk+O1xuXHRcdHZhciBzb3VyY2VTdWJHZW9tZXRyeTpUcmlhbmdsZVN1Ykdlb21ldHJ5O1xuXHRcdHZhciBudW1TdWJHZW9tZXRyaWVzOm51bWJlciAvKnVpbnQqLztcblx0XHR2YXIgaW5kaWNlczpBcnJheTxudW1iZXI+IC8qdWludCovO1xuXHRcdHZhciBwb3NpdGlvbnM6QXJyYXk8bnVtYmVyPjtcblx0XHR2YXIgbm9ybWFsczpBcnJheTxudW1iZXI+O1xuXHRcdHZhciB0YW5nZW50czpBcnJheTxudW1iZXI+O1xuXHRcdHZhciB1dnM6QXJyYXk8bnVtYmVyPjtcblx0XHR2YXIgdmVydGV4Q291bnRlcjpudW1iZXIgLyp1aW50Ki87XG5cdFx0dmFyIHN1Ykdlb21ldHJ5OlRyaWFuZ2xlU3ViR2VvbWV0cnk7XG5cdFx0dmFyIGk6bnVtYmVyIC8qaW50Ki87XG5cdFx0dmFyIGo6bnVtYmVyIC8qaW50Ki87XG5cdFx0dmFyIHN1YjJTdWJNYXA6QXJyYXk8bnVtYmVyPiAvKmludCovID0gbmV3IEFycmF5PG51bWJlcj4oKSAvKmludCovO1xuXG5cdFx0dmFyIHRlbXBWZXJ0ZXg6VmVjdG9yM0QgPSBuZXcgVmVjdG9yM0Q7XG5cdFx0dmFyIHRlbXBOb3JtYWw6VmVjdG9yM0QgPSBuZXcgVmVjdG9yM0Q7XG5cdFx0dmFyIHRlbXBUYW5nZW50czpWZWN0b3IzRCA9IG5ldyBWZWN0b3IzRDtcblx0XHR2YXIgdGVtcFVWOlBvaW50ID0gbmV3IFBvaW50O1xuXG5cdFx0Zm9yIChpID0gMDsgaSA8IG51bVBhcnRpY2xlczsgaSsrKSB7XG5cdFx0XHRzb3VyY2VTdWJHZW9tZXRyaWVzID0gPEFycmF5PFRyaWFuZ2xlU3ViR2VvbWV0cnk+PiBnZW9tZXRyaWVzW2ldLnN1Ykdlb21ldHJpZXM7XG5cdFx0XHRudW1TdWJHZW9tZXRyaWVzID0gc291cmNlU3ViR2VvbWV0cmllcy5sZW5ndGg7XG5cdFx0XHRmb3IgKHZhciBzcmNJbmRleDpudW1iZXIgLyppbnQqLyA9IDA7IHNyY0luZGV4IDwgbnVtU3ViR2VvbWV0cmllczsgc3JjSW5kZXgrKykge1xuXHRcdFx0XHQvL2NyZWF0ZSBhIGRpZmZlcmVudCBwYXJ0aWNsZSBzdWJnZW9tZXRyeSBncm91cCBmb3IgZWFjaCBzb3VyY2Ugc3ViZ2VvbWV0cnkgaW4gYSBwYXJ0aWNsZS5cblx0XHRcdFx0aWYgKHN1YjJTdWJNYXAubGVuZ3RoIDw9IHNyY0luZGV4KSB7XG5cdFx0XHRcdFx0c3ViMlN1Yk1hcC5wdXNoKHN1Ykdlb21ldHJpZXMubGVuZ3RoKTtcblx0XHRcdFx0XHRpbmRpY2VzVmVjdG9yLnB1c2gobmV3IEFycmF5PG51bWJlcj4oKSAvKnVpbnQqLyk7XG5cdFx0XHRcdFx0cG9zaXRpb25zVmVjdG9yLnB1c2gobmV3IEFycmF5PG51bWJlcj4oKSk7XG5cdFx0XHRcdFx0bm9ybWFsc1ZlY3Rvci5wdXNoKG5ldyBBcnJheTxudW1iZXI+KCkpO1xuXHRcdFx0XHRcdHRhbmdlbnRzVmVjdG9yLnB1c2gobmV3IEFycmF5PG51bWJlcj4oKSk7XG5cdFx0XHRcdFx0dXZzVmVjdG9yLnB1c2gobmV3IEFycmF5PG51bWJlcj4oKSk7XG5cdFx0XHRcdFx0c3ViR2VvbWV0cmllcy5wdXNoKG5ldyBUcmlhbmdsZVN1Ykdlb21ldHJ5KHRydWUpKTtcblx0XHRcdFx0XHR2ZXJ0ZXhDb3VudGVycy5wdXNoKDApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0c291cmNlU3ViR2VvbWV0cnkgPSBzb3VyY2VTdWJHZW9tZXRyaWVzW3NyY0luZGV4XTtcblxuXHRcdFx0XHQvL2FkZCBhIG5ldyBwYXJ0aWNsZSBzdWJnZW9tZXRyeSBpZiB0aGlzIHNvdXJjZSBzdWJnZW9tZXRyeSB3aWxsIHRha2UgdXMgb3ZlciB0aGUgbWF4dmVydGV4IGxpbWl0XG5cdFx0XHRcdGlmIChzb3VyY2VTdWJHZW9tZXRyeS5udW1WZXJ0aWNlcyArIHZlcnRleENvdW50ZXJzW3N1YjJTdWJNYXBbc3JjSW5kZXhdXSA+IFBhcnRpY2xlR2VvbWV0cnlIZWxwZXIuTUFYX1ZFUlRFWCkge1xuXHRcdFx0XHRcdC8vdXBkYXRlIHN1Ym1hcCBhbmQgYWRkIG5ldyBzdWJnZW9tIHZlY3RvcnNcblx0XHRcdFx0XHRzdWIyU3ViTWFwW3NyY0luZGV4XSA9IHN1Ykdlb21ldHJpZXMubGVuZ3RoO1xuXHRcdFx0XHRcdGluZGljZXNWZWN0b3IucHVzaChuZXcgQXJyYXk8bnVtYmVyPigpIC8qdWludCovKTtcblx0XHRcdFx0XHRwb3NpdGlvbnNWZWN0b3IucHVzaChuZXcgQXJyYXk8bnVtYmVyPigpKTtcblx0XHRcdFx0XHRub3JtYWxzVmVjdG9yLnB1c2gobmV3IEFycmF5PG51bWJlcj4oKSk7XG5cdFx0XHRcdFx0dGFuZ2VudHNWZWN0b3IucHVzaChuZXcgQXJyYXk8bnVtYmVyPigpKTtcblx0XHRcdFx0XHR1dnNWZWN0b3IucHVzaChuZXcgQXJyYXk8bnVtYmVyPigpKTtcblx0XHRcdFx0XHRzdWJHZW9tZXRyaWVzLnB1c2gobmV3IFRyaWFuZ2xlU3ViR2VvbWV0cnkodHJ1ZSkpO1xuXHRcdFx0XHRcdHZlcnRleENvdW50ZXJzLnB1c2goMCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRqID0gc3ViMlN1Yk1hcFtzcmNJbmRleF07XG5cblx0XHRcdFx0Ly9zZWxlY3QgdGhlIGNvcnJlY3QgdmVjdG9yXG5cdFx0XHRcdGluZGljZXMgPSBpbmRpY2VzVmVjdG9yW2pdO1xuXHRcdFx0XHRwb3NpdGlvbnMgPSBwb3NpdGlvbnNWZWN0b3Jbal07XG5cdFx0XHRcdG5vcm1hbHMgPSBub3JtYWxzVmVjdG9yW2pdO1xuXHRcdFx0XHR0YW5nZW50cyA9IHRhbmdlbnRzVmVjdG9yW2pdO1xuXHRcdFx0XHR1dnMgPSB1dnNWZWN0b3Jbal07XG5cdFx0XHRcdHZlcnRleENvdW50ZXIgPSB2ZXJ0ZXhDb3VudGVyc1tqXTtcblx0XHRcdFx0c3ViR2VvbWV0cnkgPSBzdWJHZW9tZXRyaWVzW2pdO1xuXG5cdFx0XHRcdHZhciBwYXJ0aWNsZURhdGE6UGFydGljbGVEYXRhID0gbmV3IFBhcnRpY2xlRGF0YSgpO1xuXHRcdFx0XHRwYXJ0aWNsZURhdGEubnVtVmVydGljZXMgPSBzb3VyY2VTdWJHZW9tZXRyeS5udW1WZXJ0aWNlcztcblx0XHRcdFx0cGFydGljbGVEYXRhLnN0YXJ0VmVydGV4SW5kZXggPSB2ZXJ0ZXhDb3VudGVyO1xuXHRcdFx0XHRwYXJ0aWNsZURhdGEucGFydGljbGVJbmRleCA9IGk7XG5cdFx0XHRcdHBhcnRpY2xlRGF0YS5zdWJHZW9tZXRyeSA9IHN1Ykdlb21ldHJ5O1xuXHRcdFx0XHRwYXJ0aWNsZXMucHVzaChwYXJ0aWNsZURhdGEpO1xuXG5cdFx0XHRcdHZlcnRleENvdW50ZXJzW2pdICs9IHNvdXJjZVN1Ykdlb21ldHJ5Lm51bVZlcnRpY2VzO1xuXG5cdFx0XHRcdHZhciBrOm51bWJlciAvKmludCovO1xuXHRcdFx0XHR2YXIgdGVtcExlbjpudW1iZXIgLyppbnQqLztcblx0XHRcdFx0dmFyIGNvbXBhY3Q6VHJpYW5nbGVTdWJHZW9tZXRyeSA9IHNvdXJjZVN1Ykdlb21ldHJ5O1xuXHRcdFx0XHR2YXIgcHJvZHVjdDpudW1iZXIgLyp1aW50Ki87XG5cdFx0XHRcdHZhciBzb3VyY2VQb3NpdGlvbnM6QXJyYXk8bnVtYmVyPjtcblx0XHRcdFx0dmFyIHNvdXJjZU5vcm1hbHM6QXJyYXk8bnVtYmVyPjtcblx0XHRcdFx0dmFyIHNvdXJjZVRhbmdlbnRzOkFycmF5PG51bWJlcj47XG5cdFx0XHRcdHZhciBzb3VyY2VVVnM6QXJyYXk8bnVtYmVyPjtcblxuXHRcdFx0XHRpZiAoY29tcGFjdCkge1xuXHRcdFx0XHRcdHRlbXBMZW4gPSBjb21wYWN0Lm51bVZlcnRpY2VzO1xuXHRcdFx0XHRcdGNvbXBhY3QubnVtVHJpYW5nbGVzO1xuXHRcdFx0XHRcdHNvdXJjZVBvc2l0aW9ucyA9IGNvbXBhY3QucG9zaXRpb25zO1xuXHRcdFx0XHRcdHNvdXJjZU5vcm1hbHMgPSBjb21wYWN0LnZlcnRleE5vcm1hbHM7XG5cdFx0XHRcdFx0c291cmNlVGFuZ2VudHMgPSBjb21wYWN0LnZlcnRleFRhbmdlbnRzO1xuXHRcdFx0XHRcdHNvdXJjZVVWcyA9IGNvbXBhY3QudXZzO1xuXG5cdFx0XHRcdFx0aWYgKHRyYW5zZm9ybXMpIHtcblx0XHRcdFx0XHRcdHZhciBwYXJ0aWNsZUdlb21ldHJ5VHJhbnNmb3JtOlBhcnRpY2xlR2VvbWV0cnlUcmFuc2Zvcm0gPSB0cmFuc2Zvcm1zW2ldO1xuXHRcdFx0XHRcdFx0dmFyIHZlcnRleFRyYW5zZm9ybTpNYXRyaXgzRCA9IHBhcnRpY2xlR2VvbWV0cnlUcmFuc2Zvcm0udmVydGV4VHJhbnNmb3JtO1xuXHRcdFx0XHRcdFx0dmFyIGludlZlcnRleFRyYW5zZm9ybTpNYXRyaXgzRCA9IHBhcnRpY2xlR2VvbWV0cnlUcmFuc2Zvcm0uaW52VmVydGV4VHJhbnNmb3JtO1xuXHRcdFx0XHRcdFx0dmFyIFVWVHJhbnNmb3JtOk1hdHJpeCA9IHBhcnRpY2xlR2VvbWV0cnlUcmFuc2Zvcm0uVVZUcmFuc2Zvcm07XG5cblx0XHRcdFx0XHRcdGZvciAoayA9IDA7IGsgPCB0ZW1wTGVuOyBrKyspIHtcblx0XHRcdFx0XHRcdFx0Lypcblx0XHRcdFx0XHRcdFx0ICogMCAtIDI6IHZlcnRleCBwb3NpdGlvbiBYLCBZLCBaXG5cdFx0XHRcdFx0XHRcdCAqIDMgLSA1OiBub3JtYWwgWCwgWSwgWlxuXHRcdFx0XHRcdFx0XHQgKiA2IC0gODogdGFuZ2VudCBYLCBZLCBaXG5cdFx0XHRcdFx0XHRcdCAqIDkgLSAxMDogVSBWXG5cdFx0XHRcdFx0XHRcdCAqIDExIC0gMTI6IFNlY29uZGFyeSBVIFYqL1xuXHRcdFx0XHRcdFx0XHRwcm9kdWN0ID0gayozO1xuXHRcdFx0XHRcdFx0XHR0ZW1wVmVydGV4LnggPSBzb3VyY2VQb3NpdGlvbnNbcHJvZHVjdF07XG5cdFx0XHRcdFx0XHRcdHRlbXBWZXJ0ZXgueSA9IHNvdXJjZVBvc2l0aW9uc1twcm9kdWN0ICsgMV07XG5cdFx0XHRcdFx0XHRcdHRlbXBWZXJ0ZXgueiA9IHNvdXJjZVBvc2l0aW9uc1twcm9kdWN0ICsgMl07XG5cdFx0XHRcdFx0XHRcdHRlbXBOb3JtYWwueCA9IHNvdXJjZU5vcm1hbHNbcHJvZHVjdF07XG5cdFx0XHRcdFx0XHRcdHRlbXBOb3JtYWwueSA9IHNvdXJjZU5vcm1hbHNbcHJvZHVjdCArIDFdO1xuXHRcdFx0XHRcdFx0XHR0ZW1wTm9ybWFsLnogPSBzb3VyY2VOb3JtYWxzW3Byb2R1Y3QgKyAyXTtcblx0XHRcdFx0XHRcdFx0dGVtcFRhbmdlbnRzLnggPSBzb3VyY2VUYW5nZW50c1twcm9kdWN0XTtcblx0XHRcdFx0XHRcdFx0dGVtcFRhbmdlbnRzLnkgPSBzb3VyY2VUYW5nZW50c1twcm9kdWN0ICsgMV07XG5cdFx0XHRcdFx0XHRcdHRlbXBUYW5nZW50cy56ID0gc291cmNlVGFuZ2VudHNbcHJvZHVjdCArIDJdO1xuXHRcdFx0XHRcdFx0XHR0ZW1wVVYueCA9IHNvdXJjZVVWc1trKjJdO1xuXHRcdFx0XHRcdFx0XHR0ZW1wVVYueSA9IHNvdXJjZVVWc1trKjIgKyAxXTtcblx0XHRcdFx0XHRcdFx0aWYgKHZlcnRleFRyYW5zZm9ybSkge1xuXHRcdFx0XHRcdFx0XHRcdHRlbXBWZXJ0ZXggPSB2ZXJ0ZXhUcmFuc2Zvcm0udHJhbnNmb3JtVmVjdG9yKHRlbXBWZXJ0ZXgpO1xuXHRcdFx0XHRcdFx0XHRcdHRlbXBOb3JtYWwgPSBpbnZWZXJ0ZXhUcmFuc2Zvcm0uZGVsdGFUcmFuc2Zvcm1WZWN0b3IodGVtcE5vcm1hbCk7XG5cdFx0XHRcdFx0XHRcdFx0dGVtcFRhbmdlbnRzID0gaW52VmVydGV4VHJhbnNmb3JtLmRlbHRhVHJhbnNmb3JtVmVjdG9yKHRlbXBOb3JtYWwpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmIChVVlRyYW5zZm9ybSlcblx0XHRcdFx0XHRcdFx0XHR0ZW1wVVYgPSBVVlRyYW5zZm9ybS50cmFuc2Zvcm1Qb2ludCh0ZW1wVVYpO1xuXHRcdFx0XHRcdFx0XHQvL3RoaXMgaXMgZmFzdGVyIHRoYW4gdGhhdCBvbmx5IHB1c2ggb25lIGRhdGFcblx0XHRcdFx0XHRcdFx0c291cmNlUG9zaXRpb25zLnB1c2godGVtcFZlcnRleC54LCB0ZW1wVmVydGV4LnksIHRlbXBWZXJ0ZXgueik7XG5cdFx0XHRcdFx0XHRcdHNvdXJjZU5vcm1hbHMucHVzaCh0ZW1wTm9ybWFsLngsIHRlbXBOb3JtYWwueSwgdGVtcE5vcm1hbC56KTtcblx0XHRcdFx0XHRcdFx0c291cmNlVGFuZ2VudHMucHVzaCh0ZW1wVGFuZ2VudHMueCwgdGVtcFRhbmdlbnRzLnksIHRlbXBUYW5nZW50cy56KTtcblx0XHRcdFx0XHRcdFx0c291cmNlVVZzLnB1c2godGVtcFVWLngsIHRlbXBVVi55KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Zm9yIChrID0gMDsgayA8IHRlbXBMZW47IGsrKykge1xuXHRcdFx0XHRcdFx0XHRwcm9kdWN0ID0gayozO1xuXHRcdFx0XHRcdFx0XHQvL3RoaXMgaXMgZmFzdGVyIHRoYW4gdGhhdCBvbmx5IHB1c2ggb25lIGRhdGFcblx0XHRcdFx0XHRcdFx0cG9zaXRpb25zLnB1c2goc291cmNlUG9zaXRpb25zW3Byb2R1Y3RdLCBzb3VyY2VQb3NpdGlvbnNbcHJvZHVjdCArIDFdLCBzb3VyY2VQb3NpdGlvbnNbcHJvZHVjdCArIDJdKTtcblx0XHRcdFx0XHRcdFx0bm9ybWFscy5wdXNoKHNvdXJjZU5vcm1hbHNbcHJvZHVjdF0sIHNvdXJjZU5vcm1hbHNbcHJvZHVjdCArIDFdLCBzb3VyY2VOb3JtYWxzW3Byb2R1Y3QgKyAyXSk7XG5cdFx0XHRcdFx0XHRcdHRhbmdlbnRzLnB1c2goc291cmNlVGFuZ2VudHNbcHJvZHVjdF0sIHNvdXJjZVRhbmdlbnRzW3Byb2R1Y3QgKyAxXSwgc291cmNlVGFuZ2VudHNbcHJvZHVjdCArIDJdKTtcblx0XHRcdFx0XHRcdFx0dXZzLnB1c2goc291cmNlVVZzW2sqMl0sIHNvdXJjZVVWc1trKjIgKyAxXSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vVG9kb1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIHNvdXJjZUluZGljZXM6QXJyYXk8bnVtYmVyPiAvKnVpbnQqLyA9IHNvdXJjZVN1Ykdlb21ldHJ5LmluZGljZXM7XG5cdFx0XHRcdHRlbXBMZW4gPSBzb3VyY2VTdWJHZW9tZXRyeS5udW1UcmlhbmdsZXM7XG5cdFx0XHRcdGZvciAoayA9IDA7IGsgPCB0ZW1wTGVuOyBrKyspIHtcblx0XHRcdFx0XHRwcm9kdWN0ID0gayozO1xuXHRcdFx0XHRcdGluZGljZXMucHVzaChzb3VyY2VJbmRpY2VzW3Byb2R1Y3RdICsgdmVydGV4Q291bnRlciwgc291cmNlSW5kaWNlc1twcm9kdWN0ICsgMV0gKyB2ZXJ0ZXhDb3VudGVyLCBzb3VyY2VJbmRpY2VzW3Byb2R1Y3QgKyAyXSArIHZlcnRleENvdW50ZXIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dmFyIHBhcnRpY2xlR2VvbWV0cnk6UGFydGljbGVHZW9tZXRyeSA9IG5ldyBQYXJ0aWNsZUdlb21ldHJ5KCk7XG5cdFx0cGFydGljbGVHZW9tZXRyeS5wYXJ0aWNsZXMgPSBwYXJ0aWNsZXM7XG5cdFx0cGFydGljbGVHZW9tZXRyeS5udW1QYXJ0aWNsZXMgPSBudW1QYXJ0aWNsZXM7XG5cblx0XHRudW1QYXJ0aWNsZXMgPSBzdWJHZW9tZXRyaWVzLmxlbmd0aDtcblx0XHRmb3IgKGkgPSAwOyBpIDwgbnVtUGFydGljbGVzOyBpKyspIHtcblx0XHRcdHN1Ykdlb21ldHJ5ID0gc3ViR2VvbWV0cmllc1tpXTtcblx0XHRcdHN1Ykdlb21ldHJ5LmF1dG9EZXJpdmVOb3JtYWxzID0gZmFsc2U7XG5cdFx0XHRzdWJHZW9tZXRyeS5hdXRvRGVyaXZlVGFuZ2VudHMgPSBmYWxzZTtcblx0XHRcdHN1Ykdlb21ldHJ5LnVwZGF0ZUluZGljZXMoaW5kaWNlc1ZlY3RvcltpXSk7XG5cdFx0XHRzdWJHZW9tZXRyeS51cGRhdGVQb3NpdGlvbnMocG9zaXRpb25zVmVjdG9yW2ldKTtcblx0XHRcdHN1Ykdlb21ldHJ5LnVwZGF0ZVZlcnRleE5vcm1hbHMobm9ybWFsc1ZlY3RvcltpXSk7XG5cdFx0XHRzdWJHZW9tZXRyeS51cGRhdGVWZXJ0ZXhUYW5nZW50cyh0YW5nZW50c1ZlY3RvcltpXSk7XG5cdFx0XHRzdWJHZW9tZXRyeS51cGRhdGVVVnModXZzVmVjdG9yW2ldKTtcblx0XHRcdHBhcnRpY2xlR2VvbWV0cnkuYWRkU3ViR2VvbWV0cnkoc3ViR2VvbWV0cnkpO1xuXHRcdH1cblxuXHRcdHJldHVybiBwYXJ0aWNsZUdlb21ldHJ5O1xuXHR9XG59XG5cbmV4cG9ydCA9IFBhcnRpY2xlR2VvbWV0cnlIZWxwZXI7Il19