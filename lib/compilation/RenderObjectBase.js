var Event = require("awayjs-core/lib/events/Event");
var AssetType = require("awayjs-core/lib/library/AssetType");
/**
 *
 * @class away.pool.ScreenPasses
 */
var RenderObjectBase = (function () {
    function RenderObjectBase(pool, renderObjectOwner, renderableClass, stage) {
        var _this = this;
        this._forceSeparateMVP = false;
        this._invalidAnimation = true;
        this._invalidRenderObject = true;
        this._shaderObjects = new Array();
        this._pRequiresBlending = false;
        this._pool = pool;
        this.renderObjectId = renderObjectOwner.id;
        this._renderObjectOwner = renderObjectOwner;
        this._renderableClass = renderableClass;
        this._stage = stage;
        this._onShaderChangeDelegate = function (event) { return _this.onShaderChange(event); };
    }
    Object.defineProperty(RenderObjectBase.prototype, "requiresBlending", {
        /**
         * Indicates whether or not the renderable requires alpha blending during rendering.
         */
        get: function () {
            return this._pRequiresBlending;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RenderObjectBase.prototype, "renderOrderId", {
        get: function () {
            if (this._invalidAnimation)
                this._updateAnimation();
            return this._renderOrderId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RenderObjectBase.prototype, "shaderObjects", {
        get: function () {
            if (this._invalidAnimation)
                this._updateAnimation();
            return this._shaderObjects;
        },
        enumerable: true,
        configurable: true
    });
    RenderObjectBase.prototype._iIncludeDependencies = function (shaderObject) {
        if (this._renderObjectOwner.assetType = AssetType.MATERIAL) {
            var material = this._renderObjectOwner;
            shaderObject.useAlphaPremultiplied = material.alphaPremultiplied;
            shaderObject.useBothSides = material.bothSides;
            shaderObject.repeatTextures = material.repeat;
            shaderObject.usesUVTransform = material.animateUVs;
            shaderObject.texture = material.texture;
            shaderObject.color = material.color;
        }
        if (this._forceSeparateMVP)
            shaderObject.globalPosDependencies++;
        shaderObject.outputsNormals = this._pOutputsNormals(shaderObject);
        shaderObject.outputsTangentNormals = shaderObject.outputsNormals && this._pOutputsTangentNormals(shaderObject);
        shaderObject.usesTangentSpace = shaderObject.outputsTangentNormals && this._pUsesTangentSpace(shaderObject);
        if (!shaderObject.usesTangentSpace && shaderObject.viewDirDependencies > 0)
            shaderObject.globalPosDependencies++;
    };
    /**
     * Renders the current pass. Before calling renderPass, activatePass needs to be called with the same index.
     * @param pass The pass used to render the renderable.
     * @param renderable The IRenderable object to draw.
     * @param stage The Stage object used for rendering.
     * @param entityCollector The EntityCollector object that contains the visible scene data.
     * @param viewProjection The view-projection matrix used to project to the screen. This is not the same as
     * camera.viewProjection as it includes the scaling factors when rendering to textures.
     *
     * @internal
     */
    RenderObjectBase.prototype._iRender = function (renderable, shader, camera, viewProjection) {
        if (this._renderObjectOwner.lightPicker)
            this._renderObjectOwner.lightPicker.collectLights(renderable);
        shader._iRender(renderable, camera, viewProjection);
    };
    /**
     *
     */
    RenderObjectBase.prototype.dispose = function () {
        this._pClearScreenShaders();
        var len = this._shaderObjects.length;
        for (var i = 0; i < len; i++)
            this._shaderObjects[i].dispose();
        this._shaderObjects = null;
        this._pool.disposeItem(this._renderObjectOwner);
    };
    /**
     *
     */
    RenderObjectBase.prototype.invalidateRenderObject = function () {
        this._invalidRenderObject = true;
        this._invalidAnimation = true;
    };
    /**
     *
     */
    RenderObjectBase.prototype.invalidateProperties = function () {
        var len = this._shaderObjects.length;
        for (var i = 0; i < len; i++)
            this._shaderObjects[i].invalidateShader();
        this._invalidAnimation = true;
    };
    /**
     *
     */
    RenderObjectBase.prototype.invalidateAnimation = function () {
        this._invalidAnimation = true;
    };
    /**
     *
     * @param renderObjectOwner
     */
    RenderObjectBase.prototype._updateAnimation = function () {
        if (this._invalidRenderObject)
            this._pUpdateRenderObject();
        this._invalidAnimation = false;
        var enabledGPUAnimation = this._getEnabledGPUAnimation();
        var renderOrderId = 0;
        var mult = 1;
        var shaderObject;
        var len = this._shaderObjects.length;
        for (var i = 0; i < len; i++) {
            shaderObject = this._shaderObjects[i];
            if (shaderObject.usesAnimation != enabledGPUAnimation) {
                shaderObject.usesAnimation = enabledGPUAnimation;
                shaderObject.invalidateProgram();
            }
            renderOrderId += shaderObject.programData.id * mult;
            mult *= 1000;
        }
        this._renderOrderId = renderOrderId;
    };
    /**
     * Performs any processing that needs to occur before any of its passes are used.
     *
     * @private
     */
    RenderObjectBase.prototype._pUpdateRenderObject = function () {
        this._invalidRenderObject = false;
        //overrride to update shader object properties
    };
    /**
     * Removes a pass from the renderObjectOwner.
     * @param pass The pass to be removed.
     */
    RenderObjectBase.prototype._pRemoveScreenShader = function (shader) {
        shader.removeEventListener(Event.CHANGE, this._onShaderChangeDelegate);
        this._shaderObjects.splice(this._shaderObjects.indexOf(shader), 1);
    };
    /**
     * Removes all passes from the renderObjectOwner
     */
    RenderObjectBase.prototype._pClearScreenShaders = function () {
        var len = this._shaderObjects.length;
        for (var i = 0; i < len; ++i)
            this._shaderObjects[i].removeEventListener(Event.CHANGE, this._onShaderChangeDelegate);
        this._shaderObjects.length = 0;
    };
    /**
     * Adds a pass to the renderObjectOwner
     * @param pass
     */
    RenderObjectBase.prototype._pAddScreenShader = function (shader) {
        this._shaderObjects.push(shader);
        shader.addEventListener(Event.CHANGE, this._onShaderChangeDelegate);
    };
    /**
     * Sets the render state for a pass that is independent of the rendered object. This needs to be called before
     * calling renderPass. Before activating a pass, the previously used pass needs to be deactivated.
     * @param pass The pass data to activate.
     * @param stage The Stage object which is currently used for rendering.
     * @param camera The camera from which the scene is viewed.
     * @private
     */
    RenderObjectBase.prototype._iActivate = function (shader, camera) {
        shader._iActivate(camera);
    };
    /**
     * Clears the render state for a pass. This needs to be called before activating another pass.
     * @param pass The pass to deactivate.
     * @param stage The Stage used for rendering
     *
     * @internal
     */
    RenderObjectBase.prototype._iDeactivate = function (shader) {
        shader._iDeactivate();
    };
    RenderObjectBase.prototype._iInitConstantData = function (shaderObject) {
    };
    RenderObjectBase.prototype._iGetPreLightingVertexCode = function (shaderObject, registerCache, sharedRegisters) {
        return "";
    };
    RenderObjectBase.prototype._iGetPreLightingFragmentCode = function (shaderObject, registerCache, sharedRegisters) {
        return "";
    };
    RenderObjectBase.prototype._iGetVertexCode = function (shaderObject, registerCache, sharedRegisters) {
        return "";
    };
    RenderObjectBase.prototype._iGetFragmentCode = function (shaderObject, registerCache, sharedRegisters) {
        return "";
    };
    RenderObjectBase.prototype._iGetNormalVertexCode = function (shaderObject, registerCache, sharedRegisters) {
        return "";
    };
    RenderObjectBase.prototype._iGetNormalFragmentCode = function (shaderObject, registerCache, sharedRegisters) {
        return "";
    };
    /**
     * Indicates whether or not normals are calculated at all.
     */
    RenderObjectBase.prototype._pOutputsNormals = function (shaderObject) {
        return false;
    };
    /**
     * Indicates whether or not normals are calculated in tangent space.
     */
    RenderObjectBase.prototype._pOutputsTangentNormals = function (shaderObject) {
        return false;
    };
    /**
     * Indicates whether or not normals are allowed in tangent space. This is only the case if no object-space
     * dependencies exist.
     */
    RenderObjectBase.prototype._pUsesTangentSpace = function (shaderObject) {
        return false;
    };
    /**
     * Listener for when a pass's shader code changes. It recalculates the render order id.
     */
    RenderObjectBase.prototype.onShaderChange = function (event) {
        this.invalidateAnimation();
    };
    /**
     * test if animation will be able to run on gpu BEFORE compiling materials
     * test if the shader objects supports animating the animation set in the vertex shader
     * if any object using this material fails to support accelerated animations for any of the shader objects,
     * we should do everything on cpu (otherwise we have the cost of both gpu + cpu animations)
     */
    RenderObjectBase.prototype._getEnabledGPUAnimation = function () {
        if (this._renderObjectOwner.animationSet) {
            this._renderObjectOwner.animationSet.resetGPUCompatibility();
            var owners = this._renderObjectOwner.iOwners;
            var numOwners = owners.length;
            var len = this._shaderObjects.length;
            for (var i = 0; i < len; i++)
                for (var j = 0; j < numOwners; j++)
                    if (owners[j].animator)
                        owners[j].animator.testGPUCompatibility(this._shaderObjects[i]);
            return !this._renderObjectOwner.animationSet.usesCPU;
        }
        return false;
    };
    return RenderObjectBase;
})();
module.exports = RenderObjectBase;

//# sourceMappingURL=data:application/json;base64,