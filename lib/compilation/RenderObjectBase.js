var Event = require("awayjs-core/lib/events/Event");
var MaterialBase = require("awayjs-display/lib/materials/MaterialBase");
/**
 *
 * @class away.pool.ScreenPasses
 */
var RenderObjectBase = (function () {
    function RenderObjectBase(pool, renderObjectOwner, renderableClass, stage) {
        var _this = this;
        this._forceSeparateMVP = false;
        this._invalidAnimation = true;
        this._invalidRenderObject = true;
        this._passes = new Array();
        this._pRequiresBlending = false;
        this._pool = pool;
        this.renderObjectId = renderObjectOwner.id;
        this._renderObjectOwner = renderObjectOwner;
        this._renderableClass = renderableClass;
        this._stage = stage;
        this._onPassChangeDelegate = function (event) { return _this.onPassChange(event); };
    }
    Object.defineProperty(RenderObjectBase.prototype, "requiresBlending", {
        /**
         * Indicates whether or not the renderable requires alpha blending during rendering.
         */
        get: function () {
            return this._pRequiresBlending;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RenderObjectBase.prototype, "renderOrderId", {
        get: function () {
            if (this._invalidAnimation)
                this._updateAnimation();
            return this._renderOrderId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RenderObjectBase.prototype, "passes", {
        get: function () {
            if (this._invalidAnimation)
                this._updateAnimation();
            return this._passes;
        },
        enumerable: true,
        configurable: true
    });
    RenderObjectBase.prototype._iIncludeDependencies = function (shaderObject) {
        this._renderableClass._iIncludeDependencies(shaderObject);
        shaderObject.alphaThreshold = this._renderObjectOwner.alphaThreshold;
        shaderObject.useMipmapping = this._renderObjectOwner.mipmap;
        shaderObject.useSmoothTextures = this._renderObjectOwner.smooth;
        if (this._renderObjectOwner.isAsset(MaterialBase)) {
            var material = this._renderObjectOwner;
            shaderObject.useAlphaPremultiplied = material.alphaPremultiplied;
            shaderObject.useBothSides = material.bothSides;
            shaderObject.repeatTextures = material.repeat;
            shaderObject.usesUVTransform = material.animateUVs;
            shaderObject.texture = material.texture;
            shaderObject.color = material.color;
        }
    };
    /**
     *
     */
    RenderObjectBase.prototype.dispose = function () {
        this._pClearScreenPasses();
        var len = this._passes.length;
        for (var i = 0; i < len; i++)
            this._passes[i].dispose();
        this._passes = null;
        this._pool.disposeItem(this._renderObjectOwner);
    };
    /**
     *
     */
    RenderObjectBase.prototype.invalidateRenderObject = function () {
        this._invalidRenderObject = true;
        this._invalidAnimation = true;
    };
    /**
     *
     */
    RenderObjectBase.prototype.invalidatePasses = function () {
        var len = this._passes.length;
        for (var i = 0; i < len; i++)
            this._passes[i].invalidatePass();
        this._invalidAnimation = true;
    };
    /**
     *
     */
    RenderObjectBase.prototype.invalidateAnimation = function () {
        this._invalidAnimation = true;
    };
    /**
     *
     * @param renderObjectOwner
     */
    RenderObjectBase.prototype._updateAnimation = function () {
        if (this._invalidRenderObject)
            this._pUpdateRenderObject();
        this._invalidAnimation = false;
        var enabledGPUAnimation = this._getEnabledGPUAnimation();
        var renderOrderId = 0;
        var mult = 1;
        var shaderObject;
        var len = this._passes.length;
        for (var i = 0; i < len; i++) {
            shaderObject = this._passes[i].shader;
            if (shaderObject.usesAnimation != enabledGPUAnimation) {
                shaderObject.usesAnimation = enabledGPUAnimation;
                shaderObject.invalidateProgram();
            }
            renderOrderId += shaderObject.programData.id * mult;
            mult *= 1000;
        }
        this._renderOrderId = renderOrderId;
    };
    /**
     * Performs any processing that needs to occur before any of its passes are used.
     *
     * @private
     */
    RenderObjectBase.prototype._pUpdateRenderObject = function () {
        this._invalidRenderObject = false;
        //overrride to update shader object properties
    };
    /**
     * Removes a pass from the renderObjectOwner.
     * @param pass The pass to be removed.
     */
    RenderObjectBase.prototype._pRemoveScreenPass = function (pass) {
        pass.removeEventListener(Event.CHANGE, this._onPassChangeDelegate);
        this._passes.splice(this._passes.indexOf(pass), 1);
    };
    /**
     * Removes all passes from the renderObjectOwner
     */
    RenderObjectBase.prototype._pClearScreenPasses = function () {
        var len = this._passes.length;
        for (var i = 0; i < len; ++i)
            this._passes[i].removeEventListener(Event.CHANGE, this._onPassChangeDelegate);
        this._passes.length = 0;
    };
    /**
     * Adds a pass to the renderObjectOwner
     * @param pass
     */
    RenderObjectBase.prototype._pAddScreenPass = function (pass) {
        this._passes.push(pass);
        pass.addEventListener(Event.CHANGE, this._onPassChangeDelegate);
    };
    /**
     * Listener for when a pass's shader code changes. It recalculates the render order id.
     */
    RenderObjectBase.prototype.onPassChange = function (event) {
        this.invalidateAnimation();
    };
    /**
     * test if animation will be able to run on gpu BEFORE compiling materials
     * test if the shader objects supports animating the animation set in the vertex shader
     * if any object using this material fails to support accelerated animations for any of the shader objects,
     * we should do everything on cpu (otherwise we have the cost of both gpu + cpu animations)
     */
    RenderObjectBase.prototype._getEnabledGPUAnimation = function () {
        if (this._renderObjectOwner.animationSet) {
            this._renderObjectOwner.animationSet.resetGPUCompatibility();
            var owners = this._renderObjectOwner.iOwners;
            var numOwners = owners.length;
            var len = this._passes.length;
            for (var i = 0; i < len; i++)
                for (var j = 0; j < numOwners; j++)
                    if (owners[j].animator)
                        owners[j].animator.testGPUCompatibility(this._passes[i].shader);
            return !this._renderObjectOwner.animationSet.usesCPU;
        }
        return false;
    };
    return RenderObjectBase;
})();
module.exports = RenderObjectBase;

//# sourceMappingURL=data:application/json;base64,