var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var BlendMode = require("awayjs-core/lib/base/BlendMode");
var RenderObjectBase = require("awayjs-renderergl/lib/compilation/RenderObjectBase");
var SkyboxPass = require("awayjs-renderergl/lib/passes/SkyboxPass");
/**
 * SkyboxRenderObject forms an abstract base class for the default shaded materials provided by Stage,
 * using material methods to define their appearance.
 */
var SkyboxRenderObject = (function (_super) {
    __extends(SkyboxRenderObject, _super);
    function SkyboxRenderObject(pool, renderObjectOwner, renderableClass, stage) {
        _super.call(this, pool, renderObjectOwner, renderableClass, stage);
        this._screenPass = new SkyboxPass(this, renderObjectOwner, renderableClass, this._stage);
        this._pAddScreenPass(this._screenPass);
    }
    /**
     * @inheritDoc
     */
    SkyboxRenderObject.prototype._pUpdateRenderObject = function () {
        _super.prototype._pUpdateRenderObject.call(this);
        this._pRequiresBlending = (this._renderObjectOwner.blendMode != BlendMode.NORMAL);
        this._screenPass.setBlendMode((this._renderObjectOwner.blendMode == BlendMode.NORMAL && this._pRequiresBlending) ? BlendMode.LAYER : this._renderObjectOwner.blendMode);
    };
    /**
     *
     */
    SkyboxRenderObject.id = "skybox";
    return SkyboxRenderObject;
})(RenderObjectBase);
module.exports = SkyboxRenderObject;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9Ta3lib3hSZW5kZXJPYmplY3QudHMiXSwibmFtZXMiOlsiU2t5Ym94UmVuZGVyT2JqZWN0IiwiU2t5Ym94UmVuZGVyT2JqZWN0LmNvbnN0cnVjdG9yIiwiU2t5Ym94UmVuZGVyT2JqZWN0Ll9wVXBkYXRlUmVuZGVyT2JqZWN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFPLFNBQVMsV0FBZSxnQ0FBZ0MsQ0FBQyxDQUFDO0FBS2pFLElBQU8sZ0JBQWdCLFdBQWMsb0RBQW9ELENBQUMsQ0FBQztBQUczRixJQUFPLFVBQVUsV0FBZSx5Q0FBeUMsQ0FBQyxDQUFDO0FBRTNFLEFBSUE7OztHQURHO0lBQ0csa0JBQWtCO0lBQVNBLFVBQTNCQSxrQkFBa0JBLFVBQXlCQTtJQVNoREEsU0FUS0Esa0JBQWtCQSxDQVNYQSxJQUFxQkEsRUFBRUEsaUJBQW9DQSxFQUFFQSxlQUFnQ0EsRUFBRUEsS0FBV0E7UUFFckhDLGtCQUFNQSxJQUFJQSxFQUFFQSxpQkFBaUJBLEVBQUVBLGVBQWVBLEVBQUVBLEtBQUtBLENBQUNBLENBQUNBO1FBRXZEQSxJQUFJQSxDQUFDQSxXQUFXQSxHQUFHQSxJQUFJQSxVQUFVQSxDQUFDQSxJQUFJQSxFQUFFQSxpQkFBaUJBLEVBQUVBLGVBQWVBLEVBQUVBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO1FBRXpGQSxJQUFJQSxDQUFDQSxlQUFlQSxDQUFDQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQTtJQUN4Q0EsQ0FBQ0E7SUFFREQ7O09BRUdBO0lBQ0lBLGlEQUFvQkEsR0FBM0JBO1FBRUNFLGdCQUFLQSxDQUFDQSxvQkFBb0JBLFdBQUVBLENBQUNBO1FBRTdCQSxJQUFJQSxDQUFDQSxrQkFBa0JBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsU0FBU0EsSUFBSUEsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7UUFFbEZBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsU0FBU0EsSUFBSUEsU0FBU0EsQ0FBQ0EsTUFBTUEsSUFBSUEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxHQUFFQSxTQUFTQSxDQUFDQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQSxrQkFBa0JBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBO0lBQ3hLQSxDQUFDQTtJQTFCREY7O09BRUdBO0lBQ1dBLHFCQUFFQSxHQUFVQSxRQUFRQSxDQUFDQTtJQXdCcENBLHlCQUFDQTtBQUFEQSxDQTdCQSxBQTZCQ0EsRUE3QmdDLGdCQUFnQixFQTZCaEQ7QUFFRCxBQUE0QixpQkFBbkIsa0JBQWtCLENBQUMiLCJmaWxlIjoiY29tcGlsYXRpb24vU2t5Ym94UmVuZGVyT2JqZWN0LmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCbGVuZE1vZGVcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2Jhc2UvQmxlbmRNb2RlXCIpO1xyXG5pbXBvcnQgSVJlbmRlck9iamVjdE93bmVyXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2Jhc2UvSVJlbmRlck9iamVjdE93bmVyXCIpO1xyXG5cclxuaW1wb3J0IFN0YWdlXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvU3RhZ2VcIik7XHJcblxyXG5pbXBvcnQgUmVuZGVyT2JqZWN0QmFzZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2NvbXBpbGF0aW9uL1JlbmRlck9iamVjdEJhc2VcIik7XHJcbmltcG9ydCBSZW5kZXJPYmplY3RQb29sXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vUmVuZGVyT2JqZWN0UG9vbFwiKTtcclxuaW1wb3J0IElSZW5kZXJhYmxlQ2xhc3NcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9wb29sL0lSZW5kZXJhYmxlQ2xhc3NcIik7XHJcbmltcG9ydCBTa3lib3hQYXNzXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9wYXNzZXMvU2t5Ym94UGFzc1wiKTtcclxuXHJcbi8qKlxyXG4gKiBTa3lib3hSZW5kZXJPYmplY3QgZm9ybXMgYW4gYWJzdHJhY3QgYmFzZSBjbGFzcyBmb3IgdGhlIGRlZmF1bHQgc2hhZGVkIG1hdGVyaWFscyBwcm92aWRlZCBieSBTdGFnZSxcclxuICogdXNpbmcgbWF0ZXJpYWwgbWV0aG9kcyB0byBkZWZpbmUgdGhlaXIgYXBwZWFyYW5jZS5cclxuICovXHJcbmNsYXNzIFNreWJveFJlbmRlck9iamVjdCBleHRlbmRzIFJlbmRlck9iamVjdEJhc2Vcclxue1xyXG5cdC8qKlxyXG5cdCAqXHJcblx0ICovXHJcblx0cHVibGljIHN0YXRpYyBpZDpzdHJpbmcgPSBcInNreWJveFwiO1xyXG5cclxuXHRwcml2YXRlIF9zY3JlZW5QYXNzOlNreWJveFBhc3M7XHJcblxyXG5cdGNvbnN0cnVjdG9yKHBvb2w6UmVuZGVyT2JqZWN0UG9vbCwgcmVuZGVyT2JqZWN0T3duZXI6SVJlbmRlck9iamVjdE93bmVyLCByZW5kZXJhYmxlQ2xhc3M6SVJlbmRlcmFibGVDbGFzcywgc3RhZ2U6U3RhZ2UpXHJcblx0e1xyXG5cdFx0c3VwZXIocG9vbCwgcmVuZGVyT2JqZWN0T3duZXIsIHJlbmRlcmFibGVDbGFzcywgc3RhZ2UpO1xyXG5cclxuXHRcdHRoaXMuX3NjcmVlblBhc3MgPSBuZXcgU2t5Ym94UGFzcyh0aGlzLCByZW5kZXJPYmplY3RPd25lciwgcmVuZGVyYWJsZUNsYXNzLCB0aGlzLl9zdGFnZSk7XHJcblxyXG5cdFx0dGhpcy5fcEFkZFNjcmVlblBhc3ModGhpcy5fc2NyZWVuUGFzcyk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdERvY1xyXG5cdCAqL1xyXG5cdHB1YmxpYyBfcFVwZGF0ZVJlbmRlck9iamVjdCgpXHJcblx0e1xyXG5cdFx0c3VwZXIuX3BVcGRhdGVSZW5kZXJPYmplY3QoKTtcclxuXHJcblx0XHR0aGlzLl9wUmVxdWlyZXNCbGVuZGluZyA9ICh0aGlzLl9yZW5kZXJPYmplY3RPd25lci5ibGVuZE1vZGUgIT0gQmxlbmRNb2RlLk5PUk1BTCk7XHJcblxyXG5cdFx0dGhpcy5fc2NyZWVuUGFzcy5zZXRCbGVuZE1vZGUoKHRoaXMuX3JlbmRlck9iamVjdE93bmVyLmJsZW5kTW9kZSA9PSBCbGVuZE1vZGUuTk9STUFMICYmIHRoaXMuX3BSZXF1aXJlc0JsZW5kaW5nKT8gQmxlbmRNb2RlLkxBWUVSIDogdGhpcy5fcmVuZGVyT2JqZWN0T3duZXIuYmxlbmRNb2RlKTtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCA9IFNreWJveFJlbmRlck9iamVjdDsiXX0=