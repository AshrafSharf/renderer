var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var BlendMode = require("awayjs-display/lib/base/BlendMode");
var ContextGLCompareMode = require("awayjs-stagegl/lib/base/ContextGLCompareMode");
var ContextGLMipFilter = require("awayjs-stagegl/lib/base/ContextGLMipFilter");
var ContextGLTextureFilter = require("awayjs-stagegl/lib/base/ContextGLTextureFilter");
var ContextGLWrapMode = require("awayjs-stagegl/lib/base/ContextGLWrapMode");
var RenderObjectBase = require("awayjs-renderergl/lib/compilation/RenderObjectBase");
var ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
var ShaderCompilerHelper = require("awayjs-renderergl/lib/utils/ShaderCompilerHelper");
/**
 * SkyboxRenderObject forms an abstract base class for the default shaded materials provided by Stage,
 * using material methods to define their appearance.
 */
var SkyboxRenderObject = (function (_super) {
    __extends(SkyboxRenderObject, _super);
    function SkyboxRenderObject(pool, renderObjectOwner, renderableClass, stage) {
        _super.call(this, pool, renderObjectOwner, renderableClass, stage);
        this._alphaBlending = false;
        this._alpha = 1;
        this._depthCompareMode = ContextGLCompareMode.LESS_EQUAL;
        this._skybox = renderObjectOwner;
        this._screenShader = new ShaderObjectBase(renderObjectOwner, renderableClass, this, this._stage);
        this._pAddScreenShader(this._screenShader);
    }
    /**
    * @inheritDoc
    */
    SkyboxRenderObject.prototype._iGetFragmentCode = function (shaderObject, registerCache, sharedRegisters) {
        //var cubeMapReg:ShaderRegisterElement = registerCache.getFreeTextureReg();
        //this._texturesIndex = cubeMapReg.index;
        //ShaderCompilerHelper.getTexCubeSampleCode(sharedRegisters.shadedTarget, cubeMapReg, this._cubeTexture, shaderObject.useSmoothTextures, shaderObject.useMipmapping);
        var mip = ",mipnone";
        if (this._skybox.cubeMap.hasMipmaps)
            mip = ",miplinear";
        return "tex ft0, v0, fs0 <cube," + ShaderCompilerHelper.getFormatStringForTexture(this._skybox.cubeMap) + "linear,clamp" + mip + ">\n";
    };
    /**
     * @inheritDoc
     */
    SkyboxRenderObject.prototype._iActivate = function (shader, camera) {
        _super.prototype._iActivate.call(this, shader, camera);
        var context = this._stage.context;
        context.setSamplerStateAt(0, ContextGLWrapMode.CLAMP, ContextGLTextureFilter.LINEAR, this._skybox.cubeMap.hasMipmaps ? ContextGLMipFilter.MIPLINEAR : ContextGLMipFilter.MIPNONE);
        context.setDepthTest(false, ContextGLCompareMode.LESS);
        this._stage.activateCubeTexture(0, this._skybox.cubeMap);
    };
    /**
     * @inheritDoc
     */
    SkyboxRenderObject.prototype._pUpdateRenderObject = function () {
        this.setBlendAndCompareModes();
        this._pClearScreenShaders();
        this._pAddScreenShader(this._screenShader);
    };
    /**
     * Sets up the various blending modes for all screen passes, based on whether or not there are previous passes.
     */
    SkyboxRenderObject.prototype.setBlendAndCompareModes = function () {
        this._pRequiresBlending = (this._renderObjectOwner.blendMode != BlendMode.NORMAL || this._alphaBlending || this._alpha < 1);
        //this._screenShader.depthCompareMode = this._depthCompareMode;
        //this._screenShader.preserveAlpha = this._pRequiresBlending;
        this._screenShader.setBlendMode((this._renderObjectOwner.blendMode == BlendMode.NORMAL && this._pRequiresBlending) ? BlendMode.LAYER : this._renderObjectOwner.blendMode);
        //this._screenShader.forceSeparateMVP = false;
    };
    /**
     *
     */
    SkyboxRenderObject.id = "skybox";
    return SkyboxRenderObject;
})(RenderObjectBase);
module.exports = SkyboxRenderObject;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9za3lib3hyZW5kZXJvYmplY3QudHMiXSwibmFtZXMiOlsiU2t5Ym94UmVuZGVyT2JqZWN0IiwiU2t5Ym94UmVuZGVyT2JqZWN0LmNvbnN0cnVjdG9yIiwiU2t5Ym94UmVuZGVyT2JqZWN0Ll9pR2V0RnJhZ21lbnRDb2RlIiwiU2t5Ym94UmVuZGVyT2JqZWN0Ll9pQWN0aXZhdGUiLCJTa3lib3hSZW5kZXJPYmplY3QuX3BVcGRhdGVSZW5kZXJPYmplY3QiLCJTa3lib3hSZW5kZXJPYmplY3Quc2V0QmxlbmRBbmRDb21wYXJlTW9kZXMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUtBLElBQU8sU0FBUyxXQUFlLG1DQUFtQyxDQUFDLENBQUM7QUFLcEUsSUFBTyxvQkFBb0IsV0FBYSw4Q0FBOEMsQ0FBQyxDQUFDO0FBRXhGLElBQU8sa0JBQWtCLFdBQWEsNENBQTRDLENBQUMsQ0FBQztBQUNwRixJQUFPLHNCQUFzQixXQUFZLGdEQUFnRCxDQUFDLENBQUM7QUFDM0YsSUFBTyxpQkFBaUIsV0FBYSwyQ0FBMkMsQ0FBQyxDQUFDO0FBS2xGLElBQU8sZ0JBQWdCLFdBQWMsb0RBQW9ELENBQUMsQ0FBQztBQUUzRixJQUFPLGdCQUFnQixXQUFjLG9EQUFvRCxDQUFDLENBQUM7QUFJM0YsSUFBTyxvQkFBb0IsV0FBYSxrREFBa0QsQ0FBQyxDQUFDO0FBRzVGLEFBSUE7OztHQURHO0lBQ0csa0JBQWtCO0lBQVNBLFVBQTNCQSxrQkFBa0JBLFVBQXlCQTtJQW1CaERBLFNBbkJLQSxrQkFBa0JBLENBbUJYQSxJQUFxQkEsRUFBRUEsaUJBQW9DQSxFQUFFQSxlQUFnQ0EsRUFBRUEsS0FBV0E7UUFFckhDLGtCQUFNQSxJQUFJQSxFQUFFQSxpQkFBaUJBLEVBQUVBLGVBQWVBLEVBQUVBLEtBQUtBLENBQUNBLENBQUNBO1FBUGhEQSxtQkFBY0EsR0FBV0EsS0FBS0EsQ0FBQ0E7UUFDL0JBLFdBQU1BLEdBQVVBLENBQUNBLENBQUNBO1FBRWxCQSxzQkFBaUJBLEdBQVVBLG9CQUFvQkEsQ0FBQ0EsVUFBVUEsQ0FBQ0E7UUFNbEVBLElBQUlBLENBQUNBLE9BQU9BLEdBQVlBLGlCQUFpQkEsQ0FBQ0E7UUFDMUNBLElBQUlBLENBQUNBLGFBQWFBLEdBQUdBLElBQUlBLGdCQUFnQkEsQ0FBQ0EsaUJBQWlCQSxFQUFFQSxlQUFlQSxFQUFFQSxJQUFJQSxFQUFFQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUVqR0EsSUFBSUEsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxJQUFJQSxDQUFDQSxhQUFhQSxDQUFDQSxDQUFDQTtJQUM1Q0EsQ0FBQ0E7SUFHREQ7O01BRUVBO0lBQ0tBLDhDQUFpQkEsR0FBeEJBLFVBQXlCQSxZQUE2QkEsRUFBRUEsYUFBaUNBLEVBQUVBLGVBQWtDQTtRQUU1SEUsMkVBQTJFQTtRQUUzRUEsQUFJQUEseUNBSnlDQTtRQUV6Q0EscUtBQXFLQTtZQUVqS0EsR0FBR0EsR0FBVUEsVUFBVUEsQ0FBQ0E7UUFFNUJBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLFVBQVVBLENBQUNBO1lBQ25DQSxHQUFHQSxHQUFHQSxZQUFZQSxDQUFDQTtRQUVwQkEsTUFBTUEsQ0FBQ0EseUJBQXlCQSxHQUFHQSxvQkFBb0JBLENBQUNBLHlCQUF5QkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsR0FBR0EsY0FBY0EsR0FBR0EsR0FBR0EsR0FBR0EsS0FBS0EsQ0FBQ0E7SUFDeElBLENBQUNBO0lBRURGOztPQUVHQTtJQUNJQSx1Q0FBVUEsR0FBakJBLFVBQWtCQSxNQUF1QkEsRUFBRUEsTUFBYUE7UUFFdkRHLGdCQUFLQSxDQUFDQSxVQUFVQSxZQUFDQSxNQUFNQSxFQUFFQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUVqQ0EsSUFBSUEsT0FBT0EsR0FBY0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsT0FBT0EsQ0FBQ0E7UUFDN0NBLE9BQU9BLENBQUNBLGlCQUFpQkEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsaUJBQWlCQSxDQUFDQSxLQUFLQSxFQUFFQSxzQkFBc0JBLENBQUNBLE1BQU1BLEVBQUVBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLFVBQVVBLEdBQUVBLGtCQUFrQkEsQ0FBQ0EsU0FBU0EsR0FBR0Esa0JBQWtCQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtRQUNqTEEsT0FBT0EsQ0FBQ0EsWUFBWUEsQ0FBQ0EsS0FBS0EsRUFBRUEsb0JBQW9CQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUN2REEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsbUJBQW1CQSxDQUFDQSxDQUFDQSxFQUFFQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtJQUMxREEsQ0FBQ0E7SUFFREg7O09BRUdBO0lBQ0lBLGlEQUFvQkEsR0FBM0JBO1FBRUNJLElBQUlBLENBQUNBLHVCQUF1QkEsRUFBRUEsQ0FBQ0E7UUFFL0JBLElBQUlBLENBQUNBLG9CQUFvQkEsRUFBRUEsQ0FBQ0E7UUFFNUJBLElBQUlBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsQ0FBQ0E7SUFDNUNBLENBQUNBO0lBRURKOztPQUVHQTtJQUNLQSxvREFBdUJBLEdBQS9CQTtRQUVDSyxJQUFJQSxDQUFDQSxrQkFBa0JBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsU0FBU0EsSUFBSUEsU0FBU0EsQ0FBQ0EsTUFBTUEsSUFBSUEsSUFBSUEsQ0FBQ0EsY0FBY0EsSUFBSUEsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDNUhBLEFBRUFBLCtEQUYrREE7UUFDL0RBLDZEQUE2REE7UUFDN0RBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsU0FBU0EsSUFBSUEsU0FBU0EsQ0FBQ0EsTUFBTUEsSUFBSUEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxHQUFFQSxTQUFTQSxDQUFDQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQSxrQkFBa0JBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBO1FBQ3pLQSw4Q0FBOENBO0lBQy9DQSxDQUFDQTtJQWxGREw7O09BRUdBO0lBQ1dBLHFCQUFFQSxHQUFVQSxRQUFRQSxDQUFDQTtJQWdGcENBLHlCQUFDQTtBQUFEQSxDQXJGQSxBQXFGQ0EsRUFyRmdDLGdCQUFnQixFQXFGaEQ7QUFFRCxBQUE0QixpQkFBbkIsa0JBQWtCLENBQUMiLCJmaWxlIjoiY29tcGlsYXRpb24vU2t5Ym94UmVuZGVyT2JqZWN0LmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNYXRyaXhcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9NYXRyaXhcIik7XG5pbXBvcnQgTWF0cml4M0RcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9NYXRyaXgzRFwiKTtcbmltcG9ydCBNYXRyaXgzRFV0aWxzXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9NYXRyaXgzRFV0aWxzXCIpO1xuaW1wb3J0IFRleHR1cmUyREJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi90ZXh0dXJlcy9UZXh0dXJlMkRCYXNlXCIpO1xuXG5pbXBvcnQgQmxlbmRNb2RlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9iYXNlL0JsZW5kTW9kZVwiKTtcbmltcG9ydCBDYW1lcmFcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvZW50aXRpZXMvQ2FtZXJhXCIpO1xuaW1wb3J0IFNreWJveFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9lbnRpdGllcy9Ta3lib3hcIik7XG5pbXBvcnQgSVJlbmRlck9iamVjdE93bmVyXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2Jhc2UvSVJlbmRlck9iamVjdE93bmVyXCIpO1xuXG5pbXBvcnQgQ29udGV4dEdMQ29tcGFyZU1vZGVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYmFzZS9Db250ZXh0R0xDb21wYXJlTW9kZVwiKTtcbmltcG9ydCBDb250ZXh0R0xQcm9ncmFtVHlwZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL0NvbnRleHRHTFByb2dyYW1UeXBlXCIpO1xuaW1wb3J0IENvbnRleHRHTE1pcEZpbHRlclx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL0NvbnRleHRHTE1pcEZpbHRlclwiKTtcbmltcG9ydCBDb250ZXh0R0xUZXh0dXJlRmlsdGVyXHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL0NvbnRleHRHTFRleHR1cmVGaWx0ZXJcIik7XG5pbXBvcnQgQ29udGV4dEdMV3JhcE1vZGVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYmFzZS9Db250ZXh0R0xXcmFwTW9kZVwiKTtcbmltcG9ydCBJQ29udGV4dEdMXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL0lDb250ZXh0R0xcIik7XG5pbXBvcnQgU3RhZ2VcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYmFzZS9TdGFnZVwiKTtcblxuaW1wb3J0IFJlbmRlcmFibGVCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvcG9vbC9SZW5kZXJhYmxlQmFzZVwiKTtcbmltcG9ydCBSZW5kZXJPYmplY3RCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vUmVuZGVyT2JqZWN0QmFzZVwiKTtcbmltcG9ydCBSZW5kZXJPYmplY3RQb29sXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vUmVuZGVyT2JqZWN0UG9vbFwiKTtcbmltcG9ydCBTaGFkZXJPYmplY3RCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vU2hhZGVyT2JqZWN0QmFzZVwiKTtcbmltcG9ydCBTaGFkZXJSZWdpc3RlckNhY2hlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2NvbXBpbGF0aW9uL1NoYWRlclJlZ2lzdGVyQ2FjaGVcIik7XG5pbXBvcnQgU2hhZGVyUmVnaXN0ZXJEYXRhXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2NvbXBpbGF0aW9uL1NoYWRlclJlZ2lzdGVyRGF0YVwiKTtcbmltcG9ydCBTaGFkZXJSZWdpc3RlckVsZW1lbnRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2NvbXBpbGF0aW9uL1NoYWRlclJlZ2lzdGVyRWxlbWVudFwiKTtcbmltcG9ydCBTaGFkZXJDb21waWxlckhlbHBlclx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi91dGlscy9TaGFkZXJDb21waWxlckhlbHBlclwiKTtcbmltcG9ydCBJUmVuZGVyYWJsZUNsYXNzXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvcG9vbC9JUmVuZGVyYWJsZUNsYXNzXCIpO1xuXG4vKipcbiAqIFNreWJveFJlbmRlck9iamVjdCBmb3JtcyBhbiBhYnN0cmFjdCBiYXNlIGNsYXNzIGZvciB0aGUgZGVmYXVsdCBzaGFkZWQgbWF0ZXJpYWxzIHByb3ZpZGVkIGJ5IFN0YWdlLFxuICogdXNpbmcgbWF0ZXJpYWwgbWV0aG9kcyB0byBkZWZpbmUgdGhlaXIgYXBwZWFyYW5jZS5cbiAqL1xuY2xhc3MgU2t5Ym94UmVuZGVyT2JqZWN0IGV4dGVuZHMgUmVuZGVyT2JqZWN0QmFzZVxue1xuXHQvKipcblx0ICpcblx0ICovXG5cdHB1YmxpYyBzdGF0aWMgaWQ6c3RyaW5nID0gXCJza3lib3hcIjtcblxuXHRwdWJsaWMgX3NreWJveDpTa3lib3g7XG5cblx0cHJpdmF0ZSBfZnJhZ21lbnRDb25zdGFudHNJbmRleDpudW1iZXI7XG5cdHByaXZhdGUgX3RleHR1cmVzSW5kZXg6bnVtYmVyO1xuXG5cdHByaXZhdGUgX3NjcmVlblNoYWRlcjpTaGFkZXJPYmplY3RCYXNlO1xuXG5cdHByaXZhdGUgX2FscGhhQmxlbmRpbmc6Ym9vbGVhbiA9IGZhbHNlO1xuXHRwcml2YXRlIF9hbHBoYTpudW1iZXIgPSAxO1xuXG5cdHByaXZhdGUgX2RlcHRoQ29tcGFyZU1vZGU6c3RyaW5nID0gQ29udGV4dEdMQ29tcGFyZU1vZGUuTEVTU19FUVVBTDtcblxuXHRjb25zdHJ1Y3Rvcihwb29sOlJlbmRlck9iamVjdFBvb2wsIHJlbmRlck9iamVjdE93bmVyOklSZW5kZXJPYmplY3RPd25lciwgcmVuZGVyYWJsZUNsYXNzOklSZW5kZXJhYmxlQ2xhc3MsIHN0YWdlOlN0YWdlKVxuXHR7XG5cdFx0c3VwZXIocG9vbCwgcmVuZGVyT2JqZWN0T3duZXIsIHJlbmRlcmFibGVDbGFzcywgc3RhZ2UpO1xuXG5cdFx0dGhpcy5fc2t5Ym94ID0gPFNreWJveD4gcmVuZGVyT2JqZWN0T3duZXI7XG5cdFx0dGhpcy5fc2NyZWVuU2hhZGVyID0gbmV3IFNoYWRlck9iamVjdEJhc2UocmVuZGVyT2JqZWN0T3duZXIsIHJlbmRlcmFibGVDbGFzcywgdGhpcywgdGhpcy5fc3RhZ2UpO1xuXG5cdFx0dGhpcy5fcEFkZFNjcmVlblNoYWRlcih0aGlzLl9zY3JlZW5TaGFkZXIpO1xuXHR9XG5cblxuXHQvKipcblx0KiBAaW5oZXJpdERvY1xuXHQqL1xuXHRwdWJsaWMgX2lHZXRGcmFnbWVudENvZGUoc2hhZGVyT2JqZWN0OlNoYWRlck9iamVjdEJhc2UsIHJlZ2lzdGVyQ2FjaGU6U2hhZGVyUmVnaXN0ZXJDYWNoZSwgc2hhcmVkUmVnaXN0ZXJzOlNoYWRlclJlZ2lzdGVyRGF0YSk6c3RyaW5nXG5cdHtcblx0XHQvL3ZhciBjdWJlTWFwUmVnOlNoYWRlclJlZ2lzdGVyRWxlbWVudCA9IHJlZ2lzdGVyQ2FjaGUuZ2V0RnJlZVRleHR1cmVSZWcoKTtcblxuXHRcdC8vdGhpcy5fdGV4dHVyZXNJbmRleCA9IGN1YmVNYXBSZWcuaW5kZXg7XG5cblx0XHQvL1NoYWRlckNvbXBpbGVySGVscGVyLmdldFRleEN1YmVTYW1wbGVDb2RlKHNoYXJlZFJlZ2lzdGVycy5zaGFkZWRUYXJnZXQsIGN1YmVNYXBSZWcsIHRoaXMuX2N1YmVUZXh0dXJlLCBzaGFkZXJPYmplY3QudXNlU21vb3RoVGV4dHVyZXMsIHNoYWRlck9iamVjdC51c2VNaXBtYXBwaW5nKTtcblxuXHRcdHZhciBtaXA6c3RyaW5nID0gXCIsbWlwbm9uZVwiO1xuXG5cdFx0aWYgKHRoaXMuX3NreWJveC5jdWJlTWFwLmhhc01pcG1hcHMpXG5cdFx0XHRtaXAgPSBcIixtaXBsaW5lYXJcIjtcblxuXHRcdHJldHVybiBcInRleCBmdDAsIHYwLCBmczAgPGN1YmUsXCIgKyBTaGFkZXJDb21waWxlckhlbHBlci5nZXRGb3JtYXRTdHJpbmdGb3JUZXh0dXJlKHRoaXMuX3NreWJveC5jdWJlTWFwKSArIFwibGluZWFyLGNsYW1wXCIgKyBtaXAgKyBcIj5cXG5cIjtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIF9pQWN0aXZhdGUoc2hhZGVyOlNoYWRlck9iamVjdEJhc2UsIGNhbWVyYTpDYW1lcmEpXG5cdHtcblx0XHRzdXBlci5faUFjdGl2YXRlKHNoYWRlciwgY2FtZXJhKTtcblxuXHRcdHZhciBjb250ZXh0OklDb250ZXh0R0wgPSB0aGlzLl9zdGFnZS5jb250ZXh0O1xuXHRcdGNvbnRleHQuc2V0U2FtcGxlclN0YXRlQXQoMCwgQ29udGV4dEdMV3JhcE1vZGUuQ0xBTVAsIENvbnRleHRHTFRleHR1cmVGaWx0ZXIuTElORUFSLCB0aGlzLl9za3lib3guY3ViZU1hcC5oYXNNaXBtYXBzPyBDb250ZXh0R0xNaXBGaWx0ZXIuTUlQTElORUFSIDogQ29udGV4dEdMTWlwRmlsdGVyLk1JUE5PTkUpO1xuXHRcdGNvbnRleHQuc2V0RGVwdGhUZXN0KGZhbHNlLCBDb250ZXh0R0xDb21wYXJlTW9kZS5MRVNTKTtcblx0XHR0aGlzLl9zdGFnZS5hY3RpdmF0ZUN1YmVUZXh0dXJlKDAsIHRoaXMuX3NreWJveC5jdWJlTWFwKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIF9wVXBkYXRlUmVuZGVyT2JqZWN0KClcblx0e1xuXHRcdHRoaXMuc2V0QmxlbmRBbmRDb21wYXJlTW9kZXMoKTtcblxuXHRcdHRoaXMuX3BDbGVhclNjcmVlblNoYWRlcnMoKTtcblxuXHRcdHRoaXMuX3BBZGRTY3JlZW5TaGFkZXIodGhpcy5fc2NyZWVuU2hhZGVyKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHVwIHRoZSB2YXJpb3VzIGJsZW5kaW5nIG1vZGVzIGZvciBhbGwgc2NyZWVuIHBhc3NlcywgYmFzZWQgb24gd2hldGhlciBvciBub3QgdGhlcmUgYXJlIHByZXZpb3VzIHBhc3Nlcy5cblx0ICovXG5cdHByaXZhdGUgc2V0QmxlbmRBbmRDb21wYXJlTW9kZXMoKVxuXHR7XG5cdFx0dGhpcy5fcFJlcXVpcmVzQmxlbmRpbmcgPSAodGhpcy5fcmVuZGVyT2JqZWN0T3duZXIuYmxlbmRNb2RlICE9IEJsZW5kTW9kZS5OT1JNQUwgfHwgdGhpcy5fYWxwaGFCbGVuZGluZyB8fCB0aGlzLl9hbHBoYSA8IDEpO1xuXHRcdC8vdGhpcy5fc2NyZWVuU2hhZGVyLmRlcHRoQ29tcGFyZU1vZGUgPSB0aGlzLl9kZXB0aENvbXBhcmVNb2RlO1xuXHRcdC8vdGhpcy5fc2NyZWVuU2hhZGVyLnByZXNlcnZlQWxwaGEgPSB0aGlzLl9wUmVxdWlyZXNCbGVuZGluZztcblx0XHR0aGlzLl9zY3JlZW5TaGFkZXIuc2V0QmxlbmRNb2RlKCh0aGlzLl9yZW5kZXJPYmplY3RPd25lci5ibGVuZE1vZGUgPT0gQmxlbmRNb2RlLk5PUk1BTCAmJiB0aGlzLl9wUmVxdWlyZXNCbGVuZGluZyk/IEJsZW5kTW9kZS5MQVlFUiA6IHRoaXMuX3JlbmRlck9iamVjdE93bmVyLmJsZW5kTW9kZSk7XG5cdFx0Ly90aGlzLl9zY3JlZW5TaGFkZXIuZm9yY2VTZXBhcmF0ZU1WUCA9IGZhbHNlO1xuXHR9XG59XG5cbmV4cG9ydCA9IFNreWJveFJlbmRlck9iamVjdDsiXX0=