var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var BlendMode = require("awayjs-core/lib/data/BlendMode");
var RenderObjectBase = require("awayjs-renderergl/lib/compilation/RenderObjectBase");
var SkyboxPass = require("awayjs-renderergl/lib/passes/SkyboxPass");
/**
 * SkyboxRenderObject forms an abstract base class for the default shaded materials provided by Stage,
 * using material methods to define their appearance.
 */
var SkyboxRenderObject = (function (_super) {
    __extends(SkyboxRenderObject, _super);
    function SkyboxRenderObject(pool, renderObjectOwner, renderableClass, stage) {
        _super.call(this, pool, renderObjectOwner, renderableClass, stage);
        this._screenPass = new SkyboxPass(this, renderObjectOwner, renderableClass, this._stage);
        this._pAddScreenPass(this._screenPass);
    }
    /**
     * @inheritDoc
     */
    SkyboxRenderObject.prototype._pUpdateRenderObject = function () {
        _super.prototype._pUpdateRenderObject.call(this);
        this._pRequiresBlending = (this._renderObjectOwner.blendMode != BlendMode.NORMAL);
        this._screenPass.setBlendMode((this._renderObjectOwner.blendMode == BlendMode.NORMAL && this._pRequiresBlending) ? BlendMode.LAYER : this._renderObjectOwner.blendMode);
    };
    /**
     *
     */
    SkyboxRenderObject.id = "skybox";
    return SkyboxRenderObject;
})(RenderObjectBase);
module.exports = SkyboxRenderObject;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9Ta3lib3hSZW5kZXJPYmplY3QudHMiXSwibmFtZXMiOlsiU2t5Ym94UmVuZGVyT2JqZWN0IiwiU2t5Ym94UmVuZGVyT2JqZWN0LmNvbnN0cnVjdG9yIiwiU2t5Ym94UmVuZGVyT2JqZWN0Ll9wVXBkYXRlUmVuZGVyT2JqZWN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFPLFNBQVMsV0FBZSxnQ0FBZ0MsQ0FBQyxDQUFDO0FBS2pFLElBQU8sZ0JBQWdCLFdBQWMsb0RBQW9ELENBQUMsQ0FBQztBQUczRixJQUFPLFVBQVUsV0FBZSx5Q0FBeUMsQ0FBQyxDQUFDO0FBRTNFLEFBSUE7OztHQURHO0lBQ0csa0JBQWtCO0lBQVNBLFVBQTNCQSxrQkFBa0JBLFVBQXlCQTtJQVNoREEsU0FUS0Esa0JBQWtCQSxDQVNYQSxJQUFxQkEsRUFBRUEsaUJBQW9DQSxFQUFFQSxlQUFnQ0EsRUFBRUEsS0FBV0E7UUFFckhDLGtCQUFNQSxJQUFJQSxFQUFFQSxpQkFBaUJBLEVBQUVBLGVBQWVBLEVBQUVBLEtBQUtBLENBQUNBLENBQUNBO1FBRXZEQSxJQUFJQSxDQUFDQSxXQUFXQSxHQUFHQSxJQUFJQSxVQUFVQSxDQUFDQSxJQUFJQSxFQUFFQSxpQkFBaUJBLEVBQUVBLGVBQWVBLEVBQUVBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO1FBRXpGQSxJQUFJQSxDQUFDQSxlQUFlQSxDQUFDQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQTtJQUN4Q0EsQ0FBQ0E7SUFFREQ7O09BRUdBO0lBQ0lBLGlEQUFvQkEsR0FBM0JBO1FBRUNFLGdCQUFLQSxDQUFDQSxvQkFBb0JBLFdBQUVBLENBQUNBO1FBRTdCQSxJQUFJQSxDQUFDQSxrQkFBa0JBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsU0FBU0EsSUFBSUEsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7UUFFbEZBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsU0FBU0EsSUFBSUEsU0FBU0EsQ0FBQ0EsTUFBTUEsSUFBSUEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxHQUFFQSxTQUFTQSxDQUFDQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQSxrQkFBa0JBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBO0lBQ3hLQSxDQUFDQTtJQTFCREY7O09BRUdBO0lBQ1dBLHFCQUFFQSxHQUFVQSxRQUFRQSxDQUFDQTtJQXdCcENBLHlCQUFDQTtBQUFEQSxDQTdCQSxBQTZCQ0EsRUE3QmdDLGdCQUFnQixFQTZCaEQ7QUFFRCxBQUE0QixpQkFBbkIsa0JBQWtCLENBQUMiLCJmaWxlIjoiY29tcGlsYXRpb24vU2t5Ym94UmVuZGVyT2JqZWN0LmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCbGVuZE1vZGVcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2RhdGEvQmxlbmRNb2RlXCIpO1xuaW1wb3J0IElSZW5kZXJPYmplY3RPd25lclx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9iYXNlL0lSZW5kZXJPYmplY3RPd25lclwiKTtcblxuaW1wb3J0IFN0YWdlXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvU3RhZ2VcIik7XG5cbmltcG9ydCBSZW5kZXJPYmplY3RCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vUmVuZGVyT2JqZWN0QmFzZVwiKTtcbmltcG9ydCBSZW5kZXJPYmplY3RQb29sXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vUmVuZGVyT2JqZWN0UG9vbFwiKTtcbmltcG9ydCBJUmVuZGVyYWJsZUNsYXNzXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvcG9vbC9JUmVuZGVyYWJsZUNsYXNzXCIpO1xuaW1wb3J0IFNreWJveFBhc3NcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL3Bhc3Nlcy9Ta3lib3hQYXNzXCIpO1xuXG4vKipcbiAqIFNreWJveFJlbmRlck9iamVjdCBmb3JtcyBhbiBhYnN0cmFjdCBiYXNlIGNsYXNzIGZvciB0aGUgZGVmYXVsdCBzaGFkZWQgbWF0ZXJpYWxzIHByb3ZpZGVkIGJ5IFN0YWdlLFxuICogdXNpbmcgbWF0ZXJpYWwgbWV0aG9kcyB0byBkZWZpbmUgdGhlaXIgYXBwZWFyYW5jZS5cbiAqL1xuY2xhc3MgU2t5Ym94UmVuZGVyT2JqZWN0IGV4dGVuZHMgUmVuZGVyT2JqZWN0QmFzZVxue1xuXHQvKipcblx0ICpcblx0ICovXG5cdHB1YmxpYyBzdGF0aWMgaWQ6c3RyaW5nID0gXCJza3lib3hcIjtcblxuXHRwcml2YXRlIF9zY3JlZW5QYXNzOlNreWJveFBhc3M7XG5cblx0Y29uc3RydWN0b3IocG9vbDpSZW5kZXJPYmplY3RQb29sLCByZW5kZXJPYmplY3RPd25lcjpJUmVuZGVyT2JqZWN0T3duZXIsIHJlbmRlcmFibGVDbGFzczpJUmVuZGVyYWJsZUNsYXNzLCBzdGFnZTpTdGFnZSlcblx0e1xuXHRcdHN1cGVyKHBvb2wsIHJlbmRlck9iamVjdE93bmVyLCByZW5kZXJhYmxlQ2xhc3MsIHN0YWdlKTtcblxuXHRcdHRoaXMuX3NjcmVlblBhc3MgPSBuZXcgU2t5Ym94UGFzcyh0aGlzLCByZW5kZXJPYmplY3RPd25lciwgcmVuZGVyYWJsZUNsYXNzLCB0aGlzLl9zdGFnZSk7XG5cblx0XHR0aGlzLl9wQWRkU2NyZWVuUGFzcyh0aGlzLl9zY3JlZW5QYXNzKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIF9wVXBkYXRlUmVuZGVyT2JqZWN0KClcblx0e1xuXHRcdHN1cGVyLl9wVXBkYXRlUmVuZGVyT2JqZWN0KCk7XG5cblx0XHR0aGlzLl9wUmVxdWlyZXNCbGVuZGluZyA9ICh0aGlzLl9yZW5kZXJPYmplY3RPd25lci5ibGVuZE1vZGUgIT0gQmxlbmRNb2RlLk5PUk1BTCk7XG5cblx0XHR0aGlzLl9zY3JlZW5QYXNzLnNldEJsZW5kTW9kZSgodGhpcy5fcmVuZGVyT2JqZWN0T3duZXIuYmxlbmRNb2RlID09IEJsZW5kTW9kZS5OT1JNQUwgJiYgdGhpcy5fcFJlcXVpcmVzQmxlbmRpbmcpPyBCbGVuZE1vZGUuTEFZRVIgOiB0aGlzLl9yZW5kZXJPYmplY3RPd25lci5ibGVuZE1vZGUpO1xuXHR9XG59XG5cbmV4cG9ydCA9IFNreWJveFJlbmRlck9iamVjdDsiXX0=