var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var BlendMode = require("awayjs-core/lib/base/BlendMode");
var RenderObjectBase = require("awayjs-renderergl/lib/compilation/RenderObjectBase");
var BasicMaterialPass = require("awayjs-renderergl/lib/passes/BasicMaterialPass");
/**
 * RenderMaterialObject forms an abstract base class for the default shaded materials provided by Stage,
 * using material methods to define their appearance.
 */
var RenderBasicMaterialObject = (function (_super) {
    __extends(RenderBasicMaterialObject, _super);
    function RenderBasicMaterialObject(pool, material, renderableClass, stage) {
        _super.call(this, pool, material, renderableClass, stage);
        this._material = material;
        this._pAddScreenPass(this._screenPass = new BasicMaterialPass(this, material, renderableClass, this._stage));
    }
    /**
     * @inheritDoc
     */
    RenderBasicMaterialObject.prototype._pUpdateRenderObject = function () {
        _super.prototype._pUpdateRenderObject.call(this);
        this._pRequiresBlending = (this._material.blendMode != BlendMode.NORMAL || this._material.alphaBlending || (this._material.colorTransform && this._material.colorTransform.alphaMultiplier < 1));
        this._screenPass.preserveAlpha = this._material.preserveAlpha; //this._pRequiresBlending;
        this._screenPass.setBlendMode((this._renderObjectOwner.blendMode == BlendMode.NORMAL && this._pRequiresBlending) ? BlendMode.LAYER : this._material.blendMode);
        //this._screenPass.forceSeparateMVP = false;
    };
    /**
     *
     */
    RenderBasicMaterialObject.id = "basic";
    return RenderBasicMaterialObject;
})(RenderObjectBase);
module.exports = RenderBasicMaterialObject;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9SZW5kZXJCYXNpY01hdGVyaWFsT2JqZWN0LnRzIl0sIm5hbWVzIjpbIlJlbmRlckJhc2ljTWF0ZXJpYWxPYmplY3QiLCJSZW5kZXJCYXNpY01hdGVyaWFsT2JqZWN0LmNvbnN0cnVjdG9yIiwiUmVuZGVyQmFzaWNNYXRlcmlhbE9iamVjdC5fcFVwZGF0ZVJlbmRlck9iamVjdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBTyxTQUFTLFdBQWUsZ0NBQWdDLENBQUMsQ0FBQztBQU1qRSxJQUFPLGdCQUFnQixXQUFjLG9EQUFvRCxDQUFDLENBQUM7QUFHM0YsSUFBTyxpQkFBaUIsV0FBYSxnREFBZ0QsQ0FBQyxDQUFDO0FBRXZGLEFBSUE7OztHQURHO0lBQ0cseUJBQXlCO0lBQVNBLFVBQWxDQSx5QkFBeUJBLFVBQXlCQTtJQVd2REEsU0FYS0EseUJBQXlCQSxDQVdsQkEsSUFBcUJBLEVBQUVBLFFBQXNCQSxFQUFFQSxlQUFnQ0EsRUFBRUEsS0FBV0E7UUFFdkdDLGtCQUFNQSxJQUFJQSxFQUFFQSxRQUFRQSxFQUFFQSxlQUFlQSxFQUFFQSxLQUFLQSxDQUFDQSxDQUFDQTtRQUU5Q0EsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsUUFBUUEsQ0FBQ0E7UUFFMUJBLElBQUlBLENBQUNBLGVBQWVBLENBQUNBLElBQUlBLENBQUNBLFdBQVdBLEdBQUdBLElBQUlBLGlCQUFpQkEsQ0FBQ0EsSUFBSUEsRUFBRUEsUUFBUUEsRUFBRUEsZUFBZUEsRUFBRUEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDOUdBLENBQUNBO0lBRUREOztPQUVHQTtJQUNJQSx3REFBb0JBLEdBQTNCQTtRQUVDRSxnQkFBS0EsQ0FBQ0Esb0JBQW9CQSxXQUFFQSxDQUFDQTtRQUU3QkEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxTQUFTQSxJQUFJQSxTQUFTQSxDQUFDQSxNQUFNQSxJQUFJQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxhQUFhQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxjQUFjQSxJQUFJQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxjQUFjQSxDQUFDQSxlQUFlQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNqTUEsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsYUFBYUEsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsYUFBYUEsRUFBQ0EsMEJBQTBCQTtRQUN4RkEsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxTQUFTQSxJQUFJQSxTQUFTQSxDQUFDQSxNQUFNQSxJQUFJQSxJQUFJQSxDQUFDQSxrQkFBa0JBLENBQUNBLEdBQUVBLFNBQVNBLENBQUNBLEtBQUtBLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBO1FBQzlKQSw0Q0FBNENBO0lBQzdDQSxDQUFDQTtJQTdCREY7O09BRUdBO0lBQ1dBLDRCQUFFQSxHQUFVQSxPQUFPQSxDQUFDQTtJQTJCbkNBLGdDQUFDQTtBQUFEQSxDQWhDQSxBQWdDQ0EsRUFoQ3VDLGdCQUFnQixFQWdDdkQ7QUFFRCxBQUFtQyxpQkFBMUIseUJBQXlCLENBQUMiLCJmaWxlIjoiY29tcGlsYXRpb24vUmVuZGVyQmFzaWNNYXRlcmlhbE9iamVjdC5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmxlbmRNb2RlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9iYXNlL0JsZW5kTW9kZVwiKTtcclxuaW1wb3J0IElSZW5kZXJPYmplY3RPd25lclx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9iYXNlL0lSZW5kZXJPYmplY3RPd25lclwiKTtcclxuaW1wb3J0IEJhc2ljTWF0ZXJpYWxcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9tYXRlcmlhbHMvQmFzaWNNYXRlcmlhbFwiKTtcclxuXHJcbmltcG9ydCBTdGFnZVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL1N0YWdlXCIpO1xyXG5cclxuaW1wb3J0IFJlbmRlck9iamVjdEJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9SZW5kZXJPYmplY3RCYXNlXCIpO1xyXG5pbXBvcnQgUmVuZGVyT2JqZWN0UG9vbFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2NvbXBpbGF0aW9uL1JlbmRlck9iamVjdFBvb2xcIik7XHJcbmltcG9ydCBJUmVuZGVyYWJsZUNsYXNzXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvcG9vbC9JUmVuZGVyYWJsZUNsYXNzXCIpO1xyXG5pbXBvcnQgQmFzaWNNYXRlcmlhbFBhc3NcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvcGFzc2VzL0Jhc2ljTWF0ZXJpYWxQYXNzXCIpO1xyXG5cclxuLyoqXHJcbiAqIFJlbmRlck1hdGVyaWFsT2JqZWN0IGZvcm1zIGFuIGFic3RyYWN0IGJhc2UgY2xhc3MgZm9yIHRoZSBkZWZhdWx0IHNoYWRlZCBtYXRlcmlhbHMgcHJvdmlkZWQgYnkgU3RhZ2UsXHJcbiAqIHVzaW5nIG1hdGVyaWFsIG1ldGhvZHMgdG8gZGVmaW5lIHRoZWlyIGFwcGVhcmFuY2UuXHJcbiAqL1xyXG5jbGFzcyBSZW5kZXJCYXNpY01hdGVyaWFsT2JqZWN0IGV4dGVuZHMgUmVuZGVyT2JqZWN0QmFzZVxyXG57XHJcblx0LyoqXHJcblx0ICpcclxuXHQgKi9cclxuXHRwdWJsaWMgc3RhdGljIGlkOnN0cmluZyA9IFwiYmFzaWNcIjtcclxuXHJcblx0cHJpdmF0ZSBfbWF0ZXJpYWw6QmFzaWNNYXRlcmlhbDtcclxuXHRwcml2YXRlIF9zY3JlZW5QYXNzOkJhc2ljTWF0ZXJpYWxQYXNzO1xyXG5cclxuXHJcblx0Y29uc3RydWN0b3IocG9vbDpSZW5kZXJPYmplY3RQb29sLCBtYXRlcmlhbDpCYXNpY01hdGVyaWFsLCByZW5kZXJhYmxlQ2xhc3M6SVJlbmRlcmFibGVDbGFzcywgc3RhZ2U6U3RhZ2UpXHJcblx0e1xyXG5cdFx0c3VwZXIocG9vbCwgbWF0ZXJpYWwsIHJlbmRlcmFibGVDbGFzcywgc3RhZ2UpO1xyXG5cclxuXHRcdHRoaXMuX21hdGVyaWFsID0gbWF0ZXJpYWw7XHJcblxyXG5cdFx0dGhpcy5fcEFkZFNjcmVlblBhc3ModGhpcy5fc2NyZWVuUGFzcyA9IG5ldyBCYXNpY01hdGVyaWFsUGFzcyh0aGlzLCBtYXRlcmlhbCwgcmVuZGVyYWJsZUNsYXNzLCB0aGlzLl9zdGFnZSkpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXREb2NcclxuXHQgKi9cclxuXHRwdWJsaWMgX3BVcGRhdGVSZW5kZXJPYmplY3QoKVxyXG5cdHtcclxuXHRcdHN1cGVyLl9wVXBkYXRlUmVuZGVyT2JqZWN0KCk7XHJcblxyXG5cdFx0dGhpcy5fcFJlcXVpcmVzQmxlbmRpbmcgPSAodGhpcy5fbWF0ZXJpYWwuYmxlbmRNb2RlICE9IEJsZW5kTW9kZS5OT1JNQUwgfHwgdGhpcy5fbWF0ZXJpYWwuYWxwaGFCbGVuZGluZyB8fCAodGhpcy5fbWF0ZXJpYWwuY29sb3JUcmFuc2Zvcm0gJiYgdGhpcy5fbWF0ZXJpYWwuY29sb3JUcmFuc2Zvcm0uYWxwaGFNdWx0aXBsaWVyIDwgMSkpO1xyXG5cdFx0dGhpcy5fc2NyZWVuUGFzcy5wcmVzZXJ2ZUFscGhhID0gdGhpcy5fbWF0ZXJpYWwucHJlc2VydmVBbHBoYTsvL3RoaXMuX3BSZXF1aXJlc0JsZW5kaW5nO1xyXG5cdFx0dGhpcy5fc2NyZWVuUGFzcy5zZXRCbGVuZE1vZGUoKHRoaXMuX3JlbmRlck9iamVjdE93bmVyLmJsZW5kTW9kZSA9PSBCbGVuZE1vZGUuTk9STUFMICYmIHRoaXMuX3BSZXF1aXJlc0JsZW5kaW5nKT8gQmxlbmRNb2RlLkxBWUVSIDogdGhpcy5fbWF0ZXJpYWwuYmxlbmRNb2RlKTtcclxuXHRcdC8vdGhpcy5fc2NyZWVuUGFzcy5mb3JjZVNlcGFyYXRlTVZQID0gZmFsc2U7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgPSBSZW5kZXJCYXNpY01hdGVyaWFsT2JqZWN0OyJdfQ==