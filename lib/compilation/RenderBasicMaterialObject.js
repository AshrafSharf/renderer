var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var BlendMode = require("awayjs-display/lib/base/BlendMode");
var RenderObjectBase = require("awayjs-renderergl/lib/compilation/RenderObjectBase");
var BasicMaterialPass = require("awayjs-renderergl/lib/passes/BasicMaterialPass");
/**
 * RenderMaterialObject forms an abstract base class for the default shaded materials provided by Stage,
 * using material methods to define their appearance.
 */
var RenderBasicMaterialObject = (function (_super) {
    __extends(RenderBasicMaterialObject, _super);
    function RenderBasicMaterialObject(pool, renderObjectOwner, renderableClass, stage) {
        _super.call(this, pool, renderObjectOwner, renderableClass, stage);
        this._alphaBlending = false;
        this._alpha = 1;
        this._screenPass = new BasicMaterialPass(this, renderObjectOwner, renderableClass, this._stage);
        this._pAddScreenPass(this._screenPass);
    }
    /**
     * @inheritDoc
     */
    RenderBasicMaterialObject.prototype._pUpdateRenderObject = function () {
        _super.prototype._pUpdateRenderObject.call(this);
        this._pRequiresBlending = (this._renderObjectOwner.blendMode != BlendMode.NORMAL || this._alphaBlending || this._alpha < 1);
        //this._screenPass.preserveAlpha = this._pRequiresBlending;
        this._screenPass.setBlendMode((this._renderObjectOwner.blendMode == BlendMode.NORMAL && this._pRequiresBlending) ? BlendMode.LAYER : this._renderObjectOwner.blendMode);
        //this._screenPass.forceSeparateMVP = false;
    };
    /**
     *
     */
    RenderBasicMaterialObject.id = "basic";
    return RenderBasicMaterialObject;
})(RenderObjectBase);
module.exports = RenderBasicMaterialObject;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9yZW5kZXJiYXNpY21hdGVyaWFsb2JqZWN0LnRzIl0sIm5hbWVzIjpbIlJlbmRlckJhc2ljTWF0ZXJpYWxPYmplY3QiLCJSZW5kZXJCYXNpY01hdGVyaWFsT2JqZWN0LmNvbnN0cnVjdG9yIiwiUmVuZGVyQmFzaWNNYXRlcmlhbE9iamVjdC5fcFVwZGF0ZVJlbmRlck9iamVjdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBTyxTQUFTLFdBQWUsbUNBQW1DLENBQUMsQ0FBQztBQUtwRSxJQUFPLGdCQUFnQixXQUFjLG9EQUFvRCxDQUFDLENBQUM7QUFHM0YsSUFBTyxpQkFBaUIsV0FBYSxnREFBZ0QsQ0FBQyxDQUFDO0FBRXZGLEFBSUE7OztHQURHO0lBQ0cseUJBQXlCO0lBQVNBLFVBQWxDQSx5QkFBeUJBLFVBQXlCQTtJQVl2REEsU0FaS0EseUJBQXlCQSxDQVlsQkEsSUFBcUJBLEVBQUVBLGlCQUFvQ0EsRUFBRUEsZUFBZ0NBLEVBQUVBLEtBQVdBO1FBRXJIQyxrQkFBTUEsSUFBSUEsRUFBRUEsaUJBQWlCQSxFQUFFQSxlQUFlQSxFQUFFQSxLQUFLQSxDQUFDQSxDQUFDQTtRQUxoREEsbUJBQWNBLEdBQVdBLEtBQUtBLENBQUNBO1FBQy9CQSxXQUFNQSxHQUFVQSxDQUFDQSxDQUFDQTtRQU16QkEsSUFBSUEsQ0FBQ0EsV0FBV0EsR0FBR0EsSUFBSUEsaUJBQWlCQSxDQUFDQSxJQUFJQSxFQUFFQSxpQkFBaUJBLEVBQUVBLGVBQWVBLEVBQUVBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO1FBRWhHQSxJQUFJQSxDQUFDQSxlQUFlQSxDQUFDQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQTtJQUN4Q0EsQ0FBQ0E7SUFFREQ7O09BRUdBO0lBQ0lBLHdEQUFvQkEsR0FBM0JBO1FBRUNFLGdCQUFLQSxDQUFDQSxvQkFBb0JBLFdBQUVBLENBQUNBO1FBRTdCQSxJQUFJQSxDQUFDQSxrQkFBa0JBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsU0FBU0EsSUFBSUEsU0FBU0EsQ0FBQ0EsTUFBTUEsSUFBSUEsSUFBSUEsQ0FBQ0EsY0FBY0EsSUFBSUEsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDNUhBLEFBQ0FBLDJEQUQyREE7UUFDM0RBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsU0FBU0EsSUFBSUEsU0FBU0EsQ0FBQ0EsTUFBTUEsSUFBSUEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxHQUFFQSxTQUFTQSxDQUFDQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQSxrQkFBa0JBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBO1FBQ3ZLQSw0Q0FBNENBO0lBQzdDQSxDQUFDQTtJQTlCREY7O09BRUdBO0lBQ1dBLDRCQUFFQSxHQUFVQSxPQUFPQSxDQUFDQTtJQTRCbkNBLGdDQUFDQTtBQUFEQSxDQWpDQSxBQWlDQ0EsRUFqQ3VDLGdCQUFnQixFQWlDdkQ7QUFFRCxBQUFtQyxpQkFBMUIseUJBQXlCLENBQUMiLCJmaWxlIjoiY29tcGlsYXRpb24vUmVuZGVyQmFzaWNNYXRlcmlhbE9iamVjdC5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmxlbmRNb2RlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9iYXNlL0JsZW5kTW9kZVwiKTtcbmltcG9ydCBJUmVuZGVyT2JqZWN0T3duZXJcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvYmFzZS9JUmVuZGVyT2JqZWN0T3duZXJcIik7XG5cbmltcG9ydCBTdGFnZVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL1N0YWdlXCIpO1xuXG5pbXBvcnQgUmVuZGVyT2JqZWN0QmFzZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2NvbXBpbGF0aW9uL1JlbmRlck9iamVjdEJhc2VcIik7XG5pbXBvcnQgUmVuZGVyT2JqZWN0UG9vbFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2NvbXBpbGF0aW9uL1JlbmRlck9iamVjdFBvb2xcIik7XG5pbXBvcnQgSVJlbmRlcmFibGVDbGFzc1x0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL3Bvb2wvSVJlbmRlcmFibGVDbGFzc1wiKTtcbmltcG9ydCBCYXNpY01hdGVyaWFsUGFzc1x0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9wYXNzZXMvQmFzaWNNYXRlcmlhbFBhc3NcIik7XG5cbi8qKlxuICogUmVuZGVyTWF0ZXJpYWxPYmplY3QgZm9ybXMgYW4gYWJzdHJhY3QgYmFzZSBjbGFzcyBmb3IgdGhlIGRlZmF1bHQgc2hhZGVkIG1hdGVyaWFscyBwcm92aWRlZCBieSBTdGFnZSxcbiAqIHVzaW5nIG1hdGVyaWFsIG1ldGhvZHMgdG8gZGVmaW5lIHRoZWlyIGFwcGVhcmFuY2UuXG4gKi9cbmNsYXNzIFJlbmRlckJhc2ljTWF0ZXJpYWxPYmplY3QgZXh0ZW5kcyBSZW5kZXJPYmplY3RCYXNlXG57XG5cdC8qKlxuXHQgKlxuXHQgKi9cblx0cHVibGljIHN0YXRpYyBpZDpzdHJpbmcgPSBcImJhc2ljXCI7XG5cblx0cHJpdmF0ZSBfc2NyZWVuUGFzczpCYXNpY01hdGVyaWFsUGFzcztcblxuXHRwcml2YXRlIF9hbHBoYUJsZW5kaW5nOmJvb2xlYW4gPSBmYWxzZTtcblx0cHJpdmF0ZSBfYWxwaGE6bnVtYmVyID0gMTtcblxuXHRjb25zdHJ1Y3Rvcihwb29sOlJlbmRlck9iamVjdFBvb2wsIHJlbmRlck9iamVjdE93bmVyOklSZW5kZXJPYmplY3RPd25lciwgcmVuZGVyYWJsZUNsYXNzOklSZW5kZXJhYmxlQ2xhc3MsIHN0YWdlOlN0YWdlKVxuXHR7XG5cdFx0c3VwZXIocG9vbCwgcmVuZGVyT2JqZWN0T3duZXIsIHJlbmRlcmFibGVDbGFzcywgc3RhZ2UpO1xuXG5cdFx0dGhpcy5fc2NyZWVuUGFzcyA9IG5ldyBCYXNpY01hdGVyaWFsUGFzcyh0aGlzLCByZW5kZXJPYmplY3RPd25lciwgcmVuZGVyYWJsZUNsYXNzLCB0aGlzLl9zdGFnZSk7XG5cblx0XHR0aGlzLl9wQWRkU2NyZWVuUGFzcyh0aGlzLl9zY3JlZW5QYXNzKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIF9wVXBkYXRlUmVuZGVyT2JqZWN0KClcblx0e1xuXHRcdHN1cGVyLl9wVXBkYXRlUmVuZGVyT2JqZWN0KCk7XG5cblx0XHR0aGlzLl9wUmVxdWlyZXNCbGVuZGluZyA9ICh0aGlzLl9yZW5kZXJPYmplY3RPd25lci5ibGVuZE1vZGUgIT0gQmxlbmRNb2RlLk5PUk1BTCB8fCB0aGlzLl9hbHBoYUJsZW5kaW5nIHx8IHRoaXMuX2FscGhhIDwgMSk7XG5cdFx0Ly90aGlzLl9zY3JlZW5QYXNzLnByZXNlcnZlQWxwaGEgPSB0aGlzLl9wUmVxdWlyZXNCbGVuZGluZztcblx0XHR0aGlzLl9zY3JlZW5QYXNzLnNldEJsZW5kTW9kZSgodGhpcy5fcmVuZGVyT2JqZWN0T3duZXIuYmxlbmRNb2RlID09IEJsZW5kTW9kZS5OT1JNQUwgJiYgdGhpcy5fcFJlcXVpcmVzQmxlbmRpbmcpPyBCbGVuZE1vZGUuTEFZRVIgOiB0aGlzLl9yZW5kZXJPYmplY3RPd25lci5ibGVuZE1vZGUpO1xuXHRcdC8vdGhpcy5fc2NyZWVuUGFzcy5mb3JjZVNlcGFyYXRlTVZQID0gZmFsc2U7XG5cdH1cbn1cblxuZXhwb3J0ID0gUmVuZGVyQmFzaWNNYXRlcmlhbE9iamVjdDsiXX0=