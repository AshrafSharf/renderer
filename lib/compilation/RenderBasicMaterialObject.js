var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var BlendMode = require("awayjs-display/lib/base/BlendMode");
var RenderObjectBase = require("awayjs-renderergl/lib/compilation/RenderObjectBase");
var BasicMaterialPass = require("awayjs-renderergl/lib/passes/BasicMaterialPass");
/**
 * RenderMaterialObject forms an abstract base class for the default shaded materials provided by Stage,
 * using material methods to define their appearance.
 */
var RenderBasicMaterialObject = (function (_super) {
    __extends(RenderBasicMaterialObject, _super);
    function RenderBasicMaterialObject(pool, material, renderableClass, stage) {
        _super.call(this, pool, material, renderableClass, stage);
        this._material = material;
        this._pAddScreenPass(this._screenPass = new BasicMaterialPass(this, material, renderableClass, this._stage));
    }
    /**
     * @inheritDoc
     */
    RenderBasicMaterialObject.prototype._pUpdateRenderObject = function () {
        _super.prototype._pUpdateRenderObject.call(this);
        this._pRequiresBlending = (this._material.blendMode != BlendMode.NORMAL || this._material.alphaBlending || (this._material.colorTransform && this._material.colorTransform.alphaMultiplier < 1));
        //this._screenPass.preserveAlpha = this._pRequiresBlending;
        this._screenPass.setBlendMode((this._renderObjectOwner.blendMode == BlendMode.NORMAL && this._pRequiresBlending) ? BlendMode.LAYER : this._material.blendMode);
        //this._screenPass.forceSeparateMVP = false;
    };
    /**
     *
     */
    RenderBasicMaterialObject.id = "basic";
    return RenderBasicMaterialObject;
})(RenderObjectBase);
module.exports = RenderBasicMaterialObject;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9yZW5kZXJiYXNpY21hdGVyaWFsb2JqZWN0LnRzIl0sIm5hbWVzIjpbIlJlbmRlckJhc2ljTWF0ZXJpYWxPYmplY3QiLCJSZW5kZXJCYXNpY01hdGVyaWFsT2JqZWN0LmNvbnN0cnVjdG9yIiwiUmVuZGVyQmFzaWNNYXRlcmlhbE9iamVjdC5fcFVwZGF0ZVJlbmRlck9iamVjdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBTyxTQUFTLFdBQWUsbUNBQW1DLENBQUMsQ0FBQztBQU1wRSxJQUFPLGdCQUFnQixXQUFjLG9EQUFvRCxDQUFDLENBQUM7QUFHM0YsSUFBTyxpQkFBaUIsV0FBYSxnREFBZ0QsQ0FBQyxDQUFDO0FBRXZGLEFBSUE7OztHQURHO0lBQ0cseUJBQXlCO0lBQVNBLFVBQWxDQSx5QkFBeUJBLFVBQXlCQTtJQVd2REEsU0FYS0EseUJBQXlCQSxDQVdsQkEsSUFBcUJBLEVBQUVBLFFBQXNCQSxFQUFFQSxlQUFnQ0EsRUFBRUEsS0FBV0E7UUFFdkdDLGtCQUFNQSxJQUFJQSxFQUFFQSxRQUFRQSxFQUFFQSxlQUFlQSxFQUFFQSxLQUFLQSxDQUFDQSxDQUFDQTtRQUU5Q0EsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsUUFBUUEsQ0FBQ0E7UUFFMUJBLElBQUlBLENBQUNBLGVBQWVBLENBQUNBLElBQUlBLENBQUNBLFdBQVdBLEdBQUdBLElBQUlBLGlCQUFpQkEsQ0FBQ0EsSUFBSUEsRUFBRUEsUUFBUUEsRUFBRUEsZUFBZUEsRUFBRUEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDOUdBLENBQUNBO0lBRUREOztPQUVHQTtJQUNJQSx3REFBb0JBLEdBQTNCQTtRQUVDRSxnQkFBS0EsQ0FBQ0Esb0JBQW9CQSxXQUFFQSxDQUFDQTtRQUU3QkEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxTQUFTQSxJQUFJQSxTQUFTQSxDQUFDQSxNQUFNQSxJQUFJQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxhQUFhQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxjQUFjQSxJQUFJQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxjQUFjQSxDQUFDQSxlQUFlQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNqTUEsQUFDQUEsMkRBRDJEQTtRQUMzREEsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxTQUFTQSxJQUFJQSxTQUFTQSxDQUFDQSxNQUFNQSxJQUFJQSxJQUFJQSxDQUFDQSxrQkFBa0JBLENBQUNBLEdBQUVBLFNBQVNBLENBQUNBLEtBQUtBLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBO1FBQzlKQSw0Q0FBNENBO0lBQzdDQSxDQUFDQTtJQTdCREY7O09BRUdBO0lBQ1dBLDRCQUFFQSxHQUFVQSxPQUFPQSxDQUFDQTtJQTJCbkNBLGdDQUFDQTtBQUFEQSxDQWhDQSxBQWdDQ0EsRUFoQ3VDLGdCQUFnQixFQWdDdkQ7QUFFRCxBQUFtQyxpQkFBMUIseUJBQXlCLENBQUMiLCJmaWxlIjoiY29tcGlsYXRpb24vUmVuZGVyQmFzaWNNYXRlcmlhbE9iamVjdC5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmxlbmRNb2RlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9iYXNlL0JsZW5kTW9kZVwiKTtcbmltcG9ydCBJUmVuZGVyT2JqZWN0T3duZXJcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvYmFzZS9JUmVuZGVyT2JqZWN0T3duZXJcIik7XG5pbXBvcnQgQmFzaWNNYXRlcmlhbFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL21hdGVyaWFscy9CYXNpY01hdGVyaWFsXCIpO1xuXG5pbXBvcnQgU3RhZ2VcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYmFzZS9TdGFnZVwiKTtcblxuaW1wb3J0IFJlbmRlck9iamVjdEJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9SZW5kZXJPYmplY3RCYXNlXCIpO1xuaW1wb3J0IFJlbmRlck9iamVjdFBvb2xcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9SZW5kZXJPYmplY3RQb29sXCIpO1xuaW1wb3J0IElSZW5kZXJhYmxlQ2xhc3NcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9wb29sL0lSZW5kZXJhYmxlQ2xhc3NcIik7XG5pbXBvcnQgQmFzaWNNYXRlcmlhbFBhc3NcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvcGFzc2VzL0Jhc2ljTWF0ZXJpYWxQYXNzXCIpO1xuXG4vKipcbiAqIFJlbmRlck1hdGVyaWFsT2JqZWN0IGZvcm1zIGFuIGFic3RyYWN0IGJhc2UgY2xhc3MgZm9yIHRoZSBkZWZhdWx0IHNoYWRlZCBtYXRlcmlhbHMgcHJvdmlkZWQgYnkgU3RhZ2UsXG4gKiB1c2luZyBtYXRlcmlhbCBtZXRob2RzIHRvIGRlZmluZSB0aGVpciBhcHBlYXJhbmNlLlxuICovXG5jbGFzcyBSZW5kZXJCYXNpY01hdGVyaWFsT2JqZWN0IGV4dGVuZHMgUmVuZGVyT2JqZWN0QmFzZVxue1xuXHQvKipcblx0ICpcblx0ICovXG5cdHB1YmxpYyBzdGF0aWMgaWQ6c3RyaW5nID0gXCJiYXNpY1wiO1xuXG5cdHByaXZhdGUgX21hdGVyaWFsOkJhc2ljTWF0ZXJpYWw7XG5cdHByaXZhdGUgX3NjcmVlblBhc3M6QmFzaWNNYXRlcmlhbFBhc3M7XG5cblxuXHRjb25zdHJ1Y3Rvcihwb29sOlJlbmRlck9iamVjdFBvb2wsIG1hdGVyaWFsOkJhc2ljTWF0ZXJpYWwsIHJlbmRlcmFibGVDbGFzczpJUmVuZGVyYWJsZUNsYXNzLCBzdGFnZTpTdGFnZSlcblx0e1xuXHRcdHN1cGVyKHBvb2wsIG1hdGVyaWFsLCByZW5kZXJhYmxlQ2xhc3MsIHN0YWdlKTtcblxuXHRcdHRoaXMuX21hdGVyaWFsID0gbWF0ZXJpYWw7XG5cblx0XHR0aGlzLl9wQWRkU2NyZWVuUGFzcyh0aGlzLl9zY3JlZW5QYXNzID0gbmV3IEJhc2ljTWF0ZXJpYWxQYXNzKHRoaXMsIG1hdGVyaWFsLCByZW5kZXJhYmxlQ2xhc3MsIHRoaXMuX3N0YWdlKSk7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHB1YmxpYyBfcFVwZGF0ZVJlbmRlck9iamVjdCgpXG5cdHtcblx0XHRzdXBlci5fcFVwZGF0ZVJlbmRlck9iamVjdCgpO1xuXG5cdFx0dGhpcy5fcFJlcXVpcmVzQmxlbmRpbmcgPSAodGhpcy5fbWF0ZXJpYWwuYmxlbmRNb2RlICE9IEJsZW5kTW9kZS5OT1JNQUwgfHwgdGhpcy5fbWF0ZXJpYWwuYWxwaGFCbGVuZGluZyB8fCAodGhpcy5fbWF0ZXJpYWwuY29sb3JUcmFuc2Zvcm0gJiYgdGhpcy5fbWF0ZXJpYWwuY29sb3JUcmFuc2Zvcm0uYWxwaGFNdWx0aXBsaWVyIDwgMSkpO1xuXHRcdC8vdGhpcy5fc2NyZWVuUGFzcy5wcmVzZXJ2ZUFscGhhID0gdGhpcy5fcFJlcXVpcmVzQmxlbmRpbmc7XG5cdFx0dGhpcy5fc2NyZWVuUGFzcy5zZXRCbGVuZE1vZGUoKHRoaXMuX3JlbmRlck9iamVjdE93bmVyLmJsZW5kTW9kZSA9PSBCbGVuZE1vZGUuTk9STUFMICYmIHRoaXMuX3BSZXF1aXJlc0JsZW5kaW5nKT8gQmxlbmRNb2RlLkxBWUVSIDogdGhpcy5fbWF0ZXJpYWwuYmxlbmRNb2RlKTtcblx0XHQvL3RoaXMuX3NjcmVlblBhc3MuZm9yY2VTZXBhcmF0ZU1WUCA9IGZhbHNlO1xuXHR9XG59XG5cbmV4cG9ydCA9IFJlbmRlckJhc2ljTWF0ZXJpYWxPYmplY3Q7Il19