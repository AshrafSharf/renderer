var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var BlendMode = require("awayjs-display/lib/base/BlendMode");
var ContextGLCompareMode = require("awayjs-stagegl/lib/base/ContextGLCompareMode");
var ContextGLMipFilter = require("awayjs-stagegl/lib/base/ContextGLMipFilter");
var ContextGLTextureFilter = require("awayjs-stagegl/lib/base/ContextGLTextureFilter");
var ContextGLWrapMode = require("awayjs-stagegl/lib/base/ContextGLWrapMode");
var RenderObjectBase = require("awayjs-renderergl/lib/compilation/RenderObjectBase");
var ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
var ShaderCompilerHelper = require("awayjs-renderergl/lib/utils/ShaderCompilerHelper");
/**
 * RenderMaterialObject forms an abstract base class for the default shaded materials provided by Stage,
 * using material methods to define their appearance.
 */
var RenderBasicMaterialObject = (function (_super) {
    __extends(RenderBasicMaterialObject, _super);
    function RenderBasicMaterialObject(pool, renderObjectOwner, renderableClass, stage) {
        _super.call(this, pool, renderObjectOwner, renderableClass, stage);
        this._diffuseColor = 0xffffff;
        this._diffuseR = 1;
        this._diffuseG = 1;
        this._diffuseB = 1;
        this._diffuseA = 1;
        this._alphaBlending = false;
        this._alpha = 1;
        this._depthCompareMode = ContextGLCompareMode.LESS_EQUAL;
        this._screenShader = new ShaderObjectBase(renderObjectOwner, renderableClass, this, this._stage);
        this._pAddScreenShader(this._screenShader);
    }
    RenderBasicMaterialObject.prototype._iIncludeDependencies = function (shaderObject) {
        _super.prototype._iIncludeDependencies.call(this, shaderObject);
        if (shaderObject.texture != null)
            shaderObject.uvDependencies++;
    };
    /**
     * @inheritDoc
     */
    RenderBasicMaterialObject.prototype._iGetFragmentCode = function (shaderObject, regCache, sharedReg) {
        var code = "";
        var targetReg = sharedReg.shadedTarget;
        var diffuseInputReg;
        if (shaderObject.texture != null) {
            diffuseInputReg = regCache.getFreeTextureReg();
            this._texturesIndex = diffuseInputReg.index;
            code += ShaderCompilerHelper.getTex2DSampleCode(targetReg, sharedReg, diffuseInputReg, shaderObject.texture, shaderObject.useSmoothTextures, shaderObject.repeatTextures, shaderObject.useMipmapping);
            if (shaderObject.alphaThreshold > 0) {
                var cutOffReg = regCache.getFreeFragmentConstant();
                this._fragmentConstantsIndex = cutOffReg.index * 4;
                code += "sub " + targetReg + ".w, " + targetReg + ".w, " + cutOffReg + ".x\n" + "kil " + targetReg + ".w\n" + "add " + targetReg + ".w, " + targetReg + ".w, " + cutOffReg + ".x\n";
            }
        }
        else if (shaderObject.colorBufferIndex != -1) {
            code += "mov " + targetReg + ", " + sharedReg.colorVarying + "\n";
        }
        else {
            diffuseInputReg = regCache.getFreeFragmentConstant();
            this._fragmentConstantsIndex = diffuseInputReg.index * 4;
            code += "mov " + targetReg + ", " + diffuseInputReg + "\n";
        }
        return code;
    };
    /**
     * @inheritDoc
     */
    RenderBasicMaterialObject.prototype._iActivate = function (shader, camera) {
        _super.prototype._iActivate.call(this, shader, camera);
        if (shader.texture != null) {
            this._stage.context.setSamplerStateAt(this._texturesIndex, shader.repeatTextures ? ContextGLWrapMode.REPEAT : ContextGLWrapMode.CLAMP, shader.useSmoothTextures ? ContextGLTextureFilter.LINEAR : ContextGLTextureFilter.NEAREST, shader.useMipmapping ? ContextGLMipFilter.MIPLINEAR : ContextGLMipFilter.MIPNONE);
            this._stage.activateTexture(this._texturesIndex, shader.texture);
            if (shader.alphaThreshold > 0)
                shader.fragmentConstantData[this._fragmentConstantsIndex] = shader.alphaThreshold;
        }
        else if (shader.colorBufferIndex == -1) {
            var index = this._fragmentConstantsIndex;
            var data = shader.fragmentConstantData;
            data[index] = this._diffuseR;
            data[index + 1] = this._diffuseG;
            data[index + 2] = this._diffuseB;
            data[index + 3] = this._diffuseA;
        }
    };
    /**
     * @inheritDoc
     */
    RenderBasicMaterialObject.prototype._pUpdateRenderObject = function () {
        this.setBlendAndCompareModes();
        this._pClearScreenShaders();
        this._pAddScreenShader(this._screenShader);
    };
    /**
     * Sets up the various blending modes for all screen passes, based on whether or not there are previous passes.
     */
    RenderBasicMaterialObject.prototype.setBlendAndCompareModes = function () {
        this._pRequiresBlending = (this._renderObjectOwner.blendMode != BlendMode.NORMAL || this._alphaBlending || this._alpha < 1);
        //this._screenShader.preserveAlpha = this._pRequiresBlending;
        this._screenShader.setBlendMode((this._renderObjectOwner.blendMode == BlendMode.NORMAL && this._pRequiresBlending) ? BlendMode.LAYER : this._renderObjectOwner.blendMode);
        //this._screenShader.forceSeparateMVP = false;
    };
    /**
     *
     */
    RenderBasicMaterialObject.id = "basic";
    return RenderBasicMaterialObject;
})(RenderObjectBase);
module.exports = RenderBasicMaterialObject;

//# sourceMappingURL=data:application/json;base64,