var LineSubGeometry = require("awayjs-display/lib/base/LineSubGeometry");
var TriangleSubGeometry = require("awayjs-display/lib/base/TriangleSubGeometry");
var ContextGLTriangleFace = require("awayjs-stagegl/lib/base/ContextGLTriangleFace");
var ShaderCompilerBase = require("awayjs-renderergl/lib/compilation/ShaderCompilerBase");
/**
 * ShaderObjectBase keeps track of the number of dependencies for "named registers" used across a pass.
 * Named registers are that are not necessarily limited to a single method. They are created by the compiler and
 * passed on to methods. The compiler uses the results to reserve usages through RegisterPool, which can be removed
 * each time a method has been compiled into the shader.
 *
 * @see RegisterPool.addUsage
 */
var ShaderObjectBase = (function () {
    /**
     * Creates a new MethodCompilerVO object.
     */
    function ShaderObjectBase(renderableClass, renderPass, stage) {
        this._invalidShader = true;
        this._invalidProgram = true;
        this._animationVertexCode = "";
        this._animationFragmentCode = "";
        this._defaultCulling = ContextGLTriangleFace.BACK;
        this._pInverseSceneMatrix = new Array();
        //set ambient values to default
        this.ambientR = 0xFF;
        this.ambientG = 0xFF;
        this.ambientB = 0xFF;
        /**
         * Indicates whether there are any dependencies on the world-space position vector.
         */
        this.usesGlobalPosFragment = false;
        this.vertexConstantData = new Array();
        this.fragmentConstantData = new Array();
        this._renderableClass = renderableClass;
        this._renderPass = renderPass;
        this._stage = stage;
        this.profile = this._stage.profile;
    }
    Object.defineProperty(ShaderObjectBase.prototype, "programData", {
        get: function () {
            if (this._invalidProgram)
                this._updateProgram();
            return this._programData;
        },
        enumerable: true,
        configurable: true
    });
    ShaderObjectBase.prototype._iIncludeDependencies = function () {
        this._renderPass._iIncludeDependencies(this);
    };
    /**
     * Factory method to create a concrete compiler object for this object
     *
     * @param renderableClass
     * @param renderPass
     * @param stage
     * @returns {ShaderCompilerBase}
     */
    ShaderObjectBase.prototype.createCompiler = function (renderableClass, renderPass) {
        return new ShaderCompilerBase(renderableClass, renderPass, this);
    };
    /**
     * Clears dependency counts for all registers. Called when recompiling a pass.
     */
    ShaderObjectBase.prototype.reset = function () {
        this.projectionDependencies = 0;
        this.normalDependencies = 0;
        this.colorDependencies = 0;
        this.viewDirDependencies = 0;
        this.uvDependencies = 0;
        this.secondaryUVDependencies = 0;
        this.globalPosDependencies = 0;
        this.localPosDependencies = 0;
        this.tangentDependencies = 0;
        this.usesGlobalPosFragment = false;
        this.usesFragmentAnimation = false;
        this.usesTangentSpace = false;
        this.outputsNormals = false;
        this.outputsTangentNormals = false;
    };
    ShaderObjectBase.prototype.pInitRegisterIndices = function () {
        this.commonsDataIndex = -1;
        this.cameraPositionIndex = -1;
        this.uvBufferIndex = -1;
        this.uvTransformIndex = -1;
        this.secondaryUVBufferIndex = -1;
        this.normalBufferIndex = -1;
        this.colorBufferIndex = -1;
        this.tangentBufferIndex = -1;
        this.sceneMatrixIndex = -1;
        this.sceneNormalMatrixIndex = -1;
    };
    /**
     * Initializes the unchanging constant data for this shader object.
     */
    ShaderObjectBase.prototype.initConstantData = function (registerCache, animatableAttributes, animationTargetRegisters, uvSource, uvTarget) {
        //Updates the amount of used register indices.
        this.numUsedVertexConstants = registerCache.numUsedVertexConstants;
        this.numUsedFragmentConstants = registerCache.numUsedFragmentConstants;
        this.numUsedStreams = registerCache.numUsedStreams;
        this.numUsedTextures = registerCache.numUsedTextures;
        this.numUsedVaryings = registerCache.numUsedVaryings;
        this.numUsedFragmentConstants = registerCache.numUsedFragmentConstants;
        this.animatableAttributes = animatableAttributes;
        this.animationTargetRegisters = animationTargetRegisters;
        this.uvSource = uvSource;
        this.uvTarget = uvTarget;
        this.vertexConstantData.length = this.numUsedVertexConstants * 4;
        this.fragmentConstantData.length = this.numUsedFragmentConstants * 4;
        //Initializes commonly required constant values.
        this.fragmentConstantData[this.commonsDataIndex] = .5;
        this.fragmentConstantData[this.commonsDataIndex + 1] = 0;
        this.fragmentConstantData[this.commonsDataIndex + 2] = 1 / 255;
        this.fragmentConstantData[this.commonsDataIndex + 3] = 1;
        //Initializes the default UV transformation matrix.
        if (this.uvTransformIndex >= 0) {
            this.vertexConstantData[this.uvTransformIndex] = 1;
            this.vertexConstantData[this.uvTransformIndex + 1] = 0;
            this.vertexConstantData[this.uvTransformIndex + 2] = 0;
            this.vertexConstantData[this.uvTransformIndex + 3] = 0;
            this.vertexConstantData[this.uvTransformIndex + 4] = 0;
            this.vertexConstantData[this.uvTransformIndex + 5] = 1;
            this.vertexConstantData[this.uvTransformIndex + 6] = 0;
            this.vertexConstantData[this.uvTransformIndex + 7] = 0;
        }
        if (this.cameraPositionIndex >= 0)
            this.vertexConstantData[this.cameraPositionIndex + 3] = 1;
    };
    /**
     * @inheritDoc
     */
    ShaderObjectBase.prototype._iActivate = function (camera) {
        if (this.usesAnimation)
            this._renderPass.animationSet.activate(this, this._stage);
        this._stage.context.setCulling(this.useBothSides ? ContextGLTriangleFace.NONE : this._defaultCulling, camera.projection.coordinateSystem);
        if (!this.usesTangentSpace && this.cameraPositionIndex >= 0) {
            var pos = camera.scenePosition;
            this.vertexConstantData[this.cameraPositionIndex] = pos.x;
            this.vertexConstantData[this.cameraPositionIndex + 1] = pos.y;
            this.vertexConstantData[this.cameraPositionIndex + 2] = pos.z;
        }
    };
    /**
     * @inheritDoc
     */
    ShaderObjectBase.prototype._iDeactivate = function () {
        if (this.usesAnimation)
            this._renderPass.animationSet.deactivate(this, this._stage);
    };
    /**
     *
     *
     * @param renderable
     * @param stage
     * @param camera
     */
    ShaderObjectBase.prototype._iRender = function (renderable, camera, viewProjection) {
        if (renderable.renderableOwner.animator)
            renderable.renderableOwner.animator.setRenderState(this, renderable, this._stage, camera, this.numUsedVertexConstants, this.numUsedStreams);
        if (this.uvBufferIndex >= 0)
            this._stage.activateBuffer(this.uvBufferIndex, renderable.getVertexData(TriangleSubGeometry.UV_DATA), renderable.getVertexOffset(TriangleSubGeometry.UV_DATA), TriangleSubGeometry.UV_FORMAT);
        if (this.secondaryUVBufferIndex >= 0)
            this._stage.activateBuffer(this.secondaryUVBufferIndex, renderable.getVertexData(TriangleSubGeometry.SECONDARY_UV_DATA), renderable.getVertexOffset(TriangleSubGeometry.SECONDARY_UV_DATA), TriangleSubGeometry.SECONDARY_UV_FORMAT);
        if (this.normalBufferIndex >= 0)
            this._stage.activateBuffer(this.normalBufferIndex, renderable.getVertexData(TriangleSubGeometry.NORMAL_DATA), renderable.getVertexOffset(TriangleSubGeometry.NORMAL_DATA), TriangleSubGeometry.NORMAL_FORMAT);
        if (this.tangentBufferIndex >= 0)
            this._stage.activateBuffer(this.tangentBufferIndex, renderable.getVertexData(TriangleSubGeometry.TANGENT_DATA), renderable.getVertexOffset(TriangleSubGeometry.TANGENT_DATA), TriangleSubGeometry.TANGENT_FORMAT);
        if (this.colorBufferIndex >= 0)
            this._stage.activateBuffer(this.colorBufferIndex, renderable.getVertexData(LineSubGeometry.COLOR_DATA), renderable.getVertexOffset(LineSubGeometry.COLOR_DATA), LineSubGeometry.COLOR_FORMAT);
        if (this.usesUVTransform) {
            var uvTransform = renderable.renderableOwner.uvTransform.matrix;
            if (uvTransform) {
                this.vertexConstantData[this.uvTransformIndex] = uvTransform.a;
                this.vertexConstantData[this.uvTransformIndex + 1] = uvTransform.b;
                this.vertexConstantData[this.uvTransformIndex + 3] = uvTransform.tx;
                this.vertexConstantData[this.uvTransformIndex + 4] = uvTransform.c;
                this.vertexConstantData[this.uvTransformIndex + 5] = uvTransform.d;
                this.vertexConstantData[this.uvTransformIndex + 7] = uvTransform.ty;
            }
            else {
                this.vertexConstantData[this.uvTransformIndex] = 1;
                this.vertexConstantData[this.uvTransformIndex + 1] = 0;
                this.vertexConstantData[this.uvTransformIndex + 3] = 0;
                this.vertexConstantData[this.uvTransformIndex + 4] = 0;
                this.vertexConstantData[this.uvTransformIndex + 5] = 1;
                this.vertexConstantData[this.uvTransformIndex + 7] = 0;
            }
        }
        if (this.sceneNormalMatrixIndex >= 0)
            renderable.sourceEntity.inverseSceneTransform.copyRawDataTo(this.vertexConstantData, this.sceneNormalMatrixIndex, false);
        if (this.usesTangentSpace && this.cameraPositionIndex >= 0) {
            renderable.sourceEntity.inverseSceneTransform.copyRawDataTo(this._pInverseSceneMatrix);
            var pos = camera.scenePosition;
            var x = pos.x;
            var y = pos.y;
            var z = pos.z;
            this.vertexConstantData[this.cameraPositionIndex] = this._pInverseSceneMatrix[0] * x + this._pInverseSceneMatrix[4] * y + this._pInverseSceneMatrix[8] * z + this._pInverseSceneMatrix[12];
            this.vertexConstantData[this.cameraPositionIndex + 1] = this._pInverseSceneMatrix[1] * x + this._pInverseSceneMatrix[5] * y + this._pInverseSceneMatrix[9] * z + this._pInverseSceneMatrix[13];
            this.vertexConstantData[this.cameraPositionIndex + 2] = this._pInverseSceneMatrix[2] * x + this._pInverseSceneMatrix[6] * y + this._pInverseSceneMatrix[10] * z + this._pInverseSceneMatrix[14];
        }
    };
    ShaderObjectBase.prototype.invalidateProgram = function () {
        this._invalidProgram = true;
    };
    ShaderObjectBase.prototype.invalidateShader = function () {
        this._invalidShader = true;
        this._invalidProgram = true;
    };
    ShaderObjectBase.prototype.dispose = function () {
        this._programData.dispose();
        this._programData = null;
    };
    ShaderObjectBase.prototype._updateProgram = function () {
        this._invalidProgram = false;
        var compiler;
        if (this._invalidShader) {
            this._invalidShader = false;
            compiler = this.createCompiler(this._renderableClass, this._renderPass);
            compiler.compile();
        }
        this._calcAnimationCode(compiler.shadedTarget);
        var programData = this._stage.getProgramData(this._animationVertexCode + compiler.vertexCode, compiler.fragmentCode + this._animationFragmentCode + compiler.postAnimationFragmentCode);
        //check program data hasn't changed, keep count of program usages
        if (this._programData != programData) {
            if (this._programData)
                this._programData.dispose();
            this._programData = programData;
            programData.usages++;
        }
    };
    ShaderObjectBase.prototype._calcAnimationCode = function (shadedTarget) {
        //reset code
        this._animationVertexCode = "";
        this._animationFragmentCode = "";
        //check to see if GPU animation is used
        if (this.usesAnimation) {
            var animationSet = this._renderPass.animationSet;
            this._animationVertexCode += animationSet.getAGALVertexCode(this);
            if (this.uvDependencies > 0 && !this.usesUVTransform)
                this._animationVertexCode += animationSet.getAGALUVCode(this);
            if (this.usesFragmentAnimation)
                this._animationFragmentCode += animationSet.getAGALFragmentCode(this, shadedTarget);
            animationSet.doneAGALCode(this);
        }
        else {
            // simply write attributes to targets, do not animate them
            // projection will pick up on targets[0] to do the projection
            var len = this.animatableAttributes.length;
            for (var i = 0; i < len; ++i)
                this._animationVertexCode += "mov " + this.animationTargetRegisters[i] + ", " + this.animatableAttributes[i] + "\n";
            if (this.uvDependencies > 0 && !this.usesUVTransform)
                this._animationVertexCode += "mov " + this.uvTarget + "," + this.uvSource + "\n";
        }
    };
    return ShaderObjectBase;
})();
module.exports = ShaderObjectBase;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9TaGFkZXJPYmplY3RCYXNlLnRzIl0sIm5hbWVzIjpbIlNoYWRlck9iamVjdEJhc2UiLCJTaGFkZXJPYmplY3RCYXNlLmNvbnN0cnVjdG9yIiwiU2hhZGVyT2JqZWN0QmFzZS5wcm9ncmFtRGF0YSIsIlNoYWRlck9iamVjdEJhc2UuX2lJbmNsdWRlRGVwZW5kZW5jaWVzIiwiU2hhZGVyT2JqZWN0QmFzZS5jcmVhdGVDb21waWxlciIsIlNoYWRlck9iamVjdEJhc2UucmVzZXQiLCJTaGFkZXJPYmplY3RCYXNlLnBJbml0UmVnaXN0ZXJJbmRpY2VzIiwiU2hhZGVyT2JqZWN0QmFzZS5pbml0Q29uc3RhbnREYXRhIiwiU2hhZGVyT2JqZWN0QmFzZS5faUFjdGl2YXRlIiwiU2hhZGVyT2JqZWN0QmFzZS5faURlYWN0aXZhdGUiLCJTaGFkZXJPYmplY3RCYXNlLl9pUmVuZGVyIiwiU2hhZGVyT2JqZWN0QmFzZS5pbnZhbGlkYXRlUHJvZ3JhbSIsIlNoYWRlck9iamVjdEJhc2UuaW52YWxpZGF0ZVNoYWRlciIsIlNoYWRlck9iamVjdEJhc2UuZGlzcG9zZSIsIlNoYWRlck9iamVjdEJhc2UuX3VwZGF0ZVByb2dyYW0iLCJTaGFkZXJPYmplY3RCYXNlLl9jYWxjQW5pbWF0aW9uQ29kZSJdLCJtYXBwaW5ncyI6IkFBVUEsSUFBTyxlQUFlLFdBQWMseUNBQXlDLENBQUMsQ0FBQztBQUMvRSxJQUFPLG1CQUFtQixXQUFhLDZDQUE2QyxDQUFDLENBQUM7QUFLdEYsSUFBTyxxQkFBcUIsV0FBWSwrQ0FBK0MsQ0FBQyxDQUFDO0FBVXpGLElBQU8sa0JBQWtCLFdBQWEsc0RBQXNELENBQUMsQ0FBQztBQUs5RixBQVFBOzs7Ozs7O0dBREc7SUFDRyxnQkFBZ0I7SUFvTnJCQTs7T0FFR0E7SUFDSEEsU0F2TktBLGdCQUFnQkEsQ0F1TlRBLGVBQWdDQSxFQUFFQSxVQUEwQkEsRUFBRUEsS0FBV0E7UUFoTjdFQyxtQkFBY0EsR0FBV0EsSUFBSUEsQ0FBQ0E7UUFDOUJBLG9CQUFlQSxHQUFXQSxJQUFJQSxDQUFDQTtRQUMvQkEseUJBQW9CQSxHQUFVQSxFQUFFQSxDQUFDQTtRQUNqQ0EsMkJBQXNCQSxHQUFVQSxFQUFFQSxDQUFDQTtRQWNuQ0Esb0JBQWVBLEdBQVVBLHFCQUFxQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFFckRBLHlCQUFvQkEsR0FBaUJBLElBQUlBLEtBQUtBLEVBQVVBLENBQUNBO1FBNkNoRUEsK0JBQStCQTtRQUN4QkEsYUFBUUEsR0FBVUEsSUFBSUEsQ0FBQ0E7UUFDdkJBLGFBQVFBLEdBQVVBLElBQUlBLENBQUNBO1FBQ3ZCQSxhQUFRQSxHQUFVQSxJQUFJQSxDQUFDQTtRQTJFOUJBOztXQUVHQTtRQUNJQSwwQkFBcUJBLEdBQVdBLEtBQUtBLENBQUNBO1FBRXRDQSx1QkFBa0JBLEdBQWlCQSxJQUFJQSxLQUFLQSxFQUFVQSxDQUFDQTtRQUN2REEseUJBQW9CQSxHQUFpQkEsSUFBSUEsS0FBS0EsRUFBVUEsQ0FBQ0E7UUE4RC9EQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLGVBQWVBLENBQUNBO1FBQ3hDQSxJQUFJQSxDQUFDQSxXQUFXQSxHQUFHQSxVQUFVQSxDQUFDQTtRQUM5QkEsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsS0FBS0EsQ0FBQ0E7UUFDcEJBLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLE9BQU9BLENBQUNBO0lBQ3BDQSxDQUFDQTtJQWpOREQsc0JBQVdBLHlDQUFXQTthQUF0QkE7WUFFQ0UsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZUFBZUEsQ0FBQ0E7Z0JBQ3hCQSxJQUFJQSxDQUFDQSxjQUFjQSxFQUFFQSxDQUFDQTtZQUV2QkEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0E7UUFDMUJBLENBQUNBOzs7T0FBQUY7SUE2TU1BLGdEQUFxQkEsR0FBNUJBO1FBRUNHLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLHFCQUFxQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7SUFDOUNBLENBQUNBO0lBRURIOzs7Ozs7O09BT0dBO0lBQ0lBLHlDQUFjQSxHQUFyQkEsVUFBc0JBLGVBQWdDQSxFQUFFQSxVQUEwQkE7UUFFakZJLE1BQU1BLENBQUNBLElBQUlBLGtCQUFrQkEsQ0FBQ0EsZUFBZUEsRUFBRUEsVUFBVUEsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7SUFDbEVBLENBQUNBO0lBRURKOztPQUVHQTtJQUNJQSxnQ0FBS0EsR0FBWkE7UUFFQ0ssSUFBSUEsQ0FBQ0Esc0JBQXNCQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUNoQ0EsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUM1QkEsSUFBSUEsQ0FBQ0EsaUJBQWlCQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUMzQkEsSUFBSUEsQ0FBQ0EsbUJBQW1CQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUM3QkEsSUFBSUEsQ0FBQ0EsY0FBY0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDeEJBLElBQUlBLENBQUNBLHVCQUF1QkEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDakNBLElBQUlBLENBQUNBLHFCQUFxQkEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDL0JBLElBQUlBLENBQUNBLG9CQUFvQkEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDOUJBLElBQUlBLENBQUNBLG1CQUFtQkEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDN0JBLElBQUlBLENBQUNBLHFCQUFxQkEsR0FBR0EsS0FBS0EsQ0FBQ0E7UUFDbkNBLElBQUlBLENBQUNBLHFCQUFxQkEsR0FBR0EsS0FBS0EsQ0FBQ0E7UUFDbkNBLElBQUlBLENBQUNBLGdCQUFnQkEsR0FBR0EsS0FBS0EsQ0FBQ0E7UUFDOUJBLElBQUlBLENBQUNBLGNBQWNBLEdBQUdBLEtBQUtBLENBQUNBO1FBQzVCQSxJQUFJQSxDQUFDQSxxQkFBcUJBLEdBQUdBLEtBQUtBLENBQUNBO0lBQ3BDQSxDQUFDQTtJQUVNTCwrQ0FBb0JBLEdBQTNCQTtRQUVDTSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1FBQzNCQSxJQUFJQSxDQUFDQSxtQkFBbUJBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1FBQzlCQSxJQUFJQSxDQUFDQSxhQUFhQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN4QkEsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUMzQkEsSUFBSUEsQ0FBQ0Esc0JBQXNCQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNqQ0EsSUFBSUEsQ0FBQ0EsaUJBQWlCQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUM1QkEsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUMzQkEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUM3QkEsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUMzQkEsSUFBSUEsQ0FBQ0Esc0JBQXNCQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUNsQ0EsQ0FBQ0E7SUFFRE47O09BRUdBO0lBQ0lBLDJDQUFnQkEsR0FBdkJBLFVBQXdCQSxhQUFpQ0EsRUFBRUEsb0JBQWtDQSxFQUFFQSx3QkFBc0NBLEVBQUVBLFFBQWVBLEVBQUVBLFFBQWVBO1FBRXRLTyxBQUNBQSw4Q0FEOENBO1FBQzlDQSxJQUFJQSxDQUFDQSxzQkFBc0JBLEdBQUdBLGFBQWFBLENBQUNBLHNCQUFzQkEsQ0FBQ0E7UUFDbkVBLElBQUlBLENBQUNBLHdCQUF3QkEsR0FBR0EsYUFBYUEsQ0FBQ0Esd0JBQXdCQSxDQUFDQTtRQUN2RUEsSUFBSUEsQ0FBQ0EsY0FBY0EsR0FBR0EsYUFBYUEsQ0FBQ0EsY0FBY0EsQ0FBQ0E7UUFDbkRBLElBQUlBLENBQUNBLGVBQWVBLEdBQUdBLGFBQWFBLENBQUNBLGVBQWVBLENBQUNBO1FBQ3JEQSxJQUFJQSxDQUFDQSxlQUFlQSxHQUFHQSxhQUFhQSxDQUFDQSxlQUFlQSxDQUFDQTtRQUNyREEsSUFBSUEsQ0FBQ0Esd0JBQXdCQSxHQUFHQSxhQUFhQSxDQUFDQSx3QkFBd0JBLENBQUNBO1FBRXZFQSxJQUFJQSxDQUFDQSxvQkFBb0JBLEdBQUdBLG9CQUFvQkEsQ0FBQ0E7UUFDakRBLElBQUlBLENBQUNBLHdCQUF3QkEsR0FBR0Esd0JBQXdCQSxDQUFDQTtRQUN6REEsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsUUFBUUEsQ0FBQ0E7UUFDekJBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLFFBQVFBLENBQUNBO1FBRXpCQSxJQUFJQSxDQUFDQSxrQkFBa0JBLENBQUNBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLHNCQUFzQkEsR0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDL0RBLElBQUlBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0Esd0JBQXdCQSxHQUFDQSxDQUFDQSxDQUFDQTtRQUVuRUEsQUFDQUEsZ0RBRGdEQTtRQUNoREEsSUFBSUEsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLENBQUNBLEdBQUdBLEVBQUVBLENBQUNBO1FBQ3REQSxJQUFJQSxDQUFDQSxvQkFBb0JBLENBQUNBLElBQUlBLENBQUNBLGdCQUFnQkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDekRBLElBQUlBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFDQSxHQUFHQSxDQUFDQTtRQUM3REEsSUFBSUEsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1FBRXpEQSxBQUNBQSxtREFEbURBO1FBQ25EQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ2hDQSxJQUFJQSxDQUFDQSxrQkFBa0JBLENBQUNBLElBQUlBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDbkRBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUN2REEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQ3ZEQSxJQUFJQSxDQUFDQSxrQkFBa0JBLENBQUNBLElBQUlBLENBQUNBLGdCQUFnQkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDdkRBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUN2REEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQ3ZEQSxJQUFJQSxDQUFDQSxrQkFBa0JBLENBQUNBLElBQUlBLENBQUNBLGdCQUFnQkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDdkRBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUN4REEsQ0FBQ0E7UUFFREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsbUJBQW1CQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUNqQ0EsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxJQUFJQSxDQUFDQSxtQkFBbUJBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO0lBQzVEQSxDQUFDQTtJQUdEUDs7T0FFR0E7SUFDSUEscUNBQVVB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QSxDQUFDQSxpQkFBaUJBLENBQUNBLEVBQUVBLG1CQUFtQkEsQ0FBQ0EsbUJBQW1CQSxDQUFDQSxDQUFDQTtRQUV0T0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsaUJBQWlCQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUMvQkEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsaUJBQWlCQSxFQUFFQSxVQUFVQSxDQUFDQSxhQUFhQSxDQUFDQSxtQkFBbUJBLENBQUNBLFdBQVdBLENBQUNBLEVBQUVBLFVBQVVBLENBQUNBLGVBQWVBLENBQUNBLG1CQUFtQkEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsRUFBRUEsbUJBQW1CQSxDQUFDQSxhQUFhQSxDQUFDQSxDQUFDQTtRQUUvTUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUNoQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxFQUFFQSxVQUFVQSxDQUFDQSxhQUFhQSxDQUFDQSxtQkFBbUJBLENBQUNBLFlBQVlBLENBQUNBLEVBQUVBLFVBQVVBLENBQUNBLGVBQWVBLENBQUNBLG1CQUFtQkEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsRUFBRUEsbUJBQW1CQSxDQUFDQSxjQUFjQSxDQUFDQSxDQUFDQTtRQUVuTkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUM5QkEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxFQUFFQSxVQUFVQSxDQUFDQSxhQUFhQSxDQUFDQSxlQUFlQSxDQUFDQSxVQUFVQSxDQUFDQSxFQUFFQSxVQUFVQSxDQUFDQSxlQUFlQSxDQUFDQSxlQUFlQSxDQUFDQSxVQUFVQSxDQUFDQSxFQUFFQSxlQUFlQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQTtRQUcvTEEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDMUJBLElBQUlBLFdBQVdBLEdBQVVBLFVBQVVBLENBQUNBLGVBQWVBLENBQUNBLFdBQVdBLENBQUNBLE1BQU1BLENBQUNBO1lBRXZFQSxFQUFFQSxDQUFDQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDakJBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxHQUFHQSxXQUFXQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDL0RBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxXQUFXQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDbkVBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxXQUFXQSxDQUFDQSxFQUFFQSxDQUFDQTtnQkFDcEVBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxXQUFXQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDbkVBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxXQUFXQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDbkVBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxXQUFXQSxDQUFDQSxFQUFFQSxDQUFDQTtZQUNyRUEsQ0FBQ0E7WUFBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ1BBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFDbkRBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFDdkRBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFDdkRBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFDdkRBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFDdkRBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUN4REEsQ0FBQ0E7UUFDRkEsQ0FBQ0E7UUFFREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0Esc0JBQXNCQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUNwQ0EsVUFBVUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EscUJBQXFCQSxDQUFDQSxhQUFhQSxDQUFDQSxJQUFJQSxDQUFDQSxrQkFBa0JBLEVBQUVBLElBQUlBLENBQUNBLHNCQUFzQkEsRUFBRUEsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFFMUhBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLGdCQUFnQkEsSUFBSUEsSUFBSUEsQ0FBQ0EsbUJBQW1CQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUU1REEsVUFBVUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EscUJBQXFCQSxDQUFDQSxhQUFhQSxDQUFDQSxJQUFJQSxDQUFDQSxvQkFBb0JBLENBQUNBLENBQUNBO1lBQ3ZGQSxJQUFJQSxHQUFHQSxHQUFZQSxNQUFNQSxDQUFDQSxhQUFhQSxDQUFDQTtZQUN4Q0EsSUFBSUEsQ0FBQ0EsR0FBVUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDckJBLElBQUlBLENBQUNBLEdBQVVBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1lBQ3JCQSxJQUFJQSxDQUFDQSxHQUFVQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUVyQkEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxJQUFJQSxDQUFDQSxtQkFBbUJBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxvQkFBb0JBLENBQUNBLENBQUNBLENBQUNBLEdBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7WUFDckxBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsbUJBQW1CQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxvQkFBb0JBLENBQUNBLENBQUNBLENBQUNBLEdBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxvQkFBb0JBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO1lBQ3pMQSxJQUFJQSxDQUFDQSxrQkFBa0JBLENBQUNBLElBQUlBLENBQUNBLG1CQUFtQkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxvQkFBb0JBLENBQUNBLENBQUNBLENBQUNBLEdBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLG9C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QUFFRCxBQUEwQixpQkFBakIsZ0JBQWdCLENBQUMiLCJmaWxlIjoiY29tcGlsYXRpb24vU2hhZGVyT2JqZWN0QmFzZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmxlbmRNb2RlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9iYXNlL0JsZW5kTW9kZVwiKTtcclxuaW1wb3J0IE1hdHJpeFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9nZW9tL01hdHJpeFwiKTtcclxuaW1wb3J0IE1hdHJpeDNEXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2dlb20vTWF0cml4M0RcIik7XHJcbmltcG9ydCBNYXRyaXgzRFV0aWxzXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9NYXRyaXgzRFV0aWxzXCIpO1xyXG5pbXBvcnQgUmVjdGFuZ2xlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9nZW9tL1JlY3RhbmdsZVwiKTtcclxuaW1wb3J0IFZlY3RvcjNEXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2dlb20vVmVjdG9yM0RcIik7XHJcbmltcG9ydCBFdmVudFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9ldmVudHMvRXZlbnRcIik7XHJcbmltcG9ydCBBcmd1bWVudEVycm9yXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZXJyb3JzL0FyZ3VtZW50RXJyb3JcIik7XHJcbmltcG9ydCBUZXh0dXJlMkRCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvdGV4dHVyZXMvVGV4dHVyZTJEQmFzZVwiKTtcclxuXHJcbmltcG9ydCBMaW5lU3ViR2VvbWV0cnlcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9iYXNlL0xpbmVTdWJHZW9tZXRyeVwiKTtcclxuaW1wb3J0IFRyaWFuZ2xlU3ViR2VvbWV0cnlcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvYmFzZS9UcmlhbmdsZVN1Ykdlb21ldHJ5XCIpO1xyXG5pbXBvcnQgQ2FtZXJhXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2VudGl0aWVzL0NhbWVyYVwiKTtcclxuXHJcbmltcG9ydCBJQ29udGV4dEdMXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL0lDb250ZXh0R0xcIik7XHJcbmltcG9ydCBDb250ZXh0R0xDb21wYXJlTW9kZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL0NvbnRleHRHTENvbXBhcmVNb2RlXCIpO1xyXG5pbXBvcnQgQ29udGV4dEdMVHJpYW5nbGVGYWNlXHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL0NvbnRleHRHTFRyaWFuZ2xlRmFjZVwiKTtcclxuaW1wb3J0IENvbnRleHRHTEJsZW5kRmFjdG9yXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvQ29udGV4dEdMQmxlbmRGYWN0b3JcIik7XHJcbmltcG9ydCBTdGFnZVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL1N0YWdlXCIpO1xyXG5pbXBvcnQgUHJvZ3JhbURhdGFcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL3Bvb2wvUHJvZ3JhbURhdGFcIik7XHJcblxyXG5pbXBvcnQgQW5pbWF0aW9uU2V0QmFzZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9BbmltYXRpb25TZXRCYXNlXCIpO1xyXG5pbXBvcnQgQW5pbWF0b3JCYXNlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvQW5pbWF0b3JCYXNlXCIpO1xyXG5pbXBvcnQgQW5pbWF0aW9uUmVnaXN0ZXJDYWNoZVx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYW5pbWF0b3JzL2RhdGEvQW5pbWF0aW9uUmVnaXN0ZXJDYWNoZVwiKTtcclxuaW1wb3J0IFJlbmRlcmFibGVCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvcG9vbC9SZW5kZXJhYmxlQmFzZVwiKTtcclxuaW1wb3J0IElSZW5kZXJQYXNzQmFzZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL3Bhc3Nlcy9JUmVuZGVyUGFzc0Jhc2VcIik7XHJcbmltcG9ydCBTaGFkZXJDb21waWxlckJhc2VcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vU2hhZGVyQ29tcGlsZXJCYXNlXCIpO1xyXG5pbXBvcnQgU2hhZGVyUmVnaXN0ZXJDYWNoZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9TaGFkZXJSZWdpc3RlckNhY2hlXCIpO1xyXG5pbXBvcnQgSVJlbmRlcmFibGVDbGFzc1x0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL3Bvb2wvSVJlbmRlcmFibGVDbGFzc1wiKTtcclxuaW1wb3J0IFJlbmRlcmVyQmFzZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYmFzZS9SZW5kZXJlckJhc2VcIik7XHJcblxyXG4vKipcclxuICogU2hhZGVyT2JqZWN0QmFzZSBrZWVwcyB0cmFjayBvZiB0aGUgbnVtYmVyIG9mIGRlcGVuZGVuY2llcyBmb3IgXCJuYW1lZCByZWdpc3RlcnNcIiB1c2VkIGFjcm9zcyBhIHBhc3MuXHJcbiAqIE5hbWVkIHJlZ2lzdGVycyBhcmUgdGhhdCBhcmUgbm90IG5lY2Vzc2FyaWx5IGxpbWl0ZWQgdG8gYSBzaW5nbGUgbWV0aG9kLiBUaGV5IGFyZSBjcmVhdGVkIGJ5IHRoZSBjb21waWxlciBhbmRcclxuICogcGFzc2VkIG9uIHRvIG1ldGhvZHMuIFRoZSBjb21waWxlciB1c2VzIHRoZSByZXN1bHRzIHRvIHJlc2VydmUgdXNhZ2VzIHRocm91Z2ggUmVnaXN0ZXJQb29sLCB3aGljaCBjYW4gYmUgcmVtb3ZlZFxyXG4gKiBlYWNoIHRpbWUgYSBtZXRob2QgaGFzIGJlZW4gY29tcGlsZWQgaW50byB0aGUgc2hhZGVyLlxyXG4gKlxyXG4gKiBAc2VlIFJlZ2lzdGVyUG9vbC5hZGRVc2FnZVxyXG4gKi9cclxuY2xhc3MgU2hhZGVyT2JqZWN0QmFzZVxyXG57XHJcblx0cHJpdmF0ZSBfcmVuZGVyYWJsZUNsYXNzOklSZW5kZXJhYmxlQ2xhc3M7XHJcblx0cHJpdmF0ZSBfcmVuZGVyUGFzczpJUmVuZGVyUGFzc0Jhc2U7XHJcblx0cHVibGljIF9zdGFnZTpTdGFnZTtcclxuXHRwcml2YXRlIF9wcm9ncmFtRGF0YTpQcm9ncmFtRGF0YTtcclxuXHJcblx0cHJpdmF0ZSBfaW52YWxpZFNoYWRlcjpib29sZWFuID0gdHJ1ZTtcclxuXHRwcml2YXRlIF9pbnZhbGlkUHJvZ3JhbTpib29sZWFuID0gdHJ1ZTtcclxuXHRwcml2YXRlIF9hbmltYXRpb25WZXJ0ZXhDb2RlOnN0cmluZyA9IFwiXCI7XHJcblx0cHJpdmF0ZSBfYW5pbWF0aW9uRnJhZ21lbnRDb2RlOnN0cmluZyA9IFwiXCI7XHJcblxyXG5cdHB1YmxpYyBnZXQgcHJvZ3JhbURhdGEoKTpQcm9ncmFtRGF0YVxyXG5cdHtcclxuXHRcdGlmICh0aGlzLl9pbnZhbGlkUHJvZ3JhbSlcclxuXHRcdFx0dGhpcy5fdXBkYXRlUHJvZ3JhbSgpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLl9wcm9ncmFtRGF0YTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBwcm9maWxlOnN0cmluZztcclxuXHJcblx0cHVibGljIHVzZXNBbmltYXRpb246Ym9vbGVhbjtcclxuXHJcblx0cHJpdmF0ZSBfZGVmYXVsdEN1bGxpbmc6c3RyaW5nID0gQ29udGV4dEdMVHJpYW5nbGVGYWNlLkJBQ0s7XHJcblxyXG5cdHB1YmxpYyBfcEludmVyc2VTY2VuZU1hdHJpeDpBcnJheTxudW1iZXI+ID0gbmV3IEFycmF5PG51bWJlcj4oKTtcclxuXHJcblx0cHVibGljIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGU6QW5pbWF0aW9uUmVnaXN0ZXJDYWNoZTtcclxuXHJcblx0LyoqXHJcblx0ICogVGhlIGFtb3VudCBvZiB1c2VkIHZlcnRleCBjb25zdGFudHMgaW4gdGhlIHZlcnRleCBjb2RlLiBVc2VkIGJ5IHRoZSBhbmltYXRpb24gY29kZSBnZW5lcmF0aW9uIHRvIGtub3cgZnJvbSB3aGljaCBpbmRleCBvbiByZWdpc3RlcnMgYXJlIGF2YWlsYWJsZS5cclxuXHQgKi9cclxuXHRwdWJsaWMgbnVtVXNlZFZlcnRleENvbnN0YW50czpudW1iZXI7XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRoZSBhbW91bnQgb2YgdXNlZCBmcmFnbWVudCBjb25zdGFudHMgaW4gdGhlIGZyYWdtZW50IGNvZGUuIFVzZWQgYnkgdGhlIGFuaW1hdGlvbiBjb2RlIGdlbmVyYXRpb24gdG8ga25vdyBmcm9tIHdoaWNoIGluZGV4IG9uIHJlZ2lzdGVycyBhcmUgYXZhaWxhYmxlLlxyXG5cdCAqL1xyXG5cdHB1YmxpYyBudW1Vc2VkRnJhZ21lbnRDb25zdGFudHM6bnVtYmVyO1xyXG5cclxuXHQvKipcclxuXHQgKiBUaGUgYW1vdW50IG9mIHVzZWQgdmVydGV4IHN0cmVhbXMgaW4gdGhlIHZlcnRleCBjb2RlLiBVc2VkIGJ5IHRoZSBhbmltYXRpb24gY29kZSBnZW5lcmF0aW9uIHRvIGtub3cgZnJvbSB3aGljaCBpbmRleCBvbiBzdHJlYW1zIGFyZSBhdmFpbGFibGUuXHJcblx0ICovXHJcblx0cHVibGljIG51bVVzZWRTdHJlYW1zOm51bWJlcjtcclxuXHJcblx0LyoqXHJcblx0ICpcclxuXHQgKi9cclxuXHRwdWJsaWMgbnVtVXNlZFRleHR1cmVzOm51bWJlcjtcclxuXHJcblx0LyoqXHJcblx0ICpcclxuXHQgKi9cclxuXHRwdWJsaWMgbnVtVXNlZFZhcnlpbmdzOm51bWJlcjtcclxuXHJcblx0cHVibGljIGFuaW1hdGFibGVBdHRyaWJ1dGVzOkFycmF5PHN0cmluZz47XHJcblx0cHVibGljIGFuaW1hdGlvblRhcmdldFJlZ2lzdGVyczpBcnJheTxzdHJpbmc+O1xyXG5cdHB1YmxpYyB1dlNvdXJjZTpzdHJpbmc7XHJcblx0cHVibGljIHV2VGFyZ2V0OnN0cmluZztcclxuXHJcblx0cHVibGljIHVzZUFscGhhUHJlbXVsdGlwbGllZDpib29sZWFuO1xyXG5cdHB1YmxpYyB1c2VCb3RoU2lkZXM6Ym9vbGVhbjtcclxuXHRwdWJsaWMgdXNlTWlwbWFwcGluZzpib29sZWFuO1xyXG5cdHB1YmxpYyB1c2VTbW9vdGhUZXh0dXJlczpib29sZWFuO1xyXG5cdHB1YmxpYyByZXBlYXRUZXh0dXJlczpib29sZWFuO1xyXG5cdHB1YmxpYyB1c2VzVVZUcmFuc2Zvcm06Ym9vbGVhbjtcclxuXHRwdWJsaWMgYWxwaGFUaHJlc2hvbGQ6bnVtYmVyO1xyXG5cdHB1YmxpYyB0ZXh0dXJlOlRleHR1cmUyREJhc2U7XHJcblx0cHVibGljIGNvbG9yOm51bWJlcjtcclxuXHJcblxyXG5cdC8vc2V0IGFtYmllbnQgdmFsdWVzIHRvIGRlZmF1bHRcclxuXHRwdWJsaWMgYW1iaWVudFI6bnVtYmVyID0gMHhGRjtcclxuXHRwdWJsaWMgYW1iaWVudEc6bnVtYmVyID0gMHhGRjtcclxuXHRwdWJsaWMgYW1iaWVudEI6bnVtYmVyID0gMHhGRjtcclxuXHJcblx0LyoqXHJcblx0ICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHBhc3MgcmVxdWlyZXMgYW55IGZyYWdtZW50IGFuaW1hdGlvbiBjb2RlLlxyXG5cdCAqL1xyXG5cdHB1YmxpYyB1c2VzRnJhZ21lbnRBbmltYXRpb246Ym9vbGVhbjtcclxuXHJcblx0LyoqXHJcblx0ICogVGhlIGFtb3VudCBvZiBkZXBlbmRlbmNpZXMgb24gdGhlIHByb2plY3RlZCBwb3NpdGlvbi5cclxuXHQgKi9cclxuXHRwdWJsaWMgcHJvamVjdGlvbkRlcGVuZGVuY2llczpudW1iZXI7XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRoZSBhbW91bnQgb2YgZGVwZW5kZW5jaWVzIG9uIHRoZSBub3JtYWwgdmVjdG9yLlxyXG5cdCAqL1xyXG5cdHB1YmxpYyBub3JtYWxEZXBlbmRlbmNpZXM6bnVtYmVyO1xyXG5cclxuXHQvKipcclxuXHQgKiBUaGUgYW1vdW50IG9mIGRlcGVuZGVuY2llcyBvbiB0aGUgdmVydGV4IGNvbG9yLlxyXG5cdCAqL1xyXG5cdHB1YmxpYyBjb2xvckRlcGVuZGVuY2llczpudW1iZXI7XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRoZSBhbW91bnQgb2YgZGVwZW5kZW5jaWVzIG9uIHRoZSB2aWV3IGRpcmVjdGlvbi5cclxuXHQgKi9cclxuXHRwdWJsaWMgdmlld0RpckRlcGVuZGVuY2llczpudW1iZXI7XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRoZSBhbW91bnQgb2YgZGVwZW5kZW5jaWVzIG9uIHRoZSBwcmltYXJ5IFVWIGNvb3JkaW5hdGVzLlxyXG5cdCAqL1xyXG5cdHB1YmxpYyB1dkRlcGVuZGVuY2llczpudW1iZXI7XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRoZSBhbW91bnQgb2YgZGVwZW5kZW5jaWVzIG9uIHRoZSBzZWNvbmRhcnkgVVYgY29vcmRpbmF0ZXMuXHJcblx0ICovXHJcblx0cHVibGljIHNlY29uZGFyeVVWRGVwZW5kZW5jaWVzOm51bWJlcjtcclxuXHJcblx0LyoqXHJcblx0ICogVGhlIGFtb3VudCBvZiBkZXBlbmRlbmNpZXMgb24gdGhlIGxvY2FsIHBvc2l0aW9uLiBUaGlzIGNhbiBiZSAwIHdoaWxlIGhhc0dsb2JhbFBvc0RlcGVuZGVuY2llcyBpcyB0cnVlIHdoZW5cclxuXHQgKiB0aGUgZ2xvYmFsIHBvc2l0aW9uIGlzIHVzZWQgYXMgYSB0ZW1wb3JhcnkgdmFsdWUgKGZlIHRvIGNhbGN1bGF0ZSB0aGUgdmlldyBkaXJlY3Rpb24pXHJcblx0ICovXHJcblx0cHVibGljIGxvY2FsUG9zRGVwZW5kZW5jaWVzOm51bWJlcjtcclxuXHJcblx0LyoqXHJcblx0ICogVGhlIGFtb3VudCBvZiBkZXBlbmRlbmNpZXMgb24gdGhlIGdsb2JhbCBwb3NpdGlvbi4gVGhpcyBjYW4gYmUgMCB3aGlsZSBoYXNHbG9iYWxQb3NEZXBlbmRlbmNpZXMgaXMgdHJ1ZSB3aGVuXHJcblx0ICogdGhlIGdsb2JhbCBwb3NpdGlvbiBpcyB1c2VkIGFzIGEgdGVtcG9yYXJ5IHZhbHVlIChmZSB0byBjYWxjdWxhdGUgdGhlIHZpZXcgZGlyZWN0aW9uKVxyXG5cdCAqL1xyXG5cdHB1YmxpYyBnbG9iYWxQb3NEZXBlbmRlbmNpZXM6bnVtYmVyO1xyXG5cclxuXHQvKipcclxuXHQgKiBUaGUgYW1vdW50IG9mIHRhbmdlbnQgdmVjdG9yIGRlcGVuZGVuY2llcyAoZnJhZ21lbnQgc2hhZGVyKS5cclxuXHQgKi9cclxuXHRwdWJsaWMgdGFuZ2VudERlcGVuZGVuY2llczpudW1iZXI7XHJcblxyXG5cdC8qKlxyXG5cdCAqXHJcblx0ICovXHJcblx0cHVibGljIG91dHB1dHNOb3JtYWxzOmJvb2xlYW47XHJcblxyXG5cdC8qKlxyXG5cdCAqXHJcblx0ICovXHJcblx0cHVibGljIG91dHB1dHNDb2xvcnM6Ym9vbGVhbjtcclxuXHJcblx0LyoqXHJcblx0ICogSW5kaWNhdGVzIHdoZXRoZXIgb3Igbm90IG5vcm1hbCBjYWxjdWxhdGlvbnMgYXJlIGV4cGVjdGVkIGluIHRhbmdlbnQgc3BhY2UuIFRoaXMgaXMgb25seSB0aGUgY2FzZSBpZiBubyB3b3JsZC1zcGFjZVxyXG5cdCAqIGRlcGVuZGVuY2llcyBleGlzdC5cclxuXHQgKi9cclxuXHRwdWJsaWMgdXNlc1RhbmdlbnRTcGFjZTpib29sZWFuO1xyXG5cclxuXHQvKipcclxuXHQgKiBJbmRpY2F0ZXMgd2hldGhlciBvciBub3Qgbm9ybWFsIGNhbGN1bGF0aW9ucyBhcmUgb3V0cHV0IGluIHRhbmdlbnQgc3BhY2UuXHJcblx0ICovXHJcblx0cHVibGljIG91dHB1dHNUYW5nZW50Tm9ybWFsczpib29sZWFuO1xyXG5cclxuXHQvKipcclxuXHQgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGVyZSBhcmUgYW55IGRlcGVuZGVuY2llcyBvbiB0aGUgd29ybGQtc3BhY2UgcG9zaXRpb24gdmVjdG9yLlxyXG5cdCAqL1xyXG5cdHB1YmxpYyB1c2VzR2xvYmFsUG9zRnJhZ21lbnQ6Ym9vbGVhbiA9IGZhbHNlO1xyXG5cclxuXHRwdWJsaWMgdmVydGV4Q29uc3RhbnREYXRhOkFycmF5PG51bWJlcj4gPSBuZXcgQXJyYXk8bnVtYmVyPigpO1xyXG5cdHB1YmxpYyBmcmFnbWVudENvbnN0YW50RGF0YTpBcnJheTxudW1iZXI+ID0gbmV3IEFycmF5PG51bWJlcj4oKTtcclxuXHJcblx0LyoqXHJcblx0ICogVGhlIGluZGV4IGZvciB0aGUgY29tbW9uIGRhdGEgcmVnaXN0ZXIuXHJcblx0ICovXHJcblx0cHVibGljIGNvbW1vbnNEYXRhSW5kZXg6bnVtYmVyO1xyXG5cclxuXHQvKipcclxuXHQgKiBUaGUgaW5kZXggZm9yIHRoZSBVViB2ZXJ0ZXggYXR0cmlidXRlIHN0cmVhbS5cclxuXHQgKi9cclxuXHRwdWJsaWMgdXZCdWZmZXJJbmRleDpudW1iZXI7XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRoZSBpbmRleCBmb3IgdGhlIHNlY29uZGFyeSBVViB2ZXJ0ZXggYXR0cmlidXRlIHN0cmVhbS5cclxuXHQgKi9cclxuXHRwdWJsaWMgc2Vjb25kYXJ5VVZCdWZmZXJJbmRleDpudW1iZXI7XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRoZSBpbmRleCBmb3IgdGhlIHZlcnRleCBub3JtYWwgYXR0cmlidXRlIHN0cmVhbS5cclxuXHQgKi9cclxuXHRwdWJsaWMgbm9ybWFsQnVmZmVySW5kZXg6bnVtYmVyO1xyXG5cclxuXHQvKipcclxuXHQgKiBUaGUgaW5kZXggZm9yIHRoZSBjb2xvciBhdHRyaWJ1dGUgc3RyZWFtLlxyXG5cdCAqL1xyXG5cdHB1YmxpYyBjb2xvckJ1ZmZlckluZGV4Om51bWJlcjtcclxuXHJcblx0LyoqXHJcblx0ICogVGhlIGluZGV4IGZvciB0aGUgdmVydGV4IHRhbmdlbnQgYXR0cmlidXRlIHN0cmVhbS5cclxuXHQgKi9cclxuXHRwdWJsaWMgdGFuZ2VudEJ1ZmZlckluZGV4Om51bWJlcjtcclxuXHJcblx0LyoqXHJcblx0ICogVGhlIGluZGV4IG9mIHRoZSB2ZXJ0ZXggY29uc3RhbnQgY29udGFpbmluZyB0aGUgdmlldyBtYXRyaXguXHJcblx0ICovXHJcblx0cHVibGljIHZpZXdNYXRyaXhJbmRleDpudW1iZXI7XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRoZSBpbmRleCBvZiB0aGUgdmVydGV4IGNvbnN0YW50IGNvbnRhaW5pbmcgdGhlIHNjZW5lIG1hdHJpeC5cclxuXHQgKi9cclxuXHRwdWJsaWMgc2NlbmVNYXRyaXhJbmRleDpudW1iZXI7XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRoZSBpbmRleCBvZiB0aGUgdmVydGV4IGNvbnN0YW50IGNvbnRhaW5pbmcgdGhlIHVuaWZvcm0gc2NlbmUgbWF0cml4ICh0aGUgaW52ZXJzZSB0cmFuc3Bvc2UpLlxyXG5cdCAqL1xyXG5cdHB1YmxpYyBzY2VuZU5vcm1hbE1hdHJpeEluZGV4Om51bWJlcjtcclxuXHJcblx0LyoqXHJcblx0ICogVGhlIGluZGV4IG9mIHRoZSB2ZXJ0ZXggY29uc3RhbnQgY29udGFpbmluZyB0aGUgY2FtZXJhIHBvc2l0aW9uLlxyXG5cdCAqL1xyXG5cdHB1YmxpYyBjYW1lcmFQb3NpdGlvbkluZGV4Om51bWJlcjtcclxuXHJcblx0LyoqXHJcblx0ICogVGhlIGluZGV4IGZvciB0aGUgVVYgdHJhbnNmb3JtYXRpb24gbWF0cml4IHZlcnRleCBjb25zdGFudC5cclxuXHQgKi9cclxuXHRwdWJsaWMgdXZUcmFuc2Zvcm1JbmRleDpudW1iZXI7XHJcblxyXG5cdC8qKlxyXG5cdCAqIENyZWF0ZXMgYSBuZXcgTWV0aG9kQ29tcGlsZXJWTyBvYmplY3QuXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IocmVuZGVyYWJsZUNsYXNzOklSZW5kZXJhYmxlQ2xhc3MsIHJlbmRlclBhc3M6SVJlbmRlclBhc3NCYXNlLCBzdGFnZTpTdGFnZSlcclxuXHR7XHJcblx0XHR0aGlzLl9yZW5kZXJhYmxlQ2xhc3MgPSByZW5kZXJhYmxlQ2xhc3M7XHJcblx0XHR0aGlzLl9yZW5kZXJQYXNzID0gcmVuZGVyUGFzcztcclxuXHRcdHRoaXMuX3N0YWdlID0gc3RhZ2U7XHJcblx0XHR0aGlzLnByb2ZpbGUgPSB0aGlzLl9zdGFnZS5wcm9maWxlO1xyXG5cdH1cclxuXHJcblx0cHVibGljIF9pSW5jbHVkZURlcGVuZGVuY2llcygpXHJcblx0e1xyXG5cdFx0dGhpcy5fcmVuZGVyUGFzcy5faUluY2x1ZGVEZXBlbmRlbmNpZXModGhpcyk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBGYWN0b3J5IG1ldGhvZCB0byBjcmVhdGUgYSBjb25jcmV0ZSBjb21waWxlciBvYmplY3QgZm9yIHRoaXMgb2JqZWN0XHJcblx0ICpcclxuXHQgKiBAcGFyYW0gcmVuZGVyYWJsZUNsYXNzXHJcblx0ICogQHBhcmFtIHJlbmRlclBhc3NcclxuXHQgKiBAcGFyYW0gc3RhZ2VcclxuXHQgKiBAcmV0dXJucyB7U2hhZGVyQ29tcGlsZXJCYXNlfVxyXG5cdCAqL1xyXG5cdHB1YmxpYyBjcmVhdGVDb21waWxlcihyZW5kZXJhYmxlQ2xhc3M6SVJlbmRlcmFibGVDbGFzcywgcmVuZGVyUGFzczpJUmVuZGVyUGFzc0Jhc2UpOlNoYWRlckNvbXBpbGVyQmFzZVxyXG5cdHtcclxuXHRcdHJldHVybiBuZXcgU2hhZGVyQ29tcGlsZXJCYXNlKHJlbmRlcmFibGVDbGFzcywgcmVuZGVyUGFzcywgdGhpcyk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBDbGVhcnMgZGVwZW5kZW5jeSBjb3VudHMgZm9yIGFsbCByZWdpc3RlcnMuIENhbGxlZCB3aGVuIHJlY29tcGlsaW5nIGEgcGFzcy5cclxuXHQgKi9cclxuXHRwdWJsaWMgcmVzZXQoKVxyXG5cdHtcclxuXHRcdHRoaXMucHJvamVjdGlvbkRlcGVuZGVuY2llcyA9IDA7XHJcblx0XHR0aGlzLm5vcm1hbERlcGVuZGVuY2llcyA9IDA7XHJcblx0XHR0aGlzLmNvbG9yRGVwZW5kZW5jaWVzID0gMDtcclxuXHRcdHRoaXMudmlld0RpckRlcGVuZGVuY2llcyA9IDA7XHJcblx0XHR0aGlzLnV2RGVwZW5kZW5jaWVzID0gMDtcclxuXHRcdHRoaXMuc2Vjb25kYXJ5VVZEZXBlbmRlbmNpZXMgPSAwO1xyXG5cdFx0dGhpcy5nbG9iYWxQb3NEZXBlbmRlbmNpZXMgPSAwO1xyXG5cdFx0dGhpcy5sb2NhbFBvc0RlcGVuZGVuY2llcyA9IDA7XHJcblx0XHR0aGlzLnRhbmdlbnREZXBlbmRlbmNpZXMgPSAwO1xyXG5cdFx0dGhpcy51c2VzR2xvYmFsUG9zRnJhZ21lbnQgPSBmYWxzZTtcclxuXHRcdHRoaXMudXNlc0ZyYWdtZW50QW5pbWF0aW9uID0gZmFsc2U7XHJcblx0XHR0aGlzLnVzZXNUYW5nZW50U3BhY2UgPSBmYWxzZTtcclxuXHRcdHRoaXMub3V0cHV0c05vcm1hbHMgPSBmYWxzZTtcclxuXHRcdHRoaXMub3V0cHV0c1RhbmdlbnROb3JtYWxzID0gZmFsc2U7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgcEluaXRSZWdpc3RlckluZGljZXMoKVxyXG5cdHtcclxuXHRcdHRoaXMuY29tbW9uc0RhdGFJbmRleCA9IC0xO1xyXG5cdFx0dGhpcy5jYW1lcmFQb3NpdGlvbkluZGV4ID0gLTE7XHJcblx0XHR0aGlzLnV2QnVmZmVySW5kZXggPSAtMTtcclxuXHRcdHRoaXMudXZUcmFuc2Zvcm1JbmRleCA9IC0xO1xyXG5cdFx0dGhpcy5zZWNvbmRhcnlVVkJ1ZmZlckluZGV4ID0gLTE7XHJcblx0XHR0aGlzLm5vcm1hbEJ1ZmZlckluZGV4ID0gLTE7XHJcblx0XHR0aGlzLmNvbG9yQnVmZmVySW5kZXggPSAtMTtcclxuXHRcdHRoaXMudGFuZ2VudEJ1ZmZlckluZGV4ID0gLTE7XHJcblx0XHR0aGlzLnNjZW5lTWF0cml4SW5kZXggPSAtMTtcclxuXHRcdHRoaXMuc2NlbmVOb3JtYWxNYXRyaXhJbmRleCA9IC0xO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogSW5pdGlhbGl6ZXMgdGhlIHVuY2hhbmdpbmcgY29uc3RhbnQgZGF0YSBmb3IgdGhpcyBzaGFkZXIgb2JqZWN0LlxyXG5cdCAqL1xyXG5cdHB1YmxpYyBpbml0Q29uc3RhbnREYXRhKHJlZ2lzdGVyQ2FjaGU6U2hhZGVyUmVnaXN0ZXJDYWNoZSwgYW5pbWF0YWJsZUF0dHJpYnV0ZXM6QXJyYXk8c3RyaW5nPiwgYW5pbWF0aW9uVGFyZ2V0UmVnaXN0ZXJzOkFycmF5PHN0cmluZz4sIHV2U291cmNlOnN0cmluZywgdXZUYXJnZXQ6c3RyaW5nKVxyXG5cdHtcclxuXHRcdC8vVXBkYXRlcyB0aGUgYW1vdW50IG9mIHVzZWQgcmVnaXN0ZXIgaW5kaWNlcy5cclxuXHRcdHRoaXMubnVtVXNlZFZlcnRleENvbnN0YW50cyA9IHJlZ2lzdGVyQ2FjaGUubnVtVXNlZFZlcnRleENvbnN0YW50cztcclxuXHRcdHRoaXMubnVtVXNlZEZyYWdtZW50Q29uc3RhbnRzID0gcmVnaXN0ZXJDYWNoZS5udW1Vc2VkRnJhZ21lbnRDb25zdGFudHM7XHJcblx0XHR0aGlzLm51bVVzZWRTdHJlYW1zID0gcmVnaXN0ZXJDYWNoZS5udW1Vc2VkU3RyZWFtcztcclxuXHRcdHRoaXMubnVtVXNlZFRleHR1cmVzID0gcmVnaXN0ZXJDYWNoZS5udW1Vc2VkVGV4dHVyZXM7XHJcblx0XHR0aGlzLm51bVVzZWRWYXJ5aW5ncyA9IHJlZ2lzdGVyQ2FjaGUubnVtVXNlZFZhcnlpbmdzO1xyXG5cdFx0dGhpcy5udW1Vc2VkRnJhZ21lbnRDb25zdGFudHMgPSByZWdpc3RlckNhY2hlLm51bVVzZWRGcmFnbWVudENvbnN0YW50cztcclxuXHJcblx0XHR0aGlzLmFuaW1hdGFibGVBdHRyaWJ1dGVzID0gYW5pbWF0YWJsZUF0dHJpYnV0ZXM7XHJcblx0XHR0aGlzLmFuaW1hdGlvblRhcmdldFJlZ2lzdGVycyA9IGFuaW1hdGlvblRhcmdldFJlZ2lzdGVycztcclxuXHRcdHRoaXMudXZTb3VyY2UgPSB1dlNvdXJjZTtcclxuXHRcdHRoaXMudXZUYXJnZXQgPSB1dlRhcmdldDtcclxuXHJcblx0XHR0aGlzLnZlcnRleENvbnN0YW50RGF0YS5sZW5ndGggPSB0aGlzLm51bVVzZWRWZXJ0ZXhDb25zdGFudHMqNDtcclxuXHRcdHRoaXMuZnJhZ21lbnRDb25zdGFudERhdGEubGVuZ3RoID0gdGhpcy5udW1Vc2VkRnJhZ21lbnRDb25zdGFudHMqNDtcclxuXHJcblx0XHQvL0luaXRpYWxpemVzIGNvbW1vbmx5IHJlcXVpcmVkIGNvbnN0YW50IHZhbHVlcy5cclxuXHRcdHRoaXMuZnJhZ21lbnRDb25zdGFudERhdGFbdGhpcy5jb21tb25zRGF0YUluZGV4XSA9IC41O1xyXG5cdFx0dGhpcy5mcmFnbWVudENvbnN0YW50RGF0YVt0aGlzLmNvbW1vbnNEYXRhSW5kZXggKyAxXSA9IDA7XHJcblx0XHR0aGlzLmZyYWdtZW50Q29uc3RhbnREYXRhW3RoaXMuY29tbW9uc0RhdGFJbmRleCArIDJdID0gMS8yNTU7XHJcblx0XHR0aGlzLmZyYWdtZW50Q29uc3RhbnREYXRhW3RoaXMuY29tbW9uc0RhdGFJbmRleCArIDNdID0gMTtcclxuXHJcblx0XHQvL0luaXRpYWxpemVzIHRoZSBkZWZhdWx0IFVWIHRyYW5zZm9ybWF0aW9uIG1hdHJpeC5cclxuXHRcdGlmICh0aGlzLnV2VHJhbnNmb3JtSW5kZXggPj0gMCkge1xyXG5cdFx0XHR0aGlzLnZlcnRleENvbnN0YW50RGF0YVt0aGlzLnV2VHJhbnNmb3JtSW5kZXhdID0gMTtcclxuXHRcdFx0dGhpcy52ZXJ0ZXhDb25zdGFudERhdGFbdGhpcy51dlRyYW5zZm9ybUluZGV4ICsgMV0gPSAwO1xyXG5cdFx0XHR0aGlzLnZlcnRleENvbnN0YW50RGF0YVt0aGlzLnV2VHJhbnNmb3JtSW5kZXggKyAyXSA9IDA7XHJcblx0XHRcdHRoaXMudmVydGV4Q29uc3RhbnREYXRhW3RoaXMudXZUcmFuc2Zvcm1JbmRleCArIDNdID0gMDtcclxuXHRcdFx0dGhpcy52ZXJ0ZXhDb25zdGFudERhdGFbdGhpcy51dlRyYW5zZm9ybUluZGV4ICsgNF0gPSAwO1xyXG5cdFx0XHR0aGlzLnZlcnRleENvbnN0YW50RGF0YVt0aGlzLnV2VHJhbnNmb3JtSW5kZXggKyA1XSA9IDE7XHJcblx0XHRcdHRoaXMudmVydGV4Q29uc3RhbnREYXRhW3RoaXMudXZUcmFuc2Zvcm1JbmRleCArIDZdID0gMDtcclxuXHRcdFx0dGhpcy52ZXJ0ZXhDb25zdGFudERhdGFbdGhpcy51dlRyYW5zZm9ybUluZGV4ICsgN10gPSAwO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh0aGlzLmNhbWVyYVBvc2l0aW9uSW5kZXggPj0gMClcclxuXHRcdFx0dGhpcy52ZXJ0ZXhDb25zdGFudERhdGFbdGhpcy5jYW1lcmFQb3NpdGlvbkluZGV4ICsgM10gPSAxO1xyXG5cdH1cclxuXHJcblxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0RG9jXHJcblx0ICovXHJcblx0cHVibGljIF9pQWN0aXZhdGUoY2FtZXJhOkNhbWVyYSlcclxuXHR7XHJcblx0XHRpZiAodGhpcy51c2VzQW5pbWF0aW9uKVxyXG5cdFx0XHQoPEFuaW1hdGlvblNldEJhc2U+IHRoaXMuX3JlbmRlclBhc3MuYW5pbWF0aW9uU2V0KS5hY3RpdmF0ZSh0aGlzLCB0aGlzLl9zdGFnZSk7XHJcblxyXG5cdFx0dGhpcy5fc3RhZ2UuY29udGV4dC5zZXRDdWxsaW5nKHRoaXMudXNlQm90aFNpZGVzPyBDb250ZXh0R0xUcmlhbmdsZUZhY2UuTk9ORSA6IHRoaXMuX2RlZmF1bHRDdWxsaW5nLCBjYW1lcmEucHJvamVjdGlvbi5jb29yZGluYXRlU3lzdGVtKTtcclxuXHJcblx0XHRpZiAoIXRoaXMudXNlc1RhbmdlbnRTcGFjZSAmJiB0aGlzLmNhbWVyYVBvc2l0aW9uSW5kZXggPj0gMCkge1xyXG5cdFx0XHR2YXIgcG9zOlZlY3RvcjNEID0gY2FtZXJhLnNjZW5lUG9zaXRpb247XHJcblxyXG5cdFx0XHR0aGlzLnZlcnRleENvbnN0YW50RGF0YVt0aGlzLmNhbWVyYVBvc2l0aW9uSW5kZXhdID0gcG9zLng7XHJcblx0XHRcdHRoaXMudmVydGV4Q29uc3RhbnREYXRhW3RoaXMuY2FtZXJhUG9zaXRpb25JbmRleCArIDFdID0gcG9zLnk7XHJcblx0XHRcdHRoaXMudmVydGV4Q29uc3RhbnREYXRhW3RoaXMuY2FtZXJhUG9zaXRpb25JbmRleCArIDJdID0gcG9zLno7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdERvY1xyXG5cdCAqL1xyXG5cdHB1YmxpYyBfaURlYWN0aXZhdGUoKVxyXG5cdHtcclxuXHRcdGlmICh0aGlzLnVzZXNBbmltYXRpb24pXHJcblx0XHRcdCg8QW5pbWF0aW9uU2V0QmFzZT4gdGhpcy5fcmVuZGVyUGFzcy5hbmltYXRpb25TZXQpLmRlYWN0aXZhdGUodGhpcywgdGhpcy5fc3RhZ2UpO1xyXG5cclxuXHR9XHJcblxyXG5cclxuXHQvKipcclxuXHQgKlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHJlbmRlcmFibGVcclxuXHQgKiBAcGFyYW0gc3RhZ2VcclxuXHQgKiBAcGFyYW0gY2FtZXJhXHJcblx0ICovXHJcblx0cHVibGljIF9pUmVuZGVyKHJlbmRlcmFibGU6UmVuZGVyYWJsZUJhc2UsIGNhbWVyYTpDYW1lcmEsIHZpZXdQcm9qZWN0aW9uOk1hdHJpeDNEKVxyXG5cdHtcclxuXHRcdGlmIChyZW5kZXJhYmxlLnJlbmRlcmFibGVPd25lci5hbmltYXRvcilcclxuXHRcdFx0KDxBbmltYXRvckJhc2U+IHJlbmRlcmFibGUucmVuZGVyYWJsZU93bmVyLmFuaW1hdG9yKS5zZXRSZW5kZXJTdGF0ZSh0aGlzLCByZW5kZXJhYmxlLCB0aGlzLl9zdGFnZSwgY2FtZXJhLCB0aGlzLm51bVVzZWRWZXJ0ZXhDb25zdGFudHMsIHRoaXMubnVtVXNlZFN0cmVhbXMpO1xyXG5cclxuXHRcdGlmICh0aGlzLnV2QnVmZmVySW5kZXggPj0gMClcclxuXHRcdFx0dGhpcy5fc3RhZ2UuYWN0aXZhdGVCdWZmZXIodGhpcy51dkJ1ZmZlckluZGV4LCByZW5kZXJhYmxlLmdldFZlcnRleERhdGEoVHJpYW5nbGVTdWJHZW9tZXRyeS5VVl9EQVRBKSwgcmVuZGVyYWJsZS5nZXRWZXJ0ZXhPZmZzZXQoVHJpYW5nbGVTdWJHZW9tZXRyeS5VVl9EQVRBKSwgVHJpYW5nbGVTdWJHZW9tZXRyeS5VVl9GT1JNQVQpO1xyXG5cclxuXHRcdGlmICh0aGlzLnNlY29uZGFyeVVWQnVmZmVySW5kZXggPj0gMClcclxuXHRcdFx0dGhpcy5fc3RhZ2UuYWN0aXZhdGVCdWZmZXIodGhpcy5zZWNvbmRhcnlVVkJ1ZmZlckluZGV4LCByZW5kZXJhYmxlLmdldFZlcnRleERhdGEoVHJpYW5nbGVTdWJHZW9tZXRyeS5TRUNPTkRBUllfVVZfREFUQSksIHJlbmRlcmFibGUuZ2V0VmVydGV4T2Zmc2V0KFRyaWFuZ2xlU3ViR2VvbWV0cnkuU0VDT05EQVJZX1VWX0RBVEEpLCBUcmlhbmdsZVN1Ykdlb21ldHJ5LlNFQ09OREFSWV9VVl9GT1JNQVQpO1xyXG5cclxuXHRcdGlmICh0aGlzLm5vcm1hbEJ1ZmZlckluZGV4ID49IDApXHJcblx0XHRcdHRoaXMuX3N0YWdlLmFjdGl2YXRlQnVmZmVyKHRoaXMubm9ybWFsQnVmZmVySW5kZXgsIHJlbmRlcmFibGUuZ2V0VmVydGV4RGF0YShUcmlhbmdsZVN1Ykdlb21ldHJ5Lk5PUk1BTF9EQVRBKSwgcmVuZGVyYWJsZS5nZXRWZXJ0ZXhPZmZzZXQoVHJpYW5nbGVTdWJHZW9tZXRyeS5OT1JNQUxfREFUQSksIFRyaWFuZ2xlU3ViR2VvbWV0cnkuTk9STUFMX0ZPUk1BVCk7XHJcblxyXG5cdFx0aWYgKHRoaXMudGFuZ2VudEJ1ZmZlckluZGV4ID49IDApXHJcblx0XHRcdHRoaXMuX3N0YWdlLmFjdGl2YXRlQnVmZmVyKHRoaXMudGFuZ2VudEJ1ZmZlckluZGV4LCByZW5kZXJhYmxlLmdldFZlcnRleERhdGEoVHJpYW5nbGVTdWJHZW9tZXRyeS5UQU5HRU5UX0RBVEEpLCByZW5kZXJhYmxlLmdldFZlcnRleE9mZnNldChUcmlhbmdsZVN1Ykdlb21ldHJ5LlRBTkdFTlRfREFUQSksIFRyaWFuZ2xlU3ViR2VvbWV0cnkuVEFOR0VOVF9GT1JNQVQpO1xyXG5cclxuXHRcdGlmICh0aGlzLmNvbG9yQnVmZmVySW5kZXggPj0gMClcclxuXHRcdFx0dGhpcy5fc3RhZ2UuYWN0aXZhdGVCdWZmZXIodGhpcy5jb2xvckJ1ZmZlckluZGV4LCByZW5kZXJhYmxlLmdldFZlcnRleERhdGEoTGluZVN1Ykdlb21ldHJ5LkNPTE9SX0RBVEEpLCByZW5kZXJhYmxlLmdldFZlcnRleE9mZnNldChMaW5lU3ViR2VvbWV0cnkuQ09MT1JfREFUQSksIExpbmVTdWJHZW9tZXRyeS5DT0xPUl9GT1JNQVQpO1xyXG5cclxuXHJcblx0XHRpZiAodGhpcy51c2VzVVZUcmFuc2Zvcm0pIHtcclxuXHRcdFx0dmFyIHV2VHJhbnNmb3JtOk1hdHJpeCA9IHJlbmRlcmFibGUucmVuZGVyYWJsZU93bmVyLnV2VHJhbnNmb3JtLm1hdHJpeDtcclxuXHJcblx0XHRcdGlmICh1dlRyYW5zZm9ybSkge1xyXG5cdFx0XHRcdHRoaXMudmVydGV4Q29uc3RhbnREYXRhW3RoaXMudXZUcmFuc2Zvcm1JbmRleF0gPSB1dlRyYW5zZm9ybS5hO1xyXG5cdFx0XHRcdHRoaXMudmVydGV4Q29uc3RhbnREYXRhW3RoaXMudXZUcmFuc2Zvcm1JbmRleCArIDFdID0gdXZUcmFuc2Zvcm0uYjtcclxuXHRcdFx0XHR0aGlzLnZlcnRleENvbnN0YW50RGF0YVt0aGlzLnV2VHJhbnNmb3JtSW5kZXggKyAzXSA9IHV2VHJhbnNmb3JtLnR4O1xyXG5cdFx0XHRcdHRoaXMudmVydGV4Q29uc3RhbnREYXRhW3RoaXMudXZUcmFuc2Zvcm1JbmRleCArIDRdID0gdXZUcmFuc2Zvcm0uYztcclxuXHRcdFx0XHR0aGlzLnZlcnRleENvbnN0YW50RGF0YVt0aGlzLnV2VHJhbnNmb3JtSW5kZXggKyA1XSA9IHV2VHJhbnNmb3JtLmQ7XHJcblx0XHRcdFx0dGhpcy52ZXJ0ZXhDb25zdGFudERhdGFbdGhpcy51dlRyYW5zZm9ybUluZGV4ICsgN10gPSB1dlRyYW5zZm9ybS50eTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR0aGlzLnZlcnRleENvbnN0YW50RGF0YVt0aGlzLnV2VHJhbnNmb3JtSW5kZXhdID0gMTtcclxuXHRcdFx0XHR0aGlzLnZlcnRleENvbnN0YW50RGF0YVt0aGlzLnV2VHJhbnNmb3JtSW5kZXggKyAxXSA9IDA7XHJcblx0XHRcdFx0dGhpcy52ZXJ0ZXhDb25zdGFudERhdGFbdGhpcy51dlRyYW5zZm9ybUluZGV4ICsgM10gPSAwO1xyXG5cdFx0XHRcdHRoaXMudmVydGV4Q29uc3RhbnREYXRhW3RoaXMudXZUcmFuc2Zvcm1JbmRleCArIDRdID0gMDtcclxuXHRcdFx0XHR0aGlzLnZlcnRleENvbnN0YW50RGF0YVt0aGlzLnV2VHJhbnNmb3JtSW5kZXggKyA1XSA9IDE7XHJcblx0XHRcdFx0dGhpcy52ZXJ0ZXhDb25zdGFudERhdGFbdGhpcy51dlRyYW5zZm9ybUluZGV4ICsgN10gPSAwO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMuc2NlbmVOb3JtYWxNYXRyaXhJbmRleCA+PSAwKVxyXG5cdFx0XHRyZW5kZXJhYmxlLnNvdXJjZUVudGl0eS5pbnZlcnNlU2NlbmVUcmFuc2Zvcm0uY29weVJhd0RhdGFUbyh0aGlzLnZlcnRleENvbnN0YW50RGF0YSwgdGhpcy5zY2VuZU5vcm1hbE1hdHJpeEluZGV4LCBmYWxzZSk7XHJcblxyXG5cdFx0aWYgKHRoaXMudXNlc1RhbmdlbnRTcGFjZSAmJiB0aGlzLmNhbWVyYVBvc2l0aW9uSW5kZXggPj0gMCkge1xyXG5cclxuXHRcdFx0cmVuZGVyYWJsZS5zb3VyY2VFbnRpdHkuaW52ZXJzZVNjZW5lVHJhbnNmb3JtLmNvcHlSYXdEYXRhVG8odGhpcy5fcEludmVyc2VTY2VuZU1hdHJpeCk7XHJcblx0XHRcdHZhciBwb3M6VmVjdG9yM0QgPSBjYW1lcmEuc2NlbmVQb3NpdGlvbjtcclxuXHRcdFx0dmFyIHg6bnVtYmVyID0gcG9zLng7XHJcblx0XHRcdHZhciB5Om51bWJlciA9IHBvcy55O1xyXG5cdFx0XHR2YXIgejpudW1iZXIgPSBwb3MuejtcclxuXHJcblx0XHRcdHRoaXMudmVydGV4Q29uc3RhbnREYXRhW3RoaXMuY2FtZXJhUG9zaXRpb25JbmRleF0gPSB0aGlzLl9wSW52ZXJzZVNjZW5lTWF0cml4WzBdKnggKyB0aGlzLl9wSW52ZXJzZVNjZW5lTWF0cml4WzRdKnkgKyB0aGlzLl9wSW52ZXJzZVNjZW5lTWF0cml4WzhdKnogKyB0aGlzLl9wSW52ZXJzZVNjZW5lTWF0cml4WzEyXTtcclxuXHRcdFx0dGhpcy52ZXJ0ZXhDb25zdGFudERhdGFbdGhpcy5jYW1lcmFQb3NpdGlvbkluZGV4ICsgMV0gPSB0aGlzLl9wSW52ZXJzZVNjZW5lTWF0cml4WzFdKnggKyB0aGlzLl9wSW52ZXJzZVNjZW5lTWF0cml4WzVdKnkgKyB0aGlzLl9wSW52ZXJzZVNjZW5lTWF0cml4WzldKnogKyB0aGlzLl9wSW52ZXJzZVNjZW5lTWF0cml4WzEzXTtcclxuXHRcdFx0dGhpcy52ZXJ0ZXhDb25zdGFudERhdGFbdGhpcy5jYW1lcmFQb3NpdGlvbkluZGV4ICsgMl0gPSB0aGlzLl9wSW52ZXJzZVNjZW5lTWF0cml4WzJdKnggKyB0aGlzLl9wSW52ZXJzZVNjZW5lTWF0cml4WzZdKnkgKyB0aGlzLl9wSW52ZXJzZVNjZW5lTWF0cml4WzEwXSp6ICsgdGhpcy5fcEludmVyc2VTY2VuZU1hdHJpeFsxNF07XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdHB1YmxpYyBpbnZhbGlkYXRlUHJvZ3JhbSgpXHJcblx0e1xyXG5cdFx0dGhpcy5faW52YWxpZFByb2dyYW0gPSB0cnVlO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGludmFsaWRhdGVTaGFkZXIoKVxyXG5cdHtcclxuXHRcdHRoaXMuX2ludmFsaWRTaGFkZXIgPSB0cnVlO1xyXG5cdFx0dGhpcy5faW52YWxpZFByb2dyYW0gPSB0cnVlO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGRpc3Bvc2UoKVxyXG5cdHtcclxuXHRcdHRoaXMuX3Byb2dyYW1EYXRhLmRpc3Bvc2UoKTtcclxuXHRcdHRoaXMuX3Byb2dyYW1EYXRhID0gbnVsbDtcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgX3VwZGF0ZVByb2dyYW0oKVxyXG5cdHtcclxuXHRcdHRoaXMuX2ludmFsaWRQcm9ncmFtID0gZmFsc2U7XHJcblxyXG5cdFx0dmFyIGNvbXBpbGVyOlNoYWRlckNvbXBpbGVyQmFzZTtcclxuXHJcblx0XHRpZiAodGhpcy5faW52YWxpZFNoYWRlcikge1xyXG5cdFx0XHR0aGlzLl9pbnZhbGlkU2hhZGVyID0gZmFsc2U7XHJcblxyXG5cdFx0XHRjb21waWxlciA9IHRoaXMuY3JlYXRlQ29tcGlsZXIodGhpcy5fcmVuZGVyYWJsZUNsYXNzLCB0aGlzLl9yZW5kZXJQYXNzKTtcclxuXHRcdFx0Y29tcGlsZXIuY29tcGlsZSgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuX2NhbGNBbmltYXRpb25Db2RlKGNvbXBpbGVyLnNoYWRlZFRhcmdldCk7XHJcblxyXG5cdFx0dmFyIHByb2dyYW1EYXRhOlByb2dyYW1EYXRhID0gdGhpcy5fc3RhZ2UuZ2V0UHJvZ3JhbURhdGEodGhpcy5fYW5pbWF0aW9uVmVydGV4Q29kZSArIGNvbXBpbGVyLnZlcnRleENvZGUsIGNvbXBpbGVyLmZyYWdtZW50Q29kZSArIHRoaXMuX2FuaW1hdGlvbkZyYWdtZW50Q29kZSArIGNvbXBpbGVyLnBvc3RBbmltYXRpb25GcmFnbWVudENvZGUpO1xyXG5cclxuXHRcdC8vY2hlY2sgcHJvZ3JhbSBkYXRhIGhhc24ndCBjaGFuZ2VkLCBrZWVwIGNvdW50IG9mIHByb2dyYW0gdXNhZ2VzXHJcblx0XHRpZiAodGhpcy5fcHJvZ3JhbURhdGEgIT0gcHJvZ3JhbURhdGEpIHtcclxuXHRcdFx0aWYgKHRoaXMuX3Byb2dyYW1EYXRhKVxyXG5cdFx0XHRcdHRoaXMuX3Byb2dyYW1EYXRhLmRpc3Bvc2UoKTtcclxuXHJcblx0XHRcdHRoaXMuX3Byb2dyYW1EYXRhID0gcHJvZ3JhbURhdGE7XHJcblxyXG5cdFx0XHRwcm9ncmFtRGF0YS51c2FnZXMrKztcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHByaXZhdGUgX2NhbGNBbmltYXRpb25Db2RlKHNoYWRlZFRhcmdldDpzdHJpbmcpXHJcblx0e1xyXG5cdFx0Ly9yZXNldCBjb2RlXHJcblx0XHR0aGlzLl9hbmltYXRpb25WZXJ0ZXhDb2RlID0gXCJcIjtcclxuXHRcdHRoaXMuX2FuaW1hdGlvbkZyYWdtZW50Q29kZSA9IFwiXCI7XHJcblxyXG5cdFx0Ly9jaGVjayB0byBzZWUgaWYgR1BVIGFuaW1hdGlvbiBpcyB1c2VkXHJcblx0XHRpZiAodGhpcy51c2VzQW5pbWF0aW9uKSB7XHJcblxyXG5cdFx0XHR2YXIgYW5pbWF0aW9uU2V0OkFuaW1hdGlvblNldEJhc2UgPSA8QW5pbWF0aW9uU2V0QmFzZT4gdGhpcy5fcmVuZGVyUGFzcy5hbmltYXRpb25TZXQ7XHJcblxyXG5cdFx0XHR0aGlzLl9hbmltYXRpb25WZXJ0ZXhDb2RlICs9IGFuaW1hdGlvblNldC5nZXRBR0FMVmVydGV4Q29kZSh0aGlzKTtcclxuXHJcblx0XHRcdGlmICh0aGlzLnV2RGVwZW5kZW5jaWVzID4gMCAmJiAhdGhpcy51c2VzVVZUcmFuc2Zvcm0pXHJcblx0XHRcdFx0dGhpcy5fYW5pbWF0aW9uVmVydGV4Q29kZSArPSBhbmltYXRpb25TZXQuZ2V0QUdBTFVWQ29kZSh0aGlzKTtcclxuXHJcblx0XHRcdGlmICh0aGlzLnVzZXNGcmFnbWVudEFuaW1hdGlvbilcclxuXHRcdFx0XHR0aGlzLl9hbmltYXRpb25GcmFnbWVudENvZGUgKz0gYW5pbWF0aW9uU2V0LmdldEFHQUxGcmFnbWVudENvZGUodGhpcywgc2hhZGVkVGFyZ2V0KTtcclxuXHJcblx0XHRcdGFuaW1hdGlvblNldC5kb25lQUdBTENvZGUodGhpcyk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Ly8gc2ltcGx5IHdyaXRlIGF0dHJpYnV0ZXMgdG8gdGFyZ2V0cywgZG8gbm90IGFuaW1hdGUgdGhlbVxyXG5cdFx0XHQvLyBwcm9qZWN0aW9uIHdpbGwgcGljayB1cCBvbiB0YXJnZXRzWzBdIHRvIGRvIHRoZSBwcm9qZWN0aW9uXHJcblx0XHRcdHZhciBsZW46bnVtYmVyID0gdGhpcy5hbmltYXRhYmxlQXR0cmlidXRlcy5sZW5ndGg7XHJcblx0XHRcdGZvciAodmFyIGk6bnVtYmVyID0gMDsgaSA8IGxlbjsgKytpKVxyXG5cdFx0XHRcdHRoaXMuX2FuaW1hdGlvblZlcnRleENvZGUgKz0gXCJtb3YgXCIgKyB0aGlzLmFuaW1hdGlvblRhcmdldFJlZ2lzdGVyc1tpXSArIFwiLCBcIiArIHRoaXMuYW5pbWF0YWJsZUF0dHJpYnV0ZXNbaV0gKyBcIlxcblwiO1xyXG5cclxuXHRcdFx0aWYgKHRoaXMudXZEZXBlbmRlbmNpZXMgPiAwICYmICF0aGlzLnVzZXNVVlRyYW5zZm9ybSlcclxuXHRcdFx0XHR0aGlzLl9hbmltYXRpb25WZXJ0ZXhDb2RlICs9IFwibW92IFwiICsgdGhpcy51dlRhcmdldCArIFwiLFwiICsgdGhpcy51dlNvdXJjZSArIFwiXFxuXCI7XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgPSBTaGFkZXJPYmplY3RCYXNlOyJdfQ==