var ShaderRegisterElement = require("awayjs-renderergl/lib/compilation/ShaderRegisterElement");
/**
 * RegisterPool is used by the shader compilation process to keep track of which registers of a certain type are
 * currently used and should not be allowed to be written to. Either entire registers can be requested and locked,
 * or single components (x, y, z, w) of a single register.
 * It is used by ShaderRegisterCache to track usages of individual register types.
 *
 * @see away.materials.ShaderRegisterCache
 */
var RegisterPool = (function () {
    /**
     * Creates a new RegisterPool object.
     * @param regName The base name of the register type ("ft" for fragment temporaries, "vc" for vertex constants, etc)
     * @param regCount The amount of available registers of this type.
     * @param persistent Whether or not registers, once reserved, can be freed again. For example, temporaries are not persistent, but constants are.
     */
    function RegisterPool(regName, regCount, persistent) {
        if (persistent === void 0) { persistent = true; }
        this._regName = regName;
        this._regCount = regCount;
        this._persistent = persistent;
        this.initRegisters(regName, regCount);
    }
    /**
     * Retrieve an entire vector register that's still available.
     */
    RegisterPool.prototype.requestFreeVectorReg = function () {
        for (var i = 0; i < this._regCount; ++i) {
            if (!this.isRegisterUsed(i)) {
                if (this._persistent)
                    this._usedVectorCount[i]++;
                return this._vectorRegisters[i];
            }
        }
        throw new Error("Register overflow!");
    };
    /**
     * Retrieve a single vector component that's still available.
     */
    RegisterPool.prototype.requestFreeRegComponent = function () {
        for (var i = 0; i < this._regCount; ++i) {
            if (this._usedVectorCount[i] > 0)
                continue;
            for (var j = 0; j < 4; ++j) {
                if (this._usedSingleCount[j][i] == 0) {
                    if (this._persistent)
                        this._usedSingleCount[j][i]++;
                    return this._registerComponents[j][i];
                }
            }
        }
        throw new Error("Register overflow!");
    };
    /**
     * Marks a register as used, so it cannot be retrieved. The register won't be able to be used until removeUsage
     * has been called usageCount times again.
     * @param register The register to mark as used.
     * @param usageCount The amount of usages to add.
     */
    RegisterPool.prototype.addUsage = function (register, usageCount) {
        if (register._component > -1)
            this._usedSingleCount[register._component][register.index] += usageCount;
        else
            this._usedVectorCount[register.index] += usageCount;
    };
    /**
     * Removes a usage from a register. When usages reach 0, the register is freed again.
     * @param register The register for which to remove a usage.
     */
    RegisterPool.prototype.removeUsage = function (register) {
        if (register._component > -1) {
            if (--this._usedSingleCount[register._component][register.index] < 0)
                throw new Error("More usages removed than exist!");
        }
        else {
            if (--this._usedVectorCount[register.index] < 0)
                throw new Error("More usages removed than exist!");
        }
    };
    /**
     * Disposes any resources used by the current RegisterPool object.
     */
    RegisterPool.prototype.dispose = function () {
        this._vectorRegisters = null;
        this._registerComponents = null;
        this._usedSingleCount = null;
        this._usedVectorCount = null;
    };
    /**
     * Indicates whether or not any registers are in use.
     */
    RegisterPool.prototype.hasRegisteredRegs = function () {
        for (var i = 0; i < this._regCount; ++i)
            if (this.isRegisterUsed(i))
                return true;
        return false;
    };
    /**
     * Initializes all registers.
     */
    RegisterPool.prototype.initRegisters = function (regName, regCount) {
        var hash = RegisterPool._initPool(regName, regCount);
        this._vectorRegisters = RegisterPool._regPool[hash];
        this._registerComponents = RegisterPool._regCompsPool[hash];
        this._usedVectorCount = this._initArray(Array(regCount), 0);
        this._usedSingleCount = new Array(4);
        this._usedSingleCount[0] = this._initArray(new Array(regCount), 0);
        this._usedSingleCount[1] = this._initArray(new Array(regCount), 0);
        this._usedSingleCount[2] = this._initArray(new Array(regCount), 0);
        this._usedSingleCount[3] = this._initArray(new Array(regCount), 0);
    };
    RegisterPool._initPool = function (regName, regCount) {
        var hash = regName + regCount;
        if (RegisterPool._regPool[hash] != undefined)
            return hash;
        var vectorRegisters = new Array(regCount);
        RegisterPool._regPool[hash] = vectorRegisters;
        var registerComponents = [
            [],
            [],
            [],
            []
        ];
        RegisterPool._regCompsPool[hash] = registerComponents;
        for (var i = 0; i < regCount; ++i) {
            vectorRegisters[i] = new ShaderRegisterElement(regName, i);
            for (var j = 0; j < 4; ++j)
                registerComponents[j][i] = new ShaderRegisterElement(regName, i, j);
        }
        return hash;
    };
    /**
     * Check if the temp register is either used for single or vector use
     */
    RegisterPool.prototype.isRegisterUsed = function (index) {
        if (this._usedVectorCount[index] > 0)
            return true;
        for (var i = 0; i < 4; ++i)
            if (this._usedSingleCount[i][index] > 0)
                return true;
        return false;
    };
    RegisterPool.prototype._initArray = function (a, val) {
        var l = a.length;
        for (var c = 0; c < l; c++)
            a[c] = val;
        return a;
    };
    RegisterPool._regPool = new Object();
    RegisterPool._regCompsPool = new Object();
    return RegisterPool;
})();
module.exports = RegisterPool;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9yZWdpc3RlcnBvb2wudHMiXSwibmFtZXMiOlsiUmVnaXN0ZXJQb29sIiwiUmVnaXN0ZXJQb29sLmNvbnN0cnVjdG9yIiwiUmVnaXN0ZXJQb29sLnJlcXVlc3RGcmVlVmVjdG9yUmVnIiwiUmVnaXN0ZXJQb29sLnJlcXVlc3RGcmVlUmVnQ29tcG9uZW50IiwiUmVnaXN0ZXJQb29sLmFkZFVzYWdlIiwiUmVnaXN0ZXJQb29sLnJlbW92ZVVzYWdlIiwiUmVnaXN0ZXJQb29sLmRpc3Bvc2UiLCJSZWdpc3RlclBvb2wuaGFzUmVnaXN0ZXJlZFJlZ3MiLCJSZWdpc3RlclBvb2wuaW5pdFJlZ2lzdGVycyIsIlJlZ2lzdGVyUG9vbC5faW5pdFBvb2wiLCJSZWdpc3RlclBvb2wuaXNSZWdpc3RlclVzZWQiLCJSZWdpc3RlclBvb2wuX2luaXRBcnJheSJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBTyxxQkFBcUIsV0FBWSx5REFBeUQsQ0FBQyxDQUFDO0FBRW5HLEFBUUE7Ozs7Ozs7R0FERztJQUNHLFlBQVk7SUFlakJBOzs7OztPQUtHQTtJQUNIQSxTQXJCS0EsWUFBWUEsQ0FxQkxBLE9BQWNBLEVBQUVBLFFBQWVBLEVBQUVBLFVBQXlCQTtRQUF6QkMsMEJBQXlCQSxHQUF6QkEsaUJBQXlCQTtRQUVyRUEsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsT0FBT0EsQ0FBQ0E7UUFDeEJBLElBQUlBLENBQUNBLFNBQVNBLEdBQUdBLFFBQVFBLENBQUNBO1FBQzFCQSxJQUFJQSxDQUFDQSxXQUFXQSxHQUFHQSxVQUFVQSxDQUFDQTtRQUM5QkEsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsT0FBT0EsRUFBRUEsUUFBUUEsQ0FBQ0EsQ0FBQ0E7SUFDdkNBLENBQUNBO0lBRUREOztPQUVHQTtJQUNJQSwyQ0FBb0JBLEdBQTNCQTtRQUVDRSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFVQSxDQUFDQSxF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QUlBLElBQUlBLEdBQVVBLE9BQU9BLEdBQUdBLFFBQVFBLENBQUNBO1FBRXJDQSxFQUFFQSxDQUFDQSxDQUFDQSxZQUFZQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxTQUFTQSxDQUFDQTtZQUM1Q0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFFYkEsSUFBSUEsZUFBZUEsR0FBZ0NBLElBQUlBLEtBQUtBLENBQXdCQSxRQUFRQSxDQUFDQSxDQUFDQTtRQUM5RkEsWUFBWUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsZUFBZUEsQ0FBQ0E7UUFFOUNBLElBQUlBLGtCQUFrQkEsR0FBR0E7WUFDeEJBLEVBQUVBO1lBQ0ZBLEVBQUVBO1lBQ0ZBLEVBQUVBO1lBQ0ZBLEVBQUVBO1NBQ0ZBLENBQUNBO1FBQ0ZBLFlBQVlBLENBQUNBLGFBQWFBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLGtCQUFrQkEsQ0FBQ0E7UUFFdERBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQVVBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLFFBQVFBLEVBQUVBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBO1lBRTFDQSxlQUFlQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxxQkFBcUJBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO1lBRTNEQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFVQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTtnQkFDaENBLGtCQUFrQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEscUJBQXFCQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN0RUEsQ0FBQ0E7UUFFREEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7SUFDYkEsQ0FBQ0E7SUFHRFQ7O09BRUdBO0lBQ0tBLHFDQUFjQSxHQUF0QkEsVUFBdUJBLEtBQVlBO1FBRWxDVSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLENBQUNBLEtBQUtBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQ3BDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtRQUViQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFVQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTtZQUNoQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFDdkNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO1FBRWRBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBO0lBQ2RBLENBQUNBO0lBR09WLGlDQUFVQSxHQUFsQkEsVUFBbUJBLENBQVlBLEVBQUVBLEdBQU9BO1FBRXZDVyxJQUFJQSxDQUFDQSxHQUFVQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQTtRQUV4QkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBVUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUE7WUFDaENBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLEdBQUdBLENBQUNBO1FBRVpBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBO0lBQ1ZBLENBQUNBO0lBL0xjWCxxQkFBUUEsR0FBVUEsSUFBSUEsTUFBTUEsRUFBRUEsQ0FBQ0E7SUFDL0JBLDBCQUFhQSxHQUFVQSxJQUFJQSxNQUFNQSxFQUFFQSxDQUFDQTtJQStMcERBLG1CQUFDQTtBQUFEQSxDQWxNQSxBQWtNQ0EsSUFBQTtBQUVELEFBQXNCLGlCQUFiLFlBQVksQ0FBQyIsImZpbGUiOiJjb21waWxhdGlvbi9SZWdpc3RlclBvb2wuanMiLCJzb3VyY2VSb290IjoiLi4vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNoYWRlclJlZ2lzdGVyRWxlbWVudFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vU2hhZGVyUmVnaXN0ZXJFbGVtZW50XCIpO1xuXG4vKipcbiAqIFJlZ2lzdGVyUG9vbCBpcyB1c2VkIGJ5IHRoZSBzaGFkZXIgY29tcGlsYXRpb24gcHJvY2VzcyB0byBrZWVwIHRyYWNrIG9mIHdoaWNoIHJlZ2lzdGVycyBvZiBhIGNlcnRhaW4gdHlwZSBhcmVcbiAqIGN1cnJlbnRseSB1c2VkIGFuZCBzaG91bGQgbm90IGJlIGFsbG93ZWQgdG8gYmUgd3JpdHRlbiB0by4gRWl0aGVyIGVudGlyZSByZWdpc3RlcnMgY2FuIGJlIHJlcXVlc3RlZCBhbmQgbG9ja2VkLFxuICogb3Igc2luZ2xlIGNvbXBvbmVudHMgKHgsIHksIHosIHcpIG9mIGEgc2luZ2xlIHJlZ2lzdGVyLlxuICogSXQgaXMgdXNlZCBieSBTaGFkZXJSZWdpc3RlckNhY2hlIHRvIHRyYWNrIHVzYWdlcyBvZiBpbmRpdmlkdWFsIHJlZ2lzdGVyIHR5cGVzLlxuICpcbiAqIEBzZWUgYXdheS5tYXRlcmlhbHMuU2hhZGVyUmVnaXN0ZXJDYWNoZVxuICovXG5jbGFzcyBSZWdpc3RlclBvb2xcbntcblx0cHJpdmF0ZSBzdGF0aWMgX3JlZ1Bvb2w6T2JqZWN0ID0gbmV3IE9iamVjdCgpO1xuXHRwcml2YXRlIHN0YXRpYyBfcmVnQ29tcHNQb29sOk9iamVjdCA9IG5ldyBPYmplY3QoKTtcblxuXHRwcml2YXRlIF92ZWN0b3JSZWdpc3RlcnM6QXJyYXk8U2hhZGVyUmVnaXN0ZXJFbGVtZW50Pjtcblx0cHJpdmF0ZSBfcmVnaXN0ZXJDb21wb25lbnRzO1xuXG5cdHByaXZhdGUgX3JlZ05hbWU6c3RyaW5nO1xuXHRwcml2YXRlIF91c2VkU2luZ2xlQ291bnQ6QXJyYXk8QXJyYXk8bnVtYmVyPj47XG5cdHByaXZhdGUgX3VzZWRWZWN0b3JDb3VudDpBcnJheTxudW1iZXI+IC8qdWludCovO1xuXHRwcml2YXRlIF9yZWdDb3VudDpudW1iZXI7XG5cblx0cHJpdmF0ZSBfcGVyc2lzdGVudDpib29sZWFuO1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgbmV3IFJlZ2lzdGVyUG9vbCBvYmplY3QuXG5cdCAqIEBwYXJhbSByZWdOYW1lIFRoZSBiYXNlIG5hbWUgb2YgdGhlIHJlZ2lzdGVyIHR5cGUgKFwiZnRcIiBmb3IgZnJhZ21lbnQgdGVtcG9yYXJpZXMsIFwidmNcIiBmb3IgdmVydGV4IGNvbnN0YW50cywgZXRjKVxuXHQgKiBAcGFyYW0gcmVnQ291bnQgVGhlIGFtb3VudCBvZiBhdmFpbGFibGUgcmVnaXN0ZXJzIG9mIHRoaXMgdHlwZS5cblx0ICogQHBhcmFtIHBlcnNpc3RlbnQgV2hldGhlciBvciBub3QgcmVnaXN0ZXJzLCBvbmNlIHJlc2VydmVkLCBjYW4gYmUgZnJlZWQgYWdhaW4uIEZvciBleGFtcGxlLCB0ZW1wb3JhcmllcyBhcmUgbm90IHBlcnNpc3RlbnQsIGJ1dCBjb25zdGFudHMgYXJlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IocmVnTmFtZTpzdHJpbmcsIHJlZ0NvdW50Om51bWJlciwgcGVyc2lzdGVudDpib29sZWFuID0gdHJ1ZSlcblx0e1xuXHRcdHRoaXMuX3JlZ05hbWUgPSByZWdOYW1lO1xuXHRcdHRoaXMuX3JlZ0NvdW50ID0gcmVnQ291bnQ7XG5cdFx0dGhpcy5fcGVyc2lzdGVudCA9IHBlcnNpc3RlbnQ7XG5cdFx0dGhpcy5pbml0UmVnaXN0ZXJzKHJlZ05hbWUsIHJlZ0NvdW50KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXRyaWV2ZSBhbiBlbnRpcmUgdmVjdG9yIHJlZ2lzdGVyIHRoYXQncyBzdGlsbCBhdmFpbGFibGUuXG5cdCAqL1xuXHRwdWJsaWMgcmVxdWVzdEZyZWVWZWN0b3JSZWcoKTpTaGFkZXJSZWdpc3RlckVsZW1lbnRcblx0e1xuXHRcdGZvciAodmFyIGk6bnVtYmVyID0gMDsgaSA8IHRoaXMuX3JlZ0NvdW50OyArK2kpIHtcblx0XHRcdGlmICghdGhpcy5pc1JlZ2lzdGVyVXNlZChpKSkge1xuXHRcdFx0XHRpZiAodGhpcy5fcGVyc2lzdGVudClcblx0XHRcdFx0XHR0aGlzLl91c2VkVmVjdG9yQ291bnRbaV0rKztcblxuXHRcdFx0XHRyZXR1cm4gdGhpcy5fdmVjdG9yUmVnaXN0ZXJzW2ldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRocm93IG5ldyBFcnJvcihcIlJlZ2lzdGVyIG92ZXJmbG93IVwiKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXRyaWV2ZSBhIHNpbmdsZSB2ZWN0b3IgY29tcG9uZW50IHRoYXQncyBzdGlsbCBhdmFpbGFibGUuXG5cdCAqL1xuXHRwdWJsaWMgcmVxdWVzdEZyZWVSZWdDb21wb25lbnQoKTpTaGFkZXJSZWdpc3RlckVsZW1lbnRcblx0e1xuXHRcdGZvciAodmFyIGk6bnVtYmVyID0gMDsgaSA8IHRoaXMuX3JlZ0NvdW50OyArK2kpIHtcblx0XHRcdGlmICh0aGlzLl91c2VkVmVjdG9yQ291bnRbaV0gPiAwKVxuXHRcdFx0XHRjb250aW51ZTtcblxuXHRcdFx0Zm9yICh2YXIgajpudW1iZXIgPSAwOyBqIDwgNDsgKytqKSB7XG5cdFx0XHRcdGlmICh0aGlzLl91c2VkU2luZ2xlQ291bnRbal1baV0gPT0gMCkge1xuXHRcdFx0XHRcdGlmICh0aGlzLl9wZXJzaXN0ZW50KVxuXHRcdFx0XHRcdFx0dGhpcy5fdXNlZFNpbmdsZUNvdW50W2pdW2ldKys7XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5fcmVnaXN0ZXJDb21wb25lbnRzW2pdW2ldO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiUmVnaXN0ZXIgb3ZlcmZsb3chXCIpO1xuXHR9XG5cblx0LyoqXG5cdCAqIE1hcmtzIGEgcmVnaXN0ZXIgYXMgdXNlZCwgc28gaXQgY2Fubm90IGJlIHJldHJpZXZlZC4gVGhlIHJlZ2lzdGVyIHdvbid0IGJlIGFibGUgdG8gYmUgdXNlZCB1bnRpbCByZW1vdmVVc2FnZVxuXHQgKiBoYXMgYmVlbiBjYWxsZWQgdXNhZ2VDb3VudCB0aW1lcyBhZ2Fpbi5cblx0ICogQHBhcmFtIHJlZ2lzdGVyIFRoZSByZWdpc3RlciB0byBtYXJrIGFzIHVzZWQuXG5cdCAqIEBwYXJhbSB1c2FnZUNvdW50IFRoZSBhbW91bnQgb2YgdXNhZ2VzIHRvIGFkZC5cblx0ICovXG5cdHB1YmxpYyBhZGRVc2FnZShyZWdpc3RlcjpTaGFkZXJSZWdpc3RlckVsZW1lbnQsIHVzYWdlQ291bnQ6bnVtYmVyKVxuXHR7XG5cdFx0aWYgKHJlZ2lzdGVyLl9jb21wb25lbnQgPiAtMSlcblx0XHRcdHRoaXMuX3VzZWRTaW5nbGVDb3VudFtyZWdpc3Rlci5fY29tcG9uZW50XVtyZWdpc3Rlci5pbmRleF0gKz0gdXNhZ2VDb3VudDtcblx0XHRlbHNlXG5cdFx0XHR0aGlzLl91c2VkVmVjdG9yQ291bnRbcmVnaXN0ZXIuaW5kZXhdICs9IHVzYWdlQ291bnQ7XG5cdH1cblxuXHQvKipcblx0ICogUmVtb3ZlcyBhIHVzYWdlIGZyb20gYSByZWdpc3Rlci4gV2hlbiB1c2FnZXMgcmVhY2ggMCwgdGhlIHJlZ2lzdGVyIGlzIGZyZWVkIGFnYWluLlxuXHQgKiBAcGFyYW0gcmVnaXN0ZXIgVGhlIHJlZ2lzdGVyIGZvciB3aGljaCB0byByZW1vdmUgYSB1c2FnZS5cblx0ICovXG5cdHB1YmxpYyByZW1vdmVVc2FnZShyZWdpc3RlcjpTaGFkZXJSZWdpc3RlckVsZW1lbnQpXG5cdHtcblx0XHRpZiAocmVnaXN0ZXIuX2NvbXBvbmVudCA+IC0xKSB7XG5cdFx0XHRpZiAoLS10aGlzLl91c2VkU2luZ2xlQ291bnRbcmVnaXN0ZXIuX2NvbXBvbmVudF1bcmVnaXN0ZXIuaW5kZXhdIDwgMClcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiTW9yZSB1c2FnZXMgcmVtb3ZlZCB0aGFuIGV4aXN0IVwiKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKC0tdGhpcy5fdXNlZFZlY3RvckNvdW50W3JlZ2lzdGVyLmluZGV4XSA8IDApXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIk1vcmUgdXNhZ2VzIHJlbW92ZWQgdGhhbiBleGlzdCFcIik7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIERpc3Bvc2VzIGFueSByZXNvdXJjZXMgdXNlZCBieSB0aGUgY3VycmVudCBSZWdpc3RlclBvb2wgb2JqZWN0LlxuXHQgKi9cblx0cHVibGljIGRpc3Bvc2UoKVxuXHR7XG5cdFx0dGhpcy5fdmVjdG9yUmVnaXN0ZXJzID0gbnVsbDtcblx0XHR0aGlzLl9yZWdpc3RlckNvbXBvbmVudHMgPSBudWxsO1xuXHRcdHRoaXMuX3VzZWRTaW5nbGVDb3VudCA9IG51bGw7XG5cdFx0dGhpcy5fdXNlZFZlY3RvckNvdW50ID0gbnVsbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBJbmRpY2F0ZXMgd2hldGhlciBvciBub3QgYW55IHJlZ2lzdGVycyBhcmUgaW4gdXNlLlxuXHQgKi9cblx0cHVibGljIGhhc1JlZ2lzdGVyZWRSZWdzKCk6Ym9vbGVhblxuXHR7XG5cdFx0Zm9yICh2YXIgaTpudW1iZXIgPSAwOyBpIDwgdGhpcy5fcmVnQ291bnQ7ICsraSlcblx0XHRcdGlmICh0aGlzLmlzUmVnaXN0ZXJVc2VkKGkpKVxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBJbml0aWFsaXplcyBhbGwgcmVnaXN0ZXJzLlxuXHQgKi9cblx0cHJpdmF0ZSBpbml0UmVnaXN0ZXJzKHJlZ05hbWU6c3RyaW5nLCByZWdDb3VudDpudW1iZXIpXG5cdHtcblx0XHR2YXIgaGFzaDpzdHJpbmcgPSBSZWdpc3RlclBvb2wuX2luaXRQb29sKHJlZ05hbWUsIHJlZ0NvdW50KTtcblxuXHRcdHRoaXMuX3ZlY3RvclJlZ2lzdGVycyA9IFJlZ2lzdGVyUG9vbC5fcmVnUG9vbFtoYXNoXTtcblx0XHR0aGlzLl9yZWdpc3RlckNvbXBvbmVudHMgPSBSZWdpc3RlclBvb2wuX3JlZ0NvbXBzUG9vbFtoYXNoXTtcblxuXHRcdHRoaXMuX3VzZWRWZWN0b3JDb3VudCA9IHRoaXMuX2luaXRBcnJheShBcnJheTxudW1iZXI+KHJlZ0NvdW50KSwgMCk7XG5cblx0XHR0aGlzLl91c2VkU2luZ2xlQ291bnQgPSBuZXcgQXJyYXk8QXJyYXk8bnVtYmVyPj4oNCk7XG5cdFx0dGhpcy5fdXNlZFNpbmdsZUNvdW50WzBdID0gdGhpcy5faW5pdEFycmF5KG5ldyBBcnJheTxudW1iZXI+KHJlZ0NvdW50KSwgMCk7XG5cdFx0dGhpcy5fdXNlZFNpbmdsZUNvdW50WzFdID0gdGhpcy5faW5pdEFycmF5KG5ldyBBcnJheTxudW1iZXI+KHJlZ0NvdW50KSwgMCk7XG5cdFx0dGhpcy5fdXNlZFNpbmdsZUNvdW50WzJdID0gdGhpcy5faW5pdEFycmF5KG5ldyBBcnJheTxudW1iZXI+KHJlZ0NvdW50KSwgMCk7XG5cdFx0dGhpcy5fdXNlZFNpbmdsZUNvdW50WzNdID0gdGhpcy5faW5pdEFycmF5KG5ldyBBcnJheTxudW1iZXI+KHJlZ0NvdW50KSwgMCk7XG5cdH1cblxuXHRwcml2YXRlIHN0YXRpYyBfaW5pdFBvb2wocmVnTmFtZTpzdHJpbmcsIHJlZ0NvdW50Om51bWJlcik6c3RyaW5nXG5cdHtcblx0XHR2YXIgaGFzaDpzdHJpbmcgPSByZWdOYW1lICsgcmVnQ291bnQ7XG5cblx0XHRpZiAoUmVnaXN0ZXJQb29sLl9yZWdQb29sW2hhc2hdICE9IHVuZGVmaW5lZClcblx0XHRcdHJldHVybiBoYXNoO1xuXG5cdFx0dmFyIHZlY3RvclJlZ2lzdGVyczpBcnJheTxTaGFkZXJSZWdpc3RlckVsZW1lbnQ+ID0gbmV3IEFycmF5PFNoYWRlclJlZ2lzdGVyRWxlbWVudD4ocmVnQ291bnQpO1xuXHRcdFJlZ2lzdGVyUG9vbC5fcmVnUG9vbFtoYXNoXSA9IHZlY3RvclJlZ2lzdGVycztcblxuXHRcdHZhciByZWdpc3RlckNvbXBvbmVudHMgPSBbXG5cdFx0XHRbXSxcblx0XHRcdFtdLFxuXHRcdFx0W10sXG5cdFx0XHRbXVxuXHRcdF07XG5cdFx0UmVnaXN0ZXJQb29sLl9yZWdDb21wc1Bvb2xbaGFzaF0gPSByZWdpc3RlckNvbXBvbmVudHM7XG5cblx0XHRmb3IgKHZhciBpOm51bWJlciA9IDA7IGkgPCByZWdDb3VudDsgKytpKSB7XG5cblx0XHRcdHZlY3RvclJlZ2lzdGVyc1tpXSA9IG5ldyBTaGFkZXJSZWdpc3RlckVsZW1lbnQocmVnTmFtZSwgaSk7XG5cblx0XHRcdGZvciAodmFyIGo6bnVtYmVyID0gMDsgaiA8IDQ7ICsrailcblx0XHRcdFx0cmVnaXN0ZXJDb21wb25lbnRzW2pdW2ldID0gbmV3IFNoYWRlclJlZ2lzdGVyRWxlbWVudChyZWdOYW1lLCBpLCBqKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFzaDtcblx0fVxuXG5cblx0LyoqXG5cdCAqIENoZWNrIGlmIHRoZSB0ZW1wIHJlZ2lzdGVyIGlzIGVpdGhlciB1c2VkIGZvciBzaW5nbGUgb3IgdmVjdG9yIHVzZVxuXHQgKi9cblx0cHJpdmF0ZSBpc1JlZ2lzdGVyVXNlZChpbmRleDpudW1iZXIpOmJvb2xlYW5cblx0e1xuXHRcdGlmICh0aGlzLl91c2VkVmVjdG9yQ291bnRbaW5kZXhdID4gMClcblx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0Zm9yICh2YXIgaTpudW1iZXIgPSAwOyBpIDwgNDsgKytpKVxuXHRcdFx0aWYgKHRoaXMuX3VzZWRTaW5nbGVDb3VudFtpXVtpbmRleF0gPiAwKVxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cblx0cHJpdmF0ZSBfaW5pdEFycmF5KGE6QXJyYXk8YW55PiwgdmFsOmFueSk6QXJyYXk8YW55PlxuXHR7XG5cdFx0dmFyIGw6bnVtYmVyID0gYS5sZW5ndGg7XG5cblx0XHRmb3IgKHZhciBjOm51bWJlciA9IDA7IGMgPCBsOyBjKyspXG5cdFx0XHRhW2NdID0gdmFsO1xuXG5cdFx0cmV0dXJuIGE7XG5cdH1cbn1cblxuZXhwb3J0ID0gUmVnaXN0ZXJQb29sO1xuIl19