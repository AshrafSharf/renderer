var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var ContextGLBlendFactor = require("awayjs-stagegl/lib/base/ContextGLBlendFactor");
var ContextGLCompareMode = require("awayjs-stagegl/lib/base/ContextGLCompareMode");
var RendererBase = require("awayjs-renderergl/lib/render/RendererBase");
/**
 * The DepthRenderer class renders 32-bit depth information encoded as RGBA
 *
 * @class away.render.DepthRenderer
 */
var DepthRenderer = (function (_super) {
    __extends(DepthRenderer, _super);
    /**
     * Creates a new DepthRenderer object.
     * @param renderBlended Indicates whether semi-transparent objects should be rendered.
     * @param distanceBased Indicates whether the written depth value is distance-based or projected depth-based
     */
    function DepthRenderer(pass, renderBlended) {
        if (renderBlended === void 0) { renderBlended = false; }
        _super.call(this);
        this._pass = pass;
        this._renderBlended = renderBlended;
        this._iBackgroundR = 1;
        this._iBackgroundG = 1;
        this._iBackgroundB = 1;
    }
    Object.defineProperty(DepthRenderer.prototype, "disableColor", {
        get: function () {
            return this._disableColor;
        },
        set: function (value) {
            this._disableColor = value;
        },
        enumerable: true,
        configurable: true
    });
    DepthRenderer.prototype._iRenderCascades = function (entityCollector, target, numCascades, scissorRects, cameras) {
        this.pCollectRenderables(entityCollector);
        this._pContext.setRenderTarget(target, true, 0);
        this._pContext.clear(1, 1, 1, 1, 1, 0);
        this._pContext.setBlendFactors(ContextGLBlendFactor.ONE, ContextGLBlendFactor.ZERO);
        this._pContext.setDepthTest(true, ContextGLCompareMode.LESS);
        var head = this._pOpaqueRenderableHead;
        var first = true;
        for (var i = numCascades - 1; i >= 0; --i) {
            this._pStage.scissorRect = scissorRects[i];
            this.drawCascadeRenderables(head, cameras[i], first ? null : cameras[i].frustumPlanes);
            first = false;
        }
        //line required for correct rendering when using away3d with starling. DO NOT REMOVE UNLESS STARLING INTEGRATION IS RETESTED!
        this._pContext.setDepthTest(false, ContextGLCompareMode.LESS_EQUAL);
        this._pStage.scissorRect = null;
    };
    DepthRenderer.prototype.drawCascadeRenderables = function (renderable, camera, cullPlanes) {
        var activePass;
        var activeMaterial;
        var context = this._pStage.context;
        var renderable2;
        while (renderable) {
            activeMaterial = this.getMaterial(renderable.material, this._pStage.profile);
            renderable2 = renderable;
            activePass = activeMaterial.getMaterialPass(this._pass, this._pStage.profile);
            //TODO: generalise this test
            if (activePass.key == "")
                this.calcAnimationCode(renderable.material, activePass);
            renderable.material._iActivatePass(activePass, this, camera);
            do {
                // if completely in front, it will fall in a different cascade
                // do not use near and far planes
                if (!cullPlanes || renderable2.sourceEntity.worldBounds.isInFrustum(cullPlanes, 4)) {
                    renderable2.material._iRenderPass(activePass, renderable2, this._pStage, camera, this._pRttViewProjectionMatrix);
                }
                else {
                    renderable2.cascaded = true;
                }
                renderable2 = renderable2.next;
            } while (renderable2 && renderable2.material == renderable.material && !renderable2.cascaded);
            renderable.material._iDeactivatePass(activePass, this);
            renderable = renderable2;
        }
    };
    /**
     * @inheritDoc
     */
    DepthRenderer.prototype.pDraw = function (entityCollector, target) {
        this.pCollectRenderables(entityCollector);
        this._pContext.setBlendFactors(ContextGLBlendFactor.ONE, ContextGLBlendFactor.ZERO);
        this._pContext.setDepthTest(true, ContextGLCompareMode.LESS);
        this.drawRenderables(this._pOpaqueRenderableHead, entityCollector);
        if (this._disableColor)
            this._pContext.setColorMask(false, false, false, false);
        if (this._renderBlended)
            this.drawRenderables(this._pBlendedRenderableHead, entityCollector);
        if (this._disableColor)
            this._pContext.setColorMask(true, true, true, true);
    };
    /**
     * Draw a list of renderables.
     * @param renderables The renderables to draw.
     * @param entityCollector The EntityCollector containing all potentially visible information.
     */
    DepthRenderer.prototype.drawRenderables = function (renderable, entityCollector) {
        var activePass;
        var activeMaterial;
        var context = this._pStage.context;
        var camera = entityCollector.camera;
        var renderable2;
        while (renderable) {
            activeMaterial = this.getMaterial(renderable.material, this._pStage.profile);
            // otherwise this would result in depth rendered anyway because fragment shader kil is ignored
            if (this._disableColor && renderable.material.alphaThreshold != 0) {
                renderable2 = renderable;
                do {
                    renderable2 = renderable2.next;
                } while (renderable2 && renderable2.material == renderable.material);
            }
            else {
                renderable2 = renderable;
                activePass = activeMaterial.getMaterialPass(this._pass, this._pStage.profile);
                //TODO: generalise this test
                if (activePass.key == "")
                    this.calcAnimationCode(renderable.material, activePass);
                renderable.material._iActivatePass(activePass, this, camera);
                do {
                    renderable2.material._iRenderPass(activePass, renderable2, this._pStage, camera, this._pRttViewProjectionMatrix);
                    renderable2 = renderable2.next;
                } while (renderable2 && renderable2.material == renderable.material);
                renderable.material._iDeactivatePass(activePass, this);
            }
            renderable = renderable2;
        }
    };
    return DepthRenderer;
})(RendererBase);
module.exports = DepthRenderer;

//# sourceMappingURL=data:application/json;base64,