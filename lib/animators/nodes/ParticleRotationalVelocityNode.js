var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Vector3D = require("awayjs-core/lib/geom/Vector3D");
var ShaderRegisterElement = require("awayjs-stagegl/lib/materials/compilation/ShaderRegisterElement");
var ParticlePropertiesMode = require("awayjs-renderergl/lib/animators/data/ParticlePropertiesMode");
var ParticleNodeBase = require("awayjs-renderergl/lib/animators/nodes/ParticleNodeBase");
var ParticleRotationalVelocityState = require("awayjs-renderergl/lib/animators/states/ParticleRotationalVelocityState");
/**
 * A particle animation node used to set the starting rotational velocity of a particle.
 */
var ParticleRotationalVelocityNode = (function (_super) {
    __extends(ParticleRotationalVelocityNode, _super);
    /**
     * Creates a new <code>ParticleRotationalVelocityNode</code>
     *
     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.
     */
    function ParticleRotationalVelocityNode(mode /*uint*/, rotationalVelocity) {
        if (rotationalVelocity === void 0) { rotationalVelocity = null; }
        _super.call(this, "ParticleRotationalVelocity", mode, 4);
        this._pStateClass = ParticleRotationalVelocityState;
        this._iRotationalVelocity = rotationalVelocity || new Vector3D();
    }
    /**
     * @inheritDoc
     */
    ParticleRotationalVelocityNode.prototype.getAGALVertexCode = function (shaderObject, animationRegisterCache) {
        var rotationRegister = (this._pMode == ParticlePropertiesMode.GLOBAL) ? animationRegisterCache.getFreeVertexConstant() : animationRegisterCache.getFreeVertexAttribute();
        animationRegisterCache.setRegisterIndex(this, ParticleRotationalVelocityState.ROTATIONALVELOCITY_INDEX, rotationRegister.index);
        var nrmVel = animationRegisterCache.getFreeVertexVectorTemp();
        animationRegisterCache.addVertexTempUsages(nrmVel, 1);
        var xAxis = animationRegisterCache.getFreeVertexVectorTemp();
        animationRegisterCache.addVertexTempUsages(xAxis, 1);
        var temp = animationRegisterCache.getFreeVertexVectorTemp();
        animationRegisterCache.addVertexTempUsages(temp, 1);
        var Rtemp = new ShaderRegisterElement(temp.regName, temp.index);
        var R_rev = animationRegisterCache.getFreeVertexVectorTemp();
        R_rev = new ShaderRegisterElement(R_rev.regName, R_rev.index);
        var cos = new ShaderRegisterElement(Rtemp.regName, Rtemp.index, 3);
        var sin = new ShaderRegisterElement(R_rev.regName, R_rev.index, 3);
        animationRegisterCache.removeVertexTempUsage(nrmVel);
        animationRegisterCache.removeVertexTempUsage(xAxis);
        animationRegisterCache.removeVertexTempUsage(temp);
        var code = "";
        code += "mov " + nrmVel + ".xyz," + rotationRegister + ".xyz\n";
        code += "mov " + nrmVel + ".w," + animationRegisterCache.vertexZeroConst + "\n";
        code += "mul " + cos + "," + animationRegisterCache.vertexTime + "," + rotationRegister + ".w\n";
        code += "sin " + sin + "," + cos + "\n";
        code += "cos " + cos + "," + cos + "\n";
        code += "mul " + Rtemp + ".xyz," + sin + "," + nrmVel + ".xyz\n";
        code += "mul " + R_rev + ".xyz," + sin + "," + nrmVel + ".xyz\n";
        code += "neg " + R_rev + ".xyz," + R_rev + ".xyz\n";
        //nrmVel and xAxis are used as temp register
        code += "crs " + nrmVel + ".xyz," + Rtemp + ".xyz," + animationRegisterCache.scaleAndRotateTarget + ".xyz\n";
        code += "mul " + xAxis + ".xyz," + cos + "," + animationRegisterCache.scaleAndRotateTarget + ".xyz\n";
        code += "add " + nrmVel + ".xyz," + nrmVel + ".xyz," + xAxis + ".xyz\n";
        code += "dp3 " + xAxis + ".w," + Rtemp + ".xyz," + animationRegisterCache.scaleAndRotateTarget + ".xyz\n";
        code += "neg " + nrmVel + ".w," + xAxis + ".w\n";
        code += "crs " + Rtemp + ".xyz," + nrmVel + ".xyz," + R_rev + ".xyz\n";
        //use cos as R_rev.w
        code += "mul " + xAxis + ".xyzw," + nrmVel + ".xyzw," + cos + "\n";
        code += "add " + Rtemp + ".xyz," + Rtemp + ".xyz," + xAxis + ".xyz\n";
        code += "mul " + xAxis + ".xyz," + nrmVel + ".w," + R_rev + ".xyz\n";
        code += "add " + animationRegisterCache.scaleAndRotateTarget + ".xyz," + Rtemp + ".xyz," + xAxis + ".xyz\n";
        var len = animationRegisterCache.rotationRegisters.length;
        for (var i = 0; i < len; i++) {
            code += "mov " + nrmVel + ".xyz," + rotationRegister + ".xyz\n";
            code += "mov " + nrmVel + ".w," + animationRegisterCache.vertexZeroConst + "\n";
            code += "mul " + cos + "," + animationRegisterCache.vertexTime + "," + rotationRegister + ".w\n";
            code += "sin " + sin + "," + cos + "\n";
            code += "cos " + cos + "," + cos + "\n";
            code += "mul " + Rtemp + ".xyz," + sin + "," + nrmVel + ".xyz\n";
            code += "mul " + R_rev + ".xyz," + sin + "," + nrmVel + ".xyz\n";
            code += "neg " + R_rev + ".xyz," + R_rev + ".xyz\n";
            code += "crs " + nrmVel + ".xyz," + Rtemp + ".xyz," + animationRegisterCache.rotationRegisters[i] + ".xyz\n";
            code += "mul " + xAxis + ".xyz," + cos + "," + animationRegisterCache.rotationRegisters[i] + "\n";
            code += "add " + nrmVel + ".xyz," + nrmVel + ".xyz," + xAxis + ".xyz\n";
            code += "dp3 " + xAxis + ".w," + Rtemp + ".xyz," + animationRegisterCache.rotationRegisters[i] + "\n";
            code += "neg " + nrmVel + ".w," + xAxis + ".w\n";
            code += "crs " + Rtemp + ".xyz," + nrmVel + ".xyz," + R_rev + ".xyz\n";
            code += "mul " + xAxis + ".xyzw," + nrmVel + ".xyzw," + cos + "\n";
            code += "add " + Rtemp + ".xyz," + Rtemp + ".xyz," + xAxis + ".xyz\n";
            code += "mul " + xAxis + ".xyz," + nrmVel + ".w," + R_rev + ".xyz\n";
            code += "add " + animationRegisterCache.rotationRegisters[i] + "," + Rtemp + ".xyz," + xAxis + ".xyz\n";
        }
        return code;
    };
    /**
     * @inheritDoc
     */
    ParticleRotationalVelocityNode.prototype.getAnimationState = function (animator) {
        return animator.getAnimationState(this);
    };
    /**
     * @inheritDoc
     */
    ParticleRotationalVelocityNode.prototype._iGeneratePropertyOfOneParticle = function (param) {
        //(Vector3d.x,Vector3d.y,Vector3d.z) is rotation axis,Vector3d.w is cycle duration
        var rotate = param[ParticleRotationalVelocityNode.ROTATIONALVELOCITY_VECTOR3D];
        if (!rotate)
            throw (new Error("there is no " + ParticleRotationalVelocityNode.ROTATIONALVELOCITY_VECTOR3D + " in param!"));
        if (rotate.length <= 0)
            rotate.z = 1; //set the default direction
        else
            rotate.normalize();
        this._pOneData[0] = rotate.x;
        this._pOneData[1] = rotate.y;
        this._pOneData[2] = rotate.z;
        if (rotate.w <= 0)
            throw (new Error("the cycle duration must greater than zero"));
        // it's used as angle/2 in agal
        this._pOneData[3] = Math.PI / rotate.w;
    };
    /**
     * Reference for rotational velocity node properties on a single particle (when in local property mode).
     * Expects a <code>Vector3D</code> object representing the rotational velocity around an axis of the particle.
     */
    ParticleRotationalVelocityNode.ROTATIONALVELOCITY_VECTOR3D = "RotationalVelocityVector3D";
    return ParticleRotationalVelocityNode;
})(ParticleNodeBase);
module.exports = ParticleRotationalVelocityNode;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvbm9kZXMvcGFydGljbGVyb3RhdGlvbmFsdmVsb2NpdHlub2RlLnRzIl0sIm5hbWVzIjpbIlBhcnRpY2xlUm90YXRpb25hbFZlbG9jaXR5Tm9kZSIsIlBhcnRpY2xlUm90YXRpb25hbFZlbG9jaXR5Tm9kZS5jb25zdHJ1Y3RvciIsIlBhcnRpY2xlUm90YXRpb25hbFZlbG9jaXR5Tm9kZS5nZXRBR0FMVmVydGV4Q29kZSIsIlBhcnRpY2xlUm90YXRpb25hbFZlbG9jaXR5Tm9kZS5nZXRBbmltYXRpb25TdGF0ZSIsIlBhcnRpY2xlUm90YXRpb25hbFZlbG9jaXR5Tm9kZS5faUdlbmVyYXRlUHJvcGVydHlPZk9uZVBhcnRpY2xlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFPLFFBQVEsV0FBaUIsK0JBQStCLENBQUMsQ0FBQztBQUtqRSxJQUFPLHFCQUFxQixXQUFhLGdFQUFnRSxDQUFDLENBQUM7QUFHM0csSUFBTyxzQkFBc0IsV0FBYSw2REFBNkQsQ0FBQyxDQUFDO0FBQ3pHLElBQU8sZ0JBQWdCLFdBQWUsd0RBQXdELENBQUMsQ0FBQztBQUNoRyxJQUFPLCtCQUErQixXQUFXLHdFQUF3RSxDQUFDLENBQUM7QUFFM0gsQUFHQTs7R0FERztJQUNHLDhCQUE4QjtJQUFTQSxVQUF2Q0EsOEJBQThCQSxVQUF5QkE7SUFXNURBOzs7O09BSUdBO0lBQ0hBLFNBaEJLQSw4QkFBOEJBLENBZ0J2QkEsSUFBSUEsQ0FBUUEsUUFBREEsQUFBU0EsRUFBRUEsa0JBQWtDQTtRQUFsQ0Msa0NBQWtDQSxHQUFsQ0EseUJBQWtDQTtRQUVuRUEsa0JBQU1BLDRCQUE0QkEsRUFBRUEsSUFBSUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFN0NBLElBQUlBLENBQUNBLFlBQVlBLEdBQUdBLCtCQUErQkEsQ0FBQ0E7UUFFcERBLElBQUlBLENBQUNBLG9CQUFvQkEsR0FBR0Esa0JBQWtCQSxJQUFJQSxJQUFJQSxRQUFR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WUFDaEZBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLHNCQUFzQkEsQ0FBQ0EsVUFBVUEsR0FBR0EsR0FBR0EsR0FBR0EsZ0JBQWdCQSxHQUFHQSxNQUFNQSxDQUFDQTtZQUNqR0EsSUFBSUEsSUFBSUEsTUFBTUEsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFDeENBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLElBQUlBLENBQUNBO1lBQ3hDQSxJQUFJQSxJQUFJQSxNQUFNQSxHQUFHQSxLQUFLQSxHQUFHQSxPQUFPQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxNQUFNQSxHQUFHQSxRQUFRQSxDQUFDQTtZQUNqRUEsSUFBSUEsSUFBSUEsTUFBTUEsR0FBR0EsS0FBS0EsR0FBR0EsT0FBT0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsTUFBTUEsR0FBR0EsUUFBUUEsQ0FBQ0E7WUFDakVBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLEtBQUtBLEdBQUdBLE9BQU9BLEdBQUdBLEtBQUtBLEdBQUdBLFFBQVFBLENBQUNBO1lBQ3BEQSxJQUFJQSxJQUFJQSxNQUFNQSxHQUFHQSxNQUFNQSxHQUFHQSxPQUFPQSxHQUFHQSxLQUFLQSxHQUFHQSxPQUFPQSxHQUFHQSxzQkFBc0JBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsUUFBUUEsQ0FBQ0E7WUFDN0dBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLEtBQUtBLEdBQUdBLE9BQU9BLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLHNCQUFzQkEsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUNsR0EsSUFBSUEsSUFBSUEsTUFBTUEsR0FBR0EsTUFBTUEsR0FBR0EsT0FBT0EsR0FBR0EsTUFBTUEsR0FB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QUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxFQUFFQSxHQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUN0Q0EsQ0FBQ0E7SUFwSURKOzs7T0FHR0E7SUFDV0EsMERBQTJCQSxHQUFVQSw0QkFBNEJBLENBQUNBO0lBaUlqRkEscUNBQUNBO0FBQURBLENBMUlBLEFBMElDQSxFQTFJNEMsZ0JBQWdCLEVBMEk1RDtBQUVELEFBQXdDLGlCQUEvQiw4QkFBOEIsQ0FBQyIsImZpbGUiOiJhbmltYXRvcnMvbm9kZXMvUGFydGljbGVSb3RhdGlvbmFsVmVsb2NpdHlOb2RlLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWZWN0b3IzRFx0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2dlb20vVmVjdG9yM0RcIik7XG5cbmltcG9ydCBBbmltYXRvckJhc2VcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYW5pbWF0b3JzL0FuaW1hdG9yQmFzZVwiKTtcbmltcG9ydCBBbmltYXRpb25SZWdpc3RlckNhY2hlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2FuaW1hdG9ycy9kYXRhL0FuaW1hdGlvblJlZ2lzdGVyQ2FjaGVcIik7XG5pbXBvcnQgU2hhZGVyT2JqZWN0QmFzZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvbWF0ZXJpYWxzL2NvbXBpbGF0aW9uL1NoYWRlck9iamVjdEJhc2VcIik7XG5pbXBvcnQgU2hhZGVyUmVnaXN0ZXJFbGVtZW50XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL21hdGVyaWFscy9jb21waWxhdGlvbi9TaGFkZXJSZWdpc3RlckVsZW1lbnRcIik7XG5cbmltcG9ydCBQYXJ0aWNsZVByb3BlcnRpZXNcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvZGF0YS9QYXJ0aWNsZVByb3BlcnRpZXNcIik7XG5pbXBvcnQgUGFydGljbGVQcm9wZXJ0aWVzTW9kZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvZGF0YS9QYXJ0aWNsZVByb3BlcnRpZXNNb2RlXCIpO1xuaW1wb3J0IFBhcnRpY2xlTm9kZUJhc2VcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9ub2Rlcy9QYXJ0aWNsZU5vZGVCYXNlXCIpO1xuaW1wb3J0IFBhcnRpY2xlUm90YXRpb25hbFZlbG9jaXR5U3RhdGVcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvc3RhdGVzL1BhcnRpY2xlUm90YXRpb25hbFZlbG9jaXR5U3RhdGVcIik7XG5cbi8qKlxuICogQSBwYXJ0aWNsZSBhbmltYXRpb24gbm9kZSB1c2VkIHRvIHNldCB0aGUgc3RhcnRpbmcgcm90YXRpb25hbCB2ZWxvY2l0eSBvZiBhIHBhcnRpY2xlLlxuICovXG5jbGFzcyBQYXJ0aWNsZVJvdGF0aW9uYWxWZWxvY2l0eU5vZGUgZXh0ZW5kcyBQYXJ0aWNsZU5vZGVCYXNlXG57XG5cdC8qKiBAcHJpdmF0ZSAqL1xuXHRwdWJsaWMgX2lSb3RhdGlvbmFsVmVsb2NpdHk6VmVjdG9yM0Q7XG5cblx0LyoqXG5cdCAqIFJlZmVyZW5jZSBmb3Igcm90YXRpb25hbCB2ZWxvY2l0eSBub2RlIHByb3BlcnRpZXMgb24gYSBzaW5nbGUgcGFydGljbGUgKHdoZW4gaW4gbG9jYWwgcHJvcGVydHkgbW9kZSkuXG5cdCAqIEV4cGVjdHMgYSA8Y29kZT5WZWN0b3IzRDwvY29kZT4gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgcm90YXRpb25hbCB2ZWxvY2l0eSBhcm91bmQgYW4gYXhpcyBvZiB0aGUgcGFydGljbGUuXG5cdCAqL1xuXHRwdWJsaWMgc3RhdGljIFJPVEFUSU9OQUxWRUxPQ0lUWV9WRUNUT1IzRDpzdHJpbmcgPSBcIlJvdGF0aW9uYWxWZWxvY2l0eVZlY3RvcjNEXCI7XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBuZXcgPGNvZGU+UGFydGljbGVSb3RhdGlvbmFsVmVsb2NpdHlOb2RlPC9jb2RlPlxuXHQgKlxuXHQgKiBAcGFyYW0gICAgICAgICAgICAgICBtb2RlICAgICAgICAgICAgRGVmaW5lcyB3aGV0aGVyIHRoZSBtb2RlIG9mIG9wZXJhdGlvbiBhY3RzIG9uIGxvY2FsIHByb3BlcnRpZXMgb2YgYSBwYXJ0aWNsZSBvciBnbG9iYWwgcHJvcGVydGllcyBvZiB0aGUgbm9kZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKG1vZGU6bnVtYmVyIC8qdWludCovLCByb3RhdGlvbmFsVmVsb2NpdHk6VmVjdG9yM0QgPSBudWxsKVxuXHR7XG5cdFx0c3VwZXIoXCJQYXJ0aWNsZVJvdGF0aW9uYWxWZWxvY2l0eVwiLCBtb2RlLCA0KTtcblxuXHRcdHRoaXMuX3BTdGF0ZUNsYXNzID0gUGFydGljbGVSb3RhdGlvbmFsVmVsb2NpdHlTdGF0ZTtcblxuXHRcdHRoaXMuX2lSb3RhdGlvbmFsVmVsb2NpdHkgPSByb3RhdGlvbmFsVmVsb2NpdHkgfHwgbmV3IFZlY3RvcjNEKCk7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHB1YmxpYyBnZXRBR0FMVmVydGV4Q29kZShzaGFkZXJPYmplY3Q6U2hhZGVyT2JqZWN0QmFzZSwgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZTpBbmltYXRpb25SZWdpc3RlckNhY2hlKTpzdHJpbmdcblx0e1xuXHRcdHZhciByb3RhdGlvblJlZ2lzdGVyOlNoYWRlclJlZ2lzdGVyRWxlbWVudCA9ICh0aGlzLl9wTW9kZSA9PSBQYXJ0aWNsZVByb3BlcnRpZXNNb2RlLkdMT0JBTCk/IGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuZ2V0RnJlZVZlcnRleENvbnN0YW50KCkgOiBhbmltYXRpb25SZWdpc3RlckNhY2hlLmdldEZyZWVWZXJ0ZXhBdHRyaWJ1dGUoKTtcblx0XHRhbmltYXRpb25SZWdpc3RlckNhY2hlLnNldFJlZ2lzdGVySW5kZXgodGhpcywgUGFydGljbGVSb3RhdGlvbmFsVmVsb2NpdHlTdGF0ZS5ST1RBVElPTkFMVkVMT0NJVFlfSU5ERVgsIHJvdGF0aW9uUmVnaXN0ZXIuaW5kZXgpO1xuXG5cdFx0dmFyIG5ybVZlbDpTaGFkZXJSZWdpc3RlckVsZW1lbnQgPSBhbmltYXRpb25SZWdpc3RlckNhY2hlLmdldEZyZWVWZXJ0ZXhWZWN0b3JUZW1wKCk7XG5cdFx0YW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5hZGRWZXJ0ZXhUZW1wVXNhZ2VzKG5ybVZlbCwgMSk7XG5cblx0XHR2YXIgeEF4aXM6U2hhZGVyUmVnaXN0ZXJFbGVtZW50ID0gYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5nZXRGcmVlVmVydGV4VmVjdG9yVGVtcCgpO1xuXHRcdGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuYWRkVmVydGV4VGVtcFVzYWdlcyh4QXhpcywgMSk7XG5cblx0XHR2YXIgdGVtcDpTaGFkZXJSZWdpc3RlckVsZW1lbnQgPSBhbmltYXRpb25SZWdpc3RlckNhY2hlLmdldEZyZWVWZXJ0ZXhWZWN0b3JUZW1wKCk7XG5cdFx0YW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5hZGRWZXJ0ZXhUZW1wVXNhZ2VzKHRlbXAsIDEpO1xuXHRcdHZhciBSdGVtcDpTaGFkZXJSZWdpc3RlckVsZW1lbnQgPSBuZXcgU2hhZGVyUmVnaXN0ZXJFbGVtZW50KHRlbXAucmVnTmFtZSwgdGVtcC5pbmRleCk7XG5cdFx0dmFyIFJfcmV2OlNoYWRlclJlZ2lzdGVyRWxlbWVudCA9IGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuZ2V0RnJlZVZlcnRleFZlY3RvclRlbXAoKTtcblx0XHRSX3JldiA9IG5ldyBTaGFkZXJSZWdpc3RlckVsZW1lbnQoUl9yZXYucmVnTmFtZSwgUl9yZXYuaW5kZXgpO1xuXG5cdFx0dmFyIGNvczpTaGFkZXJSZWdpc3RlckVsZW1lbnQgPSBuZXcgU2hhZGVyUmVnaXN0ZXJFbGVtZW50KFJ0ZW1wLnJlZ05hbWUsIFJ0ZW1wLmluZGV4LCAzKTtcblx0XHR2YXIgc2luOlNoYWRlclJlZ2lzdGVyRWxlbWVudCA9IG5ldyBTaGFkZXJSZWdpc3RlckVsZW1lbnQoUl9yZXYucmVnTmFtZSwgUl9yZXYuaW5kZXgsIDMpO1xuXG5cdFx0YW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5yZW1vdmVWZXJ0ZXhUZW1wVXNhZ2UobnJtVmVsKTtcblx0XHRhbmltYXRpb25SZWdpc3RlckNhY2hlLnJlbW92ZVZlcnRleFRlbXBVc2FnZSh4QXhpcyk7XG5cdFx0YW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5yZW1vdmVWZXJ0ZXhUZW1wVXNhZ2UodGVtcCk7XG5cblx0XHR2YXIgY29kZTpzdHJpbmcgPSBcIlwiO1xuXHRcdGNvZGUgKz0gXCJtb3YgXCIgKyBucm1WZWwgKyBcIi54eXosXCIgKyByb3RhdGlvblJlZ2lzdGVyICsgXCIueHl6XFxuXCI7XG5cdFx0Y29kZSArPSBcIm1vdiBcIiArIG5ybVZlbCArIFwiLncsXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnZlcnRleFplcm9Db25zdCArIFwiXFxuXCI7XG5cblx0XHRjb2RlICs9IFwibXVsIFwiICsgY29zICsgXCIsXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnZlcnRleFRpbWUgKyBcIixcIiArIHJvdGF0aW9uUmVnaXN0ZXIgKyBcIi53XFxuXCI7XG5cblx0XHRjb2RlICs9IFwic2luIFwiICsgc2luICsgXCIsXCIgKyBjb3MgKyBcIlxcblwiO1xuXHRcdGNvZGUgKz0gXCJjb3MgXCIgKyBjb3MgKyBcIixcIiArIGNvcyArIFwiXFxuXCI7XG5cblx0XHRjb2RlICs9IFwibXVsIFwiICsgUnRlbXAgKyBcIi54eXosXCIgKyBzaW4gKyBcIixcIiArIG5ybVZlbCArIFwiLnh5elxcblwiO1xuXG5cdFx0Y29kZSArPSBcIm11bCBcIiArIFJfcmV2ICsgXCIueHl6LFwiICsgc2luICsgXCIsXCIgKyBucm1WZWwgKyBcIi54eXpcXG5cIjtcblx0XHRjb2RlICs9IFwibmVnIFwiICsgUl9yZXYgKyBcIi54eXosXCIgKyBSX3JldiArIFwiLnh5elxcblwiO1xuXG5cdFx0Ly9ucm1WZWwgYW5kIHhBeGlzIGFyZSB1c2VkIGFzIHRlbXAgcmVnaXN0ZXJcblx0XHRjb2RlICs9IFwiY3JzIFwiICsgbnJtVmVsICsgXCIueHl6LFwiICsgUnRlbXAgKyBcIi54eXosXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnNjYWxlQW5kUm90YXRlVGFyZ2V0ICsgXCIueHl6XFxuXCI7XG5cblx0XHRjb2RlICs9IFwibXVsIFwiICsgeEF4aXMgKyBcIi54eXosXCIgKyBjb3MgKyBcIixcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuc2NhbGVBbmRSb3RhdGVUYXJnZXQgKyBcIi54eXpcXG5cIjtcblx0XHRjb2RlICs9IFwiYWRkIFwiICsgbnJtVmVsICsgXCIueHl6LFwiICsgbnJtVmVsICsgXCIueHl6LFwiICsgeEF4aXMgKyBcIi54eXpcXG5cIjtcblx0XHRjb2RlICs9IFwiZHAzIFwiICsgeEF4aXMgKyBcIi53LFwiICsgUnRlbXAgKyBcIi54eXosXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnNjYWxlQW5kUm90YXRlVGFyZ2V0ICsgXCIueHl6XFxuXCI7XG5cdFx0Y29kZSArPSBcIm5lZyBcIiArIG5ybVZlbCArIFwiLncsXCIgKyB4QXhpcyArIFwiLndcXG5cIjtcblxuXHRcdGNvZGUgKz0gXCJjcnMgXCIgKyBSdGVtcCArIFwiLnh5eixcIiArIG5ybVZlbCArIFwiLnh5eixcIiArIFJfcmV2ICsgXCIueHl6XFxuXCI7XG5cblx0XHQvL3VzZSBjb3MgYXMgUl9yZXYud1xuXHRcdGNvZGUgKz0gXCJtdWwgXCIgKyB4QXhpcyArIFwiLnh5encsXCIgKyBucm1WZWwgKyBcIi54eXp3LFwiICsgY29zICsgXCJcXG5cIjtcblx0XHRjb2RlICs9IFwiYWRkIFwiICsgUnRlbXAgKyBcIi54eXosXCIgKyBSdGVtcCArIFwiLnh5eixcIiArIHhBeGlzICsgXCIueHl6XFxuXCI7XG5cdFx0Y29kZSArPSBcIm11bCBcIiArIHhBeGlzICsgXCIueHl6LFwiICsgbnJtVmVsICsgXCIudyxcIiArIFJfcmV2ICsgXCIueHl6XFxuXCI7XG5cblx0XHRjb2RlICs9IFwiYWRkIFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5zY2FsZUFuZFJvdGF0ZVRhcmdldCArIFwiLnh5eixcIiArIFJ0ZW1wICsgXCIueHl6LFwiICsgeEF4aXMgKyBcIi54eXpcXG5cIjtcblxuXHRcdHZhciBsZW46bnVtYmVyIC8qaW50Ki8gPSBhbmltYXRpb25SZWdpc3RlckNhY2hlLnJvdGF0aW9uUmVnaXN0ZXJzLmxlbmd0aDtcblx0XHRmb3IgKHZhciBpOm51bWJlciAvKmludCovID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRjb2RlICs9IFwibW92IFwiICsgbnJtVmVsICsgXCIueHl6LFwiICsgcm90YXRpb25SZWdpc3RlciArIFwiLnh5elxcblwiO1xuXHRcdFx0Y29kZSArPSBcIm1vdiBcIiArIG5ybVZlbCArIFwiLncsXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnZlcnRleFplcm9Db25zdCArIFwiXFxuXCI7XG5cdFx0XHRjb2RlICs9IFwibXVsIFwiICsgY29zICsgXCIsXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnZlcnRleFRpbWUgKyBcIixcIiArIHJvdGF0aW9uUmVnaXN0ZXIgKyBcIi53XFxuXCI7XG5cdFx0XHRjb2RlICs9IFwic2luIFwiICsgc2luICsgXCIsXCIgKyBjb3MgKyBcIlxcblwiO1xuXHRcdFx0Y29kZSArPSBcImNvcyBcIiArIGNvcyArIFwiLFwiICsgY29zICsgXCJcXG5cIjtcblx0XHRcdGNvZGUgKz0gXCJtdWwgXCIgKyBSdGVtcCArIFwiLnh5eixcIiArIHNpbiArIFwiLFwiICsgbnJtVmVsICsgXCIueHl6XFxuXCI7XG5cdFx0XHRjb2RlICs9IFwibXVsIFwiICsgUl9yZXYgKyBcIi54eXosXCIgKyBzaW4gKyBcIixcIiArIG5ybVZlbCArIFwiLnh5elxcblwiO1xuXHRcdFx0Y29kZSArPSBcIm5lZyBcIiArIFJfcmV2ICsgXCIueHl6LFwiICsgUl9yZXYgKyBcIi54eXpcXG5cIjtcblx0XHRcdGNvZGUgKz0gXCJjcnMgXCIgKyBucm1WZWwgKyBcIi54eXosXCIgKyBSdGVtcCArIFwiLnh5eixcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUucm90YXRpb25SZWdpc3RlcnNbaV0gKyBcIi54eXpcXG5cIjtcblx0XHRcdGNvZGUgKz0gXCJtdWwgXCIgKyB4QXhpcyArIFwiLnh5eixcIiArIGNvcyArIFwiLFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5yb3RhdGlvblJlZ2lzdGVyc1tpXSArIFwiXFxuXCI7XG5cdFx0XHRjb2RlICs9IFwiYWRkIFwiICsgbnJtVmVsICsgXCIueHl6LFwiICsgbnJtVmVsICsgXCIueHl6LFwiICsgeEF4aXMgKyBcIi54eXpcXG5cIjtcblx0XHRcdGNvZGUgKz0gXCJkcDMgXCIgKyB4QXhpcyArIFwiLncsXCIgKyBSdGVtcCArIFwiLnh5eixcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUucm90YXRpb25SZWdpc3RlcnNbaV0gKyBcIlxcblwiO1xuXHRcdFx0Y29kZSArPSBcIm5lZyBcIiArIG5ybVZlbCArIFwiLncsXCIgKyB4QXhpcyArIFwiLndcXG5cIjtcblx0XHRcdGNvZGUgKz0gXCJjcnMgXCIgKyBSdGVtcCArIFwiLnh5eixcIiArIG5ybVZlbCArIFwiLnh5eixcIiArIFJfcmV2ICsgXCIueHl6XFxuXCI7XG5cdFx0XHRjb2RlICs9IFwibXVsIFwiICsgeEF4aXMgKyBcIi54eXp3LFwiICsgbnJtVmVsICsgXCIueHl6dyxcIiArIGNvcyArIFwiXFxuXCI7XG5cdFx0XHRjb2RlICs9IFwiYWRkIFwiICsgUnRlbXAgKyBcIi54eXosXCIgKyBSdGVtcCArIFwiLnh5eixcIiArIHhBeGlzICsgXCIueHl6XFxuXCI7XG5cdFx0XHRjb2RlICs9IFwibXVsIFwiICsgeEF4aXMgKyBcIi54eXosXCIgKyBucm1WZWwgKyBcIi53LFwiICsgUl9yZXYgKyBcIi54eXpcXG5cIjtcblx0XHRcdGNvZGUgKz0gXCJhZGQgXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnJvdGF0aW9uUmVnaXN0ZXJzW2ldICsgXCIsXCIgKyBSdGVtcCArIFwiLnh5eixcIiArIHhBeGlzICsgXCIueHl6XFxuXCI7XG5cdFx0fVxuXHRcdHJldHVybiBjb2RlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRwdWJsaWMgZ2V0QW5pbWF0aW9uU3RhdGUoYW5pbWF0b3I6QW5pbWF0b3JCYXNlKTpQYXJ0aWNsZVJvdGF0aW9uYWxWZWxvY2l0eVN0YXRlXG5cdHtcblx0XHRyZXR1cm4gPFBhcnRpY2xlUm90YXRpb25hbFZlbG9jaXR5U3RhdGU+IGFuaW1hdG9yLmdldEFuaW1hdGlvblN0YXRlKHRoaXMpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRwdWJsaWMgX2lHZW5lcmF0ZVByb3BlcnR5T2ZPbmVQYXJ0aWNsZShwYXJhbTpQYXJ0aWNsZVByb3BlcnRpZXMpXG5cdHtcblx0XHQvLyhWZWN0b3IzZC54LFZlY3RvcjNkLnksVmVjdG9yM2QueikgaXMgcm90YXRpb24gYXhpcyxWZWN0b3IzZC53IGlzIGN5Y2xlIGR1cmF0aW9uXG5cdFx0dmFyIHJvdGF0ZTpWZWN0b3IzRCA9IHBhcmFtW1BhcnRpY2xlUm90YXRpb25hbFZlbG9jaXR5Tm9kZS5ST1RBVElPTkFMVkVMT0NJVFlfVkVDVE9SM0RdO1xuXHRcdGlmICghcm90YXRlKVxuXHRcdFx0dGhyb3cobmV3IEVycm9yKFwidGhlcmUgaXMgbm8gXCIgKyBQYXJ0aWNsZVJvdGF0aW9uYWxWZWxvY2l0eU5vZGUuUk9UQVRJT05BTFZFTE9DSVRZX1ZFQ1RPUjNEICsgXCIgaW4gcGFyYW0hXCIpKTtcblxuXHRcdGlmIChyb3RhdGUubGVuZ3RoIDw9IDApXG5cdFx0XHRyb3RhdGUueiA9IDE7IC8vc2V0IHRoZSBkZWZhdWx0IGRpcmVjdGlvblxuXHRcdGVsc2Vcblx0XHRcdHJvdGF0ZS5ub3JtYWxpemUoKTtcblxuXHRcdHRoaXMuX3BPbmVEYXRhWzBdID0gcm90YXRlLng7XG5cdFx0dGhpcy5fcE9uZURhdGFbMV0gPSByb3RhdGUueTtcblx0XHR0aGlzLl9wT25lRGF0YVsyXSA9IHJvdGF0ZS56O1xuXHRcdGlmIChyb3RhdGUudyA8PSAwKVxuXHRcdFx0dGhyb3cobmV3IEVycm9yKFwidGhlIGN5Y2xlIGR1cmF0aW9uIG11c3QgZ3JlYXRlciB0aGFuIHplcm9cIikpO1xuXHRcdC8vIGl0J3MgdXNlZCBhcyBhbmdsZS8yIGluIGFnYWxcblx0XHR0aGlzLl9wT25lRGF0YVszXSA9IE1hdGguUEkvcm90YXRlLnc7XG5cdH1cbn1cblxuZXhwb3J0ID0gUGFydGljbGVSb3RhdGlvbmFsVmVsb2NpdHlOb2RlOyJdfQ==