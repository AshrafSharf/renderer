var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Vector3D = require("awayjs-core/lib/geom/Vector3D");
var ParticlePropertiesMode = require("awayjs-renderergl/lib/animators/data/ParticlePropertiesMode");
var ParticleNodeBase = require("awayjs-renderergl/lib/animators/nodes/ParticleNodeBase");
var ParticlePositionState = require("awayjs-renderergl/lib/animators/states/ParticlePositionState");
/**
 * A particle animation node used to set the starting position of a particle.
 */
var ParticlePositionNode = (function (_super) {
    __extends(ParticlePositionNode, _super);
    /**
     * Creates a new <code>ParticlePositionNode</code>
     *
     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.
     * @param    [optional] position        Defines the default position of the particle when in global mode. Defaults to 0,0,0.
     */
    function ParticlePositionNode(mode /*uint*/, position) {
        if (position === void 0) { position = null; }
        _super.call(this, "ParticlePosition", mode, 3);
        this._pStateClass = ParticlePositionState;
        this._iPosition = position || new Vector3D();
    }
    /**
     * @inheritDoc
     */
    ParticlePositionNode.prototype.getAGALVertexCode = function (shaderObject, animationRegisterCache) {
        var positionAttribute = (this._pMode == ParticlePropertiesMode.GLOBAL) ? animationRegisterCache.getFreeVertexConstant() : animationRegisterCache.getFreeVertexAttribute();
        animationRegisterCache.setRegisterIndex(this, ParticlePositionState.POSITION_INDEX, positionAttribute.index);
        return "add " + animationRegisterCache.positionTarget + ".xyz," + positionAttribute + ".xyz," + animationRegisterCache.positionTarget + ".xyz\n";
    };
    /**
     * @inheritDoc
     */
    ParticlePositionNode.prototype.getAnimationState = function (animator) {
        return animator.getAnimationState(this);
    };
    /**
     * @inheritDoc
     */
    ParticlePositionNode.prototype._iGeneratePropertyOfOneParticle = function (param) {
        var offset = param[ParticlePositionNode.POSITION_VECTOR3D];
        if (!offset)
            throw (new Error("there is no " + ParticlePositionNode.POSITION_VECTOR3D + " in param!"));
        this._pOneData[0] = offset.x;
        this._pOneData[1] = offset.y;
        this._pOneData[2] = offset.z;
    };
    /**
     * Reference for position node properties on a single particle (when in local property mode).
     * Expects a <code>Vector3D</code> object representing position of the particle.
     */
    ParticlePositionNode.POSITION_VECTOR3D = "PositionVector3D";
    return ParticlePositionNode;
})(ParticleNodeBase);
module.exports = ParticlePositionNode;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvbm9kZXMvcGFydGljbGVwb3NpdGlvbm5vZGUudHMiXSwibmFtZXMiOlsiUGFydGljbGVQb3NpdGlvbk5vZGUiLCJQYXJ0aWNsZVBvc2l0aW9uTm9kZS5jb25zdHJ1Y3RvciIsIlBhcnRpY2xlUG9zaXRpb25Ob2RlLmdldEFHQUxWZXJ0ZXhDb2RlIiwiUGFydGljbGVQb3NpdGlvbk5vZGUuZ2V0QW5pbWF0aW9uU3RhdGUiLCJQYXJ0aWNsZVBvc2l0aW9uTm9kZS5faUdlbmVyYXRlUHJvcGVydHlPZk9uZVBhcnRpY2xlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFPLFFBQVEsV0FBaUIsK0JBQStCLENBQUMsQ0FBQztBQVFqRSxJQUFPLHNCQUFzQixXQUFhLDZEQUE2RCxDQUFDLENBQUM7QUFDekcsSUFBTyxnQkFBZ0IsV0FBZSx3REFBd0QsQ0FBQyxDQUFDO0FBQ2hHLElBQU8scUJBQXFCLFdBQWEsOERBQThELENBQUMsQ0FBQztBQUV6RyxBQUdBOztHQURHO0lBQ0csb0JBQW9CO0lBQVNBLFVBQTdCQSxvQkFBb0JBLFVBQXlCQTtJQVdsREE7Ozs7O09BS0dBO0lBQ0hBLFNBakJLQSxvQkFBb0JBLENBaUJiQSxJQUFJQSxDQUFRQSxRQUFEQSxBQUFTQSxFQUFFQSxRQUF3QkE7UUFBeEJDLHdCQUF3QkEsR0FBeEJBLGVBQXdCQTtRQUV6REEsa0JBQU1BLGtCQUFrQkEsRUFBRUEsSUFBSUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFbkNBLElBQUlBLENBQUNBLFlBQVlBLEdBQUdBLHFCQUFxQkEsQ0FBQ0E7UUFFMUNBLElBQUlBLENBQUNBLFVBQVVBLEdBQUdBLFFBQVFBLElBQUlBLElBQUlBLFFBQVFBLEVBQUVBLENBQUNBO0lBQzlDQSxDQUFDQTtJQUVERDs7T0FFR0E7SUFDSUEsZ0RBQWlCQSxHQUF4QkEsVUFBeUJBLFlBQTZCQSxFQUFFQSxzQkFBNkNBO1FBRXBHRSxJQUFJQSxpQkFBaUJBLEdBQXlCQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxJQUFJQSxzQkFBc0JBLENBQUNBLE1BQU1BLENBQUNBLEdBQUVBLHNCQUFzQkEsQ0FBQ0EscUJBQXFCQSxFQUFFQSxHQUFHQSxzQkFBc0JBLENBQUNBLHNCQUFzQkEsRUFBRUEsQ0FBQ0E7UUFDL0xBLHNCQUFzQkEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxJQUFJQSxFQUFFQSxxQkFBcUJBLENBQUNBLGNBQWNBLEVBQUVBLGlCQUFpQkEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFFN0dBLE1BQU1BLENBQUNBLE1BQU1BLEdBQUdBLHNCQUFzQkEsQ0FBQ0EsY0FBY0EsR0FBR0EsT0FBT0EsR0FBR0EsaUJBQWlCQSxHQUFHQSxPQUFPQSxHQUFHQSxzQkFBc0JBLENBQUNBLGNBQWNBLEdBQUdBLFFBQVFBLENBQUNBO0lBQ2xKQSxDQUFDQTtJQUVERjs7T0FFR0E7SUFDSUEsZ0RBQWlCQSxHQUF4QkEsVUFBeUJBLFFBQXFCQTtRQUU3Q0csTUFBTUEsQ0FBeUJBLFFBQVFBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7SUFDakVBLENBQUNBO0lBRURIOztPQUVHQTtJQUNJQSw4REFBK0JBLEdBQXRDQSxVQUF1Q0EsS0FBd0JBO1FBRTlESSxJQUFJQSxNQUFNQSxHQUFZQSxLQUFLQSxDQUFDQSxvQkFBb0JBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsQ0FBQ0E7UUFDcEVBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBO1lBQ1hBLE1BQUtBLENBQUNBLElBQUlBLEtBQUtBLENBQUNBLGNBQWNBLEdBQUdBLG9CQUFvQkEsQ0FBQ0EsaUJBQWlCQSxHQUFHQSxZQUFZQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUUxRkEsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDN0JBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBO1FBQzdCQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUM5QkEsQ0FBQ0E7SUFwRERKOzs7T0FHR0E7SUFDV0Esc0NBQWlCQSxHQUFVQSxrQkFBa0JBLENBQUNBO0lBaUQ3REEsMkJBQUNBO0FBQURBLENBMURBLEFBMERDQSxFQTFEa0MsZ0JBQWdCLEVBMERsRDtBQUVELEFBQThCLGlCQUFyQixvQkFBb0IsQ0FBQyIsImZpbGUiOiJhbmltYXRvcnMvbm9kZXMvUGFydGljbGVQb3NpdGlvbk5vZGUuanMiLCJzb3VyY2VSb290IjoiLi4vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZlY3RvcjNEXHRcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9WZWN0b3IzRFwiKTtcblxuaW1wb3J0IEFuaW1hdG9yQmFzZVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9hbmltYXRvcnMvQW5pbWF0b3JCYXNlXCIpO1xuaW1wb3J0IEFuaW1hdGlvblJlZ2lzdGVyQ2FjaGVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYW5pbWF0b3JzL2RhdGEvQW5pbWF0aW9uUmVnaXN0ZXJDYWNoZVwiKTtcbmltcG9ydCBTaGFkZXJPYmplY3RCYXNlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9tYXRlcmlhbHMvY29tcGlsYXRpb24vU2hhZGVyT2JqZWN0QmFzZVwiKTtcbmltcG9ydCBTaGFkZXJSZWdpc3RlckVsZW1lbnRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvbWF0ZXJpYWxzL2NvbXBpbGF0aW9uL1NoYWRlclJlZ2lzdGVyRWxlbWVudFwiKTtcblxuaW1wb3J0IFBhcnRpY2xlUHJvcGVydGllc1x0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9kYXRhL1BhcnRpY2xlUHJvcGVydGllc1wiKTtcbmltcG9ydCBQYXJ0aWNsZVByb3BlcnRpZXNNb2RlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9kYXRhL1BhcnRpY2xlUHJvcGVydGllc01vZGVcIik7XG5pbXBvcnQgUGFydGljbGVOb2RlQmFzZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYW5pbWF0b3JzL25vZGVzL1BhcnRpY2xlTm9kZUJhc2VcIik7XG5pbXBvcnQgUGFydGljbGVQb3NpdGlvblN0YXRlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9zdGF0ZXMvUGFydGljbGVQb3NpdGlvblN0YXRlXCIpO1xuXG4vKipcbiAqIEEgcGFydGljbGUgYW5pbWF0aW9uIG5vZGUgdXNlZCB0byBzZXQgdGhlIHN0YXJ0aW5nIHBvc2l0aW9uIG9mIGEgcGFydGljbGUuXG4gKi9cbmNsYXNzIFBhcnRpY2xlUG9zaXRpb25Ob2RlIGV4dGVuZHMgUGFydGljbGVOb2RlQmFzZVxue1xuXHQvKiogQHByaXZhdGUgKi9cblx0cHVibGljIF9pUG9zaXRpb246VmVjdG9yM0Q7XG5cblx0LyoqXG5cdCAqIFJlZmVyZW5jZSBmb3IgcG9zaXRpb24gbm9kZSBwcm9wZXJ0aWVzIG9uIGEgc2luZ2xlIHBhcnRpY2xlICh3aGVuIGluIGxvY2FsIHByb3BlcnR5IG1vZGUpLlxuXHQgKiBFeHBlY3RzIGEgPGNvZGU+VmVjdG9yM0Q8L2NvZGU+IG9iamVjdCByZXByZXNlbnRpbmcgcG9zaXRpb24gb2YgdGhlIHBhcnRpY2xlLlxuXHQgKi9cblx0cHVibGljIHN0YXRpYyBQT1NJVElPTl9WRUNUT1IzRDpzdHJpbmcgPSBcIlBvc2l0aW9uVmVjdG9yM0RcIjtcblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIG5ldyA8Y29kZT5QYXJ0aWNsZVBvc2l0aW9uTm9kZTwvY29kZT5cblx0ICpcblx0ICogQHBhcmFtICAgICAgICAgICAgICAgbW9kZSAgICAgICAgICAgIERlZmluZXMgd2hldGhlciB0aGUgbW9kZSBvZiBvcGVyYXRpb24gYWN0cyBvbiBsb2NhbCBwcm9wZXJ0aWVzIG9mIGEgcGFydGljbGUgb3IgZ2xvYmFsIHByb3BlcnRpZXMgb2YgdGhlIG5vZGUuXG5cdCAqIEBwYXJhbSAgICBbb3B0aW9uYWxdIHBvc2l0aW9uICAgICAgICBEZWZpbmVzIHRoZSBkZWZhdWx0IHBvc2l0aW9uIG9mIHRoZSBwYXJ0aWNsZSB3aGVuIGluIGdsb2JhbCBtb2RlLiBEZWZhdWx0cyB0byAwLDAsMC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKG1vZGU6bnVtYmVyIC8qdWludCovLCBwb3NpdGlvbjpWZWN0b3IzRCA9IG51bGwpXG5cdHtcblx0XHRzdXBlcihcIlBhcnRpY2xlUG9zaXRpb25cIiwgbW9kZSwgMyk7XG5cblx0XHR0aGlzLl9wU3RhdGVDbGFzcyA9IFBhcnRpY2xlUG9zaXRpb25TdGF0ZTtcblxuXHRcdHRoaXMuX2lQb3NpdGlvbiA9IHBvc2l0aW9uIHx8IG5ldyBWZWN0b3IzRCgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRwdWJsaWMgZ2V0QUdBTFZlcnRleENvZGUoc2hhZGVyT2JqZWN0OlNoYWRlck9iamVjdEJhc2UsIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGU6QW5pbWF0aW9uUmVnaXN0ZXJDYWNoZSk6c3RyaW5nXG5cdHtcblx0XHR2YXIgcG9zaXRpb25BdHRyaWJ1dGU6U2hhZGVyUmVnaXN0ZXJFbGVtZW50ID0gKHRoaXMuX3BNb2RlID09IFBhcnRpY2xlUHJvcGVydGllc01vZGUuR0xPQkFMKT8gYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5nZXRGcmVlVmVydGV4Q29uc3RhbnQoKSA6IGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuZ2V0RnJlZVZlcnRleEF0dHJpYnV0ZSgpO1xuXHRcdGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuc2V0UmVnaXN0ZXJJbmRleCh0aGlzLCBQYXJ0aWNsZVBvc2l0aW9uU3RhdGUuUE9TSVRJT05fSU5ERVgsIHBvc2l0aW9uQXR0cmlidXRlLmluZGV4KTtcblxuXHRcdHJldHVybiBcImFkZCBcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUucG9zaXRpb25UYXJnZXQgKyBcIi54eXosXCIgKyBwb3NpdGlvbkF0dHJpYnV0ZSArIFwiLnh5eixcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUucG9zaXRpb25UYXJnZXQgKyBcIi54eXpcXG5cIjtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIGdldEFuaW1hdGlvblN0YXRlKGFuaW1hdG9yOkFuaW1hdG9yQmFzZSk6UGFydGljbGVQb3NpdGlvblN0YXRlXG5cdHtcblx0XHRyZXR1cm4gPFBhcnRpY2xlUG9zaXRpb25TdGF0ZT4gYW5pbWF0b3IuZ2V0QW5pbWF0aW9uU3RhdGUodGhpcyk7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHB1YmxpYyBfaUdlbmVyYXRlUHJvcGVydHlPZk9uZVBhcnRpY2xlKHBhcmFtOlBhcnRpY2xlUHJvcGVydGllcylcblx0e1xuXHRcdHZhciBvZmZzZXQ6VmVjdG9yM0QgPSBwYXJhbVtQYXJ0aWNsZVBvc2l0aW9uTm9kZS5QT1NJVElPTl9WRUNUT1IzRF07XG5cdFx0aWYgKCFvZmZzZXQpXG5cdFx0XHR0aHJvdyhuZXcgRXJyb3IoXCJ0aGVyZSBpcyBubyBcIiArIFBhcnRpY2xlUG9zaXRpb25Ob2RlLlBPU0lUSU9OX1ZFQ1RPUjNEICsgXCIgaW4gcGFyYW0hXCIpKTtcblxuXHRcdHRoaXMuX3BPbmVEYXRhWzBdID0gb2Zmc2V0Lng7XG5cdFx0dGhpcy5fcE9uZURhdGFbMV0gPSBvZmZzZXQueTtcblx0XHR0aGlzLl9wT25lRGF0YVsyXSA9IG9mZnNldC56O1xuXHR9XG59XG5cbmV4cG9ydCA9IFBhcnRpY2xlUG9zaXRpb25Ob2RlOyJdfQ==