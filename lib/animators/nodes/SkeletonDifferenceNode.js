var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var AnimationNodeBase = require("awayjs-core/lib/animators/nodes/AnimationNodeBase");
var SkeletonDifferenceState = require("awayjs-renderergl/lib/animators/states/SkeletonDifferenceState");
/**
 * A skeleton animation node that uses a difference input pose with a base input pose to blend a linearly interpolated output of a skeleton pose.
 */
var SkeletonDifferenceNode = (function (_super) {
    __extends(SkeletonDifferenceNode, _super);
    /**
     * Creates a new <code>SkeletonAdditiveNode</code> object.
     */
    function SkeletonDifferenceNode() {
        _super.call(this);
        this._pStateClass = SkeletonDifferenceState;
    }
    /**
     * @inheritDoc
     */
    SkeletonDifferenceNode.prototype.getAnimationState = function (animator) {
        return animator.getAnimationState(this);
    };
    return SkeletonDifferenceNode;
})(AnimationNodeBase);
module.exports = SkeletonDifferenceNode;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFuaW1hdG9ycy9ub2Rlcy9za2VsZXRvbmRpZmZlcmVuY2Vub2RlLnRzIl0sIm5hbWVzIjpbIlNrZWxldG9uRGlmZmVyZW5jZU5vZGUiLCJTa2VsZXRvbkRpZmZlcmVuY2VOb2RlLmNvbnN0cnVjdG9yIiwiU2tlbGV0b25EaWZmZXJlbmNlTm9kZS5nZXRBbmltYXRpb25TdGF0ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBTyxpQkFBaUIsV0FBYyxtREFBbUQsQ0FBQyxDQUFDO0FBSTNGLElBQU8sdUJBQXVCLFdBQWEsZ0VBQWdFLENBQUMsQ0FBQztBQUU3RyxBQUdBOztHQURHO0lBQ0csc0JBQXNCO0lBQVNBLFVBQS9CQSxzQkFBc0JBLFVBQTBCQTtJQVlyREE7O09BRUdBO0lBQ0hBLFNBZktBLHNCQUFzQkE7UUFpQjFCQyxpQkFBT0EsQ0FBQ0E7UUFFUkEsSUFBSUEsQ0FBQ0EsWUFBWUEsR0FBR0EsdUJBQXVCQSxDQUFDQTtJQUM3Q0EsQ0FBQ0E7SUFFREQ7O09BRUdBO0lBQ0lBLGtEQUFpQkEsR0FBeEJBLFVBQXlCQSxRQUFxQkE7UUFFN0NFLE1BQU1BLENBQTJCQSxRQUFRQSxDQUFDQSxpQkFBaUJBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO0lBQ25FQSxDQUFDQTtJQUNGRiw2QkFBQ0E7QUFBREEsQ0E3QkEsQUE2QkNBLEVBN0JvQyxpQkFBaUIsRUE2QnJEO0FBRUQsQUFBK0IsaUJBQXRCLHNCQUFzQixDQUFBIiwiZmlsZSI6ImFuaW1hdG9ycy9ub2Rlcy9Ta2VsZXRvbkRpZmZlcmVuY2VOb2RlLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9yb2JiYXRlbWFuL1dlYnN0b3JtUHJvamVjdHMvYXdheWpzLXJlbmRlcmVyZ2wvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEFuaW1hdGlvbk5vZGVCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvYW5pbWF0b3JzL25vZGVzL0FuaW1hdGlvbk5vZGVCYXNlXCIpO1xuXG5pbXBvcnQgQW5pbWF0b3JCYXNlXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2FuaW1hdG9ycy9BbmltYXRvckJhc2VcIik7XG5cbmltcG9ydCBTa2VsZXRvbkRpZmZlcmVuY2VTdGF0ZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvc3RhdGVzL1NrZWxldG9uRGlmZmVyZW5jZVN0YXRlXCIpO1xuXG4vKipcbiAqIEEgc2tlbGV0b24gYW5pbWF0aW9uIG5vZGUgdGhhdCB1c2VzIGEgZGlmZmVyZW5jZSBpbnB1dCBwb3NlIHdpdGggYSBiYXNlIGlucHV0IHBvc2UgdG8gYmxlbmQgYSBsaW5lYXJseSBpbnRlcnBvbGF0ZWQgb3V0cHV0IG9mIGEgc2tlbGV0b24gcG9zZS5cbiAqL1xuY2xhc3MgU2tlbGV0b25EaWZmZXJlbmNlTm9kZSBleHRlbmRzIEFuaW1hdGlvbk5vZGVCYXNlXG57XG5cdC8qKlxuXHQgKiBEZWZpbmVzIGEgYmFzZSBpbnB1dCBub2RlIHRvIHVzZSBmb3IgdGhlIGJsZW5kZWQgb3V0cHV0LlxuXHQgKi9cblx0cHVibGljIGJhc2VJbnB1dDpBbmltYXRpb25Ob2RlQmFzZTtcblxuXHQvKipcblx0ICogRGVmaW5lcyBhIGRpZmZlcmVuY2UgaW5wdXQgbm9kZSB0byB1c2UgZm9yIHRoZSBibGVuZGVkIG91dHB1dC5cblx0ICovXG5cdHB1YmxpYyBkaWZmZXJlbmNlSW5wdXQ6QW5pbWF0aW9uTm9kZUJhc2U7XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBuZXcgPGNvZGU+U2tlbGV0b25BZGRpdGl2ZU5vZGU8L2NvZGU+IG9iamVjdC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKClcblx0e1xuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLl9wU3RhdGVDbGFzcyA9IFNrZWxldG9uRGlmZmVyZW5jZVN0YXRlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRwdWJsaWMgZ2V0QW5pbWF0aW9uU3RhdGUoYW5pbWF0b3I6QW5pbWF0b3JCYXNlKTpTa2VsZXRvbkRpZmZlcmVuY2VTdGF0ZVxuXHR7XG5cdFx0cmV0dXJuIDxTa2VsZXRvbkRpZmZlcmVuY2VTdGF0ZT4gYW5pbWF0b3IuZ2V0QW5pbWF0aW9uU3RhdGUodGhpcyk7XG5cdH1cbn1cblxuZXhwb3J0ID0gU2tlbGV0b25EaWZmZXJlbmNlTm9kZSJdfQ==