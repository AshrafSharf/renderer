var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var AnimationNodeBase = require("awayjs-display/lib/animators/nodes/AnimationNodeBase");
var SkeletonBinaryLERPState = require("awayjs-renderergl/lib/animators/states/SkeletonBinaryLERPState");
/**
 * A skeleton animation node that uses two animation node inputs to blend a lineraly interpolated output of a skeleton pose.
 */
var SkeletonBinaryLERPNode = (function (_super) {
    __extends(SkeletonBinaryLERPNode, _super);
    /**
     * Creates a new <code>SkeletonBinaryLERPNode</code> object.
     */
    function SkeletonBinaryLERPNode() {
        _super.call(this);
        this._pStateClass = SkeletonBinaryLERPState;
    }
    /**
     * @inheritDoc
     */
    SkeletonBinaryLERPNode.prototype.getAnimationState = function (animator) {
        return animator.getAnimationState(this);
    };
    return SkeletonBinaryLERPNode;
})(AnimationNodeBase);
module.exports = SkeletonBinaryLERPNode;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvbm9kZXMvU2tlbGV0b25CaW5hcnlMRVJQTm9kZS50cyJdLCJuYW1lcyI6WyJTa2VsZXRvbkJpbmFyeUxFUlBOb2RlIiwiU2tlbGV0b25CaW5hcnlMRVJQTm9kZS5jb25zdHJ1Y3RvciIsIlNrZWxldG9uQmluYXJ5TEVSUE5vZGUuZ2V0QW5pbWF0aW9uU3RhdGUiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUVBLElBQU8saUJBQWlCLFdBQWMsc0RBQXNELENBQUMsQ0FBQztBQUk5RixJQUFPLHVCQUF1QixXQUFhLGdFQUFnRSxDQUFDLENBQUM7QUFFN0csQUFHQTs7R0FERztJQUNHLHNCQUFzQjtJQUFTQSxVQUEvQkEsc0JBQXNCQSxVQUEwQkE7SUFZckRBOztPQUVHQTtJQUNIQSxTQWZLQSxzQkFBc0JBO1FBaUIxQkMsaUJBQU9BLENBQUNBO1FBRVJBLElBQUlBLENBQUNBLFlBQVlBLEdBQUdBLHVCQUF1QkEsQ0FBQ0E7SUFDN0NBLENBQUNBO0lBRUREOztPQUVHQTtJQUNJQSxrREFBaUJBLEdBQXhCQSxVQUF5QkEsUUFBcUJBO1FBRTdDRSxNQUFNQSxDQUEyQkEsUUFBUUEsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtJQUNuRUEsQ0FBQ0E7SUFDRkYsNkJBQUNBO0FBQURBLENBN0JBLEFBNkJDQSxFQTdCb0MsaUJBQWlCLEVBNkJyRDtBQUVELEFBQWdDLGlCQUF2QixzQkFBc0IsQ0FBQyIsImZpbGUiOiJhbmltYXRvcnMvbm9kZXMvU2tlbGV0b25CaW5hcnlMRVJQTm9kZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVmVjdG9yM0RcdFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9nZW9tL1ZlY3RvcjNEXCIpO1xuXG5pbXBvcnQgQW5pbWF0aW9uTm9kZUJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9hbmltYXRvcnMvbm9kZXMvQW5pbWF0aW9uTm9kZUJhc2VcIik7XG5cbmltcG9ydCBBbmltYXRvckJhc2VcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYW5pbWF0b3JzL0FuaW1hdG9yQmFzZVwiKTtcblxuaW1wb3J0IFNrZWxldG9uQmluYXJ5TEVSUFN0YXRlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9zdGF0ZXMvU2tlbGV0b25CaW5hcnlMRVJQU3RhdGVcIik7XG5cbi8qKlxuICogQSBza2VsZXRvbiBhbmltYXRpb24gbm9kZSB0aGF0IHVzZXMgdHdvIGFuaW1hdGlvbiBub2RlIGlucHV0cyB0byBibGVuZCBhIGxpbmVyYWx5IGludGVycG9sYXRlZCBvdXRwdXQgb2YgYSBza2VsZXRvbiBwb3NlLlxuICovXG5jbGFzcyBTa2VsZXRvbkJpbmFyeUxFUlBOb2RlIGV4dGVuZHMgQW5pbWF0aW9uTm9kZUJhc2Vcbntcblx0LyoqXG5cdCAqIERlZmluZXMgaW5wdXQgbm9kZSBBIHRvIHVzZSBmb3IgdGhlIGJsZW5kZWQgb3V0cHV0LlxuXHQgKi9cblx0cHVibGljIGlucHV0QTpBbmltYXRpb25Ob2RlQmFzZTtcblxuXHQvKipcblx0ICogRGVmaW5lcyBpbnB1dCBub2RlIEIgdG8gdXNlIGZvciB0aGUgYmxlbmRlZCBvdXRwdXQuXG5cdCAqL1xuXHRwdWJsaWMgaW5wdXRCOkFuaW1hdGlvbk5vZGVCYXNlO1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgbmV3IDxjb2RlPlNrZWxldG9uQmluYXJ5TEVSUE5vZGU8L2NvZGU+IG9iamVjdC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKClcblx0e1xuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLl9wU3RhdGVDbGFzcyA9IFNrZWxldG9uQmluYXJ5TEVSUFN0YXRlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRwdWJsaWMgZ2V0QW5pbWF0aW9uU3RhdGUoYW5pbWF0b3I6QW5pbWF0b3JCYXNlKTpTa2VsZXRvbkJpbmFyeUxFUlBTdGF0ZVxuXHR7XG5cdFx0cmV0dXJuIDxTa2VsZXRvbkJpbmFyeUxFUlBTdGF0ZT4gYW5pbWF0b3IuZ2V0QW5pbWF0aW9uU3RhdGUodGhpcyk7XG5cdH1cbn1cblxuZXhwb3J0ID0gU2tlbGV0b25CaW5hcnlMRVJQTm9kZTsiXX0=