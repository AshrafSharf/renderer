var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Vector3D = require("awayjs-core/lib/core/geom/Vector3D");
var ShaderRegisterElement = require("awayjs-stagegl/lib/materials/compilation/ShaderRegisterElement");
var ParticlePropertiesMode = require("awayjs-renderergl/lib/animators/data/ParticlePropertiesMode");
var ParticleNodeBase = require("awayjs-renderergl/lib/animators/nodes/ParticleNodeBase");
var ParticleBezierCurveState = require("awayjs-renderergl/lib/animators/states/ParticleBezierCurveState");
/**
 * A particle animation node used to control the position of a particle over time along a bezier curve.
 */
var ParticleBezierCurveNode = (function (_super) {
    __extends(ParticleBezierCurveNode, _super);
    /**
     * Creates a new <code>ParticleBezierCurveNode</code>
     *
     * @param               mode            Defines whether the mode of operation acts on local properties of a particle or global properties of the node.
     * @param    [optional] controlPoint    Defines the default control point of the node, used when in global mode.
     * @param    [optional] endPoint        Defines the default end point of the node, used when in global mode.
     */
    function ParticleBezierCurveNode(mode /*uint*/, controlPoint, endPoint) {
        if (controlPoint === void 0) { controlPoint = null; }
        if (endPoint === void 0) { endPoint = null; }
        _super.call(this, "ParticleBezierCurve", mode, 6);
        this._pStateClass = ParticleBezierCurveState;
        this._iControlPoint = controlPoint || new Vector3D();
        this._iEndPoint = endPoint || new Vector3D();
    }
    /**
     * @inheritDoc
     */
    ParticleBezierCurveNode.prototype.getAGALVertexCode = function (shaderObject, animationRegisterCache) {
        var controlValue = (this._pMode == ParticlePropertiesMode.GLOBAL) ? animationRegisterCache.getFreeVertexConstant() : animationRegisterCache.getFreeVertexAttribute();
        animationRegisterCache.setRegisterIndex(this, ParticleBezierCurveState.BEZIER_CONTROL_INDEX, controlValue.index);
        var endValue = (this._pMode == ParticlePropertiesMode.GLOBAL) ? animationRegisterCache.getFreeVertexConstant() : animationRegisterCache.getFreeVertexAttribute();
        animationRegisterCache.setRegisterIndex(this, ParticleBezierCurveState.BEZIER_END_INDEX, endValue.index);
        var temp = animationRegisterCache.getFreeVertexVectorTemp();
        var rev_time = new ShaderRegisterElement(temp.regName, temp.index, 0);
        var time_2 = new ShaderRegisterElement(temp.regName, temp.index, 1);
        var time_temp = new ShaderRegisterElement(temp.regName, temp.index, 2);
        animationRegisterCache.addVertexTempUsages(temp, 1);
        var temp2 = animationRegisterCache.getFreeVertexVectorTemp();
        var distance = new ShaderRegisterElement(temp2.regName, temp2.index);
        animationRegisterCache.removeVertexTempUsage(temp);
        var code = "";
        code += "sub " + rev_time + "," + animationRegisterCache.vertexOneConst + "," + animationRegisterCache.vertexLife + "\n";
        code += "mul " + time_2 + "," + animationRegisterCache.vertexLife + "," + animationRegisterCache.vertexLife + "\n";
        code += "mul " + time_temp + "," + animationRegisterCache.vertexLife + "," + rev_time + "\n";
        code += "mul " + time_temp + "," + time_temp + "," + animationRegisterCache.vertexTwoConst + "\n";
        code += "mul " + distance + ".xyz," + time_temp + "," + controlValue + "\n";
        code += "add " + animationRegisterCache.positionTarget + ".xyz," + distance + ".xyz," + animationRegisterCache.positionTarget + ".xyz\n";
        code += "mul " + distance + ".xyz," + time_2 + "," + endValue + "\n";
        code += "add " + animationRegisterCache.positionTarget + ".xyz," + distance + ".xyz," + animationRegisterCache.positionTarget + ".xyz\n";
        if (animationRegisterCache.needVelocity) {
            code += "mul " + time_2 + "," + animationRegisterCache.vertexLife + "," + animationRegisterCache.vertexTwoConst + "\n";
            code += "sub " + time_temp + "," + animationRegisterCache.vertexOneConst + "," + time_2 + "\n";
            code += "mul " + time_temp + "," + animationRegisterCache.vertexTwoConst + "," + time_temp + "\n";
            code += "mul " + distance + ".xyz," + controlValue + "," + time_temp + "\n";
            code += "add " + animationRegisterCache.velocityTarget + ".xyz," + distance + ".xyz," + animationRegisterCache.velocityTarget + ".xyz\n";
            code += "mul " + distance + ".xyz," + endValue + "," + time_2 + "\n";
            code += "add " + animationRegisterCache.velocityTarget + ".xyz," + distance + ".xyz," + animationRegisterCache.velocityTarget + ".xyz\n";
        }
        return code;
    };
    /**
     * @inheritDoc
     */
    ParticleBezierCurveNode.prototype.getAnimationState = function (animator) {
        return animator.getAnimationState(this);
    };
    /**
     * @inheritDoc
     */
    ParticleBezierCurveNode.prototype._iGeneratePropertyOfOneParticle = function (param) {
        var bezierControl = param[ParticleBezierCurveNode.BEZIER_CONTROL_VECTOR3D];
        if (!bezierControl)
            throw new Error("there is no " + ParticleBezierCurveNode.BEZIER_CONTROL_VECTOR3D + " in param!");
        var bezierEnd = param[ParticleBezierCurveNode.BEZIER_END_VECTOR3D];
        if (!bezierEnd)
            throw new Error("there is no " + ParticleBezierCurveNode.BEZIER_END_VECTOR3D + " in param!");
        this._pOneData[0] = bezierControl.x;
        this._pOneData[1] = bezierControl.y;
        this._pOneData[2] = bezierControl.z;
        this._pOneData[3] = bezierEnd.x;
        this._pOneData[4] = bezierEnd.y;
        this._pOneData[5] = bezierEnd.z;
    };
    /**
     * Reference for bezier curve node properties on a single particle (when in local property mode).
     * Expects a <code>Vector3D</code> object representing the control point position (0, 1, 2) of the curve.
     */
    ParticleBezierCurveNode.BEZIER_CONTROL_VECTOR3D = "BezierControlVector3D";
    /**
     * Reference for bezier curve node properties on a single particle (when in local property mode).
     * Expects a <code>Vector3D</code> object representing the end point position (0, 1, 2) of the curve.
     */
    ParticleBezierCurveNode.BEZIER_END_VECTOR3D = "BezierEndVector3D";
    return ParticleBezierCurveNode;
})(ParticleNodeBase);
module.exports = ParticleBezierCurveNode;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFuaW1hdG9ycy9ub2Rlcy9wYXJ0aWNsZWJlemllcmN1cnZlbm9kZS50cyJdLCJuYW1lcyI6WyJQYXJ0aWNsZUJlemllckN1cnZlTm9kZSIsIlBhcnRpY2xlQmV6aWVyQ3VydmVOb2RlLmNvbnN0cnVjdG9yIiwiUGFydGljbGVCZXppZXJDdXJ2ZU5vZGUuZ2V0QUdBTFZlcnRleENvZGUiLCJQYXJ0aWNsZUJlemllckN1cnZlTm9kZS5nZXRBbmltYXRpb25TdGF0ZSIsIlBhcnRpY2xlQmV6aWVyQ3VydmVOb2RlLl9pR2VuZXJhdGVQcm9wZXJ0eU9mT25lUGFydGljbGUiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQU8sUUFBUSxXQUFpQixvQ0FBb0MsQ0FBQyxDQUFDO0FBS3RFLElBQU8scUJBQXFCLFdBQWEsZ0VBQWdFLENBQUMsQ0FBQztBQUczRyxJQUFPLHNCQUFzQixXQUFhLDZEQUE2RCxDQUFDLENBQUM7QUFDekcsSUFBTyxnQkFBZ0IsV0FBZSx3REFBd0QsQ0FBQyxDQUFDO0FBQ2hHLElBQU8sd0JBQXdCLFdBQWEsaUVBQWlFLENBQUMsQ0FBQztBQUUvRyxBQUdBOztHQURHO0lBQ0csdUJBQXVCO0lBQVNBLFVBQWhDQSx1QkFBdUJBLFVBQXlCQTtJQW1CckRBOzs7Ozs7T0FNR0E7SUFDSEEsU0ExQktBLHVCQUF1QkEsQ0EwQmhCQSxJQUFJQSxDQUFRQSxRQUFEQSxBQUFTQSxFQUFFQSxZQUE0QkEsRUFBRUEsUUFBd0JBO1FBQXREQyw0QkFBNEJBLEdBQTVCQSxtQkFBNEJBO1FBQUVBLHdCQUF3QkEsR0FBeEJBLGVBQXdCQTtRQUV2RkEsa0JBQU1BLHFCQUFxQkEsRUFBRUEsSUFBSUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFdENBLElBQUlBLENBQUNBLFlBQVlBLEdBQUdBLHdCQUF3QkEsQ0FBQ0E7UUFFN0NBLElBQUlBLENBQUNBLGNBQWNBLEdBQUdBLFlBQVlBLElBQUlBLElBQUlBLFFBQVFBLEVBQUVBLENBQUNBO1FBQ3JEQSxJQUFJ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YW5pbWF0b3JzL25vZGVzL1BhcnRpY2xlQmV6aWVyQ3VydmVOb2RlLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9yb2JiYXRlbWFuL1dlYnN0b3JtUHJvamVjdHMvYXdheWpzLXJlbmRlcmVyZ2wvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZlY3RvcjNEXHRcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvY29yZS9nZW9tL1ZlY3RvcjNEXCIpO1xuXG5pbXBvcnQgQW5pbWF0b3JCYXNlXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2FuaW1hdG9ycy9BbmltYXRvckJhc2VcIik7XG5pbXBvcnQgQW5pbWF0aW9uUmVnaXN0ZXJDYWNoZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9hbmltYXRvcnMvZGF0YS9BbmltYXRpb25SZWdpc3RlckNhY2hlXCIpO1xuaW1wb3J0IFNoYWRlck9iamVjdEJhc2VcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL21hdGVyaWFscy9jb21waWxhdGlvbi9TaGFkZXJPYmplY3RCYXNlXCIpO1xuaW1wb3J0IFNoYWRlclJlZ2lzdGVyRWxlbWVudFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9tYXRlcmlhbHMvY29tcGlsYXRpb24vU2hhZGVyUmVnaXN0ZXJFbGVtZW50XCIpO1xuXG5pbXBvcnQgUGFydGljbGVQcm9wZXJ0aWVzXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYW5pbWF0b3JzL2RhdGEvUGFydGljbGVQcm9wZXJ0aWVzXCIpO1xuaW1wb3J0IFBhcnRpY2xlUHJvcGVydGllc01vZGVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYW5pbWF0b3JzL2RhdGEvUGFydGljbGVQcm9wZXJ0aWVzTW9kZVwiKTtcbmltcG9ydCBQYXJ0aWNsZU5vZGVCYXNlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvbm9kZXMvUGFydGljbGVOb2RlQmFzZVwiKTtcbmltcG9ydCBQYXJ0aWNsZUJlemllckN1cnZlU3RhdGVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYW5pbWF0b3JzL3N0YXRlcy9QYXJ0aWNsZUJlemllckN1cnZlU3RhdGVcIik7XG5cbi8qKlxuICogQSBwYXJ0aWNsZSBhbmltYXRpb24gbm9kZSB1c2VkIHRvIGNvbnRyb2wgdGhlIHBvc2l0aW9uIG9mIGEgcGFydGljbGUgb3ZlciB0aW1lIGFsb25nIGEgYmV6aWVyIGN1cnZlLlxuICovXG5jbGFzcyBQYXJ0aWNsZUJlemllckN1cnZlTm9kZSBleHRlbmRzIFBhcnRpY2xlTm9kZUJhc2Vcbntcblx0LyoqIEBwcml2YXRlICovXG5cdHB1YmxpYyBfaUNvbnRyb2xQb2ludDpWZWN0b3IzRDtcblx0LyoqIEBwcml2YXRlICovXG5cdHB1YmxpYyBfaUVuZFBvaW50OlZlY3RvcjNEO1xuXG5cdC8qKlxuXHQgKiBSZWZlcmVuY2UgZm9yIGJlemllciBjdXJ2ZSBub2RlIHByb3BlcnRpZXMgb24gYSBzaW5nbGUgcGFydGljbGUgKHdoZW4gaW4gbG9jYWwgcHJvcGVydHkgbW9kZSkuXG5cdCAqIEV4cGVjdHMgYSA8Y29kZT5WZWN0b3IzRDwvY29kZT4gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgY29udHJvbCBwb2ludCBwb3NpdGlvbiAoMCwgMSwgMikgb2YgdGhlIGN1cnZlLlxuXHQgKi9cblx0cHVibGljIHN0YXRpYyBCRVpJRVJfQ09OVFJPTF9WRUNUT1IzRDpzdHJpbmcgPSBcIkJlemllckNvbnRyb2xWZWN0b3IzRFwiO1xuXG5cdC8qKlxuXHQgKiBSZWZlcmVuY2UgZm9yIGJlemllciBjdXJ2ZSBub2RlIHByb3BlcnRpZXMgb24gYSBzaW5nbGUgcGFydGljbGUgKHdoZW4gaW4gbG9jYWwgcHJvcGVydHkgbW9kZSkuXG5cdCAqIEV4cGVjdHMgYSA8Y29kZT5WZWN0b3IzRDwvY29kZT4gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgZW5kIHBvaW50IHBvc2l0aW9uICgwLCAxLCAyKSBvZiB0aGUgY3VydmUuXG5cdCAqL1xuXHRwdWJsaWMgc3RhdGljIEJFWklFUl9FTkRfVkVDVE9SM0Q6c3RyaW5nID0gXCJCZXppZXJFbmRWZWN0b3IzRFwiO1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgbmV3IDxjb2RlPlBhcnRpY2xlQmV6aWVyQ3VydmVOb2RlPC9jb2RlPlxuXHQgKlxuXHQgKiBAcGFyYW0gICAgICAgICAgICAgICBtb2RlICAgICAgICAgICAgRGVmaW5lcyB3aGV0aGVyIHRoZSBtb2RlIG9mIG9wZXJhdGlvbiBhY3RzIG9uIGxvY2FsIHByb3BlcnRpZXMgb2YgYSBwYXJ0aWNsZSBvciBnbG9iYWwgcHJvcGVydGllcyBvZiB0aGUgbm9kZS5cblx0ICogQHBhcmFtICAgIFtvcHRpb25hbF0gY29udHJvbFBvaW50ICAgIERlZmluZXMgdGhlIGRlZmF1bHQgY29udHJvbCBwb2ludCBvZiB0aGUgbm9kZSwgdXNlZCB3aGVuIGluIGdsb2JhbCBtb2RlLlxuXHQgKiBAcGFyYW0gICAgW29wdGlvbmFsXSBlbmRQb2ludCAgICAgICAgRGVmaW5lcyB0aGUgZGVmYXVsdCBlbmQgcG9pbnQgb2YgdGhlIG5vZGUsIHVzZWQgd2hlbiBpbiBnbG9iYWwgbW9kZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKG1vZGU6bnVtYmVyIC8qdWludCovLCBjb250cm9sUG9pbnQ6VmVjdG9yM0QgPSBudWxsLCBlbmRQb2ludDpWZWN0b3IzRCA9IG51bGwpXG5cdHtcblx0XHRzdXBlcihcIlBhcnRpY2xlQmV6aWVyQ3VydmVcIiwgbW9kZSwgNik7XG5cblx0XHR0aGlzLl9wU3RhdGVDbGFzcyA9IFBhcnRpY2xlQmV6aWVyQ3VydmVTdGF0ZTtcblxuXHRcdHRoaXMuX2lDb250cm9sUG9pbnQgPSBjb250cm9sUG9pbnQgfHwgbmV3IFZlY3RvcjNEKCk7XG5cdFx0dGhpcy5faUVuZFBvaW50ID0gZW5kUG9pbnQgfHwgbmV3IFZlY3RvcjNEKCk7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHB1YmxpYyBnZXRBR0FMVmVydGV4Q29kZShzaGFkZXJPYmplY3Q6U2hhZGVyT2JqZWN0QmFzZSwgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZTpBbmltYXRpb25SZWdpc3RlckNhY2hlKTpzdHJpbmdcblx0e1xuXHRcdHZhciBjb250cm9sVmFsdWU6U2hhZGVyUmVnaXN0ZXJFbGVtZW50ID0gKHRoaXMuX3BNb2RlID09IFBhcnRpY2xlUHJvcGVydGllc01vZGUuR0xPQkFMKT8gYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5nZXRGcmVlVmVydGV4Q29uc3RhbnQoKSA6IGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuZ2V0RnJlZVZlcnRleEF0dHJpYnV0ZSgpO1xuXHRcdGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuc2V0UmVnaXN0ZXJJbmRleCh0aGlzLCBQYXJ0aWNsZUJlemllckN1cnZlU3RhdGUuQkVaSUVSX0NPTlRST0xfSU5ERVgsIGNvbnRyb2xWYWx1ZS5pbmRleCk7XG5cblx0XHR2YXIgZW5kVmFsdWU6U2hhZGVyUmVnaXN0ZXJFbGVtZW50ID0gKHRoaXMuX3BNb2RlID09IFBhcnRpY2xlUHJvcGVydGllc01vZGUuR0xPQkFMKT8gYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5nZXRGcmVlVmVydGV4Q29uc3RhbnQoKSA6IGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuZ2V0RnJlZVZlcnRleEF0dHJpYnV0ZSgpO1xuXHRcdGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuc2V0UmVnaXN0ZXJJbmRleCh0aGlzLCBQYXJ0aWNsZUJlemllckN1cnZlU3RhdGUuQkVaSUVSX0VORF9JTkRFWCwgZW5kVmFsdWUuaW5kZXgpO1xuXG5cdFx0dmFyIHRlbXA6U2hhZGVyUmVnaXN0ZXJFbGVtZW50ID0gYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5nZXRGcmVlVmVydGV4VmVjdG9yVGVtcCgpO1xuXHRcdHZhciByZXZfdGltZTpTaGFkZXJSZWdpc3RlckVsZW1lbnQgPSBuZXcgU2hhZGVyUmVnaXN0ZXJFbGVtZW50KHRlbXAucmVnTmFtZSwgdGVtcC5pbmRleCwgMCk7XG5cdFx0dmFyIHRpbWVfMjpTaGFkZXJSZWdpc3RlckVsZW1lbnQgPSBuZXcgU2hhZGVyUmVnaXN0ZXJFbGVtZW50KHRlbXAucmVnTmFtZSwgdGVtcC5pbmRleCwgMSk7XG5cdFx0dmFyIHRpbWVfdGVtcDpTaGFkZXJSZWdpc3RlckVsZW1lbnQgPSBuZXcgU2hhZGVyUmVnaXN0ZXJFbGVtZW50KHRlbXAucmVnTmFtZSwgdGVtcC5pbmRleCwgMik7XG5cdFx0YW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5hZGRWZXJ0ZXhUZW1wVXNhZ2VzKHRlbXAsIDEpO1xuXHRcdHZhciB0ZW1wMjpTaGFkZXJSZWdpc3RlckVsZW1lbnQgPSBhbmltYXRpb25SZWdpc3RlckNhY2hlLmdldEZyZWVWZXJ0ZXhWZWN0b3JUZW1wKCk7XG5cdFx0dmFyIGRpc3RhbmNlOlNoYWRlclJlZ2lzdGVyRWxlbWVudCA9IG5ldyBTaGFkZXJSZWdpc3RlckVsZW1lbnQodGVtcDIucmVnTmFtZSwgdGVtcDIuaW5kZXgpO1xuXHRcdGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUucmVtb3ZlVmVydGV4VGVtcFVzYWdlKHRlbXApO1xuXG5cdFx0dmFyIGNvZGU6c3RyaW5nID0gXCJcIjtcblx0XHRjb2RlICs9IFwic3ViIFwiICsgcmV2X3RpbWUgKyBcIixcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUudmVydGV4T25lQ29uc3QgKyBcIixcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUudmVydGV4TGlmZSArIFwiXFxuXCI7XG5cdFx0Y29kZSArPSBcIm11bCBcIiArIHRpbWVfMiArIFwiLFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS52ZXJ0ZXhMaWZlICsgXCIsXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnZlcnRleExpZmUgKyBcIlxcblwiO1xuXG5cdFx0Y29kZSArPSBcIm11bCBcIiArIHRpbWVfdGVtcCArIFwiLFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS52ZXJ0ZXhMaWZlICsgXCIsXCIgKyByZXZfdGltZSArIFwiXFxuXCI7XG5cdFx0Y29kZSArPSBcIm11bCBcIiArIHRpbWVfdGVtcCArIFwiLFwiICsgdGltZV90ZW1wICsgXCIsXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnZlcnRleFR3b0NvbnN0ICsgXCJcXG5cIjtcblx0XHRjb2RlICs9IFwibXVsIFwiICsgZGlzdGFuY2UgKyBcIi54eXosXCIgKyB0aW1lX3RlbXAgKyBcIixcIiArIGNvbnRyb2xWYWx1ZSArIFwiXFxuXCI7XG5cdFx0Y29kZSArPSBcImFkZCBcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUucG9zaXRpb25UYXJnZXQgKyBcIi54eXosXCIgKyBkaXN0YW5jZSArIFwiLnh5eixcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUucG9zaXRpb25UYXJnZXQgKyBcIi54eXpcXG5cIjtcblx0XHRjb2RlICs9IFwibXVsIFwiICsgZGlzdGFuY2UgKyBcIi54eXosXCIgKyB0aW1lXzIgKyBcIixcIiArIGVuZFZhbHVlICsgXCJcXG5cIjtcblx0XHRjb2RlICs9IFwiYWRkIFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5wb3NpdGlvblRhcmdldCArIFwiLnh5eixcIiArIGRpc3RhbmNlICsgXCIueHl6LFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5wb3NpdGlvblRhcmdldCArIFwiLnh5elxcblwiO1xuXG5cdFx0aWYgKGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUubmVlZFZlbG9jaXR5KSB7XG5cdFx0XHRjb2RlICs9IFwibXVsIFwiICsgdGltZV8yICsgXCIsXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnZlcnRleExpZmUgKyBcIixcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUudmVydGV4VHdvQ29uc3QgKyBcIlxcblwiO1xuXHRcdFx0Y29kZSArPSBcInN1YiBcIiArIHRpbWVfdGVtcCArIFwiLFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS52ZXJ0ZXhPbmVDb25zdCArIFwiLFwiICsgdGltZV8yICsgXCJcXG5cIjtcblx0XHRcdGNvZGUgKz0gXCJtdWwgXCIgKyB0aW1lX3RlbXAgKyBcIixcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUudmVydGV4VHdvQ29uc3QgKyBcIixcIiArIHRpbWVfdGVtcCArIFwiXFxuXCI7XG5cdFx0XHRjb2RlICs9IFwibXVsIFwiICsgZGlzdGFuY2UgKyBcIi54eXosXCIgKyBjb250cm9sVmFsdWUgKyBcIixcIiArIHRpbWVfdGVtcCArIFwiXFxuXCI7XG5cdFx0XHRjb2RlICs9IFwiYWRkIFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS52ZWxvY2l0eVRhcmdldCArIFwiLnh5eixcIiArIGRpc3RhbmNlICsgXCIueHl6LFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS52ZWxvY2l0eVRhcmdldCArIFwiLnh5elxcblwiO1xuXHRcdFx0Y29kZSArPSBcIm11bCBcIiArIGRpc3RhbmNlICsgXCIueHl6LFwiICsgZW5kVmFsdWUgKyBcIixcIiArIHRpbWVfMiArIFwiXFxuXCI7XG5cdFx0XHRjb2RlICs9IFwiYWRkIFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS52ZWxvY2l0eVRhcmdldCArIFwiLnh5eixcIiArIGRpc3RhbmNlICsgXCIueHl6LFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS52ZWxvY2l0eVRhcmdldCArIFwiLnh5elxcblwiO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb2RlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRwdWJsaWMgZ2V0QW5pbWF0aW9uU3RhdGUoYW5pbWF0b3I6QW5pbWF0b3JCYXNlKTpQYXJ0aWNsZUJlemllckN1cnZlU3RhdGVcblx0e1xuXHRcdHJldHVybiA8UGFydGljbGVCZXppZXJDdXJ2ZVN0YXRlPiBhbmltYXRvci5nZXRBbmltYXRpb25TdGF0ZSh0aGlzKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIF9pR2VuZXJhdGVQcm9wZXJ0eU9mT25lUGFydGljbGUocGFyYW06UGFydGljbGVQcm9wZXJ0aWVzKVxuXHR7XG5cdFx0dmFyIGJlemllckNvbnRyb2w6VmVjdG9yM0QgPSBwYXJhbVtQYXJ0aWNsZUJlemllckN1cnZlTm9kZS5CRVpJRVJfQ09OVFJPTF9WRUNUT1IzRF07XG5cdFx0aWYgKCFiZXppZXJDb250cm9sKVxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwidGhlcmUgaXMgbm8gXCIgKyBQYXJ0aWNsZUJlemllckN1cnZlTm9kZS5CRVpJRVJfQ09OVFJPTF9WRUNUT1IzRCArIFwiIGluIHBhcmFtIVwiKTtcblxuXHRcdHZhciBiZXppZXJFbmQ6VmVjdG9yM0QgPSBwYXJhbVtQYXJ0aWNsZUJlemllckN1cnZlTm9kZS5CRVpJRVJfRU5EX1ZFQ1RPUjNEXTtcblx0XHRpZiAoIWJlemllckVuZClcblx0XHRcdHRocm93IG5ldyBFcnJvcihcInRoZXJlIGlzIG5vIFwiICsgUGFydGljbGVCZXppZXJDdXJ2ZU5vZGUuQkVaSUVSX0VORF9WRUNUT1IzRCArIFwiIGluIHBhcmFtIVwiKTtcblxuXHRcdHRoaXMuX3BPbmVEYXRhWzBdID0gYmV6aWVyQ29udHJvbC54O1xuXHRcdHRoaXMuX3BPbmVEYXRhWzFdID0gYmV6aWVyQ29udHJvbC55O1xuXHRcdHRoaXMuX3BPbmVEYXRhWzJdID0gYmV6aWVyQ29udHJvbC56O1xuXHRcdHRoaXMuX3BPbmVEYXRhWzNdID0gYmV6aWVyRW5kLng7XG5cdFx0dGhpcy5fcE9uZURhdGFbNF0gPSBiZXppZXJFbmQueTtcblx0XHR0aGlzLl9wT25lRGF0YVs1XSA9IGJlemllckVuZC56O1xuXHR9XG59XG5cbmV4cG9ydCA9IFBhcnRpY2xlQmV6aWVyQ3VydmVOb2RlOyJdfQ==