var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var ParticleAnimationSet = require("awayjs-renderergl/lib/animators/ParticleAnimationSet");
var ParticlePropertiesMode = require("awayjs-renderergl/lib/animators/data/ParticlePropertiesMode");
var ParticleNodeBase = require("awayjs-renderergl/lib/animators/nodes/ParticleNodeBase");
var ParticleFollowState = require("awayjs-renderergl/lib/animators/states/ParticleFollowState");
/**
 * A particle animation node used to create a follow behaviour on a particle system.
 */
var ParticleFollowNode = (function (_super) {
    __extends(ParticleFollowNode, _super);
    /**
     * Creates a new <code>ParticleFollowNode</code>
     *
     * @param    [optional] usesPosition     Defines wehether the individual particle reacts to the position of the target.
     * @param    [optional] usesRotation     Defines wehether the individual particle reacts to the rotation of the target.
     * @param    [optional] smooth     Defines wehether the state calculate the interpolated value.
     */
    function ParticleFollowNode(usesPosition, usesRotation, smooth) {
        if (usesPosition === void 0) { usesPosition = true; }
        if (usesRotation === void 0) { usesRotation = true; }
        if (smooth === void 0) { smooth = false; }
        _super.call(this, "ParticleFollow", ParticlePropertiesMode.LOCAL_DYNAMIC, (usesPosition && usesRotation) ? 6 : 3, ParticleAnimationSet.POST_PRIORITY);
        this._pStateClass = ParticleFollowState;
        this._iUsesPosition = usesPosition;
        this._iUsesRotation = usesRotation;
        this._iSmooth = smooth;
    }
    /**
     * @inheritDoc
     */
    ParticleFollowNode.prototype.getAGALVertexCode = function (shaderObject, animationRegisterCache) {
        //TODO: use Quaternion to implement this function
        var code = "";
        if (this._iUsesRotation) {
            var rotationAttribute = animationRegisterCache.getFreeVertexAttribute();
            animationRegisterCache.setRegisterIndex(this, ParticleFollowState.FOLLOW_ROTATION_INDEX, rotationAttribute.index);
            var temp1 = animationRegisterCache.getFreeVertexVectorTemp();
            animationRegisterCache.addVertexTempUsages(temp1, 1);
            var temp2 = animationRegisterCache.getFreeVertexVectorTemp();
            animationRegisterCache.addVertexTempUsages(temp2, 1);
            var temp3 = animationRegisterCache.getFreeVertexVectorTemp();
            var temp4;
            if (animationRegisterCache.hasBillboard) {
                animationRegisterCache.addVertexTempUsages(temp3, 1);
                temp4 = animationRegisterCache.getFreeVertexVectorTemp();
            }
            animationRegisterCache.removeVertexTempUsage(temp1);
            animationRegisterCache.removeVertexTempUsage(temp2);
            if (animationRegisterCache.hasBillboard)
                animationRegisterCache.removeVertexTempUsage(temp3);
            var len = animationRegisterCache.rotationRegisters.length;
            var i /*int*/;
            //x axis
            code += "mov " + temp1 + "," + animationRegisterCache.vertexZeroConst + "\n";
            code += "mov " + temp1 + ".x," + animationRegisterCache.vertexOneConst + "\n";
            code += "mov " + temp3 + "," + animationRegisterCache.vertexZeroConst + "\n";
            code += "sin " + temp3 + ".y," + rotationAttribute + ".x\n";
            code += "cos " + temp3 + ".z," + rotationAttribute + ".x\n";
            code += "mov " + temp2 + ".x," + animationRegisterCache.vertexZeroConst + "\n";
            code += "mov " + temp2 + ".y," + temp3 + ".z\n";
            code += "neg " + temp2 + ".z," + temp3 + ".y\n";
            if (animationRegisterCache.hasBillboard)
                code += "m33 " + temp4 + ".xyz," + animationRegisterCache.positionTarget + ".xyz," + temp1 + "\n";
            else {
                code += "m33 " + animationRegisterCache.scaleAndRotateTarget + ".xyz," + animationRegisterCache.scaleAndRotateTarget + ".xyz," + temp1 + "\n";
                for (i = 0; i < len; i++)
                    code += "m33 " + animationRegisterCache.rotationRegisters[i] + ".xyz," + animationRegisterCache.rotationRegisters[i] + "," + temp1 + "\n";
            }
            //y axis
            code += "mov " + temp1 + "," + animationRegisterCache.vertexZeroConst + "\n";
            code += "cos " + temp1 + ".x," + rotationAttribute + ".y\n";
            code += "sin " + temp1 + ".z," + rotationAttribute + ".y\n";
            code += "mov " + temp2 + "," + animationRegisterCache.vertexZeroConst + "\n";
            code += "mov " + temp2 + ".y," + animationRegisterCache.vertexOneConst + "\n";
            code += "mov " + temp3 + "," + animationRegisterCache.vertexZeroConst + "\n";
            code += "neg " + temp3 + ".x," + temp1 + ".z\n";
            code += "mov " + temp3 + ".z," + temp1 + ".x\n";
            if (animationRegisterCache.hasBillboard)
                code += "m33 " + temp4 + ".xyz," + temp4 + ".xyz," + temp1 + "\n";
            else {
                code += "m33 " + animationRegisterCache.scaleAndRotateTarget + ".xyz," + animationRegisterCache.scaleAndRotateTarget + ".xyz," + temp1 + "\n";
                for (i = 0; i < len; i++)
                    code += "m33 " + animationRegisterCache.rotationRegisters[i] + ".xyz," + animationRegisterCache.rotationRegisters[i] + "," + temp1 + "\n";
            }
            //z axis
            code += "mov " + temp2 + "," + animationRegisterCache.vertexZeroConst + "\n";
            code += "sin " + temp2 + ".x," + rotationAttribute + ".z\n";
            code += "cos " + temp2 + ".y," + rotationAttribute + ".z\n";
            code += "mov " + temp1 + "," + animationRegisterCache.vertexZeroConst + "\n";
            code += "mov " + temp1 + ".x," + temp2 + ".y\n";
            code += "neg " + temp1 + ".y," + temp2 + ".x\n";
            code += "mov " + temp3 + "," + animationRegisterCache.vertexZeroConst + "\n";
            code += "mov " + temp3 + ".z," + animationRegisterCache.vertexOneConst + "\n";
            if (animationRegisterCache.hasBillboard) {
                code += "m33 " + temp4 + ".xyz," + temp4 + ".xyz," + temp1 + "\n";
                code += "sub " + temp4 + ".xyz," + temp4 + ".xyz," + animationRegisterCache.positionTarget + ".xyz\n";
                code += "add " + animationRegisterCache.scaleAndRotateTarget + ".xyz," + temp4 + ".xyz," + animationRegisterCache.scaleAndRotateTarget + ".xyz\n";
            }
            else {
                code += "m33 " + animationRegisterCache.scaleAndRotateTarget + ".xyz," + animationRegisterCache.scaleAndRotateTarget + ".xyz," + temp1 + "\n";
                for (i = 0; i < len; i++)
                    code += "m33 " + animationRegisterCache.rotationRegisters[i] + ".xyz," + animationRegisterCache.rotationRegisters[i] + "," + temp1 + "\n";
            }
        }
        if (this._iUsesPosition) {
            var positionAttribute = animationRegisterCache.getFreeVertexAttribute();
            animationRegisterCache.setRegisterIndex(this, ParticleFollowState.FOLLOW_POSITION_INDEX, positionAttribute.index);
            code += "add " + animationRegisterCache.scaleAndRotateTarget + ".xyz," + positionAttribute + "," + animationRegisterCache.scaleAndRotateTarget + ".xyz\n";
        }
        return code;
    };
    /**
     * @inheritDoc
     */
    ParticleFollowNode.prototype.getAnimationState = function (animator) {
        return animator.getAnimationState(this);
    };
    return ParticleFollowNode;
})(ParticleNodeBase);
module.exports = ParticleFollowNode;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFuaW1hdG9ycy9ub2Rlcy9wYXJ0aWNsZWZvbGxvd25vZGUudHMiXSwibmFtZXMiOlsiUGFydGljbGVGb2xsb3dOb2RlIiwiUGFydGljbGVGb2xsb3dOb2RlLmNvbnN0cnVjdG9yIiwiUGFydGljbGVGb2xsb3dOb2RlLmdldEFHQUxWZXJ0ZXhDb2RlIiwiUGFydGljbGVGb2xsb3dOb2RlLmdldEFuaW1hdGlvblN0YXRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFPQSxJQUFPLG9CQUFvQixXQUFjLHNEQUFzRCxDQUFDLENBQUM7QUFFakcsSUFBTyxzQkFBc0IsV0FBYSw2REFBNkQsQ0FBQyxDQUFDO0FBQ3pHLElBQU8sZ0JBQWdCLFdBQWUsd0RBQXdELENBQUMsQ0FBQztBQUNoRyxJQUFPLG1CQUFtQixXQUFjLDREQUE0RCxDQUFDLENBQUM7QUFFdEcsQUFHQTs7R0FERztJQUNHLGtCQUFrQjtJQUFTQSxVQUEzQkEsa0JBQWtCQSxVQUF5QkE7SUFXaERBOzs7Ozs7T0FNR0E7SUFDSEEsU0FsQktBLGtCQUFrQkEsQ0FrQlhBLFlBQTJCQSxFQUFFQSxZQUEyQkEsRUFBRUEsTUFBc0JBO1FBQWhGQyw0QkFBMkJBLEdBQTNCQSxtQkFBMkJBO1FBQUVBLDRCQUEyQkEsR0FBM0JBLG1CQUEyQkE7UUFBRUEsc0JBQXNCQSxHQUF0QkEsY0FBc0JBO1FBRTNGQSxrQkFBTUEsZ0JBQWdCQSxFQUFFQSxzQkFBc0JBLENBQUNBLGFBQWFBLEVBQUVBLENBQUNBLFlBQVlBLElBQUlBLFlBQVlBLENBQUNBLEdBQUVBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLG9CQUFvQkEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsQ0FBQ0E7UUFFeklBLElBQUlBLENBQUNBLFlBQVlBLEdBQUdBLG1CQUFtQkEsQ0FBQ0E7UUFFeENBLElBQUlBLENBQUNBLGNBQWNBLEdBQUdBLFlBQVlBLENBQUNBO1FBQ25DQSxJQUFJQSxDQUFDQSxjQUFjQSxHQUFHQSxZQUFZQSxDQUFDQTtRQUNuQ0EsSUFBSUEsQ0FB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LEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLEdBQUdBLEVBQUVBLENBQUNBLEVBQUVBO29CQUN2QkEsSUFBSUEsSUFBSUEsTUFBTUEsR0FBR0Esc0JBQXNCQSxDQUFDQSxpQkFBaUJBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLE9BQU9BLEdBQUdBLHNCQUFzQkEsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUM1SUEsQ0FBQ0E7WUFFREEsQUFDQUEsUUFEUUE7WUFDUkEsSUFBSUEsSUFBSUEsTUFBTUEsR0FBR0EsS0FBS0EsR0FBR0EsR0FBR0EsR0FBR0Esc0JBQXNCQSxDQUFDQSxlQUFlQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUM3RUEsSUFBSUEsSUFBSUEsTUFBTUEsR0FBR0EsS0FBS0EsR0FBR0EsS0FBS0EsR0FBR0EsaUJBQWlCQSxHQUFHQSxNQUFNQSxDQUFDQTtZQUM1REEsSUFBSUEsSUFBSUEsTUFBTUEsR0FBR0EsS0FBS0EsR0FBR0EsS0FBS0EsR0FBR0EsaUJBQWlCQSxHQUFHQSxNQUFNQSxDQUFDQTtZQUM1REEsSUFBSUEsSUFBSUEsTUFBTUEsR0FBR0EsS0FBS0EsR0FBR0EsR0FBR0EsR0FBR0Esc0JBQXNCQSxDQUFDQSxlQUFlQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUM3RUEsSUFBSUEsSUFBSUEsTUFBTUEsR0FBR0EsS0FBS0EsR0FBR0EsS0FBS0EsR0FBR0EsS0FBS0EsR0FBR0EsTUFBTUEsQ0FBQ0E7WUFDaERBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLEtBQUtBLEdBQUdBLEtBQUtBLEdBQUdBLEtBQUtBLEdBQUdBLE1BQU1BLENBQUNBO1lBQ2hEQSxJQUFJQSxJQUFJQSxNQUFNQSxHQUFHQSxLQUFLQSxHQUFHQSxHQUFHQSxHQUFHQSxzQkFBc0JBLENBQUNBLGVBQWVBLEdBQUdBLElBQUlBLENBQUNBO1lBQzdFQSxJQUFJQSxJQUFJQSxNQUFNQSxHQUFHQSxLQUFLQSxHQUFHQSxLQUFLQSxHQUFHQSxzQkFBc0JBLENBQUNBLGNBQWNBLEdBQUdBLElBQUlBLENBQUNBO1lBRTlFQSxFQUFFQSxDQUFDQSxDQUFDQSxzQkFBc0JBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBLENBQUNBO2dCQUN6Q0EsSUFBSUEsSUFBSUEsTUFBTUEsR0FBR0EsS0FBS0EsR0FBR0EsT0FBT0EsR0FBR0EsS0FBS0EsR0FBR0EsT0FBT0EsR0FBR0EsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0E7Z0JBQ2xFQSxJQUFJQSxJQUFJQSxNQUFNQSxHQUFHQSxLQUFLQSxHQUFHQSxPQUFPQSxHQUFHQSxLQUFLQSxHQUFHQSxPQUFPQSxHQUFHQSxzQkFBc0JBLENBQUNBLGNBQWNBLEdBQUdBLFFBQVFBLENBQUNBO2dCQUN0R0EsSUFBSUEsSUFBSUEsTUFBTUEsR0FBR0Esc0JBQXNCQSxDQUFDQSxvQkFBb0JBLEdBQUdBLE9BQU9BLEdBQUdBLEtBQUtBLEdBQUdBLE9BQU9BLEdBQUdBLHNCQUFzQkEsQ0FBQ0Esb0JBQW9CQSxHQUFHQSxRQUFRQSxDQUFDQTtZQUNuSkEsQ0FBQ0E7WUFBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ1BBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLHNCQUFzQkEsQ0FBQ0Esb0JBQW9CQSxHQUFHQSxPQUFPQSxHQUFHQSxzQkFBc0JBLENBQUNBLG9CQUFvQkEsR0FBR0EsT0FBT0EsR0FBR0EsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0E7Z0JBQzlJQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxHQUFHQSxFQUFFQSxDQUFDQSxFQUFFQTtvQkFDdkJBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLHNCQUFzQkEsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxPQUFPQSxHQUFHQSxzQkFBc0JBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFDNUlBLENBQUNBO1FBRUZBLENBQUNBO1FBRURBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBLENBQUNBLENBQUNBO1lBQ3pCQSxJQUFJQSxpQkFBaUJBLEdBQXlCQSxzQkFBc0JBLENBQUNBLHNCQUFzQkEsRUFBRUEsQ0FBQ0E7WUFDOUZBLHNCQUFzQkEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxJQUFJQSxFQUFFQSxtQkFBbUJBLENBQUNBLHFCQUFxQkEsRUFBRUEsaUJBQWlCQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQTtZQUNsSEEsSUFBSUEsSUFBSUEsTUFBTUEsR0FBR0Esc0JBQXNCQSxDQUFDQSxvQkFBb0JBLEdBQUdBLE9BQU9BLEdBQUdBLGlCQUFpQkEsR0FBR0EsR0FBR0EsR0FBR0Esc0JBQXNCQSxDQUFDQSxvQkFBb0JBLEdBQUdBLFFBQVFBLENBQUNBO1FBQzNKQSxDQUFDQTtRQUVEQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtJQUNiQSxDQUFDQTtJQUVERjs7T0FFR0E7SUFDSUEsOENBQWlCQSxHQUF4QkEsVUFBeUJBLFFBQXFCQTtRQUU3Q0csTUFBTUEsQ0FBdUJBLFFBQVFBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7SUFDL0RBLENBQUNBO0lBQ0ZILHlCQUFDQTtBQUFEQSxDQXZJQSxBQXVJQ0EsRUF2SWdDLGdCQUFnQixFQXVJaEQ7QUFFRCxBQUE0QixpQkFBbkIsa0JBQWtCLENBQUMiLCJmaWxlIjoiYW5pbWF0b3JzL25vZGVzL1BhcnRpY2xlRm9sbG93Tm9kZS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvcm9iYmF0ZW1hbi9XZWJzdG9ybVByb2plY3RzL2F3YXlqcy1yZW5kZXJlcmdsLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWZWN0b3IzRFx0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2NvcmUvZ2VvbS9WZWN0b3IzRFwiKTtcblxuaW1wb3J0IEFuaW1hdG9yQmFzZVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9hbmltYXRvcnMvQW5pbWF0b3JCYXNlXCIpO1xuaW1wb3J0IEFuaW1hdGlvblJlZ2lzdGVyQ2FjaGVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYW5pbWF0b3JzL2RhdGEvQW5pbWF0aW9uUmVnaXN0ZXJDYWNoZVwiKTtcbmltcG9ydCBTaGFkZXJPYmplY3RCYXNlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9tYXRlcmlhbHMvY29tcGlsYXRpb24vU2hhZGVyT2JqZWN0QmFzZVwiKTtcbmltcG9ydCBTaGFkZXJSZWdpc3RlckVsZW1lbnRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvbWF0ZXJpYWxzL2NvbXBpbGF0aW9uL1NoYWRlclJlZ2lzdGVyRWxlbWVudFwiKTtcblxuaW1wb3J0IFBhcnRpY2xlQW5pbWF0aW9uU2V0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYW5pbWF0b3JzL1BhcnRpY2xlQW5pbWF0aW9uU2V0XCIpO1xuaW1wb3J0IFBhcnRpY2xlUHJvcGVydGllc1x0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9kYXRhL1BhcnRpY2xlUHJvcGVydGllc1wiKTtcbmltcG9ydCBQYXJ0aWNsZVByb3BlcnRpZXNNb2RlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9kYXRhL1BhcnRpY2xlUHJvcGVydGllc01vZGVcIik7XG5pbXBvcnQgUGFydGljbGVOb2RlQmFzZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYW5pbWF0b3JzL25vZGVzL1BhcnRpY2xlTm9kZUJhc2VcIik7XG5pbXBvcnQgUGFydGljbGVGb2xsb3dTdGF0ZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9zdGF0ZXMvUGFydGljbGVGb2xsb3dTdGF0ZVwiKTtcblxuLyoqXG4gKiBBIHBhcnRpY2xlIGFuaW1hdGlvbiBub2RlIHVzZWQgdG8gY3JlYXRlIGEgZm9sbG93IGJlaGF2aW91ciBvbiBhIHBhcnRpY2xlIHN5c3RlbS5cbiAqL1xuY2xhc3MgUGFydGljbGVGb2xsb3dOb2RlIGV4dGVuZHMgUGFydGljbGVOb2RlQmFzZVxue1xuXHQvKiogQHByaXZhdGUgKi9cblx0cHVibGljIF9pVXNlc1Bvc2l0aW9uOmJvb2xlYW47XG5cblx0LyoqIEBwcml2YXRlICovXG5cdHB1YmxpYyBfaVVzZXNSb3RhdGlvbjpib29sZWFuO1xuXG5cdC8qKiBAcHJpdmF0ZSAqL1xuXHRwdWJsaWMgX2lTbW9vdGg6Ym9vbGVhbjtcblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIG5ldyA8Y29kZT5QYXJ0aWNsZUZvbGxvd05vZGU8L2NvZGU+XG5cdCAqXG5cdCAqIEBwYXJhbSAgICBbb3B0aW9uYWxdIHVzZXNQb3NpdGlvbiAgICAgRGVmaW5lcyB3ZWhldGhlciB0aGUgaW5kaXZpZHVhbCBwYXJ0aWNsZSByZWFjdHMgdG8gdGhlIHBvc2l0aW9uIG9mIHRoZSB0YXJnZXQuXG5cdCAqIEBwYXJhbSAgICBbb3B0aW9uYWxdIHVzZXNSb3RhdGlvbiAgICAgRGVmaW5lcyB3ZWhldGhlciB0aGUgaW5kaXZpZHVhbCBwYXJ0aWNsZSByZWFjdHMgdG8gdGhlIHJvdGF0aW9uIG9mIHRoZSB0YXJnZXQuXG5cdCAqIEBwYXJhbSAgICBbb3B0aW9uYWxdIHNtb290aCAgICAgRGVmaW5lcyB3ZWhldGhlciB0aGUgc3RhdGUgY2FsY3VsYXRlIHRoZSBpbnRlcnBvbGF0ZWQgdmFsdWUuXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvcih1c2VzUG9zaXRpb246Ym9vbGVhbiA9IHRydWUsIHVzZXNSb3RhdGlvbjpib29sZWFuID0gdHJ1ZSwgc21vb3RoOmJvb2xlYW4gPSBmYWxzZSlcblx0e1xuXHRcdHN1cGVyKFwiUGFydGljbGVGb2xsb3dcIiwgUGFydGljbGVQcm9wZXJ0aWVzTW9kZS5MT0NBTF9EWU5BTUlDLCAodXNlc1Bvc2l0aW9uICYmIHVzZXNSb3RhdGlvbik/IDYgOiAzLCBQYXJ0aWNsZUFuaW1hdGlvblNldC5QT1NUX1BSSU9SSVRZKTtcblxuXHRcdHRoaXMuX3BTdGF0ZUNsYXNzID0gUGFydGljbGVGb2xsb3dTdGF0ZTtcblxuXHRcdHRoaXMuX2lVc2VzUG9zaXRpb24gPSB1c2VzUG9zaXRpb247XG5cdFx0dGhpcy5faVVzZXNSb3RhdGlvbiA9IHVzZXNSb3RhdGlvbjtcblx0XHR0aGlzLl9pU21vb3RoID0gc21vb3RoO1xuXG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHB1YmxpYyBnZXRBR0FMVmVydGV4Q29kZShzaGFkZXJPYmplY3Q6U2hhZGVyT2JqZWN0QmFzZSwgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZTpBbmltYXRpb25SZWdpc3RlckNhY2hlKTpzdHJpbmdcblx0e1xuXHRcdC8vVE9ETzogdXNlIFF1YXRlcm5pb24gdG8gaW1wbGVtZW50IHRoaXMgZnVuY3Rpb25cblx0XHR2YXIgY29kZTpzdHJpbmcgPSBcIlwiO1xuXHRcdGlmICh0aGlzLl9pVXNlc1JvdGF0aW9uKSB7XG5cdFx0XHR2YXIgcm90YXRpb25BdHRyaWJ1dGU6U2hhZGVyUmVnaXN0ZXJFbGVtZW50ID0gYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5nZXRGcmVlVmVydGV4QXR0cmlidXRlKCk7XG5cdFx0XHRhbmltYXRpb25SZWdpc3RlckNhY2hlLnNldFJlZ2lzdGVySW5kZXgodGhpcywgUGFydGljbGVGb2xsb3dTdGF0ZS5GT0xMT1dfUk9UQVRJT05fSU5ERVgsIHJvdGF0aW9uQXR0cmlidXRlLmluZGV4KTtcblxuXHRcdFx0dmFyIHRlbXAxOlNoYWRlclJlZ2lzdGVyRWxlbWVudCA9IGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuZ2V0RnJlZVZlcnRleFZlY3RvclRlbXAoKTtcblx0XHRcdGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuYWRkVmVydGV4VGVtcFVzYWdlcyh0ZW1wMSwgMSk7XG5cdFx0XHR2YXIgdGVtcDI6U2hhZGVyUmVnaXN0ZXJFbGVtZW50ID0gYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5nZXRGcmVlVmVydGV4VmVjdG9yVGVtcCgpO1xuXHRcdFx0YW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5hZGRWZXJ0ZXhUZW1wVXNhZ2VzKHRlbXAyLCAxKTtcblx0XHRcdHZhciB0ZW1wMzpTaGFkZXJSZWdpc3RlckVsZW1lbnQgPSBhbmltYXRpb25SZWdpc3RlckNhY2hlLmdldEZyZWVWZXJ0ZXhWZWN0b3JUZW1wKCk7XG5cblx0XHRcdHZhciB0ZW1wNDpTaGFkZXJSZWdpc3RlckVsZW1lbnQ7XG5cdFx0XHRpZiAoYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5oYXNCaWxsYm9hcmQpIHtcblx0XHRcdFx0YW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5hZGRWZXJ0ZXhUZW1wVXNhZ2VzKHRlbXAzLCAxKTtcblx0XHRcdFx0dGVtcDQgPSBhbmltYXRpb25SZWdpc3RlckNhY2hlLmdldEZyZWVWZXJ0ZXhWZWN0b3JUZW1wKCk7XG5cdFx0XHR9XG5cblx0XHRcdGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUucmVtb3ZlVmVydGV4VGVtcFVzYWdlKHRlbXAxKTtcblx0XHRcdGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUucmVtb3ZlVmVydGV4VGVtcFVzYWdlKHRlbXAyKTtcblx0XHRcdGlmIChhbmltYXRpb25SZWdpc3RlckNhY2hlLmhhc0JpbGxib2FyZClcblx0XHRcdFx0YW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5yZW1vdmVWZXJ0ZXhUZW1wVXNhZ2UodGVtcDMpO1xuXG5cdFx0XHR2YXIgbGVuOm51bWJlciAvKmludCovID0gYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5yb3RhdGlvblJlZ2lzdGVycy5sZW5ndGg7XG5cdFx0XHR2YXIgaTpudW1iZXIgLyppbnQqLztcblxuXHRcdFx0Ly94IGF4aXNcblx0XHRcdGNvZGUgKz0gXCJtb3YgXCIgKyB0ZW1wMSArIFwiLFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS52ZXJ0ZXhaZXJvQ29uc3QgKyBcIlxcblwiO1xuXHRcdFx0Y29kZSArPSBcIm1vdiBcIiArIHRlbXAxICsgXCIueCxcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUudmVydGV4T25lQ29uc3QgKyBcIlxcblwiO1xuXHRcdFx0Y29kZSArPSBcIm1vdiBcIiArIHRlbXAzICsgXCIsXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnZlcnRleFplcm9Db25zdCArIFwiXFxuXCI7XG5cdFx0XHRjb2RlICs9IFwic2luIFwiICsgdGVtcDMgKyBcIi55LFwiICsgcm90YXRpb25BdHRyaWJ1dGUgKyBcIi54XFxuXCI7XG5cdFx0XHRjb2RlICs9IFwiY29zIFwiICsgdGVtcDMgKyBcIi56LFwiICsgcm90YXRpb25BdHRyaWJ1dGUgKyBcIi54XFxuXCI7XG5cdFx0XHRjb2RlICs9IFwibW92IFwiICsgdGVtcDIgKyBcIi54LFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS52ZXJ0ZXhaZXJvQ29uc3QgKyBcIlxcblwiO1xuXHRcdFx0Y29kZSArPSBcIm1vdiBcIiArIHRlbXAyICsgXCIueSxcIiArIHRlbXAzICsgXCIuelxcblwiO1xuXHRcdFx0Y29kZSArPSBcIm5lZyBcIiArIHRlbXAyICsgXCIueixcIiArIHRlbXAzICsgXCIueVxcblwiO1xuXG5cdFx0XHRpZiAoYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5oYXNCaWxsYm9hcmQpXG5cdFx0XHRcdGNvZGUgKz0gXCJtMzMgXCIgKyB0ZW1wNCArIFwiLnh5eixcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUucG9zaXRpb25UYXJnZXQgKyBcIi54eXosXCIgKyB0ZW1wMSArIFwiXFxuXCI7XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0Y29kZSArPSBcIm0zMyBcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuc2NhbGVBbmRSb3RhdGVUYXJnZXQgKyBcIi54eXosXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnNjYWxlQW5kUm90YXRlVGFyZ2V0ICsgXCIueHl6LFwiICsgdGVtcDEgKyBcIlxcblwiO1xuXHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspXG5cdFx0XHRcdFx0Y29kZSArPSBcIm0zMyBcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUucm90YXRpb25SZWdpc3RlcnNbaV0gKyBcIi54eXosXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnJvdGF0aW9uUmVnaXN0ZXJzW2ldICsgXCIsXCIgKyB0ZW1wMSArIFwiXFxuXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8veSBheGlzXG5cdFx0XHRjb2RlICs9IFwibW92IFwiICsgdGVtcDEgKyBcIixcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUudmVydGV4WmVyb0NvbnN0ICsgXCJcXG5cIjtcblx0XHRcdGNvZGUgKz0gXCJjb3MgXCIgKyB0ZW1wMSArIFwiLngsXCIgKyByb3RhdGlvbkF0dHJpYnV0ZSArIFwiLnlcXG5cIjtcblx0XHRcdGNvZGUgKz0gXCJzaW4gXCIgKyB0ZW1wMSArIFwiLnosXCIgKyByb3RhdGlvbkF0dHJpYnV0ZSArIFwiLnlcXG5cIjtcblx0XHRcdGNvZGUgKz0gXCJtb3YgXCIgKyB0ZW1wMiArIFwiLFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS52ZXJ0ZXhaZXJvQ29uc3QgKyBcIlxcblwiO1xuXHRcdFx0Y29kZSArPSBcIm1vdiBcIiArIHRlbXAyICsgXCIueSxcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUudmVydGV4T25lQ29uc3QgKyBcIlxcblwiO1xuXHRcdFx0Y29kZSArPSBcIm1vdiBcIiArIHRlbXAzICsgXCIsXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnZlcnRleFplcm9Db25zdCArIFwiXFxuXCI7XG5cdFx0XHRjb2RlICs9IFwibmVnIFwiICsgdGVtcDMgKyBcIi54LFwiICsgdGVtcDEgKyBcIi56XFxuXCI7XG5cdFx0XHRjb2RlICs9IFwibW92IFwiICsgdGVtcDMgKyBcIi56LFwiICsgdGVtcDEgKyBcIi54XFxuXCI7XG5cblx0XHRcdGlmIChhbmltYXRpb25SZWdpc3RlckNhY2hlLmhhc0JpbGxib2FyZClcblx0XHRcdFx0Y29kZSArPSBcIm0zMyBcIiArIHRlbXA0ICsgXCIueHl6LFwiICsgdGVtcDQgKyBcIi54eXosXCIgKyB0ZW1wMSArIFwiXFxuXCI7XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0Y29kZSArPSBcIm0zMyBcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuc2NhbGVBbmRSb3RhdGVUYXJnZXQgKyBcIi54eXosXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnNjYWxlQW5kUm90YXRlVGFyZ2V0ICsgXCIueHl6LFwiICsgdGVtcDEgKyBcIlxcblwiO1xuXHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspXG5cdFx0XHRcdFx0Y29kZSArPSBcIm0zMyBcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUucm90YXRpb25SZWdpc3RlcnNbaV0gKyBcIi54eXosXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnJvdGF0aW9uUmVnaXN0ZXJzW2ldICsgXCIsXCIgKyB0ZW1wMSArIFwiXFxuXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8veiBheGlzXG5cdFx0XHRjb2RlICs9IFwibW92IFwiICsgdGVtcDIgKyBcIixcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUudmVydGV4WmVyb0NvbnN0ICsgXCJcXG5cIjtcblx0XHRcdGNvZGUgKz0gXCJzaW4gXCIgKyB0ZW1wMiArIFwiLngsXCIgKyByb3RhdGlvbkF0dHJpYnV0ZSArIFwiLnpcXG5cIjtcblx0XHRcdGNvZGUgKz0gXCJjb3MgXCIgKyB0ZW1wMiArIFwiLnksXCIgKyByb3RhdGlvbkF0dHJpYnV0ZSArIFwiLnpcXG5cIjtcblx0XHRcdGNvZGUgKz0gXCJtb3YgXCIgKyB0ZW1wMSArIFwiLFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS52ZXJ0ZXhaZXJvQ29uc3QgKyBcIlxcblwiO1xuXHRcdFx0Y29kZSArPSBcIm1vdiBcIiArIHRlbXAxICsgXCIueCxcIiArIHRlbXAyICsgXCIueVxcblwiO1xuXHRcdFx0Y29kZSArPSBcIm5lZyBcIiArIHRlbXAxICsgXCIueSxcIiArIHRlbXAyICsgXCIueFxcblwiO1xuXHRcdFx0Y29kZSArPSBcIm1vdiBcIiArIHRlbXAzICsgXCIsXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnZlcnRleFplcm9Db25zdCArIFwiXFxuXCI7XG5cdFx0XHRjb2RlICs9IFwibW92IFwiICsgdGVtcDMgKyBcIi56LFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS52ZXJ0ZXhPbmVDb25zdCArIFwiXFxuXCI7XG5cblx0XHRcdGlmIChhbmltYXRpb25SZWdpc3RlckNhY2hlLmhhc0JpbGxib2FyZCkge1xuXHRcdFx0XHRjb2RlICs9IFwibTMzIFwiICsgdGVtcDQgKyBcIi54eXosXCIgKyB0ZW1wNCArIFwiLnh5eixcIiArIHRlbXAxICsgXCJcXG5cIjtcblx0XHRcdFx0Y29kZSArPSBcInN1YiBcIiArIHRlbXA0ICsgXCIueHl6LFwiICsgdGVtcDQgKyBcIi54eXosXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnBvc2l0aW9uVGFyZ2V0ICsgXCIueHl6XFxuXCI7XG5cdFx0XHRcdGNvZGUgKz0gXCJhZGQgXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnNjYWxlQW5kUm90YXRlVGFyZ2V0ICsgXCIueHl6LFwiICsgdGVtcDQgKyBcIi54eXosXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnNjYWxlQW5kUm90YXRlVGFyZ2V0ICsgXCIueHl6XFxuXCI7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjb2RlICs9IFwibTMzIFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5zY2FsZUFuZFJvdGF0ZVRhcmdldCArIFwiLnh5eixcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuc2NhbGVBbmRSb3RhdGVUYXJnZXQgKyBcIi54eXosXCIgKyB0ZW1wMSArIFwiXFxuXCI7XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKylcblx0XHRcdFx0XHRjb2RlICs9IFwibTMzIFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5yb3RhdGlvblJlZ2lzdGVyc1tpXSArIFwiLnh5eixcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUucm90YXRpb25SZWdpc3RlcnNbaV0gKyBcIixcIiArIHRlbXAxICsgXCJcXG5cIjtcblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICh0aGlzLl9pVXNlc1Bvc2l0aW9uKSB7XG5cdFx0XHR2YXIgcG9zaXRpb25BdHRyaWJ1dGU6U2hhZGVyUmVnaXN0ZXJFbGVtZW50ID0gYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5nZXRGcmVlVmVydGV4QXR0cmlidXRlKCk7XG5cdFx0XHRhbmltYXRpb25SZWdpc3RlckNhY2hlLnNldFJlZ2lzdGVySW5kZXgodGhpcywgUGFydGljbGVGb2xsb3dTdGF0ZS5GT0xMT1dfUE9TSVRJT05fSU5ERVgsIHBvc2l0aW9uQXR0cmlidXRlLmluZGV4KTtcblx0XHRcdGNvZGUgKz0gXCJhZGQgXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnNjYWxlQW5kUm90YXRlVGFyZ2V0ICsgXCIueHl6LFwiICsgcG9zaXRpb25BdHRyaWJ1dGUgKyBcIixcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuc2NhbGVBbmRSb3RhdGVUYXJnZXQgKyBcIi54eXpcXG5cIjtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29kZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIGdldEFuaW1hdGlvblN0YXRlKGFuaW1hdG9yOkFuaW1hdG9yQmFzZSk6UGFydGljbGVGb2xsb3dTdGF0ZVxuXHR7XG5cdFx0cmV0dXJuIDxQYXJ0aWNsZUZvbGxvd1N0YXRlPiBhbmltYXRvci5nZXRBbmltYXRpb25TdGF0ZSh0aGlzKTtcblx0fVxufVxuXG5leHBvcnQgPSBQYXJ0aWNsZUZvbGxvd05vZGU7Il19