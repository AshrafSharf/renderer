var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var ParticlePropertiesMode = require("awayjs-renderergl/lib/animators/data/ParticlePropertiesMode");
var ParticleNodeBase = require("awayjs-renderergl/lib/animators/nodes/ParticleNodeBase");
var ParticleBillboardState = require("awayjs-renderergl/lib/animators/states/ParticleBillboardState");
/**
 * A particle animation node that controls the rotation of a particle to always face the camera.
 */
var ParticleBillboardNode = (function (_super) {
    __extends(ParticleBillboardNode, _super);
    /**
     * Creates a new <code>ParticleBillboardNode</code>
     */
    function ParticleBillboardNode(billboardAxis) {
        if (billboardAxis === void 0) { billboardAxis = null; }
        _super.call(this, "ParticleBillboard", ParticlePropertiesMode.GLOBAL, 0, 4);
        this._pStateClass = ParticleBillboardState;
        this._iBillboardAxis = billboardAxis;
    }
    /**
     * @inheritDoc
     */
    ParticleBillboardNode.prototype.getAGALVertexCode = function (shaderObject, animationRegisterCache) {
        var rotationMatrixRegister = animationRegisterCache.getFreeVertexConstant();
        animationRegisterCache.setRegisterIndex(this, ParticleBillboardState.MATRIX_INDEX, rotationMatrixRegister.index);
        animationRegisterCache.getFreeVertexConstant();
        animationRegisterCache.getFreeVertexConstant();
        animationRegisterCache.getFreeVertexConstant();
        var temp = animationRegisterCache.getFreeVertexVectorTemp();
        var code = "m33 " + temp + ".xyz," + animationRegisterCache.scaleAndRotateTarget + "," + rotationMatrixRegister + "\n" + "mov " + animationRegisterCache.scaleAndRotateTarget + ".xyz," + temp + "\n";
        var shaderRegisterElement;
        for (var i = 0; i < animationRegisterCache.rotationRegisters.length; i++) {
            shaderRegisterElement = animationRegisterCache.rotationRegisters[i];
            code += "m33 " + temp + ".xyz," + shaderRegisterElement + "," + rotationMatrixRegister + "\n" + "mov " + shaderRegisterElement + ".xyz," + shaderRegisterElement + "\n";
        }
        return code;
    };
    /**
     * @inheritDoc
     */
    ParticleBillboardNode.prototype.getAnimationState = function (animator) {
        return animator.getAnimationState(this);
    };
    /**
     * @inheritDoc
     */
    ParticleBillboardNode.prototype._iProcessAnimationSetting = function (particleAnimationSet) {
        particleAnimationSet.hasBillboard = true;
    };
    return ParticleBillboardNode;
})(ParticleNodeBase);
module.exports = ParticleBillboardNode;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvbm9kZXMvUGFydGljbGVCaWxsYm9hcmROb2RlLnRzIl0sIm5hbWVzIjpbIlBhcnRpY2xlQmlsbGJvYXJkTm9kZSIsIlBhcnRpY2xlQmlsbGJvYXJkTm9kZS5jb25zdHJ1Y3RvciIsIlBhcnRpY2xlQmlsbGJvYXJkTm9kZS5nZXRBR0FMVmVydGV4Q29kZSIsIlBhcnRpY2xlQmlsbGJvYXJkTm9kZS5nZXRBbmltYXRpb25TdGF0ZSIsIlBhcnRpY2xlQmlsbGJvYXJkTm9kZS5faVByb2Nlc3NBbmltYXRpb25TZXR0aW5nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFTQSxJQUFPLHNCQUFzQixXQUFhLDZEQUE2RCxDQUFDLENBQUM7QUFDekcsSUFBTyxnQkFBZ0IsV0FBZSx3REFBd0QsQ0FBQyxDQUFDO0FBQ2hHLElBQU8sc0JBQXNCLFdBQWEsK0RBQStELENBQUMsQ0FBQztBQUUzRyxBQUdBOztHQURHO0lBQ0cscUJBQXFCO0lBQVNBLFVBQTlCQSxxQkFBcUJBLFVBQXlCQTtJQUtuREE7O09BRUdBO0lBQ0hBLFNBUktBLHFCQUFxQkEsQ0FRZEEsYUFBNkJBO1FBQTdCQyw2QkFBNkJBLEdBQTdCQSxvQkFBNkJBO1FBRXhDQSxrQkFBTUEsbUJBQW1CQSxFQUFFQSxzQkFBc0JBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO1FBRWhFQSxJQUFJQSxDQUFDQSxZQUFZQSxHQUFHQSxzQkFBc0JBLENBQUNBO1FBRTNDQSxJQUFJQSxDQUFDQSxlQUFlQSxHQUFHQSxhQUFhQSxDQUFDQTtJQUN0Q0EsQ0FBQ0E7SUFFREQ7O09BRUdBO0lBQ0lBLGlEQUFpQkEsR0FBeEJBLFVBQXlCQSxZQUE2QkEsRUFBRUEsc0JBQTZDQTtRQUVwR0UsSUFBSUEsc0JBQXNCQSxHQUF5QkEsc0JBQXNCQSxDQUFDQSxxQkFBcUJBLEVBQUVBLENBQUNBO1FBQ2xHQSxzQkFBc0JBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsSUFBSUEsRUFBRUEsc0JBQXNCQSxDQUFDQSxZQUFZQSxFQUFFQSxzQkFBc0JBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO1FBQ2pIQSxzQkFBc0JBLENBQUNBLHFCQUFxQkEsRUFBRUEsQ0FBQ0E7UUFDL0NBLHNCQUFzQkEsQ0FBQ0EscUJBQXFCQSxFQUFFQSxDQUFDQTtRQUMvQ0Esc0JBQXNCQSxDQUFDQSxxQkFBcUJBLEVBQUVBLENBQUNBO1FBRS9DQSxJQUFJQSxJQUFJQSxHQUF5QkEsc0JBQXNCQSxDQUFDQSx1QkFBdUJBLEVBQUVBLENBQUNBO1FBRWxGQSxJQUFJQSxJQUFJQSxHQUFVQSxNQUFNQSxHQUFHQSxJQUFJQSxHQUFHQSxPQUFPQSxHQUFHQSxzQkFBc0JBLENBQUNBLG9CQUFvQkEsR0FBR0EsR0FBR0EsR0FBR0Esc0JBQXNCQSxHQUFHQSxJQUFJQSxHQUN2SEEsTUFBTUEsR0FBR0Esc0JBQXNCQSxDQUFDQSxvQkFBb0JBLEdBQUdBLE9BQU9BLEdBQUdBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBO1FBRW5GQSxJQUFJQSxxQkFBMkNBLENBQUNBO1FBQ2hEQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFtQkEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0Esc0JBQXNCQSxDQUFDQSxpQkFBaUJBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBLEVBQUVBLEVBQUVBLENBQUNBO1lBQzFGQSxxQkFBcUJBLEdBQUdBLHNCQUFzQkEsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNwRUEsSUFBSUEsSUFBSUEsTUFBTUEsR0FBR0EsSUFBSUEsR0FBR0EsT0FBT0EsR0FBR0EscUJBQXFCQSxHQUFHQSxHQUFHQSxHQUFHQSxzQkFBc0JBLEdBQUdBLElBQUlBLEdBQzNGQSxNQUFNQSxHQUFHQSxxQkFBcUJBLEdBQUdBLE9BQU9BLEdBQUdBLHFCQUFxQkEsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFDM0VBLENBQUNBO1FBRURBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO0lBQ2JBLENBQUNBO0lBRURGOztPQUVHQTtJQUNJQSxpREFBaUJBLEdBQXhCQSxVQUF5QkEsUUFBcUJBO1FBRTdDRyxNQUFNQSxDQUEwQkEsUUFBUUEsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtJQUNsRUEsQ0FBQ0E7SUFFREg7O09BRUdBO0lBQ0lBLHlEQUF5QkEsR0FBaENBLFVBQWlDQSxvQkFBeUNBO1FBRXpFSSxvQkFBb0JBLENBQUNBLFlBQVlBLEdBQUdBLElBQUlBLENBQUNBO0lBQzFDQSxDQUFDQTtJQUNGSiw0QkFBQ0E7QUFBREEsQ0ExREEsQUEwRENBLEVBMURtQyxnQkFBZ0IsRUEwRG5EO0FBRUQsQUFBK0IsaUJBQXRCLHFCQUFxQixDQUFDIiwiZmlsZSI6ImFuaW1hdG9ycy9ub2Rlcy9QYXJ0aWNsZUJpbGxib2FyZE5vZGUuanMiLCJzb3VyY2VSb290IjoiLi4vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZlY3RvcjNEXHRcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9WZWN0b3IzRFwiKTtcblxuaW1wb3J0IEFuaW1hdG9yQmFzZVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvQW5pbWF0b3JCYXNlXCIpO1xuaW1wb3J0IEFuaW1hdGlvblJlZ2lzdGVyQ2FjaGVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYW5pbWF0b3JzL2RhdGEvQW5pbWF0aW9uUmVnaXN0ZXJDYWNoZVwiKTtcbmltcG9ydCBTaGFkZXJPYmplY3RCYXNlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9TaGFkZXJPYmplY3RCYXNlXCIpO1xuaW1wb3J0IFNoYWRlclJlZ2lzdGVyRWxlbWVudFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9TaGFkZXJSZWdpc3RlckVsZW1lbnRcIik7XG5cbmltcG9ydCBQYXJ0aWNsZUFuaW1hdGlvblNldFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9QYXJ0aWNsZUFuaW1hdGlvblNldFwiKTtcbmltcG9ydCBQYXJ0aWNsZVByb3BlcnRpZXNcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvZGF0YS9QYXJ0aWNsZVByb3BlcnRpZXNcIik7XG5pbXBvcnQgUGFydGljbGVQcm9wZXJ0aWVzTW9kZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvZGF0YS9QYXJ0aWNsZVByb3BlcnRpZXNNb2RlXCIpO1xuaW1wb3J0IFBhcnRpY2xlTm9kZUJhc2VcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9ub2Rlcy9QYXJ0aWNsZU5vZGVCYXNlXCIpO1xuaW1wb3J0IFBhcnRpY2xlQmlsbGJvYXJkU3RhdGVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYW5pbWF0b3JzL3N0YXRlcy9QYXJ0aWNsZUJpbGxib2FyZFN0YXRlXCIpO1xuXG4vKipcbiAqIEEgcGFydGljbGUgYW5pbWF0aW9uIG5vZGUgdGhhdCBjb250cm9scyB0aGUgcm90YXRpb24gb2YgYSBwYXJ0aWNsZSB0byBhbHdheXMgZmFjZSB0aGUgY2FtZXJhLlxuICovXG5jbGFzcyBQYXJ0aWNsZUJpbGxib2FyZE5vZGUgZXh0ZW5kcyBQYXJ0aWNsZU5vZGVCYXNlXG57XG5cdC8qKiBAcHJpdmF0ZSAqL1xuXHRwdWJsaWMgX2lCaWxsYm9hcmRBeGlzOlZlY3RvcjNEO1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgbmV3IDxjb2RlPlBhcnRpY2xlQmlsbGJvYXJkTm9kZTwvY29kZT5cblx0ICovXG5cdGNvbnN0cnVjdG9yKGJpbGxib2FyZEF4aXM6VmVjdG9yM0QgPSBudWxsKVxuXHR7XG5cdFx0c3VwZXIoXCJQYXJ0aWNsZUJpbGxib2FyZFwiLCBQYXJ0aWNsZVByb3BlcnRpZXNNb2RlLkdMT0JBTCwgMCwgNCk7XG5cblx0XHR0aGlzLl9wU3RhdGVDbGFzcyA9IFBhcnRpY2xlQmlsbGJvYXJkU3RhdGU7XG5cblx0XHR0aGlzLl9pQmlsbGJvYXJkQXhpcyA9IGJpbGxib2FyZEF4aXM7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHB1YmxpYyBnZXRBR0FMVmVydGV4Q29kZShzaGFkZXJPYmplY3Q6U2hhZGVyT2JqZWN0QmFzZSwgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZTpBbmltYXRpb25SZWdpc3RlckNhY2hlKTpzdHJpbmdcblx0e1xuXHRcdHZhciByb3RhdGlvbk1hdHJpeFJlZ2lzdGVyOlNoYWRlclJlZ2lzdGVyRWxlbWVudCA9IGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuZ2V0RnJlZVZlcnRleENvbnN0YW50KCk7XG5cdFx0YW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5zZXRSZWdpc3RlckluZGV4KHRoaXMsIFBhcnRpY2xlQmlsbGJvYXJkU3RhdGUuTUFUUklYX0lOREVYLCByb3RhdGlvbk1hdHJpeFJlZ2lzdGVyLmluZGV4KTtcblx0XHRhbmltYXRpb25SZWdpc3RlckNhY2hlLmdldEZyZWVWZXJ0ZXhDb25zdGFudCgpO1xuXHRcdGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuZ2V0RnJlZVZlcnRleENvbnN0YW50KCk7XG5cdFx0YW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5nZXRGcmVlVmVydGV4Q29uc3RhbnQoKTtcblxuXHRcdHZhciB0ZW1wOlNoYWRlclJlZ2lzdGVyRWxlbWVudCA9IGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuZ2V0RnJlZVZlcnRleFZlY3RvclRlbXAoKTtcblxuXHRcdHZhciBjb2RlOnN0cmluZyA9IFwibTMzIFwiICsgdGVtcCArIFwiLnh5eixcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuc2NhbGVBbmRSb3RhdGVUYXJnZXQgKyBcIixcIiArIHJvdGF0aW9uTWF0cml4UmVnaXN0ZXIgKyBcIlxcblwiICtcblx0XHRcdFx0XHRcdCAgXCJtb3YgXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnNjYWxlQW5kUm90YXRlVGFyZ2V0ICsgXCIueHl6LFwiICsgdGVtcCArIFwiXFxuXCI7XG5cblx0XHR2YXIgc2hhZGVyUmVnaXN0ZXJFbGVtZW50OlNoYWRlclJlZ2lzdGVyRWxlbWVudDtcblx0XHRmb3IgKHZhciBpOm51bWJlciAvKnVpbnQqLyA9IDA7IGkgPCBhbmltYXRpb25SZWdpc3RlckNhY2hlLnJvdGF0aW9uUmVnaXN0ZXJzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRzaGFkZXJSZWdpc3RlckVsZW1lbnQgPSBhbmltYXRpb25SZWdpc3RlckNhY2hlLnJvdGF0aW9uUmVnaXN0ZXJzW2ldO1xuXHRcdFx0Y29kZSArPSBcIm0zMyBcIiArIHRlbXAgKyBcIi54eXosXCIgKyBzaGFkZXJSZWdpc3RlckVsZW1lbnQgKyBcIixcIiArIHJvdGF0aW9uTWF0cml4UmVnaXN0ZXIgKyBcIlxcblwiICtcblx0XHRcdFx0XHRcIm1vdiBcIiArIHNoYWRlclJlZ2lzdGVyRWxlbWVudCArIFwiLnh5eixcIiArIHNoYWRlclJlZ2lzdGVyRWxlbWVudCArIFwiXFxuXCI7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvZGU7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHB1YmxpYyBnZXRBbmltYXRpb25TdGF0ZShhbmltYXRvcjpBbmltYXRvckJhc2UpOlBhcnRpY2xlQmlsbGJvYXJkU3RhdGVcblx0e1xuXHRcdHJldHVybiA8UGFydGljbGVCaWxsYm9hcmRTdGF0ZT4gYW5pbWF0b3IuZ2V0QW5pbWF0aW9uU3RhdGUodGhpcyk7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHB1YmxpYyBfaVByb2Nlc3NBbmltYXRpb25TZXR0aW5nKHBhcnRpY2xlQW5pbWF0aW9uU2V0OlBhcnRpY2xlQW5pbWF0aW9uU2V0KVxuXHR7XG5cdFx0cGFydGljbGVBbmltYXRpb25TZXQuaGFzQmlsbGJvYXJkID0gdHJ1ZTtcblx0fVxufVxuXG5leHBvcnQgPSBQYXJ0aWNsZUJpbGxib2FyZE5vZGU7Il19