var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var ParticlePropertiesMode = require("awayjs-renderergl/lib/animators/data/ParticlePropertiesMode");
var ParticleNodeBase = require("awayjs-renderergl/lib/animators/nodes/ParticleNodeBase");
var ParticleBillboardState = require("awayjs-renderergl/lib/animators/states/ParticleBillboardState");
/**
 * A particle animation node that controls the rotation of a particle to always face the camera.
 */
var ParticleBillboardNode = (function (_super) {
    __extends(ParticleBillboardNode, _super);
    /**
     * Creates a new <code>ParticleBillboardNode</code>
     */
    function ParticleBillboardNode(billboardAxis) {
        if (billboardAxis === void 0) { billboardAxis = null; }
        _super.call(this, "ParticleBillboard", ParticlePropertiesMode.GLOBAL, 0, 4);
        this._pStateClass = ParticleBillboardState;
        this._iBillboardAxis = billboardAxis;
    }
    /**
     * @inheritDoc
     */
    ParticleBillboardNode.prototype.getAGALVertexCode = function (shaderObject, animationRegisterCache) {
        var rotationMatrixRegister = animationRegisterCache.getFreeVertexConstant();
        animationRegisterCache.setRegisterIndex(this, ParticleBillboardState.MATRIX_INDEX, rotationMatrixRegister.index);
        animationRegisterCache.getFreeVertexConstant();
        animationRegisterCache.getFreeVertexConstant();
        animationRegisterCache.getFreeVertexConstant();
        var temp = animationRegisterCache.getFreeVertexVectorTemp();
        var code = "m33 " + temp + ".xyz," + animationRegisterCache.scaleAndRotateTarget + "," + rotationMatrixRegister + "\n" + "mov " + animationRegisterCache.scaleAndRotateTarget + ".xyz," + temp + "\n";
        var shaderRegisterElement;
        for (var i = 0; i < animationRegisterCache.rotationRegisters.length; i++) {
            shaderRegisterElement = animationRegisterCache.rotationRegisters[i];
            code += "m33 " + temp + ".xyz," + shaderRegisterElement + "," + rotationMatrixRegister + "\n" + "mov " + shaderRegisterElement + ".xyz," + shaderRegisterElement + "\n";
        }
        return code;
    };
    /**
     * @inheritDoc
     */
    ParticleBillboardNode.prototype.getAnimationState = function (animator) {
        return animator.getAnimationState(this);
    };
    /**
     * @inheritDoc
     */
    ParticleBillboardNode.prototype._iProcessAnimationSetting = function (particleAnimationSet) {
        particleAnimationSet.hasBillboard = true;
    };
    return ParticleBillboardNode;
})(ParticleNodeBase);
module.exports = ParticleBillboardNode;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFuaW1hdG9ycy9ub2Rlcy9wYXJ0aWNsZWJpbGxib2FyZG5vZGUudHMiXSwibmFtZXMiOlsiUGFydGljbGVCaWxsYm9hcmROb2RlIiwiUGFydGljbGVCaWxsYm9hcmROb2RlLmNvbnN0cnVjdG9yIiwiUGFydGljbGVCaWxsYm9hcmROb2RlLmdldEFHQUxWZXJ0ZXhDb2RlIiwiUGFydGljbGVCaWxsYm9hcmROb2RlLmdldEFuaW1hdGlvblN0YXRlIiwiUGFydGljbGVCaWxsYm9hcmROb2RlLl9pUHJvY2Vzc0FuaW1hdGlvblNldHRpbmciXSwibWFwcGluZ3MiOiI7Ozs7OztBQVNBLElBQU8sc0JBQXNCLFdBQWEsNkRBQTZELENBQUMsQ0FBQztBQUN6RyxJQUFPLGdCQUFnQixXQUFlLHdEQUF3RCxDQUFDLENBQUM7QUFDaEcsSUFBTyxzQkFBc0IsV0FBYSwrREFBK0QsQ0FBQyxDQUFDO0FBRTNHLEFBR0E7O0dBREc7SUFDRyxxQkFBcUI7SUFBU0EsVUFBOUJBLHFCQUFxQkEsVUFBeUJBO0lBS25EQTs7T0FFR0E7SUFDSEEsU0FSS0EscUJBQXFCQSxDQVFkQSxhQUE2QkE7UUFBN0JDLDZCQUE2QkEsR0FBN0JBLG9CQUE2QkE7UUFFeENBLGtCQUFNQSxtQkFBbUJBLEVBQUVBLHNCQUFzQkEsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFaEVBLElBQUlBLENBQUNBLFlBQVlBLEdBQUdBLHNCQUFzQkEsQ0FBQ0E7UUFFM0NBLElBQUlBLENBQUNBLGVBQWVBLEdBQUdBLGFBQWFBLENBQUNBO0lBQ3RDQSxDQUFDQTtJQUVERDs7T0FFR0E7SUFDSUEsaURBQWlCQSxHQUF4QkEsVUFBeUJBLFlBQTZCQSxFQUFFQSxzQkFBNkNBO1FBRXBHRSxJQUFJQSxzQkFBc0JBLEdBQXlCQSxzQkFBc0JBLENBQUNBLHFCQUFxQkEsRUFBRUEsQ0FBQ0E7UUFDbEdBLHNCQUFzQkEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxJQUFJQSxFQUFFQSxzQkFBc0JBLENBQUNBLFlBQVlBLEVBQUVBLHNCQUFzQkEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFDakhBLHNCQUFzQkEsQ0FBQ0EscUJBQXFCQSxFQUFFQSxDQUFDQTtRQUMvQ0Esc0JBQXNCQSxDQUFDQSxxQkFBcUJBLEVBQUVBLENBQUNBO1FBQy9DQSxzQkFBc0JBLENBQUNBLHFCQUFxQkEsRUFBRUEsQ0FBQ0E7UUFFL0NBLElBQUlBLElBQUlBLEdBQXlCQSxzQkFBc0JBLENBQUNBLHVCQUF1QkEsRUFBRUEsQ0FBQ0E7UUFFbEZBLElBQUlBLElBQUlBLEdBQVVBLE1BQU1BLEdBQUdBLElBQUlBLEdBQUdBLE9BQU9BLEdBQUdBLHNCQUFzQkEsQ0FBQ0Esb0JBQW9CQSxHQUFHQSxHQUFHQSxHQUFHQSxzQkFBc0JBLEdBQUdBLElBQUlBLEdBQ3ZIQSxNQUFNQSxHQUFHQSxzQkFBc0JBLENBQUNBLG9CQUFvQkEsR0FBR0EsT0FBT0EsR0FBR0EsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFFbkZBLElBQUlBLHFCQUEyQ0EsQ0FBQ0E7UUFDaERBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQW1CQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxzQkFBc0JBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0EsRUFBRUEsRUFBRUEsQ0FBQ0E7WUFDMUZBLHFCQUFxQkEsR0FBR0Esc0JBQXNCQSxDQUFDQSxpQkFBaUJBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ3BFQSxJQUFJQSxJQUFJQSxNQUFNQSxHQUFHQSxJQUFJQSxHQUFHQSxPQUFPQSxHQUFHQSxxQkFBcUJBLEdBQUdBLEdBQUdBLEdBQUdBLHNCQUFzQkEsR0FBR0EsSUFBSUEsR0FDM0ZBLE1BQU1BLEdBQUdBLHFCQUFxQkEsR0FBR0EsT0FBT0EsR0FBR0EscUJBQXFCQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUMzRUEsQ0FBQ0E7UUFFREEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7SUFDYkEsQ0FBQ0E7SUFFREY7O09BRUdBO0lBQ0lBLGlEQUFpQkEsR0FBeEJBLFVBQXlCQSxRQUFxQkE7UUFFN0NHLE1BQU1BLENBQTBCQSxRQUFRQSxDQUFDQSxpQkFBaUJBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO0lBQ2xFQSxDQUFDQTtJQUVESDs7T0FFR0E7SUFDSUEseURBQXlCQSxHQUFoQ0EsVUFBaUNBLG9CQUF5Q0E7UUFFekVJLG9CQUFvQkEsQ0FBQ0EsWUFBWUEsR0FBR0EsSUFBSUEsQ0FBQ0E7SUFDMUNBLENBQUNBO0lBQ0ZKLDRCQUFDQTtBQUFEQSxDQTFEQSxBQTBEQ0EsRUExRG1DLGdCQUFnQixFQTBEbkQ7QUFFRCxBQUErQixpQkFBdEIscUJBQXFCLENBQUMiLCJmaWxlIjoiYW5pbWF0b3JzL25vZGVzL1BhcnRpY2xlQmlsbGJvYXJkTm9kZS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvcm9iYmF0ZW1hbi9XZWJzdG9ybVByb2plY3RzL2F3YXlqcy1yZW5kZXJlcmdsLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWZWN0b3IzRFx0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2NvcmUvZ2VvbS9WZWN0b3IzRFwiKTtcblxuaW1wb3J0IEFuaW1hdG9yQmFzZVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9hbmltYXRvcnMvQW5pbWF0b3JCYXNlXCIpO1xuaW1wb3J0IEFuaW1hdGlvblJlZ2lzdGVyQ2FjaGVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYW5pbWF0b3JzL2RhdGEvQW5pbWF0aW9uUmVnaXN0ZXJDYWNoZVwiKTtcbmltcG9ydCBTaGFkZXJPYmplY3RCYXNlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9tYXRlcmlhbHMvY29tcGlsYXRpb24vU2hhZGVyT2JqZWN0QmFzZVwiKTtcbmltcG9ydCBTaGFkZXJSZWdpc3RlckVsZW1lbnRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvbWF0ZXJpYWxzL2NvbXBpbGF0aW9uL1NoYWRlclJlZ2lzdGVyRWxlbWVudFwiKTtcblxuaW1wb3J0IFBhcnRpY2xlQW5pbWF0aW9uU2V0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYW5pbWF0b3JzL1BhcnRpY2xlQW5pbWF0aW9uU2V0XCIpO1xuaW1wb3J0IFBhcnRpY2xlUHJvcGVydGllc1x0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9kYXRhL1BhcnRpY2xlUHJvcGVydGllc1wiKTtcbmltcG9ydCBQYXJ0aWNsZVByb3BlcnRpZXNNb2RlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9kYXRhL1BhcnRpY2xlUHJvcGVydGllc01vZGVcIik7XG5pbXBvcnQgUGFydGljbGVOb2RlQmFzZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYW5pbWF0b3JzL25vZGVzL1BhcnRpY2xlTm9kZUJhc2VcIik7XG5pbXBvcnQgUGFydGljbGVCaWxsYm9hcmRTdGF0ZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvc3RhdGVzL1BhcnRpY2xlQmlsbGJvYXJkU3RhdGVcIik7XG5cbi8qKlxuICogQSBwYXJ0aWNsZSBhbmltYXRpb24gbm9kZSB0aGF0IGNvbnRyb2xzIHRoZSByb3RhdGlvbiBvZiBhIHBhcnRpY2xlIHRvIGFsd2F5cyBmYWNlIHRoZSBjYW1lcmEuXG4gKi9cbmNsYXNzIFBhcnRpY2xlQmlsbGJvYXJkTm9kZSBleHRlbmRzIFBhcnRpY2xlTm9kZUJhc2Vcbntcblx0LyoqIEBwcml2YXRlICovXG5cdHB1YmxpYyBfaUJpbGxib2FyZEF4aXM6VmVjdG9yM0Q7XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBuZXcgPGNvZGU+UGFydGljbGVCaWxsYm9hcmROb2RlPC9jb2RlPlxuXHQgKi9cblx0Y29uc3RydWN0b3IoYmlsbGJvYXJkQXhpczpWZWN0b3IzRCA9IG51bGwpXG5cdHtcblx0XHRzdXBlcihcIlBhcnRpY2xlQmlsbGJvYXJkXCIsIFBhcnRpY2xlUHJvcGVydGllc01vZGUuR0xPQkFMLCAwLCA0KTtcblxuXHRcdHRoaXMuX3BTdGF0ZUNsYXNzID0gUGFydGljbGVCaWxsYm9hcmRTdGF0ZTtcblxuXHRcdHRoaXMuX2lCaWxsYm9hcmRBeGlzID0gYmlsbGJvYXJkQXhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIGdldEFHQUxWZXJ0ZXhDb2RlKHNoYWRlck9iamVjdDpTaGFkZXJPYmplY3RCYXNlLCBhbmltYXRpb25SZWdpc3RlckNhY2hlOkFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUpOnN0cmluZ1xuXHR7XG5cdFx0dmFyIHJvdGF0aW9uTWF0cml4UmVnaXN0ZXI6U2hhZGVyUmVnaXN0ZXJFbGVtZW50ID0gYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5nZXRGcmVlVmVydGV4Q29uc3RhbnQoKTtcblx0XHRhbmltYXRpb25SZWdpc3RlckNhY2hlLnNldFJlZ2lzdGVySW5kZXgodGhpcywgUGFydGljbGVCaWxsYm9hcmRTdGF0ZS5NQVRSSVhfSU5ERVgsIHJvdGF0aW9uTWF0cml4UmVnaXN0ZXIuaW5kZXgpO1xuXHRcdGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuZ2V0RnJlZVZlcnRleENvbnN0YW50KCk7XG5cdFx0YW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5nZXRGcmVlVmVydGV4Q29uc3RhbnQoKTtcblx0XHRhbmltYXRpb25SZWdpc3RlckNhY2hlLmdldEZyZWVWZXJ0ZXhDb25zdGFudCgpO1xuXG5cdFx0dmFyIHRlbXA6U2hhZGVyUmVnaXN0ZXJFbGVtZW50ID0gYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5nZXRGcmVlVmVydGV4VmVjdG9yVGVtcCgpO1xuXG5cdFx0dmFyIGNvZGU6c3RyaW5nID0gXCJtMzMgXCIgKyB0ZW1wICsgXCIueHl6LFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5zY2FsZUFuZFJvdGF0ZVRhcmdldCArIFwiLFwiICsgcm90YXRpb25NYXRyaXhSZWdpc3RlciArIFwiXFxuXCIgK1xuXHRcdFx0XHRcdFx0ICBcIm1vdiBcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuc2NhbGVBbmRSb3RhdGVUYXJnZXQgKyBcIi54eXosXCIgKyB0ZW1wICsgXCJcXG5cIjtcblxuXHRcdHZhciBzaGFkZXJSZWdpc3RlckVsZW1lbnQ6U2hhZGVyUmVnaXN0ZXJFbGVtZW50O1xuXHRcdGZvciAodmFyIGk6bnVtYmVyIC8qdWludCovID0gMDsgaSA8IGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUucm90YXRpb25SZWdpc3RlcnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHNoYWRlclJlZ2lzdGVyRWxlbWVudCA9IGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUucm90YXRpb25SZWdpc3RlcnNbaV07XG5cdFx0XHRjb2RlICs9IFwibTMzIFwiICsgdGVtcCArIFwiLnh5eixcIiArIHNoYWRlclJlZ2lzdGVyRWxlbWVudCArIFwiLFwiICsgcm90YXRpb25NYXRyaXhSZWdpc3RlciArIFwiXFxuXCIgK1xuXHRcdFx0XHRcdFwibW92IFwiICsgc2hhZGVyUmVnaXN0ZXJFbGVtZW50ICsgXCIueHl6LFwiICsgc2hhZGVyUmVnaXN0ZXJFbGVtZW50ICsgXCJcXG5cIjtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29kZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIGdldEFuaW1hdGlvblN0YXRlKGFuaW1hdG9yOkFuaW1hdG9yQmFzZSk6UGFydGljbGVCaWxsYm9hcmRTdGF0ZVxuXHR7XG5cdFx0cmV0dXJuIDxQYXJ0aWNsZUJpbGxib2FyZFN0YXRlPiBhbmltYXRvci5nZXRBbmltYXRpb25TdGF0ZSh0aGlzKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIF9pUHJvY2Vzc0FuaW1hdGlvblNldHRpbmcocGFydGljbGVBbmltYXRpb25TZXQ6UGFydGljbGVBbmltYXRpb25TZXQpXG5cdHtcblx0XHRwYXJ0aWNsZUFuaW1hdGlvblNldC5oYXNCaWxsYm9hcmQgPSB0cnVlO1xuXHR9XG59XG5cbmV4cG9ydCA9IFBhcnRpY2xlQmlsbGJvYXJkTm9kZTsiXX0=