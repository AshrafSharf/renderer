var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Vector3D = require("awayjs-core/lib/geom/Vector3D");
var ShaderRegisterElement = require("awayjs-renderergl/lib/materials/compilation/ShaderRegisterElement");
var ParticlePropertiesMode = require("awayjs-renderergl/lib/animators/data/ParticlePropertiesMode");
var ParticleNodeBase = require("awayjs-renderergl/lib/animators/nodes/ParticleNodeBase");
var ParticleRotateToPositionState = require("awayjs-renderergl/lib/animators/states/ParticleRotateToPositionState");
/**
 * A particle animation node used to control the rotation of a particle to face to a position
 */
var ParticleRotateToPositionNode = (function (_super) {
    __extends(ParticleRotateToPositionNode, _super);
    /**
     * Creates a new <code>ParticleRotateToPositionNode</code>
     */
    function ParticleRotateToPositionNode(mode /*uint*/, position) {
        if (position === void 0) { position = null; }
        _super.call(this, "ParticleRotateToPosition", mode, 3, 3);
        this._pStateClass = ParticleRotateToPositionState;
        this._iPosition = position || new Vector3D();
    }
    /**
     * @inheritDoc
     */
    ParticleRotateToPositionNode.prototype.getAGALVertexCode = function (shaderObject, animationRegisterCache) {
        var positionAttribute = (this._pMode == ParticlePropertiesMode.GLOBAL) ? animationRegisterCache.getFreeVertexConstant() : animationRegisterCache.getFreeVertexAttribute();
        animationRegisterCache.setRegisterIndex(this, ParticleRotateToPositionState.POSITION_INDEX, positionAttribute.index);
        var code = "";
        var len = animationRegisterCache.rotationRegisters.length;
        var i /*int*/;
        if (animationRegisterCache.hasBillboard) {
            var temp1 = animationRegisterCache.getFreeVertexVectorTemp();
            animationRegisterCache.addVertexTempUsages(temp1, 1);
            var temp2 = animationRegisterCache.getFreeVertexVectorTemp();
            animationRegisterCache.addVertexTempUsages(temp2, 1);
            var temp3 = animationRegisterCache.getFreeVertexVectorTemp();
            var rotationMatrixRegister = animationRegisterCache.getFreeVertexConstant();
            animationRegisterCache.setRegisterIndex(this, ParticleRotateToPositionState.MATRIX_INDEX, rotationMatrixRegister.index);
            animationRegisterCache.getFreeVertexConstant();
            animationRegisterCache.getFreeVertexConstant();
            animationRegisterCache.getFreeVertexConstant();
            animationRegisterCache.removeVertexTempUsage(temp1);
            animationRegisterCache.removeVertexTempUsage(temp2);
            //process the position
            code += "sub " + temp1 + ".xyz," + positionAttribute + ".xyz," + animationRegisterCache.positionTarget + ".xyz\n";
            code += "m33 " + temp1 + ".xyz," + temp1 + ".xyz," + rotationMatrixRegister + "\n";
            code += "mov " + temp3 + "," + animationRegisterCache.vertexZeroConst + "\n";
            code += "mov " + temp3 + ".xy," + temp1 + ".xy\n";
            code += "nrm " + temp3 + ".xyz," + temp3 + ".xyz\n";
            //temp3.x=cos,temp3.y=sin
            //only process z axis
            code += "mov " + temp2 + "," + animationRegisterCache.vertexZeroConst + "\n";
            code += "mov " + temp2 + ".x," + temp3 + ".y\n";
            code += "mov " + temp2 + ".y," + temp3 + ".x\n";
            code += "mov " + temp1 + "," + animationRegisterCache.vertexZeroConst + "\n";
            code += "mov " + temp1 + ".x," + temp3 + ".x\n";
            code += "neg " + temp1 + ".y," + temp3 + ".y\n";
            code += "mov " + temp3 + "," + animationRegisterCache.vertexZeroConst + "\n";
            code += "mov " + temp3 + ".z," + animationRegisterCache.vertexOneConst + "\n";
            code += "m33 " + animationRegisterCache.scaleAndRotateTarget + ".xyz," + animationRegisterCache.scaleAndRotateTarget + ".xyz," + temp1 + "\n";
            for (i = 0; i < len; i++)
                code += "m33 " + animationRegisterCache.rotationRegisters[i] + ".xyz," + animationRegisterCache.rotationRegisters[i] + "," + temp1 + "\n";
        }
        else {
            var nrmDirection = animationRegisterCache.getFreeVertexVectorTemp();
            animationRegisterCache.addVertexTempUsages(nrmDirection, 1);
            var temp = animationRegisterCache.getFreeVertexVectorTemp();
            animationRegisterCache.addVertexTempUsages(temp, 1);
            var cos = new ShaderRegisterElement(temp.regName, temp.index, 0);
            var sin = new ShaderRegisterElement(temp.regName, temp.index, 1);
            var o_temp = new ShaderRegisterElement(temp.regName, temp.index, 2);
            var tempSingle = new ShaderRegisterElement(temp.regName, temp.index, 3);
            var R = animationRegisterCache.getFreeVertexVectorTemp();
            animationRegisterCache.addVertexTempUsages(R, 1);
            animationRegisterCache.removeVertexTempUsage(nrmDirection);
            animationRegisterCache.removeVertexTempUsage(temp);
            animationRegisterCache.removeVertexTempUsage(R);
            code += "sub " + nrmDirection + ".xyz," + positionAttribute + ".xyz," + animationRegisterCache.positionTarget + ".xyz\n";
            code += "nrm " + nrmDirection + ".xyz," + nrmDirection + ".xyz\n";
            code += "mov " + sin + "," + nrmDirection + ".y\n";
            code += "mul " + cos + "," + sin + "," + sin + "\n";
            code += "sub " + cos + "," + animationRegisterCache.vertexOneConst + "," + cos + "\n";
            code += "sqt " + cos + "," + cos + "\n";
            code += "mul " + R + ".x," + cos + "," + animationRegisterCache.scaleAndRotateTarget + ".y\n";
            code += "mul " + R + ".y," + sin + "," + animationRegisterCache.scaleAndRotateTarget + ".z\n";
            code += "mul " + R + ".z," + sin + "," + animationRegisterCache.scaleAndRotateTarget + ".y\n";
            code += "mul " + R + ".w," + cos + "," + animationRegisterCache.scaleAndRotateTarget + ".z\n";
            code += "sub " + animationRegisterCache.scaleAndRotateTarget + ".y," + R + ".x," + R + ".y\n";
            code += "add " + animationRegisterCache.scaleAndRotateTarget + ".z," + R + ".z," + R + ".w\n";
            code += "abs " + R + ".y," + nrmDirection + ".y\n";
            code += "sge " + R + ".z," + R + ".y," + animationRegisterCache.vertexOneConst + "\n";
            code += "mul " + R + ".x," + R + ".y," + nrmDirection + ".y\n";
            //judgu if nrmDirection=(0,1,0);
            code += "mov " + nrmDirection + ".y," + animationRegisterCache.vertexZeroConst + "\n";
            code += "dp3 " + sin + "," + nrmDirection + ".xyz," + nrmDirection + ".xyz\n";
            code += "sge " + tempSingle + "," + animationRegisterCache.vertexZeroConst + "," + sin + "\n";
            code += "mov " + nrmDirection + ".y," + animationRegisterCache.vertexZeroConst + "\n";
            code += "nrm " + nrmDirection + ".xyz," + nrmDirection + ".xyz\n";
            code += "sub " + sin + "," + animationRegisterCache.vertexOneConst + "," + tempSingle + "\n";
            code += "mul " + sin + "," + sin + "," + nrmDirection + ".x\n";
            code += "mov " + cos + "," + nrmDirection + ".z\n";
            code += "neg " + cos + "," + cos + "\n";
            code += "sub " + o_temp + "," + animationRegisterCache.vertexOneConst + "," + cos + "\n";
            code += "mul " + o_temp + "," + R + ".x," + tempSingle + "\n";
            code += "add " + cos + "," + cos + "," + o_temp + "\n";
            code += "mul " + R + ".x," + cos + "," + animationRegisterCache.scaleAndRotateTarget + ".x\n";
            code += "mul " + R + ".y," + sin + "," + animationRegisterCache.scaleAndRotateTarget + ".z\n";
            code += "mul " + R + ".z," + sin + "," + animationRegisterCache.scaleAndRotateTarget + ".x\n";
            code += "mul " + R + ".w," + cos + "," + animationRegisterCache.scaleAndRotateTarget + ".z\n";
            code += "sub " + animationRegisterCache.scaleAndRotateTarget + ".x," + R + ".x," + R + ".y\n";
            code += "add " + animationRegisterCache.scaleAndRotateTarget + ".z," + R + ".z," + R + ".w\n";
            for (i = 0; i < len; i++) {
                //just repeat the calculate above
                //because of the limited registers, no need to optimise
                code += "sub " + nrmDirection + ".xyz," + positionAttribute + ".xyz," + animationRegisterCache.positionTarget + ".xyz\n";
                code += "nrm " + nrmDirection + ".xyz," + nrmDirection + ".xyz\n";
                code += "mov " + sin + "," + nrmDirection + ".y\n";
                code += "mul " + cos + "," + sin + "," + sin + "\n";
                code += "sub " + cos + "," + animationRegisterCache.vertexOneConst + "," + cos + "\n";
                code += "sqt " + cos + "," + cos + "\n";
                code += "mul " + R + ".x," + cos + "," + animationRegisterCache.rotationRegisters[i] + ".y\n";
                code += "mul " + R + ".y," + sin + "," + animationRegisterCache.rotationRegisters[i] + ".z\n";
                code += "mul " + R + ".z," + sin + "," + animationRegisterCache.rotationRegisters[i] + ".y\n";
                code += "mul " + R + ".w," + cos + "," + animationRegisterCache.rotationRegisters[i] + ".z\n";
                code += "sub " + animationRegisterCache.rotationRegisters[i] + ".y," + R + ".x," + R + ".y\n";
                code += "add " + animationRegisterCache.rotationRegisters[i] + ".z," + R + ".z," + R + ".w\n";
                code += "abs " + R + ".y," + nrmDirection + ".y\n";
                code += "sge " + R + ".z," + R + ".y," + animationRegisterCache.vertexOneConst + "\n";
                code += "mul " + R + ".x," + R + ".y," + nrmDirection + ".y\n";
                code += "mov " + nrmDirection + ".y," + animationRegisterCache.vertexZeroConst + "\n";
                code += "dp3 " + sin + "," + nrmDirection + ".xyz," + nrmDirection + ".xyz\n";
                code += "sge " + tempSingle + "," + animationRegisterCache.vertexZeroConst + "," + sin + "\n";
                code += "mov " + nrmDirection + ".y," + animationRegisterCache.vertexZeroConst + "\n";
                code += "nrm " + nrmDirection + ".xyz," + nrmDirection + ".xyz\n";
                code += "sub " + sin + "," + animationRegisterCache.vertexOneConst + "," + tempSingle + "\n";
                code += "mul " + sin + "," + sin + "," + nrmDirection + ".x\n";
                code += "mov " + cos + "," + nrmDirection + ".z\n";
                code += "neg " + cos + "," + cos + "\n";
                code += "sub " + o_temp + "," + animationRegisterCache.vertexOneConst + "," + cos + "\n";
                code += "mul " + o_temp + "," + R + ".x," + tempSingle + "\n";
                code += "add " + cos + "," + cos + "," + o_temp + "\n";
                code += "mul " + R + ".x," + cos + "," + animationRegisterCache.rotationRegisters[i] + ".x\n";
                code += "mul " + R + ".y," + sin + "," + animationRegisterCache.rotationRegisters[i] + ".z\n";
                code += "mul " + R + ".z," + sin + "," + animationRegisterCache.rotationRegisters[i] + ".x\n";
                code += "mul " + R + ".w," + cos + "," + animationRegisterCache.rotationRegisters[i] + ".z\n";
                code += "sub " + animationRegisterCache.rotationRegisters[i] + ".x," + R + ".x," + R + ".y\n";
                code += "add " + animationRegisterCache.rotationRegisters[i] + ".z," + R + ".z," + R + ".w\n";
            }
        }
        return code;
    };
    /**
     * @inheritDoc
     */
    ParticleRotateToPositionNode.prototype.getAnimationState = function (animator) {
        return animator.getAnimationState(this);
    };
    /**
     * @inheritDoc
     */
    ParticleRotateToPositionNode.prototype._iGeneratePropertyOfOneParticle = function (param) {
        var offset = param[ParticleRotateToPositionNode.POSITION_VECTOR3D];
        if (!offset)
            throw (new Error("there is no " + ParticleRotateToPositionNode.POSITION_VECTOR3D + " in param!"));
        this._pOneData[0] = offset.x;
        this._pOneData[1] = offset.y;
        this._pOneData[2] = offset.z;
    };
    /**
     * Reference for the position the particle will rotate to face for a single particle (when in local property mode).
     * Expects a <code>Vector3D</code> object representing the position that the particle must face.
     */
    ParticleRotateToPositionNode.POSITION_VECTOR3D = "RotateToPositionVector3D";
    return ParticleRotateToPositionNode;
})(ParticleNodeBase);
module.exports = ParticleRotateToPositionNode;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvbm9kZXMvcGFydGljbGVyb3RhdGV0b3Bvc2l0aW9ubm9kZS50cyJdLCJuYW1lcyI6WyJQYXJ0aWNsZVJvdGF0ZVRvUG9zaXRpb25Ob2RlIiwiUGFydGljbGVSb3RhdGVUb1Bvc2l0aW9uTm9kZS5jb25zdHJ1Y3RvciIsIlBhcnRpY2xlUm90YXRlVG9Qb3NpdGlvbk5vZGUuZ2V0QUdBTFZlcnRleENvZGUiLCJQYXJ0aWNsZVJvdGF0ZVRvUG9zaXRpb25Ob2RlLmdldEFuaW1hdGlvblN0YXRlIiwiUGFydGljbGVSb3RhdGVUb1Bvc2l0aW9uTm9kZS5faUdlbmVyYXRlUHJvcGVydHlPZk9uZVBhcnRpY2xlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFPLFFBQVEsV0FBaUIsK0JBQStCLENBQUMsQ0FBQztBQUtqRSxJQUFPLHFCQUFxQixXQUFhLG1FQUFtRSxDQUFDLENBQUM7QUFHOUcsSUFBTyxzQkFBc0IsV0FBYSw2REFBNkQsQ0FBQyxDQUFDO0FBQ3pHLElBQU8sZ0JBQWdCLFdBQWUsd0RBQXdELENBQUMsQ0FBQztBQUNoRyxJQUFPLDZCQUE2QixXQUFXLHNFQUFzRSxDQUFDLENBQUM7QUFFdkgsQUFHQTs7R0FERztJQUNHLDRCQUE0QjtJQUFTQSxVQUFyQ0EsNEJBQTRCQSxVQUF5QkE7SUFXMURBOztPQUVHQTtJQUNIQSxTQWRLQSw0QkFBNEJBLENBY3JCQSxJQUFJQSxDQUFRQSxRQUFEQSxBQUFTQSxFQUFFQSxRQUF3QkE7UUFBeEJDLHdCQUF3QkEsR0FBeEJBLGVBQXdCQTtRQUV6REEsa0JBQU1BLDBCQUEwQkEsRUFBRUEsSUFBSUEsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFOUNBLElBQUlBLENBQUNBLFlBQVlBLEdBQUdBLDZCQUE2QkEsQ0FBQ0E7UUFFbERBLElBQUlBLENBQUNBLFVBQVVBLEdBQUdBLFFBQVFBLElBQUlBLElBQUlBLFFBQVFBLEVBQUVBLENB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R0FBR0EsS0FBS0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0Esc0JBQXNCQSxDQUFDQSxvQkFBb0JBLEdBQUdBLE1BQU1BLENBQUNBO1lBQzlGQSxJQUFJQSxJQUFJQSxNQUFNQSxHQUFHQSxDQUFDQSxHQUFHQSxLQUFLQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxzQkFBc0JBLENBQUNBLG9CQUFvQkEsR0FBR0EsTUFBTUEsQ0FBQ0E7WUFDOUZBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLENBQUNBLEdBQUdBLEtBQUtBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLHNCQUFzQkEsQ0FBQ0Esb0JBQW9CQSxHQUFHQSxNQUFNQSxDQUFDQTtZQUM5RkEsSUFBSUEsSUFBSUEsTUFBTUEsR0FBR0EsQ0FBQ0EsR0FBR0EsS0FBS0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0Esc0JBQXNCQSxDQUFDQSxvQkFBb0JBLEdBQUdBLE1BQU1BLENBQUNBO1lBRTlGQSxJQUFJQSxJQUFJQSxNQUFNQSxHQUFHQSxzQkFBc0JBLENBQUNBLG9CQUFvQkEsR0FBR0EsS0FBS0EsR0FBR0EsQ0FBQ0EsR0FBR0EsS0FBS0EsR0FBR0EsQ0FBQ0EsR0FBR0EsTUFBTUEsQ0FBQ0E7WUFDOUZBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLHNCQUFzQkEsQ0FBQ0Esb0JBQW9CQSxHQUFHQSxLQUFLQSxHQUFHQSxDQUFDQSxHQUFHQSxLQUFLQSxHQUFHQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQTtZQUU5RkEsSUFBSUEsSUFBSUEsTUFBTUEsR0FBR0EsQ0FBQ0EsR0FBR0EsS0FBS0EsR0FBR0EsWUFBWUEsR0FBR0EsTUFBTUEsQ0FBQ0E7WUFDbkRBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLENBQUNBLEdBQUdBLEtBQUtBLEdBQUdBLENBQUNBLEdBQUdBLEtBQUtBLEdBQUdBLHNCQUFzQkEsQ0FBQ0EsY0FBY0EsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFDdEZBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLENBQUNBLEdBQUdBLEtBQUtBLEdBQUdBLENBQUNBLEdBQUdBLEtBQUtBLEdBQUdBLFlBQVlBLEdBQUdBLE1BQU1BLENBQUNBO1lBRS9EQSxBQUNBQSxnQ0FEZ0NBO1lBQ2hDQSxJQUFJQSxJQUFJQSxNQUFNQSxHQUFHQSxZQUFZQSxHQUFHQSxLQUFLQSxHQUFHQSxzQkFBc0JBLENBQUNBLGVBQWVBLEdBQUdBLElBQUlBLENBQUNBO1lBQ3RGQSxJQUFJQSxJQUFJQSxNQUFNQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxZQUFZQSxHQUFHQSxPQUFPQSxHQUFHQSxZQUFZQSxHQUFHQSxRQUFRQSxDQUFDQTtZQUM5RUEsSUFBSUEsSUFBSUEsTUFBTUEsR0FBR0EsVUFBVUEsR0FBR0EsR0FBR0EsR0FBR0Esc0JBQXNCQSxDQUFDQSxlQUFlQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUU5RkEsSUFBSUEsSUFBSUEsTUFBTUEsR0FBR0EsWUFBWUEsR0FBR0EsS0FBS0EsR0FBR0Esc0JBQXNCQSxDQUFDQSxlQUFlQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUN0RkEsSUFBSUEsSUFBSUEsTUFBTUEsR0FBR0EsWUFBWUEsR0FBR0EsT0FBT0EsR0FBR0EsWUFBWUEsR0FBR0EsUUFBUUEsQ0FBQ0E7WUFFbEVBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLHNCQUFzQkEsQ0FBQ0EsY0FBY0EsR0FBR0EsR0FBR0EsR0FBR0EsVUFBVUEsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFDN0ZBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLFlBQVlBLEdBQUdBLE1BQU1BLENBQUNBO1lBRS9EQSxJQUFJQSxJQUFJQSxNQUFNQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxZQUFZQSxHQUFHQSxNQUFNQSxDQUFDQTtZQUNuREEsSUFBSUEsSUFBSUEsTUFBTUEsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFDeENBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLE1BQU1BLEdBQUdBLEdBQUdBLEdBQUdBLHNCQUFzQkEsQ0FBQ0EsY0FBY0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFDekZBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLE1BQU1BLEdBQUdBLEdBQUdBLEdBQUdBLENBQUNBLEdBQUdBLEtBQUtBLEdBQUdBLFVBQVVBLEdBQUdBLElBQUlBLENBQUNBO1lBQzlEQSxJQUFJQSxJQUFJQSxNQUFNQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUV2REEsSUFBSUEsSUFBSUEsTUFBTUEsR0FBR0EsQ0FBQ0EsR0FBR0EsS0FBS0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0Esc0JBQXNCQSxDQUFDQSxvQkFBb0JBLEdBQUdBLE1BQU1BLENBQUNBO1lBQzlGQSxJQUFJQSxJQUFJQSxNQUFNQSxHQUFHQSxDQUFDQSxHQUFHQSxLQUFLQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxzQkFBc0JBLENBQUNBLG9CQUFvQkEsR0FBR0EsTUFBTUEsQ0FBQ0E7WUFDOUZBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLENBQUNBLEdBQUdBLEtBQUtBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLHNCQUFzQkEsQ0FBQ0Esb0JBQW9CQSxHQUFHQSxNQUFNQSxDQUFDQTtZQUM5RkEsSUFBSUEsSUFBSUEsTUFBTUEsR0FBR0EsQ0FBQ0EsR0FBR0EsS0FBS0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0Esc0JBQXNCQSxDQUFDQSxvQkFBb0JBLEdBQUdBLE1BQU1BLENBQUNBO1lBRTlGQSxJQUFJQSxJQUFJQSxNQUFNQSxHQUFHQSxzQkFBc0JBLENBQUNBLG9CQUFvQkEsR0FBR0EsS0FBS0EsR0FBR0EsQ0FBQ0EsR0FBR0EsS0FBS0EsR0FBR0EsQ0FBQ0EsR0FBR0EsTUFBTUEsQ0FBQ0E7WUFDOUZBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLHNCQUFzQkEsQ0FBQ0Esb0JBQW9CQSxHQUFHQSxLQUFLQSxHQUFHQSxDQUFDQSxHQUFHQSxLQUFLQSxHQUFHQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQTtZQUU5RkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsR0FBR0EsRUFBRUEsQ0FBQ0EsRUFBRUEsRUFBRUEsQ0FBQ0E7Z0JBQzFCQSxBQUVBQSxpQ0FGaUNBO2dCQUNqQ0EsdURBQXVEQTtnQkFDdkRBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLFlBQVlBLEdBQUdBLE9BQU9BLEdBQUdBLGlCQUFpQkEsR0FBR0EsT0FBT0EsR0FBR0Esc0JBQXNCQSxDQUFDQSxjQUFjQSxHQUFHQSxRQUFRQSxDQUFDQTtnQkFDekhBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLFlBQVlBLEdBQUdBLE9BQU9BLEdBQUdBLFlBQVlBLEdBQUdBLFFBQVFBLENBQUNBO2dCQUNsRUEsSUFBSUEsSUFBSUEsTUFBTUEsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsWUFBWUEsR0FBR0EsTUFBTUEsQ0FBQ0E7Z0JBQ25EQSxJQUFJQSxJQUFJQSxNQUFNQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxJQUFJQSxDQUFDQTtnQkFDcERBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLHNCQUFzQkEsQ0FBQ0EsY0FBY0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsSUFBSUEsQ0FBQ0E7Z0JBQ3RGQSxJQUFJQSxJQUFJQSxNQUFNQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxJQUFJQSxDQUFDQTtnQkFDeENBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLENBQUNBLEdBQUdBLEtBQUtBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLHNCQUFzQkEsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQTtnQkFDOUZBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLENBQUNBLEdBQUdBLEtBQUtBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLHNCQUFzQkEsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQTtnQkFDOUZBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLENBQUNBLEdBQUdBLEtBQUtBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLHNCQUFzQkEsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQTtnQkFDOUZBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLENBQUNBLEdBQUdBLEtBQUtBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLHNCQUFzQkEsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQTtnQkFDOUZBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLHNCQUFzQkEsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxLQUFLQSxHQUFHQSxDQUFDQSxHQUFHQSxLQUFLQSxHQUFHQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQTtnQkFDOUZBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLHNCQUFzQkEsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxLQUFLQSxHQUFHQSxDQUFDQSxHQUFHQSxLQUFLQSxHQUFHQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQTtnQkFDOUZBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLENBQUNBLEdBQUdBLEtBQUtBLEdBQUdBLFlBQVlBLEdBQUdBLE1BQU1BLENBQUNBO2dCQUNuREEsSUFBSUEsSUFBSUEsTUFBTUEsR0FBR0EsQ0FBQ0EsR0FBR0EsS0FBS0EsR0FBR0EsQ0FBQ0EsR0FBR0EsS0FBS0EsR0FBR0Esc0JBQXNCQSxDQUFDQSxjQUFjQSxHQUFHQSxJQUFJQSxDQUFDQTtnQkFDdEZBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLENBQUNBLEdBQUdBLEtBQUtBLEdBQUdBLENBQUNBLEdBQUdBLEtBQUtBLEdBQUdBLFlBQVlBLEdBQUdBLE1BQU1BLENBQUNBO2dCQUMvREEsSUFBSUEsSUFBSUEsTUFBTUEsR0FBR0EsWUFBWUEsR0FBR0EsS0FBS0EsR0FBR0Esc0JBQXNCQSxDQUFDQSxlQUFlQSxHQUFHQSxJQUFJQSxDQUFDQTtnQkFDdEZBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLFlBQVlBLEdBQUdBLE9BQU9BLEdBQUdBLFlBQVlBLEdBQUdBLFFBQVFBLENBQUNBO2dCQUM5RUEsSUFBSUEsSUFBSUEsTUFBTUEsR0FBR0EsVUFBVUEsR0FBR0EsR0FBR0EsR0FBR0Esc0JBQXNCQSxDQUFDQSxlQUFlQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxJQUFJQSxDQUFDQTtnQkFDOUZBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLFlBQVlBLEdBQUdBLEtBQUtBLEdBQUdBLHNCQUFzQkEsQ0FBQ0EsZUFBZUEsR0FBR0EsSUFBSUEsQ0FBQ0E7Z0JBQ3RGQSxJQUFJQSxJQUFJQSxNQUFNQSxHQUFHQSxZQUFZQSxHQUFHQSxPQUFPQSxHQUFHQSxZQUFZQSxHQUFHQSxRQUFRQSxDQUFDQTtnQkFDbEVBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLHNCQUFzQkEsQ0FBQ0EsY0FBY0EsR0FBR0EsR0FBR0EsR0FBR0EsVUFBVUEsR0FBR0EsSUFBSUEsQ0FBQ0E7Z0JBQzdGQSxJQUFJQSxJQUFJQSxNQUFNQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxZQUFZQSxHQUFHQSxNQUFNQSxDQUFDQTtnQkFDL0RBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLFlBQVlBLEdBQUdBLE1BQU1BLENBQUNBO2dCQUNuREEsSUFBSUEsSUFBSUEsTUFBTUEsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsSUFBSUEsQ0FBQ0E7Z0JBQ3hDQSxJQUFJQSxJQUFJQSxNQUFNQSxHQUFHQSxNQUFNQSxHQUFHQSxHQUFHQSxHQUFHQSxzQkFBc0JBLENBQUNBLGNBQWNBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLElBQUlBLENBQUNBO2dCQUN6RkEsSUFBSUEsSUFBSUEsTUFBTUEsR0FBR0EsTUFBTUEsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0EsR0FBR0EsS0FBS0EsR0FBR0EsVUFBVUEsR0FBR0EsSUFBSUEsQ0FBQ0E7Z0JBQzlEQSxJQUFJQSxJQUFJQSxNQUFNQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxHQUFHQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQTtnQkFDdkRBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLENBQUNBLEdBQUdBLEtBQUtBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLHNCQUFzQkEsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQTtnQkFDOUZBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLENBQUNBLEdBQUdBLEtBQUtBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLHNCQUFzQkEsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQTtnQkFDOUZBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLENBQUNBLEdBQUdBLEtBQUtBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLHNCQUFzQkEsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQTtnQkFDOUZBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLENBQUNBLEdBQUdBLEtBQUtBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLHNCQUFzQkEsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQTtnQkFDOUZBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLHNCQUFzQkEsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxLQUFLQSxHQUFHQSxDQUFDQSxHQUFHQSxLQUFLQSxHQUFHQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQTtnQkFDOUZBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLHNCQUFzQkEsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxLQUFLQSxHQUFHQSxDQUFDQSxHQUFHQSxLQUFLQSxHQUFHQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQTtZQUMvRkEsQ0FBQ0E7UUFDRkEsQ0FBQ0E7UUFDREEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7SUFDYkEsQ0FBQ0E7SUFFREY7O09BRUdBO0lBQ0lBLHdEQUFpQkEsR0FBeEJBLFVBQXlCQSxRQUFxQkE7UUFFN0NHLE1BQU1BLENBQWlDQSxRQUFRQSxDQUFDQSxpQkFBaUJBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO0lBQ3pFQSxDQUFDQTtJQUVESDs7T0FFR0E7SUFDSUEsc0VBQStCQSxHQUF0Q0EsVUFBdUNBLEtBQXdCQTtRQUU5REksSUFBSUEsTUFBTUEsR0FBWUEsS0FBS0EsQ0FBQ0EsNEJBQTRCQSxDQUFDQSxpQkFBaUJBLENBQUNBLENBQUNBO1FBQzVFQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQTtZQUNYQSxNQUFLQSxDQUFDQSxJQUFJQSxLQUFLQSxDQUFDQSxjQUFjQSxHQUFHQSw0QkFBNEJBLENBQUNBLGlCQUFpQkEsR0FBR0EsWUFBWUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFbEdBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBO1FBQzdCQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUM3QkEsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDOUJBLENBQUNBO0lBOUxESjs7O09BR0dBO0lBQ1dBLDhDQUFpQkEsR0FBVUEsMEJBQTBCQSxDQUFDQTtJQTJMckVBLG1DQUFDQTtBQUFEQSxDQXBNQSxBQW9NQ0EsRUFwTTBDLGdCQUFnQixFQW9NMUQ7QUFFRCxBQUFzQyxpQkFBN0IsNEJBQTRCLENBQUMiLCJmaWxlIjoiYW5pbWF0b3JzL25vZGVzL1BhcnRpY2xlUm90YXRlVG9Qb3NpdGlvbk5vZGUuanMiLCJzb3VyY2VSb290IjoiLi4vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZlY3RvcjNEXHRcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9WZWN0b3IzRFwiKTtcblxuaW1wb3J0IEFuaW1hdG9yQmFzZVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvQW5pbWF0b3JCYXNlXCIpO1xuaW1wb3J0IEFuaW1hdGlvblJlZ2lzdGVyQ2FjaGVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYW5pbWF0b3JzL2RhdGEvQW5pbWF0aW9uUmVnaXN0ZXJDYWNoZVwiKTtcbmltcG9ydCBTaGFkZXJPYmplY3RCYXNlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9tYXRlcmlhbHMvY29tcGlsYXRpb24vU2hhZGVyT2JqZWN0QmFzZVwiKTtcbmltcG9ydCBTaGFkZXJSZWdpc3RlckVsZW1lbnRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvbWF0ZXJpYWxzL2NvbXBpbGF0aW9uL1NoYWRlclJlZ2lzdGVyRWxlbWVudFwiKTtcblxuaW1wb3J0IFBhcnRpY2xlUHJvcGVydGllc1x0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9kYXRhL1BhcnRpY2xlUHJvcGVydGllc1wiKTtcbmltcG9ydCBQYXJ0aWNsZVByb3BlcnRpZXNNb2RlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9kYXRhL1BhcnRpY2xlUHJvcGVydGllc01vZGVcIik7XG5pbXBvcnQgUGFydGljbGVOb2RlQmFzZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYW5pbWF0b3JzL25vZGVzL1BhcnRpY2xlTm9kZUJhc2VcIik7XG5pbXBvcnQgUGFydGljbGVSb3RhdGVUb1Bvc2l0aW9uU3RhdGVcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvc3RhdGVzL1BhcnRpY2xlUm90YXRlVG9Qb3NpdGlvblN0YXRlXCIpO1xuXG4vKipcbiAqIEEgcGFydGljbGUgYW5pbWF0aW9uIG5vZGUgdXNlZCB0byBjb250cm9sIHRoZSByb3RhdGlvbiBvZiBhIHBhcnRpY2xlIHRvIGZhY2UgdG8gYSBwb3NpdGlvblxuICovXG5jbGFzcyBQYXJ0aWNsZVJvdGF0ZVRvUG9zaXRpb25Ob2RlIGV4dGVuZHMgUGFydGljbGVOb2RlQmFzZVxue1xuXHQvKiogQHByaXZhdGUgKi9cblx0cHVibGljIF9pUG9zaXRpb246VmVjdG9yM0Q7XG5cblx0LyoqXG5cdCAqIFJlZmVyZW5jZSBmb3IgdGhlIHBvc2l0aW9uIHRoZSBwYXJ0aWNsZSB3aWxsIHJvdGF0ZSB0byBmYWNlIGZvciBhIHNpbmdsZSBwYXJ0aWNsZSAod2hlbiBpbiBsb2NhbCBwcm9wZXJ0eSBtb2RlKS5cblx0ICogRXhwZWN0cyBhIDxjb2RlPlZlY3RvcjNEPC9jb2RlPiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBwb3NpdGlvbiB0aGF0IHRoZSBwYXJ0aWNsZSBtdXN0IGZhY2UuXG5cdCAqL1xuXHRwdWJsaWMgc3RhdGljIFBPU0lUSU9OX1ZFQ1RPUjNEOnN0cmluZyA9IFwiUm90YXRlVG9Qb3NpdGlvblZlY3RvcjNEXCI7XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBuZXcgPGNvZGU+UGFydGljbGVSb3RhdGVUb1Bvc2l0aW9uTm9kZTwvY29kZT5cblx0ICovXG5cdGNvbnN0cnVjdG9yKG1vZGU6bnVtYmVyIC8qdWludCovLCBwb3NpdGlvbjpWZWN0b3IzRCA9IG51bGwpXG5cdHtcblx0XHRzdXBlcihcIlBhcnRpY2xlUm90YXRlVG9Qb3NpdGlvblwiLCBtb2RlLCAzLCAzKTtcblxuXHRcdHRoaXMuX3BTdGF0ZUNsYXNzID0gUGFydGljbGVSb3RhdGVUb1Bvc2l0aW9uU3RhdGU7XG5cblx0XHR0aGlzLl9pUG9zaXRpb24gPSBwb3NpdGlvbiB8fCBuZXcgVmVjdG9yM0QoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIGdldEFHQUxWZXJ0ZXhDb2RlKHNoYWRlck9iamVjdDpTaGFkZXJPYmplY3RCYXNlLCBhbmltYXRpb25SZWdpc3RlckNhY2hlOkFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUpOnN0cmluZ1xuXHR7XG5cdFx0dmFyIHBvc2l0aW9uQXR0cmlidXRlOlNoYWRlclJlZ2lzdGVyRWxlbWVudCA9ICh0aGlzLl9wTW9kZSA9PSBQYXJ0aWNsZVByb3BlcnRpZXNNb2RlLkdMT0JBTCk/IGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuZ2V0RnJlZVZlcnRleENvbnN0YW50KCkgOiBhbmltYXRpb25SZWdpc3RlckNhY2hlLmdldEZyZWVWZXJ0ZXhBdHRyaWJ1dGUoKTtcblx0XHRhbmltYXRpb25SZWdpc3RlckNhY2hlLnNldFJlZ2lzdGVySW5kZXgodGhpcywgUGFydGljbGVSb3RhdGVUb1Bvc2l0aW9uU3RhdGUuUE9TSVRJT05fSU5ERVgsIHBvc2l0aW9uQXR0cmlidXRlLmluZGV4KTtcblxuXHRcdHZhciBjb2RlOnN0cmluZyA9IFwiXCI7XG5cdFx0dmFyIGxlbjpudW1iZXIgLyppbnQqLyA9IGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUucm90YXRpb25SZWdpc3RlcnMubGVuZ3RoO1xuXHRcdHZhciBpOm51bWJlciAvKmludCovO1xuXHRcdGlmIChhbmltYXRpb25SZWdpc3RlckNhY2hlLmhhc0JpbGxib2FyZCkge1xuXHRcdFx0dmFyIHRlbXAxOlNoYWRlclJlZ2lzdGVyRWxlbWVudCA9IGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuZ2V0RnJlZVZlcnRleFZlY3RvclRlbXAoKTtcblx0XHRcdGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuYWRkVmVydGV4VGVtcFVzYWdlcyh0ZW1wMSwgMSk7XG5cdFx0XHR2YXIgdGVtcDI6U2hhZGVyUmVnaXN0ZXJFbGVtZW50ID0gYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5nZXRGcmVlVmVydGV4VmVjdG9yVGVtcCgpO1xuXHRcdFx0YW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5hZGRWZXJ0ZXhUZW1wVXNhZ2VzKHRlbXAyLCAxKTtcblx0XHRcdHZhciB0ZW1wMzpTaGFkZXJSZWdpc3RlckVsZW1lbnQgPSBhbmltYXRpb25SZWdpc3RlckNhY2hlLmdldEZyZWVWZXJ0ZXhWZWN0b3JUZW1wKCk7XG5cblx0XHRcdHZhciByb3RhdGlvbk1hdHJpeFJlZ2lzdGVyOlNoYWRlclJlZ2lzdGVyRWxlbWVudCA9IGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuZ2V0RnJlZVZlcnRleENvbnN0YW50KCk7XG5cdFx0XHRhbmltYXRpb25SZWdpc3RlckNhY2hlLnNldFJlZ2lzdGVySW5kZXgodGhpcywgUGFydGljbGVSb3RhdGVUb1Bvc2l0aW9uU3RhdGUuTUFUUklYX0lOREVYLCByb3RhdGlvbk1hdHJpeFJlZ2lzdGVyLmluZGV4KTtcblx0XHRcdGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuZ2V0RnJlZVZlcnRleENvbnN0YW50KCk7XG5cdFx0XHRhbmltYXRpb25SZWdpc3RlckNhY2hlLmdldEZyZWVWZXJ0ZXhDb25zdGFudCgpO1xuXHRcdFx0YW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5nZXRGcmVlVmVydGV4Q29uc3RhbnQoKTtcblxuXHRcdFx0YW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5yZW1vdmVWZXJ0ZXhUZW1wVXNhZ2UodGVtcDEpO1xuXHRcdFx0YW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5yZW1vdmVWZXJ0ZXhUZW1wVXNhZ2UodGVtcDIpO1xuXG5cdFx0XHQvL3Byb2Nlc3MgdGhlIHBvc2l0aW9uXG5cdFx0XHRjb2RlICs9IFwic3ViIFwiICsgdGVtcDEgKyBcIi54eXosXCIgKyBwb3NpdGlvbkF0dHJpYnV0ZSArIFwiLnh5eixcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUucG9zaXRpb25UYXJnZXQgKyBcIi54eXpcXG5cIjtcblx0XHRcdGNvZGUgKz0gXCJtMzMgXCIgKyB0ZW1wMSArIFwiLnh5eixcIiArIHRlbXAxICsgXCIueHl6LFwiICsgcm90YXRpb25NYXRyaXhSZWdpc3RlciArIFwiXFxuXCI7XG5cblx0XHRcdGNvZGUgKz0gXCJtb3YgXCIgKyB0ZW1wMyArIFwiLFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS52ZXJ0ZXhaZXJvQ29uc3QgKyBcIlxcblwiO1xuXHRcdFx0Y29kZSArPSBcIm1vdiBcIiArIHRlbXAzICsgXCIueHksXCIgKyB0ZW1wMSArIFwiLnh5XFxuXCI7XG5cdFx0XHRjb2RlICs9IFwibnJtIFwiICsgdGVtcDMgKyBcIi54eXosXCIgKyB0ZW1wMyArIFwiLnh5elxcblwiO1xuXG5cdFx0XHQvL3RlbXAzLng9Y29zLHRlbXAzLnk9c2luXG5cdFx0XHQvL29ubHkgcHJvY2VzcyB6IGF4aXNcblx0XHRcdGNvZGUgKz0gXCJtb3YgXCIgKyB0ZW1wMiArIFwiLFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS52ZXJ0ZXhaZXJvQ29uc3QgKyBcIlxcblwiO1xuXHRcdFx0Y29kZSArPSBcIm1vdiBcIiArIHRlbXAyICsgXCIueCxcIiArIHRlbXAzICsgXCIueVxcblwiO1xuXHRcdFx0Y29kZSArPSBcIm1vdiBcIiArIHRlbXAyICsgXCIueSxcIiArIHRlbXAzICsgXCIueFxcblwiO1xuXHRcdFx0Y29kZSArPSBcIm1vdiBcIiArIHRlbXAxICsgXCIsXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnZlcnRleFplcm9Db25zdCArIFwiXFxuXCI7XG5cdFx0XHRjb2RlICs9IFwibW92IFwiICsgdGVtcDEgKyBcIi54LFwiICsgdGVtcDMgKyBcIi54XFxuXCI7XG5cdFx0XHRjb2RlICs9IFwibmVnIFwiICsgdGVtcDEgKyBcIi55LFwiICsgdGVtcDMgKyBcIi55XFxuXCI7XG5cdFx0XHRjb2RlICs9IFwibW92IFwiICsgdGVtcDMgKyBcIixcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUudmVydGV4WmVyb0NvbnN0ICsgXCJcXG5cIjtcblx0XHRcdGNvZGUgKz0gXCJtb3YgXCIgKyB0ZW1wMyArIFwiLnosXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnZlcnRleE9uZUNvbnN0ICsgXCJcXG5cIjtcblx0XHRcdGNvZGUgKz0gXCJtMzMgXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnNjYWxlQW5kUm90YXRlVGFyZ2V0ICsgXCIueHl6LFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5zY2FsZUFuZFJvdGF0ZVRhcmdldCArIFwiLnh5eixcIiArIHRlbXAxICsgXCJcXG5cIjtcblx0XHRcdGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKylcblx0XHRcdFx0Y29kZSArPSBcIm0zMyBcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUucm90YXRpb25SZWdpc3RlcnNbaV0gKyBcIi54eXosXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnJvdGF0aW9uUmVnaXN0ZXJzW2ldICsgXCIsXCIgKyB0ZW1wMSArIFwiXFxuXCI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBucm1EaXJlY3Rpb246U2hhZGVyUmVnaXN0ZXJFbGVtZW50ID0gYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5nZXRGcmVlVmVydGV4VmVjdG9yVGVtcCgpO1xuXHRcdFx0YW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5hZGRWZXJ0ZXhUZW1wVXNhZ2VzKG5ybURpcmVjdGlvbiwgMSk7XG5cblx0XHRcdHZhciB0ZW1wOlNoYWRlclJlZ2lzdGVyRWxlbWVudCA9IGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuZ2V0RnJlZVZlcnRleFZlY3RvclRlbXAoKTtcblx0XHRcdGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuYWRkVmVydGV4VGVtcFVzYWdlcyh0ZW1wLCAxKTtcblx0XHRcdHZhciBjb3M6U2hhZGVyUmVnaXN0ZXJFbGVtZW50ID0gbmV3IFNoYWRlclJlZ2lzdGVyRWxlbWVudCh0ZW1wLnJlZ05hbWUsIHRlbXAuaW5kZXgsIDApO1xuXHRcdFx0dmFyIHNpbjpTaGFkZXJSZWdpc3RlckVsZW1lbnQgPSBuZXcgU2hhZGVyUmVnaXN0ZXJFbGVtZW50KHRlbXAucmVnTmFtZSwgdGVtcC5pbmRleCwgMSk7XG5cdFx0XHR2YXIgb190ZW1wOlNoYWRlclJlZ2lzdGVyRWxlbWVudCA9IG5ldyBTaGFkZXJSZWdpc3RlckVsZW1lbnQodGVtcC5yZWdOYW1lLCB0ZW1wLmluZGV4LCAyKTtcblx0XHRcdHZhciB0ZW1wU2luZ2xlOlNoYWRlclJlZ2lzdGVyRWxlbWVudCA9IG5ldyBTaGFkZXJSZWdpc3RlckVsZW1lbnQodGVtcC5yZWdOYW1lLCB0ZW1wLmluZGV4LCAzKTtcblxuXHRcdFx0dmFyIFI6U2hhZGVyUmVnaXN0ZXJFbGVtZW50ID0gYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5nZXRGcmVlVmVydGV4VmVjdG9yVGVtcCgpO1xuXHRcdFx0YW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5hZGRWZXJ0ZXhUZW1wVXNhZ2VzKFIsIDEpO1xuXG5cdFx0XHRhbmltYXRpb25SZWdpc3RlckNhY2hlLnJlbW92ZVZlcnRleFRlbXBVc2FnZShucm1EaXJlY3Rpb24pO1xuXHRcdFx0YW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5yZW1vdmVWZXJ0ZXhUZW1wVXNhZ2UodGVtcCk7XG5cdFx0XHRhbmltYXRpb25SZWdpc3RlckNhY2hlLnJlbW92ZVZlcnRleFRlbXBVc2FnZShSKTtcblxuXHRcdFx0Y29kZSArPSBcInN1YiBcIiArIG5ybURpcmVjdGlvbiArIFwiLnh5eixcIiArIHBvc2l0aW9uQXR0cmlidXRlICsgXCIueHl6LFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5wb3NpdGlvblRhcmdldCArIFwiLnh5elxcblwiO1xuXHRcdFx0Y29kZSArPSBcIm5ybSBcIiArIG5ybURpcmVjdGlvbiArIFwiLnh5eixcIiArIG5ybURpcmVjdGlvbiArIFwiLnh5elxcblwiO1xuXG5cdFx0XHRjb2RlICs9IFwibW92IFwiICsgc2luICsgXCIsXCIgKyBucm1EaXJlY3Rpb24gKyBcIi55XFxuXCI7XG5cdFx0XHRjb2RlICs9IFwibXVsIFwiICsgY29zICsgXCIsXCIgKyBzaW4gKyBcIixcIiArIHNpbiArIFwiXFxuXCI7XG5cdFx0XHRjb2RlICs9IFwic3ViIFwiICsgY29zICsgXCIsXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnZlcnRleE9uZUNvbnN0ICsgXCIsXCIgKyBjb3MgKyBcIlxcblwiO1xuXHRcdFx0Y29kZSArPSBcInNxdCBcIiArIGNvcyArIFwiLFwiICsgY29zICsgXCJcXG5cIjtcblxuXHRcdFx0Y29kZSArPSBcIm11bCBcIiArIFIgKyBcIi54LFwiICsgY29zICsgXCIsXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnNjYWxlQW5kUm90YXRlVGFyZ2V0ICsgXCIueVxcblwiO1xuXHRcdFx0Y29kZSArPSBcIm11bCBcIiArIFIgKyBcIi55LFwiICsgc2luICsgXCIsXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnNjYWxlQW5kUm90YXRlVGFyZ2V0ICsgXCIuelxcblwiO1xuXHRcdFx0Y29kZSArPSBcIm11bCBcIiArIFIgKyBcIi56LFwiICsgc2luICsgXCIsXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnNjYWxlQW5kUm90YXRlVGFyZ2V0ICsgXCIueVxcblwiO1xuXHRcdFx0Y29kZSArPSBcIm11bCBcIiArIFIgKyBcIi53LFwiICsgY29zICsgXCIsXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnNjYWxlQW5kUm90YXRlVGFyZ2V0ICsgXCIuelxcblwiO1xuXG5cdFx0XHRjb2RlICs9IFwic3ViIFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5zY2FsZUFuZFJvdGF0ZVRhcmdldCArIFwiLnksXCIgKyBSICsgXCIueCxcIiArIFIgKyBcIi55XFxuXCI7XG5cdFx0XHRjb2RlICs9IFwiYWRkIFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5zY2FsZUFuZFJvdGF0ZVRhcmdldCArIFwiLnosXCIgKyBSICsgXCIueixcIiArIFIgKyBcIi53XFxuXCI7XG5cblx0XHRcdGNvZGUgKz0gXCJhYnMgXCIgKyBSICsgXCIueSxcIiArIG5ybURpcmVjdGlvbiArIFwiLnlcXG5cIjtcblx0XHRcdGNvZGUgKz0gXCJzZ2UgXCIgKyBSICsgXCIueixcIiArIFIgKyBcIi55LFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS52ZXJ0ZXhPbmVDb25zdCArIFwiXFxuXCI7XG5cdFx0XHRjb2RlICs9IFwibXVsIFwiICsgUiArIFwiLngsXCIgKyBSICsgXCIueSxcIiArIG5ybURpcmVjdGlvbiArIFwiLnlcXG5cIjtcblxuXHRcdFx0Ly9qdWRndSBpZiBucm1EaXJlY3Rpb249KDAsMSwwKTtcblx0XHRcdGNvZGUgKz0gXCJtb3YgXCIgKyBucm1EaXJlY3Rpb24gKyBcIi55LFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS52ZXJ0ZXhaZXJvQ29uc3QgKyBcIlxcblwiO1xuXHRcdFx0Y29kZSArPSBcImRwMyBcIiArIHNpbiArIFwiLFwiICsgbnJtRGlyZWN0aW9uICsgXCIueHl6LFwiICsgbnJtRGlyZWN0aW9uICsgXCIueHl6XFxuXCI7XG5cdFx0XHRjb2RlICs9IFwic2dlIFwiICsgdGVtcFNpbmdsZSArIFwiLFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS52ZXJ0ZXhaZXJvQ29uc3QgKyBcIixcIiArIHNpbiArIFwiXFxuXCI7XG5cblx0XHRcdGNvZGUgKz0gXCJtb3YgXCIgKyBucm1EaXJlY3Rpb24gKyBcIi55LFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS52ZXJ0ZXhaZXJvQ29uc3QgKyBcIlxcblwiO1xuXHRcdFx0Y29kZSArPSBcIm5ybSBcIiArIG5ybURpcmVjdGlvbiArIFwiLnh5eixcIiArIG5ybURpcmVjdGlvbiArIFwiLnh5elxcblwiO1xuXG5cdFx0XHRjb2RlICs9IFwic3ViIFwiICsgc2luICsgXCIsXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnZlcnRleE9uZUNvbnN0ICsgXCIsXCIgKyB0ZW1wU2luZ2xlICsgXCJcXG5cIjtcblx0XHRcdGNvZGUgKz0gXCJtdWwgXCIgKyBzaW4gKyBcIixcIiArIHNpbiArIFwiLFwiICsgbnJtRGlyZWN0aW9uICsgXCIueFxcblwiO1xuXG5cdFx0XHRjb2RlICs9IFwibW92IFwiICsgY29zICsgXCIsXCIgKyBucm1EaXJlY3Rpb24gKyBcIi56XFxuXCI7XG5cdFx0XHRjb2RlICs9IFwibmVnIFwiICsgY29zICsgXCIsXCIgKyBjb3MgKyBcIlxcblwiO1xuXHRcdFx0Y29kZSArPSBcInN1YiBcIiArIG9fdGVtcCArIFwiLFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS52ZXJ0ZXhPbmVDb25zdCArIFwiLFwiICsgY29zICsgXCJcXG5cIjtcblx0XHRcdGNvZGUgKz0gXCJtdWwgXCIgKyBvX3RlbXAgKyBcIixcIiArIFIgKyBcIi54LFwiICsgdGVtcFNpbmdsZSArIFwiXFxuXCI7XG5cdFx0XHRjb2RlICs9IFwiYWRkIFwiICsgY29zICsgXCIsXCIgKyBjb3MgKyBcIixcIiArIG9fdGVtcCArIFwiXFxuXCI7XG5cblx0XHRcdGNvZGUgKz0gXCJtdWwgXCIgKyBSICsgXCIueCxcIiArIGNvcyArIFwiLFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5zY2FsZUFuZFJvdGF0ZVRhcmdldCArIFwiLnhcXG5cIjtcblx0XHRcdGNvZGUgKz0gXCJtdWwgXCIgKyBSICsgXCIueSxcIiArIHNpbiArIFwiLFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5zY2FsZUFuZFJvdGF0ZVRhcmdldCArIFwiLnpcXG5cIjtcblx0XHRcdGNvZGUgKz0gXCJtdWwgXCIgKyBSICsgXCIueixcIiArIHNpbiArIFwiLFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5zY2FsZUFuZFJvdGF0ZVRhcmdldCArIFwiLnhcXG5cIjtcblx0XHRcdGNvZGUgKz0gXCJtdWwgXCIgKyBSICsgXCIudyxcIiArIGNvcyArIFwiLFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5zY2FsZUFuZFJvdGF0ZVRhcmdldCArIFwiLnpcXG5cIjtcblxuXHRcdFx0Y29kZSArPSBcInN1YiBcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuc2NhbGVBbmRSb3RhdGVUYXJnZXQgKyBcIi54LFwiICsgUiArIFwiLngsXCIgKyBSICsgXCIueVxcblwiO1xuXHRcdFx0Y29kZSArPSBcImFkZCBcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuc2NhbGVBbmRSb3RhdGVUYXJnZXQgKyBcIi56LFwiICsgUiArIFwiLnosXCIgKyBSICsgXCIud1xcblwiO1xuXG5cdFx0XHRmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdFx0Ly9qdXN0IHJlcGVhdCB0aGUgY2FsY3VsYXRlIGFib3ZlXG5cdFx0XHRcdC8vYmVjYXVzZSBvZiB0aGUgbGltaXRlZCByZWdpc3RlcnMsIG5vIG5lZWQgdG8gb3B0aW1pc2Vcblx0XHRcdFx0Y29kZSArPSBcInN1YiBcIiArIG5ybURpcmVjdGlvbiArIFwiLnh5eixcIiArIHBvc2l0aW9uQXR0cmlidXRlICsgXCIueHl6LFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5wb3NpdGlvblRhcmdldCArIFwiLnh5elxcblwiO1xuXHRcdFx0XHRjb2RlICs9IFwibnJtIFwiICsgbnJtRGlyZWN0aW9uICsgXCIueHl6LFwiICsgbnJtRGlyZWN0aW9uICsgXCIueHl6XFxuXCI7XG5cdFx0XHRcdGNvZGUgKz0gXCJtb3YgXCIgKyBzaW4gKyBcIixcIiArIG5ybURpcmVjdGlvbiArIFwiLnlcXG5cIjtcblx0XHRcdFx0Y29kZSArPSBcIm11bCBcIiArIGNvcyArIFwiLFwiICsgc2luICsgXCIsXCIgKyBzaW4gKyBcIlxcblwiO1xuXHRcdFx0XHRjb2RlICs9IFwic3ViIFwiICsgY29zICsgXCIsXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnZlcnRleE9uZUNvbnN0ICsgXCIsXCIgKyBjb3MgKyBcIlxcblwiO1xuXHRcdFx0XHRjb2RlICs9IFwic3F0IFwiICsgY29zICsgXCIsXCIgKyBjb3MgKyBcIlxcblwiO1xuXHRcdFx0XHRjb2RlICs9IFwibXVsIFwiICsgUiArIFwiLngsXCIgKyBjb3MgKyBcIixcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUucm90YXRpb25SZWdpc3RlcnNbaV0gKyBcIi55XFxuXCI7XG5cdFx0XHRcdGNvZGUgKz0gXCJtdWwgXCIgKyBSICsgXCIueSxcIiArIHNpbiArIFwiLFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5yb3RhdGlvblJlZ2lzdGVyc1tpXSArIFwiLnpcXG5cIjtcblx0XHRcdFx0Y29kZSArPSBcIm11bCBcIiArIFIgKyBcIi56LFwiICsgc2luICsgXCIsXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnJvdGF0aW9uUmVnaXN0ZXJzW2ldICsgXCIueVxcblwiO1xuXHRcdFx0XHRjb2RlICs9IFwibXVsIFwiICsgUiArIFwiLncsXCIgKyBjb3MgKyBcIixcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUucm90YXRpb25SZWdpc3RlcnNbaV0gKyBcIi56XFxuXCI7XG5cdFx0XHRcdGNvZGUgKz0gXCJzdWIgXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnJvdGF0aW9uUmVnaXN0ZXJzW2ldICsgXCIueSxcIiArIFIgKyBcIi54LFwiICsgUiArIFwiLnlcXG5cIjtcblx0XHRcdFx0Y29kZSArPSBcImFkZCBcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUucm90YXRpb25SZWdpc3RlcnNbaV0gKyBcIi56LFwiICsgUiArIFwiLnosXCIgKyBSICsgXCIud1xcblwiO1xuXHRcdFx0XHRjb2RlICs9IFwiYWJzIFwiICsgUiArIFwiLnksXCIgKyBucm1EaXJlY3Rpb24gKyBcIi55XFxuXCI7XG5cdFx0XHRcdGNvZGUgKz0gXCJzZ2UgXCIgKyBSICsgXCIueixcIiArIFIgKyBcIi55LFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS52ZXJ0ZXhPbmVDb25zdCArIFwiXFxuXCI7XG5cdFx0XHRcdGNvZGUgKz0gXCJtdWwgXCIgKyBSICsgXCIueCxcIiArIFIgKyBcIi55LFwiICsgbnJtRGlyZWN0aW9uICsgXCIueVxcblwiO1xuXHRcdFx0XHRjb2RlICs9IFwibW92IFwiICsgbnJtRGlyZWN0aW9uICsgXCIueSxcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUudmVydGV4WmVyb0NvbnN0ICsgXCJcXG5cIjtcblx0XHRcdFx0Y29kZSArPSBcImRwMyBcIiArIHNpbiArIFwiLFwiICsgbnJtRGlyZWN0aW9uICsgXCIueHl6LFwiICsgbnJtRGlyZWN0aW9uICsgXCIueHl6XFxuXCI7XG5cdFx0XHRcdGNvZGUgKz0gXCJzZ2UgXCIgKyB0ZW1wU2luZ2xlICsgXCIsXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnZlcnRleFplcm9Db25zdCArIFwiLFwiICsgc2luICsgXCJcXG5cIjtcblx0XHRcdFx0Y29kZSArPSBcIm1vdiBcIiArIG5ybURpcmVjdGlvbiArIFwiLnksXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnZlcnRleFplcm9Db25zdCArIFwiXFxuXCI7XG5cdFx0XHRcdGNvZGUgKz0gXCJucm0gXCIgKyBucm1EaXJlY3Rpb24gKyBcIi54eXosXCIgKyBucm1EaXJlY3Rpb24gKyBcIi54eXpcXG5cIjtcblx0XHRcdFx0Y29kZSArPSBcInN1YiBcIiArIHNpbiArIFwiLFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS52ZXJ0ZXhPbmVDb25zdCArIFwiLFwiICsgdGVtcFNpbmdsZSArIFwiXFxuXCI7XG5cdFx0XHRcdGNvZGUgKz0gXCJtdWwgXCIgKyBzaW4gKyBcIixcIiArIHNpbiArIFwiLFwiICsgbnJtRGlyZWN0aW9uICsgXCIueFxcblwiO1xuXHRcdFx0XHRjb2RlICs9IFwibW92IFwiICsgY29zICsgXCIsXCIgKyBucm1EaXJlY3Rpb24gKyBcIi56XFxuXCI7XG5cdFx0XHRcdGNvZGUgKz0gXCJuZWcgXCIgKyBjb3MgKyBcIixcIiArIGNvcyArIFwiXFxuXCI7XG5cdFx0XHRcdGNvZGUgKz0gXCJzdWIgXCIgKyBvX3RlbXAgKyBcIixcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUudmVydGV4T25lQ29uc3QgKyBcIixcIiArIGNvcyArIFwiXFxuXCI7XG5cdFx0XHRcdGNvZGUgKz0gXCJtdWwgXCIgKyBvX3RlbXAgKyBcIixcIiArIFIgKyBcIi54LFwiICsgdGVtcFNpbmdsZSArIFwiXFxuXCI7XG5cdFx0XHRcdGNvZGUgKz0gXCJhZGQgXCIgKyBjb3MgKyBcIixcIiArIGNvcyArIFwiLFwiICsgb190ZW1wICsgXCJcXG5cIjtcblx0XHRcdFx0Y29kZSArPSBcIm11bCBcIiArIFIgKyBcIi54LFwiICsgY29zICsgXCIsXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnJvdGF0aW9uUmVnaXN0ZXJzW2ldICsgXCIueFxcblwiO1xuXHRcdFx0XHRjb2RlICs9IFwibXVsIFwiICsgUiArIFwiLnksXCIgKyBzaW4gKyBcIixcIiArIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUucm90YXRpb25SZWdpc3RlcnNbaV0gKyBcIi56XFxuXCI7XG5cdFx0XHRcdGNvZGUgKz0gXCJtdWwgXCIgKyBSICsgXCIueixcIiArIHNpbiArIFwiLFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5yb3RhdGlvblJlZ2lzdGVyc1tpXSArIFwiLnhcXG5cIjtcblx0XHRcdFx0Y29kZSArPSBcIm11bCBcIiArIFIgKyBcIi53LFwiICsgY29zICsgXCIsXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnJvdGF0aW9uUmVnaXN0ZXJzW2ldICsgXCIuelxcblwiO1xuXHRcdFx0XHRjb2RlICs9IFwic3ViIFwiICsgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5yb3RhdGlvblJlZ2lzdGVyc1tpXSArIFwiLngsXCIgKyBSICsgXCIueCxcIiArIFIgKyBcIi55XFxuXCI7XG5cdFx0XHRcdGNvZGUgKz0gXCJhZGQgXCIgKyBhbmltYXRpb25SZWdpc3RlckNhY2hlLnJvdGF0aW9uUmVnaXN0ZXJzW2ldICsgXCIueixcIiArIFIgKyBcIi56LFwiICsgUiArIFwiLndcXG5cIjtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNvZGU7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHB1YmxpYyBnZXRBbmltYXRpb25TdGF0ZShhbmltYXRvcjpBbmltYXRvckJhc2UpOlBhcnRpY2xlUm90YXRlVG9Qb3NpdGlvblN0YXRlXG5cdHtcblx0XHRyZXR1cm4gPFBhcnRpY2xlUm90YXRlVG9Qb3NpdGlvblN0YXRlPiBhbmltYXRvci5nZXRBbmltYXRpb25TdGF0ZSh0aGlzKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIF9pR2VuZXJhdGVQcm9wZXJ0eU9mT25lUGFydGljbGUocGFyYW06UGFydGljbGVQcm9wZXJ0aWVzKVxuXHR7XG5cdFx0dmFyIG9mZnNldDpWZWN0b3IzRCA9IHBhcmFtW1BhcnRpY2xlUm90YXRlVG9Qb3NpdGlvbk5vZGUuUE9TSVRJT05fVkVDVE9SM0RdO1xuXHRcdGlmICghb2Zmc2V0KVxuXHRcdFx0dGhyb3cobmV3IEVycm9yKFwidGhlcmUgaXMgbm8gXCIgKyBQYXJ0aWNsZVJvdGF0ZVRvUG9zaXRpb25Ob2RlLlBPU0lUSU9OX1ZFQ1RPUjNEICsgXCIgaW4gcGFyYW0hXCIpKTtcblxuXHRcdHRoaXMuX3BPbmVEYXRhWzBdID0gb2Zmc2V0Lng7XG5cdFx0dGhpcy5fcE9uZURhdGFbMV0gPSBvZmZzZXQueTtcblx0XHR0aGlzLl9wT25lRGF0YVsyXSA9IG9mZnNldC56O1xuXHR9XG59XG5cbmV4cG9ydCA9IFBhcnRpY2xlUm90YXRlVG9Qb3NpdGlvbk5vZGU7Il19