var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var TriangleSubGeometry = require("awayjs-core/lib/data/TriangleSubGeometry");
var ContextGLProgramType = require("awayjs-stagegl/lib/base/ContextGLProgramType");
var VertexDataPool = require("awayjs-stagegl/lib/pool/VertexDataPool");
var AnimatorBase = require("awayjs-renderergl/lib/animators/AnimatorBase");
var VertexAnimationMode = require("awayjs-renderergl/lib/animators/data/VertexAnimationMode");
/**
 * Provides an interface for assigning vertex-based animation data sets to mesh-based entity objects
 * and controlling the various available states of animation through an interative playhead that can be
 * automatically updated or manually triggered.
 */
var VertexAnimator = (function (_super) {
    __extends(VertexAnimator, _super);
    /**
     * Creates a new <code>VertexAnimator</code> object.
     *
     * @param vertexAnimationSet The animation data set containing the vertex animations used by the animator.
     */
    function VertexAnimator(vertexAnimationSet) {
        _super.call(this, vertexAnimationSet);
        this._poses = new Array();
        this._weights = Array(1, 0, 0, 0);
        this._vertexAnimationSet = vertexAnimationSet;
        this._numPoses = vertexAnimationSet.numPoses;
        this._blendMode = vertexAnimationSet.blendMode;
    }
    /**
     * @inheritDoc
     */
    VertexAnimator.prototype.clone = function () {
        return new VertexAnimator(this._vertexAnimationSet);
    };
    /**
     * Plays a sequence with a given name. If the sequence is not found, it may not be loaded yet, and it will retry every frame.
     * @param sequenceName The name of the clip to be played.
     */
    VertexAnimator.prototype.play = function (name, transition, offset) {
        if (transition === void 0) { transition = null; }
        if (offset === void 0) { offset = NaN; }
        if (this._pActiveAnimationName == name)
            return;
        this._pActiveAnimationName = name;
        //TODO: implement transitions in vertex animator
        if (!this._pAnimationSet.hasAnimation(name))
            throw new Error("Animation root node " + name + " not found!");
        this._pActiveNode = this._pAnimationSet.getAnimation(name);
        this._pActiveState = this.getAnimationState(this._pActiveNode);
        if (this.updatePosition) {
            //update straight away to reset position deltas
            this._pActiveState.update(this._pAbsoluteTime);
            this._pActiveState.positionDelta;
        }
        this._activeVertexState = this._pActiveState;
        this.start();
        //apply a time offset if specified
        if (!isNaN(offset))
            this.reset(name, offset);
    };
    /**
     * @inheritDoc
     */
    VertexAnimator.prototype._pUpdateDeltaTime = function (dt) {
        _super.prototype._pUpdateDeltaTime.call(this, dt);
        var geometryFlag = false;
        if (this._poses[0] != this._activeVertexState.currentGeometry) {
            this._poses[0] = this._activeVertexState.currentGeometry;
            geometryFlag = true;
        }
        if (this._poses[1] != this._activeVertexState.nextGeometry) {
            this._poses[1] = this._activeVertexState.nextGeometry;
            geometryFlag = true;
        }
        this._weights[0] = 1 - (this._weights[1] = this._activeVertexState.blendWeight);
        if (geometryFlag) {
            //invalidate meshes
            var mesh;
            var len = this._pOwners.length;
            for (var i = 0; i < len; i++) {
                mesh = this._pOwners[i];
                mesh._iInvalidateRenderableGeometries();
            }
        }
    };
    /**
     * @inheritDoc
     */
    VertexAnimator.prototype.setRenderState = function (shaderObject, renderable, stage, camera, vertexConstantOffset /*int*/, vertexStreamOffset /*int*/) {
        // todo: add code for when running on cpu
        // if no poses defined, set temp data
        if (!this._poses.length) {
            this.setNullPose(shaderObject, renderable, stage, vertexConstantOffset, vertexStreamOffset);
            return;
        }
        // this type of animation can only be SubMesh
        var subMesh = renderable.subMesh;
        var subGeom;
        var i /*uint*/;
        var len = this._numPoses;
        stage.context.setProgramConstantsFromArray(ContextGLProgramType.VERTEX, vertexConstantOffset, this._weights, 1);
        if (this._blendMode == VertexAnimationMode.ABSOLUTE)
            i = 1;
        else
            i = 0;
        for (; i < len; ++i) {
            subGeom = this._poses[i].subGeometries[subMesh._iIndex] || subMesh.subGeometry;
            stage.activateBuffer(vertexStreamOffset++, VertexDataPool.getItem(subGeom, renderable.getIndexData(), TriangleSubGeometry.POSITION_DATA), subGeom.getOffset(TriangleSubGeometry.POSITION_DATA), TriangleSubGeometry.POSITION_FORMAT);
            if (shaderObject.normalDependencies > 0)
                stage.activateBuffer(vertexStreamOffset++, VertexDataPool.getItem(subGeom, renderable.getIndexData(), TriangleSubGeometry.NORMAL_DATA), subGeom.getOffset(TriangleSubGeometry.NORMAL_DATA), TriangleSubGeometry.NORMAL_FORMAT);
        }
    };
    VertexAnimator.prototype.setNullPose = function (shaderObject, renderable, stage, vertexConstantOffset /*int*/, vertexStreamOffset /*int*/) {
        stage.context.setProgramConstantsFromArray(ContextGLProgramType.VERTEX, vertexConstantOffset, this._weights, 1);
        if (this._blendMode == VertexAnimationMode.ABSOLUTE) {
            var len = this._numPoses;
            for (var i = 1; i < len; ++i) {
                stage.activateBuffer(vertexStreamOffset++, renderable.getVertexData(TriangleSubGeometry.POSITION_DATA), renderable.getVertexOffset(TriangleSubGeometry.POSITION_DATA), TriangleSubGeometry.POSITION_FORMAT);
                if (shaderObject.normalDependencies > 0)
                    stage.activateBuffer(vertexStreamOffset++, renderable.getVertexData(TriangleSubGeometry.NORMAL_DATA), renderable.getVertexOffset(TriangleSubGeometry.NORMAL_DATA), TriangleSubGeometry.NORMAL_FORMAT);
            }
        }
        // todo: set temp data for additive?
    };
    /**
     * Verifies if the animation will be used on cpu. Needs to be true for all passes for a material to be able to use it on gpu.
     * Needs to be called if gpu code is potentially required.
     */
    VertexAnimator.prototype.testGPUCompatibility = function (shaderObject) {
    };
    VertexAnimator.prototype.getRenderableSubGeometry = function (renderable, sourceSubGeometry) {
        if (this._blendMode == VertexAnimationMode.ABSOLUTE && this._poses.length)
            return this._poses[0].subGeometries[renderable.subMesh._iIndex] || sourceSubGeometry;
        //nothing to do here
        return sourceSubGeometry;
    };
    return VertexAnimator;
})(AnimatorBase);
module.exports = VertexAnimator;

//# sourceMappingURL=data:application/json;base64,