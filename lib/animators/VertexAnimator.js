var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var TriangleSubGeometry = require("awayjs-display/lib/base/TriangleSubGeometry");
var AnimatorBase = require("awayjs-stagegl/lib/animators/AnimatorBase");
var VertexDataPool = require("awayjs-stagegl/lib/pool/VertexDataPool");
var ContextGLProgramType = require("awayjs-stagegl/lib/base/ContextGLProgramType");
var VertexAnimationMode = require("awayjs-renderergl/lib/animators/data/VertexAnimationMode");
/**
 * Provides an interface for assigning vertex-based animation data sets to mesh-based entity objects
 * and controlling the various available states of animation through an interative playhead that can be
 * automatically updated or manually triggered.
 */
var VertexAnimator = (function (_super) {
    __extends(VertexAnimator, _super);
    /**
     * Creates a new <code>VertexAnimator</code> object.
     *
     * @param vertexAnimationSet The animation data set containing the vertex animations used by the animator.
     */
    function VertexAnimator(vertexAnimationSet) {
        _super.call(this, vertexAnimationSet);
        this._poses = new Array();
        this._weights = Array(1, 0, 0, 0);
        this._vertexAnimationSet = vertexAnimationSet;
        this._numPoses = vertexAnimationSet.numPoses;
        this._blendMode = vertexAnimationSet.blendMode;
    }
    /**
     * @inheritDoc
     */
    VertexAnimator.prototype.clone = function () {
        return new VertexAnimator(this._vertexAnimationSet);
    };
    /**
     * Plays a sequence with a given name. If the sequence is not found, it may not be loaded yet, and it will retry every frame.
     * @param sequenceName The name of the clip to be played.
     */
    VertexAnimator.prototype.play = function (name, transition, offset) {
        if (transition === void 0) { transition = null; }
        if (offset === void 0) { offset = NaN; }
        if (this._pActiveAnimationName == name)
            return;
        this._pActiveAnimationName = name;
        //TODO: implement transitions in vertex animator
        if (!this._pAnimationSet.hasAnimation(name))
            throw new Error("Animation root node " + name + " not found!");
        this._pActiveNode = this._pAnimationSet.getAnimation(name);
        this._pActiveState = this.getAnimationState(this._pActiveNode);
        if (this.updatePosition) {
            //update straight away to reset position deltas
            this._pActiveState.update(this._pAbsoluteTime);
            this._pActiveState.positionDelta;
        }
        this._activeVertexState = this._pActiveState;
        this.start();
        //apply a time offset if specified
        if (!isNaN(offset))
            this.reset(name, offset);
    };
    /**
     * @inheritDoc
     */
    VertexAnimator.prototype._pUpdateDeltaTime = function (dt) {
        _super.prototype._pUpdateDeltaTime.call(this, dt);
        var geometryFlag = false;
        if (this._poses[0] != this._activeVertexState.currentGeometry) {
            this._poses[0] = this._activeVertexState.currentGeometry;
            geometryFlag = true;
        }
        if (this._poses[1] != this._activeVertexState.nextGeometry) {
            this._poses[1] = this._activeVertexState.nextGeometry;
            geometryFlag = true;
        }
        this._weights[0] = 1 - (this._weights[1] = this._activeVertexState.blendWeight);
        if (geometryFlag) {
            //invalidate meshes
            var mesh;
            var len = this._pOwners.length;
            for (var i = 0; i < len; i++) {
                mesh = this._pOwners[i];
                mesh._iInvalidateRenderableGeometries();
            }
        }
    };
    /**
     * @inheritDoc
     */
    VertexAnimator.prototype.setRenderState = function (shaderObject, renderable, stage, camera, vertexConstantOffset /*int*/, vertexStreamOffset /*int*/) {
        // todo: add code for when running on cpu
        // if no poses defined, set temp data
        if (!this._poses.length) {
            this.setNullPose(shaderObject, renderable, stage, vertexConstantOffset, vertexStreamOffset);
            return;
        }
        // this type of animation can only be SubMesh
        var subMesh = renderable.subMesh;
        var subGeom;
        var i /*uint*/;
        var len = this._numPoses;
        stage.context.setProgramConstantsFromArray(ContextGLProgramType.VERTEX, vertexConstantOffset, this._weights, 1);
        if (this._blendMode == VertexAnimationMode.ABSOLUTE)
            i = 1;
        else
            i = 0;
        for (; i < len; ++i) {
            subGeom = this._poses[i].subGeometries[subMesh._iIndex] || subMesh.subGeometry;
            stage.context.activateBuffer(vertexStreamOffset++, VertexDataPool.getItem(subGeom, renderable.getIndexData(), TriangleSubGeometry.POSITION_DATA), subGeom.getOffset(TriangleSubGeometry.POSITION_DATA), TriangleSubGeometry.POSITION_FORMAT);
            if (shaderObject.normalDependencies > 0)
                stage.context.activateBuffer(vertexStreamOffset++, VertexDataPool.getItem(subGeom, renderable.getIndexData(), TriangleSubGeometry.NORMAL_DATA), subGeom.getOffset(TriangleSubGeometry.NORMAL_DATA), TriangleSubGeometry.NORMAL_FORMAT);
        }
    };
    VertexAnimator.prototype.setNullPose = function (shaderObject, renderable, stage, vertexConstantOffset /*int*/, vertexStreamOffset /*int*/) {
        stage.context.setProgramConstantsFromArray(ContextGLProgramType.VERTEX, vertexConstantOffset, this._weights, 1);
        if (this._blendMode == VertexAnimationMode.ABSOLUTE) {
            var len = this._numPoses;
            for (var i = 1; i < len; ++i) {
                stage.context.activateBuffer(vertexStreamOffset++, renderable.getVertexData(TriangleSubGeometry.POSITION_DATA), renderable.getVertexOffset(TriangleSubGeometry.POSITION_DATA), TriangleSubGeometry.POSITION_FORMAT);
                if (shaderObject.normalDependencies > 0)
                    stage.context.activateBuffer(vertexStreamOffset++, renderable.getVertexData(TriangleSubGeometry.NORMAL_DATA), renderable.getVertexOffset(TriangleSubGeometry.NORMAL_DATA), TriangleSubGeometry.NORMAL_FORMAT);
            }
        }
        // todo: set temp data for additive?
    };
    /**
     * Verifies if the animation will be used on cpu. Needs to be true for all passes for a material to be able to use it on gpu.
     * Needs to be called if gpu code is potentially required.
     */
    VertexAnimator.prototype.testGPUCompatibility = function (shaderObject) {
    };
    VertexAnimator.prototype.getRenderableSubGeometry = function (renderable, sourceSubGeometry) {
        if (this._blendMode == VertexAnimationMode.ABSOLUTE && this._poses.length)
            return this._poses[0].subGeometries[renderable.subMesh._iIndex] || sourceSubGeometry;
        //nothing to do here
        return sourceSubGeometry;
    };
    return VertexAnimator;
})(AnimatorBase);
module.exports = VertexAnimator;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvdmVydGV4YW5pbWF0b3IudHMiXSwibmFtZXMiOlsiVmVydGV4QW5pbWF0b3IiLCJWZXJ0ZXhBbmltYXRvci5jb25zdHJ1Y3RvciIsIlZlcnRleEFuaW1hdG9yLmNsb25lIiwiVmVydGV4QW5pbWF0b3IucGxheSIsIlZlcnRleEFuaW1hdG9yLl9wVXBkYXRlRGVsdGFUaW1lIiwiVmVydGV4QW5pbWF0b3Iuc2V0UmVuZGVyU3RhdGUiLCJWZXJ0ZXhBbmltYXRvci5zZXROdWxsUG9zZSIsIlZlcnRleEFuaW1hdG9yLnRlc3RHUFVDb21wYXRpYmlsaXR5IiwiVmVydGV4QW5pbWF0b3IuZ2V0UmVuZGVyYWJsZVN1Ykdlb21ldHJ5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFQSxJQUFPLG1CQUFtQixXQUFjLDZDQUE2QyxDQUFDLENBQUM7QUFLdkYsSUFBTyxZQUFZLFdBQWdCLDJDQUEyQyxDQUFDLENBQUM7QUFJaEYsSUFBTyxjQUFjLFdBQWUsd0NBQXdDLENBQUMsQ0FBQztBQUM5RSxJQUFPLG9CQUFvQixXQUFjLDhDQUE4QyxDQUFDLENBQUM7QUFLekYsSUFBTyxtQkFBbUIsV0FBYywwREFBMEQsQ0FBQyxDQUFDO0FBSXBHLEFBS0E7Ozs7R0FERztJQUNHLGNBQWM7SUFBU0EsVUFBdkJBLGNBQWNBLFVBQXFCQTtJQVN4Q0E7Ozs7T0FJR0E7SUFDSEEsU0FkS0EsY0FBY0EsQ0FjUEEsa0JBQXFDQTtRQUVoREMsa0JBQU1BLGtCQUFrQkEsQ0FBQ0EsQ0FBQ0E7UUFibkJBLFdBQU1BLEdBQW1CQSxJQUFJQSxLQUFLQSxFQUFZQSxDQUFDQTtRQUMvQ0EsYUFBUUEsR0FBaUJBLEtBQUtBLENBQVNBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO1FBYzFEQSxJQUFJQSxDQUFDQSxtQkFBbUJBLEdBQUdBLGtCQUFrQkEsQ0FBQ0E7UUFDOUNBLElBQUlBLENBQUNB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QU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBLGFBQWFBLENBQUNBLFVBQVVBLENBQUNBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLGlCQUFpQkEsQ0FBQ0E7UUFFNUdBLEFBQ0FBLG9CQURvQkE7UUFDcEJBLE1BQU1BLENBQUNBLGlCQUFpQkEsQ0FBQ0E7SUFDMUJBLENBQUNBO0lBQ0ZSLHFCQUFDQTtBQUFEQSxDQXRLQSxBQXNLQ0EsRUF0SzRCLFlBQVksRUFzS3hDO0FBRUQsQUFBd0IsaUJBQWYsY0FBYyxDQUFDIiwiZmlsZSI6ImFuaW1hdG9ycy9WZXJ0ZXhBbmltYXRvci5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgR2VvbWV0cnlcdFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9iYXNlL0dlb21ldHJ5XCIpO1xuaW1wb3J0IFN1Ykdlb21ldHJ5QmFzZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvYmFzZS9TdWJHZW9tZXRyeUJhc2VcIik7XG5pbXBvcnQgVHJpYW5nbGVTdWJHZW9tZXRyeVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2Jhc2UvVHJpYW5nbGVTdWJHZW9tZXRyeVwiKTtcbmltcG9ydCBUcmlhbmdsZVN1Yk1lc2hcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2Jhc2UvVHJpYW5nbGVTdWJNZXNoXCIpO1xuaW1wb3J0IENhbWVyYVx0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2VudGl0aWVzL0NhbWVyYVwiKTtcbmltcG9ydCBNZXNoXHRcdFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9lbnRpdGllcy9NZXNoXCIpO1xuXG5pbXBvcnQgQW5pbWF0b3JCYXNlXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2FuaW1hdG9ycy9BbmltYXRvckJhc2VcIik7XG5pbXBvcnQgU3RhZ2VcdFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL1N0YWdlXCIpO1xuaW1wb3J0IFRyaWFuZ2xlU3ViTWVzaFJlbmRlcmFibGVcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL3Bvb2wvVHJpYW5nbGVTdWJNZXNoUmVuZGVyYWJsZVwiKTtcbmltcG9ydCBSZW5kZXJhYmxlQmFzZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvcG9vbC9SZW5kZXJhYmxlQmFzZVwiKTtcbmltcG9ydCBWZXJ0ZXhEYXRhUG9vbFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvcG9vbC9WZXJ0ZXhEYXRhUG9vbFwiKTtcbmltcG9ydCBDb250ZXh0R0xQcm9ncmFtVHlwZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvQ29udGV4dEdMUHJvZ3JhbVR5cGVcIik7XG5pbXBvcnQgSUNvbnRleHRTdGFnZUdMXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL0lDb250ZXh0U3RhZ2VHTFwiKTtcbmltcG9ydCBTaGFkZXJPYmplY3RCYXNlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9tYXRlcmlhbHMvY29tcGlsYXRpb24vU2hhZGVyT2JqZWN0QmFzZVwiKTtcblxuaW1wb3J0IFZlcnRleEFuaW1hdGlvblNldFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9WZXJ0ZXhBbmltYXRpb25TZXRcIik7XG5pbXBvcnQgVmVydGV4QW5pbWF0aW9uTW9kZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9kYXRhL1ZlcnRleEFuaW1hdGlvbk1vZGVcIik7XG5pbXBvcnQgSVZlcnRleEFuaW1hdGlvblN0YXRlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9zdGF0ZXMvSVZlcnRleEFuaW1hdGlvblN0YXRlXCIpO1xuaW1wb3J0IElBbmltYXRpb25UcmFuc2l0aW9uXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYW5pbWF0b3JzL3RyYW5zaXRpb25zL0lBbmltYXRpb25UcmFuc2l0aW9uXCIpO1xuXG4vKipcbiAqIFByb3ZpZGVzIGFuIGludGVyZmFjZSBmb3IgYXNzaWduaW5nIHZlcnRleC1iYXNlZCBhbmltYXRpb24gZGF0YSBzZXRzIHRvIG1lc2gtYmFzZWQgZW50aXR5IG9iamVjdHNcbiAqIGFuZCBjb250cm9sbGluZyB0aGUgdmFyaW91cyBhdmFpbGFibGUgc3RhdGVzIG9mIGFuaW1hdGlvbiB0aHJvdWdoIGFuIGludGVyYXRpdmUgcGxheWhlYWQgdGhhdCBjYW4gYmVcbiAqIGF1dG9tYXRpY2FsbHkgdXBkYXRlZCBvciBtYW51YWxseSB0cmlnZ2VyZWQuXG4gKi9cbmNsYXNzIFZlcnRleEFuaW1hdG9yIGV4dGVuZHMgQW5pbWF0b3JCYXNlXG57XG5cdHByaXZhdGUgX3ZlcnRleEFuaW1hdGlvblNldDpWZXJ0ZXhBbmltYXRpb25TZXQ7XG5cdHByaXZhdGUgX3Bvc2VzOkFycmF5PEdlb21ldHJ5PiA9IG5ldyBBcnJheTxHZW9tZXRyeT4oKTtcblx0cHJpdmF0ZSBfd2VpZ2h0czpBcnJheTxudW1iZXI+ID0gQXJyYXk8bnVtYmVyPigxLCAwLCAwLCAwKTtcblx0cHJpdmF0ZSBfbnVtUG9zZXM6bnVtYmVyIC8qdWludCovO1xuXHRwcml2YXRlIF9ibGVuZE1vZGU6c3RyaW5nO1xuXHRwcml2YXRlIF9hY3RpdmVWZXJ0ZXhTdGF0ZTpJVmVydGV4QW5pbWF0aW9uU3RhdGU7XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBuZXcgPGNvZGU+VmVydGV4QW5pbWF0b3I8L2NvZGU+IG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIHZlcnRleEFuaW1hdGlvblNldCBUaGUgYW5pbWF0aW9uIGRhdGEgc2V0IGNvbnRhaW5pbmcgdGhlIHZlcnRleCBhbmltYXRpb25zIHVzZWQgYnkgdGhlIGFuaW1hdG9yLlxuXHQgKi9cblx0Y29uc3RydWN0b3IodmVydGV4QW5pbWF0aW9uU2V0OlZlcnRleEFuaW1hdGlvblNldClcblx0e1xuXHRcdHN1cGVyKHZlcnRleEFuaW1hdGlvblNldCk7XG5cblx0XHR0aGlzLl92ZXJ0ZXhBbmltYXRpb25TZXQgPSB2ZXJ0ZXhBbmltYXRpb25TZXQ7XG5cdFx0dGhpcy5fbnVtUG9zZXMgPSB2ZXJ0ZXhBbmltYXRpb25TZXQubnVtUG9zZXM7XG5cdFx0dGhpcy5fYmxlbmRNb2RlID0gdmVydGV4QW5pbWF0aW9uU2V0LmJsZW5kTW9kZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIGNsb25lKCk6QW5pbWF0b3JCYXNlXG5cdHtcblx0XHRyZXR1cm4gbmV3IFZlcnRleEFuaW1hdG9yKHRoaXMuX3ZlcnRleEFuaW1hdGlvblNldCk7XG5cdH1cblxuXHQvKipcblx0ICogUGxheXMgYSBzZXF1ZW5jZSB3aXRoIGEgZ2l2ZW4gbmFtZS4gSWYgdGhlIHNlcXVlbmNlIGlzIG5vdCBmb3VuZCwgaXQgbWF5IG5vdCBiZSBsb2FkZWQgeWV0LCBhbmQgaXQgd2lsbCByZXRyeSBldmVyeSBmcmFtZS5cblx0ICogQHBhcmFtIHNlcXVlbmNlTmFtZSBUaGUgbmFtZSBvZiB0aGUgY2xpcCB0byBiZSBwbGF5ZWQuXG5cdCAqL1xuXHRwdWJsaWMgcGxheShuYW1lOnN0cmluZywgdHJhbnNpdGlvbjpJQW5pbWF0aW9uVHJhbnNpdGlvbiA9IG51bGwsIG9mZnNldDpudW1iZXIgPSBOYU4pXG5cdHtcblx0XHRpZiAodGhpcy5fcEFjdGl2ZUFuaW1hdGlvbk5hbWUgPT0gbmFtZSlcblx0XHRcdHJldHVybjtcblxuXHRcdHRoaXMuX3BBY3RpdmVBbmltYXRpb25OYW1lID0gbmFtZTtcblxuXHRcdC8vVE9ETzogaW1wbGVtZW50IHRyYW5zaXRpb25zIGluIHZlcnRleCBhbmltYXRvclxuXG5cdFx0aWYgKCF0aGlzLl9wQW5pbWF0aW9uU2V0Lmhhc0FuaW1hdGlvbihuYW1lKSlcblx0XHRcdHRocm93IG5ldyBFcnJvcihcIkFuaW1hdGlvbiByb290IG5vZGUgXCIgKyBuYW1lICsgXCIgbm90IGZvdW5kIVwiKTtcblxuXHRcdHRoaXMuX3BBY3RpdmVOb2RlID0gdGhpcy5fcEFuaW1hdGlvblNldC5nZXRBbmltYXRpb24obmFtZSk7XG5cblx0XHR0aGlzLl9wQWN0aXZlU3RhdGUgPSB0aGlzLmdldEFuaW1hdGlvblN0YXRlKHRoaXMuX3BBY3RpdmVOb2RlKTtcblxuXHRcdGlmICh0aGlzLnVwZGF0ZVBvc2l0aW9uKSB7XG5cdFx0XHQvL3VwZGF0ZSBzdHJhaWdodCBhd2F5IHRvIHJlc2V0IHBvc2l0aW9uIGRlbHRhc1xuXHRcdFx0dGhpcy5fcEFjdGl2ZVN0YXRlLnVwZGF0ZSh0aGlzLl9wQWJzb2x1dGVUaW1lKTtcblx0XHRcdHRoaXMuX3BBY3RpdmVTdGF0ZS5wb3NpdGlvbkRlbHRhO1xuXHRcdH1cblxuXHRcdHRoaXMuX2FjdGl2ZVZlcnRleFN0YXRlID0gPElWZXJ0ZXhBbmltYXRpb25TdGF0ZT4gdGhpcy5fcEFjdGl2ZVN0YXRlO1xuXG5cdFx0dGhpcy5zdGFydCgpO1xuXG5cdFx0Ly9hcHBseSBhIHRpbWUgb2Zmc2V0IGlmIHNwZWNpZmllZFxuXHRcdGlmICghaXNOYU4ob2Zmc2V0KSlcblx0XHRcdHRoaXMucmVzZXQobmFtZSwgb2Zmc2V0KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIF9wVXBkYXRlRGVsdGFUaW1lKGR0Om51bWJlcilcblx0e1xuXHRcdHN1cGVyLl9wVXBkYXRlRGVsdGFUaW1lKGR0KTtcblxuXHRcdHZhciBnZW9tZXRyeUZsYWc6Ym9vbGVhbiA9IGZhbHNlO1xuXG5cdFx0aWYgKHRoaXMuX3Bvc2VzWzBdICE9IHRoaXMuX2FjdGl2ZVZlcnRleFN0YXRlLmN1cnJlbnRHZW9tZXRyeSkge1xuXHRcdFx0dGhpcy5fcG9zZXNbMF0gPSB0aGlzLl9hY3RpdmVWZXJ0ZXhTdGF0ZS5jdXJyZW50R2VvbWV0cnk7XG5cdFx0XHRnZW9tZXRyeUZsYWcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLl9wb3Nlc1sxXSAhPSB0aGlzLl9hY3RpdmVWZXJ0ZXhTdGF0ZS5uZXh0R2VvbWV0cnkpIHtcblx0XHRcdHRoaXMuX3Bvc2VzWzFdID0gdGhpcy5fYWN0aXZlVmVydGV4U3RhdGUubmV4dEdlb21ldHJ5O1xuXHRcdFx0Z2VvbWV0cnlGbGFnID0gdHJ1ZTtcblx0XHR9XG5cblx0XHR0aGlzLl93ZWlnaHRzWzBdID0gMSAtICh0aGlzLl93ZWlnaHRzWzFdID0gdGhpcy5fYWN0aXZlVmVydGV4U3RhdGUuYmxlbmRXZWlnaHQpO1xuXG5cdFx0aWYgKGdlb21ldHJ5RmxhZykge1xuXHRcdFx0Ly9pbnZhbGlkYXRlIG1lc2hlc1xuXHRcdFx0dmFyIG1lc2g6TWVzaDtcblx0XHRcdHZhciBsZW46bnVtYmVyID0gdGhpcy5fcE93bmVycy5sZW5ndGg7XG5cdFx0XHRmb3IgKHZhciBpOm51bWJlciA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0XHRtZXNoID0gdGhpcy5fcE93bmVyc1tpXTtcblx0XHRcdFx0bWVzaC5faUludmFsaWRhdGVSZW5kZXJhYmxlR2VvbWV0cmllcygpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIHNldFJlbmRlclN0YXRlKHNoYWRlck9iamVjdDpTaGFkZXJPYmplY3RCYXNlLCByZW5kZXJhYmxlOlJlbmRlcmFibGVCYXNlLCBzdGFnZTpTdGFnZSwgY2FtZXJhOkNhbWVyYSwgdmVydGV4Q29uc3RhbnRPZmZzZXQ6bnVtYmVyIC8qaW50Ki8sIHZlcnRleFN0cmVhbU9mZnNldDpudW1iZXIgLyppbnQqLylcblx0e1xuXHRcdC8vIHRvZG86IGFkZCBjb2RlIGZvciB3aGVuIHJ1bm5pbmcgb24gY3B1XG5cblx0XHQvLyBpZiBubyBwb3NlcyBkZWZpbmVkLCBzZXQgdGVtcCBkYXRhXG5cdFx0aWYgKCF0aGlzLl9wb3Nlcy5sZW5ndGgpIHtcblx0XHRcdHRoaXMuc2V0TnVsbFBvc2Uoc2hhZGVyT2JqZWN0LCByZW5kZXJhYmxlLCBzdGFnZSwgdmVydGV4Q29uc3RhbnRPZmZzZXQsIHZlcnRleFN0cmVhbU9mZnNldCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gdGhpcyB0eXBlIG9mIGFuaW1hdGlvbiBjYW4gb25seSBiZSBTdWJNZXNoXG5cdFx0dmFyIHN1Yk1lc2g6VHJpYW5nbGVTdWJNZXNoID0gPFRyaWFuZ2xlU3ViTWVzaD4gKDxUcmlhbmdsZVN1Yk1lc2hSZW5kZXJhYmxlPiByZW5kZXJhYmxlKS5zdWJNZXNoO1xuXHRcdHZhciBzdWJHZW9tOlN1Ykdlb21ldHJ5QmFzZTtcblx0XHR2YXIgaTpudW1iZXIgLyp1aW50Ki87XG5cdFx0dmFyIGxlbjpudW1iZXIgLyp1aW50Ki8gPSB0aGlzLl9udW1Qb3NlcztcblxuXHRcdCg8SUNvbnRleHRTdGFnZUdMPiBzdGFnZS5jb250ZXh0KS5zZXRQcm9ncmFtQ29uc3RhbnRzRnJvbUFycmF5KENvbnRleHRHTFByb2dyYW1UeXBlLlZFUlRFWCwgdmVydGV4Q29uc3RhbnRPZmZzZXQsIHRoaXMuX3dlaWdodHMsIDEpO1xuXG5cdFx0aWYgKHRoaXMuX2JsZW5kTW9kZSA9PSBWZXJ0ZXhBbmltYXRpb25Nb2RlLkFCU09MVVRFKVxuXHRcdFx0aSA9IDE7XG5cdFx0ZWxzZVxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKDsgaSA8IGxlbjsgKytpKSB7XG5cdFx0XHRzdWJHZW9tID0gdGhpcy5fcG9zZXNbaV0uc3ViR2VvbWV0cmllc1tzdWJNZXNoLl9pSW5kZXhdIHx8IHN1Yk1lc2guc3ViR2VvbWV0cnk7XG5cblx0XHRcdCg8SUNvbnRleHRTdGFnZUdMPiBzdGFnZS5jb250ZXh0KS5hY3RpdmF0ZUJ1ZmZlcih2ZXJ0ZXhTdHJlYW1PZmZzZXQrKywgVmVydGV4RGF0YVBvb2wuZ2V0SXRlbShzdWJHZW9tLCByZW5kZXJhYmxlLmdldEluZGV4RGF0YSgpLCBUcmlhbmdsZVN1Ykdlb21ldHJ5LlBPU0lUSU9OX0RBVEEpLCBzdWJHZW9tLmdldE9mZnNldChUcmlhbmdsZVN1Ykdlb21ldHJ5LlBPU0lUSU9OX0RBVEEpLCBUcmlhbmdsZVN1Ykdlb21ldHJ5LlBPU0lUSU9OX0ZPUk1BVCk7XG5cblx0XHRcdGlmIChzaGFkZXJPYmplY3Qubm9ybWFsRGVwZW5kZW5jaWVzID4gMClcblx0XHRcdFx0KDxJQ29udGV4dFN0YWdlR0w+IHN0YWdlLmNvbnRleHQpLmFjdGl2YXRlQnVmZmVyKHZlcnRleFN0cmVhbU9mZnNldCsrLCBWZXJ0ZXhEYXRhUG9vbC5nZXRJdGVtKHN1Ykdlb20sIHJlbmRlcmFibGUuZ2V0SW5kZXhEYXRhKCksIFRyaWFuZ2xlU3ViR2VvbWV0cnkuTk9STUFMX0RBVEEpLCBzdWJHZW9tLmdldE9mZnNldChUcmlhbmdsZVN1Ykdlb21ldHJ5Lk5PUk1BTF9EQVRBKSwgVHJpYW5nbGVTdWJHZW9tZXRyeS5OT1JNQUxfRk9STUFUKTtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIHNldE51bGxQb3NlKHNoYWRlck9iamVjdDpTaGFkZXJPYmplY3RCYXNlLCByZW5kZXJhYmxlOlJlbmRlcmFibGVCYXNlLCBzdGFnZTpTdGFnZSwgdmVydGV4Q29uc3RhbnRPZmZzZXQ6bnVtYmVyIC8qaW50Ki8sIHZlcnRleFN0cmVhbU9mZnNldDpudW1iZXIgLyppbnQqLylcblx0e1xuXHRcdCg8SUNvbnRleHRTdGFnZUdMPiBzdGFnZS5jb250ZXh0KS5zZXRQcm9ncmFtQ29uc3RhbnRzRnJvbUFycmF5KENvbnRleHRHTFByb2dyYW1UeXBlLlZFUlRFWCwgdmVydGV4Q29uc3RhbnRPZmZzZXQsIHRoaXMuX3dlaWdodHMsIDEpO1xuXG5cdFx0aWYgKHRoaXMuX2JsZW5kTW9kZSA9PSBWZXJ0ZXhBbmltYXRpb25Nb2RlLkFCU09MVVRFKSB7XG5cdFx0XHR2YXIgbGVuOm51bWJlciAvKnVpbnQqLyA9IHRoaXMuX251bVBvc2VzO1xuXHRcdFx0Zm9yICh2YXIgaTpudW1iZXIgLyp1aW50Ki8gPSAxOyBpIDwgbGVuOyArK2kpIHtcblx0XHRcdFx0KDxJQ29udGV4dFN0YWdlR0w+IHN0YWdlLmNvbnRleHQpLmFjdGl2YXRlQnVmZmVyKHZlcnRleFN0cmVhbU9mZnNldCsrLCByZW5kZXJhYmxlLmdldFZlcnRleERhdGEoVHJpYW5nbGVTdWJHZW9tZXRyeS5QT1NJVElPTl9EQVRBKSwgcmVuZGVyYWJsZS5nZXRWZXJ0ZXhPZmZzZXQoVHJpYW5nbGVTdWJHZW9tZXRyeS5QT1NJVElPTl9EQVRBKSwgVHJpYW5nbGVTdWJHZW9tZXRyeS5QT1NJVElPTl9GT1JNQVQpO1xuXG5cdFx0XHRcdGlmIChzaGFkZXJPYmplY3Qubm9ybWFsRGVwZW5kZW5jaWVzID4gMClcblx0XHRcdFx0XHQoPElDb250ZXh0U3RhZ2VHTD4gc3RhZ2UuY29udGV4dCkuYWN0aXZhdGVCdWZmZXIodmVydGV4U3RyZWFtT2Zmc2V0KyssIHJlbmRlcmFibGUuZ2V0VmVydGV4RGF0YShUcmlhbmdsZVN1Ykdlb21ldHJ5Lk5PUk1BTF9EQVRBKSwgcmVuZGVyYWJsZS5nZXRWZXJ0ZXhPZmZzZXQoVHJpYW5nbGVTdWJHZW9tZXRyeS5OT1JNQUxfREFUQSksIFRyaWFuZ2xlU3ViR2VvbWV0cnkuTk9STUFMX0ZPUk1BVCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdC8vIHRvZG86IHNldCB0ZW1wIGRhdGEgZm9yIGFkZGl0aXZlP1xuXHR9XG5cblx0LyoqXG5cdCAqIFZlcmlmaWVzIGlmIHRoZSBhbmltYXRpb24gd2lsbCBiZSB1c2VkIG9uIGNwdS4gTmVlZHMgdG8gYmUgdHJ1ZSBmb3IgYWxsIHBhc3NlcyBmb3IgYSBtYXRlcmlhbCB0byBiZSBhYmxlIHRvIHVzZSBpdCBvbiBncHUuXG5cdCAqIE5lZWRzIHRvIGJlIGNhbGxlZCBpZiBncHUgY29kZSBpcyBwb3RlbnRpYWxseSByZXF1aXJlZC5cblx0ICovXG5cdHB1YmxpYyB0ZXN0R1BVQ29tcGF0aWJpbGl0eShzaGFkZXJPYmplY3Q6U2hhZGVyT2JqZWN0QmFzZSlcblx0e1xuXHR9XG5cblx0cHVibGljIGdldFJlbmRlcmFibGVTdWJHZW9tZXRyeShyZW5kZXJhYmxlOlRyaWFuZ2xlU3ViTWVzaFJlbmRlcmFibGUsIHNvdXJjZVN1Ykdlb21ldHJ5OlRyaWFuZ2xlU3ViR2VvbWV0cnkpOlRyaWFuZ2xlU3ViR2VvbWV0cnlcblx0e1xuXHRcdGlmICh0aGlzLl9ibGVuZE1vZGUgPT0gVmVydGV4QW5pbWF0aW9uTW9kZS5BQlNPTFVURSAmJiB0aGlzLl9wb3Nlcy5sZW5ndGgpXG5cdFx0XHRyZXR1cm4gPFRyaWFuZ2xlU3ViR2VvbWV0cnk+IHRoaXMuX3Bvc2VzWzBdLnN1Ykdlb21ldHJpZXNbcmVuZGVyYWJsZS5zdWJNZXNoLl9pSW5kZXhdIHx8IHNvdXJjZVN1Ykdlb21ldHJ5O1xuXG5cdFx0Ly9ub3RoaW5nIHRvIGRvIGhlcmVcblx0XHRyZXR1cm4gc291cmNlU3ViR2VvbWV0cnk7XG5cdH1cbn1cblxuZXhwb3J0ID0gVmVydGV4QW5pbWF0b3I7Il19