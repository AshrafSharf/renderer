var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var SkeletonBinaryLERPState = require("awayjs-renderergl/lib/animators/states/SkeletonBinaryLERPState");
var AnimationStateEvent = require("awayjs-renderergl/lib/events/AnimationStateEvent");
/**
 *
 */
var CrossfadeTransitionState = (function (_super) {
    __extends(CrossfadeTransitionState, _super);
    function CrossfadeTransitionState(animator, skeletonAnimationNode) {
        _super.call(this, animator, skeletonAnimationNode);
        this._crossfadeTransitionNode = skeletonAnimationNode;
    }
    /**
     * @inheritDoc
     */
    CrossfadeTransitionState.prototype._pUpdateTime = function (time /*int*/) {
        this.blendWeight = Math.abs(time - this._crossfadeTransitionNode.startBlend) / (1000 * this._crossfadeTransitionNode.blendSpeed);
        if (this.blendWeight >= 1) {
            this.blendWeight = 1;
            if (this._animationStateTransitionComplete == null)
                this._animationStateTransitionComplete = new AnimationStateEvent(AnimationStateEvent.TRANSITION_COMPLETE, this._pAnimator, this, this._crossfadeTransitionNode);
            this._crossfadeTransitionNode.dispatchEvent(this._animationStateTransitionComplete);
        }
        _super.prototype._pUpdateTime.call(this, time);
    };
    return CrossfadeTransitionState;
})(SkeletonBinaryLERPState);
module.exports = CrossfadeTransitionState;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvdHJhbnNpdGlvbnMvY3Jvc3NmYWRldHJhbnNpdGlvbnN0YXRlLnRzIl0sIm5hbWVzIjpbIkNyb3NzZmFkZVRyYW5zaXRpb25TdGF0ZSIsIkNyb3NzZmFkZVRyYW5zaXRpb25TdGF0ZS5jb25zdHJ1Y3RvciIsIkNyb3NzZmFkZVRyYW5zaXRpb25TdGF0ZS5fcFVwZGF0ZVRpbWUiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUdBLElBQU8sdUJBQXVCLFdBQWEsZ0VBQWdFLENBQUMsQ0FBQztBQUU3RyxJQUFPLG1CQUFtQixXQUFjLGtEQUFrRCxDQUFDLENBQUM7QUFFNUYsQUFHQTs7R0FERztJQUNHLHdCQUF3QjtJQUFTQSxVQUFqQ0Esd0JBQXdCQSxVQUFnQ0E7SUFLN0RBLFNBTEtBLHdCQUF3QkEsQ0FLakJBLFFBQXFCQSxFQUFFQSxxQkFBNkNBO1FBRS9FQyxrQkFBTUEsUUFBUUEsRUFBMkJBLHFCQUFxQkEsQ0FBQ0EsQ0FBQ0E7UUFFaEVBLElBQUlBLENBQUNBLHdCQUF3QkEsR0FBR0EscUJBQXFCQSxDQUFDQTtJQUN2REEsQ0FBQ0E7SUFFREQ7O09BRUdBO0lBQ0lBLCtDQUFZQSxHQUFuQkEsVUFBb0JBLElBQUlBLENBQVFBLE9BQURBLEFBQVFBO1FBRXRDRSxJQUFJQSxDQUFDQSxXQUFXQSxHQUFHQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQSx3QkFBd0JBLENBQUNBLFVBQVVBLENBQUNBLEdBQUNBLENBQUNBLElBQUlBLEdBQUNBLElBQUlBLENBQUNBLHdCQUF3QkEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0E7UUFFN0hBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFdBQVdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQzNCQSxJQUFJQSxDQUFDQSxXQUFXQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUVyQkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsaUNBQWlDQSxJQUFJQSxJQUFJQSxDQUFDQTtnQkFDbERBLElBQUlBLENBQUNBLGlDQUFpQ0EsR0FBR0EsSUFBSUEsbUJBQW1CQSxDQUFDQSxtQkFBbUJBLENBQUNBLG1CQUFtQkEsRUFBRUEsSUFBSUEsQ0FBQ0EsVUFBVUEsRUFBRUEsSUFBSUEsRUFBRUEsSUFBSUEsQ0FBQ0Esd0JBQXdCQSxDQUFDQSxDQUFDQTtZQUVqS0EsSUFBSUEsQ0FBQ0Esd0JBQXdCQSxDQUFDQSxhQUFhQSxDQUFDQSxJQUFJQSxDQUFDQSxpQ0FBaUNBLENBQUNBLENBQUNBO1FBQ3JGQSxDQUFDQTtRQUVEQSxnQkFBS0EsQ0FBQ0EsWUFBWUEsWUFBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7SUFDMUJBLENBQUNBO0lBQ0ZGLCtCQUFDQTtBQUFEQSxDQTlCQSxBQThCQ0EsRUE5QnNDLHVCQUF1QixFQThCN0Q7QUFFRCxBQUFrQyxpQkFBekIsd0JBQXdCLENBQUMiLCJmaWxlIjoiYW5pbWF0b3JzL3RyYW5zaXRpb25zL0Nyb3NzZmFkZVRyYW5zaXRpb25TdGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQW5pbWF0b3JCYXNlXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2FuaW1hdG9ycy9BbmltYXRvckJhc2VcIik7XG5cbmltcG9ydCBTa2VsZXRvbkJpbmFyeUxFUlBOb2RlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9ub2Rlcy9Ta2VsZXRvbkJpbmFyeUxFUlBOb2RlXCIpO1xuaW1wb3J0IFNrZWxldG9uQmluYXJ5TEVSUFN0YXRlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9zdGF0ZXMvU2tlbGV0b25CaW5hcnlMRVJQU3RhdGVcIik7XG5pbXBvcnQgQ3Jvc3NmYWRlVHJhbnNpdGlvbk5vZGVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYW5pbWF0b3JzL3RyYW5zaXRpb25zL0Nyb3NzZmFkZVRyYW5zaXRpb25Ob2RlXCIpO1xuaW1wb3J0IEFuaW1hdGlvblN0YXRlRXZlbnRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9ldmVudHMvQW5pbWF0aW9uU3RhdGVFdmVudFwiKTtcblxuLyoqXG4gKlxuICovXG5jbGFzcyBDcm9zc2ZhZGVUcmFuc2l0aW9uU3RhdGUgZXh0ZW5kcyBTa2VsZXRvbkJpbmFyeUxFUlBTdGF0ZVxue1xuXHRwcml2YXRlIF9jcm9zc2ZhZGVUcmFuc2l0aW9uTm9kZTpDcm9zc2ZhZGVUcmFuc2l0aW9uTm9kZTtcblx0cHJpdmF0ZSBfYW5pbWF0aW9uU3RhdGVUcmFuc2l0aW9uQ29tcGxldGU6QW5pbWF0aW9uU3RhdGVFdmVudDtcblxuXHRjb25zdHJ1Y3RvcihhbmltYXRvcjpBbmltYXRvckJhc2UsIHNrZWxldG9uQW5pbWF0aW9uTm9kZTpDcm9zc2ZhZGVUcmFuc2l0aW9uTm9kZSlcblx0e1xuXHRcdHN1cGVyKGFuaW1hdG9yLCA8U2tlbGV0b25CaW5hcnlMRVJQTm9kZT4gc2tlbGV0b25BbmltYXRpb25Ob2RlKTtcblxuXHRcdHRoaXMuX2Nyb3NzZmFkZVRyYW5zaXRpb25Ob2RlID0gc2tlbGV0b25BbmltYXRpb25Ob2RlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRwdWJsaWMgX3BVcGRhdGVUaW1lKHRpbWU6bnVtYmVyIC8qaW50Ki8pXG5cdHtcblx0XHR0aGlzLmJsZW5kV2VpZ2h0ID0gTWF0aC5hYnModGltZSAtIHRoaXMuX2Nyb3NzZmFkZVRyYW5zaXRpb25Ob2RlLnN0YXJ0QmxlbmQpLygxMDAwKnRoaXMuX2Nyb3NzZmFkZVRyYW5zaXRpb25Ob2RlLmJsZW5kU3BlZWQpO1xuXG5cdFx0aWYgKHRoaXMuYmxlbmRXZWlnaHQgPj0gMSkge1xuXHRcdFx0dGhpcy5ibGVuZFdlaWdodCA9IDE7XG5cblx0XHRcdGlmICh0aGlzLl9hbmltYXRpb25TdGF0ZVRyYW5zaXRpb25Db21wbGV0ZSA9PSBudWxsKVxuXHRcdFx0XHR0aGlzLl9hbmltYXRpb25TdGF0ZVRyYW5zaXRpb25Db21wbGV0ZSA9IG5ldyBBbmltYXRpb25TdGF0ZUV2ZW50KEFuaW1hdGlvblN0YXRlRXZlbnQuVFJBTlNJVElPTl9DT01QTEVURSwgdGhpcy5fcEFuaW1hdG9yLCB0aGlzLCB0aGlzLl9jcm9zc2ZhZGVUcmFuc2l0aW9uTm9kZSk7XG5cblx0XHRcdHRoaXMuX2Nyb3NzZmFkZVRyYW5zaXRpb25Ob2RlLmRpc3BhdGNoRXZlbnQodGhpcy5fYW5pbWF0aW9uU3RhdGVUcmFuc2l0aW9uQ29tcGxldGUpO1xuXHRcdH1cblxuXHRcdHN1cGVyLl9wVXBkYXRlVGltZSh0aW1lKTtcblx0fVxufVxuXG5leHBvcnQgPSBDcm9zc2ZhZGVUcmFuc2l0aW9uU3RhdGU7Il19