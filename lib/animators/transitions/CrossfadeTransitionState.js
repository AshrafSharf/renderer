var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var SkeletonBinaryLERPState = require("awayjs-renderergl/lib/animators/states/SkeletonBinaryLERPState");
var AnimationStateEvent = require("awayjs-renderergl/lib/events/AnimationStateEvent");
/**
 *
 */
var CrossfadeTransitionState = (function (_super) {
    __extends(CrossfadeTransitionState, _super);
    function CrossfadeTransitionState(animator, skeletonAnimationNode) {
        _super.call(this, animator, skeletonAnimationNode);
        this._crossfadeTransitionNode = skeletonAnimationNode;
    }
    /**
     * @inheritDoc
     */
    CrossfadeTransitionState.prototype._pUpdateTime = function (time /*int*/) {
        this.blendWeight = Math.abs(time - this._crossfadeTransitionNode.startBlend) / (1000 * this._crossfadeTransitionNode.blendSpeed);
        if (this.blendWeight >= 1) {
            this.blendWeight = 1;
            if (this._animationStateTransitionComplete == null)
                this._animationStateTransitionComplete = new AnimationStateEvent(AnimationStateEvent.TRANSITION_COMPLETE, this._pAnimator, this, this._crossfadeTransitionNode);
            this._crossfadeTransitionNode.dispatchEvent(this._animationStateTransitionComplete);
        }
        _super.prototype._pUpdateTime.call(this, time);
    };
    return CrossfadeTransitionState;
})(SkeletonBinaryLERPState);
module.exports = CrossfadeTransitionState;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvdHJhbnNpdGlvbnMvQ3Jvc3NmYWRlVHJhbnNpdGlvblN0YXRlLnRzIl0sIm5hbWVzIjpbIkNyb3NzZmFkZVRyYW5zaXRpb25TdGF0ZSIsIkNyb3NzZmFkZVRyYW5zaXRpb25TdGF0ZS5jb25zdHJ1Y3RvciIsIkNyb3NzZmFkZVRyYW5zaXRpb25TdGF0ZS5fcFVwZGF0ZVRpbWUiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUVBLElBQU8sdUJBQXVCLFdBQWEsZ0VBQWdFLENBQUMsQ0FBQztBQUU3RyxJQUFPLG1CQUFtQixXQUFjLGtEQUFrRCxDQUFDLENBQUM7QUFFNUYsQUFHQTs7R0FERztJQUNHLHdCQUF3QjtJQUFTQSxVQUFqQ0Esd0JBQXdCQSxVQUFnQ0E7SUFLN0RBLFNBTEtBLHdCQUF3QkEsQ0FLakJBLFFBQXFCQSxFQUFFQSxxQkFBNkNBO1FBRS9FQyxrQkFBTUEsUUFBUUEsRUFBMkJBLHFCQUFxQkEsQ0FBQ0EsQ0FBQ0E7UUFFaEVBLElBQUlBLENBQUNBLHdCQUF3QkEsR0FBR0EscUJBQXFCQSxDQUFDQTtJQUN2REEsQ0FBQ0E7SUFFREQ7O09BRUdBO0lBQ0lBLCtDQUFZQSxHQUFuQkEsVUFBb0JBLElBQUlBLENBQVFBLE9BQURBLEFBQVFBO1FBRXRDRSxJQUFJQSxDQUFDQSxXQUFXQSxHQUFHQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQSx3QkFBd0JBLENBQUNBLFVBQVVBLENBQUNBLEdBQUNBLENBQUNBLElBQUlBLEdBQUNBLElBQUlBLENBQUNBLHdCQUF3QkEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0E7UUFFN0hBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFdBQVdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQzNCQSxJQUFJQSxDQUFDQSxXQUFXQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUVyQkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsaUNBQWlDQSxJQUFJQSxJQUFJQSxDQUFDQTtnQkFDbERBLElBQUlBLENBQUNBLGlDQUFpQ0EsR0FBR0EsSUFBSUEsbUJBQW1CQSxDQUFDQSxtQkFBbUJBLENBQUNBLG1CQUFtQkEsRUFBRUEsSUFBSUEsQ0FBQ0EsVUFBVUEsRUFBRUEsSUFBSUEsRUFBRUEsSUFBSUEsQ0FBQ0Esd0JBQXdCQSxDQUFDQSxDQUFDQTtZQUVqS0EsSUFBSUEsQ0FBQ0Esd0JBQXdCQSxDQUFDQSxhQUFhQSxDQUFDQSxJQUFJQSxDQUFDQSxpQ0FBaUNBLENBQUNBLENBQUNBO1FBQ3JGQSxDQUFDQTtRQUVEQSxnQkFBS0EsQ0FBQ0EsWUFBWUEsWUFBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7SUFDMUJBLENBQUNBO0lBQ0ZGLCtCQUFDQTtBQUFEQSxDQTlCQSxBQThCQ0EsRUE5QnNDLHVCQUF1QixFQThCN0Q7QUFFRCxBQUFrQyxpQkFBekIsd0JBQXdCLENBQUMiLCJmaWxlIjoiYW5pbWF0b3JzL3RyYW5zaXRpb25zL0Nyb3NzZmFkZVRyYW5zaXRpb25TdGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQW5pbWF0b3JCYXNlXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9BbmltYXRvckJhc2VcIik7XHJcbmltcG9ydCBTa2VsZXRvbkJpbmFyeUxFUlBOb2RlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9ub2Rlcy9Ta2VsZXRvbkJpbmFyeUxFUlBOb2RlXCIpO1xyXG5pbXBvcnQgU2tlbGV0b25CaW5hcnlMRVJQU3RhdGVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYW5pbWF0b3JzL3N0YXRlcy9Ta2VsZXRvbkJpbmFyeUxFUlBTdGF0ZVwiKTtcclxuaW1wb3J0IENyb3NzZmFkZVRyYW5zaXRpb25Ob2RlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy90cmFuc2l0aW9ucy9Dcm9zc2ZhZGVUcmFuc2l0aW9uTm9kZVwiKTtcclxuaW1wb3J0IEFuaW1hdGlvblN0YXRlRXZlbnRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9ldmVudHMvQW5pbWF0aW9uU3RhdGVFdmVudFwiKTtcclxuXHJcbi8qKlxyXG4gKlxyXG4gKi9cclxuY2xhc3MgQ3Jvc3NmYWRlVHJhbnNpdGlvblN0YXRlIGV4dGVuZHMgU2tlbGV0b25CaW5hcnlMRVJQU3RhdGVcclxue1xyXG5cdHByaXZhdGUgX2Nyb3NzZmFkZVRyYW5zaXRpb25Ob2RlOkNyb3NzZmFkZVRyYW5zaXRpb25Ob2RlO1xyXG5cdHByaXZhdGUgX2FuaW1hdGlvblN0YXRlVHJhbnNpdGlvbkNvbXBsZXRlOkFuaW1hdGlvblN0YXRlRXZlbnQ7XHJcblxyXG5cdGNvbnN0cnVjdG9yKGFuaW1hdG9yOkFuaW1hdG9yQmFzZSwgc2tlbGV0b25BbmltYXRpb25Ob2RlOkNyb3NzZmFkZVRyYW5zaXRpb25Ob2RlKVxyXG5cdHtcclxuXHRcdHN1cGVyKGFuaW1hdG9yLCA8U2tlbGV0b25CaW5hcnlMRVJQTm9kZT4gc2tlbGV0b25BbmltYXRpb25Ob2RlKTtcclxuXHJcblx0XHR0aGlzLl9jcm9zc2ZhZGVUcmFuc2l0aW9uTm9kZSA9IHNrZWxldG9uQW5pbWF0aW9uTm9kZTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0RG9jXHJcblx0ICovXHJcblx0cHVibGljIF9wVXBkYXRlVGltZSh0aW1lOm51bWJlciAvKmludCovKVxyXG5cdHtcclxuXHRcdHRoaXMuYmxlbmRXZWlnaHQgPSBNYXRoLmFicyh0aW1lIC0gdGhpcy5fY3Jvc3NmYWRlVHJhbnNpdGlvbk5vZGUuc3RhcnRCbGVuZCkvKDEwMDAqdGhpcy5fY3Jvc3NmYWRlVHJhbnNpdGlvbk5vZGUuYmxlbmRTcGVlZCk7XHJcblxyXG5cdFx0aWYgKHRoaXMuYmxlbmRXZWlnaHQgPj0gMSkge1xyXG5cdFx0XHR0aGlzLmJsZW5kV2VpZ2h0ID0gMTtcclxuXHJcblx0XHRcdGlmICh0aGlzLl9hbmltYXRpb25TdGF0ZVRyYW5zaXRpb25Db21wbGV0ZSA9PSBudWxsKVxyXG5cdFx0XHRcdHRoaXMuX2FuaW1hdGlvblN0YXRlVHJhbnNpdGlvbkNvbXBsZXRlID0gbmV3IEFuaW1hdGlvblN0YXRlRXZlbnQoQW5pbWF0aW9uU3RhdGVFdmVudC5UUkFOU0lUSU9OX0NPTVBMRVRFLCB0aGlzLl9wQW5pbWF0b3IsIHRoaXMsIHRoaXMuX2Nyb3NzZmFkZVRyYW5zaXRpb25Ob2RlKTtcclxuXHJcblx0XHRcdHRoaXMuX2Nyb3NzZmFkZVRyYW5zaXRpb25Ob2RlLmRpc3BhdGNoRXZlbnQodGhpcy5fYW5pbWF0aW9uU3RhdGVUcmFuc2l0aW9uQ29tcGxldGUpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHN1cGVyLl9wVXBkYXRlVGltZSh0aW1lKTtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCA9IENyb3NzZmFkZVRyYW5zaXRpb25TdGF0ZTsiXX0=