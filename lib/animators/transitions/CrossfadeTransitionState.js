var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var SkeletonBinaryLERPState = require("awayjs-renderergl/lib/animators/states/SkeletonBinaryLERPState");
var AnimationStateEvent = require("awayjs-renderergl/lib/events/AnimationStateEvent");
/**
 *
 */
var CrossfadeTransitionState = (function (_super) {
    __extends(CrossfadeTransitionState, _super);
    function CrossfadeTransitionState(animator, skeletonAnimationNode) {
        _super.call(this, animator, skeletonAnimationNode);
        this._crossfadeTransitionNode = skeletonAnimationNode;
    }
    /**
     * @inheritDoc
     */
    CrossfadeTransitionState.prototype._pUpdateTime = function (time /*int*/) {
        this.blendWeight = Math.abs(time - this._crossfadeTransitionNode.startBlend) / (1000 * this._crossfadeTransitionNode.blendSpeed);
        if (this.blendWeight >= 1) {
            this.blendWeight = 1;
            if (this._animationStateTransitionComplete == null)
                this._animationStateTransitionComplete = new AnimationStateEvent(AnimationStateEvent.TRANSITION_COMPLETE, this._pAnimator, this, this._crossfadeTransitionNode);
            this._crossfadeTransitionNode.dispatchEvent(this._animationStateTransitionComplete);
        }
        _super.prototype._pUpdateTime.call(this, time);
    };
    return CrossfadeTransitionState;
})(SkeletonBinaryLERPState);
module.exports = CrossfadeTransitionState;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvdHJhbnNpdGlvbnMvY3Jvc3NmYWRldHJhbnNpdGlvbnN0YXRlLnRzIl0sIm5hbWVzIjpbIkNyb3NzZmFkZVRyYW5zaXRpb25TdGF0ZSIsIkNyb3NzZmFkZVRyYW5zaXRpb25TdGF0ZS5jb25zdHJ1Y3RvciIsIkNyb3NzZmFkZVRyYW5zaXRpb25TdGF0ZS5fcFVwZGF0ZVRpbWUiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUVBLElBQU8sdUJBQXVCLFdBQWEsZ0VBQWdFLENBQUMsQ0FBQztBQUU3RyxJQUFPLG1CQUFtQixXQUFjLGtEQUFrRCxDQUFDLENBQUM7QUFFNUYsQUFHQTs7R0FERztJQUNHLHdCQUF3QjtJQUFTQSxVQUFqQ0Esd0JBQXdCQSxVQUFnQ0E7SUFLN0RBLFNBTEtBLHdCQUF3QkEsQ0FLakJBLFFBQXFCQSxFQUFFQSxxQkFBNkNBO1FBRS9FQyxrQkFBTUEsUUFBUUEsRUFBMkJBLHFCQUFxQkEsQ0FBQ0EsQ0FBQ0E7UUFFaEVBLElBQUlBLENBQUNBLHdCQUF3QkEsR0FBR0EscUJBQXFCQSxDQUFDQTtJQUN2REEsQ0FBQ0E7SUFFREQ7O09BRUdBO0lBQ0lBLCtDQUFZQSxHQUFuQkEsVUFBb0JBLElBQUlBLENBQVFBLE9BQURBLEFBQVFBO1FBRXRDRSxJQUFJQSxDQUFDQSxXQUFXQSxHQUFHQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQSx3QkFBd0JBLENBQUNBLFVBQVVBLENBQUNBLEdBQUNBLENBQUNBLElBQUlBLEdBQUNBLElBQUlBLENBQUNBLHdCQUF3QkEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0E7UUFFN0hBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFdBQVdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQzNCQSxJQUFJQSxDQUFDQSxXQUFXQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUVyQkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsaUNBQWlDQSxJQUFJQSxJQUFJQSxDQUFDQTtnQkFDbERBLElBQUlBLENBQUNBLGlDQUFpQ0EsR0FBR0EsSUFBSUEsbUJBQW1CQSxDQUFDQSxtQkFBbUJBLENBQUNBLG1CQUFtQkEsRUFBRUEsSUFBSUEsQ0FBQ0EsVUFBVUEsRUFBRUEsSUFBSUEsRUFBRUEsSUFBSUEsQ0FBQ0Esd0JBQXdCQSxDQUFDQSxDQUFDQTtZQUVqS0EsSUFBSUEsQ0FBQ0Esd0JBQXdCQSxDQUFDQSxhQUFhQSxDQUFDQSxJQUFJQSxDQUFDQSxpQ0FBaUNBLENBQUNBLENBQUNBO1FBQ3JGQSxDQUFDQTtRQUVEQSxnQkFBS0EsQ0FBQ0EsWUFBWUEsWUFBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7SUFDMUJBLENBQUNBO0lBQ0ZGLCtCQUFDQTtBQUFEQSxDQTlCQSxBQThCQ0EsRUE5QnNDLHVCQUF1QixFQThCN0Q7QUFFRCxBQUFrQyxpQkFBekIsd0JBQXdCLENBQUMiLCJmaWxlIjoiYW5pbWF0b3JzL3RyYW5zaXRpb25zL0Nyb3NzZmFkZVRyYW5zaXRpb25TdGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQW5pbWF0b3JCYXNlXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9BbmltYXRvckJhc2VcIik7XG5pbXBvcnQgU2tlbGV0b25CaW5hcnlMRVJQTm9kZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvbm9kZXMvU2tlbGV0b25CaW5hcnlMRVJQTm9kZVwiKTtcbmltcG9ydCBTa2VsZXRvbkJpbmFyeUxFUlBTdGF0ZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvc3RhdGVzL1NrZWxldG9uQmluYXJ5TEVSUFN0YXRlXCIpO1xuaW1wb3J0IENyb3NzZmFkZVRyYW5zaXRpb25Ob2RlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy90cmFuc2l0aW9ucy9Dcm9zc2ZhZGVUcmFuc2l0aW9uTm9kZVwiKTtcbmltcG9ydCBBbmltYXRpb25TdGF0ZUV2ZW50XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvZXZlbnRzL0FuaW1hdGlvblN0YXRlRXZlbnRcIik7XG5cbi8qKlxuICpcbiAqL1xuY2xhc3MgQ3Jvc3NmYWRlVHJhbnNpdGlvblN0YXRlIGV4dGVuZHMgU2tlbGV0b25CaW5hcnlMRVJQU3RhdGVcbntcblx0cHJpdmF0ZSBfY3Jvc3NmYWRlVHJhbnNpdGlvbk5vZGU6Q3Jvc3NmYWRlVHJhbnNpdGlvbk5vZGU7XG5cdHByaXZhdGUgX2FuaW1hdGlvblN0YXRlVHJhbnNpdGlvbkNvbXBsZXRlOkFuaW1hdGlvblN0YXRlRXZlbnQ7XG5cblx0Y29uc3RydWN0b3IoYW5pbWF0b3I6QW5pbWF0b3JCYXNlLCBza2VsZXRvbkFuaW1hdGlvbk5vZGU6Q3Jvc3NmYWRlVHJhbnNpdGlvbk5vZGUpXG5cdHtcblx0XHRzdXBlcihhbmltYXRvciwgPFNrZWxldG9uQmluYXJ5TEVSUE5vZGU+IHNrZWxldG9uQW5pbWF0aW9uTm9kZSk7XG5cblx0XHR0aGlzLl9jcm9zc2ZhZGVUcmFuc2l0aW9uTm9kZSA9IHNrZWxldG9uQW5pbWF0aW9uTm9kZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIF9wVXBkYXRlVGltZSh0aW1lOm51bWJlciAvKmludCovKVxuXHR7XG5cdFx0dGhpcy5ibGVuZFdlaWdodCA9IE1hdGguYWJzKHRpbWUgLSB0aGlzLl9jcm9zc2ZhZGVUcmFuc2l0aW9uTm9kZS5zdGFydEJsZW5kKS8oMTAwMCp0aGlzLl9jcm9zc2ZhZGVUcmFuc2l0aW9uTm9kZS5ibGVuZFNwZWVkKTtcblxuXHRcdGlmICh0aGlzLmJsZW5kV2VpZ2h0ID49IDEpIHtcblx0XHRcdHRoaXMuYmxlbmRXZWlnaHQgPSAxO1xuXG5cdFx0XHRpZiAodGhpcy5fYW5pbWF0aW9uU3RhdGVUcmFuc2l0aW9uQ29tcGxldGUgPT0gbnVsbClcblx0XHRcdFx0dGhpcy5fYW5pbWF0aW9uU3RhdGVUcmFuc2l0aW9uQ29tcGxldGUgPSBuZXcgQW5pbWF0aW9uU3RhdGVFdmVudChBbmltYXRpb25TdGF0ZUV2ZW50LlRSQU5TSVRJT05fQ09NUExFVEUsIHRoaXMuX3BBbmltYXRvciwgdGhpcywgdGhpcy5fY3Jvc3NmYWRlVHJhbnNpdGlvbk5vZGUpO1xuXG5cdFx0XHR0aGlzLl9jcm9zc2ZhZGVUcmFuc2l0aW9uTm9kZS5kaXNwYXRjaEV2ZW50KHRoaXMuX2FuaW1hdGlvblN0YXRlVHJhbnNpdGlvbkNvbXBsZXRlKTtcblx0XHR9XG5cblx0XHRzdXBlci5fcFVwZGF0ZVRpbWUodGltZSk7XG5cdH1cbn1cblxuZXhwb3J0ID0gQ3Jvc3NmYWRlVHJhbnNpdGlvblN0YXRlOyJdfQ==