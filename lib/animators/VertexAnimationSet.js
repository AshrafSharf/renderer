var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var AnimationSetBase = require("awayjs-renderergl/lib/animators/AnimationSetBase");
var VertexAnimationMode = require("awayjs-renderergl/lib/animators/data/VertexAnimationMode");
/**
 * The animation data set used by vertex-based animators, containing vertex animation state data.
 *
 * @see VertexAnimator
 */
var VertexAnimationSet = (function (_super) {
    __extends(VertexAnimationSet, _super);
    /**
     * Returns whether or not normal data is used in last set GPU pass of the vertex shader.
     */
    //		public get useNormals():boolean
    //		{
    //			return this._uploadNormals;
    //		}
    /**
     * Creates a new <code>VertexAnimationSet</code> object.
     *
     * @param numPoses The number of poses made available at once to the GPU animation code.
     * @param blendMode Optional value for setting the animation mode of the vertex animator object.
     *
     * @see away3d.animators.data.VertexAnimationMode
     */
    function VertexAnimationSet(numPoses, blendMode) {
        if (numPoses === void 0) { numPoses = 2; }
        if (blendMode === void 0) { blendMode = "absolute"; }
        _super.call(this);
        this._numPoses = numPoses;
        this._blendMode = blendMode;
    }
    Object.defineProperty(VertexAnimationSet.prototype, "numPoses", {
        /**
         * Returns the number of poses made available at once to the GPU animation code.
         */
        get: function () {
            return this._numPoses;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VertexAnimationSet.prototype, "blendMode", {
        /**
         * Returns the active blend mode of the vertex animator object.
         */
        get: function () {
            return this._blendMode;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @inheritDoc
     */
    VertexAnimationSet.prototype.getAGALVertexCode = function (shaderObject) {
        if (this._blendMode == VertexAnimationMode.ABSOLUTE)
            return this.getAbsoluteAGALCode(shaderObject);
        else
            return this.getAdditiveAGALCode(shaderObject);
    };
    /**
     * @inheritDoc
     */
    VertexAnimationSet.prototype.activate = function (shaderObject, stage) {
        //			var uID:number = pass._iUniqueId;
        //			this._uploadNormals = <boolean> this._useNormals[uID];
        //			this._uploadTangents = <boolean> this._useTangents[uID];
    };
    /**
     * @inheritDoc
     */
    VertexAnimationSet.prototype.deactivate = function (shaderObject, stage) {
        //			var uID:number = pass._iUniqueId;
        //			var index:number /*uint*/ = this._streamIndices[uID];
        //			var context:IContextGL = <IContextGL> stage.context;
        //			context.setVertexBufferAt(index, null);
        //			if (this._uploadNormals)
        //				context.setVertexBufferAt(index + 1, null);
        //			if (this._uploadTangents)
        //				context.setVertexBufferAt(index + 2, null);
    };
    /**
     * @inheritDoc
     */
    VertexAnimationSet.prototype.getAGALFragmentCode = function (shaderObject, shadedTarget) {
        return "";
    };
    /**
     * @inheritDoc
     */
    VertexAnimationSet.prototype.getAGALUVCode = function (shaderObject) {
        return "mov " + shaderObject.uvTarget + "," + shaderObject.uvSource + "\n";
    };
    /**
     * @inheritDoc
     */
    VertexAnimationSet.prototype.doneAGALCode = function (shaderObject) {
    };
    /**
     * Generates the vertex AGAL code for absolute blending.
     */
    VertexAnimationSet.prototype.getAbsoluteAGALCode = function (shaderObject) {
        var code = "";
        var temp1 = this._pFindTempReg(shaderObject.animationTargetRegisters);
        var temp2 = this._pFindTempReg(shaderObject.animationTargetRegisters, temp1);
        var regs = new Array("x", "y", "z", "w");
        var len = shaderObject.animatableAttributes.length;
        var constantReg = "vc" + shaderObject.numUsedVertexConstants;
        if (len > 2)
            len = 2;
        var streamIndex = shaderObject.numUsedStreams;
        for (var i = 0; i < len; ++i) {
            code += "mul " + temp1 + ", " + shaderObject.animatableAttributes[i] + ", " + constantReg + "." + regs[0] + "\n";
            for (var j = 1; j < this._numPoses; ++j) {
                code += "mul " + temp2 + ", va" + streamIndex + ", " + constantReg + "." + regs[j] + "\n";
                if (j < this._numPoses - 1)
                    code += "add " + temp1 + ", " + temp1 + ", " + temp2 + "\n";
                ++streamIndex;
            }
            code += "add " + shaderObject.animationTargetRegisters[i] + ", " + temp1 + ", " + temp2 + "\n";
        }
        // add code for bitangents if tangents are used
        if (shaderObject.tangentDependencies > 0 || shaderObject.outputsNormals) {
            code += "dp3 " + temp1 + ".x, " + shaderObject.animatableAttributes[2] + ", " + shaderObject.animationTargetRegisters[1] + "\n" + "mul " + temp1 + ", " + shaderObject.animationTargetRegisters[1] + ", " + temp1 + ".x\n" + "sub " + shaderObject.animationTargetRegisters[2] + ", " + shaderObject.animationTargetRegisters[2] + ", " + temp1 + "\n";
        }
        return code;
    };
    /**
     * Generates the vertex AGAL code for additive blending.
     */
    VertexAnimationSet.prototype.getAdditiveAGALCode = function (shaderObject) {
        var code = "";
        var len = shaderObject.animatableAttributes.length;
        var regs = ["x", "y", "z", "w"];
        var temp1 = this._pFindTempReg(shaderObject.animationTargetRegisters);
        var k /*uint*/;
        var streamIndex = shaderObject.numUsedStreams;
        if (len > 2)
            len = 2;
        code += "mov  " + shaderObject.animationTargetRegisters[0] + ", " + shaderObject.animatableAttributes[0] + "\n";
        if (shaderObject.normalDependencies > 0)
            code += "mov " + shaderObject.animationTargetRegisters[1] + ", " + shaderObject.animatableAttributes[1] + "\n";
        for (var i = 0; i < len; ++i) {
            for (var j = 0; j < this._numPoses; ++j) {
                code += "mul " + temp1 + ", va" + (streamIndex + k) + ", vc" + shaderObject.numUsedVertexConstants + "." + regs[j] + "\n" + "add " + shaderObject.animationTargetRegisters[i] + ", " + shaderObject.animationTargetRegisters[i] + ", " + temp1 + "\n";
                k++;
            }
        }
        if (shaderObject.tangentDependencies > 0 || shaderObject.outputsNormals) {
            code += "dp3 " + temp1 + ".x, " + shaderObject.animatableAttributes[2] + ", " + shaderObject.animationTargetRegisters[1] + "\n" + "mul " + temp1 + ", " + shaderObject.animationTargetRegisters[1] + ", " + temp1 + ".x\n" + "sub " + shaderObject.animationTargetRegisters[2] + ", " + shaderObject.animatableAttributes[2] + ", " + temp1 + "\n";
        }
        return code;
    };
    return VertexAnimationSet;
})(AnimationSetBase);
module.exports = VertexAnimationSet;

//# sourceMappingURL=data:application/json;base64,