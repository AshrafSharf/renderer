var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var AnimationSetBase = require("awayjs-renderergl/lib/animators/AnimationSetBase");
var VertexAnimationMode = require("awayjs-renderergl/lib/animators/data/VertexAnimationMode");
/**
 * The animation data set used by vertex-based animators, containing vertex animation state data.
 *
 * @see VertexAnimator
 */
var VertexAnimationSet = (function (_super) {
    __extends(VertexAnimationSet, _super);
    /**
     * Returns whether or not normal data is used in last set GPU pass of the vertex shader.
     */
    //		public get useNormals():boolean
    //		{
    //			return this._uploadNormals;
    //		}
    /**
     * Creates a new <code>VertexAnimationSet</code> object.
     *
     * @param numPoses The number of poses made available at once to the GPU animation code.
     * @param blendMode Optional value for setting the animation mode of the vertex animator object.
     *
     * @see away3d.animators.data.VertexAnimationMode
     */
    function VertexAnimationSet(numPoses, blendMode) {
        if (numPoses === void 0) { numPoses = 2; }
        if (blendMode === void 0) { blendMode = "absolute"; }
        _super.call(this);
        this._numPoses = numPoses;
        this._blendMode = blendMode;
    }
    Object.defineProperty(VertexAnimationSet.prototype, "numPoses", {
        /**
         * Returns the number of poses made available at once to the GPU animation code.
         */
        get: function () {
            return this._numPoses;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VertexAnimationSet.prototype, "blendMode", {
        /**
         * Returns the active blend mode of the vertex animator object.
         */
        get: function () {
            return this._blendMode;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @inheritDoc
     */
    VertexAnimationSet.prototype.getAGALVertexCode = function (shaderObject) {
        if (this._blendMode == VertexAnimationMode.ABSOLUTE)
            return this.getAbsoluteAGALCode(shaderObject);
        else
            return this.getAdditiveAGALCode(shaderObject);
    };
    /**
     * @inheritDoc
     */
    VertexAnimationSet.prototype.activate = function (shaderObject, stage) {
        //			var uID:number = pass._iUniqueId;
        //			this._uploadNormals = <boolean> this._useNormals[uID];
        //			this._uploadTangents = <boolean> this._useTangents[uID];
    };
    /**
     * @inheritDoc
     */
    VertexAnimationSet.prototype.deactivate = function (shaderObject, stage) {
        //			var uID:number = pass._iUniqueId;
        //			var index:number /*uint*/ = this._streamIndices[uID];
        //			var context:IContextGL = <IContextGL> stage.context;
        //			context.setVertexBufferAt(index, null);
        //			if (this._uploadNormals)
        //				context.setVertexBufferAt(index + 1, null);
        //			if (this._uploadTangents)
        //				context.setVertexBufferAt(index + 2, null);
    };
    /**
     * @inheritDoc
     */
    VertexAnimationSet.prototype.getAGALFragmentCode = function (shaderObject, shadedTarget) {
        return "";
    };
    /**
     * @inheritDoc
     */
    VertexAnimationSet.prototype.getAGALUVCode = function (shaderObject) {
        return "mov " + shaderObject.uvTarget + "," + shaderObject.uvSource + "\n";
    };
    /**
     * @inheritDoc
     */
    VertexAnimationSet.prototype.doneAGALCode = function (shaderObject) {
    };
    /**
     * Generates the vertex AGAL code for absolute blending.
     */
    VertexAnimationSet.prototype.getAbsoluteAGALCode = function (shaderObject) {
        var code = "";
        var temp1 = this._pFindTempReg(shaderObject.animationTargetRegisters);
        var temp2 = this._pFindTempReg(shaderObject.animationTargetRegisters, temp1);
        var regs = new Array("x", "y", "z", "w");
        var len = shaderObject.animatableAttributes.length;
        var constantReg = "vc" + shaderObject.numUsedVertexConstants;
        if (len > 2)
            len = 2;
        var streamIndex = shaderObject.numUsedStreams;
        for (var i = 0; i < len; ++i) {
            code += "mul " + temp1 + ", " + shaderObject.animatableAttributes[i] + ", " + constantReg + "." + regs[0] + "\n";
            for (var j = 1; j < this._numPoses; ++j) {
                code += "mul " + temp2 + ", va" + streamIndex + ", " + constantReg + "." + regs[j] + "\n";
                if (j < this._numPoses - 1)
                    code += "add " + temp1 + ", " + temp1 + ", " + temp2 + "\n";
                ++streamIndex;
            }
            code += "add " + shaderObject.animationTargetRegisters[i] + ", " + temp1 + ", " + temp2 + "\n";
        }
        // add code for bitangents if tangents are used
        if (shaderObject.tangentDependencies > 0 || shaderObject.outputsNormals) {
            code += "dp3 " + temp1 + ".x, " + shaderObject.animatableAttributes[2] + ", " + shaderObject.animationTargetRegisters[1] + "\n" + "mul " + temp1 + ", " + shaderObject.animationTargetRegisters[1] + ", " + temp1 + ".x\n" + "sub " + shaderObject.animationTargetRegisters[2] + ", " + shaderObject.animationTargetRegisters[2] + ", " + temp1 + "\n";
        }
        return code;
    };
    /**
     * Generates the vertex AGAL code for additive blending.
     */
    VertexAnimationSet.prototype.getAdditiveAGALCode = function (shaderObject) {
        var code = "";
        var len = shaderObject.animatableAttributes.length;
        var regs = ["x", "y", "z", "w"];
        var temp1 = this._pFindTempReg(shaderObject.animationTargetRegisters);
        var k /*uint*/;
        var streamIndex = shaderObject.numUsedStreams;
        if (len > 2)
            len = 2;
        code += "mov  " + shaderObject.animationTargetRegisters[0] + ", " + shaderObject.animatableAttributes[0] + "\n";
        if (shaderObject.normalDependencies > 0)
            code += "mov " + shaderObject.animationTargetRegisters[1] + ", " + shaderObject.animatableAttributes[1] + "\n";
        for (var i = 0; i < len; ++i) {
            for (var j = 0; j < this._numPoses; ++j) {
                code += "mul " + temp1 + ", va" + (streamIndex + k) + ", vc" + shaderObject.numUsedVertexConstants + "." + regs[j] + "\n" + "add " + shaderObject.animationTargetRegisters[i] + ", " + shaderObject.animationTargetRegisters[i] + ", " + temp1 + "\n";
                k++;
            }
        }
        if (shaderObject.tangentDependencies > 0 || shaderObject.outputsNormals) {
            code += "dp3 " + temp1 + ".x, " + shaderObject.animatableAttributes[2] + ", " + shaderObject.animationTargetRegisters[1] + "\n" + "mul " + temp1 + ", " + shaderObject.animationTargetRegisters[1] + ", " + temp1 + ".x\n" + "sub " + shaderObject.animationTargetRegisters[2] + ", " + shaderObject.animatableAttributes[2] + ", " + temp1 + "\n";
        }
        return code;
    };
    return VertexAnimationSet;
})(AnimationSetBase);
module.exports = VertexAnimationSet;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvdmVydGV4YW5pbWF0aW9uc2V0LnRzIl0sIm5hbWVzIjpbIlZlcnRleEFuaW1hdGlvblNldCIsIlZlcnRleEFuaW1hdGlvblNldC5jb25zdHJ1Y3RvciIsIlZlcnRleEFuaW1hdGlvblNldC5udW1Qb3NlcyIsIlZlcnRleEFuaW1hdGlvblNldC5ibGVuZE1vZGUiLCJWZXJ0ZXhBbmltYXRpb25TZXQuZ2V0QUdBTFZlcnRleENvZGUiLCJWZXJ0ZXhBbmltYXRpb25TZXQuYWN0aXZhdGUiLCJWZXJ0ZXhBbmltYXRpb25TZXQuZGVhY3RpdmF0ZSIsIlZlcnRleEFuaW1hdGlvblNldC5nZXRBR0FMRnJhZ21lbnRDb2RlIiwiVmVydGV4QW5pbWF0aW9uU2V0LmdldEFHQUxVVkNvZGUiLCJWZXJ0ZXhBbmltYXRpb25TZXQuZG9uZUFHQUxDb2RlIiwiVmVydGV4QW5pbWF0aW9uU2V0LmdldEFic29sdXRlQUdBTENvZGUiLCJWZXJ0ZXhBbmltYXRpb25TZXQuZ2V0QWRkaXRpdmVBR0FMQ29kZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBSUEsSUFBTyxnQkFBZ0IsV0FBZSxrREFBa0QsQ0FBQyxDQUFDO0FBQzFGLElBQU8sbUJBQW1CLFdBQWMsMERBQTBELENBQUMsQ0FBQztBQUdwRyxBQUtBOzs7O0dBREc7SUFDRyxrQkFBa0I7SUFBU0EsVUFBM0JBLGtCQUFrQkEsVUFBeUJBO0lBcUJoREE7O09BRUdBO0lBQ0pBLG1DQUFtQ0E7SUFDbkNBLEtBQUtBO0lBQ0xBLGdDQUFnQ0E7SUFDaENBLEtBQUtBO0lBRUpBOzs7Ozs7O09BT0dBO0lBQ0hBLFNBckNLQSxrQkFBa0JBLENBcUNYQSxRQUE0QkEsRUFBRUEsU0FBNkJBO1FBQTNEQyx3QkFBNEJBLEdBQTVCQSxZQUE0QkE7UUFBRUEseUJBQTZCQSxHQUE3QkEsc0JBQTZCQTtRQUV0RUEsaUJBQU9BLENBQUNBO1FBQ1JBLElBQUlBLENBQUNBLFNBQVNBLEdBQUdBLFFBQVFBLENBQUNBO1FBQzFCQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxTQUFTQSxDQUFDQTtJQUU3QkEsQ0FBQ0E7SUFuQ0RELHNCQUFXQSx3Q0FBUUE7UUFIbkJBOztXQUVHQTthQUNIQTtZQUVDRSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQTtRQUN2QkEsQ0FBQ0E7OztPQUFBRjtJQUtEQSxzQkFBV0EseUNBQVNBO1FBSHBCQTs7V0FFR0E7YUFDSEE7WUFFQ0csTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0E7UUFDeEJBLENBQUNBOzs7T0FBQUg7SUEwQkRBOztPQUVHQTtJQUNJQSw4Q0FBaUJBLEdBQXhCQSxVQUF5QkEsWUFBNkJBO1FBRXJESSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxJQUFJQSxtQkFBbUJBLENBQUNBLFFBQVFBLENBQUNBO1lBQ25EQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxtQkFBbUJBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBO1FBQy9DQSxJQUFJQTtZQUNIQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxtQkFBbUJBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBO0lBQ2hEQSxDQUFDQTtJQUVESjs7T0FFR0E7SUFDSUEscUNBQVFBLEdBQWZBLFVBQWdCQSxZQUE2QkEsRUFBRUEsS0FBV0E7UUFFM0RLLHNDQUFzQ0E7UUFDdENBLDJEQUEyREE7UUFDM0RBLDZEQUE2REE7SUFDNURBLENBQUNBO0lBRURMOztPQUVHQTtJQUNJQSx1Q0FBVUEsR0FBakJBLFVBQWtCQSxZQUE2QkEsRUFBRUEsS0FBV0E7UUFFN0RNLHNDQUFzQ0E7UUFDdENBLDBEQUEwREE7UUFDMURBLHlEQUF5REE7UUFDekRBLDRDQUE0Q0E7UUFDNUNBLDZCQUE2QkE7UUFDN0JBLGlEQUFpREE7UUFDakRBLDhCQUE4QkE7UUFDOUJBLGlEQUFpREE7SUFDaERBLENBQUNBO0lBRUROOztPQUVHQTtJQUNJQSxnREFBbUJBLEdBQTFCQSxVQUEyQkEsWUFBNkJBLEVBQUVBLFlBQW1CQTtRQUU1RU8sTUFBTUEsQ0FBQ0EsRUFBRUEsQ0FBQ0E7SUFDWEEsQ0FBQ0E7SUFFRFA7O09BRUdBO0lBQ0lBLDBDQUFhQSxHQUFwQkEsVUFBcUJBLFlBQTZCQTtRQUVqRFEsTUFBTUEsQ0FBQ0EsTUFBTUEsR0FBR0EsWUFBWUEsQ0FBQ0EsUUFBUUEsR0FBR0EsR0FBR0EsR0FBR0EsWUFBWUEsQ0FBQ0EsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0E7SUFDNUVBLENBQUNBO0lBRURSOztPQUVHQTtJQUNJQSx5Q0FBWUEsR0FBbkJBLFVBQW9CQSxZQUE2QkE7SUFHakRTLENBQUNBO0lBRURUOztPQUVHQTtJQUNLQSxnREFBbUJBLEdBQTNCQSxVQUE0QkEsWUFBNkJBO1FBRXhEVSxJQUFJQSxJQUFJQSxHQUFVQSxFQUFFQSxDQUFDQTtRQUNyQkEsSUFBSUEsS0FBS0EsR0FBVUEsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsWUFBWUEsQ0FBQ0Esd0JBQXdCQSxDQUFDQSxDQUFDQTtRQUM3RUEsSUFBSUEsS0FBS0EsR0FBVUEsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsWUFBWUEsQ0FBQ0Esd0JBQXdCQSxFQUFFQSxLQUFLQSxDQUFDQSxDQUFDQTtRQUNwRkEsSUFBSUEsSUFBSUEsR0FBaUJBLElBQUlBLEtBQUtBLENBQVNBLEdBQUdBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBO1FBQy9EQSxJQUFJQSxHQUFHQSxHQUFtQkEsWUFBWUEsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxNQUFNQSxDQUFDQTtRQUNuRUEsSUFBSUEsV0FBV0EsR0FBVUEsSUFBSUEsR0FBR0EsWUFBWUEsQ0FBQ0Esc0JBQXNCQSxDQUFDQTtRQUVwRUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDWEEsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDVEEsSUFBSUEsV0FBV0EsR0FBbUJBLFlBQVlBLENBQUNBLGNBQWNBLENBQUNBO1FBRTlEQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFtQkEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsR0FBR0EsRUFBRUEsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0E7WUFDOUNBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLEtBQUtBLEdBQUdBLElBQUlBLEdBQUdBLFlBQVlBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsR0FBR0EsV0FBV0EsR0FBR0EsR0FBR0EsR0FBR0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFFakhBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQW1CQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxTQUFTQSxFQUFFQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQTtnQkFDekRBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLEtBQUtBLEdBQUdBLE1BQU1BLEdBQUdBLFdBQVdBLEdBQUdBLElBQUlBLEdBQUdBLFdBQVdBLEdBQUdBLEdBQUdBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBO2dCQUUxRkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7b0JBQzFCQSxJQUFJQSxJQUFJQSxNQUFNQSxHQUFHQSxLQUFLQSxHQUFHQSxJQUFJQSxHQUFHQSxLQUFLQSxHQUFHQSxJQUFJQSxHQUFHQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQTtnQkFFN0RBLEVBQUVBLFdBQVdBLENBQUNBO1lBQ2ZBLENBQUNBO1lBRURBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLFlBQVlBLENBQUNBLHdCQUF3QkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsR0FBR0EsS0FBS0EsR0FBR0EsSUFBSUEsR0FBR0EsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0E7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Z0IsRUFxTGhEO0FBRUQsQUFBNEIsaUJBQW5CLGtCQUFrQixDQUFDIiwiZmlsZSI6ImFuaW1hdG9ycy9WZXJ0ZXhBbmltYXRpb25TZXQuanMiLCJzb3VyY2VSb290IjoiLi4vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IElBbmltYXRpb25TZXRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2FuaW1hdG9ycy9JQW5pbWF0aW9uU2V0XCIpO1xuXG5pbXBvcnQgU3RhZ2VcdFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL1N0YWdlXCIpO1xuXG5pbXBvcnQgQW5pbWF0aW9uU2V0QmFzZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYW5pbWF0b3JzL0FuaW1hdGlvblNldEJhc2VcIik7XG5pbXBvcnQgVmVydGV4QW5pbWF0aW9uTW9kZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9kYXRhL1ZlcnRleEFuaW1hdGlvbk1vZGVcIik7XG5pbXBvcnQgU2hhZGVyT2JqZWN0QmFzZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvbWF0ZXJpYWxzL2NvbXBpbGF0aW9uL1NoYWRlck9iamVjdEJhc2VcIik7XG5cbi8qKlxuICogVGhlIGFuaW1hdGlvbiBkYXRhIHNldCB1c2VkIGJ5IHZlcnRleC1iYXNlZCBhbmltYXRvcnMsIGNvbnRhaW5pbmcgdmVydGV4IGFuaW1hdGlvbiBzdGF0ZSBkYXRhLlxuICpcbiAqIEBzZWUgVmVydGV4QW5pbWF0b3JcbiAqL1xuY2xhc3MgVmVydGV4QW5pbWF0aW9uU2V0IGV4dGVuZHMgQW5pbWF0aW9uU2V0QmFzZSBpbXBsZW1lbnRzIElBbmltYXRpb25TZXRcbntcblx0cHJpdmF0ZSBfbnVtUG9zZXM6bnVtYmVyIC8qdWludCovO1xuXHRwcml2YXRlIF9ibGVuZE1vZGU6c3RyaW5nO1xuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgcG9zZXMgbWFkZSBhdmFpbGFibGUgYXQgb25jZSB0byB0aGUgR1BVIGFuaW1hdGlvbiBjb2RlLlxuXHQgKi9cblx0cHVibGljIGdldCBudW1Qb3NlcygpOm51bWJlciAvKnVpbnQqL1xuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX251bVBvc2VzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGFjdGl2ZSBibGVuZCBtb2RlIG9mIHRoZSB2ZXJ0ZXggYW5pbWF0b3Igb2JqZWN0LlxuXHQgKi9cblx0cHVibGljIGdldCBibGVuZE1vZGUoKTpzdHJpbmdcblx0e1xuXHRcdHJldHVybiB0aGlzLl9ibGVuZE1vZGU7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCBub3JtYWwgZGF0YSBpcyB1c2VkIGluIGxhc3Qgc2V0IEdQVSBwYXNzIG9mIHRoZSB2ZXJ0ZXggc2hhZGVyLlxuXHQgKi9cbi8vXHRcdHB1YmxpYyBnZXQgdXNlTm9ybWFscygpOmJvb2xlYW5cbi8vXHRcdHtcbi8vXHRcdFx0cmV0dXJuIHRoaXMuX3VwbG9hZE5vcm1hbHM7XG4vL1x0XHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBuZXcgPGNvZGU+VmVydGV4QW5pbWF0aW9uU2V0PC9jb2RlPiBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSBudW1Qb3NlcyBUaGUgbnVtYmVyIG9mIHBvc2VzIG1hZGUgYXZhaWxhYmxlIGF0IG9uY2UgdG8gdGhlIEdQVSBhbmltYXRpb24gY29kZS5cblx0ICogQHBhcmFtIGJsZW5kTW9kZSBPcHRpb25hbCB2YWx1ZSBmb3Igc2V0dGluZyB0aGUgYW5pbWF0aW9uIG1vZGUgb2YgdGhlIHZlcnRleCBhbmltYXRvciBvYmplY3QuXG5cdCAqXG5cdCAqIEBzZWUgYXdheTNkLmFuaW1hdG9ycy5kYXRhLlZlcnRleEFuaW1hdGlvbk1vZGVcblx0ICovXG5cdGNvbnN0cnVjdG9yKG51bVBvc2VzOm51bWJlciAvKnVpbnQqLyA9IDIsIGJsZW5kTW9kZTpzdHJpbmcgPSBcImFic29sdXRlXCIpXG5cdHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMuX251bVBvc2VzID0gbnVtUG9zZXM7XG5cdFx0dGhpcy5fYmxlbmRNb2RlID0gYmxlbmRNb2RlO1xuXG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHB1YmxpYyBnZXRBR0FMVmVydGV4Q29kZShzaGFkZXJPYmplY3Q6U2hhZGVyT2JqZWN0QmFzZSk6c3RyaW5nXG5cdHtcblx0XHRpZiAodGhpcy5fYmxlbmRNb2RlID09IFZlcnRleEFuaW1hdGlvbk1vZGUuQUJTT0xVVEUpXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXRBYnNvbHV0ZUFHQUxDb2RlKHNoYWRlck9iamVjdCk7XG5cdFx0ZWxzZVxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0QWRkaXRpdmVBR0FMQ29kZShzaGFkZXJPYmplY3QpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRwdWJsaWMgYWN0aXZhdGUoc2hhZGVyT2JqZWN0OlNoYWRlck9iamVjdEJhc2UsIHN0YWdlOlN0YWdlKVxuXHR7XG4vL1x0XHRcdHZhciB1SUQ6bnVtYmVyID0gcGFzcy5faVVuaXF1ZUlkO1xuLy9cdFx0XHR0aGlzLl91cGxvYWROb3JtYWxzID0gPGJvb2xlYW4+IHRoaXMuX3VzZU5vcm1hbHNbdUlEXTtcbi8vXHRcdFx0dGhpcy5fdXBsb2FkVGFuZ2VudHMgPSA8Ym9vbGVhbj4gdGhpcy5fdXNlVGFuZ2VudHNbdUlEXTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIGRlYWN0aXZhdGUoc2hhZGVyT2JqZWN0OlNoYWRlck9iamVjdEJhc2UsIHN0YWdlOlN0YWdlKVxuXHR7XG4vL1x0XHRcdHZhciB1SUQ6bnVtYmVyID0gcGFzcy5faVVuaXF1ZUlkO1xuLy9cdFx0XHR2YXIgaW5kZXg6bnVtYmVyIC8qdWludCovID0gdGhpcy5fc3RyZWFtSW5kaWNlc1t1SURdO1xuLy9cdFx0XHR2YXIgY29udGV4dDpJQ29udGV4dEdMID0gPElDb250ZXh0R0w+IHN0YWdlLmNvbnRleHQ7XG4vL1x0XHRcdGNvbnRleHQuc2V0VmVydGV4QnVmZmVyQXQoaW5kZXgsIG51bGwpO1xuLy9cdFx0XHRpZiAodGhpcy5fdXBsb2FkTm9ybWFscylcbi8vXHRcdFx0XHRjb250ZXh0LnNldFZlcnRleEJ1ZmZlckF0KGluZGV4ICsgMSwgbnVsbCk7XG4vL1x0XHRcdGlmICh0aGlzLl91cGxvYWRUYW5nZW50cylcbi8vXHRcdFx0XHRjb250ZXh0LnNldFZlcnRleEJ1ZmZlckF0KGluZGV4ICsgMiwgbnVsbCk7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHB1YmxpYyBnZXRBR0FMRnJhZ21lbnRDb2RlKHNoYWRlck9iamVjdDpTaGFkZXJPYmplY3RCYXNlLCBzaGFkZWRUYXJnZXQ6c3RyaW5nKTpzdHJpbmdcblx0e1xuXHRcdHJldHVybiBcIlwiO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRwdWJsaWMgZ2V0QUdBTFVWQ29kZShzaGFkZXJPYmplY3Q6U2hhZGVyT2JqZWN0QmFzZSk6c3RyaW5nXG5cdHtcblx0XHRyZXR1cm4gXCJtb3YgXCIgKyBzaGFkZXJPYmplY3QudXZUYXJnZXQgKyBcIixcIiArIHNoYWRlck9iamVjdC51dlNvdXJjZSArIFwiXFxuXCI7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHB1YmxpYyBkb25lQUdBTENvZGUoc2hhZGVyT2JqZWN0OlNoYWRlck9iamVjdEJhc2UpXG5cdHtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEdlbmVyYXRlcyB0aGUgdmVydGV4IEFHQUwgY29kZSBmb3IgYWJzb2x1dGUgYmxlbmRpbmcuXG5cdCAqL1xuXHRwcml2YXRlIGdldEFic29sdXRlQUdBTENvZGUoc2hhZGVyT2JqZWN0OlNoYWRlck9iamVjdEJhc2UpOnN0cmluZ1xuXHR7XG5cdFx0dmFyIGNvZGU6c3RyaW5nID0gXCJcIjtcblx0XHR2YXIgdGVtcDE6c3RyaW5nID0gdGhpcy5fcEZpbmRUZW1wUmVnKHNoYWRlck9iamVjdC5hbmltYXRpb25UYXJnZXRSZWdpc3RlcnMpO1xuXHRcdHZhciB0ZW1wMjpzdHJpbmcgPSB0aGlzLl9wRmluZFRlbXBSZWcoc2hhZGVyT2JqZWN0LmFuaW1hdGlvblRhcmdldFJlZ2lzdGVycywgdGVtcDEpO1xuXHRcdHZhciByZWdzOkFycmF5PHN0cmluZz4gPSBuZXcgQXJyYXk8c3RyaW5nPihcInhcIiwgXCJ5XCIsIFwielwiLCBcIndcIik7XG5cdFx0dmFyIGxlbjpudW1iZXIgLyp1aW50Ki8gPSBzaGFkZXJPYmplY3QuYW5pbWF0YWJsZUF0dHJpYnV0ZXMubGVuZ3RoO1xuXHRcdHZhciBjb25zdGFudFJlZzpzdHJpbmcgPSBcInZjXCIgKyBzaGFkZXJPYmplY3QubnVtVXNlZFZlcnRleENvbnN0YW50cztcblxuXHRcdGlmIChsZW4gPiAyKVxuXHRcdFx0bGVuID0gMjtcblx0XHR2YXIgc3RyZWFtSW5kZXg6bnVtYmVyIC8qdWludCovID0gc2hhZGVyT2JqZWN0Lm51bVVzZWRTdHJlYW1zO1xuXG5cdFx0Zm9yICh2YXIgaTpudW1iZXIgLyp1aW50Ki8gPSAwOyBpIDwgbGVuOyArK2kpIHtcblx0XHRcdGNvZGUgKz0gXCJtdWwgXCIgKyB0ZW1wMSArIFwiLCBcIiArIHNoYWRlck9iamVjdC5hbmltYXRhYmxlQXR0cmlidXRlc1tpXSArIFwiLCBcIiArIGNvbnN0YW50UmVnICsgXCIuXCIgKyByZWdzWzBdICsgXCJcXG5cIjtcblxuXHRcdFx0Zm9yICh2YXIgajpudW1iZXIgLyp1aW50Ki8gPSAxOyBqIDwgdGhpcy5fbnVtUG9zZXM7ICsraikge1xuXHRcdFx0XHRjb2RlICs9IFwibXVsIFwiICsgdGVtcDIgKyBcIiwgdmFcIiArIHN0cmVhbUluZGV4ICsgXCIsIFwiICsgY29uc3RhbnRSZWcgKyBcIi5cIiArIHJlZ3Nbal0gKyBcIlxcblwiO1xuXG5cdFx0XHRcdGlmIChqIDwgdGhpcy5fbnVtUG9zZXMgLSAxKVxuXHRcdFx0XHRcdGNvZGUgKz0gXCJhZGQgXCIgKyB0ZW1wMSArIFwiLCBcIiArIHRlbXAxICsgXCIsIFwiICsgdGVtcDIgKyBcIlxcblwiO1xuXG5cdFx0XHRcdCsrc3RyZWFtSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdGNvZGUgKz0gXCJhZGQgXCIgKyBzaGFkZXJPYmplY3QuYW5pbWF0aW9uVGFyZ2V0UmVnaXN0ZXJzW2ldICsgXCIsIFwiICsgdGVtcDEgKyBcIiwgXCIgKyB0ZW1wMiArIFwiXFxuXCI7XG5cdFx0fVxuXG5cdFx0Ly8gYWRkIGNvZGUgZm9yIGJpdGFuZ2VudHMgaWYgdGFuZ2VudHMgYXJlIHVzZWRcblx0XHRpZiAoc2hhZGVyT2JqZWN0LnRhbmdlbnREZXBlbmRlbmNpZXMgPiAwIHx8IHNoYWRlck9iamVjdC5vdXRwdXRzTm9ybWFscykge1xuXHRcdFx0Y29kZSArPSBcImRwMyBcIiArIHRlbXAxICsgXCIueCwgXCIgKyBzaGFkZXJPYmplY3QuYW5pbWF0YWJsZUF0dHJpYnV0ZXNbMl0gKyBcIiwgXCIgKyBzaGFkZXJPYmplY3QuYW5pbWF0aW9uVGFyZ2V0UmVnaXN0ZXJzWzFdICsgXCJcXG5cIiArXG5cdFx0XHRcdFwibXVsIFwiICsgdGVtcDEgKyBcIiwgXCIgKyBzaGFkZXJPYmplY3QuYW5pbWF0aW9uVGFyZ2V0UmVnaXN0ZXJzWzFdICsgXCIsIFwiICsgdGVtcDEgKyBcIi54XFxuXCIgK1xuXHRcdFx0XHRcInN1YiBcIiArIHNoYWRlck9iamVjdC5hbmltYXRpb25UYXJnZXRSZWdpc3RlcnNbMl0gKyBcIiwgXCIgKyBzaGFkZXJPYmplY3QuYW5pbWF0aW9uVGFyZ2V0UmVnaXN0ZXJzWzJdICsgXCIsIFwiICsgdGVtcDEgKyBcIlxcblwiO1xuXHRcdH1cblx0XHRyZXR1cm4gY29kZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZW5lcmF0ZXMgdGhlIHZlcnRleCBBR0FMIGNvZGUgZm9yIGFkZGl0aXZlIGJsZW5kaW5nLlxuXHQgKi9cblx0cHJpdmF0ZSBnZXRBZGRpdGl2ZUFHQUxDb2RlKHNoYWRlck9iamVjdDpTaGFkZXJPYmplY3RCYXNlKTpzdHJpbmdcblx0e1xuXHRcdHZhciBjb2RlOnN0cmluZyA9IFwiXCI7XG5cdFx0dmFyIGxlbjpudW1iZXIgLyp1aW50Ki8gPSBzaGFkZXJPYmplY3QuYW5pbWF0YWJsZUF0dHJpYnV0ZXMubGVuZ3RoO1xuXHRcdHZhciByZWdzOkFycmF5PHN0cmluZz4gPSBbXCJ4XCIsIFwieVwiLCBcInpcIiwgXCJ3XCJdO1xuXHRcdHZhciB0ZW1wMTpzdHJpbmcgPSB0aGlzLl9wRmluZFRlbXBSZWcoc2hhZGVyT2JqZWN0LmFuaW1hdGlvblRhcmdldFJlZ2lzdGVycyk7XG5cdFx0dmFyIGs6bnVtYmVyIC8qdWludCovO1xuXG5cdFx0dmFyIHN0cmVhbUluZGV4Om51bWJlciAvKnVpbnQqLyA9IHNoYWRlck9iamVjdC5udW1Vc2VkU3RyZWFtcztcblxuXHRcdGlmIChsZW4gPiAyKVxuXHRcdFx0bGVuID0gMjtcblxuXHRcdGNvZGUgKz0gXCJtb3YgIFwiICsgc2hhZGVyT2JqZWN0LmFuaW1hdGlvblRhcmdldFJlZ2lzdGVyc1swXSArIFwiLCBcIiArIHNoYWRlck9iamVjdC5hbmltYXRhYmxlQXR0cmlidXRlc1swXSArIFwiXFxuXCI7XG5cdFx0aWYgKHNoYWRlck9iamVjdC5ub3JtYWxEZXBlbmRlbmNpZXMgPiAwKVxuXHRcdFx0Y29kZSArPSBcIm1vdiBcIiArIHNoYWRlck9iamVjdC5hbmltYXRpb25UYXJnZXRSZWdpc3RlcnNbMV0gKyBcIiwgXCIgKyBzaGFkZXJPYmplY3QuYW5pbWF0YWJsZUF0dHJpYnV0ZXNbMV0gKyBcIlxcblwiO1xuXG5cdFx0Zm9yICh2YXIgaTpudW1iZXIgLyp1aW50Ki8gPSAwOyBpIDwgbGVuOyArK2kpIHtcblx0XHRcdGZvciAodmFyIGo6bnVtYmVyIC8qdWludCovID0gMDsgaiA8IHRoaXMuX251bVBvc2VzOyArK2opIHtcblx0XHRcdFx0Y29kZSArPSBcIm11bCBcIiArIHRlbXAxICsgXCIsIHZhXCIgKyAoc3RyZWFtSW5kZXggKyBrKSArIFwiLCB2Y1wiICsgc2hhZGVyT2JqZWN0Lm51bVVzZWRWZXJ0ZXhDb25zdGFudHMgKyBcIi5cIiArIHJlZ3Nbal0gKyBcIlxcblwiICtcblx0XHRcdFx0XHRcImFkZCBcIiArIHNoYWRlck9iamVjdC5hbmltYXRpb25UYXJnZXRSZWdpc3RlcnNbaV0gKyBcIiwgXCIgKyBzaGFkZXJPYmplY3QuYW5pbWF0aW9uVGFyZ2V0UmVnaXN0ZXJzW2ldICsgXCIsIFwiICsgdGVtcDEgKyBcIlxcblwiO1xuXHRcdFx0XHRrKys7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKHNoYWRlck9iamVjdC50YW5nZW50RGVwZW5kZW5jaWVzID4gMCB8fCBzaGFkZXJPYmplY3Qub3V0cHV0c05vcm1hbHMpIHtcblx0XHRcdGNvZGUgKz0gXCJkcDMgXCIgKyB0ZW1wMSArIFwiLngsIFwiICsgc2hhZGVyT2JqZWN0LmFuaW1hdGFibGVBdHRyaWJ1dGVzWzJdICsgXCIsIFwiICsgc2hhZGVyT2JqZWN0LmFuaW1hdGlvblRhcmdldFJlZ2lzdGVyc1sxXSArIFwiXFxuXCIgK1xuXHRcdFx0XHRcIm11bCBcIiArIHRlbXAxICsgXCIsIFwiICsgc2hhZGVyT2JqZWN0LmFuaW1hdGlvblRhcmdldFJlZ2lzdGVyc1sxXSArIFwiLCBcIiArIHRlbXAxICsgXCIueFxcblwiICtcblx0XHRcdFx0XCJzdWIgXCIgKyBzaGFkZXJPYmplY3QuYW5pbWF0aW9uVGFyZ2V0UmVnaXN0ZXJzWzJdICsgXCIsIFwiICsgc2hhZGVyT2JqZWN0LmFuaW1hdGFibGVBdHRyaWJ1dGVzWzJdICsgXCIsIFwiICsgdGVtcDEgKyBcIlxcblwiO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb2RlO1xuXHR9XG59XG5cbmV4cG9ydCA9IFZlcnRleEFuaW1hdGlvblNldDsiXX0=