var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var MathConsts = require("awayjs-core/lib/geom/MathConsts");
var Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
var Orientation3D = require("awayjs-core/lib/geom/Orientation3D");
var ParticleStateBase = require("awayjs-renderergl/lib/animators/states/ParticleStateBase");
/**
 * ...
 */
var ParticleBillboardState = (function (_super) {
    __extends(ParticleBillboardState, _super);
    /**
     *
     */
    function ParticleBillboardState(animator, particleNode) {
        _super.call(this, animator, particleNode);
        this._matrix = new Matrix3D;
        this._billboardAxis = particleNode._iBillboardAxis;
    }
    ParticleBillboardState.prototype.setRenderState = function (stage, renderable, animationSubGeometry, animationRegisterCache, camera) {
        var comps;
        if (this._billboardAxis) {
            var pos = renderable.sourceEntity.sceneTransform.position;
            var look = camera.sceneTransform.position.subtract(pos);
            var right = look.crossProduct(this._billboardAxis);
            right.normalize();
            look = this.billboardAxis.crossProduct(right);
            look.normalize();
            //create a quick inverse projection matrix
            this._matrix.copyFrom(renderable.sourceEntity.sceneTransform);
            comps = this._matrix.decompose(Orientation3D.AXIS_ANGLE);
            this._matrix.copyColumnFrom(0, right);
            this._matrix.copyColumnFrom(1, this.billboardAxis);
            this._matrix.copyColumnFrom(2, look);
            this._matrix.copyColumnFrom(3, pos);
            this._matrix.appendRotation(-comps[1].w * MathConsts.RADIANS_TO_DEGREES, comps[1]);
        }
        else {
            //create a quick inverse projection matrix
            this._matrix.copyFrom(renderable.sourceEntity.sceneTransform);
            this._matrix.append(camera.inverseSceneTransform);
            //decompose using axis angle rotations
            comps = this._matrix.decompose(Orientation3D.AXIS_ANGLE);
            //recreate the matrix with just the rotation data
            this._matrix.identity();
            this._matrix.appendRotation(-comps[1].w * MathConsts.RADIANS_TO_DEGREES, comps[1]);
        }
        //set a new matrix transform constant
        animationRegisterCache.setVertexConstFromMatrix(animationRegisterCache.getRegisterIndex(this._pAnimationNode, ParticleBillboardState.MATRIX_INDEX), this._matrix);
    };
    Object.defineProperty(ParticleBillboardState.prototype, "billboardAxis", {
        /**
         * Defines the billboard axis.
         */
        get: function () {
            return this.billboardAxis;
        },
        set: function (value) {
            this.billboardAxis = value ? value.clone() : null;
            if (this.billboardAxis)
                this.billboardAxis.normalize();
        },
        enumerable: true,
        configurable: true
    });
    /** @private */
    ParticleBillboardState.MATRIX_INDEX = 0;
    return ParticleBillboardState;
})(ParticleStateBase);
module.exports = ParticleBillboardState;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvc3RhdGVzL1BhcnRpY2xlQmlsbGJvYXJkU3RhdGUudHMiXSwibmFtZXMiOlsiUGFydGljbGVCaWxsYm9hcmRTdGF0ZSIsIlBhcnRpY2xlQmlsbGJvYXJkU3RhdGUuY29uc3RydWN0b3IiLCJQYXJ0aWNsZUJpbGxib2FyZFN0YXRlLnNldFJlbmRlclN0YXRlIiwiUGFydGljbGVCaWxsYm9hcmRTdGF0ZS5iaWxsYm9hcmRBeGlzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFPLFVBQVUsV0FBZ0IsaUNBQWlDLENBQUMsQ0FBQztBQUNwRSxJQUFPLFFBQVEsV0FBaUIsK0JBQStCLENBQUMsQ0FBQztBQUVqRSxJQUFPLGFBQWEsV0FBZSxvQ0FBb0MsQ0FBQyxDQUFDO0FBVXpFLElBQU8saUJBQWlCLFdBQWMsMERBQTBELENBQUMsQ0FBQztBQUdsRyxBQUdBOztHQURHO0lBQ0csc0JBQXNCO0lBQVNBLFVBQS9CQSxzQkFBc0JBLFVBQTBCQTtJQVNyREE7O09BRUdBO0lBQ0hBLFNBWktBLHNCQUFzQkEsQ0FZZkEsUUFBeUJBLEVBQUVBLFlBQWtDQTtRQUV4RUMsa0JBQU1BLFFBQVFBLEVBQUVBLFlBQVlBLENBQUNBLENBQUNBO1FBVHZCQSxZQUFPQSxHQUFZQSxJQUFJQSxRQUFRQSxDQUFDQTtRQVd2Q0EsSUFBSUEsQ0FBQ0EsY0FBY0EsR0FBR0EsWUFBWUEsQ0FBQ0EsZUFBZUEsQ0FBQ0E7SUFDcERBLENBQUNBO0lBRU1ELCtDQUFjQSxHQUFyQkEsVUFBc0JBLEtBQVdBLEVBQUVBLFVBQXlCQSxFQUFFQSxvQkFBeUNBLEVBQUVBLHNCQUE2Q0EsRUFBRUEsTUFBYUE7UUFFcEtFLElBQUlBLEtBQXFCQSxDQUFDQTtRQUMxQkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDekJBLElBQUlBLEdBQUdBLEdBQVlBLFVBQVVBLENBQUNBLFlBQVlBLENB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QUNBLGFBQWFBLENBQUNBO1FBQzNCQSxDQUFDQTthQUVESCxVQUF5QkEsS0FBY0E7WUFFdENHLElBQUlBLENBQUNBLGFBQWFBLEdBQUdBLEtBQUtBLEdBQUVBLEtBQUtBLENBQUNBLEtBQUtBLEVBQUVBLEdBQUdBLElBQUlBLENBQUNBO1lBQ2pEQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxhQUFhQSxDQUFDQTtnQkFDdEJBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLFNBQVNBLEVBQUVBLENBQUNBO1FBQ2pDQSxDQUFDQTs7O09BUEFIO0lBM0REQSxlQUFlQTtJQUNEQSxtQ0FBWUEsR0FBa0JBLENBQUNBLENBQUNBO0lBbUUvQ0EsNkJBQUNBO0FBQURBLENBdEVBLEFBc0VDQSxFQXRFb0MsaUJBQWlCLEVBc0VyRDtBQUVELEFBQWdDLGlCQUF2QixzQkFBc0IsQ0FBQyIsImZpbGUiOiJhbmltYXRvcnMvc3RhdGVzL1BhcnRpY2xlQmlsbGJvYXJkU3RhdGUuanMiLCJzb3VyY2VSb290IjoiLi4vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE1hdGhDb25zdHNcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9NYXRoQ29uc3RzXCIpO1xyXG5pbXBvcnQgTWF0cml4M0RcdFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9nZW9tL01hdHJpeDNEXCIpO1xyXG5pbXBvcnQgVmVjdG9yM0RcdFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9nZW9tL1ZlY3RvcjNEXCIpO1xyXG5pbXBvcnQgT3JpZW50YXRpb24zRFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9PcmllbnRhdGlvbjNEXCIpO1xyXG5cclxuaW1wb3J0IENhbWVyYVx0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2VudGl0aWVzL0NhbWVyYVwiKTtcclxuXHJcbmltcG9ydCBTdGFnZVx0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvU3RhZ2VcIik7XHJcblxyXG5pbXBvcnQgUGFydGljbGVBbmltYXRvclx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYW5pbWF0b3JzL1BhcnRpY2xlQW5pbWF0b3JcIik7XHJcbmltcG9ydCBBbmltYXRpb25SZWdpc3RlckNhY2hlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9kYXRhL0FuaW1hdGlvblJlZ2lzdGVyQ2FjaGVcIik7XHJcbmltcG9ydCBBbmltYXRpb25TdWJHZW9tZXRyeVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9kYXRhL0FuaW1hdGlvblN1Ykdlb21ldHJ5XCIpO1xyXG5pbXBvcnQgUGFydGljbGVCaWxsYm9hcmROb2RlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9ub2Rlcy9QYXJ0aWNsZUJpbGxib2FyZE5vZGVcIik7XHJcbmltcG9ydCBQYXJ0aWNsZVN0YXRlQmFzZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9zdGF0ZXMvUGFydGljbGVTdGF0ZUJhc2VcIik7XHJcbmltcG9ydCBSZW5kZXJhYmxlQmFzZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvcG9vbC9SZW5kZXJhYmxlQmFzZVwiKTtcclxuXHJcbi8qKlxyXG4gKiAuLi5cclxuICovXHJcbmNsYXNzIFBhcnRpY2xlQmlsbGJvYXJkU3RhdGUgZXh0ZW5kcyBQYXJ0aWNsZVN0YXRlQmFzZVxyXG57XHJcblx0LyoqIEBwcml2YXRlICovXHJcblx0cHVibGljIHN0YXRpYyBNQVRSSVhfSU5ERVg6bnVtYmVyIC8qaW50Ki8gPSAwO1xyXG5cclxuXHRwcml2YXRlIF9tYXRyaXg6TWF0cml4M0QgPSBuZXcgTWF0cml4M0Q7XHJcblxyXG5cdHByaXZhdGUgX2JpbGxib2FyZEF4aXM6VmVjdG9yM0Q7XHJcblxyXG5cdC8qKlxyXG5cdCAqXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IoYW5pbWF0b3I6UGFydGljbGVBbmltYXRvciwgcGFydGljbGVOb2RlOlBhcnRpY2xlQmlsbGJvYXJkTm9kZSlcclxuXHR7XHJcblx0XHRzdXBlcihhbmltYXRvciwgcGFydGljbGVOb2RlKTtcclxuXHJcblx0XHR0aGlzLl9iaWxsYm9hcmRBeGlzID0gcGFydGljbGVOb2RlLl9pQmlsbGJvYXJkQXhpcztcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBzZXRSZW5kZXJTdGF0ZShzdGFnZTpTdGFnZSwgcmVuZGVyYWJsZTpSZW5kZXJhYmxlQmFzZSwgYW5pbWF0aW9uU3ViR2VvbWV0cnk6QW5pbWF0aW9uU3ViR2VvbWV0cnksIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGU6QW5pbWF0aW9uUmVnaXN0ZXJDYWNoZSwgY2FtZXJhOkNhbWVyYSlcclxuXHR7XHJcblx0XHR2YXIgY29tcHM6QXJyYXk8VmVjdG9yM0Q+O1xyXG5cdFx0aWYgKHRoaXMuX2JpbGxib2FyZEF4aXMpIHtcclxuXHRcdFx0dmFyIHBvczpWZWN0b3IzRCA9IHJlbmRlcmFibGUuc291cmNlRW50aXR5LnNjZW5lVHJhbnNmb3JtLnBvc2l0aW9uO1xyXG5cdFx0XHR2YXIgbG9vazpWZWN0b3IzRCA9IGNhbWVyYS5zY2VuZVRyYW5zZm9ybS5wb3NpdGlvbi5zdWJ0cmFjdChwb3MpO1xyXG5cdFx0XHR2YXIgcmlnaHQ6VmVjdG9yM0QgPSBsb29rLmNyb3NzUHJvZHVjdCh0aGlzLl9iaWxsYm9hcmRBeGlzKTtcclxuXHRcdFx0cmlnaHQubm9ybWFsaXplKCk7XHJcblx0XHRcdGxvb2sgPSB0aGlzLmJpbGxib2FyZEF4aXMuY3Jvc3NQcm9kdWN0KHJpZ2h0KTtcclxuXHRcdFx0bG9vay5ub3JtYWxpemUoKTtcclxuXHJcblx0XHRcdC8vY3JlYXRlIGEgcXVpY2sgaW52ZXJzZSBwcm9qZWN0aW9uIG1hdHJpeFxyXG5cdFx0XHR0aGlzLl9tYXRyaXguY29weUZyb20ocmVuZGVyYWJsZS5zb3VyY2VFbnRpdHkuc2NlbmVUcmFuc2Zvcm0pO1xyXG5cdFx0XHRjb21wcyA9IHRoaXMuX21hdHJpeC5kZWNvbXBvc2UoT3JpZW50YXRpb24zRC5BWElTX0FOR0xFKTtcclxuXHRcdFx0dGhpcy5fbWF0cml4LmNvcHlDb2x1bW5Gcm9tKDAsIHJpZ2h0KTtcclxuXHRcdFx0dGhpcy5fbWF0cml4LmNvcHlDb2x1bW5Gcm9tKDEsIHRoaXMuYmlsbGJvYXJkQXhpcyk7XHJcblx0XHRcdHRoaXMuX21hdHJpeC5jb3B5Q29sdW1uRnJvbSgyLCBsb29rKTtcclxuXHRcdFx0dGhpcy5fbWF0cml4LmNvcHlDb2x1bW5Gcm9tKDMsIHBvcyk7XHJcblx0XHRcdHRoaXMuX21hdHJpeC5hcHBlbmRSb3RhdGlvbigtY29tcHNbMV0udypNYXRoQ29uc3RzLlJBRElBTlNfVE9fREVHUkVFUywgY29tcHNbMV0pO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Ly9jcmVhdGUgYSBxdWljayBpbnZlcnNlIHByb2plY3Rpb24gbWF0cml4XHJcblx0XHRcdHRoaXMuX21hdHJpeC5jb3B5RnJvbShyZW5kZXJhYmxlLnNvdXJjZUVudGl0eS5zY2VuZVRyYW5zZm9ybSk7XHJcblx0XHRcdHRoaXMuX21hdHJpeC5hcHBlbmQoY2FtZXJhLmludmVyc2VTY2VuZVRyYW5zZm9ybSk7XHJcblxyXG5cdFx0XHQvL2RlY29tcG9zZSB1c2luZyBheGlzIGFuZ2xlIHJvdGF0aW9uc1xyXG5cdFx0XHRjb21wcyA9IHRoaXMuX21hdHJpeC5kZWNvbXBvc2UoT3JpZW50YXRpb24zRC5BWElTX0FOR0xFKTtcclxuXHJcblx0XHRcdC8vcmVjcmVhdGUgdGhlIG1hdHJpeCB3aXRoIGp1c3QgdGhlIHJvdGF0aW9uIGRhdGFcclxuXHRcdFx0dGhpcy5fbWF0cml4LmlkZW50aXR5KCk7XHJcblx0XHRcdHRoaXMuX21hdHJpeC5hcHBlbmRSb3RhdGlvbigtY29tcHNbMV0udypNYXRoQ29uc3RzLlJBRElBTlNfVE9fREVHUkVFUywgY29tcHNbMV0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vc2V0IGEgbmV3IG1hdHJpeCB0cmFuc2Zvcm0gY29uc3RhbnRcclxuXHRcdGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuc2V0VmVydGV4Q29uc3RGcm9tTWF0cml4KGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuZ2V0UmVnaXN0ZXJJbmRleCh0aGlzLl9wQW5pbWF0aW9uTm9kZSwgUGFydGljbGVCaWxsYm9hcmRTdGF0ZS5NQVRSSVhfSU5ERVgpLCB0aGlzLl9tYXRyaXgpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogRGVmaW5lcyB0aGUgYmlsbGJvYXJkIGF4aXMuXHJcblx0ICovXHJcblx0cHVibGljIGdldCBiaWxsYm9hcmRBeGlzKCk6VmVjdG9yM0RcclxuXHR7XHJcblx0XHRyZXR1cm4gdGhpcy5iaWxsYm9hcmRBeGlzO1xyXG5cdH1cclxuXHJcblx0cHVibGljIHNldCBiaWxsYm9hcmRBeGlzKHZhbHVlOlZlY3RvcjNEKVxyXG5cdHtcclxuXHRcdHRoaXMuYmlsbGJvYXJkQXhpcyA9IHZhbHVlPyB2YWx1ZS5jbG9uZSgpIDogbnVsbDtcclxuXHRcdGlmICh0aGlzLmJpbGxib2FyZEF4aXMpXHJcblx0XHRcdHRoaXMuYmlsbGJvYXJkQXhpcy5ub3JtYWxpemUoKTtcclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgPSBQYXJ0aWNsZUJpbGxib2FyZFN0YXRlOyJdfQ==