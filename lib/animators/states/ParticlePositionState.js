var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var ContextGLVertexBufferFormat = require("awayjs-stagegl/lib/base/ContextGLVertexBufferFormat");
var ParticlePropertiesMode = require("awayjs-renderergl/lib/animators/data/ParticlePropertiesMode");
var ParticleStateBase = require("awayjs-renderergl/lib/animators/states/ParticleStateBase");
/**
 * ...
 * @author ...
 */
var ParticlePositionState = (function (_super) {
    __extends(ParticlePositionState, _super);
    function ParticlePositionState(animator, particlePositionNode) {
        _super.call(this, animator, particlePositionNode);
        this._particlePositionNode = particlePositionNode;
        this._position = this._particlePositionNode._iPosition;
    }
    Object.defineProperty(ParticlePositionState.prototype, "position", {
        /**
         * Defines the position of the particle when in global mode. Defaults to 0,0,0.
         */
        get: function () {
            return this._position;
        },
        set: function (value) {
            this._position = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *
     */
    ParticlePositionState.prototype.getPositions = function () {
        return this._pDynamicProperties;
    };
    ParticlePositionState.prototype.setPositions = function (value) {
        this._pDynamicProperties = value;
        this._pDynamicPropertiesDirty = new Object();
    };
    /**
     * @inheritDoc
     */
    ParticlePositionState.prototype.setRenderState = function (stage, renderable, animationSubGeometry, animationRegisterCache, camera) {
        if (this._particlePositionNode.mode == ParticlePropertiesMode.LOCAL_DYNAMIC && !this._pDynamicPropertiesDirty[animationSubGeometry._iUniqueId])
            this._pUpdateDynamicProperties(animationSubGeometry);
        var index = animationRegisterCache.getRegisterIndex(this._pAnimationNode, ParticlePositionState.POSITION_INDEX);
        if (this._particlePositionNode.mode == ParticlePropertiesMode.GLOBAL)
            animationRegisterCache.setVertexConst(index, this._position.x, this._position.y, this._position.z);
        else
            animationSubGeometry.activateVertexBuffer(index, this._particlePositionNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_3);
    };
    /** @private */
    ParticlePositionState.POSITION_INDEX = 0;
    return ParticlePositionState;
})(ParticleStateBase);
module.exports = ParticlePositionState;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvc3RhdGVzL1BhcnRpY2xlUG9zaXRpb25TdGF0ZS50cyJdLCJuYW1lcyI6WyJQYXJ0aWNsZVBvc2l0aW9uU3RhdGUiLCJQYXJ0aWNsZVBvc2l0aW9uU3RhdGUuY29uc3RydWN0b3IiLCJQYXJ0aWNsZVBvc2l0aW9uU3RhdGUucG9zaXRpb24iLCJQYXJ0aWNsZVBvc2l0aW9uU3RhdGUuZ2V0UG9zaXRpb25zIiwiUGFydGljbGVQb3NpdGlvblN0YXRlLnNldFBvc2l0aW9ucyIsIlBhcnRpY2xlUG9zaXRpb25TdGF0ZS5zZXRSZW5kZXJTdGF0ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBS0EsSUFBTywyQkFBMkIsV0FBWSxxREFBcUQsQ0FBQyxDQUFDO0FBS3JHLElBQU8sc0JBQXNCLFdBQWEsNkRBQTZELENBQUMsQ0FBQztBQUV6RyxJQUFPLGlCQUFpQixXQUFjLDBEQUEwRCxDQUFDLENBQUM7QUFHbEcsQUFJQTs7O0dBREc7SUFDRyxxQkFBcUI7SUFBU0EsVUFBOUJBLHFCQUFxQkEsVUFBMEJBO0lBb0NwREEsU0FwQ0tBLHFCQUFxQkEsQ0FvQ2RBLFFBQXlCQSxFQUFFQSxvQkFBeUNBO1FBRS9FQyxrQkFBTUEsUUFBUUEsRUFBRUEsb0JBQW9CQSxDQUFDQSxDQUFDQTtRQUV0Q0EsSUFBSUEsQ0FBQ0EscUJBQXFCQSxHQUFHQSxvQkFBb0JBLENBQUNBO1FBQ2xEQSxJQUFJQSxDQUFDQSxTQUFTQSxHQUFHQSxJQUFJQSxDQUFDQSxxQkFBcUJBLENBQUNBLFVBQVVBLENBQUNBO0lBQ3hEQSxDQUFDQTtJQS9CREQsc0JBQVdBLDJDQUFRQTtRQUhuQkE7O1dBRUdBO2FBQ0hBO1lBRUNFLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBO1FBQ3ZCQSxDQUFDQTthQUVERixVQUFvQkEsS0FBY0E7WUFFakNFLElBQUlBLENBQUNBLFNBQVNBLEdBQUdBLEtBQUtBLENBQUNBO1FBQ3hCQSxDQUFDQTs7O09BTEFGO0lBT0RBOztPQUVHQTtJQUNJQSw0Q0FBWUEsR0FBbkJBO1FBRUNHLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLG1CQUFtQkEsQ0FBQ0E7SUFDakNBLENBQUNBO0lBRU1ILDRDQUFZQSxHQUFuQkEsVUFBb0JBLEtBQXFCQTtRQUV4Q0ksSUFBSUEsQ0FBQ0EsbUJBQW1CQSxHQUFHQSxLQUFLQSxDQUFDQTtRQUVqQ0EsSUFBSUEsQ0FBQ0Esd0JBQXdCQSxHQUFHQSxJQUFJQSxNQUFNQSxFQUFFQSxDQUFDQTtJQUM5Q0EsQ0FBQ0E7SUFVREo7O09BRUdBO0lBQ0lBLDhDQUFjQSxHQUFyQkEsVUFBc0JBLEtBQVdBLEVBQUVBLFVBQXlCQSxFQUFFQSxvQkFBeUNBLEVBQUVBLHNCQUE2Q0EsRUFBRUEsTUFBYUE7UUFFcEtLLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLHFCQUFxQkEsQ0FBQ0EsSUFBSUEsSUFBSUEsc0JBQXNCQSxDQUFDQSxhQUFhQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSx3QkFBd0JBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0E7WUFDOUlBLElBQUlBLENBQUNBLHlCQUF5QkEsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxDQUFDQTtRQUV0REEsSUFBSUEsS0FBS0EsR0FBa0JBLHNCQUFzQkEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxJQUFJQSxDQUFDQSxlQUFlQSxFQUFFQSxxQkFBcUJBLENBQUNBLGNBQWNBLENBQUNBLENBQUNBO1FBRS9IQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxxQkFBcUJBLENBQUNBLElBQUlBLElBQUlBLHNCQUFzQkEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7WUFDcEVBLHNCQUFzQkEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsS0FBS0EsRUFBRUEsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDcEdBLElBQUlBO1lBQ0hBLG9CQUFvQkEsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxLQUFLQSxFQUFFQSxJQUFJQSxDQUFDQSxxQkFBcUJBLENBQUNBLFlBQVlBLEVBQUVBLEtBQUtBLEVBQUVBLDJCQUEyQkEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7SUFDeElBLENBQUNBO0lBeERETCxlQUFlQTtJQUNEQSxvQ0FBY0EsR0FBbUJBLENBQUNBLENBQUNBO0lBd0RsREEsNEJBQUNBO0FBQURBLENBM0RBLEFBMkRDQSxFQTNEbUMsaUJBQWlCLEVBMkRwRDtBQUVELEFBQStCLGlCQUF0QixxQkFBcUIsQ0FBQyIsImZpbGUiOiJhbmltYXRvcnMvc3RhdGVzL1BhcnRpY2xlUG9zaXRpb25TdGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVmVjdG9yM0RcdFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9nZW9tL1ZlY3RvcjNEXCIpO1xyXG5cclxuaW1wb3J0IENhbWVyYVx0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2VudGl0aWVzL0NhbWVyYVwiKTtcclxuXHJcbmltcG9ydCBTdGFnZVx0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvU3RhZ2VcIik7XHJcbmltcG9ydCBDb250ZXh0R0xWZXJ0ZXhCdWZmZXJGb3JtYXRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvQ29udGV4dEdMVmVydGV4QnVmZmVyRm9ybWF0XCIpO1xyXG5cclxuaW1wb3J0IFBhcnRpY2xlQW5pbWF0b3JcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9QYXJ0aWNsZUFuaW1hdG9yXCIpO1xyXG5pbXBvcnQgQW5pbWF0aW9uUmVnaXN0ZXJDYWNoZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvZGF0YS9BbmltYXRpb25SZWdpc3RlckNhY2hlXCIpO1xyXG5pbXBvcnQgQW5pbWF0aW9uU3ViR2VvbWV0cnlcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvZGF0YS9BbmltYXRpb25TdWJHZW9tZXRyeVwiKTtcclxuaW1wb3J0IFBhcnRpY2xlUHJvcGVydGllc01vZGVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYW5pbWF0b3JzL2RhdGEvUGFydGljbGVQcm9wZXJ0aWVzTW9kZVwiKTtcclxuaW1wb3J0IFBhcnRpY2xlUG9zaXRpb25Ob2RlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYW5pbWF0b3JzL25vZGVzL1BhcnRpY2xlUG9zaXRpb25Ob2RlXCIpO1xyXG5pbXBvcnQgUGFydGljbGVTdGF0ZUJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvc3RhdGVzL1BhcnRpY2xlU3RhdGVCYXNlXCIpO1xyXG5pbXBvcnQgUmVuZGVyYWJsZUJhc2VcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL3Bvb2wvUmVuZGVyYWJsZUJhc2VcIik7XHJcblxyXG4vKipcclxuICogLi4uXHJcbiAqIEBhdXRob3IgLi4uXHJcbiAqL1xyXG5jbGFzcyBQYXJ0aWNsZVBvc2l0aW9uU3RhdGUgZXh0ZW5kcyBQYXJ0aWNsZVN0YXRlQmFzZVxyXG57XHJcblx0LyoqIEBwcml2YXRlICovXHJcblx0cHVibGljIHN0YXRpYyBQT1NJVElPTl9JTkRFWDpudW1iZXIgLyp1aW50Ki8gPSAwO1xyXG5cclxuXHRwcml2YXRlIF9wYXJ0aWNsZVBvc2l0aW9uTm9kZTpQYXJ0aWNsZVBvc2l0aW9uTm9kZTtcclxuXHRwcml2YXRlIF9wb3NpdGlvbjpWZWN0b3IzRDtcclxuXHJcblx0LyoqXHJcblx0ICogRGVmaW5lcyB0aGUgcG9zaXRpb24gb2YgdGhlIHBhcnRpY2xlIHdoZW4gaW4gZ2xvYmFsIG1vZGUuIERlZmF1bHRzIHRvIDAsMCwwLlxyXG5cdCAqL1xyXG5cdHB1YmxpYyBnZXQgcG9zaXRpb24oKTpWZWN0b3IzRFxyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLl9wb3NpdGlvbjtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBzZXQgcG9zaXRpb24odmFsdWU6VmVjdG9yM0QpXHJcblx0e1xyXG5cdFx0dGhpcy5fcG9zaXRpb24gPSB2YWx1ZTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqXHJcblx0ICovXHJcblx0cHVibGljIGdldFBvc2l0aW9ucygpOkFycmF5PFZlY3RvcjNEPlxyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLl9wRHluYW1pY1Byb3BlcnRpZXM7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgc2V0UG9zaXRpb25zKHZhbHVlOkFycmF5PFZlY3RvcjNEPilcclxuXHR7XHJcblx0XHR0aGlzLl9wRHluYW1pY1Byb3BlcnRpZXMgPSB2YWx1ZTtcclxuXHJcblx0XHR0aGlzLl9wRHluYW1pY1Byb3BlcnRpZXNEaXJ0eSA9IG5ldyBPYmplY3QoKTtcclxuXHR9XHJcblxyXG5cdGNvbnN0cnVjdG9yKGFuaW1hdG9yOlBhcnRpY2xlQW5pbWF0b3IsIHBhcnRpY2xlUG9zaXRpb25Ob2RlOlBhcnRpY2xlUG9zaXRpb25Ob2RlKVxyXG5cdHtcclxuXHRcdHN1cGVyKGFuaW1hdG9yLCBwYXJ0aWNsZVBvc2l0aW9uTm9kZSk7XHJcblxyXG5cdFx0dGhpcy5fcGFydGljbGVQb3NpdGlvbk5vZGUgPSBwYXJ0aWNsZVBvc2l0aW9uTm9kZTtcclxuXHRcdHRoaXMuX3Bvc2l0aW9uID0gdGhpcy5fcGFydGljbGVQb3NpdGlvbk5vZGUuX2lQb3NpdGlvbjtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0RG9jXHJcblx0ICovXHJcblx0cHVibGljIHNldFJlbmRlclN0YXRlKHN0YWdlOlN0YWdlLCByZW5kZXJhYmxlOlJlbmRlcmFibGVCYXNlLCBhbmltYXRpb25TdWJHZW9tZXRyeTpBbmltYXRpb25TdWJHZW9tZXRyeSwgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZTpBbmltYXRpb25SZWdpc3RlckNhY2hlLCBjYW1lcmE6Q2FtZXJhKVxyXG5cdHtcclxuXHRcdGlmICh0aGlzLl9wYXJ0aWNsZVBvc2l0aW9uTm9kZS5tb2RlID09IFBhcnRpY2xlUHJvcGVydGllc01vZGUuTE9DQUxfRFlOQU1JQyAmJiAhdGhpcy5fcER5bmFtaWNQcm9wZXJ0aWVzRGlydHlbYW5pbWF0aW9uU3ViR2VvbWV0cnkuX2lVbmlxdWVJZF0pXHJcblx0XHRcdHRoaXMuX3BVcGRhdGVEeW5hbWljUHJvcGVydGllcyhhbmltYXRpb25TdWJHZW9tZXRyeSk7XHJcblxyXG5cdFx0dmFyIGluZGV4Om51bWJlciAvKmludCovID0gYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5nZXRSZWdpc3RlckluZGV4KHRoaXMuX3BBbmltYXRpb25Ob2RlLCBQYXJ0aWNsZVBvc2l0aW9uU3RhdGUuUE9TSVRJT05fSU5ERVgpO1xyXG5cclxuXHRcdGlmICh0aGlzLl9wYXJ0aWNsZVBvc2l0aW9uTm9kZS5tb2RlID09IFBhcnRpY2xlUHJvcGVydGllc01vZGUuR0xPQkFMKVxyXG5cdFx0XHRhbmltYXRpb25SZWdpc3RlckNhY2hlLnNldFZlcnRleENvbnN0KGluZGV4LCB0aGlzLl9wb3NpdGlvbi54LCB0aGlzLl9wb3NpdGlvbi55LCB0aGlzLl9wb3NpdGlvbi56KTtcclxuXHRcdGVsc2VcclxuXHRcdFx0YW5pbWF0aW9uU3ViR2VvbWV0cnkuYWN0aXZhdGVWZXJ0ZXhCdWZmZXIoaW5kZXgsIHRoaXMuX3BhcnRpY2xlUG9zaXRpb25Ob2RlLl9pRGF0YU9mZnNldCwgc3RhZ2UsIENvbnRleHRHTFZlcnRleEJ1ZmZlckZvcm1hdC5GTE9BVF8zKTtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCA9IFBhcnRpY2xlUG9zaXRpb25TdGF0ZTsiXX0=