var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var ContextGLVertexBufferFormat = require("awayjs-stagegl/lib/base/ContextGLVertexBufferFormat");
var ParticlePropertiesMode = require("awayjs-renderergl/lib/animators/data/ParticlePropertiesMode");
var ParticleStateBase = require("awayjs-renderergl/lib/animators/states/ParticleStateBase");
/**
 * ...
 */
var ParticleSpriteSheetState = (function (_super) {
    __extends(ParticleSpriteSheetState, _super);
    function ParticleSpriteSheetState(animator, particleSpriteSheetNode) {
        _super.call(this, animator, particleSpriteSheetNode);
        this._particleSpriteSheetNode = particleSpriteSheetNode;
        this._usesCycle = this._particleSpriteSheetNode._iUsesCycle;
        this._usesPhase = this._particleSpriteSheetNode._iUsesCycle;
        this._totalFrames = this._particleSpriteSheetNode._iTotalFrames;
        this._numColumns = this._particleSpriteSheetNode._iNumColumns;
        this._numRows = this._particleSpriteSheetNode._iNumRows;
        this._cycleDuration = this._particleSpriteSheetNode._iCycleDuration;
        this._cyclePhase = this._particleSpriteSheetNode._iCyclePhase;
        this.updateSpriteSheetData();
    }
    Object.defineProperty(ParticleSpriteSheetState.prototype, "cyclePhase", {
        /**
         * Defines the cycle phase, when in global mode. Defaults to zero.
         */
        get: function () {
            return this._cyclePhase;
        },
        set: function (value) {
            this._cyclePhase = value;
            this.updateSpriteSheetData();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ParticleSpriteSheetState.prototype, "cycleDuration", {
        /**
         * Defines the cycle duration in seconds, when in global mode. Defaults to 1.
         */
        get: function () {
            return this._cycleDuration;
        },
        set: function (value) {
            this._cycleDuration = value;
            this.updateSpriteSheetData();
        },
        enumerable: true,
        configurable: true
    });
    ParticleSpriteSheetState.prototype.setRenderState = function (stage, renderable, animationSubGeometry, animationRegisterCache, camera) {
        if (animationRegisterCache.needUVAnimation) {
            animationRegisterCache.setVertexConst(animationRegisterCache.getRegisterIndex(this._pAnimationNode, ParticleSpriteSheetState.UV_INDEX_0), this._spriteSheetData[0], this._spriteSheetData[1], this._spriteSheetData[2], this._spriteSheetData[3]);
            if (this._usesCycle) {
                var index = animationRegisterCache.getRegisterIndex(this._pAnimationNode, ParticleSpriteSheetState.UV_INDEX_1);
                if (this._particleSpriteSheetNode.mode == ParticlePropertiesMode.LOCAL_STATIC) {
                    if (this._usesPhase)
                        animationSubGeometry.activateVertexBuffer(index, this._particleSpriteSheetNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_3);
                    else
                        animationSubGeometry.activateVertexBuffer(index, this._particleSpriteSheetNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_2);
                }
                else
                    animationRegisterCache.setVertexConst(index, this._spriteSheetData[4], this._spriteSheetData[5]);
            }
        }
    };
    ParticleSpriteSheetState.prototype.updateSpriteSheetData = function () {
        this._spriteSheetData = new Array(8);
        var uTotal = this._totalFrames / this._numColumns;
        this._spriteSheetData[0] = uTotal;
        this._spriteSheetData[1] = 1 / this._numColumns;
        this._spriteSheetData[2] = 1 / this._numRows;
        if (this._usesCycle) {
            if (this._cycleDuration <= 0)
                throw (new Error("the cycle duration must be greater than zero"));
            this._spriteSheetData[4] = uTotal / this._cycleDuration;
            this._spriteSheetData[5] = this._cycleDuration;
            if (this._usesPhase)
                this._spriteSheetData[6] = this._cyclePhase;
        }
    };
    /** @private */
    ParticleSpriteSheetState.UV_INDEX_0 = 0;
    /** @private */
    ParticleSpriteSheetState.UV_INDEX_1 = 1;
    return ParticleSpriteSheetState;
})(ParticleStateBase);
module.exports = ParticleSpriteSheetState;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvc3RhdGVzL1BhcnRpY2xlU3ByaXRlU2hlZXRTdGF0ZS50cyJdLCJuYW1lcyI6WyJQYXJ0aWNsZVNwcml0ZVNoZWV0U3RhdGUiLCJQYXJ0aWNsZVNwcml0ZVNoZWV0U3RhdGUuY29uc3RydWN0b3IiLCJQYXJ0aWNsZVNwcml0ZVNoZWV0U3RhdGUuY3ljbGVQaGFzZSIsIlBhcnRpY2xlU3ByaXRlU2hlZXRTdGF0ZS5jeWNsZUR1cmF0aW9uIiwiUGFydGljbGVTcHJpdGVTaGVldFN0YXRlLnNldFJlbmRlclN0YXRlIiwiUGFydGljbGVTcHJpdGVTaGVldFN0YXRlLnVwZGF0ZVNwcml0ZVNoZWV0RGF0YSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBS0EsSUFBTywyQkFBMkIsV0FBWSxxREFBcUQsQ0FBQyxDQUFDO0FBS3JHLElBQU8sc0JBQXNCLFdBQWEsNkRBQTZELENBQUMsQ0FBQztBQUV6RyxJQUFPLGlCQUFpQixXQUFjLDBEQUEwRCxDQUFDLENBQUM7QUFHbEcsQUFHQTs7R0FERztJQUNHLHdCQUF3QjtJQUFTQSxVQUFqQ0Esd0JBQXdCQSxVQUEwQkE7SUFnRHZEQSxTQWhES0Esd0JBQXdCQSxDQWdEakJBLFFBQXlCQSxFQUFFQSx1QkFBK0NBO1FBRXJGQyxrQkFBTUEsUUFBUUEsRUFBRUEsdUJBQXVCQSxDQUFDQSxDQUFDQTtRQUV6Q0EsSUFBSUEsQ0FBQ0Esd0JBQXdCQSxHQUFHQSx1QkFBdUJBLENBQUNBO1FBRXhEQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxJQUFJQSxDQUFDQSx3QkFBd0JBLENBQUNBLFdBQVdBLENBQUNBO1FBQzVEQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxJQUFJQSxDQUFDQSx3QkFBd0JBLENBQUNBLFdBQVdBLENBQUNBO1FBQzVEQSxJQUFJQSxDQUFDQSxZQUFZQSxHQUFHQSxJQUFJQSxDQUFDQSx3QkFBd0JBLENBQUNBLGFBQWFBLENBQUNBO1FBQ2hFQSxJQUFJQSxD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Q0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0E7WUFDL0NBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBO2dCQUNuQkEsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQTtRQUM5Q0EsQ0FBQ0E7SUFDRkEsQ0FBQ0E7SUFsR0RMLGVBQWVBO0lBQ0RBLG1DQUFVQSxHQUFtQkEsQ0FBQ0EsQ0FBQ0E7SUFFN0NBLGVBQWVBO0lBQ0RBLG1DQUFVQSxHQUFtQkEsQ0FBQ0EsQ0FBQ0E7SUErRjlDQSwrQkFBQ0E7QUFBREEsQ0FyR0EsQUFxR0NBLEVBckdzQyxpQkFBaUIsRUFxR3ZEO0FBRUQsQUFBa0MsaUJBQXpCLHdCQUF3QixDQUFDIiwiZmlsZSI6ImFuaW1hdG9ycy9zdGF0ZXMvUGFydGljbGVTcHJpdGVTaGVldFN0YXRlLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWZWN0b3IzRFx0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2dlb20vVmVjdG9yM0RcIik7XHJcblxyXG5pbXBvcnQgQ2FtZXJhXHRcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvZW50aXRpZXMvQ2FtZXJhXCIpO1xyXG5cclxuaW1wb3J0IFN0YWdlXHRcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYmFzZS9TdGFnZVwiKTtcclxuaW1wb3J0IENvbnRleHRHTFZlcnRleEJ1ZmZlckZvcm1hdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYmFzZS9Db250ZXh0R0xWZXJ0ZXhCdWZmZXJGb3JtYXRcIik7XHJcblxyXG5pbXBvcnQgUGFydGljbGVBbmltYXRvclx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYW5pbWF0b3JzL1BhcnRpY2xlQW5pbWF0b3JcIik7XHJcbmltcG9ydCBBbmltYXRpb25SZWdpc3RlckNhY2hlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9kYXRhL0FuaW1hdGlvblJlZ2lzdGVyQ2FjaGVcIik7XHJcbmltcG9ydCBBbmltYXRpb25TdWJHZW9tZXRyeVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9kYXRhL0FuaW1hdGlvblN1Ykdlb21ldHJ5XCIpO1xyXG5pbXBvcnQgUGFydGljbGVQcm9wZXJ0aWVzTW9kZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvZGF0YS9QYXJ0aWNsZVByb3BlcnRpZXNNb2RlXCIpO1xyXG5pbXBvcnQgUGFydGljbGVTcHJpdGVTaGVldE5vZGVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYW5pbWF0b3JzL25vZGVzL1BhcnRpY2xlU3ByaXRlU2hlZXROb2RlXCIpO1xyXG5pbXBvcnQgUGFydGljbGVTdGF0ZUJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvc3RhdGVzL1BhcnRpY2xlU3RhdGVCYXNlXCIpO1xyXG5pbXBvcnQgUmVuZGVyYWJsZUJhc2VcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL3Bvb2wvUmVuZGVyYWJsZUJhc2VcIik7XHJcblxyXG4vKipcclxuICogLi4uXHJcbiAqL1xyXG5jbGFzcyBQYXJ0aWNsZVNwcml0ZVNoZWV0U3RhdGUgZXh0ZW5kcyBQYXJ0aWNsZVN0YXRlQmFzZVxyXG57XHJcblx0LyoqIEBwcml2YXRlICovXHJcblx0cHVibGljIHN0YXRpYyBVVl9JTkRFWF8wOm51bWJlciAvKnVpbnQqLyA9IDA7XHJcblxyXG5cdC8qKiBAcHJpdmF0ZSAqL1xyXG5cdHB1YmxpYyBzdGF0aWMgVVZfSU5ERVhfMTpudW1iZXIgLyp1aW50Ki8gPSAxO1xyXG5cclxuXHRwcml2YXRlIF9wYXJ0aWNsZVNwcml0ZVNoZWV0Tm9kZTpQYXJ0aWNsZVNwcml0ZVNoZWV0Tm9kZTtcclxuXHRwcml2YXRlIF91c2VzQ3ljbGU6Ym9vbGVhbjtcclxuXHRwcml2YXRlIF91c2VzUGhhc2U6Ym9vbGVhbjtcclxuXHRwcml2YXRlIF90b3RhbEZyYW1lczpudW1iZXIgLyppbnQqLztcclxuXHRwcml2YXRlIF9udW1Db2x1bW5zOm51bWJlciAvKmludCovO1xyXG5cdHByaXZhdGUgX251bVJvd3M6bnVtYmVyIC8qaW50Ki87XHJcblx0cHJpdmF0ZSBfY3ljbGVEdXJhdGlvbjpudW1iZXI7XHJcblx0cHJpdmF0ZSBfY3ljbGVQaGFzZTpudW1iZXI7XHJcblx0cHJpdmF0ZSBfc3ByaXRlU2hlZXREYXRhOkFycmF5PG51bWJlcj47XHJcblxyXG5cdC8qKlxyXG5cdCAqIERlZmluZXMgdGhlIGN5Y2xlIHBoYXNlLCB3aGVuIGluIGdsb2JhbCBtb2RlLiBEZWZhdWx0cyB0byB6ZXJvLlxyXG5cdCAqL1xyXG5cdHB1YmxpYyBnZXQgY3ljbGVQaGFzZSgpOm51bWJlclxyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLl9jeWNsZVBoYXNlO1xyXG5cdH1cclxuXHJcblx0cHVibGljIHNldCBjeWNsZVBoYXNlKHZhbHVlOm51bWJlcilcclxuXHR7XHJcblx0XHR0aGlzLl9jeWNsZVBoYXNlID0gdmFsdWU7XHJcblxyXG5cdFx0dGhpcy51cGRhdGVTcHJpdGVTaGVldERhdGEoKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIERlZmluZXMgdGhlIGN5Y2xlIGR1cmF0aW9uIGluIHNlY29uZHMsIHdoZW4gaW4gZ2xvYmFsIG1vZGUuIERlZmF1bHRzIHRvIDEuXHJcblx0ICovXHJcblx0cHVibGljIGdldCBjeWNsZUR1cmF0aW9uKCk6bnVtYmVyXHJcblx0e1xyXG5cdFx0cmV0dXJuIHRoaXMuX2N5Y2xlRHVyYXRpb247XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgc2V0IGN5Y2xlRHVyYXRpb24odmFsdWU6bnVtYmVyKVxyXG5cdHtcclxuXHRcdHRoaXMuX2N5Y2xlRHVyYXRpb24gPSB2YWx1ZTtcclxuXHJcblx0XHR0aGlzLnVwZGF0ZVNwcml0ZVNoZWV0RGF0YSgpO1xyXG5cdH1cclxuXHJcblx0Y29uc3RydWN0b3IoYW5pbWF0b3I6UGFydGljbGVBbmltYXRvciwgcGFydGljbGVTcHJpdGVTaGVldE5vZGU6UGFydGljbGVTcHJpdGVTaGVldE5vZGUpXHJcblx0e1xyXG5cdFx0c3VwZXIoYW5pbWF0b3IsIHBhcnRpY2xlU3ByaXRlU2hlZXROb2RlKTtcclxuXHJcblx0XHR0aGlzLl9wYXJ0aWNsZVNwcml0ZVNoZWV0Tm9kZSA9IHBhcnRpY2xlU3ByaXRlU2hlZXROb2RlO1xyXG5cclxuXHRcdHRoaXMuX3VzZXNDeWNsZSA9IHRoaXMuX3BhcnRpY2xlU3ByaXRlU2hlZXROb2RlLl9pVXNlc0N5Y2xlO1xyXG5cdFx0dGhpcy5fdXNlc1BoYXNlID0gdGhpcy5fcGFydGljbGVTcHJpdGVTaGVldE5vZGUuX2lVc2VzQ3ljbGU7XHJcblx0XHR0aGlzLl90b3RhbEZyYW1lcyA9IHRoaXMuX3BhcnRpY2xlU3ByaXRlU2hlZXROb2RlLl9pVG90YWxGcmFtZXM7XHJcblx0XHR0aGlzLl9udW1Db2x1bW5zID0gdGhpcy5fcGFydGljbGVTcHJpdGVTaGVldE5vZGUuX2lOdW1Db2x1bW5zO1xyXG5cdFx0dGhpcy5fbnVtUm93cyA9IHRoaXMuX3BhcnRpY2xlU3ByaXRlU2hlZXROb2RlLl9pTnVtUm93cztcclxuXHRcdHRoaXMuX2N5Y2xlRHVyYXRpb24gPSB0aGlzLl9wYXJ0aWNsZVNwcml0ZVNoZWV0Tm9kZS5faUN5Y2xlRHVyYXRpb247XHJcblx0XHR0aGlzLl9jeWNsZVBoYXNlID0gdGhpcy5fcGFydGljbGVTcHJpdGVTaGVldE5vZGUuX2lDeWNsZVBoYXNlO1xyXG5cclxuXHRcdHRoaXMudXBkYXRlU3ByaXRlU2hlZXREYXRhKCk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgc2V0UmVuZGVyU3RhdGUoc3RhZ2U6U3RhZ2UsIHJlbmRlcmFibGU6UmVuZGVyYWJsZUJhc2UsIGFuaW1hdGlvblN1Ykdlb21ldHJ5OkFuaW1hdGlvblN1Ykdlb21ldHJ5LCBhbmltYXRpb25SZWdpc3RlckNhY2hlOkFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUsIGNhbWVyYTpDYW1lcmEpXHJcblx0e1xyXG5cdFx0aWYgKGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUubmVlZFVWQW5pbWF0aW9uKSB7XHJcblx0XHRcdGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuc2V0VmVydGV4Q29uc3QoYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5nZXRSZWdpc3RlckluZGV4KHRoaXMuX3BBbmltYXRpb25Ob2RlLCBQYXJ0aWNsZVNwcml0ZVNoZWV0U3RhdGUuVVZfSU5ERVhfMCksIHRoaXMuX3Nwcml0ZVNoZWV0RGF0YVswXSwgdGhpcy5fc3ByaXRlU2hlZXREYXRhWzFdLCB0aGlzLl9zcHJpdGVTaGVldERhdGFbMl0sIHRoaXMuX3Nwcml0ZVNoZWV0RGF0YVszXSk7XHJcblx0XHRcdGlmICh0aGlzLl91c2VzQ3ljbGUpIHtcclxuXHRcdFx0XHR2YXIgaW5kZXg6bnVtYmVyIC8qaW50Ki8gPSBhbmltYXRpb25SZWdpc3RlckNhY2hlLmdldFJlZ2lzdGVySW5kZXgodGhpcy5fcEFuaW1hdGlvbk5vZGUsIFBhcnRpY2xlU3ByaXRlU2hlZXRTdGF0ZS5VVl9JTkRFWF8xKTtcclxuXHRcdFx0XHRpZiAodGhpcy5fcGFydGljbGVTcHJpdGVTaGVldE5vZGUubW9kZSA9PSBQYXJ0aWNsZVByb3BlcnRpZXNNb2RlLkxPQ0FMX1NUQVRJQykge1xyXG5cdFx0XHRcdFx0aWYgKHRoaXMuX3VzZXNQaGFzZSlcclxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uU3ViR2VvbWV0cnkuYWN0aXZhdGVWZXJ0ZXhCdWZmZXIoaW5kZXgsIHRoaXMuX3BhcnRpY2xlU3ByaXRlU2hlZXROb2RlLl9pRGF0YU9mZnNldCwgc3RhZ2UsIENvbnRleHRHTFZlcnRleEJ1ZmZlckZvcm1hdC5GTE9BVF8zKTtcclxuXHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uU3ViR2VvbWV0cnkuYWN0aXZhdGVWZXJ0ZXhCdWZmZXIoaW5kZXgsIHRoaXMuX3BhcnRpY2xlU3ByaXRlU2hlZXROb2RlLl9pRGF0YU9mZnNldCwgc3RhZ2UsIENvbnRleHRHTFZlcnRleEJ1ZmZlckZvcm1hdC5GTE9BVF8yKTtcclxuXHRcdFx0XHR9IGVsc2VcclxuXHRcdFx0XHRcdGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuc2V0VmVydGV4Q29uc3QoaW5kZXgsIHRoaXMuX3Nwcml0ZVNoZWV0RGF0YVs0XSwgdGhpcy5fc3ByaXRlU2hlZXREYXRhWzVdKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSB1cGRhdGVTcHJpdGVTaGVldERhdGEoKVxyXG5cdHtcclxuXHRcdHRoaXMuX3Nwcml0ZVNoZWV0RGF0YSA9IG5ldyBBcnJheTxudW1iZXI+KDgpO1xyXG5cclxuXHRcdHZhciB1VG90YWw6bnVtYmVyID0gdGhpcy5fdG90YWxGcmFtZXMvdGhpcy5fbnVtQ29sdW1ucztcclxuXHJcblx0XHR0aGlzLl9zcHJpdGVTaGVldERhdGFbMF0gPSB1VG90YWw7XHJcblx0XHR0aGlzLl9zcHJpdGVTaGVldERhdGFbMV0gPSAxL3RoaXMuX251bUNvbHVtbnM7XHJcblx0XHR0aGlzLl9zcHJpdGVTaGVldERhdGFbMl0gPSAxL3RoaXMuX251bVJvd3M7XHJcblxyXG5cdFx0aWYgKHRoaXMuX3VzZXNDeWNsZSkge1xyXG5cdFx0XHRpZiAodGhpcy5fY3ljbGVEdXJhdGlvbiA8PSAwKVxyXG5cdFx0XHRcdHRocm93KG5ldyBFcnJvcihcInRoZSBjeWNsZSBkdXJhdGlvbiBtdXN0IGJlIGdyZWF0ZXIgdGhhbiB6ZXJvXCIpKTtcclxuXHRcdFx0dGhpcy5fc3ByaXRlU2hlZXREYXRhWzRdID0gdVRvdGFsL3RoaXMuX2N5Y2xlRHVyYXRpb247XHJcblx0XHRcdHRoaXMuX3Nwcml0ZVNoZWV0RGF0YVs1XSA9IHRoaXMuX2N5Y2xlRHVyYXRpb247XHJcblx0XHRcdGlmICh0aGlzLl91c2VzUGhhc2UpXHJcblx0XHRcdFx0dGhpcy5fc3ByaXRlU2hlZXREYXRhWzZdID0gdGhpcy5fY3ljbGVQaGFzZTtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCA9IFBhcnRpY2xlU3ByaXRlU2hlZXRTdGF0ZTsiXX0=