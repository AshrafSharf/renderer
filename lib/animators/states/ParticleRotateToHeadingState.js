var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
var ParticleStateBase = require("awayjs-renderergl/lib/animators/states/ParticleStateBase");
/**
 * ...
 */
var ParticleRotateToHeadingState = (function (_super) {
    __extends(ParticleRotateToHeadingState, _super);
    function ParticleRotateToHeadingState(animator, particleNode) {
        _super.call(this, animator, particleNode);
        this._matrix = new Matrix3D();
    }
    ParticleRotateToHeadingState.prototype.setRenderState = function (stage, renderable, animationSubGeometry, animationRegisterCache, camera) {
        if (animationRegisterCache.hasBillboard) {
            this._matrix.copyFrom(renderable.sourceEntity.sceneTransform);
            this._matrix.append(camera.inverseSceneTransform);
            animationRegisterCache.setVertexConstFromMatrix(animationRegisterCache.getRegisterIndex(this._pAnimationNode, ParticleRotateToHeadingState.MATRIX_INDEX), this._matrix);
        }
    };
    /** @private */
    ParticleRotateToHeadingState.MATRIX_INDEX = 0;
    return ParticleRotateToHeadingState;
})(ParticleStateBase);
module.exports = ParticleRotateToHeadingState;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvc3RhdGVzL1BhcnRpY2xlUm90YXRlVG9IZWFkaW5nU3RhdGUudHMiXSwibmFtZXMiOlsiUGFydGljbGVSb3RhdGVUb0hlYWRpbmdTdGF0ZSIsIlBhcnRpY2xlUm90YXRlVG9IZWFkaW5nU3RhdGUuY29uc3RydWN0b3IiLCJQYXJ0aWNsZVJvdGF0ZVRvSGVhZGluZ1N0YXRlLnNldFJlbmRlclN0YXRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFPLFFBQVEsV0FBaUIsK0JBQStCLENBQUMsQ0FBQztBQVdqRSxJQUFPLGlCQUFpQixXQUFjLDBEQUEwRCxDQUFDLENBQUM7QUFHbEcsQUFHQTs7R0FERztJQUNHLDRCQUE0QjtJQUFTQSxVQUFyQ0EsNEJBQTRCQSxVQUEwQkE7SUFPM0RBLFNBUEtBLDRCQUE0QkEsQ0FPckJBLFFBQXlCQSxFQUFFQSxZQUE2QkE7UUFFbkVDLGtCQUFNQSxRQUFRQSxFQUFFQSxZQUFZQSxDQUFDQSxDQUFDQTtRQUp2QkEsWUFBT0EsR0FBWUEsSUFBSUEsUUFBUUEsRUFBRUEsQ0FBQ0E7SUFLMUNBLENBQUNBO0lBRU1ELHFEQUFjQSxHQUFyQkEsVUFBc0JBLEtBQVdBLEVBQUVBLFVBQXlCQSxFQUFFQSxvQkFBeUNBLEVBQUVBLHNCQUE2Q0EsRUFBRUEsTUFBYUE7UUFFcEtFLEVBQUVBLENBQUNBLENBQUNBLHNCQUFzQkEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDekNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLFFBQVFBLENBQUNBLFVBQVVBLENBQUNBLFlBQVlBLENBQUNBLGNBQWNBLENBQUNBLENBQUNBO1lBQzlEQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxxQkFBcUJBLENBQUNBLENBQUNBO1lBQ2xEQSxzQkFBc0JBLENBQUNBLHdCQUF3QkEsQ0FBQ0Esc0JBQXNCQSxDQUFDQSxnQkFBZ0JBLENBQUNBLElBQUlBLENBQUNBLGVBQWVBLEVBQUVBLDRCQUE0QkEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7UUFDektBLENBQUNBO0lBQ0ZBLENBQUNBO0lBakJERixlQUFlQTtJQUNEQSx5Q0FBWUEsR0FBa0JBLENBQUNBLENBQUNBO0lBa0IvQ0EsbUNBQUNBO0FBQURBLENBckJBLEFBcUJDQSxFQXJCMEMsaUJBQWlCLEVBcUIzRDtBQUVELEFBQXNDLGlCQUE3Qiw0QkFBNEIsQ0FBQyIsImZpbGUiOiJhbmltYXRvcnMvc3RhdGVzL1BhcnRpY2xlUm90YXRlVG9IZWFkaW5nU3RhdGUuanMiLCJzb3VyY2VSb290IjoiLi4vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE1hdHJpeDNEXHRcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9NYXRyaXgzRFwiKTtcclxuXHJcbmltcG9ydCBDYW1lcmFcdFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9lbnRpdGllcy9DYW1lcmFcIik7XHJcblxyXG5pbXBvcnQgU3RhZ2VcdFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL1N0YWdlXCIpO1xyXG5cclxuaW1wb3J0IFBhcnRpY2xlQW5pbWF0b3JcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9QYXJ0aWNsZUFuaW1hdG9yXCIpO1xyXG5pbXBvcnQgQW5pbWF0aW9uUmVnaXN0ZXJDYWNoZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvZGF0YS9BbmltYXRpb25SZWdpc3RlckNhY2hlXCIpO1xyXG5pbXBvcnQgQW5pbWF0aW9uU3ViR2VvbWV0cnlcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvZGF0YS9BbmltYXRpb25TdWJHZW9tZXRyeVwiKTtcclxuaW1wb3J0IFBhcnRpY2xlTm9kZUJhc2VcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9ub2Rlcy9QYXJ0aWNsZU5vZGVCYXNlXCIpO1xyXG5pbXBvcnQgUGFydGljbGVSb3RhdGVUb0hlYWRpbmdOb2RlXHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvbm9kZXMvUGFydGljbGVSb3RhdGVUb0hlYWRpbmdOb2RlXCIpO1xyXG5pbXBvcnQgUGFydGljbGVTdGF0ZUJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvc3RhdGVzL1BhcnRpY2xlU3RhdGVCYXNlXCIpO1xyXG5pbXBvcnQgUmVuZGVyYWJsZUJhc2VcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL3Bvb2wvUmVuZGVyYWJsZUJhc2VcIik7XHJcblxyXG4vKipcclxuICogLi4uXHJcbiAqL1xyXG5jbGFzcyBQYXJ0aWNsZVJvdGF0ZVRvSGVhZGluZ1N0YXRlIGV4dGVuZHMgUGFydGljbGVTdGF0ZUJhc2Vcclxue1xyXG5cdC8qKiBAcHJpdmF0ZSAqL1xyXG5cdHB1YmxpYyBzdGF0aWMgTUFUUklYX0lOREVYOm51bWJlciAvKmludCovID0gMDtcclxuXHJcblx0cHJpdmF0ZSBfbWF0cml4Ok1hdHJpeDNEID0gbmV3IE1hdHJpeDNEKCk7XHJcblxyXG5cdGNvbnN0cnVjdG9yKGFuaW1hdG9yOlBhcnRpY2xlQW5pbWF0b3IsIHBhcnRpY2xlTm9kZTpQYXJ0aWNsZU5vZGVCYXNlKVxyXG5cdHtcclxuXHRcdHN1cGVyKGFuaW1hdG9yLCBwYXJ0aWNsZU5vZGUpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIHNldFJlbmRlclN0YXRlKHN0YWdlOlN0YWdlLCByZW5kZXJhYmxlOlJlbmRlcmFibGVCYXNlLCBhbmltYXRpb25TdWJHZW9tZXRyeTpBbmltYXRpb25TdWJHZW9tZXRyeSwgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZTpBbmltYXRpb25SZWdpc3RlckNhY2hlLCBjYW1lcmE6Q2FtZXJhKVxyXG5cdHtcclxuXHRcdGlmIChhbmltYXRpb25SZWdpc3RlckNhY2hlLmhhc0JpbGxib2FyZCkge1xyXG5cdFx0XHR0aGlzLl9tYXRyaXguY29weUZyb20ocmVuZGVyYWJsZS5zb3VyY2VFbnRpdHkuc2NlbmVUcmFuc2Zvcm0pO1xyXG5cdFx0XHR0aGlzLl9tYXRyaXguYXBwZW5kKGNhbWVyYS5pbnZlcnNlU2NlbmVUcmFuc2Zvcm0pO1xyXG5cdFx0XHRhbmltYXRpb25SZWdpc3RlckNhY2hlLnNldFZlcnRleENvbnN0RnJvbU1hdHJpeChhbmltYXRpb25SZWdpc3RlckNhY2hlLmdldFJlZ2lzdGVySW5kZXgodGhpcy5fcEFuaW1hdGlvbk5vZGUsIFBhcnRpY2xlUm90YXRlVG9IZWFkaW5nU3RhdGUuTUFUUklYX0lOREVYKSwgdGhpcy5fbWF0cml4KTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG59XHJcblxyXG5leHBvcnQgPSBQYXJ0aWNsZVJvdGF0ZVRvSGVhZGluZ1N0YXRlOyJdfQ==