var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var JointPose = require("awayjs-renderergl/lib/animators/data/JointPose");
var SkeletonPose = require("awayjs-renderergl/lib/animators/data/SkeletonPose");
var AnimationStateBase = require("awayjs-renderergl/lib/animators/states/AnimationStateBase");
/**
 *
 */
var SkeletonDirectionalState = (function (_super) {
    __extends(SkeletonDirectionalState, _super);
    function SkeletonDirectionalState(animator, skeletonAnimationNode) {
        _super.call(this, animator, skeletonAnimationNode);
        this._skeletonPose = new SkeletonPose();
        this._skeletonPoseDirty = true;
        this._blendWeight = 0;
        this._direction = 0;
        this._blendDirty = true;
        this._skeletonAnimationNode = skeletonAnimationNode;
        this._forward = animator.getAnimationState(this._skeletonAnimationNode.forward);
        this._backward = animator.getAnimationState(this._skeletonAnimationNode.backward);
        this._left = animator.getAnimationState(this._skeletonAnimationNode.left);
        this._right = animator.getAnimationState(this._skeletonAnimationNode.right);
    }
    Object.defineProperty(SkeletonDirectionalState.prototype, "direction", {
        get: function () {
            return this._direction;
        },
        /**
         * Defines the direction in degrees of the aniamtion between the forwards (0), right(90) backwards (180) and left(270) input nodes,
         * used to produce the skeleton pose output.
         */
        set: function (value) {
            if (this._direction == value)
                return;
            this._direction = value;
            this._blendDirty = true;
            this._skeletonPoseDirty = true;
            this._pPositionDeltaDirty = true;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @inheritDoc
     */
    SkeletonDirectionalState.prototype.phase = function (value) {
        if (this._blendDirty)
            this.updateBlend();
        this._skeletonPoseDirty = true;
        this._pPositionDeltaDirty = true;
        this._inputA.phase(value);
        this._inputB.phase(value);
    };
    /**
     * @inheritDoc
     */
    SkeletonDirectionalState.prototype._pUdateTime = function (time /*int*/) {
        if (this._blendDirty)
            this.updateBlend();
        this._skeletonPoseDirty = true;
        this._inputA.update(time);
        this._inputB.update(time);
        _super.prototype._pUpdateTime.call(this, time);
    };
    /**
     * Returns the current skeleton pose of the animation in the clip based on the internal playhead position.
     */
    SkeletonDirectionalState.prototype.getSkeletonPose = function (skeleton) {
        if (this._skeletonPoseDirty)
            this.updateSkeletonPose(skeleton);
        return this._skeletonPose;
    };
    /**
     * @inheritDoc
     */
    SkeletonDirectionalState.prototype._pUpdatePositionDelta = function () {
        this._pPositionDeltaDirty = false;
        if (this._blendDirty)
            this.updateBlend();
        var deltA = this._inputA.positionDelta;
        var deltB = this._inputB.positionDelta;
        this.positionDelta.x = deltA.x + this._blendWeight * (deltB.x - deltA.x);
        this.positionDelta.y = deltA.y + this._blendWeight * (deltB.y - deltA.y);
        this.positionDelta.z = deltA.z + this._blendWeight * (deltB.z - deltA.z);
    };
    /**
     * Updates the output skeleton pose of the node based on the direction value between forward, backwards, left and right input nodes.
     *
     * @param skeleton The skeleton used by the animator requesting the ouput pose.
     */
    SkeletonDirectionalState.prototype.updateSkeletonPose = function (skeleton) {
        this._skeletonPoseDirty = false;
        if (this._blendDirty)
            this.updateBlend();
        var endPose;
        var endPoses = this._skeletonPose.jointPoses;
        var poses1 = this._inputA.getSkeletonPose(skeleton).jointPoses;
        var poses2 = this._inputB.getSkeletonPose(skeleton).jointPoses;
        var pose1, pose2;
        var p1, p2;
        var tr;
        var numJoints = skeleton.numJoints;
        // :s
        if (endPoses.length != numJoints)
            endPoses.length = numJoints;
        for (var i = 0; i < numJoints; ++i) {
            endPose = endPoses[i];
            if (endPose == null)
                endPose = endPoses[i] = new JointPose();
            pose1 = poses1[i];
            pose2 = poses2[i];
            p1 = pose1.translation;
            p2 = pose2.translation;
            endPose.orientation.lerp(pose1.orientation, pose2.orientation, this._blendWeight);
            tr = endPose.translation;
            tr.x = p1.x + this._blendWeight * (p2.x - p1.x);
            tr.y = p1.y + this._blendWeight * (p2.y - p1.y);
            tr.z = p1.z + this._blendWeight * (p2.z - p1.z);
        }
    };
    /**
     * Updates the blend value for the animation output based on the direction value between forward, backwards, left and right input nodes.
     *
     * @private
     */
    SkeletonDirectionalState.prototype.updateBlend = function () {
        this._blendDirty = false;
        if (this._direction < 0 || this._direction > 360) {
            this._direction %= 360;
            if (this._direction < 0)
                this._direction += 360;
        }
        if (this._direction < 90) {
            this._inputA = this._forward;
            this._inputB = this._right;
            this._blendWeight = this._direction / 90;
        }
        else if (this._direction < 180) {
            this._inputA = this._right;
            this._inputB = this._backward;
            this._blendWeight = (this._direction - 90) / 90;
        }
        else if (this._direction < 270) {
            this._inputA = this._backward;
            this._inputB = this._left;
            this._blendWeight = (this._direction - 180) / 90;
        }
        else {
            this._inputA = this._left;
            this._inputB = this._forward;
            this._blendWeight = (this._direction - 270) / 90;
        }
    };
    return SkeletonDirectionalState;
})(AnimationStateBase);
module.exports = SkeletonDirectionalState;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvc3RhdGVzL1NrZWxldG9uRGlyZWN0aW9uYWxTdGF0ZS50cyJdLCJuYW1lcyI6WyJTa2VsZXRvbkRpcmVjdGlvbmFsU3RhdGUiLCJTa2VsZXRvbkRpcmVjdGlvbmFsU3RhdGUuY29uc3RydWN0b3IiLCJTa2VsZXRvbkRpcmVjdGlvbmFsU3RhdGUuZGlyZWN0aW9uIiwiU2tlbGV0b25EaXJlY3Rpb25hbFN0YXRlLnBoYXNlIiwiU2tlbGV0b25EaXJlY3Rpb25hbFN0YXRlLl9wVWRhdGVUaW1lIiwiU2tlbGV0b25EaXJlY3Rpb25hbFN0YXRlLmdldFNrZWxldG9uUG9zZSIsIlNrZWxldG9uRGlyZWN0aW9uYWxTdGF0ZS5fcFVwZGF0ZVBvc2l0aW9uRGVsdGEiLCJTa2VsZXRvbkRpcmVjdGlvbmFsU3RhdGUudXBkYXRlU2tlbGV0b25Qb3NlIiwiU2tlbGV0b25EaXJlY3Rpb25hbFN0YXRlLnVwZGF0ZUJsZW5kIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFHQSxJQUFPLFNBQVMsV0FBZ0IsZ0RBQWdELENBQUMsQ0FBQztBQUVsRixJQUFPLFlBQVksV0FBZ0IsbURBQW1ELENBQUMsQ0FBQztBQUV4RixJQUFPLGtCQUFrQixXQUFjLDJEQUEyRCxDQUFDLENBQUM7QUFHcEcsQUFHQTs7R0FERztJQUNHLHdCQUF3QjtJQUFTQSxVQUFqQ0Esd0JBQXdCQSxVQUEyQkE7SUFxQ3hEQSxTQXJDS0Esd0JBQXdCQSxDQXFDakJBLFFBQXFCQSxFQUFFQSxxQkFBNkNBO1FBRS9FQyxrQkFBTUEsUUFBUUEsRUFBRUEscUJBQXFCQSxDQUFDQSxDQUFDQTtRQXBDaENBLGtCQUFhQSxHQUFnQkEsSUFBSUEsWUFBWUEsRUFBRUEsQ0FBQ0E7UUFDaERBLHVCQUFrQkEsR0FBV0EsSUFBSUEsQ0FBQ0E7UUFHbENBLGlCQUFZQSxHQUFVQSxDQUFDQSxDQUFDQTtRQUN4QkEsZUFBVUEsR0FBVUEsQ0FBQ0EsQ0FBQ0E7UUFDdEJBLGdCQUFX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LE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ2xCQSxLQUFLQSxHQUFHQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNsQkEsRUFBRUEsR0FBR0EsS0FBS0EsQ0FBQ0EsV0FBV0EsQ0FBQ0E7WUFDdkJBLEVBQUVBLEdBQUdBLEtBQUtBLENBQUNBLFdBQVdBLENBQUNBO1lBRXZCQSxPQUFPQSxDQUFDQSxXQUFXQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxXQUFXQSxFQUFFQSxLQUFLQSxDQUFDQSxXQUFXQSxFQUFFQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQTtZQUVsRkEsRUFBRUEsR0FBR0EsT0FBT0EsQ0FBQ0EsV0FBV0EsQ0FBQ0E7WUFDekJBLEVBQUVBLENBQUNBLENBQUNBLEdBQUdBLEVBQUVBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLFlBQVlBLEdBQUNBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLEdBQUdBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQzlDQSxFQUFFQSxDQUFDQSxDQUFDQSxHQUFHQSxFQUFFQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxZQUFZQSxHQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxHQUFHQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUM5Q0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsWUFBWUEsR0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDL0NBLENBQUNBO0lBQ0ZBLENBQUNBO0lBRURQOzs7O09BSUdBO0lBQ0tBLDhDQUFXQSxHQUFuQkE7UUFFQ1EsSUFBSUEsQ0FBQ0EsV0FBV0EsR0FBR0EsS0FBS0EsQ0FBQ0E7UUFFekJBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFVBQVVBLEdBQUdBLENBQUNBLElBQUlBLElBQUlBLENBQUNBLFVBQVVBLEdBQUdBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1lBQ2xEQSxJQUFJQSxDQUFDQSxVQUFVQSxJQUFJQSxHQUFHQSxDQUFDQTtZQUN2QkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ3ZCQSxJQUFJQSxDQUFDQSxVQUFVQSxJQUFJQSxHQUFHQSxDQUFDQTtRQUN6QkEsQ0FBQ0E7UUFFREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDMUJBLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBO1lBQzdCQSxJQUFJQSxDQUFDQSxPQUFPQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQTtZQUMzQkEsSUFBSUEsQ0FBQ0EsWUFBWUEsR0FBR0EsSUFBSUEsQ0FBQ0EsVUFBVUEsR0FBQ0EsRUFBRUEsQ0FBQ0E7UUFDeENBLENBQUNBO1FBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFVBQVVBLEdBQUdBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1lBQ2xDQSxJQUFJQSxDQUFDQSxPQUFPQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQTtZQUMzQkEsSUFBSUEsQ0FBQ0EsT0FBT0EsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0E7WUFDOUJBLElBQUlBLENBQUNBLFlBQVlBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLFVBQVVBLEdBQUdBLEVBQUVBLENBQUNBLEdBQUNBLEVBQUVBLENBQUNBO1FBQy9DQSxDQUFDQTtRQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNsQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0E7WUFDOUJBLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBO1lBQzFCQSxJQUFJQSxDQUFDQSxZQUFZQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxHQUFHQSxDQUFDQSxHQUFDQSxFQUFFQSxDQUFDQTtRQUNoREEsQ0FBQ0E7UUFBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDUEEsSUFBSUEsQ0FBQ0EsT0FBT0EsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7WUFDMUJBLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBO1lBQzdCQSxJQUFJQSxDQUFDQSxZQUFZQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxHQUFHQSxDQUFDQSxHQUFDQSxFQUFFQSxDQUFDQTtRQUNoREEsQ0FBQ0E7SUFDRkEsQ0FBQ0E7SUFDRlIsK0JBQUNBO0FBQURBLENBNUxBLEFBNExDQSxFQTVMc0Msa0JBQWtCLEVBNEx4RDtBQUVELEFBQWtDLGlCQUF6Qix3QkFBd0IsQ0FBQyIsImZpbGUiOiJhbmltYXRvcnMvc3RhdGVzL1NrZWxldG9uRGlyZWN0aW9uYWxTdGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVmVjdG9yM0RcdFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9nZW9tL1ZlY3RvcjNEXCIpO1xuXG5pbXBvcnQgQW5pbWF0b3JCYXNlXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9BbmltYXRvckJhc2VcIik7XG5pbXBvcnQgSm9pbnRQb3NlXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9kYXRhL0pvaW50UG9zZVwiKTtcbmltcG9ydCBTa2VsZXRvblx0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9kYXRhL1NrZWxldG9uXCIpO1xuaW1wb3J0IFNrZWxldG9uUG9zZVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvZGF0YS9Ta2VsZXRvblBvc2VcIik7XG5pbXBvcnQgU2tlbGV0b25EaXJlY3Rpb25hbE5vZGVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYW5pbWF0b3JzL25vZGVzL1NrZWxldG9uRGlyZWN0aW9uYWxOb2RlXCIpO1xuaW1wb3J0IEFuaW1hdGlvblN0YXRlQmFzZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9zdGF0ZXMvQW5pbWF0aW9uU3RhdGVCYXNlXCIpO1xuaW1wb3J0IElTa2VsZXRvbkFuaW1hdGlvblN0YXRlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9zdGF0ZXMvSVNrZWxldG9uQW5pbWF0aW9uU3RhdGVcIik7XG5cbi8qKlxuICpcbiAqL1xuY2xhc3MgU2tlbGV0b25EaXJlY3Rpb25hbFN0YXRlIGV4dGVuZHMgQW5pbWF0aW9uU3RhdGVCYXNlIGltcGxlbWVudHMgSVNrZWxldG9uQW5pbWF0aW9uU3RhdGVcbntcblx0cHJpdmF0ZSBfc2tlbGV0b25BbmltYXRpb25Ob2RlOlNrZWxldG9uRGlyZWN0aW9uYWxOb2RlO1xuXHRwcml2YXRlIF9za2VsZXRvblBvc2U6U2tlbGV0b25Qb3NlID0gbmV3IFNrZWxldG9uUG9zZSgpO1xuXHRwcml2YXRlIF9za2VsZXRvblBvc2VEaXJ0eTpib29sZWFuID0gdHJ1ZTtcblx0cHJpdmF0ZSBfaW5wdXRBOklTa2VsZXRvbkFuaW1hdGlvblN0YXRlO1xuXHRwcml2YXRlIF9pbnB1dEI6SVNrZWxldG9uQW5pbWF0aW9uU3RhdGU7XG5cdHByaXZhdGUgX2JsZW5kV2VpZ2h0Om51bWJlciA9IDA7XG5cdHByaXZhdGUgX2RpcmVjdGlvbjpudW1iZXIgPSAwO1xuXHRwcml2YXRlIF9ibGVuZERpcnR5OmJvb2xlYW4gPSB0cnVlO1xuXHRwcml2YXRlIF9mb3J3YXJkOklTa2VsZXRvbkFuaW1hdGlvblN0YXRlO1xuXHRwcml2YXRlIF9iYWNrd2FyZDpJU2tlbGV0b25BbmltYXRpb25TdGF0ZTtcblx0cHJpdmF0ZSBfbGVmdDpJU2tlbGV0b25BbmltYXRpb25TdGF0ZTtcblx0cHJpdmF0ZSBfcmlnaHQ6SVNrZWxldG9uQW5pbWF0aW9uU3RhdGU7XG5cblx0LyoqXG5cdCAqIERlZmluZXMgdGhlIGRpcmVjdGlvbiBpbiBkZWdyZWVzIG9mIHRoZSBhbmlhbXRpb24gYmV0d2VlbiB0aGUgZm9yd2FyZHMgKDApLCByaWdodCg5MCkgYmFja3dhcmRzICgxODApIGFuZCBsZWZ0KDI3MCkgaW5wdXQgbm9kZXMsXG5cdCAqIHVzZWQgdG8gcHJvZHVjZSB0aGUgc2tlbGV0b24gcG9zZSBvdXRwdXQuXG5cdCAqL1xuXHRwdWJsaWMgc2V0IGRpcmVjdGlvbih2YWx1ZTpudW1iZXIpXG5cdHtcblx0XHRpZiAodGhpcy5fZGlyZWN0aW9uID09IHZhbHVlKVxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0dGhpcy5fZGlyZWN0aW9uID0gdmFsdWU7XG5cblx0XHR0aGlzLl9ibGVuZERpcnR5ID0gdHJ1ZTtcblxuXHRcdHRoaXMuX3NrZWxldG9uUG9zZURpcnR5ID0gdHJ1ZTtcblx0XHR0aGlzLl9wUG9zaXRpb25EZWx0YURpcnR5ID0gdHJ1ZTtcblx0fVxuXG5cdHB1YmxpYyBnZXQgZGlyZWN0aW9uKCk6bnVtYmVyXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5fZGlyZWN0aW9uO1xuXHR9XG5cblx0Y29uc3RydWN0b3IoYW5pbWF0b3I6QW5pbWF0b3JCYXNlLCBza2VsZXRvbkFuaW1hdGlvbk5vZGU6U2tlbGV0b25EaXJlY3Rpb25hbE5vZGUpXG5cdHtcblx0XHRzdXBlcihhbmltYXRvciwgc2tlbGV0b25BbmltYXRpb25Ob2RlKTtcblxuXHRcdHRoaXMuX3NrZWxldG9uQW5pbWF0aW9uTm9kZSA9IHNrZWxldG9uQW5pbWF0aW9uTm9kZTtcblxuXHRcdHRoaXMuX2ZvcndhcmQgPSA8SVNrZWxldG9uQW5pbWF0aW9uU3RhdGU+IGFuaW1hdG9yLmdldEFuaW1hdGlvblN0YXRlKHRoaXMuX3NrZWxldG9uQW5pbWF0aW9uTm9kZS5mb3J3YXJkKTtcblx0XHR0aGlzLl9iYWNrd2FyZCA9IDxJU2tlbGV0b25BbmltYXRpb25TdGF0ZT4gYW5pbWF0b3IuZ2V0QW5pbWF0aW9uU3RhdGUodGhpcy5fc2tlbGV0b25BbmltYXRpb25Ob2RlLmJhY2t3YXJkKTtcblx0XHR0aGlzLl9sZWZ0ID0gPElTa2VsZXRvbkFuaW1hdGlvblN0YXRlPiBhbmltYXRvci5nZXRBbmltYXRpb25TdGF0ZSh0aGlzLl9za2VsZXRvbkFuaW1hdGlvbk5vZGUubGVmdCk7XG5cdFx0dGhpcy5fcmlnaHQgPSA8SVNrZWxldG9uQW5pbWF0aW9uU3RhdGU+IGFuaW1hdG9yLmdldEFuaW1hdGlvblN0YXRlKHRoaXMuX3NrZWxldG9uQW5pbWF0aW9uTm9kZS5yaWdodCk7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHB1YmxpYyBwaGFzZSh2YWx1ZTpudW1iZXIpXG5cdHtcblx0XHRpZiAodGhpcy5fYmxlbmREaXJ0eSlcblx0XHRcdHRoaXMudXBkYXRlQmxlbmQoKTtcblxuXHRcdHRoaXMuX3NrZWxldG9uUG9zZURpcnR5ID0gdHJ1ZTtcblxuXHRcdHRoaXMuX3BQb3NpdGlvbkRlbHRhRGlydHkgPSB0cnVlO1xuXG5cdFx0dGhpcy5faW5wdXRBLnBoYXNlKHZhbHVlKTtcblx0XHR0aGlzLl9pbnB1dEIucGhhc2UodmFsdWUpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRwdWJsaWMgX3BVZGF0ZVRpbWUodGltZTpudW1iZXIgLyppbnQqLylcblx0e1xuXHRcdGlmICh0aGlzLl9ibGVuZERpcnR5KVxuXHRcdFx0dGhpcy51cGRhdGVCbGVuZCgpO1xuXG5cdFx0dGhpcy5fc2tlbGV0b25Qb3NlRGlydHkgPSB0cnVlO1xuXG5cdFx0dGhpcy5faW5wdXRBLnVwZGF0ZSh0aW1lKTtcblx0XHR0aGlzLl9pbnB1dEIudXBkYXRlKHRpbWUpO1xuXG5cdFx0c3VwZXIuX3BVcGRhdGVUaW1lKHRpbWUpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGN1cnJlbnQgc2tlbGV0b24gcG9zZSBvZiB0aGUgYW5pbWF0aW9uIGluIHRoZSBjbGlwIGJhc2VkIG9uIHRoZSBpbnRlcm5hbCBwbGF5aGVhZCBwb3NpdGlvbi5cblx0ICovXG5cdHB1YmxpYyBnZXRTa2VsZXRvblBvc2Uoc2tlbGV0b246U2tlbGV0b24pOlNrZWxldG9uUG9zZVxuXHR7XG5cdFx0aWYgKHRoaXMuX3NrZWxldG9uUG9zZURpcnR5KVxuXHRcdFx0dGhpcy51cGRhdGVTa2VsZXRvblBvc2Uoc2tlbGV0b24pO1xuXG5cdFx0cmV0dXJuIHRoaXMuX3NrZWxldG9uUG9zZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIF9wVXBkYXRlUG9zaXRpb25EZWx0YSgpXG5cdHtcblx0XHR0aGlzLl9wUG9zaXRpb25EZWx0YURpcnR5ID0gZmFsc2U7XG5cblx0XHRpZiAodGhpcy5fYmxlbmREaXJ0eSlcblx0XHRcdHRoaXMudXBkYXRlQmxlbmQoKTtcblxuXHRcdHZhciBkZWx0QTpWZWN0b3IzRCA9IHRoaXMuX2lucHV0QS5wb3NpdGlvbkRlbHRhO1xuXHRcdHZhciBkZWx0QjpWZWN0b3IzRCA9IHRoaXMuX2lucHV0Qi5wb3NpdGlvbkRlbHRhO1xuXG5cdFx0dGhpcy5wb3NpdGlvbkRlbHRhLnggPSBkZWx0QS54ICsgdGhpcy5fYmxlbmRXZWlnaHQqKGRlbHRCLnggLSBkZWx0QS54KTtcblx0XHR0aGlzLnBvc2l0aW9uRGVsdGEueSA9IGRlbHRBLnkgKyB0aGlzLl9ibGVuZFdlaWdodCooZGVsdEIueSAtIGRlbHRBLnkpO1xuXHRcdHRoaXMucG9zaXRpb25EZWx0YS56ID0gZGVsdEEueiArIHRoaXMuX2JsZW5kV2VpZ2h0KihkZWx0Qi56IC0gZGVsdEEueik7XG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlcyB0aGUgb3V0cHV0IHNrZWxldG9uIHBvc2Ugb2YgdGhlIG5vZGUgYmFzZWQgb24gdGhlIGRpcmVjdGlvbiB2YWx1ZSBiZXR3ZWVuIGZvcndhcmQsIGJhY2t3YXJkcywgbGVmdCBhbmQgcmlnaHQgaW5wdXQgbm9kZXMuXG5cdCAqXG5cdCAqIEBwYXJhbSBza2VsZXRvbiBUaGUgc2tlbGV0b24gdXNlZCBieSB0aGUgYW5pbWF0b3IgcmVxdWVzdGluZyB0aGUgb3VwdXQgcG9zZS5cblx0ICovXG5cdHByaXZhdGUgdXBkYXRlU2tlbGV0b25Qb3NlKHNrZWxldG9uOlNrZWxldG9uKVxuXHR7XG5cdFx0dGhpcy5fc2tlbGV0b25Qb3NlRGlydHkgPSBmYWxzZTtcblxuXHRcdGlmICh0aGlzLl9ibGVuZERpcnR5KVxuXHRcdFx0dGhpcy51cGRhdGVCbGVuZCgpO1xuXG5cdFx0dmFyIGVuZFBvc2U6Sm9pbnRQb3NlO1xuXHRcdHZhciBlbmRQb3NlczpBcnJheTxKb2ludFBvc2U+ID0gdGhpcy5fc2tlbGV0b25Qb3NlLmpvaW50UG9zZXM7XG5cdFx0dmFyIHBvc2VzMTpBcnJheTxKb2ludFBvc2U+ID0gdGhpcy5faW5wdXRBLmdldFNrZWxldG9uUG9zZShza2VsZXRvbikuam9pbnRQb3Nlcztcblx0XHR2YXIgcG9zZXMyOkFycmF5PEpvaW50UG9zZT4gPSB0aGlzLl9pbnB1dEIuZ2V0U2tlbGV0b25Qb3NlKHNrZWxldG9uKS5qb2ludFBvc2VzO1xuXHRcdHZhciBwb3NlMTpKb2ludFBvc2UsIHBvc2UyOkpvaW50UG9zZTtcblx0XHR2YXIgcDE6VmVjdG9yM0QsIHAyOlZlY3RvcjNEO1xuXHRcdHZhciB0cjpWZWN0b3IzRDtcblx0XHR2YXIgbnVtSm9pbnRzOm51bWJlciAvKnVpbnQqLyA9IHNrZWxldG9uLm51bUpvaW50cztcblxuXHRcdC8vIDpzXG5cdFx0aWYgKGVuZFBvc2VzLmxlbmd0aCAhPSBudW1Kb2ludHMpXG5cdFx0XHRlbmRQb3Nlcy5sZW5ndGggPSBudW1Kb2ludHM7XG5cblx0XHRmb3IgKHZhciBpOm51bWJlciAvKnVpbnQqLyA9IDA7IGkgPCBudW1Kb2ludHM7ICsraSkge1xuXHRcdFx0ZW5kUG9zZSA9IGVuZFBvc2VzW2ldO1xuXG5cdFx0XHRpZiAoZW5kUG9zZSA9PSBudWxsKVxuXHRcdFx0XHRlbmRQb3NlID0gZW5kUG9zZXNbaV0gPSBuZXcgSm9pbnRQb3NlKCk7XG5cblx0XHRcdHBvc2UxID0gcG9zZXMxW2ldO1xuXHRcdFx0cG9zZTIgPSBwb3NlczJbaV07XG5cdFx0XHRwMSA9IHBvc2UxLnRyYW5zbGF0aW9uO1xuXHRcdFx0cDIgPSBwb3NlMi50cmFuc2xhdGlvbjtcblxuXHRcdFx0ZW5kUG9zZS5vcmllbnRhdGlvbi5sZXJwKHBvc2UxLm9yaWVudGF0aW9uLCBwb3NlMi5vcmllbnRhdGlvbiwgdGhpcy5fYmxlbmRXZWlnaHQpO1xuXG5cdFx0XHR0ciA9IGVuZFBvc2UudHJhbnNsYXRpb247XG5cdFx0XHR0ci54ID0gcDEueCArIHRoaXMuX2JsZW5kV2VpZ2h0KihwMi54IC0gcDEueCk7XG5cdFx0XHR0ci55ID0gcDEueSArIHRoaXMuX2JsZW5kV2VpZ2h0KihwMi55IC0gcDEueSk7XG5cdFx0XHR0ci56ID0gcDEueiArIHRoaXMuX2JsZW5kV2VpZ2h0KihwMi56IC0gcDEueik7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgdGhlIGJsZW5kIHZhbHVlIGZvciB0aGUgYW5pbWF0aW9uIG91dHB1dCBiYXNlZCBvbiB0aGUgZGlyZWN0aW9uIHZhbHVlIGJldHdlZW4gZm9yd2FyZCwgYmFja3dhcmRzLCBsZWZ0IGFuZCByaWdodCBpbnB1dCBub2Rlcy5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICovXG5cdHByaXZhdGUgdXBkYXRlQmxlbmQoKVxuXHR7XG5cdFx0dGhpcy5fYmxlbmREaXJ0eSA9IGZhbHNlO1xuXG5cdFx0aWYgKHRoaXMuX2RpcmVjdGlvbiA8IDAgfHwgdGhpcy5fZGlyZWN0aW9uID4gMzYwKSB7XG5cdFx0XHR0aGlzLl9kaXJlY3Rpb24gJT0gMzYwO1xuXHRcdFx0aWYgKHRoaXMuX2RpcmVjdGlvbiA8IDApXG5cdFx0XHRcdHRoaXMuX2RpcmVjdGlvbiArPSAzNjA7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuX2RpcmVjdGlvbiA8IDkwKSB7XG5cdFx0XHR0aGlzLl9pbnB1dEEgPSB0aGlzLl9mb3J3YXJkO1xuXHRcdFx0dGhpcy5faW5wdXRCID0gdGhpcy5fcmlnaHQ7XG5cdFx0XHR0aGlzLl9ibGVuZFdlaWdodCA9IHRoaXMuX2RpcmVjdGlvbi85MDtcblx0XHR9IGVsc2UgaWYgKHRoaXMuX2RpcmVjdGlvbiA8IDE4MCkge1xuXHRcdFx0dGhpcy5faW5wdXRBID0gdGhpcy5fcmlnaHQ7XG5cdFx0XHR0aGlzLl9pbnB1dEIgPSB0aGlzLl9iYWNrd2FyZDtcblx0XHRcdHRoaXMuX2JsZW5kV2VpZ2h0ID0gKHRoaXMuX2RpcmVjdGlvbiAtIDkwKS85MDtcblx0XHR9IGVsc2UgaWYgKHRoaXMuX2RpcmVjdGlvbiA8IDI3MCkge1xuXHRcdFx0dGhpcy5faW5wdXRBID0gdGhpcy5fYmFja3dhcmQ7XG5cdFx0XHR0aGlzLl9pbnB1dEIgPSB0aGlzLl9sZWZ0O1xuXHRcdFx0dGhpcy5fYmxlbmRXZWlnaHQgPSAodGhpcy5fZGlyZWN0aW9uIC0gMTgwKS85MDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5faW5wdXRBID0gdGhpcy5fbGVmdDtcblx0XHRcdHRoaXMuX2lucHV0QiA9IHRoaXMuX2ZvcndhcmQ7XG5cdFx0XHR0aGlzLl9ibGVuZFdlaWdodCA9ICh0aGlzLl9kaXJlY3Rpb24gLSAyNzApLzkwO1xuXHRcdH1cblx0fVxufVxuXG5leHBvcnQgPSBTa2VsZXRvbkRpcmVjdGlvbmFsU3RhdGU7Il19