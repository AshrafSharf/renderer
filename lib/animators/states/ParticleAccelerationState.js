var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Vector3D = require("awayjs-core/lib/geom/Vector3D");
var ContextGLVertexBufferFormat = require("awayjs-stagegl/lib/base/ContextGLVertexBufferFormat");
var ParticlePropertiesMode = require("awayjs-renderergl/lib/animators/data/ParticlePropertiesMode");
var ParticleStateBase = require("awayjs-renderergl/lib/animators/states/ParticleStateBase");
/**
 * ...
 */
var ParticleAccelerationState = (function (_super) {
    __extends(ParticleAccelerationState, _super);
    function ParticleAccelerationState(animator, particleAccelerationNode) {
        _super.call(this, animator, particleAccelerationNode);
        this._particleAccelerationNode = particleAccelerationNode;
        this._acceleration = this._particleAccelerationNode._acceleration;
        this.updateAccelerationData();
    }
    Object.defineProperty(ParticleAccelerationState.prototype, "acceleration", {
        /**
         * Defines the acceleration vector of the state, used when in global mode.
         */
        get: function () {
            return this._acceleration;
        },
        set: function (value) {
            this._acceleration.x = value.x;
            this._acceleration.y = value.y;
            this._acceleration.z = value.z;
            this.updateAccelerationData();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @inheritDoc
     */
    ParticleAccelerationState.prototype.setRenderState = function (stage, renderable, animationSubGeometry, animationRegisterCache, camera) {
        var index = animationRegisterCache.getRegisterIndex(this._pAnimationNode, ParticleAccelerationState.ACCELERATION_INDEX);
        if (this._particleAccelerationNode.mode == ParticlePropertiesMode.LOCAL_STATIC)
            animationSubGeometry.activateVertexBuffer(index, this._particleAccelerationNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_3);
        else
            animationRegisterCache.setVertexConst(index, this._halfAcceleration.x, this._halfAcceleration.y, this._halfAcceleration.z);
    };
    ParticleAccelerationState.prototype.updateAccelerationData = function () {
        if (this._particleAccelerationNode.mode == ParticlePropertiesMode.GLOBAL)
            this._halfAcceleration = new Vector3D(this._acceleration.x / 2, this._acceleration.y / 2, this._acceleration.z / 2);
    };
    /** @private */
    ParticleAccelerationState.ACCELERATION_INDEX = 0;
    return ParticleAccelerationState;
})(ParticleStateBase);
module.exports = ParticleAccelerationState;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvc3RhdGVzL1BhcnRpY2xlQWNjZWxlcmF0aW9uU3RhdGUudHMiXSwibmFtZXMiOlsiUGFydGljbGVBY2NlbGVyYXRpb25TdGF0ZSIsIlBhcnRpY2xlQWNjZWxlcmF0aW9uU3RhdGUuY29uc3RydWN0b3IiLCJQYXJ0aWNsZUFjY2VsZXJhdGlvblN0YXRlLmFjY2VsZXJhdGlvbiIsIlBhcnRpY2xlQWNjZWxlcmF0aW9uU3RhdGUuc2V0UmVuZGVyU3RhdGUiLCJQYXJ0aWNsZUFjY2VsZXJhdGlvblN0YXRlLnVwZGF0ZUFjY2VsZXJhdGlvbkRhdGEiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQU8sUUFBUSxXQUFpQiwrQkFBK0IsQ0FBQyxDQUFDO0FBS2pFLElBQU8sMkJBQTJCLFdBQVkscURBQXFELENBQUMsQ0FBQztBQUtyRyxJQUFPLHNCQUFzQixXQUFhLDZEQUE2RCxDQUFDLENBQUM7QUFFekcsSUFBTyxpQkFBaUIsV0FBYywwREFBMEQsQ0FBQyxDQUFDO0FBR2xHLEFBR0E7O0dBREc7SUFDRyx5QkFBeUI7SUFBU0EsVUFBbENBLHlCQUF5QkEsVUFBMEJBO0lBMEJ4REEsU0ExQktBLHlCQUF5QkEsQ0EwQmxCQSxRQUF5QkEsRUFBRUEsd0JBQWlEQTtRQUV2RkMsa0JBQU1BLFFBQVFBLEVBQUVBLHdCQUF3QkEsQ0FBQ0EsQ0FBQ0E7UUFFMUNBLElBQUlBLENBQUNBLHlCQUF5QkEsR0FBR0Esd0JBQXdCQSxDQUFDQTtRQUMxREEsSUFBSUEsQ0FBQ0EsYUFBYUEsR0FBR0EsSUFBSUEsQ0FBQ0EseUJBQXlCQSxDQUFDQSxhQUFhQSxDQUFDQTtRQUVsRUEsSUFBSUEsQ0FBQ0Esc0JBQXNCQSxFQUFFQSxDQUFDQTtJQUMvQkEsQ0FBQ0E7SUF0QkRELHNCQUFXQSxtREFBWUE7UUFIdkJBOztXQUVHQTthQUNIQTtZQUVDRSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxhQUFhQSxDQUFDQTtRQUMzQkEsQ0FBQ0E7YUFFREYsVUFBd0JBLEtBQWNBO1lBRXJDRSxJQUFJQSxDQUFDQSxhQUFhQSxDQUFDQSxDQUFDQSxHQUFHQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUMvQkEsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDL0JBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLENBQUNBLEdBQUdBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBO1lBRS9CQSxJQUFJQSxDQUFDQSxzQkFBc0JBLEVBQUVBLENBQUNBO1FBQy9CQSxDQUFDQTs7O09BVEFGO0lBcUJEQTs7T0FFR0E7SUFDSUEsa0RBQWNBLEdBQXJCQSxVQUFzQkEsS0FBV0EsRUFBRUEsVUFBeUJBLEVBQUVBLG9CQUF5Q0EsRUFBRUEsc0JBQTZDQSxFQUFFQSxNQUFhQTtRQUVwS0csSUFBSUEsS0FBS0EsR0FBa0JBLHNCQUFzQkEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxJQUFJQSxDQUFDQSxlQUFlQSxFQUFFQSx5QkFBeUJBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsQ0FBQ0E7UUFFdklBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLHlCQUF5QkEsQ0FBQ0EsSUFBSUEsSUFBSUEsc0JBQXNCQSxDQUFDQSxZQUFZQSxDQUFDQTtZQUM5RUEsb0JBQW9CQSxDQUFDQSxvQkFBb0JBLENBQUNBLEtBQUtBLEVBQUVBLElBQUlBLENBQUNBLHlCQUF5QkEsQ0FBQ0EsWUFBWUEsRUFBRUEsS0FBS0EsRUFBRUEsMkJBQTJCQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtRQUMzSUEsSUFBSUE7WUFDSEEsc0JBQXNCQSxDQUFDQSxjQUFjQSxDQUFDQSxLQUFLQSxFQUFFQSxJQUFJQSxDQUFDQSxpQkFBaUJBLENBQUNBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUM3SEEsQ0FBQ0E7SUFFT0gsMERBQXNCQSxHQUE5QkE7UUFFQ0ksRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EseUJBQXlCQSxDQUFDQSxJQUFJQSxJQUFJQSxzQkFBc0JBLENBQUNBLE1BQU1BLENBQUNBO1lBQ3hFQSxJQUFJQSxDQUFDQSxpQkFBaUJBLEdBQUdBLElBQUlBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLENBQUNBLEdBQUNBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLENBQUNBLEdBQUNBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLENBQUNBLEdBQUNBLENBQUNBLENBQUNBLENBQUNBO0lBQ2hIQSxDQUFDQTtJQW5EREosZUFBZUE7SUFDREEsNENBQWtCQSxHQUFrQkEsQ0FBQ0EsQ0FBQ0E7SUFtRHJEQSxnQ0FBQ0E7QUFBREEsQ0F0REEsQUFzRENBLEVBdER1QyxpQkFBaUIsRUFzRHhEO0FBRUQsQUFBbUMsaUJBQTFCLHlCQUF5QixDQUFDIiwiZmlsZSI6ImFuaW1hdG9ycy9zdGF0ZXMvUGFydGljbGVBY2NlbGVyYXRpb25TdGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVmVjdG9yM0RcdFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9nZW9tL1ZlY3RvcjNEXCIpO1xyXG5cclxuaW1wb3J0IENhbWVyYVx0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2VudGl0aWVzL0NhbWVyYVwiKTtcclxuXHJcbmltcG9ydCBTdGFnZVx0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvU3RhZ2VcIik7XHJcbmltcG9ydCBDb250ZXh0R0xWZXJ0ZXhCdWZmZXJGb3JtYXRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvQ29udGV4dEdMVmVydGV4QnVmZmVyRm9ybWF0XCIpO1xyXG5cclxuaW1wb3J0IFBhcnRpY2xlQW5pbWF0b3JcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9QYXJ0aWNsZUFuaW1hdG9yXCIpO1xyXG5pbXBvcnQgQW5pbWF0aW9uUmVnaXN0ZXJDYWNoZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvZGF0YS9BbmltYXRpb25SZWdpc3RlckNhY2hlXCIpO1xyXG5pbXBvcnQgQW5pbWF0aW9uU3ViR2VvbWV0cnlcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvZGF0YS9BbmltYXRpb25TdWJHZW9tZXRyeVwiKTtcclxuaW1wb3J0IFBhcnRpY2xlUHJvcGVydGllc01vZGVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYW5pbWF0b3JzL2RhdGEvUGFydGljbGVQcm9wZXJ0aWVzTW9kZVwiKTtcclxuaW1wb3J0IFBhcnRpY2xlQWNjZWxlcmF0aW9uTm9kZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvbm9kZXMvUGFydGljbGVBY2NlbGVyYXRpb25Ob2RlXCIpO1xyXG5pbXBvcnQgUGFydGljbGVTdGF0ZUJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvc3RhdGVzL1BhcnRpY2xlU3RhdGVCYXNlXCIpO1xyXG5pbXBvcnQgUmVuZGVyYWJsZUJhc2VcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL3Bvb2wvUmVuZGVyYWJsZUJhc2VcIik7XHJcblxyXG4vKipcclxuICogLi4uXHJcbiAqL1xyXG5jbGFzcyBQYXJ0aWNsZUFjY2VsZXJhdGlvblN0YXRlIGV4dGVuZHMgUGFydGljbGVTdGF0ZUJhc2Vcclxue1xyXG5cdC8qKiBAcHJpdmF0ZSAqL1xyXG5cdHB1YmxpYyBzdGF0aWMgQUNDRUxFUkFUSU9OX0lOREVYOm51bWJlciAvKmludCovID0gMDtcclxuXHJcblx0cHJpdmF0ZSBfcGFydGljbGVBY2NlbGVyYXRpb25Ob2RlOlBhcnRpY2xlQWNjZWxlcmF0aW9uTm9kZTtcclxuXHRwcml2YXRlIF9hY2NlbGVyYXRpb246VmVjdG9yM0Q7XHJcblx0cHJpdmF0ZSBfaGFsZkFjY2VsZXJhdGlvbjpWZWN0b3IzRDtcclxuXHRcclxuXHQvKipcclxuXHQgKiBEZWZpbmVzIHRoZSBhY2NlbGVyYXRpb24gdmVjdG9yIG9mIHRoZSBzdGF0ZSwgdXNlZCB3aGVuIGluIGdsb2JhbCBtb2RlLlxyXG5cdCAqL1xyXG5cdHB1YmxpYyBnZXQgYWNjZWxlcmF0aW9uKCk6VmVjdG9yM0RcclxuXHR7XHJcblx0XHRyZXR1cm4gdGhpcy5fYWNjZWxlcmF0aW9uO1xyXG5cdH1cclxuXHRcclxuXHRwdWJsaWMgc2V0IGFjY2VsZXJhdGlvbih2YWx1ZTpWZWN0b3IzRClcclxuXHR7XHJcblx0XHR0aGlzLl9hY2NlbGVyYXRpb24ueCA9IHZhbHVlLng7XHJcblx0XHR0aGlzLl9hY2NlbGVyYXRpb24ueSA9IHZhbHVlLnk7XHJcblx0XHR0aGlzLl9hY2NlbGVyYXRpb24ueiA9IHZhbHVlLno7XHJcblxyXG5cdFx0dGhpcy51cGRhdGVBY2NlbGVyYXRpb25EYXRhKCk7XHJcblx0fVxyXG5cdFxyXG5cdGNvbnN0cnVjdG9yKGFuaW1hdG9yOlBhcnRpY2xlQW5pbWF0b3IsIHBhcnRpY2xlQWNjZWxlcmF0aW9uTm9kZTpQYXJ0aWNsZUFjY2VsZXJhdGlvbk5vZGUpXHJcblx0e1xyXG5cdFx0c3VwZXIoYW5pbWF0b3IsIHBhcnRpY2xlQWNjZWxlcmF0aW9uTm9kZSk7XHJcblxyXG5cdFx0dGhpcy5fcGFydGljbGVBY2NlbGVyYXRpb25Ob2RlID0gcGFydGljbGVBY2NlbGVyYXRpb25Ob2RlO1xyXG5cdFx0dGhpcy5fYWNjZWxlcmF0aW9uID0gdGhpcy5fcGFydGljbGVBY2NlbGVyYXRpb25Ob2RlLl9hY2NlbGVyYXRpb247XHJcblxyXG5cdFx0dGhpcy51cGRhdGVBY2NlbGVyYXRpb25EYXRhKCk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0RG9jXHJcblx0ICovXHJcblx0cHVibGljIHNldFJlbmRlclN0YXRlKHN0YWdlOlN0YWdlLCByZW5kZXJhYmxlOlJlbmRlcmFibGVCYXNlLCBhbmltYXRpb25TdWJHZW9tZXRyeTpBbmltYXRpb25TdWJHZW9tZXRyeSwgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZTpBbmltYXRpb25SZWdpc3RlckNhY2hlLCBjYW1lcmE6Q2FtZXJhKVxyXG5cdHtcclxuXHRcdHZhciBpbmRleDpudW1iZXIgLyppbnQqLyA9IGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuZ2V0UmVnaXN0ZXJJbmRleCh0aGlzLl9wQW5pbWF0aW9uTm9kZSwgUGFydGljbGVBY2NlbGVyYXRpb25TdGF0ZS5BQ0NFTEVSQVRJT05fSU5ERVgpO1xyXG5cdFx0XHJcblx0XHRpZiAodGhpcy5fcGFydGljbGVBY2NlbGVyYXRpb25Ob2RlLm1vZGUgPT0gUGFydGljbGVQcm9wZXJ0aWVzTW9kZS5MT0NBTF9TVEFUSUMpXHJcblx0XHRcdGFuaW1hdGlvblN1Ykdlb21ldHJ5LmFjdGl2YXRlVmVydGV4QnVmZmVyKGluZGV4LCB0aGlzLl9wYXJ0aWNsZUFjY2VsZXJhdGlvbk5vZGUuX2lEYXRhT2Zmc2V0LCBzdGFnZSwgQ29udGV4dEdMVmVydGV4QnVmZmVyRm9ybWF0LkZMT0FUXzMpO1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHRhbmltYXRpb25SZWdpc3RlckNhY2hlLnNldFZlcnRleENvbnN0KGluZGV4LCB0aGlzLl9oYWxmQWNjZWxlcmF0aW9uLngsIHRoaXMuX2hhbGZBY2NlbGVyYXRpb24ueSwgdGhpcy5faGFsZkFjY2VsZXJhdGlvbi56KTtcclxuXHR9XHJcblx0XHJcblx0cHJpdmF0ZSB1cGRhdGVBY2NlbGVyYXRpb25EYXRhKClcclxuXHR7XHJcblx0XHRpZiAodGhpcy5fcGFydGljbGVBY2NlbGVyYXRpb25Ob2RlLm1vZGUgPT0gUGFydGljbGVQcm9wZXJ0aWVzTW9kZS5HTE9CQUwpXHJcblx0XHRcdHRoaXMuX2hhbGZBY2NlbGVyYXRpb24gPSBuZXcgVmVjdG9yM0QodGhpcy5fYWNjZWxlcmF0aW9uLngvMiwgdGhpcy5fYWNjZWxlcmF0aW9uLnkvMiwgdGhpcy5fYWNjZWxlcmF0aW9uLnovMik7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgPSBQYXJ0aWNsZUFjY2VsZXJhdGlvblN0YXRlOyJdfQ==