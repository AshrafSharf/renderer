var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var JointPose = require("awayjs-renderergl/lib/animators/data/JointPose");
var SkeletonPose = require("awayjs-renderergl/lib/animators/data/SkeletonPose");
var AnimationStateBase = require("awayjs-renderergl/lib/animators/states/AnimationStateBase");
/**
 *
 */
var SkeletonBinaryLERPState = (function (_super) {
    __extends(SkeletonBinaryLERPState, _super);
    function SkeletonBinaryLERPState(animator, skeletonAnimationNode) {
        _super.call(this, animator, skeletonAnimationNode);
        this._blendWeight = 0;
        this._skeletonPose = new SkeletonPose();
        this._skeletonPoseDirty = true;
        this._skeletonAnimationNode = skeletonAnimationNode;
        this._inputA = animator.getAnimationState(this._skeletonAnimationNode.inputA);
        this._inputB = animator.getAnimationState(this._skeletonAnimationNode.inputB);
    }
    Object.defineProperty(SkeletonBinaryLERPState.prototype, "blendWeight", {
        /**
         * Defines a fractional value between 0 and 1 representing the blending ratio between inputA (0) and inputB (1),
         * used to produce the skeleton pose output.
         *
         * @see inputA
         * @see inputB
         */
        get: function () {
            return this._blendWeight;
        },
        set: function (value) {
            this._blendWeight = value;
            this._pPositionDeltaDirty = true;
            this._skeletonPoseDirty = true;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @inheritDoc
     */
    SkeletonBinaryLERPState.prototype.phase = function (value) {
        this._skeletonPoseDirty = true;
        this._pPositionDeltaDirty = true;
        this._inputA.phase(value);
        this._inputB.phase(value);
    };
    /**
     * @inheritDoc
     */
    SkeletonBinaryLERPState.prototype._pUpdateTime = function (time /*int*/) {
        this._skeletonPoseDirty = true;
        this._inputA.update(time);
        this._inputB.update(time);
        _super.prototype._pUpdateTime.call(this, time);
    };
    /**
     * Returns the current skeleton pose of the animation in the clip based on the internal playhead position.
     */
    SkeletonBinaryLERPState.prototype.getSkeletonPose = function (skeleton) {
        if (this._skeletonPoseDirty)
            this.updateSkeletonPose(skeleton);
        return this._skeletonPose;
    };
    /**
     * @inheritDoc
     */
    SkeletonBinaryLERPState.prototype._pUpdatePositionDelta = function () {
        this._pPositionDeltaDirty = false;
        var deltA = this._inputA.positionDelta;
        var deltB = this._inputB.positionDelta;
        this._pRootDelta.x = deltA.x + this._blendWeight * (deltB.x - deltA.x);
        this._pRootDelta.y = deltA.y + this._blendWeight * (deltB.y - deltA.y);
        this._pRootDelta.z = deltA.z + this._blendWeight * (deltB.z - deltA.z);
    };
    /**
     * Updates the output skeleton pose of the node based on the blendWeight value between input nodes.
     *
     * @param skeleton The skeleton used by the animator requesting the ouput pose.
     */
    SkeletonBinaryLERPState.prototype.updateSkeletonPose = function (skeleton) {
        this._skeletonPoseDirty = false;
        var endPose;
        var endPoses = this._skeletonPose.jointPoses;
        var poses1 = this._inputA.getSkeletonPose(skeleton).jointPoses;
        var poses2 = this._inputB.getSkeletonPose(skeleton).jointPoses;
        var pose1, pose2;
        var p1, p2;
        var tr;
        var numJoints = skeleton.numJoints;
        // :s
        if (endPoses.length != numJoints)
            endPoses.length = numJoints;
        for (var i = 0; i < numJoints; ++i) {
            endPose = endPoses[i];
            if (endPose == null)
                endPose = endPoses[i] = new JointPose();
            pose1 = poses1[i];
            pose2 = poses2[i];
            p1 = pose1.translation;
            p2 = pose2.translation;
            endPose.orientation.lerp(pose1.orientation, pose2.orientation, this._blendWeight);
            tr = endPose.translation;
            tr.x = p1.x + this._blendWeight * (p2.x - p1.x);
            tr.y = p1.y + this._blendWeight * (p2.y - p1.y);
            tr.z = p1.z + this._blendWeight * (p2.z - p1.z);
        }
    };
    return SkeletonBinaryLERPState;
})(AnimationStateBase);
module.exports = SkeletonBinaryLERPState;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvc3RhdGVzL1NrZWxldG9uQmluYXJ5TEVSUFN0YXRlLnRzIl0sIm5hbWVzIjpbIlNrZWxldG9uQmluYXJ5TEVSUFN0YXRlIiwiU2tlbGV0b25CaW5hcnlMRVJQU3RhdGUuY29uc3RydWN0b3IiLCJTa2VsZXRvbkJpbmFyeUxFUlBTdGF0ZS5ibGVuZFdlaWdodCIsIlNrZWxldG9uQmluYXJ5TEVSUFN0YXRlLnBoYXNlIiwiU2tlbGV0b25CaW5hcnlMRVJQU3RhdGUuX3BVcGRhdGVUaW1lIiwiU2tlbGV0b25CaW5hcnlMRVJQU3RhdGUuZ2V0U2tlbGV0b25Qb3NlIiwiU2tlbGV0b25CaW5hcnlMRVJQU3RhdGUuX3BVcGRhdGVQb3NpdGlvbkRlbHRhIiwiU2tlbGV0b25CaW5hcnlMRVJQU3RhdGUudXBkYXRlU2tlbGV0b25Qb3NlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFHQSxJQUFPLFNBQVMsV0FBZ0IsZ0RBQWdELENBQUMsQ0FBQztBQUVsRixJQUFPLFlBQVksV0FBZ0IsbURBQW1ELENBQUMsQ0FBQztBQUV4RixJQUFPLGtCQUFrQixXQUFjLDJEQUEyRCxDQUFDLENBQUM7QUFHcEcsQUFHQTs7R0FERztJQUNHLHVCQUF1QjtJQUFTQSxVQUFoQ0EsdUJBQXVCQSxVQUEyQkE7SUE2QnZEQSxTQTdCS0EsdUJBQXVCQSxDQTZCaEJBLFFBQXFCQSxFQUFFQSxxQkFBNENBO1FBRTlFQyxrQkFBTUEsUUFBUUEsRUFBRUEscUJBQXFCQSxDQUFDQSxDQUFDQTtRQTdCaENBLGlCQUFZQSxHQUFVQSxDQUFDQSxDQUFDQTtRQUV4QkEsa0JBQWFBLEdBQWdCQSxJQUFJQSxZQUFZQSxFQUFFQSxDQUFDQTtRQUNoREEsdUJBQWtCQSxHQUFXQSxJQUFJQSxDQUFDQTtRQTRCekNBLElBQUlBLENBQUNBLHNCQUFzQkEsR0FBR0EscUJBQXFCQSxDQUFDQTtRQUVwREEsSUFBSUEsQ0FBQ0EsT0FBT0EsR0FBNkJBLFFBQVFBLENB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LENBQUNBLE9BQU9BLElBQUlBLElBQUlBLENBQUNBO2dCQUNuQkEsT0FBT0EsR0FBR0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsU0FBU0EsRUFBRUEsQ0FBQ0E7WUFFekNBLEtBQUtBLEdBQUdBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ2xCQSxLQUFLQSxHQUFHQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNsQkEsRUFBRUEsR0FBR0EsS0FBS0EsQ0FBQ0EsV0FBV0EsQ0FBQ0E7WUFDdkJBLEVBQUVBLEdBQUdBLEtBQUtBLENBQUNBLFdBQVdBLENBQUNBO1lBRXZCQSxPQUFPQSxDQUFDQSxXQUFXQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxXQUFXQSxFQUFFQSxLQUFLQSxDQUFDQSxXQUFXQSxFQUFFQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQTtZQUVsRkEsRUFBRUEsR0FBR0EsT0FBT0EsQ0FBQ0EsV0FBV0EsQ0FBQ0E7WUFDekJBLEVBQUVBLENBQUNBLENBQUNBLEdBQUdBLEVBQUVBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLFlBQVlBLEdBQUNBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLEdBQUdBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQzlDQSxFQUFFQSxDQUFDQSxDQUFDQSxHQUFHQSxFQUFFQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxZQUFZQSxHQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxHQUFHQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUM5Q0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsWUFBWUEsR0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDL0NBLENBQUNBO0lBQ0ZBLENBQUNBO0lBQ0ZQLDhCQUFDQTtBQUFEQSxDQXBJQSxBQW9JQ0EsRUFwSXFDLGtCQUFrQixFQW9JdkQ7QUFFRCxBQUFpQyxpQkFBeEIsdUJBQXVCLENBQUMiLCJmaWxlIjoiYW5pbWF0b3JzL3N0YXRlcy9Ta2VsZXRvbkJpbmFyeUxFUlBTdGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVmVjdG9yM0RcdFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9nZW9tL1ZlY3RvcjNEXCIpO1xuXG5pbXBvcnQgQW5pbWF0b3JCYXNlXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9BbmltYXRvckJhc2VcIik7XG5pbXBvcnQgSm9pbnRQb3NlXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9kYXRhL0pvaW50UG9zZVwiKTtcbmltcG9ydCBTa2VsZXRvblx0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9kYXRhL1NrZWxldG9uXCIpO1xuaW1wb3J0IFNrZWxldG9uUG9zZVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvZGF0YS9Ta2VsZXRvblBvc2VcIik7XG5pbXBvcnQgU2tlbGV0b25CaW5hcnlMRVJQTm9kZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvbm9kZXMvU2tlbGV0b25CaW5hcnlMRVJQTm9kZVwiKTtcbmltcG9ydCBBbmltYXRpb25TdGF0ZUJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvc3RhdGVzL0FuaW1hdGlvblN0YXRlQmFzZVwiKTtcbmltcG9ydCBJU2tlbGV0b25BbmltYXRpb25TdGF0ZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvc3RhdGVzL0lTa2VsZXRvbkFuaW1hdGlvblN0YXRlXCIpO1xuXG4vKipcbiAqXG4gKi9cbmNsYXNzIFNrZWxldG9uQmluYXJ5TEVSUFN0YXRlIGV4dGVuZHMgQW5pbWF0aW9uU3RhdGVCYXNlIGltcGxlbWVudHMgSVNrZWxldG9uQW5pbWF0aW9uU3RhdGVcbntcblx0cHJpdmF0ZSBfYmxlbmRXZWlnaHQ6bnVtYmVyID0gMDtcblx0cHJpdmF0ZSBfc2tlbGV0b25BbmltYXRpb25Ob2RlOlNrZWxldG9uQmluYXJ5TEVSUE5vZGU7XG5cdHByaXZhdGUgX3NrZWxldG9uUG9zZTpTa2VsZXRvblBvc2UgPSBuZXcgU2tlbGV0b25Qb3NlKCk7XG5cdHByaXZhdGUgX3NrZWxldG9uUG9zZURpcnR5OmJvb2xlYW4gPSB0cnVlO1xuXHRwcml2YXRlIF9pbnB1dEE6SVNrZWxldG9uQW5pbWF0aW9uU3RhdGU7XG5cdHByaXZhdGUgX2lucHV0QjpJU2tlbGV0b25BbmltYXRpb25TdGF0ZTtcblxuXHQvKipcblx0ICogRGVmaW5lcyBhIGZyYWN0aW9uYWwgdmFsdWUgYmV0d2VlbiAwIGFuZCAxIHJlcHJlc2VudGluZyB0aGUgYmxlbmRpbmcgcmF0aW8gYmV0d2VlbiBpbnB1dEEgKDApIGFuZCBpbnB1dEIgKDEpLFxuXHQgKiB1c2VkIHRvIHByb2R1Y2UgdGhlIHNrZWxldG9uIHBvc2Ugb3V0cHV0LlxuXHQgKlxuXHQgKiBAc2VlIGlucHV0QVxuXHQgKiBAc2VlIGlucHV0QlxuXHQgKi9cblx0cHVibGljIGdldCBibGVuZFdlaWdodCgpOm51bWJlclxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX2JsZW5kV2VpZ2h0O1xuXHR9XG5cblx0cHVibGljIHNldCBibGVuZFdlaWdodCh2YWx1ZTpudW1iZXIpXG5cdHtcblx0XHR0aGlzLl9ibGVuZFdlaWdodCA9IHZhbHVlO1xuXG5cdFx0dGhpcy5fcFBvc2l0aW9uRGVsdGFEaXJ0eSA9IHRydWU7XG5cdFx0dGhpcy5fc2tlbGV0b25Qb3NlRGlydHkgPSB0cnVlO1xuXHR9XG5cblx0Y29uc3RydWN0b3IoYW5pbWF0b3I6QW5pbWF0b3JCYXNlLCBza2VsZXRvbkFuaW1hdGlvbk5vZGU6U2tlbGV0b25CaW5hcnlMRVJQTm9kZSlcblx0e1xuXHRcdHN1cGVyKGFuaW1hdG9yLCBza2VsZXRvbkFuaW1hdGlvbk5vZGUpO1xuXG5cdFx0dGhpcy5fc2tlbGV0b25BbmltYXRpb25Ob2RlID0gc2tlbGV0b25BbmltYXRpb25Ob2RlO1xuXG5cdFx0dGhpcy5faW5wdXRBID0gPElTa2VsZXRvbkFuaW1hdGlvblN0YXRlPiBhbmltYXRvci5nZXRBbmltYXRpb25TdGF0ZSh0aGlzLl9za2VsZXRvbkFuaW1hdGlvbk5vZGUuaW5wdXRBKTtcblx0XHR0aGlzLl9pbnB1dEIgPSA8SVNrZWxldG9uQW5pbWF0aW9uU3RhdGU+IGFuaW1hdG9yLmdldEFuaW1hdGlvblN0YXRlKHRoaXMuX3NrZWxldG9uQW5pbWF0aW9uTm9kZS5pbnB1dEIpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRwdWJsaWMgcGhhc2UodmFsdWU6bnVtYmVyKVxuXHR7XG5cdFx0dGhpcy5fc2tlbGV0b25Qb3NlRGlydHkgPSB0cnVlO1xuXG5cdFx0dGhpcy5fcFBvc2l0aW9uRGVsdGFEaXJ0eSA9IHRydWU7XG5cblx0XHR0aGlzLl9pbnB1dEEucGhhc2UodmFsdWUpO1xuXHRcdHRoaXMuX2lucHV0Qi5waGFzZSh2YWx1ZSk7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHB1YmxpYyBfcFVwZGF0ZVRpbWUodGltZTpudW1iZXIgLyppbnQqLylcblx0e1xuXHRcdHRoaXMuX3NrZWxldG9uUG9zZURpcnR5ID0gdHJ1ZTtcblxuXHRcdHRoaXMuX2lucHV0QS51cGRhdGUodGltZSk7XG5cdFx0dGhpcy5faW5wdXRCLnVwZGF0ZSh0aW1lKTtcblxuXHRcdHN1cGVyLl9wVXBkYXRlVGltZSh0aW1lKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHNrZWxldG9uIHBvc2Ugb2YgdGhlIGFuaW1hdGlvbiBpbiB0aGUgY2xpcCBiYXNlZCBvbiB0aGUgaW50ZXJuYWwgcGxheWhlYWQgcG9zaXRpb24uXG5cdCAqL1xuXHRwdWJsaWMgZ2V0U2tlbGV0b25Qb3NlKHNrZWxldG9uOlNrZWxldG9uKTpTa2VsZXRvblBvc2Vcblx0e1xuXHRcdGlmICh0aGlzLl9za2VsZXRvblBvc2VEaXJ0eSlcblx0XHRcdHRoaXMudXBkYXRlU2tlbGV0b25Qb3NlKHNrZWxldG9uKTtcblxuXHRcdHJldHVybiB0aGlzLl9za2VsZXRvblBvc2U7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHB1YmxpYyBfcFVwZGF0ZVBvc2l0aW9uRGVsdGEoKVxuXHR7XG5cdFx0dGhpcy5fcFBvc2l0aW9uRGVsdGFEaXJ0eSA9IGZhbHNlO1xuXG5cdFx0dmFyIGRlbHRBOlZlY3RvcjNEID0gdGhpcy5faW5wdXRBLnBvc2l0aW9uRGVsdGE7XG5cdFx0dmFyIGRlbHRCOlZlY3RvcjNEID0gdGhpcy5faW5wdXRCLnBvc2l0aW9uRGVsdGE7XG5cblx0XHR0aGlzLl9wUm9vdERlbHRhLnggPSBkZWx0QS54ICsgdGhpcy5fYmxlbmRXZWlnaHQqKGRlbHRCLnggLSBkZWx0QS54KTtcblx0XHR0aGlzLl9wUm9vdERlbHRhLnkgPSBkZWx0QS55ICsgdGhpcy5fYmxlbmRXZWlnaHQqKGRlbHRCLnkgLSBkZWx0QS55KTtcblx0XHR0aGlzLl9wUm9vdERlbHRhLnogPSBkZWx0QS56ICsgdGhpcy5fYmxlbmRXZWlnaHQqKGRlbHRCLnogLSBkZWx0QS56KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIHRoZSBvdXRwdXQgc2tlbGV0b24gcG9zZSBvZiB0aGUgbm9kZSBiYXNlZCBvbiB0aGUgYmxlbmRXZWlnaHQgdmFsdWUgYmV0d2VlbiBpbnB1dCBub2Rlcy5cblx0ICpcblx0ICogQHBhcmFtIHNrZWxldG9uIFRoZSBza2VsZXRvbiB1c2VkIGJ5IHRoZSBhbmltYXRvciByZXF1ZXN0aW5nIHRoZSBvdXB1dCBwb3NlLlxuXHQgKi9cblx0cHJpdmF0ZSB1cGRhdGVTa2VsZXRvblBvc2Uoc2tlbGV0b246U2tlbGV0b24pXG5cdHtcblx0XHR0aGlzLl9za2VsZXRvblBvc2VEaXJ0eSA9IGZhbHNlO1xuXG5cdFx0dmFyIGVuZFBvc2U6Sm9pbnRQb3NlO1xuXHRcdHZhciBlbmRQb3NlczpBcnJheTxKb2ludFBvc2U+ID0gdGhpcy5fc2tlbGV0b25Qb3NlLmpvaW50UG9zZXM7XG5cdFx0dmFyIHBvc2VzMTpBcnJheTxKb2ludFBvc2U+ID0gdGhpcy5faW5wdXRBLmdldFNrZWxldG9uUG9zZShza2VsZXRvbikuam9pbnRQb3Nlcztcblx0XHR2YXIgcG9zZXMyOkFycmF5PEpvaW50UG9zZT4gPSB0aGlzLl9pbnB1dEIuZ2V0U2tlbGV0b25Qb3NlKHNrZWxldG9uKS5qb2ludFBvc2VzO1xuXHRcdHZhciBwb3NlMTpKb2ludFBvc2UsIHBvc2UyOkpvaW50UG9zZTtcblx0XHR2YXIgcDE6VmVjdG9yM0QsIHAyOlZlY3RvcjNEO1xuXHRcdHZhciB0cjpWZWN0b3IzRDtcblx0XHR2YXIgbnVtSm9pbnRzOm51bWJlciAvKnVpbnQqLyA9IHNrZWxldG9uLm51bUpvaW50cztcblxuXHRcdC8vIDpzXG5cdFx0aWYgKGVuZFBvc2VzLmxlbmd0aCAhPSBudW1Kb2ludHMpXG5cdFx0XHRlbmRQb3Nlcy5sZW5ndGggPSBudW1Kb2ludHM7XG5cblx0XHRmb3IgKHZhciBpOm51bWJlciAvKnVpbnQqLyA9IDA7IGkgPCBudW1Kb2ludHM7ICsraSkge1xuXHRcdFx0ZW5kUG9zZSA9IGVuZFBvc2VzW2ldO1xuXG5cdFx0XHRpZiAoZW5kUG9zZSA9PSBudWxsKVxuXHRcdFx0XHRlbmRQb3NlID0gZW5kUG9zZXNbaV0gPSBuZXcgSm9pbnRQb3NlKCk7XG5cblx0XHRcdHBvc2UxID0gcG9zZXMxW2ldO1xuXHRcdFx0cG9zZTIgPSBwb3NlczJbaV07XG5cdFx0XHRwMSA9IHBvc2UxLnRyYW5zbGF0aW9uO1xuXHRcdFx0cDIgPSBwb3NlMi50cmFuc2xhdGlvbjtcblxuXHRcdFx0ZW5kUG9zZS5vcmllbnRhdGlvbi5sZXJwKHBvc2UxLm9yaWVudGF0aW9uLCBwb3NlMi5vcmllbnRhdGlvbiwgdGhpcy5fYmxlbmRXZWlnaHQpO1xuXG5cdFx0XHR0ciA9IGVuZFBvc2UudHJhbnNsYXRpb247XG5cdFx0XHR0ci54ID0gcDEueCArIHRoaXMuX2JsZW5kV2VpZ2h0KihwMi54IC0gcDEueCk7XG5cdFx0XHR0ci55ID0gcDEueSArIHRoaXMuX2JsZW5kV2VpZ2h0KihwMi55IC0gcDEueSk7XG5cdFx0XHR0ci56ID0gcDEueiArIHRoaXMuX2JsZW5kV2VpZ2h0KihwMi56IC0gcDEueik7XG5cdFx0fVxuXHR9XG59XG5cbmV4cG9ydCA9IFNrZWxldG9uQmluYXJ5TEVSUFN0YXRlOyJdfQ==