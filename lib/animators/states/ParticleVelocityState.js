var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var ContextGLVertexBufferFormat = require("awayjs-stagegl/lib/base/ContextGLVertexBufferFormat");
var ParticlePropertiesMode = require("awayjs-renderergl/lib/animators/data/ParticlePropertiesMode");
var ParticleStateBase = require("awayjs-renderergl/lib/animators/states/ParticleStateBase");
/**
 * ...
 */
var ParticleVelocityState = (function (_super) {
    __extends(ParticleVelocityState, _super);
    function ParticleVelocityState(animator, particleVelocityNode) {
        _super.call(this, animator, particleVelocityNode);
        this._particleVelocityNode = particleVelocityNode;
        this._velocity = this._particleVelocityNode._iVelocity;
    }
    Object.defineProperty(ParticleVelocityState.prototype, "velocity", {
        /**
         * Defines the default velocity vector of the state, used when in global mode.
         */
        get: function () {
            return this._velocity;
        },
        set: function (value) {
            this._velocity = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *
     */
    ParticleVelocityState.prototype.getVelocities = function () {
        return this._pDynamicProperties;
    };
    ParticleVelocityState.prototype.setVelocities = function (value) {
        this._pDynamicProperties = value;
        this._pDynamicPropertiesDirty = new Object();
    };
    ParticleVelocityState.prototype.setRenderState = function (stage, renderable, animationSubGeometry, animationRegisterCache, camera) {
        if (this._particleVelocityNode.mode == ParticlePropertiesMode.LOCAL_DYNAMIC && !this._pDynamicPropertiesDirty[animationSubGeometry._iUniqueId])
            this._pUpdateDynamicProperties(animationSubGeometry);
        var index = animationRegisterCache.getRegisterIndex(this._pAnimationNode, ParticleVelocityState.VELOCITY_INDEX);
        if (this._particleVelocityNode.mode == ParticlePropertiesMode.GLOBAL)
            animationRegisterCache.setVertexConst(index, this._velocity.x, this._velocity.y, this._velocity.z);
        else
            animationSubGeometry.activateVertexBuffer(index, this._particleVelocityNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_3);
    };
    /** @private */
    ParticleVelocityState.VELOCITY_INDEX = 0;
    return ParticleVelocityState;
})(ParticleStateBase);
module.exports = ParticleVelocityState;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvc3RhdGVzL1BhcnRpY2xlVmVsb2NpdHlTdGF0ZS50cyJdLCJuYW1lcyI6WyJQYXJ0aWNsZVZlbG9jaXR5U3RhdGUiLCJQYXJ0aWNsZVZlbG9jaXR5U3RhdGUuY29uc3RydWN0b3IiLCJQYXJ0aWNsZVZlbG9jaXR5U3RhdGUudmVsb2NpdHkiLCJQYXJ0aWNsZVZlbG9jaXR5U3RhdGUuZ2V0VmVsb2NpdGllcyIsIlBhcnRpY2xlVmVsb2NpdHlTdGF0ZS5zZXRWZWxvY2l0aWVzIiwiUGFydGljbGVWZWxvY2l0eVN0YXRlLnNldFJlbmRlclN0YXRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFLQSxJQUFPLDJCQUEyQixXQUFZLHFEQUFxRCxDQUFDLENBQUM7QUFLckcsSUFBTyxzQkFBc0IsV0FBYSw2REFBNkQsQ0FBQyxDQUFDO0FBRXpHLElBQU8saUJBQWlCLFdBQWMsMERBQTBELENBQUMsQ0FBQztBQUdsRyxBQUdBOztHQURHO0lBQ0cscUJBQXFCO0lBQVNBLFVBQTlCQSxxQkFBcUJBLFVBQTBCQTtJQW9DcERBLFNBcENLQSxxQkFBcUJBLENBb0NkQSxRQUF5QkEsRUFBRUEsb0JBQXlDQTtRQUUvRUMsa0JBQU1BLFFBQVFBLEVBQUVBLG9CQUFvQkEsQ0FBQ0EsQ0FBQ0E7UUFFdENBLElBQUlBLENBQUNBLHFCQUFxQkEsR0FBR0Esb0JBQW9CQSxDQUFDQTtRQUNsREEsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsSUFBSUEsQ0FBQ0EscUJBQXFCQSxDQUFDQSxVQUFVQSxDQUFDQTtJQUN4REEsQ0FBQ0E7SUEvQkRELHNCQUFXQSwyQ0FBUUE7UUFIbkJBOztXQUVHQTthQUNIQTtZQUVDRSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQTtRQUN2QkEsQ0FBQ0E7YUFFREYsVUFBb0JBLEtBQWNBO1lBRWpDRSxJQUFJQSxDQUFDQSxTQUFTQSxHQUFHQSxLQUFLQSxDQUFDQTtRQUN4QkEsQ0FBQ0E7OztPQUxBRjtJQU9EQTs7T0FFR0E7SUFDSUEsNkNBQWFBLEdBQXBCQTtRQUVDRyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxtQkFBbUJBLENBQUNBO0lBQ2pDQSxDQUFDQTtJQUVNSCw2Q0FBYUEsR0FBcEJBLFVBQXFCQSxLQUFxQkE7UUFFekNJLElBQUlBLENBQUNBLG1CQUFtQkEsR0FBR0EsS0FBS0EsQ0FBQ0E7UUFFakNBLElBQUlBLENBQUNBLHdCQUF3QkEsR0FBR0EsSUFBSUEsTUFBTUEsRUFBRUEsQ0FBQ0E7SUFDOUNBLENBQUNBO0lBVU1KLDhDQUFjQSxHQUFyQkEsVUFBc0JBLEtBQVdBLEVBQUVBLFVBQXlCQSxFQUFFQSxvQkFBeUNBLEVBQUVBLHNCQUE2Q0EsRUFBRUEsTUFBYUE7UUFFcEtLLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLHFCQUFxQkEsQ0FBQ0EsSUFBSUEsSUFBSUEsc0JBQXNCQSxDQUFDQSxhQUFhQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSx3QkFBd0JBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0E7WUFDOUlBLElBQUlBLENBQUNBLHlCQUF5QkEsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxDQUFDQTtRQUV0REEsSUFBSUEsS0FBS0EsR0FBa0JBLHNCQUFzQkEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxJQUFJQSxDQUFDQSxlQUFlQSxFQUFFQSxxQkFBcUJBLENBQUNBLGNBQWNBLENBQUNBLENBQUNBO1FBRS9IQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxxQkFBcUJBLENBQUNBLElBQUlBLElBQUlBLHNCQUFzQkEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7WUFDcEVBLHNCQUFzQkEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsS0FBS0EsRUFBRUEsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDcEdBLElBQUlBO1lBQ0hBLG9CQUFvQkEsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxLQUFLQSxFQUFFQSxJQUFJQSxDQUFDQSxxQkFBcUJBLENBQUNBLFlBQVlBLEVBQUVBLEtBQUtBLEVBQUVBLDJCQUEyQkEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7SUFDeElBLENBQUNBO0lBckRETCxlQUFlQTtJQUNEQSxvQ0FBY0EsR0FBa0JBLENBQUNBLENBQUNBO0lBcURqREEsNEJBQUNBO0FBQURBLENBeERBLEFBd0RDQSxFQXhEbUMsaUJBQWlCLEVBd0RwRDtBQUVELEFBQStCLGlCQUF0QixxQkFBcUIsQ0FBQyIsImZpbGUiOiJhbmltYXRvcnMvc3RhdGVzL1BhcnRpY2xlVmVsb2NpdHlTdGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVmVjdG9yM0RcdFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9nZW9tL1ZlY3RvcjNEXCIpO1xyXG5cclxuaW1wb3J0IENhbWVyYVx0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2VudGl0aWVzL0NhbWVyYVwiKTtcclxuXHJcbmltcG9ydCBTdGFnZVx0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvU3RhZ2VcIik7XHJcbmltcG9ydCBDb250ZXh0R0xWZXJ0ZXhCdWZmZXJGb3JtYXRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvQ29udGV4dEdMVmVydGV4QnVmZmVyRm9ybWF0XCIpO1xyXG5cclxuaW1wb3J0IFBhcnRpY2xlQW5pbWF0b3JcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9QYXJ0aWNsZUFuaW1hdG9yXCIpO1xyXG5pbXBvcnQgQW5pbWF0aW9uUmVnaXN0ZXJDYWNoZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvZGF0YS9BbmltYXRpb25SZWdpc3RlckNhY2hlXCIpO1xyXG5pbXBvcnQgQW5pbWF0aW9uU3ViR2VvbWV0cnlcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvZGF0YS9BbmltYXRpb25TdWJHZW9tZXRyeVwiKTtcclxuaW1wb3J0IFBhcnRpY2xlUHJvcGVydGllc01vZGVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYW5pbWF0b3JzL2RhdGEvUGFydGljbGVQcm9wZXJ0aWVzTW9kZVwiKTtcclxuaW1wb3J0IFBhcnRpY2xlVmVsb2NpdHlOb2RlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYW5pbWF0b3JzL25vZGVzL1BhcnRpY2xlVmVsb2NpdHlOb2RlXCIpO1xyXG5pbXBvcnQgUGFydGljbGVTdGF0ZUJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvc3RhdGVzL1BhcnRpY2xlU3RhdGVCYXNlXCIpO1xyXG5pbXBvcnQgUmVuZGVyYWJsZUJhc2VcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL3Bvb2wvUmVuZGVyYWJsZUJhc2VcIik7XHJcblxyXG4vKipcclxuICogLi4uXHJcbiAqL1xyXG5jbGFzcyBQYXJ0aWNsZVZlbG9jaXR5U3RhdGUgZXh0ZW5kcyBQYXJ0aWNsZVN0YXRlQmFzZVxyXG57XHJcblx0LyoqIEBwcml2YXRlICovXHJcblx0cHVibGljIHN0YXRpYyBWRUxPQ0lUWV9JTkRFWDpudW1iZXIgLyppbnQqLyA9IDA7XHJcblxyXG5cdHByaXZhdGUgX3BhcnRpY2xlVmVsb2NpdHlOb2RlOlBhcnRpY2xlVmVsb2NpdHlOb2RlO1xyXG5cdHByaXZhdGUgX3ZlbG9jaXR5OlZlY3RvcjNEO1xyXG5cclxuXHQvKipcclxuXHQgKiBEZWZpbmVzIHRoZSBkZWZhdWx0IHZlbG9jaXR5IHZlY3RvciBvZiB0aGUgc3RhdGUsIHVzZWQgd2hlbiBpbiBnbG9iYWwgbW9kZS5cclxuXHQgKi9cclxuXHRwdWJsaWMgZ2V0IHZlbG9jaXR5KCk6VmVjdG9yM0RcclxuXHR7XHJcblx0XHRyZXR1cm4gdGhpcy5fdmVsb2NpdHk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgc2V0IHZlbG9jaXR5KHZhbHVlOlZlY3RvcjNEKVxyXG5cdHtcclxuXHRcdHRoaXMuX3ZlbG9jaXR5ID0gdmFsdWU7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKlxyXG5cdCAqL1xyXG5cdHB1YmxpYyBnZXRWZWxvY2l0aWVzKCk6QXJyYXk8VmVjdG9yM0Q+XHJcblx0e1xyXG5cdFx0cmV0dXJuIHRoaXMuX3BEeW5hbWljUHJvcGVydGllcztcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBzZXRWZWxvY2l0aWVzKHZhbHVlOkFycmF5PFZlY3RvcjNEPilcclxuXHR7XHJcblx0XHR0aGlzLl9wRHluYW1pY1Byb3BlcnRpZXMgPSB2YWx1ZTtcclxuXHJcblx0XHR0aGlzLl9wRHluYW1pY1Byb3BlcnRpZXNEaXJ0eSA9IG5ldyBPYmplY3QoKTtcclxuXHR9XHJcblxyXG5cdGNvbnN0cnVjdG9yKGFuaW1hdG9yOlBhcnRpY2xlQW5pbWF0b3IsIHBhcnRpY2xlVmVsb2NpdHlOb2RlOlBhcnRpY2xlVmVsb2NpdHlOb2RlKVxyXG5cdHtcclxuXHRcdHN1cGVyKGFuaW1hdG9yLCBwYXJ0aWNsZVZlbG9jaXR5Tm9kZSk7XHJcblxyXG5cdFx0dGhpcy5fcGFydGljbGVWZWxvY2l0eU5vZGUgPSBwYXJ0aWNsZVZlbG9jaXR5Tm9kZTtcclxuXHRcdHRoaXMuX3ZlbG9jaXR5ID0gdGhpcy5fcGFydGljbGVWZWxvY2l0eU5vZGUuX2lWZWxvY2l0eTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBzZXRSZW5kZXJTdGF0ZShzdGFnZTpTdGFnZSwgcmVuZGVyYWJsZTpSZW5kZXJhYmxlQmFzZSwgYW5pbWF0aW9uU3ViR2VvbWV0cnk6QW5pbWF0aW9uU3ViR2VvbWV0cnksIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGU6QW5pbWF0aW9uUmVnaXN0ZXJDYWNoZSwgY2FtZXJhOkNhbWVyYSlcclxuXHR7XHJcblx0XHRpZiAodGhpcy5fcGFydGljbGVWZWxvY2l0eU5vZGUubW9kZSA9PSBQYXJ0aWNsZVByb3BlcnRpZXNNb2RlLkxPQ0FMX0RZTkFNSUMgJiYgIXRoaXMuX3BEeW5hbWljUHJvcGVydGllc0RpcnR5W2FuaW1hdGlvblN1Ykdlb21ldHJ5Ll9pVW5pcXVlSWRdKVxyXG5cdFx0XHR0aGlzLl9wVXBkYXRlRHluYW1pY1Byb3BlcnRpZXMoYW5pbWF0aW9uU3ViR2VvbWV0cnkpO1xyXG5cclxuXHRcdHZhciBpbmRleDpudW1iZXIgLyppbnQqLyA9IGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuZ2V0UmVnaXN0ZXJJbmRleCh0aGlzLl9wQW5pbWF0aW9uTm9kZSwgUGFydGljbGVWZWxvY2l0eVN0YXRlLlZFTE9DSVRZX0lOREVYKTtcclxuXHJcblx0XHRpZiAodGhpcy5fcGFydGljbGVWZWxvY2l0eU5vZGUubW9kZSA9PSBQYXJ0aWNsZVByb3BlcnRpZXNNb2RlLkdMT0JBTClcclxuXHRcdFx0YW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5zZXRWZXJ0ZXhDb25zdChpbmRleCwgdGhpcy5fdmVsb2NpdHkueCwgdGhpcy5fdmVsb2NpdHkueSwgdGhpcy5fdmVsb2NpdHkueik7XHJcblx0XHRlbHNlXHJcblx0XHRcdGFuaW1hdGlvblN1Ykdlb21ldHJ5LmFjdGl2YXRlVmVydGV4QnVmZmVyKGluZGV4LCB0aGlzLl9wYXJ0aWNsZVZlbG9jaXR5Tm9kZS5faURhdGFPZmZzZXQsIHN0YWdlLCBDb250ZXh0R0xWZXJ0ZXhCdWZmZXJGb3JtYXQuRkxPQVRfMyk7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgPSBQYXJ0aWNsZVZlbG9jaXR5U3RhdGU7Il19