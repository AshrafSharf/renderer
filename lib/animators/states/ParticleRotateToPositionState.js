var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
var ContextGLVertexBufferFormat = require("awayjs-stagegl/lib/base/ContextGLVertexBufferFormat");
var ParticlePropertiesMode = require("awayjs-renderergl/lib/animators/data/ParticlePropertiesMode");
var ParticleStateBase = require("awayjs-renderergl/lib/animators/states/ParticleStateBase");
/**
 * ...
 */
var ParticleRotateToPositionState = (function (_super) {
    __extends(ParticleRotateToPositionState, _super);
    function ParticleRotateToPositionState(animator, particleRotateToPositionNode) {
        _super.call(this, animator, particleRotateToPositionNode);
        this._matrix = new Matrix3D();
        this._particleRotateToPositionNode = particleRotateToPositionNode;
        this._position = this._particleRotateToPositionNode._iPosition;
    }
    Object.defineProperty(ParticleRotateToPositionState.prototype, "position", {
        /**
         * Defines the position of the point the particle will rotate to face when in global mode. Defaults to 0,0,0.
         */
        get: function () {
            return this._position;
        },
        set: function (value) {
            this._position = value;
        },
        enumerable: true,
        configurable: true
    });
    ParticleRotateToPositionState.prototype.setRenderState = function (stage, renderable, animationSubGeometry, animationRegisterCache, camera) {
        var index = animationRegisterCache.getRegisterIndex(this._pAnimationNode, ParticleRotateToPositionState.POSITION_INDEX);
        if (animationRegisterCache.hasBillboard) {
            this._matrix.copyFrom(renderable.sourceEntity.sceneTransform);
            this._matrix.append(camera.inverseSceneTransform);
            animationRegisterCache.setVertexConstFromMatrix(animationRegisterCache.getRegisterIndex(this._pAnimationNode, ParticleRotateToPositionState.MATRIX_INDEX), this._matrix);
        }
        if (this._particleRotateToPositionNode.mode == ParticlePropertiesMode.GLOBAL) {
            this._offset = renderable.sourceEntity.inverseSceneTransform.transformVector(this._position);
            animationRegisterCache.setVertexConst(index, this._offset.x, this._offset.y, this._offset.z);
        }
        else
            animationSubGeometry.activateVertexBuffer(index, this._particleRotateToPositionNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_3);
    };
    /** @private */
    ParticleRotateToPositionState.MATRIX_INDEX = 0;
    /** @private */
    ParticleRotateToPositionState.POSITION_INDEX = 1;
    return ParticleRotateToPositionState;
})(ParticleStateBase);
module.exports = ParticleRotateToPositionState;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvc3RhdGVzL1BhcnRpY2xlUm90YXRlVG9Qb3NpdGlvblN0YXRlLnRzIl0sIm5hbWVzIjpbIlBhcnRpY2xlUm90YXRlVG9Qb3NpdGlvblN0YXRlIiwiUGFydGljbGVSb3RhdGVUb1Bvc2l0aW9uU3RhdGUuY29uc3RydWN0b3IiLCJQYXJ0aWNsZVJvdGF0ZVRvUG9zaXRpb25TdGF0ZS5wb3NpdGlvbiIsIlBhcnRpY2xlUm90YXRlVG9Qb3NpdGlvblN0YXRlLnNldFJlbmRlclN0YXRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFPLFFBQVEsV0FBaUIsK0JBQStCLENBQUMsQ0FBQztBQU1qRSxJQUFPLDJCQUEyQixXQUFZLHFEQUFxRCxDQUFDLENBQUM7QUFLckcsSUFBTyxzQkFBc0IsV0FBYSw2REFBNkQsQ0FBQyxDQUFDO0FBRXpHLElBQU8saUJBQWlCLFdBQWMsMERBQTBELENBQUMsQ0FBQztBQUdsRyxBQUdBOztHQURHO0lBQ0csNkJBQTZCO0lBQVNBLFVBQXRDQSw2QkFBNkJBLFVBQTBCQTtJQXlCNURBLFNBekJLQSw2QkFBNkJBLENBeUJ0QkEsUUFBeUJBLEVBQUVBLDRCQUF5REE7UUFFL0ZDLGtCQUFNQSxRQUFRQSxFQUFFQSw0QkFBNEJBLENBQUNBLENBQUNBO1FBbEJ2Q0EsWUFBT0EsR0FBWUEsSUFBSUEsUUFBUUEsRUFBRUEsQ0FBQ0E7UUFvQnpDQSxJQUFJQSxDQUFDQSw2QkFBNkJBLEdBQUdBLDRCQUE0QkEsQ0FBQ0E7UUFDbEVBLElBQUlBLENBQUNBLFNBQVNBLEdBQUdBLElBQUlBLENBQUNBLDZCQUE2QkEsQ0FBQ0EsVUFBVUEsQ0FBQ0E7SUFDaEVBLENBQUNBO0lBaEJERCxzQkFBV0EsbURBQVFBO1FBSG5CQTs7V0FFR0E7YUFDSEE7WUFFQ0UsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0E7UUFDdkJBLENBQUNBO2FBRURGLFVBQW9CQSxLQUFjQTtZQUVqQ0UsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsS0FBS0EsQ0FBQ0E7UUFDeEJBLENBQUNBOzs7T0FMQUY7SUFlTUEsc0RBQWNBLEdBQXJCQSxVQUFzQkEsS0FBV0EsRUFBRUEsVUFBeUJBLEVBQUVBLG9CQUF5Q0EsRUFBRUEsc0JBQTZDQSxFQUFFQSxNQUFhQTtRQUVwS0csSUFBSUEsS0FBS0EsR0FBa0JBLHNCQUFzQkEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxJQUFJQSxDQUFDQSxlQUFlQSxFQUFFQSw2QkFBNkJBLENBQUNBLGNBQWNBLENBQUNBLENBQUNBO1FBRXZJQSxFQUFFQSxDQUFDQSxDQUFDQSxzQkFBc0JBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBLENBQUNBO1lBQ3pDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxRQUFRQSxDQUFDQSxVQUFVQSxDQUFDQSxZQUFZQSxDQUFDQSxjQUFjQSxDQUFDQSxDQUFDQTtZQUM5REEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EscUJBQXFCQSxDQUFDQSxDQUFDQTtZQUNsREEsc0JBQXNCQSxDQUFDQSx3QkFBd0JBLENBQUNBLHNCQUFzQkEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxJQUFJQSxDQUFDQSxlQUFlQSxFQUFFQSw2QkFBNkJBLENBQUNBLFlBQVlBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO1FBQzFLQSxDQUFDQTtRQUVEQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSw2QkFBNkJBLENBQUNBLElBQUlBLElBQUlBLHNCQUFzQkEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDOUVBLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLFVBQVVBLENBQUNBLFlBQVlBLENBQUNBLHFCQUFxQkEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0E7WUFDN0ZBLHNCQUFzQkEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsS0FBS0EsRUFBRUEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDOUZBLENBQUNBO1FBQUNBLElBQUlBO1lBQ0xBLG9CQUFvQkEsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxLQUFLQSxFQUFFQSxJQUFJQSxDQUFDQSw2QkFBNkJBLENBQUNBLFlBQVlBLEVBQUVBLEtBQUtBLEVBQUVBLDJCQUEyQkEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7SUFFaEpBLENBQUNBO0lBL0NESCxlQUFlQTtJQUNEQSwwQ0FBWUEsR0FBa0JBLENBQUNBLENBQUNBO0lBQzlDQSxlQUFlQTtJQUNEQSw0Q0FBY0EsR0FBa0JBLENBQUNBLENBQUNBO0lBOENqREEsb0NBQUNBO0FBQURBLENBbkRBLEFBbURDQSxFQW5EMkMsaUJBQWlCLEVBbUQ1RDtBQUVELEFBQXVDLGlCQUE5Qiw2QkFBNkIsQ0FBQyIsImZpbGUiOiJhbmltYXRvcnMvc3RhdGVzL1BhcnRpY2xlUm90YXRlVG9Qb3NpdGlvblN0YXRlLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNYXRyaXgzRFx0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2dlb20vTWF0cml4M0RcIik7XHJcbmltcG9ydCBWZWN0b3IzRFx0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2dlb20vVmVjdG9yM0RcIik7XHJcblxyXG5pbXBvcnQgQ2FtZXJhXHRcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvZW50aXRpZXMvQ2FtZXJhXCIpO1xyXG5cclxuaW1wb3J0IFN0YWdlXHRcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYmFzZS9TdGFnZVwiKTtcclxuaW1wb3J0IENvbnRleHRHTFZlcnRleEJ1ZmZlckZvcm1hdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYmFzZS9Db250ZXh0R0xWZXJ0ZXhCdWZmZXJGb3JtYXRcIik7XHJcblxyXG5pbXBvcnQgUGFydGljbGVBbmltYXRvclx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYW5pbWF0b3JzL1BhcnRpY2xlQW5pbWF0b3JcIik7XHJcbmltcG9ydCBBbmltYXRpb25SZWdpc3RlckNhY2hlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9kYXRhL0FuaW1hdGlvblJlZ2lzdGVyQ2FjaGVcIik7XHJcbmltcG9ydCBBbmltYXRpb25TdWJHZW9tZXRyeVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9kYXRhL0FuaW1hdGlvblN1Ykdlb21ldHJ5XCIpO1xyXG5pbXBvcnQgUGFydGljbGVQcm9wZXJ0aWVzTW9kZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvZGF0YS9QYXJ0aWNsZVByb3BlcnRpZXNNb2RlXCIpO1xyXG5pbXBvcnQgUGFydGljbGVSb3RhdGVUb1Bvc2l0aW9uTm9kZVx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYW5pbWF0b3JzL25vZGVzL1BhcnRpY2xlUm90YXRlVG9Qb3NpdGlvbk5vZGVcIik7XHJcbmltcG9ydCBQYXJ0aWNsZVN0YXRlQmFzZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9zdGF0ZXMvUGFydGljbGVTdGF0ZUJhc2VcIik7XHJcbmltcG9ydCBSZW5kZXJhYmxlQmFzZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvcG9vbC9SZW5kZXJhYmxlQmFzZVwiKTtcclxuXHJcbi8qKlxyXG4gKiAuLi5cclxuICovXHJcbmNsYXNzIFBhcnRpY2xlUm90YXRlVG9Qb3NpdGlvblN0YXRlIGV4dGVuZHMgUGFydGljbGVTdGF0ZUJhc2Vcclxue1xyXG5cdC8qKiBAcHJpdmF0ZSAqL1xyXG5cdHB1YmxpYyBzdGF0aWMgTUFUUklYX0lOREVYOm51bWJlciAvKmludCovID0gMDtcclxuXHQvKiogQHByaXZhdGUgKi9cclxuXHRwdWJsaWMgc3RhdGljIFBPU0lUSU9OX0lOREVYOm51bWJlciAvKmludCovID0gMTtcclxuXHJcblx0cHJpdmF0ZSBfcGFydGljbGVSb3RhdGVUb1Bvc2l0aW9uTm9kZTpQYXJ0aWNsZVJvdGF0ZVRvUG9zaXRpb25Ob2RlO1xyXG5cdHByaXZhdGUgX3Bvc2l0aW9uOlZlY3RvcjNEO1xyXG5cdHByaXZhdGUgX21hdHJpeDpNYXRyaXgzRCA9IG5ldyBNYXRyaXgzRCgpO1xyXG5cdHByaXZhdGUgX29mZnNldDpWZWN0b3IzRDtcclxuXHJcblx0LyoqXHJcblx0ICogRGVmaW5lcyB0aGUgcG9zaXRpb24gb2YgdGhlIHBvaW50IHRoZSBwYXJ0aWNsZSB3aWxsIHJvdGF0ZSB0byBmYWNlIHdoZW4gaW4gZ2xvYmFsIG1vZGUuIERlZmF1bHRzIHRvIDAsMCwwLlxyXG5cdCAqL1xyXG5cdHB1YmxpYyBnZXQgcG9zaXRpb24oKTpWZWN0b3IzRFxyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLl9wb3NpdGlvbjtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBzZXQgcG9zaXRpb24odmFsdWU6VmVjdG9yM0QpXHJcblx0e1xyXG5cdFx0dGhpcy5fcG9zaXRpb24gPSB2YWx1ZTtcclxuXHR9XHJcblxyXG5cdGNvbnN0cnVjdG9yKGFuaW1hdG9yOlBhcnRpY2xlQW5pbWF0b3IsIHBhcnRpY2xlUm90YXRlVG9Qb3NpdGlvbk5vZGU6UGFydGljbGVSb3RhdGVUb1Bvc2l0aW9uTm9kZSlcclxuXHR7XHJcblx0XHRzdXBlcihhbmltYXRvciwgcGFydGljbGVSb3RhdGVUb1Bvc2l0aW9uTm9kZSk7XHJcblxyXG5cdFx0dGhpcy5fcGFydGljbGVSb3RhdGVUb1Bvc2l0aW9uTm9kZSA9IHBhcnRpY2xlUm90YXRlVG9Qb3NpdGlvbk5vZGU7XHJcblx0XHR0aGlzLl9wb3NpdGlvbiA9IHRoaXMuX3BhcnRpY2xlUm90YXRlVG9Qb3NpdGlvbk5vZGUuX2lQb3NpdGlvbjtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBzZXRSZW5kZXJTdGF0ZShzdGFnZTpTdGFnZSwgcmVuZGVyYWJsZTpSZW5kZXJhYmxlQmFzZSwgYW5pbWF0aW9uU3ViR2VvbWV0cnk6QW5pbWF0aW9uU3ViR2VvbWV0cnksIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGU6QW5pbWF0aW9uUmVnaXN0ZXJDYWNoZSwgY2FtZXJhOkNhbWVyYSlcclxuXHR7XHJcblx0XHR2YXIgaW5kZXg6bnVtYmVyIC8qaW50Ki8gPSBhbmltYXRpb25SZWdpc3RlckNhY2hlLmdldFJlZ2lzdGVySW5kZXgodGhpcy5fcEFuaW1hdGlvbk5vZGUsIFBhcnRpY2xlUm90YXRlVG9Qb3NpdGlvblN0YXRlLlBPU0lUSU9OX0lOREVYKTtcclxuXHJcblx0XHRpZiAoYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5oYXNCaWxsYm9hcmQpIHtcclxuXHRcdFx0dGhpcy5fbWF0cml4LmNvcHlGcm9tKHJlbmRlcmFibGUuc291cmNlRW50aXR5LnNjZW5lVHJhbnNmb3JtKTtcclxuXHRcdFx0dGhpcy5fbWF0cml4LmFwcGVuZChjYW1lcmEuaW52ZXJzZVNjZW5lVHJhbnNmb3JtKTtcclxuXHRcdFx0YW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5zZXRWZXJ0ZXhDb25zdEZyb21NYXRyaXgoYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5nZXRSZWdpc3RlckluZGV4KHRoaXMuX3BBbmltYXRpb25Ob2RlLCBQYXJ0aWNsZVJvdGF0ZVRvUG9zaXRpb25TdGF0ZS5NQVRSSVhfSU5ERVgpLCB0aGlzLl9tYXRyaXgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh0aGlzLl9wYXJ0aWNsZVJvdGF0ZVRvUG9zaXRpb25Ob2RlLm1vZGUgPT0gUGFydGljbGVQcm9wZXJ0aWVzTW9kZS5HTE9CQUwpIHtcclxuXHRcdFx0dGhpcy5fb2Zmc2V0ID0gcmVuZGVyYWJsZS5zb3VyY2VFbnRpdHkuaW52ZXJzZVNjZW5lVHJhbnNmb3JtLnRyYW5zZm9ybVZlY3Rvcih0aGlzLl9wb3NpdGlvbik7XHJcblx0XHRcdGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuc2V0VmVydGV4Q29uc3QoaW5kZXgsIHRoaXMuX29mZnNldC54LCB0aGlzLl9vZmZzZXQueSwgdGhpcy5fb2Zmc2V0LnopO1xyXG5cdFx0fSBlbHNlXHJcblx0XHRcdGFuaW1hdGlvblN1Ykdlb21ldHJ5LmFjdGl2YXRlVmVydGV4QnVmZmVyKGluZGV4LCB0aGlzLl9wYXJ0aWNsZVJvdGF0ZVRvUG9zaXRpb25Ob2RlLl9pRGF0YU9mZnNldCwgc3RhZ2UsIENvbnRleHRHTFZlcnRleEJ1ZmZlckZvcm1hdC5GTE9BVF8zKTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZXhwb3J0ID0gUGFydGljbGVSb3RhdGVUb1Bvc2l0aW9uU3RhdGU7Il19