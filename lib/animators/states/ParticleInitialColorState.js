var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Vector3D = require("awayjs-core/lib/core/geom/Vector3D");
var ContextGLVertexBufferFormat = require("awayjs-stagegl/lib/core/stagegl/ContextGLVertexBufferFormat");
var ParticlePropertiesMode = require("awayjs-renderergl/lib/animators/data/ParticlePropertiesMode");
var ParticleStateBase = require("awayjs-renderergl/lib/animators/states/ParticleStateBase");
/**
*
*/
var ParticleInitialColorState = (function (_super) {
    __extends(ParticleInitialColorState, _super);
    function ParticleInitialColorState(animator, particleInitialColorNode) {
        _super.call(this, animator, particleInitialColorNode);
        this._particleInitialColorNode = particleInitialColorNode;
        this._usesMultiplier = particleInitialColorNode._iUsesMultiplier;
        this._usesOffset = particleInitialColorNode._iUsesOffset;
        this._initialColor = particleInitialColorNode._iInitialColor;
        this.updateColorData();
    }
    Object.defineProperty(ParticleInitialColorState.prototype, "initialColor", {
        /**
         * Defines the initial color transform of the state, when in global mode.
         */
        get: function () {
            return this._initialColor;
        },
        set: function (value) {
            this._initialColor = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @inheritDoc
     */
    ParticleInitialColorState.prototype.setRenderState = function (stage, renderable, animationSubGeometry, animationRegisterCache, camera) {
        // TODO: not used
        renderable = renderable;
        camera = camera;
        if (animationRegisterCache.needFragmentAnimation) {
            if (this._particleInitialColorNode.mode == ParticlePropertiesMode.LOCAL_STATIC) {
                var dataOffset = this._particleInitialColorNode._iDataOffset;
                if (this._usesMultiplier) {
                    animationSubGeometry.activateVertexBuffer(animationRegisterCache.getRegisterIndex(this._pAnimationNode, ParticleInitialColorState.MULTIPLIER_INDEX), dataOffset, stage, ContextGLVertexBufferFormat.FLOAT_4);
                    dataOffset += 4;
                }
                if (this._usesOffset)
                    animationSubGeometry.activateVertexBuffer(animationRegisterCache.getRegisterIndex(this._pAnimationNode, ParticleInitialColorState.OFFSET_INDEX), dataOffset, stage, ContextGLVertexBufferFormat.FLOAT_4);
            }
            else {
                if (this._usesMultiplier)
                    animationRegisterCache.setVertexConst(animationRegisterCache.getRegisterIndex(this._pAnimationNode, ParticleInitialColorState.MULTIPLIER_INDEX), this._multiplierData.x, this._multiplierData.y, this._multiplierData.z, this._multiplierData.w);
                if (this._usesOffset)
                    animationRegisterCache.setVertexConst(animationRegisterCache.getRegisterIndex(this._pAnimationNode, ParticleInitialColorState.OFFSET_INDEX), this._offsetData.x, this._offsetData.y, this._offsetData.z, this._offsetData.w);
            }
        }
    };
    ParticleInitialColorState.prototype.updateColorData = function () {
        if (this._particleInitialColorNode.mode == ParticlePropertiesMode.GLOBAL) {
            if (this._usesMultiplier)
                this._multiplierData = new Vector3D(this._initialColor.redMultiplier, this._initialColor.greenMultiplier, this._initialColor.blueMultiplier, this._initialColor.alphaMultiplier);
            if (this._usesOffset)
                this._offsetData = new Vector3D(this._initialColor.redOffset / 255, this._initialColor.greenOffset / 255, this._initialColor.blueOffset / 255, this._initialColor.alphaOffset / 255);
        }
    };
    /** @private */
    ParticleInitialColorState.MULTIPLIER_INDEX = 0;
    /** @private */
    ParticleInitialColorState.OFFSET_INDEX = 1;
    return ParticleInitialColorState;
})(ParticleStateBase);
module.exports = ParticleInitialColorState;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFuaW1hdG9ycy9zdGF0ZXMvcGFydGljbGVpbml0aWFsY29sb3JzdGF0ZS50cyJdLCJuYW1lcyI6WyJQYXJ0aWNsZUluaXRpYWxDb2xvclN0YXRlIiwiUGFydGljbGVJbml0aWFsQ29sb3JTdGF0ZS5jb25zdHJ1Y3RvciIsIlBhcnRpY2xlSW5pdGlhbENvbG9yU3RhdGUuaW5pdGlhbENvbG9yIiwiUGFydGljbGVJbml0aWFsQ29sb3JTdGF0ZS5zZXRSZW5kZXJTdGF0ZSIsIlBhcnRpY2xlSW5pdGlhbENvbG9yU3RhdGUudXBkYXRlQ29sb3JEYXRhIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxJQUFPLFFBQVEsV0FBaUIsb0NBQW9DLENBQUMsQ0FBQztBQU10RSxJQUFPLDJCQUEyQixXQUFZLDZEQUE2RCxDQUFDLENBQUM7QUFJN0csSUFBTyxzQkFBc0IsV0FBYSw2REFBNkQsQ0FBQyxDQUFDO0FBRXpHLElBQU8saUJBQWlCLFdBQWMsMERBQTBELENBQUMsQ0FBQztBQUVsRyxBQUdBOztFQURFO0lBQ0kseUJBQXlCO0lBQVNBLFVBQWxDQSx5QkFBeUJBLFVBQTBCQTtJQWN4REEsU0FkS0EseUJBQXlCQSxDQWNsQkEsUUFBeUJBLEVBQUVBLHdCQUFpREE7UUFFdkZDLGtCQUFNQSxRQUFRQSxFQUFFQSx3QkFBd0JBLENBQUNBLENBQUNBO1FBRTFDQSxJQUFJQSxDQUFDQSx5QkFBeUJBLEdBQUdBLHdCQUF3QkEsQ0FBQ0E7UUFDMURBLElBQUlBLENBQUNBLGVBQWVBLEdBQUdBLHdCQUF3QkEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQTtRQUNqRUEsSUFBSUEsQ0FBQ0EsV0FBV0EsR0FBR0Esd0JBQXdCQSxDQUFDQSxZQUFZQSxDQUFDQTtRQUN6REEsSUFBSUEsQ0FBQ0EsYUFBYUEsR0FBR0Esd0JBQXdCQSxDQUFDQSxjQUFjQSxDQUFDQTtRQUU3REEsSUFBSUEsQ0FBQ0EsZUFBZUEsRUFBRUEsQ0FBQ0E7SUFDeEJBLENBQUNBO0lBS0RELHNCQUFXQSxtREFBWUE7UUFI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b2xvclN0YXRlLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9yb2JiYXRlbWFuL1dlYnN0b3JtUHJvamVjdHMvYXdheWpzLXJlbmRlcmVyZ2wvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvbG9yVHJhbnNmb3JtXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9jb3JlL2dlb20vQ29sb3JUcmFuc2Zvcm1cIik7XG5pbXBvcnQgVmVjdG9yM0RcdFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9jb3JlL2dlb20vVmVjdG9yM0RcIik7XG5pbXBvcnQgQ2FtZXJhXHRcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZW50aXRpZXMvQ2FtZXJhXCIpO1xuXG5pbXBvcnQgQW5pbWF0aW9uUmVnaXN0ZXJDYWNoZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9hbmltYXRvcnMvZGF0YS9BbmltYXRpb25SZWdpc3RlckNhY2hlXCIpO1xuaW1wb3J0IFN0YWdlXHRcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvY29yZS9iYXNlL1N0YWdlXCIpO1xuaW1wb3J0IFJlbmRlcmFibGVCYXNlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9jb3JlL3Bvb2wvUmVuZGVyYWJsZUJhc2VcIik7XG5pbXBvcnQgQ29udGV4dEdMVmVydGV4QnVmZmVyRm9ybWF0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9jb3JlL3N0YWdlZ2wvQ29udGV4dEdMVmVydGV4QnVmZmVyRm9ybWF0XCIpO1xuXG5pbXBvcnQgUGFydGljbGVBbmltYXRvclx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYW5pbWF0b3JzL1BhcnRpY2xlQW5pbWF0b3JcIik7XG5pbXBvcnQgQW5pbWF0aW9uU3ViR2VvbWV0cnlcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvZGF0YS9BbmltYXRpb25TdWJHZW9tZXRyeVwiKTtcbmltcG9ydCBQYXJ0aWNsZVByb3BlcnRpZXNNb2RlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9kYXRhL1BhcnRpY2xlUHJvcGVydGllc01vZGVcIik7XG5pbXBvcnQgUGFydGljbGVJbml0aWFsQ29sb3JOb2RlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9ub2Rlcy9QYXJ0aWNsZUluaXRpYWxDb2xvck5vZGVcIik7XG5pbXBvcnQgUGFydGljbGVTdGF0ZUJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvc3RhdGVzL1BhcnRpY2xlU3RhdGVCYXNlXCIpO1xuXG4vKipcbipcbiovXG5jbGFzcyBQYXJ0aWNsZUluaXRpYWxDb2xvclN0YXRlIGV4dGVuZHMgUGFydGljbGVTdGF0ZUJhc2Vcbntcblx0LyoqIEBwcml2YXRlICovXG5cdHB1YmxpYyBzdGF0aWMgTVVMVElQTElFUl9JTkRFWDpudW1iZXIgLyp1aW50Ki8gPSAwO1xuXHQvKiogQHByaXZhdGUgKi9cblx0cHVibGljIHN0YXRpYyBPRkZTRVRfSU5ERVg6bnVtYmVyIC8qdWludCovID0gMTtcblxuXHRwcml2YXRlIF9wYXJ0aWNsZUluaXRpYWxDb2xvck5vZGU6UGFydGljbGVJbml0aWFsQ29sb3JOb2RlO1xuXHRwcml2YXRlIF91c2VzTXVsdGlwbGllcjpib29sZWFuO1xuXHRwcml2YXRlIF91c2VzT2Zmc2V0OmJvb2xlYW47XG5cdHByaXZhdGUgX2luaXRpYWxDb2xvcjpDb2xvclRyYW5zZm9ybTtcblx0cHJpdmF0ZSBfbXVsdGlwbGllckRhdGE6VmVjdG9yM0Q7XG5cdHByaXZhdGUgX29mZnNldERhdGE6VmVjdG9yM0Q7XG5cblx0Y29uc3RydWN0b3IoYW5pbWF0b3I6UGFydGljbGVBbmltYXRvciwgcGFydGljbGVJbml0aWFsQ29sb3JOb2RlOlBhcnRpY2xlSW5pdGlhbENvbG9yTm9kZSlcblx0e1xuXHRcdHN1cGVyKGFuaW1hdG9yLCBwYXJ0aWNsZUluaXRpYWxDb2xvck5vZGUpO1xuXG5cdFx0dGhpcy5fcGFydGljbGVJbml0aWFsQ29sb3JOb2RlID0gcGFydGljbGVJbml0aWFsQ29sb3JOb2RlO1xuXHRcdHRoaXMuX3VzZXNNdWx0aXBsaWVyID0gcGFydGljbGVJbml0aWFsQ29sb3JOb2RlLl9pVXNlc011bHRpcGxpZXI7XG5cdFx0dGhpcy5fdXNlc09mZnNldCA9IHBhcnRpY2xlSW5pdGlhbENvbG9yTm9kZS5faVVzZXNPZmZzZXQ7XG5cdFx0dGhpcy5faW5pdGlhbENvbG9yID0gcGFydGljbGVJbml0aWFsQ29sb3JOb2RlLl9pSW5pdGlhbENvbG9yO1xuXG5cdFx0dGhpcy51cGRhdGVDb2xvckRhdGEoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBEZWZpbmVzIHRoZSBpbml0aWFsIGNvbG9yIHRyYW5zZm9ybSBvZiB0aGUgc3RhdGUsIHdoZW4gaW4gZ2xvYmFsIG1vZGUuXG5cdCAqL1xuXHRwdWJsaWMgZ2V0IGluaXRpYWxDb2xvcigpOkNvbG9yVHJhbnNmb3JtXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5faW5pdGlhbENvbG9yO1xuXHR9XG5cblx0cHVibGljIHNldCBpbml0aWFsQ29sb3IodmFsdWU6Q29sb3JUcmFuc2Zvcm0pXG5cdHtcblx0XHR0aGlzLl9pbml0aWFsQ29sb3IgPSB2YWx1ZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIHNldFJlbmRlclN0YXRlKHN0YWdlOlN0YWdlLCByZW5kZXJhYmxlOlJlbmRlcmFibGVCYXNlLCBhbmltYXRpb25TdWJHZW9tZXRyeTpBbmltYXRpb25TdWJHZW9tZXRyeSwgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZTpBbmltYXRpb25SZWdpc3RlckNhY2hlLCBjYW1lcmE6Q2FtZXJhKVxuXHR7XG5cdFx0Ly8gVE9ETzogbm90IHVzZWRcblx0XHRyZW5kZXJhYmxlID0gcmVuZGVyYWJsZTtcblx0XHRjYW1lcmEgPSBjYW1lcmE7XG5cblx0XHRpZiAoYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5uZWVkRnJhZ21lbnRBbmltYXRpb24pIHtcblx0XHRcdGlmICh0aGlzLl9wYXJ0aWNsZUluaXRpYWxDb2xvck5vZGUubW9kZSA9PSBQYXJ0aWNsZVByb3BlcnRpZXNNb2RlLkxPQ0FMX1NUQVRJQykge1xuXHRcdFx0XHR2YXIgZGF0YU9mZnNldDpudW1iZXIgLyp1aW50Ki8gPSB0aGlzLl9wYXJ0aWNsZUluaXRpYWxDb2xvck5vZGUuX2lEYXRhT2Zmc2V0O1xuXHRcdFx0XHRpZiAodGhpcy5fdXNlc011bHRpcGxpZXIpIHtcblx0XHRcdFx0XHRhbmltYXRpb25TdWJHZW9tZXRyeS5hY3RpdmF0ZVZlcnRleEJ1ZmZlcihhbmltYXRpb25SZWdpc3RlckNhY2hlLmdldFJlZ2lzdGVySW5kZXgodGhpcy5fcEFuaW1hdGlvbk5vZGUsIFBhcnRpY2xlSW5pdGlhbENvbG9yU3RhdGUuTVVMVElQTElFUl9JTkRFWCksIGRhdGFPZmZzZXQsIHN0YWdlLCBDb250ZXh0R0xWZXJ0ZXhCdWZmZXJGb3JtYXQuRkxPQVRfNCk7XG5cdFx0XHRcdFx0ZGF0YU9mZnNldCArPSA0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0aGlzLl91c2VzT2Zmc2V0KVxuXHRcdFx0XHRcdGFuaW1hdGlvblN1Ykdlb21ldHJ5LmFjdGl2YXRlVmVydGV4QnVmZmVyKGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuZ2V0UmVnaXN0ZXJJbmRleCh0aGlzLl9wQW5pbWF0aW9uTm9kZSwgUGFydGljbGVJbml0aWFsQ29sb3JTdGF0ZS5PRkZTRVRfSU5ERVgpLCBkYXRhT2Zmc2V0LCBzdGFnZSwgQ29udGV4dEdMVmVydGV4QnVmZmVyRm9ybWF0LkZMT0FUXzQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYgKHRoaXMuX3VzZXNNdWx0aXBsaWVyKVxuXHRcdFx0XHRcdGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGUuc2V0VmVydGV4Q29uc3QoYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5nZXRSZWdpc3RlckluZGV4KHRoaXMuX3BBbmltYXRpb25Ob2RlLCBQYXJ0aWNsZUluaXRpYWxDb2xvclN0YXRlLk1VTFRJUExJRVJfSU5ERVgpLCB0aGlzLl9tdWx0aXBsaWVyRGF0YS54LCB0aGlzLl9tdWx0aXBsaWVyRGF0YS55LCB0aGlzLl9tdWx0aXBsaWVyRGF0YS56LCB0aGlzLl9tdWx0aXBsaWVyRGF0YS53KTtcblx0XHRcdFx0aWYgKHRoaXMuX3VzZXNPZmZzZXQpXG5cdFx0XHRcdFx0YW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5zZXRWZXJ0ZXhDb25zdChhbmltYXRpb25SZWdpc3RlckNhY2hlLmdldFJlZ2lzdGVySW5kZXgodGhpcy5fcEFuaW1hdGlvbk5vZGUsIFBhcnRpY2xlSW5pdGlhbENvbG9yU3RhdGUuT0ZGU0VUX0lOREVYKSwgdGhpcy5fb2Zmc2V0RGF0YS54LCB0aGlzLl9vZmZzZXREYXRhLnksIHRoaXMuX29mZnNldERhdGEueiwgdGhpcy5fb2Zmc2V0RGF0YS53KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIHVwZGF0ZUNvbG9yRGF0YSgpXG5cdHtcblx0XHRpZiAodGhpcy5fcGFydGljbGVJbml0aWFsQ29sb3JOb2RlLm1vZGUgPT0gUGFydGljbGVQcm9wZXJ0aWVzTW9kZS5HTE9CQUwpIHtcblx0XHRcdGlmICh0aGlzLl91c2VzTXVsdGlwbGllcilcblx0XHRcdFx0dGhpcy5fbXVsdGlwbGllckRhdGEgPSBuZXcgVmVjdG9yM0QodGhpcy5faW5pdGlhbENvbG9yLnJlZE11bHRpcGxpZXIsIHRoaXMuX2luaXRpYWxDb2xvci5ncmVlbk11bHRpcGxpZXIsIHRoaXMuX2luaXRpYWxDb2xvci5ibHVlTXVsdGlwbGllciwgdGhpcy5faW5pdGlhbENvbG9yLmFscGhhTXVsdGlwbGllcik7XG5cdFx0XHRpZiAodGhpcy5fdXNlc09mZnNldClcblx0XHRcdFx0dGhpcy5fb2Zmc2V0RGF0YSA9IG5ldyBWZWN0b3IzRCh0aGlzLl9pbml0aWFsQ29sb3IucmVkT2Zmc2V0LzI1NSwgdGhpcy5faW5pdGlhbENvbG9yLmdyZWVuT2Zmc2V0LzI1NSwgdGhpcy5faW5pdGlhbENvbG9yLmJsdWVPZmZzZXQvMjU1LCB0aGlzLl9pbml0aWFsQ29sb3IuYWxwaGFPZmZzZXQvMjU1KTtcblx0XHR9XG5cdH1cblxufVxuXG5leHBvcnQgPSBQYXJ0aWNsZUluaXRpYWxDb2xvclN0YXRlOyJdfQ==