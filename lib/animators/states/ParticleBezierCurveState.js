var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var ContextGLVertexBufferFormat = require("awayjs-stagegl/lib/core/stagegl/ContextGLVertexBufferFormat");
var ParticlePropertiesMode = require("awayjs-renderergl/lib/animators/data/ParticlePropertiesMode");
var ParticleStateBase = require("awayjs-renderergl/lib/animators/states/ParticleStateBase");
/**
 * ...
 */
var ParticleBezierCurveState = (function (_super) {
    __extends(ParticleBezierCurveState, _super);
    function ParticleBezierCurveState(animator, particleBezierCurveNode) {
        _super.call(this, animator, particleBezierCurveNode);
        this._particleBezierCurveNode = particleBezierCurveNode;
        this._controlPoint = this._particleBezierCurveNode._iControlPoint;
        this._endPoint = this._particleBezierCurveNode._iEndPoint;
    }
    Object.defineProperty(ParticleBezierCurveState.prototype, "controlPoint", {
        /**
         * Defines the default control point of the node, used when in global mode.
         */
        get: function () {
            return this._controlPoint;
        },
        set: function (value) {
            this._controlPoint = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ParticleBezierCurveState.prototype, "endPoint", {
        /**
         * Defines the default end point of the node, used when in global mode.
         */
        get: function () {
            return this._endPoint;
        },
        set: function (value) {
            this._endPoint = value;
        },
        enumerable: true,
        configurable: true
    });
    ParticleBezierCurveState.prototype.setRenderState = function (stage, renderable, animationSubGeometry, animationRegisterCache, camera) {
        var controlIndex = animationRegisterCache.getRegisterIndex(this._pAnimationNode, ParticleBezierCurveState.BEZIER_CONTROL_INDEX);
        var endIndex = animationRegisterCache.getRegisterIndex(this._pAnimationNode, ParticleBezierCurveState.BEZIER_END_INDEX);
        if (this._particleBezierCurveNode.mode == ParticlePropertiesMode.LOCAL_STATIC) {
            animationSubGeometry.activateVertexBuffer(controlIndex, this._particleBezierCurveNode._iDataOffset, stage, ContextGLVertexBufferFormat.FLOAT_3);
            animationSubGeometry.activateVertexBuffer(endIndex, this._particleBezierCurveNode._iDataOffset + 3, stage, ContextGLVertexBufferFormat.FLOAT_3);
        }
        else {
            animationRegisterCache.setVertexConst(controlIndex, this._controlPoint.x, this._controlPoint.y, this._controlPoint.z);
            animationRegisterCache.setVertexConst(endIndex, this._endPoint.x, this._endPoint.y, this._endPoint.z);
        }
    };
    /** @private */
    ParticleBezierCurveState.BEZIER_CONTROL_INDEX = 0;
    /** @private */
    ParticleBezierCurveState.BEZIER_END_INDEX = 1;
    return ParticleBezierCurveState;
})(ParticleStateBase);
module.exports = ParticleBezierCurveState;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFuaW1hdG9ycy9zdGF0ZXMvcGFydGljbGViZXppZXJjdXJ2ZXN0YXRlLnRzIl0sIm5hbWVzIjpbIlBhcnRpY2xlQmV6aWVyQ3VydmVTdGF0ZSIsIlBhcnRpY2xlQmV6aWVyQ3VydmVTdGF0ZS5jb25zdHJ1Y3RvciIsIlBhcnRpY2xlQmV6aWVyQ3VydmVTdGF0ZS5jb250cm9sUG9pbnQiLCJQYXJ0aWNsZUJlemllckN1cnZlU3RhdGUuZW5kUG9pbnQiLCJQYXJ0aWNsZUJlemllckN1cnZlU3RhdGUuc2V0UmVuZGVyU3RhdGUiXSwibWFwcGluZ3MiOiI7Ozs7OztBQU1BLElBQU8sMkJBQTJCLFdBQVksNkRBQTZELENBQUMsQ0FBQztBQUk3RyxJQUFPLHNCQUFzQixXQUFhLDZEQUE2RCxDQUFDLENBQUM7QUFFekcsSUFBTyxpQkFBaUIsV0FBYywwREFBMEQsQ0FBQyxDQUFDO0FBRWxHLEFBR0E7O0dBREc7SUFDRyx3QkFBd0I7SUFBU0EsVUFBakNBLHdCQUF3QkEsVUFBMEJBO0lBc0N2REEsU0F0Q0tBLHdCQUF3QkEsQ0FzQ2pCQSxRQUF5QkEsRUFBRUEsdUJBQStDQTtRQUVyRkMsa0JBQU1BLFFBQVFBLEVBQUVBLHVCQUF1QkEsQ0FBQ0EsQ0FBQ0E7UUFFekNBLElBQUlBLENBQUNBLHdCQUF3QkEsR0FBR0EsdUJBQXVCQSxDQUFDQTtRQUN4REEsSUFBSUEsQ0FBQ0EsYUFBYUEsR0FBR0EsSUFBSUEsQ0FBQ0Esd0JBQXdCQSxDQUFDQSxjQUFjQSxDQUFDQTtRQUNsRUEsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsSUFBSUEsQ0FBQ0Esd0JBQXdCQSxDQUFDQSxVQUFVQSxDQUFDQTtJQUMzREEsQ0FBQ0E7SUE5QkRELHNCQUFXQSxrREFBWUE7UUFIdkJBOztXQUVHQTthQUNIQTtZQUVDRSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxhQUFhQSxDQUFDQTtRQUMzQkEsQ0FBQ0E7YUFFREYsVUFBd0JBLEtBQWNBO1lBRXJDRSxJQUFJQSxDQUFDQSxhQUFhQSxHQUFHQSxLQUFLQSxDQUFDQTtRQUM1QkEsQ0FBQ0E7OztPQUxBRjtJQVVEQSxzQkFBV0EsOENBQVFBO1FBSG5CQTs7V0FFR0E7YUFDSEE7WUFFQ0csTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0E7UUFDdkJBLENBQUNBO2FBRURILFVBQW9CQSxLQUFjQTtZQUVqQ0csSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsS0FBS0EsQ0FBQ0E7UUFDeEJBLENBQUNBOzs7T0FMQUg7SUFnQk1BLGlEQUFjQSxHQUFyQkEsVUFBc0JBLEtBQVdBLEVBQUVBLFVBQXlCQSxFQUFFQSxvQkFBeUNBLEVBQUVBLHNCQUE2Q0EsRUFBRUEsTUFBYUE7UUFFcEtJLElBQUlBLFlBQVlBLEdBQWtCQSxzQkFBc0JBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZUFBZUEsRUFBRUEsd0JBQXdCQSxDQUFDQSxvQkFBb0JBLENBQUNBLENBQUNBO1FBQy9JQSxJQUFJQSxRQUFRQSxHQUFrQkEsc0JBQXNCQSxDQUFDQSxnQkFBZ0JBLENBQUNBLElBQUlBLENBQUNBLGVBQWVBLEVBQUVBLHdCQUF3QkEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxDQUFDQTtRQUV2SUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0Esd0JBQXdCQSxDQUFDQSxJQUFJQSxJQUFJQSxzQkFBc0JBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBLENBQUNBO1lBQy9FQSxvQkFBb0JBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsWUFBWUEsRUFBRUEsSUFBSUEsQ0FBQ0Esd0JBQXdCQSxDQUFDQSxZQUFZQSxFQUFFQSxLQUFLQSxFQUFFQSwyQkFBMkJBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO1lBQ2hKQSxvQkFBb0JBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsUUFBUUEsRUFBRUEsSUFBSUEsQ0FBQ0Esd0JBQXdCQSxDQUFDQSxZQUFZQSxHQUFHQSxDQUFDQSxFQUFFQSxLQUFLQSxFQUFFQSwyQkFBMkJBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO1FBQ2pKQSxDQUFDQTtRQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUNQQSxzQkFBc0JBLENBQUNBLGNBQWNBLENBQUNBLFlBQVlBLEVBQUVBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ3RIQSxzQkFBc0JBLENBQUNBLGNBQWNBLENBQUNBLFFBQVFBLEVBQUVBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQ3ZHQSxDQUFDQTtJQUNGQSxDQUFDQTtJQXpEREosZUFBZUE7SUFDREEsNkNBQW9CQSxHQUFrQkEsQ0FBQ0EsQ0FBQ0E7SUFFdERBLGVBQWVBO0lBQ0RBLHlDQUFnQkEsR0FBa0JBLENBQUNBLENBQUNBO0lBc0RuREEsK0JBQUNBO0FBQURBLENBNURBLEFBNERDQSxFQTVEc0MsaUJBQWlCLEVBNER2RDtBQUVELEFBQWtDLGlCQUF6Qix3QkFBd0IsQ0FBQyIsImZpbGUiOiJhbmltYXRvcnMvc3RhdGVzL1BhcnRpY2xlQmV6aWVyQ3VydmVTdGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvcm9iYmF0ZW1hbi9XZWJzdG9ybVByb2plY3RzL2F3YXlqcy1yZW5kZXJlcmdsLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWZWN0b3IzRFx0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2NvcmUvZ2VvbS9WZWN0b3IzRFwiKTtcbmltcG9ydCBDYW1lcmFcdFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9lbnRpdGllcy9DYW1lcmFcIik7XG5cbmltcG9ydCBBbmltYXRpb25SZWdpc3RlckNhY2hlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2FuaW1hdG9ycy9kYXRhL0FuaW1hdGlvblJlZ2lzdGVyQ2FjaGVcIik7XG5pbXBvcnQgU3RhZ2VcdFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9jb3JlL2Jhc2UvU3RhZ2VcIik7XG5pbXBvcnQgUmVuZGVyYWJsZUJhc2VcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2NvcmUvcG9vbC9SZW5kZXJhYmxlQmFzZVwiKTtcbmltcG9ydCBDb250ZXh0R0xWZXJ0ZXhCdWZmZXJGb3JtYXRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2NvcmUvc3RhZ2VnbC9Db250ZXh0R0xWZXJ0ZXhCdWZmZXJGb3JtYXRcIik7XG5cbmltcG9ydCBQYXJ0aWNsZUFuaW1hdG9yXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvUGFydGljbGVBbmltYXRvclwiKTtcbmltcG9ydCBBbmltYXRpb25TdWJHZW9tZXRyeVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2FuaW1hdG9ycy9kYXRhL0FuaW1hdGlvblN1Ykdlb21ldHJ5XCIpO1xuaW1wb3J0IFBhcnRpY2xlUHJvcGVydGllc01vZGVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYW5pbWF0b3JzL2RhdGEvUGFydGljbGVQcm9wZXJ0aWVzTW9kZVwiKTtcbmltcG9ydCBQYXJ0aWNsZUJlemllckN1cnZlTm9kZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvbm9kZXMvUGFydGljbGVCZXppZXJDdXJ2ZU5vZGVcIik7XG5pbXBvcnQgUGFydGljbGVTdGF0ZUJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvc3RhdGVzL1BhcnRpY2xlU3RhdGVCYXNlXCIpO1xuXG4vKipcbiAqIC4uLlxuICovXG5jbGFzcyBQYXJ0aWNsZUJlemllckN1cnZlU3RhdGUgZXh0ZW5kcyBQYXJ0aWNsZVN0YXRlQmFzZVxue1xuXHQvKiogQHByaXZhdGUgKi9cblx0cHVibGljIHN0YXRpYyBCRVpJRVJfQ09OVFJPTF9JTkRFWDpudW1iZXIgLyppbnQqLyA9IDA7XG5cblx0LyoqIEBwcml2YXRlICovXG5cdHB1YmxpYyBzdGF0aWMgQkVaSUVSX0VORF9JTkRFWDpudW1iZXIgLyppbnQqLyA9IDE7XG5cblx0cHJpdmF0ZSBfcGFydGljbGVCZXppZXJDdXJ2ZU5vZGU6UGFydGljbGVCZXppZXJDdXJ2ZU5vZGU7XG5cdHByaXZhdGUgX2NvbnRyb2xQb2ludDpWZWN0b3IzRDtcblx0cHJpdmF0ZSBfZW5kUG9pbnQ6VmVjdG9yM0Q7XG5cblx0LyoqXG5cdCAqIERlZmluZXMgdGhlIGRlZmF1bHQgY29udHJvbCBwb2ludCBvZiB0aGUgbm9kZSwgdXNlZCB3aGVuIGluIGdsb2JhbCBtb2RlLlxuXHQgKi9cblx0cHVibGljIGdldCBjb250cm9sUG9pbnQoKTpWZWN0b3IzRFxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX2NvbnRyb2xQb2ludDtcblx0fVxuXG5cdHB1YmxpYyBzZXQgY29udHJvbFBvaW50KHZhbHVlOlZlY3RvcjNEKVxuXHR7XG5cdFx0dGhpcy5fY29udHJvbFBvaW50ID0gdmFsdWU7XG5cdH1cblxuXHQvKipcblx0ICogRGVmaW5lcyB0aGUgZGVmYXVsdCBlbmQgcG9pbnQgb2YgdGhlIG5vZGUsIHVzZWQgd2hlbiBpbiBnbG9iYWwgbW9kZS5cblx0ICovXG5cdHB1YmxpYyBnZXQgZW5kUG9pbnQoKTpWZWN0b3IzRFxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX2VuZFBvaW50O1xuXHR9XG5cblx0cHVibGljIHNldCBlbmRQb2ludCh2YWx1ZTpWZWN0b3IzRClcblx0e1xuXHRcdHRoaXMuX2VuZFBvaW50ID0gdmFsdWU7XG5cdH1cblxuXHRjb25zdHJ1Y3RvcihhbmltYXRvcjpQYXJ0aWNsZUFuaW1hdG9yLCBwYXJ0aWNsZUJlemllckN1cnZlTm9kZTpQYXJ0aWNsZUJlemllckN1cnZlTm9kZSlcblx0e1xuXHRcdHN1cGVyKGFuaW1hdG9yLCBwYXJ0aWNsZUJlemllckN1cnZlTm9kZSk7XG5cblx0XHR0aGlzLl9wYXJ0aWNsZUJlemllckN1cnZlTm9kZSA9IHBhcnRpY2xlQmV6aWVyQ3VydmVOb2RlO1xuXHRcdHRoaXMuX2NvbnRyb2xQb2ludCA9IHRoaXMuX3BhcnRpY2xlQmV6aWVyQ3VydmVOb2RlLl9pQ29udHJvbFBvaW50O1xuXHRcdHRoaXMuX2VuZFBvaW50ID0gdGhpcy5fcGFydGljbGVCZXppZXJDdXJ2ZU5vZGUuX2lFbmRQb2ludDtcblx0fVxuXG5cdHB1YmxpYyBzZXRSZW5kZXJTdGF0ZShzdGFnZTpTdGFnZSwgcmVuZGVyYWJsZTpSZW5kZXJhYmxlQmFzZSwgYW5pbWF0aW9uU3ViR2VvbWV0cnk6QW5pbWF0aW9uU3ViR2VvbWV0cnksIGFuaW1hdGlvblJlZ2lzdGVyQ2FjaGU6QW5pbWF0aW9uUmVnaXN0ZXJDYWNoZSwgY2FtZXJhOkNhbWVyYSlcblx0e1xuXHRcdHZhciBjb250cm9sSW5kZXg6bnVtYmVyIC8qaW50Ki8gPSBhbmltYXRpb25SZWdpc3RlckNhY2hlLmdldFJlZ2lzdGVySW5kZXgodGhpcy5fcEFuaW1hdGlvbk5vZGUsIFBhcnRpY2xlQmV6aWVyQ3VydmVTdGF0ZS5CRVpJRVJfQ09OVFJPTF9JTkRFWCk7XG5cdFx0dmFyIGVuZEluZGV4Om51bWJlciAvKmludCovID0gYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5nZXRSZWdpc3RlckluZGV4KHRoaXMuX3BBbmltYXRpb25Ob2RlLCBQYXJ0aWNsZUJlemllckN1cnZlU3RhdGUuQkVaSUVSX0VORF9JTkRFWCk7XG5cblx0XHRpZiAodGhpcy5fcGFydGljbGVCZXppZXJDdXJ2ZU5vZGUubW9kZSA9PSBQYXJ0aWNsZVByb3BlcnRpZXNNb2RlLkxPQ0FMX1NUQVRJQykge1xuXHRcdFx0YW5pbWF0aW9uU3ViR2VvbWV0cnkuYWN0aXZhdGVWZXJ0ZXhCdWZmZXIoY29udHJvbEluZGV4LCB0aGlzLl9wYXJ0aWNsZUJlemllckN1cnZlTm9kZS5faURhdGFPZmZzZXQsIHN0YWdlLCBDb250ZXh0R0xWZXJ0ZXhCdWZmZXJGb3JtYXQuRkxPQVRfMyk7XG5cdFx0XHRhbmltYXRpb25TdWJHZW9tZXRyeS5hY3RpdmF0ZVZlcnRleEJ1ZmZlcihlbmRJbmRleCwgdGhpcy5fcGFydGljbGVCZXppZXJDdXJ2ZU5vZGUuX2lEYXRhT2Zmc2V0ICsgMywgc3RhZ2UsIENvbnRleHRHTFZlcnRleEJ1ZmZlckZvcm1hdC5GTE9BVF8zKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0YW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5zZXRWZXJ0ZXhDb25zdChjb250cm9sSW5kZXgsIHRoaXMuX2NvbnRyb2xQb2ludC54LCB0aGlzLl9jb250cm9sUG9pbnQueSwgdGhpcy5fY29udHJvbFBvaW50LnopO1xuXHRcdFx0YW5pbWF0aW9uUmVnaXN0ZXJDYWNoZS5zZXRWZXJ0ZXhDb25zdChlbmRJbmRleCwgdGhpcy5fZW5kUG9pbnQueCwgdGhpcy5fZW5kUG9pbnQueSwgdGhpcy5fZW5kUG9pbnQueik7XG5cdFx0fVxuXHR9XG59XG5cbmV4cG9ydCA9IFBhcnRpY2xlQmV6aWVyQ3VydmVTdGF0ZTsiXX0=