var RenderablePool = require("awayjs-core/lib/core/pool/RenderablePool");
var Point = require("awayjs-core/lib/core/geom/Point");
var Vector3D = require("awayjs-core/lib/core/geom/Vector3D");
var AbstractMethodError = require("awayjs-core/lib/errors/AbstractMethodError");
var BillboardRenderable = require("awayjs-stagegl/lib/core/pool/BillboardRenderable");
var TriangleSubMeshRenderable = require("awayjs-stagegl/lib/core/pool/TriangleSubMeshRenderable");
/**
 * An abstract base class for all picking collider classes. It should not be instantiated directly.
 *
 * @class away.pick.PickingColliderBase
 */
var PickingColliderBase = (function () {
    function PickingColliderBase() {
        this._billboardRenderablePool = RenderablePool.getPool(BillboardRenderable);
        this._subMeshRenderablePool = RenderablePool.getPool(TriangleSubMeshRenderable);
    }
    PickingColliderBase.prototype._pPetCollisionNormal = function (indexData /*uint*/, vertexData, triangleIndex) {
        var normal = new Vector3D();
        var i0 = indexData[triangleIndex] * 3;
        var i1 = indexData[triangleIndex + 1] * 3;
        var i2 = indexData[triangleIndex + 2] * 3;
        var p0 = new Vector3D(vertexData[i0], vertexData[i0 + 1], vertexData[i0 + 2]);
        var p1 = new Vector3D(vertexData[i1], vertexData[i1 + 1], vertexData[i1 + 2]);
        var p2 = new Vector3D(vertexData[i2], vertexData[i2 + 1], vertexData[i2 + 2]);
        var side0 = p1.subtract(p0);
        var side1 = p2.subtract(p0);
        normal = side0.crossProduct(side1);
        normal.normalize();
        return normal;
    };
    PickingColliderBase.prototype._pGetCollisionUV = function (indexData /*uint*/, uvData, triangleIndex, v, w, u, uvOffset, uvStride) {
        var uv = new Point();
        var uIndex = indexData[triangleIndex] * uvStride + uvOffset;
        var uv0 = new Vector3D(uvData[uIndex], uvData[uIndex + 1]);
        uIndex = indexData[triangleIndex + 1] * uvStride + uvOffset;
        var uv1 = new Vector3D(uvData[uIndex], uvData[uIndex + 1]);
        uIndex = indexData[triangleIndex + 2] * uvStride + uvOffset;
        var uv2 = new Vector3D(uvData[uIndex], uvData[uIndex + 1]);
        uv.x = u * uv0.x + v * uv1.x + w * uv2.x;
        uv.y = u * uv0.y + v * uv1.y + w * uv2.y;
        return uv;
    };
    /**
     * @inheritDoc
     */
    PickingColliderBase.prototype._pTestRenderableCollision = function (renderable, pickingCollisionVO, shortestCollisionDistance) {
        throw new AbstractMethodError();
    };
    /**
     * @inheritDoc
     */
    PickingColliderBase.prototype.setLocalRay = function (localPosition, localDirection) {
        this.rayPosition = localPosition;
        this.rayDirection = localDirection;
    };
    /**
     * Tests a <code>Billboard</code> object for a collision with the picking ray.
     *
     * @param billboard The billboard instance to be tested.
     * @param pickingCollisionVO The collision object used to store the collision results
     * @param shortestCollisionDistance The current value of the shortest distance to a detected collision along the ray.
     * @param findClosest
     */
    PickingColliderBase.prototype.testBillboardCollision = function (billboard, pickingCollisionVO, shortestCollisionDistance) {
        this.setLocalRay(pickingCollisionVO.localRayPosition, pickingCollisionVO.localRayDirection);
        pickingCollisionVO.materialOwner = null;
        if (this._pTestRenderableCollision(this._billboardRenderablePool.getItem(billboard), pickingCollisionVO, shortestCollisionDistance)) {
            shortestCollisionDistance = pickingCollisionVO.rayEntryDistance;
            pickingCollisionVO.materialOwner = billboard;
            return true;
        }
        return false;
    };
    /**
     * Tests a <code>Mesh</code> object for a collision with the picking ray.
     *
     * @param mesh The mesh instance to be tested.
     * @param pickingCollisionVO The collision object used to store the collision results
     * @param shortestCollisionDistance The current value of the shortest distance to a detected collision along the ray.
     * @param findClosest
     */
    PickingColliderBase.prototype.testMeshCollision = function (mesh, pickingCollisionVO, shortestCollisionDistance, findClosest) {
        this.setLocalRay(pickingCollisionVO.localRayPosition, pickingCollisionVO.localRayDirection);
        pickingCollisionVO.materialOwner = null;
        var subMesh;
        var len = mesh.subMeshes.length;
        for (var i = 0; i < len; ++i) {
            subMesh = mesh.subMeshes[i];
            if (this._pTestRenderableCollision(this._subMeshRenderablePool.getItem(subMesh), pickingCollisionVO, shortestCollisionDistance)) {
                shortestCollisionDistance = pickingCollisionVO.rayEntryDistance;
                pickingCollisionVO.materialOwner = subMesh;
                if (!findClosest)
                    return true;
            }
        }
        return pickingCollisionVO.materialOwner != null;
    };
    return PickingColliderBase;
})();
module.exports = PickingColliderBase;

//# sourceMappingURL=data:application/json;base64,