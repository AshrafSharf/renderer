var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Matrix3D = require("awayjs-core/lib/geom/Matrix3D");
var Vector3D = require("awayjs-core/lib/geom/Vector3D");
var RenderTexture = require("awayjs-core/lib/textures/RenderTexture");
var ContextGLCompareMode = require("awayjs-stagegl/lib/base/ContextGLCompareMode");
var ContextGLClearMask = require("awayjs-stagegl/lib/base/ContextGLClearMask");
var DepthRenderer = require("awayjs-renderergl/lib/DepthRenderer");
var DistanceRenderer = require("awayjs-renderergl/lib/DistanceRenderer");
var Filter3DRenderer = require("awayjs-renderergl/lib/Filter3DRenderer");
var RendererBase = require("awayjs-renderergl/lib/base/RendererBase");
var RenderablePool = require("awayjs-renderergl/lib/pool/RenderablePool");
var SkyboxRenderable = require("awayjs-renderergl/lib/pool/SkyboxRenderable");
var RTTBufferManager = require("awayjs-renderergl/lib/managers/RTTBufferManager");
/**
 * The DefaultRenderer class provides the default rendering method. It renders the scene graph objects using the
 * materials assigned to them.
 *
 * @class away.render.DefaultRenderer
 */
var DefaultRenderer = (function (_super) {
    __extends(DefaultRenderer, _super);
    /**
     * Creates a new DefaultRenderer object.
     *
     * @param antiAlias The amount of anti-aliasing to use.
     * @param renderMode The render mode to use.
     */
    function DefaultRenderer(stage) {
        if (stage === void 0) { stage = null; }
        _super.call(this, stage);
        this._skyboxProjection = new Matrix3D();
        if (this._width == 0)
            this.width = window.innerWidth;
        else
            this._pRttBufferManager.viewWidth = this._width;
        if (this._height == 0)
            this.height = window.innerHeight;
        else
            this._pRttBufferManager.viewHeight = this._height;
    }
    Object.defineProperty(DefaultRenderer.prototype, "antiAlias", {
        get: function () {
            return this._antiAlias;
        },
        set: function (value) {
            if (this._antiAlias == value)
                return;
            this._antiAlias = value;
            this._pBackBufferInvalid = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultRenderer.prototype, "depthPrepass", {
        /**
         *
         */
        get: function () {
            return this._depthPrepass;
        },
        set: function (value) {
            this._depthPrepass = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultRenderer.prototype, "filters3d", {
        /**
         *
         * @returns {*}
         */
        get: function () {
            return this._pFilter3DRenderer ? this._pFilter3DRenderer.filters : null;
        },
        set: function (value) {
            if (value && value.length == 0)
                value = null;
            if (this._pFilter3DRenderer && !value) {
                this._pFilter3DRenderer.dispose();
                this._pFilter3DRenderer = null;
            }
            else if (!this._pFilter3DRenderer && value) {
                this._pFilter3DRenderer = new Filter3DRenderer(this._pStage);
                this._pFilter3DRenderer.filters = value;
            }
            if (this._pFilter3DRenderer) {
                this._pFilter3DRenderer.filters = value;
                this._pRequireDepthRender = this._pFilter3DRenderer.requireDepthRender;
            }
            else {
                this._pRequireDepthRender = false;
                if (this._pDepthRender) {
                    this._pDepthRender.dispose();
                    this._pDepthRender = null;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    DefaultRenderer.prototype.render = function (entityCollector) {
        _super.prototype.render.call(this, entityCollector);
        if (!this._pStage.recoverFromDisposal()) {
            this._pBackBufferInvalid = true;
            return;
        }
        if (this._pBackBufferInvalid)
            this.pUpdateBackBuffer();
        if (this._shareContext && this._pContext)
            this._pContext.clear(0, 0, 0, 1, 1, 0, ContextGLClearMask.DEPTH);
        if (this._pFilter3DRenderer) {
            this.textureRatioX = this._pRttBufferManager.textureRatioX;
            this.textureRatioY = this._pRttBufferManager.textureRatioY;
        }
        else {
            this.textureRatioX = 1;
            this.textureRatioY = 1;
        }
        if (this._pRequireDepthRender)
            this.pRenderSceneDepthToTexture(entityCollector);
        if (this._depthPrepass)
            this.pRenderDepthPrepass(entityCollector);
        if (this._pFilter3DRenderer && this._pContext) {
        }
        else {
            if (this._shareContext)
                this._iRender(entityCollector, null, this._pScissorRect);
            else
                this._iRender(entityCollector);
        }
        _super.prototype.render.call(this, entityCollector);
        if (!this._shareContext && this._pContext)
            this._pContext.present();
        // register that a view has been rendered
        this._pStage.bufferClear = false;
    };
    DefaultRenderer.prototype.pExecuteRender = function (entityCollector, target, scissorRect, surfaceSelector) {
        if (target === void 0) { target = null; }
        if (scissorRect === void 0) { scissorRect = null; }
        if (surfaceSelector === void 0) { surfaceSelector = 0; }
        this.updateLights(entityCollector);
        _super.prototype.pExecuteRender.call(this, entityCollector, target, scissorRect, surfaceSelector);
    };
    DefaultRenderer.prototype.updateLights = function (entityCollector) {
        var dirLights = entityCollector.directionalLights;
        var pointLights = entityCollector.pointLights;
        var len, i;
        var light;
        var shadowMapper;
        len = dirLights.length;
        for (i = 0; i < len; ++i) {
            light = dirLights[i];
            shadowMapper = light.shadowMapper;
            if (light.castsShadows && (shadowMapper.autoUpdateShadows || shadowMapper._iShadowsInvalid))
                shadowMapper.iRenderDepthMap(entityCollector, this._pDepthRenderer);
        }
        len = pointLights.length;
        for (i = 0; i < len; ++i) {
            light = pointLights[i];
            shadowMapper = light.shadowMapper;
            if (light.castsShadows && (shadowMapper.autoUpdateShadows || shadowMapper._iShadowsInvalid))
                shadowMapper.iRenderDepthMap(entityCollector, this._pDistanceRenderer);
        }
    };
    /**
     * @inheritDoc
     */
    DefaultRenderer.prototype.pDraw = function (entityCollector) {
        if (entityCollector.skyBox) {
            this._pContext.setDepthTest(false, ContextGLCompareMode.ALWAYS);
            this.drawSkybox(entityCollector);
        }
        _super.prototype.pDraw.call(this, entityCollector);
    };
    DefaultRenderer.prototype._pGetRenderObject = function (renderable, renderObjectOwner) {
        return renderObjectOwner.getRenderObject(renderable._pool);
    };
    /**
     * Draw the skybox if present.
     *
     * @param entityCollector The EntityCollector containing all potentially visible information.
     */
    DefaultRenderer.prototype.drawSkybox = function (entityCollector) {
        var skyBox = this._skyboxRenderablePool.getItem(entityCollector.skyBox);
        var camera = entityCollector.camera;
        this.updateSkyboxProjection(camera);
        var renderObject = skyBox.renderObject = this._pGetRenderObject(skyBox, skyBox.renderObjectOwner);
        var shaderObject = renderObject.shaderObjects[0];
        this.activateProgram(skyBox, shaderObject, camera);
        skyBox._iRender(shaderObject, camera, this._skyboxProjection);
        this.deactivateProgram(skyBox, shaderObject);
    };
    DefaultRenderer.prototype.updateSkyboxProjection = function (camera) {
        var near = new Vector3D();
        this._skyboxProjection.copyFrom(this._pRttViewProjectionMatrix);
        this._skyboxProjection.copyRowTo(2, near);
        var camPos = camera.scenePosition;
        var cx = near.x;
        var cy = near.y;
        var cz = near.z;
        var cw = -(near.x * camPos.x + near.y * camPos.y + near.z * camPos.z + Math.sqrt(cx * cx + cy * cy + cz * cz));
        var signX = cx >= 0 ? 1 : -1;
        var signY = cy >= 0 ? 1 : -1;
        var p = new Vector3D(signX, signY, 1, 1);
        var inverse = this._skyboxProjection.clone();
        inverse.invert();
        var q = inverse.transformVector(p);
        this._skyboxProjection.copyRowTo(3, p);
        var a = (q.x * p.x + q.y * p.y + q.z * p.z + q.w * p.w) / (cx * q.x + cy * q.y + cz * q.z + cw * q.w);
        this._skyboxProjection.copyRowFrom(2, new Vector3D(cx * a, cy * a, cz * a, cw * a));
    };
    DefaultRenderer.prototype.dispose = function () {
        if (!this._shareContext)
            this._pStage.dispose();
        this._skyboxRenderablePool.dispose();
        this._skyboxRenderablePool = null;
        this._pRttBufferManager.dispose();
        this._pRttBufferManager = null;
        this._pDepthRenderer.dispose();
        this._pDistanceRenderer.dispose();
        this._pDepthRenderer = null;
        this._pDistanceRenderer = null;
        this._pDepthRender = null;
        _super.prototype.dispose.call(this);
    };
    /**
     *
     */
    DefaultRenderer.prototype.pRenderDepthPrepass = function (entityCollector) {
        this._pDepthRenderer.disableColor = true;
        if (this._pFilter3DRenderer) {
        }
        else {
            this._pDepthRenderer.textureRatioX = 1;
            this._pDepthRenderer.textureRatioY = 1;
            this._pDepthRenderer._iRender(entityCollector);
        }
        this._pDepthRenderer.disableColor = false;
    };
    /**
     *
     */
    DefaultRenderer.prototype.pRenderSceneDepthToTexture = function (entityCollector) {
        if (this._pDepthTextureInvalid || !this._pDepthRender)
            this.initDepthTexture(this._pStage.context);
        this._pDepthRenderer.textureRatioX = this._pRttBufferManager.textureRatioX;
        this._pDepthRenderer.textureRatioY = this._pRttBufferManager.textureRatioY;
        this._pDepthRenderer._iRender(entityCollector, this._pDepthRender);
    };
    /**
     * Updates the backbuffer dimensions.
     */
    DefaultRenderer.prototype.pUpdateBackBuffer = function () {
        // No reason trying to configure back buffer if there is no context available.
        // Doing this anyway (and relying on _stage to cache width/height for
        // context does get available) means usesSoftwareRendering won't be reliable.
        if (this._pStage.context && !this._shareContext) {
            if (this._width && this._height) {
                this._pStage.configureBackBuffer(this._width, this._height, this._antiAlias, true);
                this._pBackBufferInvalid = false;
            }
        }
    };
    DefaultRenderer.prototype.iSetStage = function (value) {
        _super.prototype.iSetStage.call(this, value);
        if (this._pStage) {
            this._pRttBufferManager = RTTBufferManager.getInstance(this._pStage);
            this._pDepthRenderer = new DepthRenderer(this._pStage);
            this._pDistanceRenderer = new DistanceRenderer(this._pStage);
            this._skyboxRenderablePool = RenderablePool.getPool(SkyboxRenderable, this._pStage);
        }
    };
    /**
     *
     */
    DefaultRenderer.prototype.initDepthTexture = function (context) {
        this._pDepthTextureInvalid = false;
        if (this._pDepthRender)
            this._pDepthRender.dispose();
        this._pDepthRender = new RenderTexture(this._pRttBufferManager.textureWidth, this._pRttBufferManager.textureHeight);
    };
    return DefaultRenderer;
})(RendererBase);
module.exports = DefaultRenderer;

//# sourceMappingURL=data:application/json;base64,