var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var URLLoaderDataFormat = require("awayjs-core/lib/net/URLLoaderDataFormat");
var URLRequest = require("awayjs-core/lib/net/URLRequest");
var ParserBase = require("awayjs-core/lib/parsers/ParserBase");
var ParserUtils = require("awayjs-core/lib/parsers/ParserUtils");
var DisplayObjectContainer = require("awayjs-display/lib/containers/DisplayObjectContainer");
var Geometry = require("awayjs-display/lib/base/Geometry");
var TriangleSubGeometry = require("awayjs-display/lib/base/TriangleSubGeometry");
var Mesh = require("awayjs-display/lib/entities/Mesh");
var VertexClipNode = require("awayjs-renderergl/lib/animators/nodes/VertexClipNode");
var VertexAnimationSet = require("awayjs-renderergl/lib/animators/VertexAnimationSet");
var TriangleMethodMaterial = require("awayjs-renderergl/lib/materials/TriangleMethodMaterial");
var TriangleMaterialMode = require("awayjs-renderergl/lib/materials/TriangleMaterialMode");
var DefaultMaterialManager = require("awayjs-renderergl/lib/materials/utils/DefaultMaterialManager");
/**
 * MD2Parser provides a parser for the MD2 data type.
 */
var MD2Parser = (function (_super) {
    __extends(MD2Parser, _super);
    /**
     * Creates a new MD2Parser object.
     * @param textureType The extension of the texture (e.g. jpg/png/...)
     * @param ignoreTexturePath If true, the path of the texture is ignored
     */
    function MD2Parser(textureType, ignoreTexturePath) {
        if (textureType === void 0) { textureType = "jpg"; }
        if (ignoreTexturePath === void 0) { ignoreTexturePath = true; }
        _super.call(this, URLLoaderDataFormat.ARRAY_BUFFER);
        this._clipNodes = new Object();
        // the current subgeom being built
        this._animationSet = new VertexAnimationSet();
        this.materialFinal = false;
        this.geoCreated = false;
        this._textureType = textureType;
        this._ignoreTexturePath = ignoreTexturePath;
    }
    /**
     * Indicates whether or not a given file extension is supported by the parser.
     * @param extension The file extension of a potential file to be parsed.
     * @return Whether or not the given file type is supported.
     */
    MD2Parser.supportsType = function (extension) {
        extension = extension.toLowerCase();
        return extension == "md2";
    };
    /**
     * Tests whether a data block can be parsed by the parser.
     * @param data The data block to potentially be parsed.
     * @return Whether or not the given data is supported.
     */
    MD2Parser.supportsData = function (data) {
        return (ParserUtils.toString(data, 4) == 'IDP2');
    };
    /**
     * @inheritDoc
     */
    MD2Parser.prototype._iResolveDependency = function (resourceDependency) {
        if (resourceDependency.assets.length != 1)
            return;
        var asset = resourceDependency.assets[0];
        if (asset) {
            var material = new TriangleMethodMaterial(asset);
            if (this.materialMode >= 2)
                material.materialMode = TriangleMaterialMode.MULTI_PASS;
            //add to the content property
            this._pContent.addChild(this._mesh);
            material.name = this._mesh.material.name;
            this._mesh.material = material;
            this._pFinalizeAsset(material);
            this._pFinalizeAsset(this._mesh.geometry);
            this._pFinalizeAsset(this._mesh);
        }
        this.materialFinal = true;
    };
    /**
     * @inheritDoc
     */
    MD2Parser.prototype._iResolveDependencyFailure = function (resourceDependency) {
        // apply system default
        if (this.materialMode < 2) {
            this._mesh.material = DefaultMaterialManager.getDefaultMaterial();
        }
        else {
            this._mesh.material = new TriangleMethodMaterial(DefaultMaterialManager.getDefaultTexture());
            this._mesh.material.materialMode = TriangleMaterialMode.MULTI_PASS;
        }
        //add to the content property
        this._pContent.addChild(this._mesh);
        this._pFinalizeAsset(this._mesh.geometry);
        this._pFinalizeAsset(this._mesh);
        this.materialFinal = true;
    };
    /**
     * @inheritDoc
     */
    MD2Parser.prototype._pProceedParsing = function () {
        if (!this._startedParsing) {
            this._byteData = this._pGetByteData();
            this._startedParsing = true;
            // Reset bytearray read position (which may have been
            // moved forward by the supportsData() function.)
            this._byteData.position = 0;
        }
        while (this._pHasTime()) {
            if (!this._parsedHeader) {
                //----------------------------------------------------------------------------
                // LITTLE_ENDIAN - Default for ArrayBuffer / Not implemented in ByteArray
                //----------------------------------------------------------------------------
                //this._byteData.endian = Endian.LITTLE_ENDIAN;
                // TODO: Create a mesh only when encountered (if it makes sense
                // for this file format) and return it using this._pFinalizeAsset()
                this._geometry = new Geometry();
                this._mesh = new Mesh(this._geometry, null);
                if (this.materialMode < 2) {
                    this._mesh.material = DefaultMaterialManager.getDefaultMaterial();
                }
                else {
                    this._mesh.material = new TriangleMethodMaterial(DefaultMaterialManager.getDefaultTexture());
                    this._mesh.material.materialMode = TriangleMaterialMode.MULTI_PASS;
                }
                //_geometry.animation = new VertexAnimation(2, VertexAnimationMode.ABSOLUTE);
                //_animator = new VertexAnimator(VertexAnimationState(_mesh.animationState));
                // Parse header and decompress body
                this.parseHeader();
                this.parseMaterialNames();
            }
            else if (!this._parsedUV) {
                this.parseUV();
            }
            else if (!this._parsedFaces) {
                this.parseFaces();
            }
            else if (!this._parsedFrames) {
                this.parseFrames();
            }
            else if ((this.geoCreated) && (this.materialFinal)) {
                return ParserBase.PARSING_DONE;
            }
            else if (!this.geoCreated) {
                this.geoCreated = true;
                //create default subgeometry
                this._geometry.addSubGeometry(this._firstSubGeom.clone());
                // Force name to be chosen by this._pFinalizeAsset()
                this._mesh.name = "";
                if (this.materialFinal) {
                    //add to the content property
                    this._pContent.addChild(this._mesh);
                    this._pFinalizeAsset(this._mesh.geometry);
                    this._pFinalizeAsset(this._mesh);
                }
                this._pPauseAndRetrieveDependencies();
            }
        }
        return ParserBase.MORE_TO_PARSE;
    };
    MD2Parser.prototype._pStartParsing = function (frameLimit) {
        _super.prototype._pStartParsing.call(this, frameLimit);
        //create a content object for Loaders
        this._pContent = new DisplayObjectContainer();
    };
    /**
     * Reads in all that MD2 Header data that is declared as private variables.
     * I know its a lot, and it looks ugly, but only way to do it in Flash
     */
    MD2Parser.prototype.parseHeader = function () {
        this._ident = this._byteData.readInt();
        this._version = this._byteData.readInt();
        this._skinWidth = this._byteData.readInt();
        this._skinHeight = this._byteData.readInt();
        //skip this._frameSize
        this._byteData.readInt();
        this._numSkins = this._byteData.readInt();
        this._numVertices = this._byteData.readInt();
        this._numST = this._byteData.readInt();
        this._numTris = this._byteData.readInt();
        //skip this._numGlCmds
        this._byteData.readInt();
        this._numFrames = this._byteData.readInt();
        this._offsetSkins = this._byteData.readInt();
        this._offsetST = this._byteData.readInt();
        this._offsetTris = this._byteData.readInt();
        this._offsetFrames = this._byteData.readInt();
        //skip this._offsetGlCmds
        this._byteData.readInt();
        this._offsetEnd = this._byteData.readInt();
        this._parsedHeader = true;
    };
    /**
     * Parses the file names for the materials.
     */
    MD2Parser.prototype.parseMaterialNames = function () {
        var url;
        var name;
        var extIndex /*int*/;
        var slashIndex /*int*/;
        this._materialNames = new Array();
        this._byteData.position = this._offsetSkins;
        var regExp = new RegExp("[^a-zA-Z0-9\\_\/.]", "g");
        for (var i = 0; i < this._numSkins; ++i) {
            name = this._byteData.readUTFBytes(64);
            name = name.replace(regExp, "");
            extIndex = name.lastIndexOf(".");
            if (this._ignoreTexturePath)
                slashIndex = name.lastIndexOf("/");
            if (name.toLowerCase().indexOf(".jpg") == -1 && name.toLowerCase().indexOf(".png") == -1) {
                name = name.substring(slashIndex + 1, extIndex);
                url = name + "." + this._textureType;
            }
            else {
                url = name;
            }
            this._materialNames[i] = name;
            // only support 1 skin TODO: really?
            if (this.dependencies.length == 0)
                this._pAddDependency(name, new URLRequest(url));
        }
        if (this._materialNames.length > 0)
            this._mesh.material.name = this._materialNames[0];
        else
            this.materialFinal = true;
    };
    /**
     * Parses the uv data for the mesh.
     */
    MD2Parser.prototype.parseUV = function () {
        var j = 0;
        this._uvs = new Array(this._numST * 2);
        this._byteData.position = this._offsetST;
        for (var i = 0; i < this._numST; i++) {
            this._uvs[j++] = this._byteData.readShort() / this._skinWidth;
            this._uvs[j++] = this._byteData.readShort() / this._skinHeight;
        }
        this._parsedUV = true;
    };
    /**
     * Parses unique indices for the faces.
     */
    MD2Parser.prototype.parseFaces = function () {
        var a /*uint*/, b /*uint*/, c /*uint*/, ta /*uint*/, tb /*uint*/, tc /*uint*/;
        var i /*uint*/;
        this._vertIndices = new Array();
        this._uvIndices = new Array();
        this._indices = new Array();
        this._byteData.position = this._offsetTris;
        for (i = 0; i < this._numTris; i++) {
            //collect vertex indices
            a = this._byteData.readUnsignedShort();
            b = this._byteData.readUnsignedShort();
            c = this._byteData.readUnsignedShort();
            //collect uv indices
            ta = this._byteData.readUnsignedShort();
            tb = this._byteData.readUnsignedShort();
            tc = this._byteData.readUnsignedShort();
            this.addIndex(a, ta);
            this.addIndex(b, tb);
            this.addIndex(c, tc);
        }
        var len = this._uvIndices.length;
        this._finalUV = new Array(len * 2);
        for (i = 0; i < len; ++i) {
            this._finalUV[i << 1] = this._uvs[this._uvIndices[i] << 1];
            this._finalUV[(i << 1) + 1] = this._uvs[(this._uvIndices[i] << 1) + 1];
        }
        this._parsedFaces = true;
    };
    /**
     * Adds a face index to the list if it doesn't exist yet, based on vertexIndex and uvIndex, and adds the
     * corresponding vertex and uv data in the correct location.
     * @param vertexIndex The original index in the vertex list.
     * @param uvIndex The original index in the uv list.
     */
    MD2Parser.prototype.addIndex = function (vertexIndex /*uint*/, uvIndex /*uint*/) {
        var index = this.findIndex(vertexIndex, uvIndex);
        if (index == -1) {
            this._indices.push(this._vertIndices.length);
            this._vertIndices.push(vertexIndex);
            this._uvIndices.push(uvIndex);
        }
        else
            this._indices.push(index);
    };
    /**
     * Finds the final index corresponding to the original MD2's vertex and uv indices. Returns -1 if it wasn't added yet.
     * @param vertexIndex The original index in the vertex list.
     * @param uvIndex The original index in the uv list.
     * @return The index of the final mesh corresponding to the original vertex and uv index. -1 if it doesn't exist yet.
     */
    MD2Parser.prototype.findIndex = function (vertexIndex /*uint*/, uvIndex /*uint*/) {
        var len = this._vertIndices.length;
        for (var i = 0; i < len; ++i) {
            if (this._vertIndices[i] == vertexIndex && this._uvIndices[i] == uvIndex)
                return i;
        }
        return -1;
    };
    /**
     * Parses all the frame geometries.
     */
    MD2Parser.prototype.parseFrames = function () {
        var sx, sy, sz;
        var tx, ty, tz;
        var geometry;
        var subGeom;
        var vertLen = this._vertIndices.length;
        var fvertices;
        var tvertices;
        var i /*uint*/, j /*int*/, k /*uint*/;
        //var ch : number /*uint*/;
        var name = "";
        var prevClip = null;
        this._byteData.position = this._offsetFrames;
        for (i = 0; i < this._numFrames; i++) {
            tvertices = new Array();
            fvertices = new Array(vertLen * 3);
            sx = this._byteData.readFloat();
            sy = this._byteData.readFloat();
            sz = this._byteData.readFloat();
            tx = this._byteData.readFloat();
            ty = this._byteData.readFloat();
            tz = this._byteData.readFloat();
            name = this.readFrameName();
            for (j = 0; j < this._numVertices; j++, this._byteData.position++)
                tvertices.push(sx * this._byteData.readUnsignedByte() + tx, sy * this._byteData.readUnsignedByte() + ty, sz * this._byteData.readUnsignedByte() + tz);
            k = 0;
            for (j = 0; j < vertLen; j++) {
                fvertices[k++] = tvertices[this._vertIndices[j] * 3];
                fvertices[k++] = tvertices[this._vertIndices[j] * 3 + 2];
                fvertices[k++] = tvertices[this._vertIndices[j] * 3 + 1];
            }
            subGeom = new TriangleSubGeometry(true);
            if (this._firstSubGeom == null)
                this._firstSubGeom = subGeom;
            geometry = new Geometry();
            geometry.addSubGeometry(subGeom);
            subGeom.updateIndices(this._indices);
            subGeom.updatePositions(fvertices);
            subGeom.updateUVs(this._finalUV);
            subGeom.vertexNormals;
            subGeom.vertexTangents;
            subGeom.autoDeriveNormals = false;
            subGeom.autoDeriveTangents = false;
            var clip = this._clipNodes[name];
            if (!clip) {
                // If another sequence was parsed before this one, starting
                // a new state means the previous one is complete and can
                // hence be finalized.
                if (prevClip) {
                    this._pFinalizeAsset(prevClip);
                    this._animationSet.addAnimation(prevClip);
                }
                clip = new VertexClipNode();
                clip.name = name;
                clip.stitchFinalFrame = true;
                this._clipNodes[name] = clip;
                prevClip = clip;
            }
            clip.addFrame(geometry, 1000 / MD2Parser.FPS);
        }
        // Finalize the last state
        if (prevClip) {
            this._pFinalizeAsset(prevClip);
            this._animationSet.addAnimation(prevClip);
        }
        // Force this._pFinalizeAsset() to decide name
        this._pFinalizeAsset(this._animationSet);
        this._parsedFrames = true;
    };
    MD2Parser.prototype.readFrameName = function () {
        var name = "";
        var k = 0;
        for (var j = 0; j < 16; j++) {
            var ch = this._byteData.readUnsignedByte();
            if (Math.floor(ch) > 0x39 && Math.floor(ch) <= 0x7A && k == 0)
                name += String.fromCharCode(ch);
            if (Math.floor(ch) >= 0x30 && Math.floor(ch) <= 0x39)
                k++;
        }
        return name;
    };
    MD2Parser.FPS = 6;
    return MD2Parser;
})(ParserBase);
module.exports = MD2Parser;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9wYXJzZXJzL21kMnBhcnNlci50cyJdLCJuYW1lcyI6WyJNRDJQYXJzZXIiLCJNRDJQYXJzZXIuY29uc3RydWN0b3IiLCJNRDJQYXJzZXIuc3VwcG9ydHNUeXBlIiwiTUQyUGFyc2VyLnN1cHBvcnRzRGF0YSIsIk1EMlBhcnNlci5faVJlc29sdmVEZXBlbmRlbmN5IiwiTUQyUGFyc2VyLl9pUmVzb2x2ZURlcGVuZGVuY3lGYWlsdXJlIiwiTUQyUGFyc2VyLl9wUHJvY2VlZFBhcnNpbmciLCJNRDJQYXJzZXIuX3BTdGFydFBhcnNpbmciLCJNRDJQYXJzZXIucGFyc2VIZWFkZXIiLCJNRDJQYXJzZXIucGFyc2VNYXRlcmlhbE5hbWVzIiwiTUQyUGFyc2VyLnBhcnNlVVYiLCJNRDJQYXJzZXIucGFyc2VGYWNlcyIsIk1EMlBhcnNlci5hZGRJbmRleCIsIk1EMlBhcnNlci5maW5kSW5kZXgiLCJNRDJQYXJzZXIucGFyc2VGcmFtZXMiLCJNRDJQYXJzZXIucmVhZEZyYW1lTmFtZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRUEsSUFBTyxtQkFBbUIsV0FBYyx5Q0FBeUMsQ0FBQyxDQUFDO0FBQ25GLElBQU8sVUFBVSxXQUFnQixnQ0FBZ0MsQ0FBQyxDQUFDO0FBQ25FLElBQU8sVUFBVSxXQUFnQixvQ0FBb0MsQ0FBQyxDQUFDO0FBQ3ZFLElBQU8sV0FBVyxXQUFnQixxQ0FBcUMsQ0FBQyxDQUFDO0FBS3pFLElBQU8sc0JBQXNCLFdBQWEsc0RBQXNELENBQUMsQ0FBQztBQUVsRyxJQUFPLFFBQVEsV0FBaUIsa0NBQWtDLENBQUMsQ0FBQztBQUNwRSxJQUFPLG1CQUFtQixXQUFjLDZDQUE2QyxDQUFDLENBQUM7QUFFdkYsSUFBTyxJQUFJLFdBQWtCLGtDQUFrQyxDQUFDLENBQUM7QUFFakUsSUFBTyxjQUFjLFdBQWUsc0RBQXNELENBQUMsQ0FBQztBQUM1RixJQUFPLGtCQUFrQixXQUFjLG9EQUFvRCxDQUFDLENBQUM7QUFDN0Ys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SUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsT0FBT0EsRUFBRUEsQ0FBQ0E7UUFDekNBLElBQUlBLENBQUNBLFVBQVVBLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBO1FBQzNDQSxJQUFJQSxDQUFDQSxXQUFXQSxHQUFHQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQTtRQUM1Q0EsQUFDQUEsc0JBRHNCQTtRQUN0QkEsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsT0FBT0EsRUFBRUEsQ0FBQ0E7UUFDekJBLElBQUlBLENBQUNBLFNBQVNBLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBO1FBQzFDQSxJQUFJQSxDQUFDQSxZQUFZQSxHQUFHQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQTtRQUM3Q0EsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsT0FBT0EsRUFBRUEsQ0FBQ0E7UUFDdkNBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBO1FBQ3pDQSxBQUNBQSxzQkFEc0JBO1FBQ3RCQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQTtRQUN6QkEsSUFBSUEsQ0FBQ0EsVUFBVUEsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsT0FBT0EsRUFBRUEsQ0FBQ0E7UUFDM0NBLElBQUlBLENBQUNBLFlBQVlBLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBO1FBQzdDQSxJQUFJQSxDQUFDQSxTQUFTQSxHQUFHQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQTtRQUMxQ0EsSUFBSUEsQ0FBQ0EsV0FBV0EsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsT0FBT0EsRUFBRUEsQ0FBQ0E7UUFDNUNBLElBQUlBLENBQUNBLGFBQWFBLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBO1FBQzlDQSxBQUNBQSx5QkFEeUJBO1FBQ3pCQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQTtRQUN6QkEsSUFBSUEsQ0FBQ0EsVUFBVUEsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsT0FBT0EsRUFBRUEsQ0FBQ0E7UUFFM0NBLElBQUlBLENBQUNBLGFBQWFBLEdBQUdBLElBQUlBLENBQUNBO0lBQzNCQSxDQUFDQTtJQUVEUjs7T0FFR0E7SUFDS0Esc0NBQWtCQSxHQUExQkE7UUFFQ1MsSUFBSUEsR0FBVUEsQ0FBQ0E7UUFDZkEsSUFBSUEsSUFBV0EsQ0FBQ0E7UUFDaEJBLElBQUlBLFFBQVFBLENBQVFBLE9BQURBLEFBQVFBLENBQUNBO1FBQzVCQSxJQUFJQSxVQUFVQSxDQUFRQSxPQUFEQSxBQUFRQSxDQUFDQTtRQUM5QkEsSUFBSUEsQ0FBQ0EsY0FBY0EsR0FBR0EsSUFBSUEsS0FBS0EsRUFBVUEsQ0FBQ0E7UUFDMUNBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBO1FBRTVDQSxJQUFJQSxNQUFNQSxHQUFVQSxJQUFJQSxNQUFNQSxDQUFDQSxvQkFBb0JBLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBO1FBQzFEQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFtQkEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsRUFBRUEsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0E7WUFDekRBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLFlBQVlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO1lBQ3ZDQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxNQUFNQSxFQUFFQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUNoQ0EsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDakNBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0E7Z0JBQzNCQSxVQUFVQSxHQUFHQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUNwQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsV0FBV0EsRUFBRUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsSUFBSUEsQ0FBQ0EsV0FBV0EsRUFBRUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQzFGQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxVQUFVQSxHQUFHQSxDQUFDQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQTtnQkFDaERBLEdBQUdBLEdBQUdBLElBQUlBLEdBQUdBLEdBQUdBLEdBQUdBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBO1lBQ3RDQSxDQUFDQTtZQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtnQkFDUEEsR0FBR0EsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFDWkEsQ0FBQ0E7WUFFREEsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFFOUJBLEFBQ0FBLG9DQURvQ0E7WUFDcENBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLE1BQU1BLElBQUlBLENBQUNBLENBQUNBO2dCQUNqQ0EsSUFBSUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsSUFBSUEsRUFBRUEsSUFBSUEsVUFBVUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDbERBLENBQUNBO1FBRURBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBLE1BQU1BLEdBQUdBLENBQUNBLENBQUNBO1lBQ2xDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUFDQSxJQUFJQTtZQUN2REEsSUFBSUEsQ0FBQ0EsYUFBYUEsR0FBR0EsSUFBSUEsQ0FBQ0E7SUFDNUJBLENBQUNBO0lBRURUOztPQUVHQTtJQUNLQSwyQkFBT0EsR0FBZkE7UUFFQ1UsSUFBSUEsQ0FBQ0EsR0FBbUJBLENBQUNBLENBQUNBO1FBRTFCQSxJQUFJQSxDQUFDQSxJQUFJQSxHQUFHQSxJQUFJQSxLQUFLQSxDQUFTQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUM3Q0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0E7UUFDekNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQW1CQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTtZQUN0REEsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsU0FBU0EsRUFBRUEsR0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0E7WUFDNURBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLFNBQVNBLEVBQUVBLEdBQUNBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBO1FBQzlEQSxDQUFDQTtRQUVEQSxJQUFJQSxDQUFDQSxTQUFTQSxHQUFHQSxJQUFJQSxDQUFDQTtJQUN2QkEsQ0FBQ0E7SUFFRFY7O09BRUdBO0lBQ0tBLDhCQUFVQSxHQUFsQkE7UUFFQ1csSUFBSUEsQ0FBQ0EsQ0FBUUEsUUFBREEsQUFBU0EsRUFBRUEsQ0FBQ0EsQ0FBUUEsUUFBREEsQUFBU0EsRUFBRUEsQ0FBQ0EsQ0FBUUEsUUFBREEsQUFBU0EsRUFBRUEsRUFBRUEsQ0FBUUEsUUFBREEsQUFBU0EsRUFBRUEsRUFBRUEsQ0FBUUEsUUFBREEsQUFBU0EsRUFBRUEsRUFBRUEsQ0FBUUEsUUFBREEsQUFBU0EsQ0FBQ0E7UUFDeEhBLElBQUlBLENBQUNBLENBQVFBLFFBQURBLEFBQVNBLENBQUNBO1FBRXRCQSxJQUFJQSxDQUFDQSxZQUFZQSxHQUFHQSxJQUFJQSxLQUFLQSxFQUFVQSxDQUFDQTtRQUN4Q0EsSUFBSUEsQ0FBQ0EsVUFBVUEsR0FBR0EsSUFBSUEsS0FBS0EsRUFBVUEsQ0FBQ0E7UUFDdENBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLElBQUlBLEtBQUtBLEVBQVVBLENBQVVBO1FBRTdDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxRQUFRQSxHQUFHQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQTtRQUUzQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsUUFBUUEsRUFBRUEsQ0FBQ0EsRUFBRUEsRUFBRUEsQ0FBQ0E7WUFDcENBLEFBQ0FBLHdCQUR3QkE7WUFDeEJBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLGlCQUFpQkEsRUFBRUEsQ0FBQ0E7WUFDdkNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLGlCQUFpQkEsRUFBRUEsQ0FBQ0E7WUFDdkNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLGlCQUFpQkEsRUFBRUEsQ0FBQ0E7WUFFdkNBLEFBQ0FBLG9CQURvQkE7WUFDcEJBLEVBQUVBLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLGlCQUFpQkEsRUFBRUEsQ0FBQ0E7WUFDeENBLEVBQUVBLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLGlCQUFpQkEsRUFBRUEsQ0FBQ0E7WUFDeENBLEVBQUVBLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLGlCQUFpQkEsRUFBRUEsQ0FBQ0E7WUFFeENBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLEVBQUVBLEVBQUVBLENBQUNBLENBQUNBO1lBQ3JCQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUNyQkEsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsRUFBRUEsQ0FBQ0EsQ0FBQ0E7UUFDdEJBLENBQUNBO1FBRURBLElBQUlBLEdBQUdBLEdBQW1CQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxNQUFNQSxDQUFDQTtRQUNqREEsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsSUFBSUEsS0FBS0EsQ0FBU0EsR0FBR0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFekNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLEdBQUdBLEVBQUVBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBO1lBQzFCQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUMzREEsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDeEVBLENBQUNBO1FBRURBLElBQUlBLENBQUNBLFlBQVlBLEdBQUdBLElBQUlBLENBQUNBO0lBQzFCQSxDQUFDQTtJQUVEWDs7Ozs7T0FLR0E7SUFDS0EsNEJBQVFBLEdBQWhCQSxVQUFpQkEsV0FBV0EsQ0FBUUEsUUFBREEsQUFBU0EsRUFBRUEsT0FBT0EsQ0FBUUEsUUFBREEsQUFBU0E7UUFFcEVZLElBQUlBLEtBQUtBLEdBQWtCQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxXQUFXQSxFQUFFQSxPQUFPQSxDQUFDQSxDQUFDQTtRQUVoRUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsS0FBS0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDakJBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO1lBQzdDQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQTtZQUNwQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7UUFDL0JBLENBQUNBO1FBQUNBLElBQUlBO1lBQ0xBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO0lBQzVCQSxDQUFDQTtJQUVEWjs7Ozs7T0FLR0E7SUFDS0EsNkJBQVNBLEdBQWpCQSxVQUFrQkEsV0FBV0EsQ0FBUUEsUUFBREEsQUFBU0EsRUFBRUEsT0FBT0EsQ0FBUUEsUUFBREEsQUFBU0E7UUFFckVhLElBQUlBLEdBQUdBLEdBQW1CQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxNQUFNQSxDQUFDQTtRQUVuREEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBbUJBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLEdBQUdBLEVBQUVBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBO1lBQzlDQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxXQUFXQSxJQUFJQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxPQUFPQSxDQUFDQTtnQkFDeEVBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBO1FBQ1hBLENBQUNBO1FBRURBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO0lBQ1hBLENBQUNBO0lBRURiOztPQUVHQTtJQUNLQSwrQkFBV0EsR0FBbkJBO1FBRUNjLElBQUlBLEVBQVNBLEVBQUVBLEVBQVNBLEVBQUVBLEVBQVNBLENBQUNBO1FBQ3BDQSxJQUFJQSxFQUFTQSxFQUFFQSxFQUFTQSxFQUFFQSxFQUFTQSxDQUFDQTtRQUNwQ0EsSUFBSUEsUUFBaUJBLENBQUNBO1FBQ3RCQSxJQUFJQSxPQUEyQkEsQ0FBQ0E7UUFDaENBLElBQUlBLE9BQU9BLEdBQW1CQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxNQUFNQSxDQUFDQTtRQUN2REEsSUFBSUEsU0FBdUJBLENBQUNBO1FBQzVCQSxJQUFJQSxTQUF1QkEsQ0FBQ0E7UUFDNUJBLElBQUlBLENBQUNBLENBQVFBLFFBQURBLEFBQVNBLEVBQUVBLENBQUNBLENBQVFBLE9BQURBLEFBQVFBLEVBQUVBLENBQUNBLENBQVFBLFFBQURBLEFBQVNBLENBQUNBO1FBQzNEQSxBQUNBQSwyQkFEMkJBO1lBQ3ZCQSxJQUFJQSxHQUFVQSxFQUFFQSxDQUFDQTtRQUNyQkEsSUFBSUEsUUFBUUEsR0FBa0JBLElBQUlBLENBQUNBO1FBRW5DQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxRQUFRQSxHQUFHQSxJQUFJQSxDQUFDQSxhQUFhQSxDQUFDQTtRQUU3Q0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsVUFBVUEsRUFBRUEsQ0FBQ0EsRUFBRUEsRUFBRUEsQ0FBQ0E7WUFFdENBLFNBQVNBLEdBQUdBLElBQUlBLEtBQUtBLEVBQVVBLENBQUNBO1lBQ2hDQSxTQUFTQSxHQUFHQSxJQUFJQSxLQUFLQSxDQUFTQSxPQUFPQSxHQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUV6Q0EsRUFBRUEsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsU0FBU0EsRUFBRUEsQ0FBQ0E7WUFDaENBLEVBQUVBLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLFNBQVNBLEVBQUVBLENBQUNBO1lBQ2hDQSxFQUFFQSxHQUFHQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxTQUFTQSxFQUFFQSxDQUFDQTtZQUVoQ0EsRUFBRUEsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsU0FBU0EsRUFBRUEsQ0FBQ0E7WUFDaENBLEVBQUVBLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLFNBQVNBLEVBQUVBLENBQUNBO1lBQ2hDQSxFQUFFQSxHQUFHQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxTQUFTQSxFQUFFQSxDQUFDQTtZQUVoQ0EsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0EsYUFBYUEsRUFBRUEsQ0FBQ0E7WUFJNUJBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLFlBQVlBLEVBQUVBLENBQUNBLEVBQUVBLEVBQUVBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLFFBQVFBLEVBQUVBO2dCQUNoRUEsU0FBU0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsRUFBRUEsR0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsZ0JBQWdCQSxFQUFFQSxHQUFHQSxFQUFFQSxFQUFFQSxFQUFFQSxHQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxnQkFBZ0JBLEVBQUVBLEdBQUdBLEVBQUVBLEVBQUVBLEVBQUVBLEdBQUNBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLGdCQUFnQkEsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7WUFFakpBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQ05BLEdBQUdBLENBQUNBLENB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QUFDQTtRQUNOQSxDQUFDQTtRQUNEQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtJQUNiQSxDQUFDQTtJQTdkYWYsYUFBR0EsR0FBa0JBLENBQUNBLENBQUNBO0lBOGR0Q0EsZ0JBQUNBO0FBQURBLENBaGVBLEFBZ2VDQSxFQWhldUIsVUFBVSxFQWdlakM7QUFFRCxBQUFtQixpQkFBVixTQUFTLENBQUMiLCJmaWxlIjoicGFyc2Vycy9NRDJQYXJzZXIuanMiLCJzb3VyY2VSb290IjoiLi4vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJpdG1hcERhdGFcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvYmFzZS9CaXRtYXBEYXRhXCIpO1xuaW1wb3J0IFZlY3RvcjNEXHRcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9WZWN0b3IzRFwiKTtcbmltcG9ydCBVUkxMb2FkZXJEYXRhRm9ybWF0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvbmV0L1VSTExvYWRlckRhdGFGb3JtYXRcIik7XG5pbXBvcnQgVVJMUmVxdWVzdFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9uZXQvVVJMUmVxdWVzdFwiKTtcbmltcG9ydCBQYXJzZXJCYXNlXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL3BhcnNlcnMvUGFyc2VyQmFzZVwiKTtcbmltcG9ydCBQYXJzZXJVdGlsc1x0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9wYXJzZXJzL1BhcnNlclV0aWxzXCIpO1xuaW1wb3J0IFJlc291cmNlRGVwZW5kZW5jeVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL3BhcnNlcnMvUmVzb3VyY2VEZXBlbmRlbmN5XCIpO1xuaW1wb3J0IFRleHR1cmUyREJhc2VcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL3RleHR1cmVzL1RleHR1cmUyREJhc2VcIik7XG5pbXBvcnQgQnl0ZUFycmF5XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL3V0aWxzL0J5dGVBcnJheVwiKTtcblxuaW1wb3J0IERpc3BsYXlPYmplY3RDb250YWluZXJcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvY29udGFpbmVycy9EaXNwbGF5T2JqZWN0Q29udGFpbmVyXCIpO1xuaW1wb3J0IERpc3BsYXlPYmplY3RcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2Jhc2UvRGlzcGxheU9iamVjdFwiKTtcbmltcG9ydCBHZW9tZXRyeVx0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2Jhc2UvR2VvbWV0cnlcIik7XG5pbXBvcnQgVHJpYW5nbGVTdWJHZW9tZXRyeVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2Jhc2UvVHJpYW5nbGVTdWJHZW9tZXRyeVwiKTtcbmltcG9ydCBDYW1lcmFcdFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9lbnRpdGllcy9DYW1lcmFcIik7XG5pbXBvcnQgTWVzaFx0XHRcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvZW50aXRpZXMvTWVzaFwiKTtcblxuaW1wb3J0IFZlcnRleENsaXBOb2RlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9hbmltYXRvcnMvbm9kZXMvVmVydGV4Q2xpcE5vZGVcIik7XG5pbXBvcnQgVmVydGV4QW5pbWF0aW9uU2V0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYW5pbWF0b3JzL1ZlcnRleEFuaW1hdGlvblNldFwiKTtcbmltcG9ydCBUcmlhbmdsZU1ldGhvZE1hdGVyaWFsXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL21hdGVyaWFscy9UcmlhbmdsZU1ldGhvZE1hdGVyaWFsXCIpO1xuaW1wb3J0IFRyaWFuZ2xlTWF0ZXJpYWxNb2RlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvbWF0ZXJpYWxzL1RyaWFuZ2xlTWF0ZXJpYWxNb2RlXCIpO1xuaW1wb3J0IERlZmF1bHRNYXRlcmlhbE1hbmFnZXJcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvbWF0ZXJpYWxzL3V0aWxzL0RlZmF1bHRNYXRlcmlhbE1hbmFnZXJcIik7XG5cbi8qKlxuICogTUQyUGFyc2VyIHByb3ZpZGVzIGEgcGFyc2VyIGZvciB0aGUgTUQyIGRhdGEgdHlwZS5cbiAqL1xuY2xhc3MgTUQyUGFyc2VyIGV4dGVuZHMgUGFyc2VyQmFzZVxue1xuXHRwdWJsaWMgc3RhdGljIEZQUzpudW1iZXIgLyppbnQqLyA9IDY7XG5cblx0cHJpdmF0ZSBfY2xpcE5vZGVzOk9iamVjdCA9IG5ldyBPYmplY3QoKTtcblx0cHJpdmF0ZSBfYnl0ZURhdGE6Qnl0ZUFycmF5O1xuXHRwcml2YXRlIF9zdGFydGVkUGFyc2luZzpib29sZWFuO1xuXHRwcml2YXRlIF9wYXJzZWRIZWFkZXI6Ym9vbGVhbjtcblx0cHJpdmF0ZSBfcGFyc2VkVVY6Ym9vbGVhbjtcblx0cHJpdmF0ZSBfcGFyc2VkRmFjZXM6Ym9vbGVhbjtcblx0cHJpdmF0ZSBfcGFyc2VkRnJhbWVzOmJvb2xlYW47XG5cblx0cHJpdmF0ZSBfaWRlbnQ6bnVtYmVyIC8qdWludCovO1xuXHRwcml2YXRlIF92ZXJzaW9uOm51bWJlciAvKnVpbnQqLztcblx0cHJpdmF0ZSBfc2tpbldpZHRoOm51bWJlciAvKnVpbnQqLztcblx0cHJpdmF0ZSBfc2tpbkhlaWdodDpudW1iZXIgLyp1aW50Ki87XG5cdC8vcHJpdmF0ZSBfZnJhbWVTaXplIDogbnVtYmVyIC8qdWludCovO1xuXHRwcml2YXRlIF9udW1Ta2luczpudW1iZXIgLyp1aW50Ki87XG5cdHByaXZhdGUgX251bVZlcnRpY2VzOm51bWJlciAvKnVpbnQqLztcblx0cHJpdmF0ZSBfbnVtU1Q6bnVtYmVyIC8qdWludCovO1xuXHRwcml2YXRlIF9udW1UcmlzOm51bWJlciAvKnVpbnQqLztcblx0Ly9wcml2YXRlIF9udW1HbENtZHMgOiBudW1iZXIgLyp1aW50Ki87XG5cdHByaXZhdGUgX251bUZyYW1lczpudW1iZXIgLyp1aW50Ki87XG5cdHByaXZhdGUgX29mZnNldFNraW5zOm51bWJlciAvKnVpbnQqLztcblx0cHJpdmF0ZSBfb2Zmc2V0U1Q6bnVtYmVyIC8qdWludCovO1xuXHRwcml2YXRlIF9vZmZzZXRUcmlzOm51bWJlciAvKnVpbnQqLztcblx0cHJpdmF0ZSBfb2Zmc2V0RnJhbWVzOm51bWJlciAvKnVpbnQqLztcblx0Ly9wcml2YXRlIF9vZmZzZXRHbENtZHMgOiBudW1iZXIgLyp1aW50Ki87XG5cdHByaXZhdGUgX29mZnNldEVuZDpudW1iZXIgLyp1aW50Ki87XG5cblx0cHJpdmF0ZSBfdXZJbmRpY2VzOkFycmF5PG51bWJlcj47XG5cdHByaXZhdGUgX2luZGljZXM6QXJyYXk8bnVtYmVyPiAvKnVpbnQqLztcblx0cHJpdmF0ZSBfdmVydEluZGljZXM6QXJyYXk8bnVtYmVyPjtcblxuXHQvLyB0aGUgY3VycmVudCBzdWJnZW9tIGJlaW5nIGJ1aWx0XG5cdHByaXZhdGUgX2FuaW1hdGlvblNldDpWZXJ0ZXhBbmltYXRpb25TZXQgPSBuZXcgVmVydGV4QW5pbWF0aW9uU2V0KCk7XG5cdHByaXZhdGUgX2ZpcnN0U3ViR2VvbTpUcmlhbmdsZVN1Ykdlb21ldHJ5O1xuXHRwcml2YXRlIF91dnM6QXJyYXk8bnVtYmVyPjtcblx0cHJpdmF0ZSBfZmluYWxVVjpBcnJheTxudW1iZXI+O1xuXG5cdHByaXZhdGUgX21hdGVyaWFsTmFtZXM6QXJyYXk8c3RyaW5nPjtcblx0cHJpdmF0ZSBfdGV4dHVyZVR5cGU6c3RyaW5nO1xuXHRwcml2YXRlIF9pZ25vcmVUZXh0dXJlUGF0aDpib29sZWFuO1xuXHRwcml2YXRlIF9tZXNoOk1lc2g7XG5cdHByaXZhdGUgX2dlb21ldHJ5Okdlb21ldHJ5O1xuXG5cdHByaXZhdGUgbWF0ZXJpYWxGaW5hbDpib29sZWFuID0gZmFsc2U7XG5cdHByaXZhdGUgZ2VvQ3JlYXRlZDpib29sZWFuID0gZmFsc2U7XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBuZXcgTUQyUGFyc2VyIG9iamVjdC5cblx0ICogQHBhcmFtIHRleHR1cmVUeXBlIFRoZSBleHRlbnNpb24gb2YgdGhlIHRleHR1cmUgKGUuZy4ganBnL3BuZy8uLi4pXG5cdCAqIEBwYXJhbSBpZ25vcmVUZXh0dXJlUGF0aCBJZiB0cnVlLCB0aGUgcGF0aCBvZiB0aGUgdGV4dHVyZSBpcyBpZ25vcmVkXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvcih0ZXh0dXJlVHlwZTpzdHJpbmcgPSBcImpwZ1wiLCBpZ25vcmVUZXh0dXJlUGF0aDpib29sZWFuID0gdHJ1ZSlcblx0e1xuXHRcdHN1cGVyKFVSTExvYWRlckRhdGFGb3JtYXQuQVJSQVlfQlVGRkVSKTtcblx0XHR0aGlzLl90ZXh0dXJlVHlwZSA9IHRleHR1cmVUeXBlO1xuXHRcdHRoaXMuX2lnbm9yZVRleHR1cmVQYXRoID0gaWdub3JlVGV4dHVyZVBhdGg7XG5cdH1cblxuXHQvKipcblx0ICogSW5kaWNhdGVzIHdoZXRoZXIgb3Igbm90IGEgZ2l2ZW4gZmlsZSBleHRlbnNpb24gaXMgc3VwcG9ydGVkIGJ5IHRoZSBwYXJzZXIuXG5cdCAqIEBwYXJhbSBleHRlbnNpb24gVGhlIGZpbGUgZXh0ZW5zaW9uIG9mIGEgcG90ZW50aWFsIGZpbGUgdG8gYmUgcGFyc2VkLlxuXHQgKiBAcmV0dXJuIFdoZXRoZXIgb3Igbm90IHRoZSBnaXZlbiBmaWxlIHR5cGUgaXMgc3VwcG9ydGVkLlxuXHQgKi9cblx0cHVibGljIHN0YXRpYyBzdXBwb3J0c1R5cGUoZXh0ZW5zaW9uOnN0cmluZyk6Ym9vbGVhblxuXHR7XG5cdFx0ZXh0ZW5zaW9uID0gZXh0ZW5zaW9uLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIGV4dGVuc2lvbiA9PSBcIm1kMlwiO1xuXHR9XG5cblx0LyoqXG5cdCAqIFRlc3RzIHdoZXRoZXIgYSBkYXRhIGJsb2NrIGNhbiBiZSBwYXJzZWQgYnkgdGhlIHBhcnNlci5cblx0ICogQHBhcmFtIGRhdGEgVGhlIGRhdGEgYmxvY2sgdG8gcG90ZW50aWFsbHkgYmUgcGFyc2VkLlxuXHQgKiBAcmV0dXJuIFdoZXRoZXIgb3Igbm90IHRoZSBnaXZlbiBkYXRhIGlzIHN1cHBvcnRlZC5cblx0ICovXG5cdHB1YmxpYyBzdGF0aWMgc3VwcG9ydHNEYXRhKGRhdGE6YW55KTpib29sZWFuXG5cdHtcblx0XHRyZXR1cm4gKFBhcnNlclV0aWxzLnRvU3RyaW5nKGRhdGEsIDQpID09ICdJRFAyJyk7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHB1YmxpYyBfaVJlc29sdmVEZXBlbmRlbmN5KHJlc291cmNlRGVwZW5kZW5jeTpSZXNvdXJjZURlcGVuZGVuY3kpOnZvaWRcblx0e1xuXHRcdGlmIChyZXNvdXJjZURlcGVuZGVuY3kuYXNzZXRzLmxlbmd0aCAhPSAxKVxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0dmFyIGFzc2V0OlRleHR1cmUyREJhc2UgPSA8VGV4dHVyZTJEQmFzZT4gcmVzb3VyY2VEZXBlbmRlbmN5LmFzc2V0c1swXTtcblxuXHRcdGlmIChhc3NldCkge1xuXHRcdFx0dmFyIG1hdGVyaWFsOlRyaWFuZ2xlTWV0aG9kTWF0ZXJpYWwgPSBuZXcgVHJpYW5nbGVNZXRob2RNYXRlcmlhbChhc3NldCk7XG5cblx0XHRcdGlmICh0aGlzLm1hdGVyaWFsTW9kZSA+PSAyKVxuXHRcdFx0XHRtYXRlcmlhbC5tYXRlcmlhbE1vZGUgPSBUcmlhbmdsZU1hdGVyaWFsTW9kZS5NVUxUSV9QQVNTO1xuXG5cdFx0XHQvL2FkZCB0byB0aGUgY29udGVudCBwcm9wZXJ0eVxuXHRcdFx0KDxEaXNwbGF5T2JqZWN0Q29udGFpbmVyPiB0aGlzLl9wQ29udGVudCkuYWRkQ2hpbGQodGhpcy5fbWVzaCk7XG5cblx0XHRcdG1hdGVyaWFsLm5hbWUgPSB0aGlzLl9tZXNoLm1hdGVyaWFsLm5hbWU7XG5cdFx0XHR0aGlzLl9tZXNoLm1hdGVyaWFsID0gbWF0ZXJpYWw7XG5cdFx0XHR0aGlzLl9wRmluYWxpemVBc3NldChtYXRlcmlhbCk7XG5cdFx0XHR0aGlzLl9wRmluYWxpemVBc3NldCh0aGlzLl9tZXNoLmdlb21ldHJ5KTtcblx0XHRcdHRoaXMuX3BGaW5hbGl6ZUFzc2V0KHRoaXMuX21lc2gpO1xuXHRcdH1cblx0XHR0aGlzLm1hdGVyaWFsRmluYWwgPSB0cnVlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRwdWJsaWMgX2lSZXNvbHZlRGVwZW5kZW5jeUZhaWx1cmUocmVzb3VyY2VEZXBlbmRlbmN5OlJlc291cmNlRGVwZW5kZW5jeSk6dm9pZFxuXHR7XG5cdFx0Ly8gYXBwbHkgc3lzdGVtIGRlZmF1bHRcblx0XHRpZiAodGhpcy5tYXRlcmlhbE1vZGUgPCAyKSB7XG5cdFx0XHR0aGlzLl9tZXNoLm1hdGVyaWFsID0gRGVmYXVsdE1hdGVyaWFsTWFuYWdlci5nZXREZWZhdWx0TWF0ZXJpYWwoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5fbWVzaC5tYXRlcmlhbCA9IG5ldyBUcmlhbmdsZU1ldGhvZE1hdGVyaWFsKERlZmF1bHRNYXRlcmlhbE1hbmFnZXIuZ2V0RGVmYXVsdFRleHR1cmUoKSk7XG5cdFx0XHQoPFRyaWFuZ2xlTWV0aG9kTWF0ZXJpYWw+IHRoaXMuX21lc2gubWF0ZXJpYWwpLm1hdGVyaWFsTW9kZSA9IFRyaWFuZ2xlTWF0ZXJpYWxNb2RlLk1VTFRJX1BBU1M7XG5cdFx0fVxuXG5cdFx0Ly9hZGQgdG8gdGhlIGNvbnRlbnQgcHJvcGVydHlcblx0XHQoPERpc3BsYXlPYmplY3RDb250YWluZXI+IHRoaXMuX3BDb250ZW50KS5hZGRDaGlsZCh0aGlzLl9tZXNoKTtcblxuXHRcdHRoaXMuX3BGaW5hbGl6ZUFzc2V0KHRoaXMuX21lc2guZ2VvbWV0cnkpO1xuXHRcdHRoaXMuX3BGaW5hbGl6ZUFzc2V0KHRoaXMuX21lc2gpO1xuXHRcdHRoaXMubWF0ZXJpYWxGaW5hbCA9IHRydWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIF9wUHJvY2VlZFBhcnNpbmcoKTpib29sZWFuXG5cdHtcblx0XHRpZiAoIXRoaXMuX3N0YXJ0ZWRQYXJzaW5nKSB7XG5cdFx0XHR0aGlzLl9ieXRlRGF0YSA9IHRoaXMuX3BHZXRCeXRlRGF0YSgpO1xuXHRcdFx0dGhpcy5fc3RhcnRlZFBhcnNpbmcgPSB0cnVlO1xuXG5cdFx0XHQvLyBSZXNldCBieXRlYXJyYXkgcmVhZCBwb3NpdGlvbiAod2hpY2ggbWF5IGhhdmUgYmVlblxuXHRcdFx0Ly8gbW92ZWQgZm9yd2FyZCBieSB0aGUgc3VwcG9ydHNEYXRhKCkgZnVuY3Rpb24uKVxuXHRcdFx0dGhpcy5fYnl0ZURhdGEucG9zaXRpb24gPSAwO1xuXHRcdH1cblxuXHRcdHdoaWxlICh0aGlzLl9wSGFzVGltZSgpKSB7XG5cdFx0XHRpZiAoIXRoaXMuX3BhcnNlZEhlYWRlcikge1xuXHRcdFx0XHQvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0XHRcdFx0Ly8gTElUVExFX0VORElBTiAtIERlZmF1bHQgZm9yIEFycmF5QnVmZmVyIC8gTm90IGltcGxlbWVudGVkIGluIEJ5dGVBcnJheVxuXHRcdFx0XHQvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0XHRcdFx0Ly90aGlzLl9ieXRlRGF0YS5lbmRpYW4gPSBFbmRpYW4uTElUVExFX0VORElBTjtcblxuXHRcdFx0XHQvLyBUT0RPOiBDcmVhdGUgYSBtZXNoIG9ubHkgd2hlbiBlbmNvdW50ZXJlZCAoaWYgaXQgbWFrZXMgc2Vuc2Vcblx0XHRcdFx0Ly8gZm9yIHRoaXMgZmlsZSBmb3JtYXQpIGFuZCByZXR1cm4gaXQgdXNpbmcgdGhpcy5fcEZpbmFsaXplQXNzZXQoKVxuXHRcdFx0XHR0aGlzLl9nZW9tZXRyeSA9IG5ldyBHZW9tZXRyeSgpO1xuXHRcdFx0XHR0aGlzLl9tZXNoID0gbmV3IE1lc2godGhpcy5fZ2VvbWV0cnksIG51bGwpO1xuXHRcdFx0XHRpZiAodGhpcy5tYXRlcmlhbE1vZGUgPCAyKSB7XG5cdFx0XHRcdFx0dGhpcy5fbWVzaC5tYXRlcmlhbCA9IERlZmF1bHRNYXRlcmlhbE1hbmFnZXIuZ2V0RGVmYXVsdE1hdGVyaWFsKCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5fbWVzaC5tYXRlcmlhbCA9IG5ldyBUcmlhbmdsZU1ldGhvZE1hdGVyaWFsKERlZmF1bHRNYXRlcmlhbE1hbmFnZXIuZ2V0RGVmYXVsdFRleHR1cmUoKSk7XG5cdFx0XHRcdFx0KDxUcmlhbmdsZU1ldGhvZE1hdGVyaWFsPiB0aGlzLl9tZXNoLm1hdGVyaWFsKS5tYXRlcmlhbE1vZGUgPSBUcmlhbmdsZU1hdGVyaWFsTW9kZS5NVUxUSV9QQVNTO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly9fZ2VvbWV0cnkuYW5pbWF0aW9uID0gbmV3IFZlcnRleEFuaW1hdGlvbigyLCBWZXJ0ZXhBbmltYXRpb25Nb2RlLkFCU09MVVRFKTtcblx0XHRcdFx0Ly9fYW5pbWF0b3IgPSBuZXcgVmVydGV4QW5pbWF0b3IoVmVydGV4QW5pbWF0aW9uU3RhdGUoX21lc2guYW5pbWF0aW9uU3RhdGUpKTtcblxuXHRcdFx0XHQvLyBQYXJzZSBoZWFkZXIgYW5kIGRlY29tcHJlc3MgYm9keVxuXHRcdFx0XHR0aGlzLnBhcnNlSGVhZGVyKCk7XG5cdFx0XHRcdHRoaXMucGFyc2VNYXRlcmlhbE5hbWVzKCk7XG5cdFx0XHR9IGVsc2UgaWYgKCF0aGlzLl9wYXJzZWRVVikge1xuXHRcdFx0XHR0aGlzLnBhcnNlVVYoKTtcblx0XHRcdH0gZWxzZSBpZiAoIXRoaXMuX3BhcnNlZEZhY2VzKSB7XG5cdFx0XHRcdHRoaXMucGFyc2VGYWNlcygpO1xuXHRcdFx0fSBlbHNlIGlmICghdGhpcy5fcGFyc2VkRnJhbWVzKSB7XG5cdFx0XHRcdHRoaXMucGFyc2VGcmFtZXMoKTtcblx0XHRcdH0gZWxzZSBpZiAoKHRoaXMuZ2VvQ3JlYXRlZCkgJiYgKHRoaXMubWF0ZXJpYWxGaW5hbCkpIHtcblx0XHRcdFx0cmV0dXJuIFBhcnNlckJhc2UuUEFSU0lOR19ET05FO1xuXHRcdFx0fSBlbHNlIGlmICghdGhpcy5nZW9DcmVhdGVkKSB7XG5cdFx0XHRcdHRoaXMuZ2VvQ3JlYXRlZCA9IHRydWU7XG5cdFx0XHRcdC8vY3JlYXRlIGRlZmF1bHQgc3ViZ2VvbWV0cnlcblx0XHRcdFx0dGhpcy5fZ2VvbWV0cnkuYWRkU3ViR2VvbWV0cnkodGhpcy5fZmlyc3RTdWJHZW9tLmNsb25lKCkpO1xuXHRcdFx0XHQvLyBGb3JjZSBuYW1lIHRvIGJlIGNob3NlbiBieSB0aGlzLl9wRmluYWxpemVBc3NldCgpXG5cdFx0XHRcdHRoaXMuX21lc2gubmFtZSA9IFwiXCI7XG5cdFx0XHRcdGlmICh0aGlzLm1hdGVyaWFsRmluYWwpIHtcblx0XHRcdFx0XHQvL2FkZCB0byB0aGUgY29udGVudCBwcm9wZXJ0eVxuXHRcdFx0XHRcdCg8RGlzcGxheU9iamVjdENvbnRhaW5lcj4gdGhpcy5fcENvbnRlbnQpLmFkZENoaWxkKHRoaXMuX21lc2gpO1xuXG5cdFx0XHRcdFx0dGhpcy5fcEZpbmFsaXplQXNzZXQodGhpcy5fbWVzaC5nZW9tZXRyeSk7XG5cdFx0XHRcdFx0dGhpcy5fcEZpbmFsaXplQXNzZXQodGhpcy5fbWVzaCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLl9wUGF1c2VBbmRSZXRyaWV2ZURlcGVuZGVuY2llcygpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBQYXJzZXJCYXNlLk1PUkVfVE9fUEFSU0U7XG5cdH1cblxuXHRwdWJsaWMgX3BTdGFydFBhcnNpbmcoZnJhbWVMaW1pdDpudW1iZXIpXG5cdHtcblx0XHRzdXBlci5fcFN0YXJ0UGFyc2luZyhmcmFtZUxpbWl0KTtcblxuXHRcdC8vY3JlYXRlIGEgY29udGVudCBvYmplY3QgZm9yIExvYWRlcnNcblx0XHR0aGlzLl9wQ29udGVudCA9IG5ldyBEaXNwbGF5T2JqZWN0Q29udGFpbmVyKCk7XG5cdH1cblxuXHQvKipcblx0ICogUmVhZHMgaW4gYWxsIHRoYXQgTUQyIEhlYWRlciBkYXRhIHRoYXQgaXMgZGVjbGFyZWQgYXMgcHJpdmF0ZSB2YXJpYWJsZXMuXG5cdCAqIEkga25vdyBpdHMgYSBsb3QsIGFuZCBpdCBsb29rcyB1Z2x5LCBidXQgb25seSB3YXkgdG8gZG8gaXQgaW4gRmxhc2hcblx0ICovXG5cdHByaXZhdGUgcGFyc2VIZWFkZXIoKTp2b2lkXG5cdHtcblx0XHR0aGlzLl9pZGVudCA9IHRoaXMuX2J5dGVEYXRhLnJlYWRJbnQoKTtcblx0XHR0aGlzLl92ZXJzaW9uID0gdGhpcy5fYnl0ZURhdGEucmVhZEludCgpO1xuXHRcdHRoaXMuX3NraW5XaWR0aCA9IHRoaXMuX2J5dGVEYXRhLnJlYWRJbnQoKTtcblx0XHR0aGlzLl9za2luSGVpZ2h0ID0gdGhpcy5fYnl0ZURhdGEucmVhZEludCgpO1xuXHRcdC8vc2tpcCB0aGlzLl9mcmFtZVNpemVcblx0XHR0aGlzLl9ieXRlRGF0YS5yZWFkSW50KCk7XG5cdFx0dGhpcy5fbnVtU2tpbnMgPSB0aGlzLl9ieXRlRGF0YS5yZWFkSW50KCk7XG5cdFx0dGhpcy5fbnVtVmVydGljZXMgPSB0aGlzLl9ieXRlRGF0YS5yZWFkSW50KCk7XG5cdFx0dGhpcy5fbnVtU1QgPSB0aGlzLl9ieXRlRGF0YS5yZWFkSW50KCk7XG5cdFx0dGhpcy5fbnVtVHJpcyA9IHRoaXMuX2J5dGVEYXRhLnJlYWRJbnQoKTtcblx0XHQvL3NraXAgdGhpcy5fbnVtR2xDbWRzXG5cdFx0dGhpcy5fYnl0ZURhdGEucmVhZEludCgpO1xuXHRcdHRoaXMuX251bUZyYW1lcyA9IHRoaXMuX2J5dGVEYXRhLnJlYWRJbnQoKTtcblx0XHR0aGlzLl9vZmZzZXRTa2lucyA9IHRoaXMuX2J5dGVEYXRhLnJlYWRJbnQoKTtcblx0XHR0aGlzLl9vZmZzZXRTVCA9IHRoaXMuX2J5dGVEYXRhLnJlYWRJbnQoKTtcblx0XHR0aGlzLl9vZmZzZXRUcmlzID0gdGhpcy5fYnl0ZURhdGEucmVhZEludCgpO1xuXHRcdHRoaXMuX29mZnNldEZyYW1lcyA9IHRoaXMuX2J5dGVEYXRhLnJlYWRJbnQoKTtcblx0XHQvL3NraXAgdGhpcy5fb2Zmc2V0R2xDbWRzXG5cdFx0dGhpcy5fYnl0ZURhdGEucmVhZEludCgpO1xuXHRcdHRoaXMuX29mZnNldEVuZCA9IHRoaXMuX2J5dGVEYXRhLnJlYWRJbnQoKTtcblxuXHRcdHRoaXMuX3BhcnNlZEhlYWRlciA9IHRydWU7XG5cdH1cblxuXHQvKipcblx0ICogUGFyc2VzIHRoZSBmaWxlIG5hbWVzIGZvciB0aGUgbWF0ZXJpYWxzLlxuXHQgKi9cblx0cHJpdmF0ZSBwYXJzZU1hdGVyaWFsTmFtZXMoKTp2b2lkXG5cdHtcblx0XHR2YXIgdXJsOnN0cmluZztcblx0XHR2YXIgbmFtZTpzdHJpbmc7XG5cdFx0dmFyIGV4dEluZGV4Om51bWJlciAvKmludCovO1xuXHRcdHZhciBzbGFzaEluZGV4Om51bWJlciAvKmludCovO1xuXHRcdHRoaXMuX21hdGVyaWFsTmFtZXMgPSBuZXcgQXJyYXk8c3RyaW5nPigpO1xuXHRcdHRoaXMuX2J5dGVEYXRhLnBvc2l0aW9uID0gdGhpcy5fb2Zmc2V0U2tpbnM7XG5cblx0XHR2YXIgcmVnRXhwOlJlZ0V4cCA9IG5ldyBSZWdFeHAoXCJbXmEtekEtWjAtOVxcXFxfXFwvLl1cIiwgXCJnXCIpO1xuXHRcdGZvciAodmFyIGk6bnVtYmVyIC8qdWludCovID0gMDsgaSA8IHRoaXMuX251bVNraW5zOyArK2kpIHtcblx0XHRcdG5hbWUgPSB0aGlzLl9ieXRlRGF0YS5yZWFkVVRGQnl0ZXMoNjQpO1xuXHRcdFx0bmFtZSA9IG5hbWUucmVwbGFjZShyZWdFeHAsIFwiXCIpO1xuXHRcdFx0ZXh0SW5kZXggPSBuYW1lLmxhc3RJbmRleE9mKFwiLlwiKTtcblx0XHRcdGlmICh0aGlzLl9pZ25vcmVUZXh0dXJlUGF0aClcblx0XHRcdFx0c2xhc2hJbmRleCA9IG5hbWUubGFzdEluZGV4T2YoXCIvXCIpO1xuXHRcdFx0aWYgKG5hbWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwiLmpwZ1wiKSA9PSAtMSAmJiBuYW1lLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcIi5wbmdcIikgPT0gLTEpIHtcblx0XHRcdFx0bmFtZSA9IG5hbWUuc3Vic3RyaW5nKHNsYXNoSW5kZXggKyAxLCBleHRJbmRleCk7XG5cdFx0XHRcdHVybCA9IG5hbWUgKyBcIi5cIiArIHRoaXMuX3RleHR1cmVUeXBlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dXJsID0gbmFtZTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fbWF0ZXJpYWxOYW1lc1tpXSA9IG5hbWU7XG5cblx0XHRcdC8vIG9ubHkgc3VwcG9ydCAxIHNraW4gVE9ETzogcmVhbGx5P1xuXHRcdFx0aWYgKHRoaXMuZGVwZW5kZW5jaWVzLmxlbmd0aCA9PSAwKVxuXHRcdFx0XHR0aGlzLl9wQWRkRGVwZW5kZW5jeShuYW1lLCBuZXcgVVJMUmVxdWVzdCh1cmwpKTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5fbWF0ZXJpYWxOYW1lcy5sZW5ndGggPiAwKVxuXHRcdFx0dGhpcy5fbWVzaC5tYXRlcmlhbC5uYW1lID0gdGhpcy5fbWF0ZXJpYWxOYW1lc1swXTsgZWxzZVxuXHRcdFx0dGhpcy5tYXRlcmlhbEZpbmFsID0gdHJ1ZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBQYXJzZXMgdGhlIHV2IGRhdGEgZm9yIHRoZSBtZXNoLlxuXHQgKi9cblx0cHJpdmF0ZSBwYXJzZVVWKCk6dm9pZFxuXHR7XG5cdFx0dmFyIGo6bnVtYmVyIC8qdWludCovID0gMDtcblxuXHRcdHRoaXMuX3V2cyA9IG5ldyBBcnJheTxudW1iZXI+KHRoaXMuX251bVNUKjIpO1xuXHRcdHRoaXMuX2J5dGVEYXRhLnBvc2l0aW9uID0gdGhpcy5fb2Zmc2V0U1Q7XG5cdFx0Zm9yICh2YXIgaTpudW1iZXIgLyp1aW50Ki8gPSAwOyBpIDwgdGhpcy5fbnVtU1Q7IGkrKykge1xuXHRcdFx0dGhpcy5fdXZzW2orK10gPSB0aGlzLl9ieXRlRGF0YS5yZWFkU2hvcnQoKS90aGlzLl9za2luV2lkdGg7XG5cdFx0XHR0aGlzLl91dnNbaisrXSA9IHRoaXMuX2J5dGVEYXRhLnJlYWRTaG9ydCgpL3RoaXMuX3NraW5IZWlnaHQ7XG5cdFx0fVxuXG5cdFx0dGhpcy5fcGFyc2VkVVYgPSB0cnVlO1xuXHR9XG5cblx0LyoqXG5cdCAqIFBhcnNlcyB1bmlxdWUgaW5kaWNlcyBmb3IgdGhlIGZhY2VzLlxuXHQgKi9cblx0cHJpdmF0ZSBwYXJzZUZhY2VzKCk6dm9pZFxuXHR7XG5cdFx0dmFyIGE6bnVtYmVyIC8qdWludCovLCBiOm51bWJlciAvKnVpbnQqLywgYzpudW1iZXIgLyp1aW50Ki8sIHRhOm51bWJlciAvKnVpbnQqLywgdGI6bnVtYmVyIC8qdWludCovLCB0YzpudW1iZXIgLyp1aW50Ki87XG5cdFx0dmFyIGk6bnVtYmVyIC8qdWludCovO1xuXG5cdFx0dGhpcy5fdmVydEluZGljZXMgPSBuZXcgQXJyYXk8bnVtYmVyPigpO1xuXHRcdHRoaXMuX3V2SW5kaWNlcyA9IG5ldyBBcnJheTxudW1iZXI+KCk7XG5cdFx0dGhpcy5faW5kaWNlcyA9IG5ldyBBcnJheTxudW1iZXI+KCkgLyp1aW50Ki87XG5cblx0XHR0aGlzLl9ieXRlRGF0YS5wb3NpdGlvbiA9IHRoaXMuX29mZnNldFRyaXM7XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgdGhpcy5fbnVtVHJpczsgaSsrKSB7XG5cdFx0XHQvL2NvbGxlY3QgdmVydGV4IGluZGljZXNcblx0XHRcdGEgPSB0aGlzLl9ieXRlRGF0YS5yZWFkVW5zaWduZWRTaG9ydCgpO1xuXHRcdFx0YiA9IHRoaXMuX2J5dGVEYXRhLnJlYWRVbnNpZ25lZFNob3J0KCk7XG5cdFx0XHRjID0gdGhpcy5fYnl0ZURhdGEucmVhZFVuc2lnbmVkU2hvcnQoKTtcblxuXHRcdFx0Ly9jb2xsZWN0IHV2IGluZGljZXNcblx0XHRcdHRhID0gdGhpcy5fYnl0ZURhdGEucmVhZFVuc2lnbmVkU2hvcnQoKTtcblx0XHRcdHRiID0gdGhpcy5fYnl0ZURhdGEucmVhZFVuc2lnbmVkU2hvcnQoKTtcblx0XHRcdHRjID0gdGhpcy5fYnl0ZURhdGEucmVhZFVuc2lnbmVkU2hvcnQoKTtcblxuXHRcdFx0dGhpcy5hZGRJbmRleChhLCB0YSk7XG5cdFx0XHR0aGlzLmFkZEluZGV4KGIsIHRiKTtcblx0XHRcdHRoaXMuYWRkSW5kZXgoYywgdGMpO1xuXHRcdH1cblxuXHRcdHZhciBsZW46bnVtYmVyIC8qdWludCovID0gdGhpcy5fdXZJbmRpY2VzLmxlbmd0aDtcblx0XHR0aGlzLl9maW5hbFVWID0gbmV3IEFycmF5PG51bWJlcj4obGVuKjIpO1xuXG5cdFx0Zm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG5cdFx0XHR0aGlzLl9maW5hbFVWW2kgPDwgMV0gPSB0aGlzLl91dnNbdGhpcy5fdXZJbmRpY2VzW2ldIDw8IDFdO1xuXHRcdFx0dGhpcy5fZmluYWxVVlsoaSA8PCAxKSArIDFdID0gdGhpcy5fdXZzWyh0aGlzLl91dkluZGljZXNbaV0gPDwgMSkgKyAxXTtcblx0XHR9XG5cblx0XHR0aGlzLl9wYXJzZWRGYWNlcyA9IHRydWU7XG5cdH1cblxuXHQvKipcblx0ICogQWRkcyBhIGZhY2UgaW5kZXggdG8gdGhlIGxpc3QgaWYgaXQgZG9lc24ndCBleGlzdCB5ZXQsIGJhc2VkIG9uIHZlcnRleEluZGV4IGFuZCB1dkluZGV4LCBhbmQgYWRkcyB0aGVcblx0ICogY29ycmVzcG9uZGluZyB2ZXJ0ZXggYW5kIHV2IGRhdGEgaW4gdGhlIGNvcnJlY3QgbG9jYXRpb24uXG5cdCAqIEBwYXJhbSB2ZXJ0ZXhJbmRleCBUaGUgb3JpZ2luYWwgaW5kZXggaW4gdGhlIHZlcnRleCBsaXN0LlxuXHQgKiBAcGFyYW0gdXZJbmRleCBUaGUgb3JpZ2luYWwgaW5kZXggaW4gdGhlIHV2IGxpc3QuXG5cdCAqL1xuXHRwcml2YXRlIGFkZEluZGV4KHZlcnRleEluZGV4Om51bWJlciAvKnVpbnQqLywgdXZJbmRleDpudW1iZXIgLyp1aW50Ki8pOnZvaWRcblx0e1xuXHRcdHZhciBpbmRleDpudW1iZXIgLyppbnQqLyA9IHRoaXMuZmluZEluZGV4KHZlcnRleEluZGV4LCB1dkluZGV4KTtcblxuXHRcdGlmIChpbmRleCA9PSAtMSkge1xuXHRcdFx0dGhpcy5faW5kaWNlcy5wdXNoKHRoaXMuX3ZlcnRJbmRpY2VzLmxlbmd0aCk7XG5cdFx0XHR0aGlzLl92ZXJ0SW5kaWNlcy5wdXNoKHZlcnRleEluZGV4KTtcblx0XHRcdHRoaXMuX3V2SW5kaWNlcy5wdXNoKHV2SW5kZXgpO1xuXHRcdH0gZWxzZVxuXHRcdFx0dGhpcy5faW5kaWNlcy5wdXNoKGluZGV4KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBGaW5kcyB0aGUgZmluYWwgaW5kZXggY29ycmVzcG9uZGluZyB0byB0aGUgb3JpZ2luYWwgTUQyJ3MgdmVydGV4IGFuZCB1diBpbmRpY2VzLiBSZXR1cm5zIC0xIGlmIGl0IHdhc24ndCBhZGRlZCB5ZXQuXG5cdCAqIEBwYXJhbSB2ZXJ0ZXhJbmRleCBUaGUgb3JpZ2luYWwgaW5kZXggaW4gdGhlIHZlcnRleCBsaXN0LlxuXHQgKiBAcGFyYW0gdXZJbmRleCBUaGUgb3JpZ2luYWwgaW5kZXggaW4gdGhlIHV2IGxpc3QuXG5cdCAqIEByZXR1cm4gVGhlIGluZGV4IG9mIHRoZSBmaW5hbCBtZXNoIGNvcnJlc3BvbmRpbmcgdG8gdGhlIG9yaWdpbmFsIHZlcnRleCBhbmQgdXYgaW5kZXguIC0xIGlmIGl0IGRvZXNuJ3QgZXhpc3QgeWV0LlxuXHQgKi9cblx0cHJpdmF0ZSBmaW5kSW5kZXgodmVydGV4SW5kZXg6bnVtYmVyIC8qdWludCovLCB1dkluZGV4Om51bWJlciAvKnVpbnQqLyk6bnVtYmVyIC8qaW50Ki9cblx0e1xuXHRcdHZhciBsZW46bnVtYmVyIC8qdWludCovID0gdGhpcy5fdmVydEluZGljZXMubGVuZ3RoO1xuXG5cdFx0Zm9yICh2YXIgaTpudW1iZXIgLyp1aW50Ki8gPSAwOyBpIDwgbGVuOyArK2kpIHtcblx0XHRcdGlmICh0aGlzLl92ZXJ0SW5kaWNlc1tpXSA9PSB2ZXJ0ZXhJbmRleCAmJiB0aGlzLl91dkluZGljZXNbaV0gPT0gdXZJbmRleClcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIC0xO1xuXHR9XG5cblx0LyoqXG5cdCAqIFBhcnNlcyBhbGwgdGhlIGZyYW1lIGdlb21ldHJpZXMuXG5cdCAqL1xuXHRwcml2YXRlIHBhcnNlRnJhbWVzKCk6dm9pZFxuXHR7XG5cdFx0dmFyIHN4Om51bWJlciwgc3k6bnVtYmVyLCBzejpudW1iZXI7XG5cdFx0dmFyIHR4Om51bWJlciwgdHk6bnVtYmVyLCB0ejpudW1iZXI7XG5cdFx0dmFyIGdlb21ldHJ5Okdlb21ldHJ5O1xuXHRcdHZhciBzdWJHZW9tOlRyaWFuZ2xlU3ViR2VvbWV0cnk7XG5cdFx0dmFyIHZlcnRMZW46bnVtYmVyIC8qdWludCovID0gdGhpcy5fdmVydEluZGljZXMubGVuZ3RoO1xuXHRcdHZhciBmdmVydGljZXM6QXJyYXk8bnVtYmVyPjtcblx0XHR2YXIgdHZlcnRpY2VzOkFycmF5PG51bWJlcj47XG5cdFx0dmFyIGk6bnVtYmVyIC8qdWludCovLCBqOm51bWJlciAvKmludCovLCBrOm51bWJlciAvKnVpbnQqLztcblx0XHQvL3ZhciBjaCA6IG51bWJlciAvKnVpbnQqLztcblx0XHR2YXIgbmFtZTpzdHJpbmcgPSBcIlwiO1xuXHRcdHZhciBwcmV2Q2xpcDpWZXJ0ZXhDbGlwTm9kZSA9IG51bGw7XG5cblx0XHR0aGlzLl9ieXRlRGF0YS5wb3NpdGlvbiA9IHRoaXMuX29mZnNldEZyYW1lcztcblxuXHRcdGZvciAoaSA9IDA7IGkgPCB0aGlzLl9udW1GcmFtZXM7IGkrKykge1xuXG5cdFx0XHR0dmVydGljZXMgPSBuZXcgQXJyYXk8bnVtYmVyPigpO1xuXHRcdFx0ZnZlcnRpY2VzID0gbmV3IEFycmF5PG51bWJlcj4odmVydExlbiozKTtcblxuXHRcdFx0c3ggPSB0aGlzLl9ieXRlRGF0YS5yZWFkRmxvYXQoKTtcblx0XHRcdHN5ID0gdGhpcy5fYnl0ZURhdGEucmVhZEZsb2F0KCk7XG5cdFx0XHRzeiA9IHRoaXMuX2J5dGVEYXRhLnJlYWRGbG9hdCgpO1xuXG5cdFx0XHR0eCA9IHRoaXMuX2J5dGVEYXRhLnJlYWRGbG9hdCgpO1xuXHRcdFx0dHkgPSB0aGlzLl9ieXRlRGF0YS5yZWFkRmxvYXQoKTtcblx0XHRcdHR6ID0gdGhpcy5fYnl0ZURhdGEucmVhZEZsb2F0KCk7XG5cblx0XHRcdG5hbWUgPSB0aGlzLnJlYWRGcmFtZU5hbWUoKTtcblxuXHRcdFx0Ly8gTm90ZSwgdGhlIGV4dHJhIGRhdGEucG9zaXRpb24rKyBpbiB0aGUgZm9yIGxvb3AgaXMgdGhlcmVcblx0XHRcdC8vIHRvIHNraXAgb3ZlciBhIGJ5dGUgdGhhdCBob2xkcyB0aGUgXCJ2ZXJ0ZXggbm9ybWFsIGluZGV4XCJcblx0XHRcdGZvciAoaiA9IDA7IGogPCB0aGlzLl9udW1WZXJ0aWNlczsgaisrLCB0aGlzLl9ieXRlRGF0YS5wb3NpdGlvbisrKVxuXHRcdFx0XHR0dmVydGljZXMucHVzaChzeCp0aGlzLl9ieXRlRGF0YS5yZWFkVW5zaWduZWRCeXRlKCkgKyB0eCwgc3kqdGhpcy5fYnl0ZURhdGEucmVhZFVuc2lnbmVkQnl0ZSgpICsgdHksIHN6KnRoaXMuX2J5dGVEYXRhLnJlYWRVbnNpZ25lZEJ5dGUoKSArIHR6KTtcblxuXHRcdFx0ayA9IDA7XG5cdFx0XHRmb3IgKGogPSAwOyBqIDwgdmVydExlbjsgaisrKSB7XG5cdFx0XHRcdGZ2ZXJ0aWNlc1trKytdID0gdHZlcnRpY2VzW3RoaXMuX3ZlcnRJbmRpY2VzW2pdKjNdO1xuXHRcdFx0XHRmdmVydGljZXNbaysrXSA9IHR2ZXJ0aWNlc1t0aGlzLl92ZXJ0SW5kaWNlc1tqXSozICsgMl07XG5cdFx0XHRcdGZ2ZXJ0aWNlc1trKytdID0gdHZlcnRpY2VzW3RoaXMuX3ZlcnRJbmRpY2VzW2pdKjMgKyAxXTtcblx0XHRcdH1cblxuXHRcdFx0c3ViR2VvbSA9IG5ldyBUcmlhbmdsZVN1Ykdlb21ldHJ5KHRydWUpO1xuXG5cdFx0XHRpZiAodGhpcy5fZmlyc3RTdWJHZW9tID09IG51bGwpXG5cdFx0XHRcdHRoaXMuX2ZpcnN0U3ViR2VvbSA9IHN1Ykdlb207XG5cblx0XHRcdGdlb21ldHJ5ID0gbmV3IEdlb21ldHJ5KCk7XG5cdFx0XHRnZW9tZXRyeS5hZGRTdWJHZW9tZXRyeShzdWJHZW9tKTtcblxuXHRcdFx0c3ViR2VvbS51cGRhdGVJbmRpY2VzKHRoaXMuX2luZGljZXMpO1xuXHRcdFx0c3ViR2VvbS51cGRhdGVQb3NpdGlvbnMoZnZlcnRpY2VzKTtcblx0XHRcdHN1Ykdlb20udXBkYXRlVVZzKHRoaXMuX2ZpbmFsVVYpO1xuXHRcdFx0c3ViR2VvbS52ZXJ0ZXhOb3JtYWxzO1xuXHRcdFx0c3ViR2VvbS52ZXJ0ZXhUYW5nZW50cztcblx0XHRcdHN1Ykdlb20uYXV0b0Rlcml2ZU5vcm1hbHMgPSBmYWxzZTtcblx0XHRcdHN1Ykdlb20uYXV0b0Rlcml2ZVRhbmdlbnRzID0gZmFsc2U7XG5cblx0XHRcdHZhciBjbGlwOlZlcnRleENsaXBOb2RlID0gdGhpcy5fY2xpcE5vZGVzW25hbWVdO1xuXG5cdFx0XHRpZiAoIWNsaXApIHtcblx0XHRcdFx0Ly8gSWYgYW5vdGhlciBzZXF1ZW5jZSB3YXMgcGFyc2VkIGJlZm9yZSB0aGlzIG9uZSwgc3RhcnRpbmdcblx0XHRcdFx0Ly8gYSBuZXcgc3RhdGUgbWVhbnMgdGhlIHByZXZpb3VzIG9uZSBpcyBjb21wbGV0ZSBhbmQgY2FuXG5cdFx0XHRcdC8vIGhlbmNlIGJlIGZpbmFsaXplZC5cblx0XHRcdFx0aWYgKHByZXZDbGlwKSB7XG5cdFx0XHRcdFx0dGhpcy5fcEZpbmFsaXplQXNzZXQocHJldkNsaXApO1xuXHRcdFx0XHRcdHRoaXMuX2FuaW1hdGlvblNldC5hZGRBbmltYXRpb24ocHJldkNsaXApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2xpcCA9IG5ldyBWZXJ0ZXhDbGlwTm9kZSgpO1xuXHRcdFx0XHRjbGlwLm5hbWUgPSBuYW1lO1xuXHRcdFx0XHRjbGlwLnN0aXRjaEZpbmFsRnJhbWUgPSB0cnVlO1xuXG5cdFx0XHRcdHRoaXMuX2NsaXBOb2Rlc1tuYW1lXSA9IGNsaXA7XG5cblx0XHRcdFx0cHJldkNsaXAgPSBjbGlwO1xuXHRcdFx0fVxuXHRcdFx0Y2xpcC5hZGRGcmFtZShnZW9tZXRyeSwgMTAwMC9NRDJQYXJzZXIuRlBTKTtcblx0XHR9XG5cblx0XHQvLyBGaW5hbGl6ZSB0aGUgbGFzdCBzdGF0ZVxuXHRcdGlmIChwcmV2Q2xpcCkge1xuXHRcdFx0dGhpcy5fcEZpbmFsaXplQXNzZXQocHJldkNsaXApO1xuXHRcdFx0dGhpcy5fYW5pbWF0aW9uU2V0LmFkZEFuaW1hdGlvbihwcmV2Q2xpcCk7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2UgdGhpcy5fcEZpbmFsaXplQXNzZXQoKSB0byBkZWNpZGUgbmFtZVxuXHRcdHRoaXMuX3BGaW5hbGl6ZUFzc2V0KHRoaXMuX2FuaW1hdGlvblNldCk7XG5cblx0XHR0aGlzLl9wYXJzZWRGcmFtZXMgPSB0cnVlO1xuXHR9XG5cblx0cHJpdmF0ZSByZWFkRnJhbWVOYW1lKCk6c3RyaW5nXG5cdHtcblx0XHR2YXIgbmFtZTpzdHJpbmcgPSBcIlwiO1xuXHRcdHZhciBrOm51bWJlciAvKnVpbnQqLyA9IDA7XG5cdFx0Zm9yICh2YXIgajpudW1iZXIgLyp1aW50Ki8gPSAwOyBqIDwgMTY7IGorKykge1xuXHRcdFx0dmFyIGNoOm51bWJlciAvKnVpbnQqLyA9IHRoaXMuX2J5dGVEYXRhLnJlYWRVbnNpZ25lZEJ5dGUoKTtcblxuXHRcdFx0aWYgKE1hdGguZmxvb3IoY2gpID4gMHgzOSAmJiBNYXRoLmZsb29yKGNoKSA8PSAweDdBICYmIGsgPT0gMClcblx0XHRcdFx0bmFtZSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoKTtcblxuXHRcdFx0aWYgKE1hdGguZmxvb3IoY2gpID49IDB4MzAgJiYgTWF0aC5mbG9vcihjaCkgPD0gMHgzOSlcblx0XHRcdFx0aysrO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufVxuXG5leHBvcnQgPSBNRDJQYXJzZXI7Il19