var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var RendererBase = require("awayjs-renderergl/lib/base/RendererBase");
/**
 * The DistanceRenderer class renders 32-bit depth information encoded as RGBA
 *
 * @class away.render.DistanceRenderer
 */
var DistanceRenderer = (function (_super) {
    __extends(DistanceRenderer, _super);
    /**
     * Creates a new DistanceRenderer object.
     * @param renderBlended Indicates whether semi-transparent objects should be rendered.
     * @param distanceBased Indicates whether the written depth value is distance-based or projected depth-based
     */
    function DistanceRenderer(stage) {
        if (stage === void 0) { stage = null; }
        _super.call(this, stage);
        this._iBackgroundR = 1;
        this._iBackgroundG = 1;
        this._iBackgroundB = 1;
    }
    DistanceRenderer.prototype._pGetRenderObject = function (renderable, renderObjectOwner) {
        return renderable._pool.getDistanceRenderObject(renderObjectOwner);
    };
    return DistanceRenderer;
})(RendererBase);
module.exports = DistanceRenderer;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9kaXN0YW5jZXJlbmRlcmVyLnRzIl0sIm5hbWVzIjpbIkRpc3RhbmNlUmVuZGVyZXIiLCJEaXN0YW5jZVJlbmRlcmVyLmNvbnN0cnVjdG9yIiwiRGlzdGFuY2VSZW5kZXJlci5fcEdldFJlbmRlck9iamVjdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBVUEsSUFBTyxZQUFZLFdBQWUseUNBQXlDLENBQUMsQ0FBQztBQU03RSxBQUtBOzs7O0dBREc7SUFDRyxnQkFBZ0I7SUFBU0EsVUFBekJBLGdCQUFnQkEsVUFBcUJBO0lBRTFDQTs7OztPQUlHQTtJQUNIQSxTQVBLQSxnQkFBZ0JBLENBT1RBLEtBQWtCQTtRQUFsQkMscUJBQWtCQSxHQUFsQkEsWUFBa0JBO1FBRTdCQSxrQkFBTUEsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFFYkEsSUFBSUEsQ0FBQ0EsYUFBYUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDdkJBLElBQUlBLENBQUNBLGFBQWFBLEdBQUdBLENBQUNBLENBQUNBO1FBQ3ZCQSxJQUFJQSxDQUFDQSxhQUFhQSxHQUFHQSxDQUFDQSxDQUFDQTtJQUV4QkEsQ0FBQ0E7SUFFTUQsNENBQWlCQSxHQUF4QkEsVUFBeUJBLFVBQXlCQSxFQUFFQSxpQkFBb0NBO1FBRXZGRSxNQUFNQSxDQUFDQSxVQUFVQSxDQUFDQSxLQUFLQSxDQUFDQSx1QkFBdUJBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsQ0FBQ0E7SUFDcEVBLENBQUNBO0lBQ0ZGLHVCQUFDQTtBQUFEQSxDQXJCQSxBQXFCQ0EsRUFyQjhCLFlBQVksRUFxQjFDO0FBRUQsQUFBMEIsaUJBQWpCLGdCQUFnQixDQUFDIiwiZmlsZSI6IkRpc3RhbmNlUmVuZGVyZXIuanMiLCJzb3VyY2VSb290IjoiLi4vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRleHR1cmVQcm94eUJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi90ZXh0dXJlcy9UZXh0dXJlUHJveHlCYXNlXCIpO1xuXG5pbXBvcnQgQ29udGV4dEdMQmxlbmRGYWN0b3JcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYmFzZS9Db250ZXh0R0xCbGVuZEZhY3RvclwiKTtcbmltcG9ydCBDb250ZXh0R0xDb21wYXJlTW9kZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL0NvbnRleHRHTENvbXBhcmVNb2RlXCIpO1xuaW1wb3J0IFN0YWdlXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvU3RhZ2VcIik7XG5cbmltcG9ydCBJUmVuZGVyT2JqZWN0T3duZXJcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvYmFzZS9JUmVuZGVyT2JqZWN0T3duZXJcIik7XG5pbXBvcnQgTWF0ZXJpYWxCYXNlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9tYXRlcmlhbHMvTWF0ZXJpYWxCYXNlXCIpO1xuaW1wb3J0IEVudGl0eUNvbGxlY3Rvclx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL3RyYXZlcnNlL0VudGl0eUNvbGxlY3RvclwiKTtcblxuaW1wb3J0IFJlbmRlcmVyQmFzZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYmFzZS9SZW5kZXJlckJhc2VcIik7XG5pbXBvcnQgUmVuZGVyT2JqZWN0QmFzZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2NvbXBpbGF0aW9uL1JlbmRlck9iamVjdEJhc2VcIik7XG5pbXBvcnQgUmVuZGVyT2JqZWN0UG9vbFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2NvbXBpbGF0aW9uL1JlbmRlck9iamVjdFBvb2xcIik7XG5pbXBvcnQgUmVuZGVyYWJsZUJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9wb29sL1JlbmRlcmFibGVCYXNlXCIpO1xuXG5cbi8qKlxuICogVGhlIERpc3RhbmNlUmVuZGVyZXIgY2xhc3MgcmVuZGVycyAzMi1iaXQgZGVwdGggaW5mb3JtYXRpb24gZW5jb2RlZCBhcyBSR0JBXG4gKlxuICogQGNsYXNzIGF3YXkucmVuZGVyLkRpc3RhbmNlUmVuZGVyZXJcbiAqL1xuY2xhc3MgRGlzdGFuY2VSZW5kZXJlciBleHRlbmRzIFJlbmRlcmVyQmFzZVxue1xuXHQvKipcblx0ICogQ3JlYXRlcyBhIG5ldyBEaXN0YW5jZVJlbmRlcmVyIG9iamVjdC5cblx0ICogQHBhcmFtIHJlbmRlckJsZW5kZWQgSW5kaWNhdGVzIHdoZXRoZXIgc2VtaS10cmFuc3BhcmVudCBvYmplY3RzIHNob3VsZCBiZSByZW5kZXJlZC5cblx0ICogQHBhcmFtIGRpc3RhbmNlQmFzZWQgSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHdyaXR0ZW4gZGVwdGggdmFsdWUgaXMgZGlzdGFuY2UtYmFzZWQgb3IgcHJvamVjdGVkIGRlcHRoLWJhc2VkXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihzdGFnZTpTdGFnZSA9IG51bGwpXG5cdHtcblx0XHRzdXBlcihzdGFnZSk7XG5cblx0XHR0aGlzLl9pQmFja2dyb3VuZFIgPSAxO1xuXHRcdHRoaXMuX2lCYWNrZ3JvdW5kRyA9IDE7XG5cdFx0dGhpcy5faUJhY2tncm91bmRCID0gMTtcblxuXHR9XG5cblx0cHVibGljIF9wR2V0UmVuZGVyT2JqZWN0KHJlbmRlcmFibGU6UmVuZGVyYWJsZUJhc2UsIHJlbmRlck9iamVjdE93bmVyOklSZW5kZXJPYmplY3RPd25lcik6UmVuZGVyT2JqZWN0QmFzZVxuXHR7XG5cdFx0cmV0dXJuIHJlbmRlcmFibGUuX3Bvb2wuZ2V0RGlzdGFuY2VSZW5kZXJPYmplY3QocmVuZGVyT2JqZWN0T3duZXIpO1xuXHR9XG59XG5cbmV4cG9ydCA9IERpc3RhbmNlUmVuZGVyZXI7Il19