var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var RendererBase = require("awayjs-renderergl/lib/base/RendererBase");
/**
 * The DistanceRenderer class renders 32-bit depth information encoded as RGBA
 *
 * @class away.render.DistanceRenderer
 */
var DistanceRenderer = (function (_super) {
    __extends(DistanceRenderer, _super);
    /**
     * Creates a new DistanceRenderer object.
     * @param renderBlended Indicates whether semi-transparent objects should be rendered.
     * @param distanceBased Indicates whether the written depth value is distance-based or projected depth-based
     */
    function DistanceRenderer(rendererPoolClass, stage) {
        if (rendererPoolClass === void 0) { rendererPoolClass = null; }
        if (stage === void 0) { stage = null; }
        _super.call(this, rendererPoolClass, stage);
        this._iBackgroundR = 1;
        this._iBackgroundG = 1;
        this._iBackgroundB = 1;
    }
    DistanceRenderer.prototype._pGetRenderObject = function (renderable, renderObjectOwner) {
        return renderable._pool.getDistanceRenderObject(renderObjectOwner);
    };
    return DistanceRenderer;
})(RendererBase);
module.exports = DistanceRenderer;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9EaXN0YW5jZVJlbmRlcmVyLnRzIl0sIm5hbWVzIjpbIkRpc3RhbmNlUmVuZGVyZXIiLCJEaXN0YW5jZVJlbmRlcmVyLmNvbnN0cnVjdG9yIiwiRGlzdGFuY2VSZW5kZXJlci5fcEdldFJlbmRlck9iamVjdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBVUEsSUFBTyxZQUFZLFdBQWUseUNBQXlDLENBQUMsQ0FBQztBQU83RSxBQUtBOzs7O0dBREc7SUFDRyxnQkFBZ0I7SUFBU0EsVUFBekJBLGdCQUFnQkEsVUFBcUJBO0lBRTFDQTs7OztPQUlHQTtJQUNIQSxTQVBLQSxnQkFBZ0JBLENBT1RBLGlCQUEyQ0EsRUFBRUEsS0FBa0JBO1FBQS9EQyxpQ0FBMkNBLEdBQTNDQSx3QkFBMkNBO1FBQUVBLHFCQUFrQkEsR0FBbEJBLFlBQWtCQTtRQUUxRUEsa0JBQU1BLGlCQUFpQkEsRUFBRUEsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFFaENBLElBQUlBLENBQUNBLGFBQWFBLEdBQUdBLENBQUNBLENBQUNBO1FBQ3ZCQSxJQUFJQSxDQUFDQSxhQUFhQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUN2QkEsSUFBSUEsQ0FBQ0EsYUFBYUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7SUFFeEJBLENBQUNBO0lBRU1ELDRDQUFpQkEsR0FBeEJBLFVBQXlCQSxVQUF5QkEsRUFBRUEsaUJBQW9DQTtRQUV2RkUsTUFBTUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsdUJBQXVCQSxDQUFDQSxpQkFBaUJBLENBQUNBLENBQUNBO0lBQ3BFQSxDQUFDQTtJQUNGRix1QkFBQ0E7QUFBREEsQ0FyQkEsQUFxQkNBLEVBckI4QixZQUFZLEVBcUIxQztBQUVELEFBQTBCLGlCQUFqQixnQkFBZ0IsQ0FBQyIsImZpbGUiOiJEaXN0YW5jZVJlbmRlcmVyLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZXh0dXJlQmFzZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvdGV4dHVyZXMvVGV4dHVyZUJhc2VcIik7XG5cbmltcG9ydCBDb250ZXh0R0xCbGVuZEZhY3Rvclx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL0NvbnRleHRHTEJsZW5kRmFjdG9yXCIpO1xuaW1wb3J0IENvbnRleHRHTENvbXBhcmVNb2RlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvQ29udGV4dEdMQ29tcGFyZU1vZGVcIik7XG5pbXBvcnQgU3RhZ2VcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYmFzZS9TdGFnZVwiKTtcblxuaW1wb3J0IElSZW5kZXJPYmplY3RPd25lclx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9iYXNlL0lSZW5kZXJPYmplY3RPd25lclwiKTtcbmltcG9ydCBNYXRlcmlhbEJhc2VcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL21hdGVyaWFscy9NYXRlcmlhbEJhc2VcIik7XG5pbXBvcnQgRW50aXR5Q29sbGVjdG9yXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvdHJhdmVyc2UvRW50aXR5Q29sbGVjdG9yXCIpO1xuXG5pbXBvcnQgUmVuZGVyZXJCYXNlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9iYXNlL1JlbmRlcmVyQmFzZVwiKTtcbmltcG9ydCBSZW5kZXJPYmplY3RCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vUmVuZGVyT2JqZWN0QmFzZVwiKTtcbmltcG9ydCBSZW5kZXJPYmplY3RQb29sXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vUmVuZGVyT2JqZWN0UG9vbFwiKTtcbmltcG9ydCBSZW5kZXJhYmxlQmFzZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL3Bvb2wvUmVuZGVyYWJsZUJhc2VcIik7XG5pbXBvcnQgSVJlbmRlcmVyUG9vbENsYXNzXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL3Bvb2wvSVJlbmRlcmVyUG9vbENsYXNzXCIpO1xuXG5cbi8qKlxuICogVGhlIERpc3RhbmNlUmVuZGVyZXIgY2xhc3MgcmVuZGVycyAzMi1iaXQgZGVwdGggaW5mb3JtYXRpb24gZW5jb2RlZCBhcyBSR0JBXG4gKlxuICogQGNsYXNzIGF3YXkucmVuZGVyLkRpc3RhbmNlUmVuZGVyZXJcbiAqL1xuY2xhc3MgRGlzdGFuY2VSZW5kZXJlciBleHRlbmRzIFJlbmRlcmVyQmFzZVxue1xuXHQvKipcblx0ICogQ3JlYXRlcyBhIG5ldyBEaXN0YW5jZVJlbmRlcmVyIG9iamVjdC5cblx0ICogQHBhcmFtIHJlbmRlckJsZW5kZWQgSW5kaWNhdGVzIHdoZXRoZXIgc2VtaS10cmFuc3BhcmVudCBvYmplY3RzIHNob3VsZCBiZSByZW5kZXJlZC5cblx0ICogQHBhcmFtIGRpc3RhbmNlQmFzZWQgSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHdyaXR0ZW4gZGVwdGggdmFsdWUgaXMgZGlzdGFuY2UtYmFzZWQgb3IgcHJvamVjdGVkIGRlcHRoLWJhc2VkXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihyZW5kZXJlclBvb2xDbGFzczpJUmVuZGVyZXJQb29sQ2xhc3MgPSBudWxsLCBzdGFnZTpTdGFnZSA9IG51bGwpXG5cdHtcblx0XHRzdXBlcihyZW5kZXJlclBvb2xDbGFzcywgc3RhZ2UpO1xuXG5cdFx0dGhpcy5faUJhY2tncm91bmRSID0gMTtcblx0XHR0aGlzLl9pQmFja2dyb3VuZEcgPSAxO1xuXHRcdHRoaXMuX2lCYWNrZ3JvdW5kQiA9IDE7XG5cblx0fVxuXG5cdHB1YmxpYyBfcEdldFJlbmRlck9iamVjdChyZW5kZXJhYmxlOlJlbmRlcmFibGVCYXNlLCByZW5kZXJPYmplY3RPd25lcjpJUmVuZGVyT2JqZWN0T3duZXIpOlJlbmRlck9iamVjdEJhc2Vcblx0e1xuXHRcdHJldHVybiByZW5kZXJhYmxlLl9wb29sLmdldERpc3RhbmNlUmVuZGVyT2JqZWN0KHJlbmRlck9iamVjdE93bmVyKTtcblx0fVxufVxuXG5leHBvcnQgPSBEaXN0YW5jZVJlbmRlcmVyOyJdfQ==