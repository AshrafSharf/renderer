var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
var ShaderCompilerHelper = require("awayjs-renderergl/lib/utils/ShaderCompilerHelper");
var RenderPassBase = require("awayjs-renderergl/lib/passes/RenderPassBase");
/**
 * DistancePass is a pass that writes distance values to a depth map as a 32-bit value exploded over the 4 texture channels.
 * This is used to render omnidirectional shadow maps.
 */
var DistancePass = (function (_super) {
    __extends(DistancePass, _super);
    /**
     * Creates a new DistancePass object.
     *
     * @param material The material to which this pass belongs.
     */
    function DistancePass(renderObject, renderObjectOwner, renderableClass, stage) {
        _super.call(this, renderObject, renderObjectOwner, renderableClass, stage);
        this._shader = new ShaderObjectBase(renderableClass, this, this._stage);
    }
    /**
     * Initializes the unchanging constant data for this material.
     */
    DistancePass.prototype._iInitConstantData = function (shaderObject) {
        _super.prototype._iInitConstantData.call(this, shaderObject);
        var index = this._fragmentConstantsIndex;
        var data = shaderObject.fragmentConstantData;
        data[index + 4] = 1.0 / 255.0;
        data[index + 5] = 1.0 / 255.0;
        data[index + 6] = 1.0 / 255.0;
        data[index + 7] = 0.0;
    };
    DistancePass.prototype._iIncludeDependencies = function (shaderObject) {
        _super.prototype._iIncludeDependencies.call(this, shaderObject);
        shaderObject.projectionDependencies++;
        shaderObject.viewDirDependencies++;
        if (shaderObject.alphaThreshold > 0)
            shaderObject.uvDependencies++;
        if (shaderObject.viewDirDependencies > 0)
            shaderObject.globalPosDependencies++;
    };
    /**
     * @inheritDoc
     */
    DistancePass.prototype._iGetFragmentCode = function (shaderObject, registerCache, sharedRegisters) {
        var code;
        var targetReg = sharedRegisters.shadedTarget;
        var diffuseInputReg = registerCache.getFreeTextureReg();
        var dataReg1 = registerCache.getFreeFragmentConstant();
        var dataReg2 = registerCache.getFreeFragmentConstant();
        this._fragmentConstantsIndex = dataReg1.index * 4;
        var temp1 = registerCache.getFreeFragmentVectorTemp();
        registerCache.addFragmentTempUsages(temp1, 1);
        var temp2 = registerCache.getFreeFragmentVectorTemp();
        registerCache.addFragmentTempUsages(temp2, 1);
        // squared distance to view
        code = "dp3 " + temp1 + ".z, " + sharedRegisters.viewDirVarying + ".xyz, " + sharedRegisters.viewDirVarying + ".xyz\n" + "mul " + temp1 + ", " + dataReg1 + ", " + temp1 + ".z\n" + "frc " + temp1 + ", " + temp1 + "\n" + "mul " + temp2 + ", " + temp1 + ".yzww, " + dataReg2 + "\n";
        if (shaderObject.alphaThreshold > 0) {
            diffuseInputReg = registerCache.getFreeTextureReg();
            this._texturesIndex = diffuseInputReg.index;
            var albedo = registerCache.getFreeFragmentVectorTemp();
            code += ShaderCompilerHelper.getTex2DSampleCode(albedo, sharedRegisters, diffuseInputReg, shaderObject.texture, shaderObject.useSmoothTextures, shaderObject.repeatTextures, shaderObject.useMipmapping);
            var cutOffReg = registerCache.getFreeFragmentConstant();
            code += "sub " + albedo + ".w, " + albedo + ".w, " + cutOffReg + ".x\n" + "kil " + albedo + ".w\n";
        }
        code += "sub " + targetReg + ", " + temp1 + ", " + temp2 + "\n";
        return code;
    };
    /**
     * @inheritDoc
     */
    DistancePass.prototype._iActivate = function (camera) {
        _super.prototype._iActivate.call(this, camera);
        var context = this._stage.context;
        var f = camera.projection.far;
        f = 1 / (2 * f * f);
        // sqrt(f*f+f*f) is largest possible distance for any frustum, so we need to divide by it. Rarely a tight fit, but with 32 bits precision, it's enough.
        var index = this._fragmentConstantsIndex;
        var data = this._shader.fragmentConstantData;
        data[index] = 1.0 * f;
        data[index + 1] = 255.0 * f;
        data[index + 2] = 65025.0 * f;
        data[index + 3] = 16581375.0 * f;
        if (this._shader.alphaThreshold > 0) {
            this._stage.activateTexture(this._texturesIndex, this._shader.texture, this._shader.repeatTextures, this._shader.useSmoothTextures, this._shader.useMipmapping);
            data[index + 8] = this._shader.alphaThreshold;
        }
    };
    return DistancePass;
})(RenderPassBase);
module.exports = DistancePass;

//# sourceMappingURL=data:application/json;base64,