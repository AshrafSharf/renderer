var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var ContextGLCompareMode = require("awayjs-stagegl/lib/base/ContextGLCompareMode");
var RenderPassBase = require("awayjs-renderergl/lib/passes/RenderPassBase");
var ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
var ShaderCompilerHelper = require("awayjs-renderergl/lib/utils/ShaderCompilerHelper");
/**
 * SkyboxPass forms an abstract base class for the default shaded materials provided by Stage,
 * using material methods to define their appearance.
 */
var SkyboxPass = (function (_super) {
    __extends(SkyboxPass, _super);
    function SkyboxPass(renderObject, renderObjectOwner, renderableClass, stage) {
        _super.call(this, renderObject, renderObjectOwner, renderableClass, stage);
        this._skybox = renderObjectOwner;
        this._shader = new ShaderObjectBase(renderableClass, this, this._stage);
    }
    /**
    * @inheritDoc
    */
    SkyboxPass.prototype._iGetFragmentCode = function (shaderObject, registerCache, sharedRegisters) {
        //var cubeMapReg:ShaderRegisterElement = registerCache.getFreeTextureReg();
        //this._texturesIndex = cubeMapReg.index;
        //ShaderCompilerHelper.getTexCubeSampleCode(sharedRegisters.shadedTarget, cubeMapReg, this._cubeTexture, shaderObject.useSmoothTextures, shaderObject.useMipmapping);
        var mip = ",mipnone";
        if (shaderObject.useMipmapping)
            mip = ",miplinear";
        return "tex ft0, v0, fs0 <cube," + ShaderCompilerHelper.getFormatStringForTexture(this._skybox.cubeMap) + "linear,clamp" + mip + ">\n";
    };
    /**
     * @inheritDoc
     */
    SkyboxPass.prototype._iActivate = function (camera) {
        _super.prototype._iActivate.call(this, camera);
        var context = this._stage.context;
        context.setDepthTest(false, ContextGLCompareMode.LESS);
        this._stage.activateCubeTexture(0, this._skybox.cubeMap, this._shader.useSmoothTextures, this._shader.useMipmapping);
    };
    return SkyboxPass;
})(RenderPassBase);
module.exports = SkyboxPass;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9wYXNzZXMvU2t5Ym94UGFzcy50cyJdLCJuYW1lcyI6WyJTa3lib3hQYXNzIiwiU2t5Ym94UGFzcy5jb25zdHJ1Y3RvciIsIlNreWJveFBhc3MuX2lHZXRGcmFnbWVudENvZGUiLCJTa3lib3hQYXNzLl9pQWN0aXZhdGUiXSwibWFwcGluZ3MiOiI7Ozs7OztBQVVBLElBQU8sb0JBQW9CLFdBQWEsOENBQThDLENBQUMsQ0FBQztBQVN4RixJQUFPLGNBQWMsV0FBYyw2Q0FBNkMsQ0FBQyxDQUFDO0FBR2xGLElBQU8sZ0JBQWdCLFdBQWMsb0RBQW9ELENBQUMsQ0FBQztBQUkzRixJQUFPLG9CQUFvQixXQUFhLGtEQUFrRCxDQUFDLENBQUM7QUFHNUYsQUFJQTs7O0dBREc7SUFDRyxVQUFVO0lBQVNBLFVBQW5CQSxVQUFVQSxVQUF1QkE7SUFJdENBLFNBSktBLFVBQVVBLENBSUhBLFlBQTZCQSxFQUFFQSxpQkFBb0NBLEVBQUVBLGVBQWdDQSxFQUFFQSxLQUFXQTtRQUU3SEMsa0JBQU1BLFlBQVlBLEVBQUVBLGlCQUFpQkEsRUFBRUEsZUFBZUEsRUFBRUEsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFFL0RBLElBQUlBLENBQUNBLE9BQU9BLEdBQVlBLGlCQUFpQkEsQ0FBQ0E7UUFFMUNBLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLElBQUlBLGdCQUFnQkEsQ0FBQ0EsZUFBZUEsRUFBRUEsSUFBSUEsRUFBRUEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7SUFDekVBLENBQUNBO0lBR0REOztNQUVFQTtJQUNLQSxzQ0FBaUJBLEdBQXhCQSxVQUF5QkEsWUFBNkJBLEVBQUVBLGFBQWlDQSxFQUFFQSxlQUFrQ0E7UUFFNUhFLDJFQUEyRUE7UUFFM0VBLEFBSUFBLHlDQUp5Q0E7UUFFekNBLHFLQUFxS0E7WUFFaktBLEdBQUdBLEdBQVVBLFVBQVVBLENBQUNBO1FBRTVCQSxFQUFFQSxDQUFDQSxDQUFDQSxZQUFZQSxDQUFDQSxhQUFhQSxDQUFDQTtZQUM5QkEsR0FBR0EsR0FBR0EsWUFBWUEsQ0FBQ0E7UUFFcEJBLE1BQU1BLENBQUNBLHlCQUF5QkEsR0FBR0Esb0JBQW9CQSxDQUFDQSx5QkFBeUJBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLEdBQUdBLGNBQWNBLEdBQUdBLEdBQUdBLEdBQUdBLEtBQUtBLENBQUNBO0lBQ3hJQSxDQUFDQTtJQUVERjs7T0FFR0E7SUFDSUEsK0JBQVVBLEdBQWpCQSxVQUFrQkEsTUFBYUE7UUFFOUJHLGdCQUFLQSxDQUFDQSxVQUFVQSxZQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUV6QkEsSUFBSUEsT0FBT0EsR0FBY0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsT0FBT0EsQ0FBQ0E7UUFDN0NBLE9BQU9BLENBQUNBLFlBQVlBLENBQUNBLEtBQUtBLEVBQUVBLG9CQUFvQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDdkRBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLG1CQUFtQkEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsT0FBT0EsRUFBRUEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsaUJBQWlCQSxFQUFFQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxhQUFhQSxDQUFDQSxDQUFDQTtJQUN0SEEsQ0FBQ0E7SUFDRkgsaUJBQUNBO0FBQURBLENBNUNBLEFBNENDQSxFQTVDd0IsY0FBYyxFQTRDdEM7QUFFRCxBQUFvQixpQkFBWCxVQUFVLENBQUMiLCJmaWxlIjoicGFzc2VzL1NreWJveFBhc3MuanMiLCJzb3VyY2VSb290IjoiLi4vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJsZW5kTW9kZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvYmFzZS9CbGVuZE1vZGVcIik7XHJcbmltcG9ydCBNYXRyaXhcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9NYXRyaXhcIik7XHJcbmltcG9ydCBNYXRyaXgzRFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9nZW9tL01hdHJpeDNEXCIpO1xyXG5pbXBvcnQgTWF0cml4M0RVdGlsc1x0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2dlb20vTWF0cml4M0RVdGlsc1wiKTtcclxuaW1wb3J0IFRleHR1cmUyREJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi90ZXh0dXJlcy9UZXh0dXJlMkRCYXNlXCIpO1xyXG5cclxuaW1wb3J0IENhbWVyYVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9lbnRpdGllcy9DYW1lcmFcIik7XHJcbmltcG9ydCBTa3lib3hcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvZW50aXRpZXMvU2t5Ym94XCIpO1xyXG5pbXBvcnQgSVJlbmRlck9iamVjdE93bmVyXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2Jhc2UvSVJlbmRlck9iamVjdE93bmVyXCIpO1xyXG5cclxuaW1wb3J0IENvbnRleHRHTENvbXBhcmVNb2RlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvQ29udGV4dEdMQ29tcGFyZU1vZGVcIik7XHJcbmltcG9ydCBDb250ZXh0R0xQcm9ncmFtVHlwZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL0NvbnRleHRHTFByb2dyYW1UeXBlXCIpO1xyXG5pbXBvcnQgQ29udGV4dEdMTWlwRmlsdGVyXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvQ29udGV4dEdMTWlwRmlsdGVyXCIpO1xyXG5pbXBvcnQgQ29udGV4dEdMVGV4dHVyZUZpbHRlclx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYmFzZS9Db250ZXh0R0xUZXh0dXJlRmlsdGVyXCIpO1xyXG5pbXBvcnQgQ29udGV4dEdMV3JhcE1vZGVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYmFzZS9Db250ZXh0R0xXcmFwTW9kZVwiKTtcclxuaW1wb3J0IElDb250ZXh0R0xcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvSUNvbnRleHRHTFwiKTtcclxuaW1wb3J0IFN0YWdlXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvU3RhZ2VcIik7XHJcblxyXG5pbXBvcnQgUmVuZGVyYWJsZUJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9wb29sL1JlbmRlcmFibGVCYXNlXCIpO1xyXG5pbXBvcnQgUmVuZGVyUGFzc0Jhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9wYXNzZXMvUmVuZGVyUGFzc0Jhc2VcIik7XHJcbmltcG9ydCBSZW5kZXJPYmplY3RCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vUmVuZGVyT2JqZWN0QmFzZVwiKTtcclxuaW1wb3J0IFJlbmRlck9iamVjdFBvb2xcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9SZW5kZXJPYmplY3RQb29sXCIpO1xyXG5pbXBvcnQgU2hhZGVyT2JqZWN0QmFzZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2NvbXBpbGF0aW9uL1NoYWRlck9iamVjdEJhc2VcIik7XHJcbmltcG9ydCBTaGFkZXJSZWdpc3RlckNhY2hlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2NvbXBpbGF0aW9uL1NoYWRlclJlZ2lzdGVyQ2FjaGVcIik7XHJcbmltcG9ydCBTaGFkZXJSZWdpc3RlckRhdGFcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vU2hhZGVyUmVnaXN0ZXJEYXRhXCIpO1xyXG5pbXBvcnQgU2hhZGVyUmVnaXN0ZXJFbGVtZW50XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9TaGFkZXJSZWdpc3RlckVsZW1lbnRcIik7XHJcbmltcG9ydCBTaGFkZXJDb21waWxlckhlbHBlclx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi91dGlscy9TaGFkZXJDb21waWxlckhlbHBlclwiKTtcclxuaW1wb3J0IElSZW5kZXJhYmxlQ2xhc3NcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9wb29sL0lSZW5kZXJhYmxlQ2xhc3NcIik7XHJcblxyXG4vKipcclxuICogU2t5Ym94UGFzcyBmb3JtcyBhbiBhYnN0cmFjdCBiYXNlIGNsYXNzIGZvciB0aGUgZGVmYXVsdCBzaGFkZWQgbWF0ZXJpYWxzIHByb3ZpZGVkIGJ5IFN0YWdlLFxyXG4gKiB1c2luZyBtYXRlcmlhbCBtZXRob2RzIHRvIGRlZmluZSB0aGVpciBhcHBlYXJhbmNlLlxyXG4gKi9cclxuY2xhc3MgU2t5Ym94UGFzcyBleHRlbmRzIFJlbmRlclBhc3NCYXNlXHJcbntcclxuXHRwdWJsaWMgX3NreWJveDpTa3lib3g7XHJcblxyXG5cdGNvbnN0cnVjdG9yKHJlbmRlck9iamVjdDpSZW5kZXJPYmplY3RCYXNlLCByZW5kZXJPYmplY3RPd25lcjpJUmVuZGVyT2JqZWN0T3duZXIsIHJlbmRlcmFibGVDbGFzczpJUmVuZGVyYWJsZUNsYXNzLCBzdGFnZTpTdGFnZSlcclxuXHR7XHJcblx0XHRzdXBlcihyZW5kZXJPYmplY3QsIHJlbmRlck9iamVjdE93bmVyLCByZW5kZXJhYmxlQ2xhc3MsIHN0YWdlKTtcclxuXHJcblx0XHR0aGlzLl9za3lib3ggPSA8U2t5Ym94PiByZW5kZXJPYmplY3RPd25lcjtcclxuXHJcblx0XHR0aGlzLl9zaGFkZXIgPSBuZXcgU2hhZGVyT2JqZWN0QmFzZShyZW5kZXJhYmxlQ2xhc3MsIHRoaXMsIHRoaXMuX3N0YWdlKTtcclxuXHR9XHJcblxyXG5cclxuXHQvKipcclxuXHQqIEBpbmhlcml0RG9jXHJcblx0Ki9cclxuXHRwdWJsaWMgX2lHZXRGcmFnbWVudENvZGUoc2hhZGVyT2JqZWN0OlNoYWRlck9iamVjdEJhc2UsIHJlZ2lzdGVyQ2FjaGU6U2hhZGVyUmVnaXN0ZXJDYWNoZSwgc2hhcmVkUmVnaXN0ZXJzOlNoYWRlclJlZ2lzdGVyRGF0YSk6c3RyaW5nXHJcblx0e1xyXG5cdFx0Ly92YXIgY3ViZU1hcFJlZzpTaGFkZXJSZWdpc3RlckVsZW1lbnQgPSByZWdpc3RlckNhY2hlLmdldEZyZWVUZXh0dXJlUmVnKCk7XHJcblxyXG5cdFx0Ly90aGlzLl90ZXh0dXJlc0luZGV4ID0gY3ViZU1hcFJlZy5pbmRleDtcclxuXHJcblx0XHQvL1NoYWRlckNvbXBpbGVySGVscGVyLmdldFRleEN1YmVTYW1wbGVDb2RlKHNoYXJlZFJlZ2lzdGVycy5zaGFkZWRUYXJnZXQsIGN1YmVNYXBSZWcsIHRoaXMuX2N1YmVUZXh0dXJlLCBzaGFkZXJPYmplY3QudXNlU21vb3RoVGV4dHVyZXMsIHNoYWRlck9iamVjdC51c2VNaXBtYXBwaW5nKTtcclxuXHJcblx0XHR2YXIgbWlwOnN0cmluZyA9IFwiLG1pcG5vbmVcIjtcclxuXHJcblx0XHRpZiAoc2hhZGVyT2JqZWN0LnVzZU1pcG1hcHBpbmcpXHJcblx0XHRcdG1pcCA9IFwiLG1pcGxpbmVhclwiO1xyXG5cclxuXHRcdHJldHVybiBcInRleCBmdDAsIHYwLCBmczAgPGN1YmUsXCIgKyBTaGFkZXJDb21waWxlckhlbHBlci5nZXRGb3JtYXRTdHJpbmdGb3JUZXh0dXJlKHRoaXMuX3NreWJveC5jdWJlTWFwKSArIFwibGluZWFyLGNsYW1wXCIgKyBtaXAgKyBcIj5cXG5cIjtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0RG9jXHJcblx0ICovXHJcblx0cHVibGljIF9pQWN0aXZhdGUoY2FtZXJhOkNhbWVyYSlcclxuXHR7XHJcblx0XHRzdXBlci5faUFjdGl2YXRlKGNhbWVyYSk7XHJcblxyXG5cdFx0dmFyIGNvbnRleHQ6SUNvbnRleHRHTCA9IHRoaXMuX3N0YWdlLmNvbnRleHQ7XHJcblx0XHRjb250ZXh0LnNldERlcHRoVGVzdChmYWxzZSwgQ29udGV4dEdMQ29tcGFyZU1vZGUuTEVTUyk7XHJcblx0XHR0aGlzLl9zdGFnZS5hY3RpdmF0ZUN1YmVUZXh0dXJlKDAsIHRoaXMuX3NreWJveC5jdWJlTWFwLCB0aGlzLl9zaGFkZXIudXNlU21vb3RoVGV4dHVyZXMsIHRoaXMuX3NoYWRlci51c2VNaXBtYXBwaW5nKTtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCA9IFNreWJveFBhc3M7Il19