var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var ContextGLCompareMode = require("awayjs-stagegl/lib/base/ContextGLCompareMode");
var RenderPassBase = require("awayjs-renderergl/lib/passes/RenderPassBase");
var ShaderObjectBase = require("awayjs-renderergl/lib/compilation/ShaderObjectBase");
var ShaderCompilerHelper = require("awayjs-renderergl/lib/utils/ShaderCompilerHelper");
/**
 * SkyboxPass forms an abstract base class for the default shaded materials provided by Stage,
 * using material methods to define their appearance.
 */
var SkyboxPass = (function (_super) {
    __extends(SkyboxPass, _super);
    function SkyboxPass(renderObject, renderObjectOwner, renderableClass, stage) {
        _super.call(this, renderObject, renderObjectOwner, renderableClass, stage);
        this._skybox = renderObjectOwner;
        this._shader = new ShaderObjectBase(renderableClass, this, this._stage);
    }
    /**
    * @inheritDoc
    */
    SkyboxPass.prototype._iGetFragmentCode = function (shaderObject, registerCache, sharedRegisters) {
        //var cubeMapReg:ShaderRegisterElement = registerCache.getFreeTextureReg();
        //this._texturesIndex = cubeMapReg.index;
        //ShaderCompilerHelper.getTexCubeSampleCode(sharedRegisters.shadedTarget, cubeMapReg, this._cubeTexture, shaderObject.useSmoothTextures, shaderObject.useMipmapping);
        var mip = ",mipnone";
        if (shaderObject.useMipmapping)
            mip = ",miplinear";
        return "tex ft0, v0, fs0 <cube," + ShaderCompilerHelper.getFormatStringForTexture(this._skybox.cubeMap) + "linear,clamp" + mip + ">\n";
    };
    /**
     * @inheritDoc
     */
    SkyboxPass.prototype._iActivate = function (camera) {
        _super.prototype._iActivate.call(this, camera);
        var context = this._stage.context;
        context.setDepthTest(false, ContextGLCompareMode.LESS);
        this._stage.activateCubeTexture(0, this._skybox.cubeMap, this._shader.useSmoothTextures, this._shader.useMipmapping);
    };
    return SkyboxPass;
})(RenderPassBase);
module.exports = SkyboxPass;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9wYXNzZXMvU2t5Ym94UGFzcy50cyJdLCJuYW1lcyI6WyJTa3lib3hQYXNzIiwiU2t5Ym94UGFzcy5jb25zdHJ1Y3RvciIsIlNreWJveFBhc3MuX2lHZXRGcmFnbWVudENvZGUiLCJTa3lib3hQYXNzLl9pQWN0aXZhdGUiXSwibWFwcGluZ3MiOiI7Ozs7OztBQVVBLElBQU8sb0JBQW9CLFdBQWEsOENBQThDLENBQUMsQ0FBQztBQVN4RixJQUFPLGNBQWMsV0FBYyw2Q0FBNkMsQ0FBQyxDQUFDO0FBR2xGLElBQU8sZ0JBQWdCLFdBQWMsb0RBQW9ELENBQUMsQ0FBQztBQUkzRixJQUFPLG9CQUFvQixXQUFhLGtEQUFrRCxDQUFDLENBQUM7QUFHNUYsQUFJQTs7O0dBREc7SUFDRyxVQUFVO0lBQVNBLFVBQW5CQSxVQUFVQSxVQUF1QkE7SUFJdENBLFNBSktBLFVBQVVBLENBSUhBLFlBQTZCQSxFQUFFQSxpQkFBb0NBLEVBQUVBLGVBQWdDQSxFQUFFQSxLQUFXQTtRQUU3SEMsa0JBQU1BLFlBQVlBLEVBQUVBLGlCQUFpQkEsRUFBRUEsZUFBZUEsRUFBRUEsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFFL0RBLElBQUlBLENBQUNBLE9BQU9BLEdBQVlBLGlCQUFpQkEsQ0FBQ0E7UUFFMUNBLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLElBQUlBLGdCQUFnQkEsQ0FBQ0EsZUFBZUEsRUFBRUEsSUFBSUEsRUFBRUEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7SUFDekVBLENBQUNBO0lBR0REOztNQUVFQTtJQUNLQSxzQ0FBaUJBLEdBQXhCQSxVQUF5QkEsWUFBNkJBLEVBQUVBLGFBQWlDQSxFQUFFQSxlQUFrQ0E7UUFFNUhFLDJFQUEyRUE7UUFFM0VBLEFBSUFBLHlDQUp5Q0E7UUFFekNBLHFLQUFxS0E7WUFFaktBLEdBQUdBLEdBQVVBLFVBQVVBLENBQUNBO1FBRTVCQSxFQUFFQSxDQUFDQSxDQUFDQSxZQUFZQSxDQUFDQSxhQUFhQSxDQUFDQTtZQUM5QkEsR0FBR0EsR0FBR0EsWUFBWUEsQ0FBQ0E7UUFFcEJBLE1BQU1BLENBQUNBLHlCQUF5QkEsR0FBR0Esb0JBQW9CQSxDQUFDQSx5QkFBeUJBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLEdBQUdBLGNBQWNBLEdBQUdBLEdBQUdBLEdBQUdBLEtBQUtBLENBQUNBO0lBQ3hJQSxDQUFDQTtJQUVERjs7T0FFR0E7SUFDSUEsK0JBQVVBLEdBQWpCQSxVQUFrQkEsTUFBYUE7UUFFOUJHLGdCQUFLQSxDQUFDQSxVQUFVQSxZQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUV6QkEsSUFBSUEsT0FBT0EsR0FBY0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsT0FBT0EsQ0FBQ0E7UUFDN0NBLE9BQU9BLENBQUNBLFlBQVlBLENBQUNBLEtBQUtBLEVBQUVBLG9CQUFvQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDdkRBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLG1CQUFtQkEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsT0FBT0EsRUFBRUEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsaUJBQWlCQSxFQUFFQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxhQUFhQSxDQUFDQSxDQUFDQTtJQUN0SEEsQ0FBQ0E7SUFDRkgsaUJBQUNBO0FBQURBLENBNUNBLEFBNENDQSxFQTVDd0IsY0FBYyxFQTRDdEM7QUFFRCxBQUFvQixpQkFBWCxVQUFVLENBQUMiLCJmaWxlIjoicGFzc2VzL1NreWJveFBhc3MuanMiLCJzb3VyY2VSb290IjoiLi4vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJsZW5kTW9kZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZGF0YS9CbGVuZE1vZGVcIik7XG5pbXBvcnQgTWF0cml4XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2dlb20vTWF0cml4XCIpO1xuaW1wb3J0IE1hdHJpeDNEXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2dlb20vTWF0cml4M0RcIik7XG5pbXBvcnQgTWF0cml4M0RVdGlsc1x0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2dlb20vTWF0cml4M0RVdGlsc1wiKTtcbmltcG9ydCBUZXh0dXJlMkRCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvdGV4dHVyZXMvVGV4dHVyZTJEQmFzZVwiKTtcblxuaW1wb3J0IENhbWVyYVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9lbnRpdGllcy9DYW1lcmFcIik7XG5pbXBvcnQgU2t5Ym94XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2VudGl0aWVzL1NreWJveFwiKTtcbmltcG9ydCBJUmVuZGVyT2JqZWN0T3duZXJcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvYmFzZS9JUmVuZGVyT2JqZWN0T3duZXJcIik7XG5cbmltcG9ydCBDb250ZXh0R0xDb21wYXJlTW9kZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL0NvbnRleHRHTENvbXBhcmVNb2RlXCIpO1xuaW1wb3J0IENvbnRleHRHTFByb2dyYW1UeXBlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvQ29udGV4dEdMUHJvZ3JhbVR5cGVcIik7XG5pbXBvcnQgQ29udGV4dEdMTWlwRmlsdGVyXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvQ29udGV4dEdMTWlwRmlsdGVyXCIpO1xuaW1wb3J0IENvbnRleHRHTFRleHR1cmVGaWx0ZXJcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvQ29udGV4dEdMVGV4dHVyZUZpbHRlclwiKTtcbmltcG9ydCBDb250ZXh0R0xXcmFwTW9kZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL0NvbnRleHRHTFdyYXBNb2RlXCIpO1xuaW1wb3J0IElDb250ZXh0R0xcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvSUNvbnRleHRHTFwiKTtcbmltcG9ydCBTdGFnZVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL1N0YWdlXCIpO1xuXG5pbXBvcnQgUmVuZGVyYWJsZUJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9wb29sL1JlbmRlcmFibGVCYXNlXCIpO1xuaW1wb3J0IFJlbmRlclBhc3NCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvcGFzc2VzL1JlbmRlclBhc3NCYXNlXCIpO1xuaW1wb3J0IFJlbmRlck9iamVjdEJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9SZW5kZXJPYmplY3RCYXNlXCIpO1xuaW1wb3J0IFJlbmRlck9iamVjdFBvb2xcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9SZW5kZXJPYmplY3RQb29sXCIpO1xuaW1wb3J0IFNoYWRlck9iamVjdEJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9TaGFkZXJPYmplY3RCYXNlXCIpO1xuaW1wb3J0IFNoYWRlclJlZ2lzdGVyQ2FjaGVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vU2hhZGVyUmVnaXN0ZXJDYWNoZVwiKTtcbmltcG9ydCBTaGFkZXJSZWdpc3RlckRhdGFcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vU2hhZGVyUmVnaXN0ZXJEYXRhXCIpO1xuaW1wb3J0IFNoYWRlclJlZ2lzdGVyRWxlbWVudFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vU2hhZGVyUmVnaXN0ZXJFbGVtZW50XCIpO1xuaW1wb3J0IFNoYWRlckNvbXBpbGVySGVscGVyXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL3V0aWxzL1NoYWRlckNvbXBpbGVySGVscGVyXCIpO1xuaW1wb3J0IElSZW5kZXJhYmxlQ2xhc3NcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9wb29sL0lSZW5kZXJhYmxlQ2xhc3NcIik7XG5cbi8qKlxuICogU2t5Ym94UGFzcyBmb3JtcyBhbiBhYnN0cmFjdCBiYXNlIGNsYXNzIGZvciB0aGUgZGVmYXVsdCBzaGFkZWQgbWF0ZXJpYWxzIHByb3ZpZGVkIGJ5IFN0YWdlLFxuICogdXNpbmcgbWF0ZXJpYWwgbWV0aG9kcyB0byBkZWZpbmUgdGhlaXIgYXBwZWFyYW5jZS5cbiAqL1xuY2xhc3MgU2t5Ym94UGFzcyBleHRlbmRzIFJlbmRlclBhc3NCYXNlXG57XG5cdHB1YmxpYyBfc2t5Ym94OlNreWJveDtcblxuXHRjb25zdHJ1Y3RvcihyZW5kZXJPYmplY3Q6UmVuZGVyT2JqZWN0QmFzZSwgcmVuZGVyT2JqZWN0T3duZXI6SVJlbmRlck9iamVjdE93bmVyLCByZW5kZXJhYmxlQ2xhc3M6SVJlbmRlcmFibGVDbGFzcywgc3RhZ2U6U3RhZ2UpXG5cdHtcblx0XHRzdXBlcihyZW5kZXJPYmplY3QsIHJlbmRlck9iamVjdE93bmVyLCByZW5kZXJhYmxlQ2xhc3MsIHN0YWdlKTtcblxuXHRcdHRoaXMuX3NreWJveCA9IDxTa3lib3g+IHJlbmRlck9iamVjdE93bmVyO1xuXG5cdFx0dGhpcy5fc2hhZGVyID0gbmV3IFNoYWRlck9iamVjdEJhc2UocmVuZGVyYWJsZUNsYXNzLCB0aGlzLCB0aGlzLl9zdGFnZSk7XG5cdH1cblxuXG5cdC8qKlxuXHQqIEBpbmhlcml0RG9jXG5cdCovXG5cdHB1YmxpYyBfaUdldEZyYWdtZW50Q29kZShzaGFkZXJPYmplY3Q6U2hhZGVyT2JqZWN0QmFzZSwgcmVnaXN0ZXJDYWNoZTpTaGFkZXJSZWdpc3RlckNhY2hlLCBzaGFyZWRSZWdpc3RlcnM6U2hhZGVyUmVnaXN0ZXJEYXRhKTpzdHJpbmdcblx0e1xuXHRcdC8vdmFyIGN1YmVNYXBSZWc6U2hhZGVyUmVnaXN0ZXJFbGVtZW50ID0gcmVnaXN0ZXJDYWNoZS5nZXRGcmVlVGV4dHVyZVJlZygpO1xuXG5cdFx0Ly90aGlzLl90ZXh0dXJlc0luZGV4ID0gY3ViZU1hcFJlZy5pbmRleDtcblxuXHRcdC8vU2hhZGVyQ29tcGlsZXJIZWxwZXIuZ2V0VGV4Q3ViZVNhbXBsZUNvZGUoc2hhcmVkUmVnaXN0ZXJzLnNoYWRlZFRhcmdldCwgY3ViZU1hcFJlZywgdGhpcy5fY3ViZVRleHR1cmUsIHNoYWRlck9iamVjdC51c2VTbW9vdGhUZXh0dXJlcywgc2hhZGVyT2JqZWN0LnVzZU1pcG1hcHBpbmcpO1xuXG5cdFx0dmFyIG1pcDpzdHJpbmcgPSBcIixtaXBub25lXCI7XG5cblx0XHRpZiAoc2hhZGVyT2JqZWN0LnVzZU1pcG1hcHBpbmcpXG5cdFx0XHRtaXAgPSBcIixtaXBsaW5lYXJcIjtcblxuXHRcdHJldHVybiBcInRleCBmdDAsIHYwLCBmczAgPGN1YmUsXCIgKyBTaGFkZXJDb21waWxlckhlbHBlci5nZXRGb3JtYXRTdHJpbmdGb3JUZXh0dXJlKHRoaXMuX3NreWJveC5jdWJlTWFwKSArIFwibGluZWFyLGNsYW1wXCIgKyBtaXAgKyBcIj5cXG5cIjtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIF9pQWN0aXZhdGUoY2FtZXJhOkNhbWVyYSlcblx0e1xuXHRcdHN1cGVyLl9pQWN0aXZhdGUoY2FtZXJhKTtcblxuXHRcdHZhciBjb250ZXh0OklDb250ZXh0R0wgPSB0aGlzLl9zdGFnZS5jb250ZXh0O1xuXHRcdGNvbnRleHQuc2V0RGVwdGhUZXN0KGZhbHNlLCBDb250ZXh0R0xDb21wYXJlTW9kZS5MRVNTKTtcblx0XHR0aGlzLl9zdGFnZS5hY3RpdmF0ZUN1YmVUZXh0dXJlKDAsIHRoaXMuX3NreWJveC5jdWJlTWFwLCB0aGlzLl9zaGFkZXIudXNlU21vb3RoVGV4dHVyZXMsIHRoaXMuX3NoYWRlci51c2VNaXBtYXBwaW5nKTtcblx0fVxufVxuXG5leHBvcnQgPSBTa3lib3hQYXNzOyJdfQ==