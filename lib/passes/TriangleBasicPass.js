var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var ContextGLMipFilter = require("awayjs-stagegl/lib/base/ContextGLMipFilter");
var ContextGLTextureFilter = require("awayjs-stagegl/lib/base/ContextGLTextureFilter");
var ContextGLWrapMode = require("awayjs-stagegl/lib/base/ContextGLWrapMode");
var MaterialPassGLBase = require("awayjs-renderergl/lib/passes/MaterialPassGLBase");
var ShaderCompilerHelper = require("awayjs-renderergl/lib/utils/ShaderCompilerHelper");
/**
 * CompiledPass forms an abstract base class for the default compiled pass materials provided by Away3D,
 * using material methods to define their appearance.
 */
var TriangleBasicPass = (function (_super) {
    __extends(TriangleBasicPass, _super);
    /**
     * Creates a new CompiledPass object.
     *
     * @param material The material to which this pass belongs.
     */
    function TriangleBasicPass() {
        _super.call(this);
        this._diffuseColor = 0xffffff;
        this._diffuseR = 1;
        this._diffuseG = 1;
        this._diffuseB = 1;
        this._diffuseA = 1;
    }
    Object.defineProperty(TriangleBasicPass.prototype, "diffuseAlpha", {
        /**
         * The alpha component of the diffuse reflection.
         */
        get: function () {
            return this._diffuseA;
        },
        set: function (value) {
            this._diffuseA = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TriangleBasicPass.prototype, "diffuseColor", {
        /**
         * The color of the diffuse reflection when not using a texture.
         */
        get: function () {
            return this._diffuseColor;
        },
        set: function (diffuseColor) {
            this._diffuseColor = diffuseColor;
            this._diffuseR = ((this._diffuseColor >> 16) & 0xff) / 0xff;
            this._diffuseG = ((this._diffuseColor >> 8) & 0xff) / 0xff;
            this._diffuseB = (this._diffuseColor & 0xff) / 0xff;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @inheritDoc
     */
    TriangleBasicPass.prototype._iGetFragmentCode = function (shaderObject, regCache, sharedReg) {
        var code = "";
        var targetReg = sharedReg.shadedTarget;
        var diffuseInputReg;
        if (shaderObject.texture != null) {
            diffuseInputReg = regCache.getFreeTextureReg();
            this._texturesIndex = diffuseInputReg.index;
            code += ShaderCompilerHelper.getTex2DSampleCode(targetReg, sharedReg, diffuseInputReg, shaderObject.texture, shaderObject.useSmoothTextures, shaderObject.repeatTextures, shaderObject.useMipmapping);
            if (shaderObject.alphaThreshold > 0) {
                var cutOffReg = regCache.getFreeFragmentConstant();
                this._fragmentConstantsIndex = cutOffReg.index * 4;
                code += "sub " + targetReg + ".w, " + targetReg + ".w, " + cutOffReg + ".x\n" + "kil " + targetReg + ".w\n" + "add " + targetReg + ".w, " + targetReg + ".w, " + cutOffReg + ".x\n";
            }
        }
        else {
            diffuseInputReg = regCache.getFreeFragmentConstant();
            this._fragmentConstantsIndex = diffuseInputReg.index * 4;
            code += "mov " + targetReg + ", " + diffuseInputReg + "\n";
        }
        return code;
    };
    TriangleBasicPass.prototype._iIncludeDependencies = function (dependencyCounter) {
        if (dependencyCounter.texture != null)
            dependencyCounter.uvDependencies++;
    };
    /**
     * @inheritDoc
     */
    TriangleBasicPass.prototype._iActivate = function (pass, renderer, camera) {
        _super.prototype._iActivate.call(this, pass, renderer, camera);
        var shaderObject = pass.shaderObject;
        if (shaderObject.texture != null) {
            renderer.context.setSamplerStateAt(this._texturesIndex, shaderObject.repeatTextures ? ContextGLWrapMode.REPEAT : ContextGLWrapMode.CLAMP, shaderObject.useSmoothTextures ? ContextGLTextureFilter.LINEAR : ContextGLTextureFilter.NEAREST, shaderObject.useMipmapping ? ContextGLMipFilter.MIPLINEAR : ContextGLMipFilter.MIPNONE);
            renderer.stage.activateTexture(this._texturesIndex, shaderObject.texture);
            if (shaderObject.alphaThreshold > 0)
                shaderObject.fragmentConstantData[this._fragmentConstantsIndex] = shaderObject.alphaThreshold;
        }
        else {
            var index = this._fragmentConstantsIndex;
            var data = shaderObject.fragmentConstantData;
            data[index] = this._diffuseR;
            data[index + 1] = this._diffuseG;
            data[index + 2] = this._diffuseB;
            data[index + 3] = this._diffuseA;
        }
    };
    return TriangleBasicPass;
})(MaterialPassGLBase);
module.exports = TriangleBasicPass;

//# sourceMappingURL=data:application/json;base64,