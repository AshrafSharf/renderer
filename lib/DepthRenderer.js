var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var RendererBase = require("awayjs-renderergl/lib/base/RendererBase");
/**
 * The DepthRenderer class renders 32-bit depth information encoded as RGBA
 *
 * @class away.render.DepthRenderer
 */
var DepthRenderer = (function (_super) {
    __extends(DepthRenderer, _super);
    /**
     * Creates a new DepthRenderer object.
     * @param renderBlended Indicates whether semi-transparent objects should be rendered.
     * @param distanceBased Indicates whether the written depth value is distance-based or projected depth-based
     */
    function DepthRenderer(rendererPoolClass, stage) {
        if (rendererPoolClass === void 0) { rendererPoolClass = null; }
        if (stage === void 0) { stage = null; }
        _super.call(this, rendererPoolClass, stage);
        this._iBackgroundR = 1;
        this._iBackgroundG = 1;
        this._iBackgroundB = 1;
    }
    DepthRenderer.prototype._pGetRenderObject = function (renderable, renderObjectOwner) {
        return renderable._pool.getDepthRenderObject(renderObjectOwner);
    };
    return DepthRenderer;
})(RendererBase);
module.exports = DepthRenderer;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9EZXB0aFJlbmRlcmVyLnRzIl0sIm5hbWVzIjpbIkRlcHRoUmVuZGVyZXIiLCJEZXB0aFJlbmRlcmVyLmNvbnN0cnVjdG9yIiwiRGVwdGhSZW5kZXJlci5fcEdldFJlbmRlck9iamVjdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBVUEsSUFBTyxZQUFZLFdBQWUseUNBQXlDLENBQUMsQ0FBQztBQU83RSxBQUtBOzs7O0dBREc7SUFDRyxhQUFhO0lBQVNBLFVBQXRCQSxhQUFhQSxVQUFxQkE7SUFFdkNBOzs7O09BSUdBO0lBQ0hBLFNBUEtBLGFBQWFBLENBT05BLGlCQUEyQ0EsRUFBRUEsS0FBa0JBO1FBQS9EQyxpQ0FBMkNBLEdBQTNDQSx3QkFBMkNBO1FBQUVBLHFCQUFrQkEsR0FBbEJBLFlBQWtCQTtRQUUxRUEsa0JBQU1BLGlCQUFpQkEsRUFBRUEsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFFaENBLElBQUlBLENBQUNBLGFBQWFBLEdBQUdBLENBQUNBLENBQUNBO1FBQ3ZCQSxJQUFJQSxDQUFDQSxhQUFhQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUN2QkEsSUFBSUEsQ0FBQ0EsYUFBYUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7SUFFeEJBLENBQUNBO0lBRU1ELHlDQUFpQkEsR0FBeEJBLFVBQXlCQSxVQUF5QkEsRUFBRUEsaUJBQW9DQTtRQUV2RkUsTUFBTUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsS0FBS0EsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxpQkFBaUJBLENBQUNBLENBQUNBO0lBQ2pFQSxDQUFDQTtJQUNGRixvQkFBQ0E7QUFBREEsQ0FyQkEsQUFxQkNBLEVBckIyQixZQUFZLEVBcUJ2QztBQUVELEFBQXVCLGlCQUFkLGFBQWEsQ0FBQyIsImZpbGUiOiJEZXB0aFJlbmRlcmVyLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZXh0dXJlUHJveHlCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvdGV4dHVyZXMvVGV4dHVyZVByb3h5QmFzZVwiKTtcclxuXHJcbmltcG9ydCBDb250ZXh0R0xCbGVuZEZhY3Rvclx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL0NvbnRleHRHTEJsZW5kRmFjdG9yXCIpO1xyXG5pbXBvcnQgQ29udGV4dEdMQ29tcGFyZU1vZGVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYmFzZS9Db250ZXh0R0xDb21wYXJlTW9kZVwiKTtcclxuaW1wb3J0IFN0YWdlXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvU3RhZ2VcIik7XHJcblxyXG5pbXBvcnQgSVJlbmRlck9iamVjdE93bmVyXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2Jhc2UvSVJlbmRlck9iamVjdE93bmVyXCIpO1xyXG5pbXBvcnQgTWF0ZXJpYWxCYXNlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9tYXRlcmlhbHMvTWF0ZXJpYWxCYXNlXCIpO1xyXG5pbXBvcnQgRW50aXR5Q29sbGVjdG9yXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvdHJhdmVyc2UvRW50aXR5Q29sbGVjdG9yXCIpO1xyXG5cclxuaW1wb3J0IFJlbmRlcmVyQmFzZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYmFzZS9SZW5kZXJlckJhc2VcIik7XHJcbmltcG9ydCBSZW5kZXJPYmplY3RCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vUmVuZGVyT2JqZWN0QmFzZVwiKTtcclxuaW1wb3J0IFJlbmRlck9iamVjdFBvb2xcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9SZW5kZXJPYmplY3RQb29sXCIpO1xyXG5pbXBvcnQgUmVuZGVyYWJsZUJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9wb29sL1JlbmRlcmFibGVCYXNlXCIpO1xyXG5pbXBvcnQgSVJlbmRlcmVyUG9vbENsYXNzXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL3Bvb2wvSVJlbmRlcmVyUG9vbENsYXNzXCIpO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgRGVwdGhSZW5kZXJlciBjbGFzcyByZW5kZXJzIDMyLWJpdCBkZXB0aCBpbmZvcm1hdGlvbiBlbmNvZGVkIGFzIFJHQkFcclxuICpcclxuICogQGNsYXNzIGF3YXkucmVuZGVyLkRlcHRoUmVuZGVyZXJcclxuICovXHJcbmNsYXNzIERlcHRoUmVuZGVyZXIgZXh0ZW5kcyBSZW5kZXJlckJhc2Vcclxue1xyXG5cdC8qKlxyXG5cdCAqIENyZWF0ZXMgYSBuZXcgRGVwdGhSZW5kZXJlciBvYmplY3QuXHJcblx0ICogQHBhcmFtIHJlbmRlckJsZW5kZWQgSW5kaWNhdGVzIHdoZXRoZXIgc2VtaS10cmFuc3BhcmVudCBvYmplY3RzIHNob3VsZCBiZSByZW5kZXJlZC5cclxuXHQgKiBAcGFyYW0gZGlzdGFuY2VCYXNlZCBJbmRpY2F0ZXMgd2hldGhlciB0aGUgd3JpdHRlbiBkZXB0aCB2YWx1ZSBpcyBkaXN0YW5jZS1iYXNlZCBvciBwcm9qZWN0ZWQgZGVwdGgtYmFzZWRcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihyZW5kZXJlclBvb2xDbGFzczpJUmVuZGVyZXJQb29sQ2xhc3MgPSBudWxsLCBzdGFnZTpTdGFnZSA9IG51bGwpXHJcblx0e1xyXG5cdFx0c3VwZXIocmVuZGVyZXJQb29sQ2xhc3MsIHN0YWdlKTtcclxuXHJcblx0XHR0aGlzLl9pQmFja2dyb3VuZFIgPSAxO1xyXG5cdFx0dGhpcy5faUJhY2tncm91bmRHID0gMTtcclxuXHRcdHRoaXMuX2lCYWNrZ3JvdW5kQiA9IDE7XHJcblxyXG5cdH1cclxuXHJcblx0cHVibGljIF9wR2V0UmVuZGVyT2JqZWN0KHJlbmRlcmFibGU6UmVuZGVyYWJsZUJhc2UsIHJlbmRlck9iamVjdE93bmVyOklSZW5kZXJPYmplY3RPd25lcik6UmVuZGVyT2JqZWN0QmFzZVxyXG5cdHtcclxuXHRcdHJldHVybiByZW5kZXJhYmxlLl9wb29sLmdldERlcHRoUmVuZGVyT2JqZWN0KHJlbmRlck9iamVjdE93bmVyKTtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCA9IERlcHRoUmVuZGVyZXI7Il19