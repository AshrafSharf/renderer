var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var RendererBase = require("awayjs-renderergl/lib/base/RendererBase");
/**
 * The DepthRenderer class renders 32-bit depth information encoded as RGBA
 *
 * @class away.render.DepthRenderer
 */
var DepthRenderer = (function (_super) {
    __extends(DepthRenderer, _super);
    /**
     * Creates a new DepthRenderer object.
     * @param renderBlended Indicates whether semi-transparent objects should be rendered.
     * @param distanceBased Indicates whether the written depth value is distance-based or projected depth-based
     */
    function DepthRenderer(rendererPoolClass, stage) {
        if (rendererPoolClass === void 0) { rendererPoolClass = null; }
        if (stage === void 0) { stage = null; }
        _super.call(this, rendererPoolClass, stage);
        this._iBackgroundR = 1;
        this._iBackgroundG = 1;
        this._iBackgroundB = 1;
    }
    DepthRenderer.prototype._pGetRenderObject = function (renderable, renderObjectOwner) {
        return renderable._pool.getDepthRenderObject(renderObjectOwner);
    };
    return DepthRenderer;
})(RendererBase);
module.exports = DepthRenderer;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9kZXB0aHJlbmRlcmVyLnRzIl0sIm5hbWVzIjpbIkRlcHRoUmVuZGVyZXIiLCJEZXB0aFJlbmRlcmVyLmNvbnN0cnVjdG9yIiwiRGVwdGhSZW5kZXJlci5fcEdldFJlbmRlck9iamVjdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBVUEsSUFBTyxZQUFZLFdBQWUseUNBQXlDLENBQUMsQ0FBQztBQU83RSxBQUtBOzs7O0dBREc7SUFDRyxhQUFhO0lBQVNBLFVBQXRCQSxhQUFhQSxVQUFxQkE7SUFFdkNBOzs7O09BSUdBO0lBQ0hBLFNBUEtBLGFBQWFBLENBT05BLGlCQUEyQ0EsRUFBRUEsS0FBa0JBO1FBQS9EQyxpQ0FBMkNBLEdBQTNDQSx3QkFBMkNBO1FBQUVBLHFCQUFrQkEsR0FBbEJBLFlBQWtCQTtRQUUxRUEsa0JBQU1BLGlCQUFpQkEsRUFBRUEsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFFaENBLElBQUlBLENBQUNBLGFBQWFBLEdBQUdBLENBQUNBLENBQUNBO1FBQ3ZCQSxJQUFJQSxDQUFDQSxhQUFhQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUN2QkEsSUFBSUEsQ0FBQ0EsYUFBYUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7SUFFeEJBLENBQUNBO0lBRU1ELHlDQUFpQkEsR0FBeEJBLFVBQXlCQSxVQUF5QkEsRUFBRUEsaUJBQW9DQTtRQUV2RkUsTUFBTUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsS0FBS0EsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxpQkFBaUJBLENBQUNBLENBQUNBO0lBQ2pFQSxDQUFDQTtJQUNGRixvQkFBQ0E7QUFBREEsQ0FyQkEsQUFxQkNBLEVBckIyQixZQUFZLEVBcUJ2QztBQUVELEFBQXVCLGlCQUFkLGFBQWEsQ0FBQyIsImZpbGUiOiJEZXB0aFJlbmRlcmVyLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZXh0dXJlUHJveHlCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvdGV4dHVyZXMvVGV4dHVyZVByb3h5QmFzZVwiKTtcblxuaW1wb3J0IENvbnRleHRHTEJsZW5kRmFjdG9yXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvQ29udGV4dEdMQmxlbmRGYWN0b3JcIik7XG5pbXBvcnQgQ29udGV4dEdMQ29tcGFyZU1vZGVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYmFzZS9Db250ZXh0R0xDb21wYXJlTW9kZVwiKTtcbmltcG9ydCBTdGFnZVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL1N0YWdlXCIpO1xuXG5pbXBvcnQgSVJlbmRlck9iamVjdE93bmVyXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2Jhc2UvSVJlbmRlck9iamVjdE93bmVyXCIpO1xuaW1wb3J0IE1hdGVyaWFsQmFzZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvbWF0ZXJpYWxzL01hdGVyaWFsQmFzZVwiKTtcbmltcG9ydCBFbnRpdHlDb2xsZWN0b3JcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi90cmF2ZXJzZS9FbnRpdHlDb2xsZWN0b3JcIik7XG5cbmltcG9ydCBSZW5kZXJlckJhc2VcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2Jhc2UvUmVuZGVyZXJCYXNlXCIpO1xuaW1wb3J0IFJlbmRlck9iamVjdEJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9SZW5kZXJPYmplY3RCYXNlXCIpO1xuaW1wb3J0IFJlbmRlck9iamVjdFBvb2xcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9SZW5kZXJPYmplY3RQb29sXCIpO1xuaW1wb3J0IFJlbmRlcmFibGVCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvcG9vbC9SZW5kZXJhYmxlQmFzZVwiKTtcbmltcG9ydCBJUmVuZGVyZXJQb29sQ2xhc3NcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvcG9vbC9JUmVuZGVyZXJQb29sQ2xhc3NcIik7XG5cblxuLyoqXG4gKiBUaGUgRGVwdGhSZW5kZXJlciBjbGFzcyByZW5kZXJzIDMyLWJpdCBkZXB0aCBpbmZvcm1hdGlvbiBlbmNvZGVkIGFzIFJHQkFcbiAqXG4gKiBAY2xhc3MgYXdheS5yZW5kZXIuRGVwdGhSZW5kZXJlclxuICovXG5jbGFzcyBEZXB0aFJlbmRlcmVyIGV4dGVuZHMgUmVuZGVyZXJCYXNlXG57XG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgbmV3IERlcHRoUmVuZGVyZXIgb2JqZWN0LlxuXHQgKiBAcGFyYW0gcmVuZGVyQmxlbmRlZCBJbmRpY2F0ZXMgd2hldGhlciBzZW1pLXRyYW5zcGFyZW50IG9iamVjdHMgc2hvdWxkIGJlIHJlbmRlcmVkLlxuXHQgKiBAcGFyYW0gZGlzdGFuY2VCYXNlZCBJbmRpY2F0ZXMgd2hldGhlciB0aGUgd3JpdHRlbiBkZXB0aCB2YWx1ZSBpcyBkaXN0YW5jZS1iYXNlZCBvciBwcm9qZWN0ZWQgZGVwdGgtYmFzZWRcblx0ICovXG5cdGNvbnN0cnVjdG9yKHJlbmRlcmVyUG9vbENsYXNzOklSZW5kZXJlclBvb2xDbGFzcyA9IG51bGwsIHN0YWdlOlN0YWdlID0gbnVsbClcblx0e1xuXHRcdHN1cGVyKHJlbmRlcmVyUG9vbENsYXNzLCBzdGFnZSk7XG5cblx0XHR0aGlzLl9pQmFja2dyb3VuZFIgPSAxO1xuXHRcdHRoaXMuX2lCYWNrZ3JvdW5kRyA9IDE7XG5cdFx0dGhpcy5faUJhY2tncm91bmRCID0gMTtcblxuXHR9XG5cblx0cHVibGljIF9wR2V0UmVuZGVyT2JqZWN0KHJlbmRlcmFibGU6UmVuZGVyYWJsZUJhc2UsIHJlbmRlck9iamVjdE93bmVyOklSZW5kZXJPYmplY3RPd25lcik6UmVuZGVyT2JqZWN0QmFzZVxuXHR7XG5cdFx0cmV0dXJuIHJlbmRlcmFibGUuX3Bvb2wuZ2V0RGVwdGhSZW5kZXJPYmplY3QocmVuZGVyT2JqZWN0T3duZXIpO1xuXHR9XG59XG5cbmV4cG9ydCA9IERlcHRoUmVuZGVyZXI7Il19